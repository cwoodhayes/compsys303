
cs303_a1.elf:     file format elf32-littlenios2
cs303_a1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004938 memsz 0x00004938 flags r-x
    LOAD off    0x00005958 vaddr 0x00804958 paddr 0x008061c4 align 2**12
         filesz 0x0000186c memsz 0x0000186c flags rw-
    LOAD off    0x00007a30 vaddr 0x00807a30 paddr 0x00807a30 align 2**12
         filesz 0x00000000 memsz 0x00000300 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000044d8  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002cc  0080468c  0080468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000186c  00804958  008061c4  00005958  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  00807a30  00807a30  00007a30  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000698  00000000  00000000  000071e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000c0f  00000000  00000000  00007880  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000dcae  00000000  00000000  0000848f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003267  00000000  00000000  0001613d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000088ff  00000000  00000000  000193a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000eb0  00000000  00000000  00021ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000db4  00000000  00000000  00022b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017f4  00000000  00000000  00023908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000250fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00025160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00027735  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00027738  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002773b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002773c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002773d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00027741  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00027745  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00027749  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00027752  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002775b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00027764  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000d  00000000  00000000  0002776a  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062390  00000000  00000000  00027777  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080468c l    d  .rodata	00000000 .rodata
00804958 l    d  .rwdata	00000000 .rwdata
00807a30 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00807a30 l     O .bss	00000004 tlc_timer_event
00807a34 l     O .bss	00000004 camera_timer_event
00807a38 l     O .bss	00000004 pedestrianNS
00807a3c l     O .bss	00000004 pedestrianEW
00807a40 l     O .bss	00000004 vehicle_detected
00804958 l     O .rwdata	00000018 timeout
00804970 l     O .rwdata	0000001c timeout_buf
00806188 l     O .rwdata	00000006 traffic_lights
00807a44 l     O .bss	00000004 mode
0080498c l     O .rwdata	00000010 proc_state
00807a48 l     O .bss	00000004 state.2909
00807a4c l     O .bss	00000004 state.2953
00807a70 l     O .bss	00000018 tlc_timer
00807a88 l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 alt_load.c
00800680 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080499c l     O .rwdata	00001060 jtag_uart
008059fc l     O .rwdata	00000120 lcd
00805b1c l     O .rwdata	000000c4 uart
00800820 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00800a60 l     F .text	00000228 altera_avalon_jtag_uart_irq
00800c88 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00806190 l     O .rwdata	00000004 colstart
00801304 l     F .text	000000b8 lcd_write_command
008013bc l     F .text	000000d4 lcd_write_data
00801490 l     F .text	000000c4 lcd_clear_screen
00801554 l     F .text	000001ec lcd_repaint_screen
00801740 l     F .text	000000c8 lcd_scroll_up
00801808 l     F .text	000002d0 lcd_handle_escape
00801fe4 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00802244 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00802504 l     F .text	0000009c altera_avalon_uart_irq
008025a0 l     F .text	000000e0 altera_avalon_uart_rxirq
00802680 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00802a6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00802c94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00802f44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802fe8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008030c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008034ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00803628 l     F .text	000000dc alt_file_locked
0080388c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008047d4 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00805d88 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00804328 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
008044dc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00804628 l     F .text	00000040 alt_sim_halt
0080021c g     F .text	00000020 lcd_set_mode
008006ec g     F .text	0000006c alt_main
00807aa0 g     O .bss	00000100 alt_irq
008004f0 g     F .text	0000001c clear_vehicle_detected
008061c4 g       *ABS*	00000000 __flash_rwdata_start
00807a50 g     O .bss	00000004 fp
00800528 g     F .text	0000001c is_vehicle_detected
00800420 g     F .text	00000020 buffer_timeout
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807a6c g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00807a58 g     O .bss	00000004 alt_argv
0080e188 g       *ABS*	00000000 _gp
00803af0 g     F .text	00000030 usleep
00800264 g     F .text	00000020 handle_mode_button
008002d4 g     F .text	00000038 tlc_timer_isr
00805c08 g     O .rwdata	00000180 alt_fd_list
00803c8c g     F .text	00000094 alt_find_dev
00804048 g     F .text	000000a0 memcpy
0080045c g     F .text	00000038 camera_timer_isr
008035b0 g     F .text	00000078 alt_io_redirect
0080468c g       *ABS*	00000000 __DTOR_END__
00800328 g     F .text	00000050 pedestrian_tlc
00800ea0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804618 g     F .text	00000008 __udivsi3
00800544 g     F .text	0000001c is_vehicle_left
00803ef8 g     F .text	00000090 alt_icache_flush
0080039c g     F .text	00000020 configurable_tlc
008061a4 g     O .rwdata	00000004 alt_max_fd
008004d4 g     F .text	0000001c handle_vehicle_button
008061c0 g     O .rwdata	00000004 _global_impure_ptr
00807d30 g       *ABS*	00000000 __bss_end
008033f4 g     F .text	000000f8 alt_iic_isr_register
008039e4 g     F .text	0000010c alt_tick
0080243c g     F .text	000000c8 altera_avalon_uart_init
008061b8 g     O .rwdata	00000004 __ctype_ptr
008033ac g     F .text	00000048 alt_ic_irq_enabled
0080394c g     F .text	00000098 alt_alarm_stop
00800494 g     F .text	00000040 camera_tlc
00807a60 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00805be0 g     O .rwdata	00000028 alt_dev_null
00802fa4 g     F .text	00000044 alt_dcache_flush_all
008061c4 g       *ABS*	00000000 __ram_rwdata_end
0080619c g     O .rwdata	00000008 alt_dev_list
00804958 g       *ABS*	00000000 __ram_rodata_end
00804620 g     F .text	00000008 __umodsi3
00807d30 g       *ABS*	00000000 end
00801ad8 g     F .text	0000050c altera_avalon_lcd_16207_write
00802acc g     F .text	000001c8 altera_avalon_uart_write
008009a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00804688 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008022b4 g     F .text	00000090 alt_avalon_timer_sc_init
0080239c g     F .text	00000058 altera_avalon_uart_write_fd
008023f4 g     F .text	00000048 altera_avalon_uart_close_fd
008010c4 g     F .text	00000240 altera_avalon_jtag_uart_write
0080432c g     F .text	000001b0 __call_exitprocs
008001b4 g     F .text	0000004c _start
00807a64 g     O .bss	00000004 _alt_tick_rate
00807a68 g     O .bss	00000004 _alt_nticks
0080078c g     F .text	00000094 alt_sys_init
008041f4 g     F .text	00000134 __register_exitproc
00800d38 g     F .text	00000074 altera_avalon_jtag_uart_close
00804958 g       *ABS*	00000000 __ram_rwdata_start
0080468c g       *ABS*	00000000 __ram_rodata_start
00800858 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00803e40 g     F .text	000000b8 alt_get_fd
00803b40 g     F .text	0000014c alt_busy_sleep
00803fd4 g     F .text	00000074 memcmp
00800908 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00807d30 g       *ABS*	00000000 __alt_stack_base
00800950 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00803d20 g     F .text	00000120 alt_find_file
00803014 g     F .text	000000b4 alt_dev_llist_insert
00807a30 g       *ABS*	00000000 __bss_start
008040e8 g     F .text	00000098 memset
00800560 g     F .text	000000a0 main
00807a5c g     O .bss	00000004 alt_envp
008008b0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008020b0 g     F .text	0000013c altera_avalon_lcd_16207_init
008003bc g     F .text	00000048 config_tlc
00807ba0 g     O .bss	00000190 _atexit0
0080023c g     F .text	00000028 buttons_driver
008061a8 g     O .rwdata	00000004 alt_errno
00800378 g     F .text	00000024 NSEW_ped_isr
00804558 g     F .text	00000060 __divsi3
00800440 g     F .text	0000001c update_timeout
0080468c g       *ABS*	00000000 __CTOR_END__
0080468c g       *ABS*	00000000 __flash_rodata_start
0080468c g       *ABS*	00000000 __DTOR_LIST__
00800758 g     F .text	00000034 alt_irq_init
008038ec g     F .text	00000060 alt_release_fd
00803f88 g     F .text	00000014 atexit
008061bc g     O .rwdata	00000004 _impure_ptr
00807a54 g     O .bss	00000004 alt_argc
0080318c g     F .text	00000064 _do_dtors
00800404 g     F .text	0000001c timeout_data_handler
00800020 g       .exceptions	00000000 alt_irq_entry
008021ec g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00806194 g     O .rwdata	00000008 alt_fs_list
0080050c g     F .text	0000001c vehicle_checked
00800020 g       *ABS*	00000000 __ram_exceptions_start
00803220 g     F .text	00000050 alt_ic_isr_register
008061c4 g       *ABS*	00000000 _edata
00802344 g     F .text	00000058 altera_avalon_uart_read_fd
00807d30 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00800dac g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080330c g     F .text	000000a0 alt_ic_irq_disable
00803b20 g     F .text	00000020 altera_nios2_qsys_irq_init
00803f9c g     F .text	00000038 exit
00800284 g     F .text	00000050 simple_tlc
008045b8 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800200 g     F .text	0000001c init_tlc
008046d0 g     O .rodata	00000101 _ctype_
008027dc g     F .text	00000060 altera_avalon_uart_close
00804668 g     F .text	00000020 _exit
00802cf4 g     F .text	00000154 alt_alarm_start
00804180 g     F .text	00000074 strlen
00803704 g     F .text	00000188 open
008031f0 g     F .text	00000030 alt_icache_flush_all
008061ac g     O .rwdata	00000004 alt_priority_mask
00803270 g     F .text	0000009c alt_ic_irq_enable
0080283c g     F .text	00000230 altera_avalon_uart_read
008061b0 g     O .rwdata	00000008 alt_alarm_list
00803128 g     F .text	00000064 _do_ctors
00802e48 g     F .text	000000fc close
0080030c g     F .text	0000001c init_buttons_pio
00800600 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02034 	movhi	r3,128
  800134:	18dea804 	addi	r3,r3,31392
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02034 	movhi	r3,128
  80014c:	18dea804 	addi	r3,r3,31392
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001d0:	d6b86214 	ori	gp,gp,57736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	109e8c14 	ori	r2,r2,31280

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18df4c14 	ori	r3,r3,32048

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08006000 	call	800600 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	08006ec0 	call	8006ec <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int proc_state[OPERATION_MODES + 1] = {-1, -1, -1, -1};

// Initialize the traffic light controller
// for any / all modes
void init_tlc(void)
{
  800200:	deffff04 	addi	sp,sp,-4
  800204:	df000015 	stw	fp,0(sp)
  800208:	d839883a 	mov	fp,sp

}
  80020c:	e037883a 	mov	sp,fp
  800210:	df000017 	ldw	fp,0(sp)
  800214:	dec00104 	addi	sp,sp,4
  800218:	f800283a 	ret

0080021c <lcd_set_mode>:
/* DESCRIPTION: Writes the mode to the LCD screen
 * PARAMETER:   mode - the current mode
 * RETURNS:     none
 */
void lcd_set_mode(unsigned int mode)
{
  80021c:	defffe04 	addi	sp,sp,-8
  800220:	df000115 	stw	fp,4(sp)
  800224:	df000104 	addi	fp,sp,4
  800228:	e13fff15 	stw	r4,-4(fp)

}
  80022c:	e037883a 	mov	sp,fp
  800230:	df000017 	ldw	fp,0(sp)
  800234:	dec00104 	addi	sp,sp,4
  800238:	f800283a 	ret

0080023c <buttons_driver>:
/* DESCRIPTION: Performs button-press detection and debouncing
 * PARAMETER:   button - referenced argument to indicate the state of the button
 * RETURNS:     none
 */
void buttons_driver(int* button)
{
  80023c:	defffe04 	addi	sp,sp,-8
  800240:	df000115 	stw	fp,4(sp)
  800244:	df000104 	addi	fp,sp,4
  800248:	e13fff15 	stw	r4,-4(fp)
	// Persistant state of 'buttons_driver'
	static int state = 0;

	*button = 0;	// no assumption is made on intial value of *button
  80024c:	e0bfff17 	ldw	r2,-4(fp)
  800250:	10000015 	stw	zero,0(r2)
	// Debounce state machine
		// call handle_mode_button()
}
  800254:	e037883a 	mov	sp,fp
  800258:	df000017 	ldw	fp,0(sp)
  80025c:	dec00104 	addi	sp,sp,4
  800260:	f800283a 	ret

00800264 <handle_mode_button>:
/* DESCRIPTION: Updates the ID of the task to be executed and the 7-segment display
 * PARAMETER:   taskid - current task ID
 * RETURNS:     none
 */
void handle_mode_button(unsigned int* taskid)
{
  800264:	defffe04 	addi	sp,sp,-8
  800268:	df000115 	stw	fp,4(sp)
  80026c:	df000104 	addi	fp,sp,4
  800270:	e13fff15 	stw	r4,-4(fp)
	// Increment mode
	// Update Mode-display
}
  800274:	e037883a 	mov	sp,fp
  800278:	df000017 	ldw	fp,0(sp)
  80027c:	dec00104 	addi	sp,sp,4
  800280:	f800283a 	ret

00800284 <simple_tlc>:
/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state)
{
  800284:	defffd04 	addi	sp,sp,-12
  800288:	dfc00215 	stw	ra,8(sp)
  80028c:	df000115 	stw	fp,4(sp)
  800290:	df000104 	addi	fp,sp,4
  800294:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800298:	e0bfff17 	ldw	r2,-4(fp)
  80029c:	10800017 	ldw	r2,0(r2)
  8002a0:	10bfffd8 	cmpnei	r2,r2,-1
  8002a4:	1000061e 	bne	r2,zero,8002c0 <simple_tlc+0x3c>
		// Process initialization state
		init_tlc();
  8002a8:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
  8002b0:	10800017 	ldw	r2,0(r2)
  8002b4:	10c00044 	addi	r3,r2,1
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	10c00015 	stw	r3,0(r2)
	// If the timeout has occured
	/*
		// Increase state number (within bounds)
		// Restart timer with new timeout value
	*/
}
  8002c0:	e037883a 	mov	sp,fp
  8002c4:	dfc00117 	ldw	ra,4(sp)
  8002c8:	df000017 	ldw	fp,0(sp)
  8002cc:	dec00204 	addi	sp,sp,8
  8002d0:	f800283a 	ret

008002d4 <tlc_timer_isr>:
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context)
{
  8002d4:	defffd04 	addi	sp,sp,-12
  8002d8:	df000215 	stw	fp,8(sp)
  8002dc:	df000204 	addi	fp,sp,8
  8002e0:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  8002e4:	e0bfff17 	ldw	r2,-4(fp)
  8002e8:	e0bffe15 	stw	r2,-8(fp)
	*trigger = 1;
  8002ec:	e0fffe17 	ldw	r3,-8(fp)
  8002f0:	00800044 	movi	r2,1
  8002f4:	18800015 	stw	r2,0(r3)
	return 0;
  8002f8:	0005883a 	mov	r2,zero
}
  8002fc:	e037883a 	mov	sp,fp
  800300:	df000017 	ldw	fp,0(sp)
  800304:	dec00104 	addi	sp,sp,4
  800308:	f800283a 	ret

0080030c <init_buttons_pio>:
/* DESCRIPTION: Initialize the interrupts for all buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void)
{
  80030c:	deffff04 	addi	sp,sp,-4
  800310:	df000015 	stw	fp,0(sp)
  800314:	d839883a 	mov	fp,sp
	// Initialize NS/EW pedestrian button
	// Reset the edge capture register

}
  800318:	e037883a 	mov	sp,fp
  80031c:	df000017 	ldw	fp,0(sp)
  800320:	dec00104 	addi	sp,sp,4
  800324:	f800283a 	ret

00800328 <pedestrian_tlc>:
/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state)
{
  800328:	defffd04 	addi	sp,sp,-12
  80032c:	dfc00215 	stw	ra,8(sp)
  800330:	df000115 	stw	fp,4(sp)
  800334:	df000104 	addi	fp,sp,4
  800338:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  80033c:	e0bfff17 	ldw	r2,-4(fp)
  800340:	10800017 	ldw	r2,0(r2)
  800344:	10bfffd8 	cmpnei	r2,r2,-1
  800348:	1000061e 	bne	r2,zero,800364 <pedestrian_tlc+0x3c>
		// Process initialization state
		init_tlc();
  80034c:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800350:	e0bfff17 	ldw	r2,-4(fp)
  800354:	10800017 	ldw	r2,0(r2)
  800358:	10c00044 	addi	r3,r2,1
  80035c:	e0bfff17 	ldw	r2,-4(fp)
  800360:	10c00015 	stw	r3,0(r2)

	// Same as simple TLC
	// with additional states / signals for Pedestrian crossings


}
  800364:	e037883a 	mov	sp,fp
  800368:	dfc00117 	ldw	ra,4(sp)
  80036c:	df000017 	ldw	fp,0(sp)
  800370:	dec00204 	addi	sp,sp,8
  800374:	f800283a 	ret

00800378 <NSEW_ped_isr>:
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id)
{
  800378:	defffd04 	addi	sp,sp,-12
  80037c:	df000215 	stw	fp,8(sp)
  800380:	df000204 	addi	fp,sp,8
  800384:	e13ffe15 	stw	r4,-8(fp)
  800388:	e17fff15 	stw	r5,-4(fp)
	// NOTE:
	// Cast context to volatile to avoid unwanted compiler optimization.
	// Store the value in the Button's edge capture register in *context


}
  80038c:	e037883a 	mov	sp,fp
  800390:	df000017 	ldw	fp,0(sp)
  800394:	dec00104 	addi	sp,sp,4
  800398:	f800283a 	ret

0080039c <configurable_tlc>:
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state)
{
  80039c:	defffe04 	addi	sp,sp,-8
  8003a0:	df000115 	stw	fp,4(sp)
  8003a4:	df000104 	addi	fp,sp,4
  8003a8:	e13fff15 	stw	r4,-4(fp)
		// Process initialization state
		return;
	}


}
  8003ac:	e037883a 	mov	sp,fp
  8003b0:	df000017 	ldw	fp,0(sp)
  8003b4:	dec00104 	addi	sp,sp,4
  8003b8:	f800283a 	ret

008003bc <config_tlc>:
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state)
{
  8003bc:	defffd04 	addi	sp,sp,-12
  8003c0:	df000215 	stw	fp,8(sp)
  8003c4:	df000204 	addi	fp,sp,8
  8003c8:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  8003cc:	e0bffe17 	ldw	r2,-8(fp)
  8003d0:	10800017 	ldw	r2,0(r2)
  8003d4:	10bfffd8 	cmpnei	r2,r2,-1
  8003d8:	1000031e 	bne	r2,zero,8003e8 <config_tlc+0x2c>
		// Process initialization state
		state = 0;
  8003dc:	d0263115 	stw	zero,-26428(gp)
		return 0;
  8003e0:	e03fff15 	stw	zero,-4(fp)
  8003e4:	00000206 	br	8003f0 <config_tlc+0x34>
	}

	return state;
  8003e8:	d0a63117 	ldw	r2,-26428(gp)
  8003ec:	e0bfff15 	stw	r2,-4(fp)
  8003f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8003f4:	e037883a 	mov	sp,fp
  8003f8:	df000017 	ldw	fp,0(sp)
  8003fc:	dec00104 	addi	sp,sp,4
  800400:	f800283a 	ret

00800404 <timeout_data_handler>:
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void)
{
  800404:	deffff04 	addi	sp,sp,-4
  800408:	df000015 	stw	fp,0(sp)
  80040c:	d839883a 	mov	fp,sp

}
  800410:	e037883a 	mov	sp,fp
  800414:	df000017 	ldw	fp,0(sp)
  800418:	dec00104 	addi	sp,sp,4
  80041c:	f800283a 	ret

00800420 <buffer_timeout>:
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(unsigned int value)
{
  800420:	defffe04 	addi	sp,sp,-8
  800424:	df000115 	stw	fp,4(sp)
  800428:	df000104 	addi	fp,sp,4
  80042c:	e13fff15 	stw	r4,-4(fp)

}
  800430:	e037883a 	mov	sp,fp
  800434:	df000017 	ldw	fp,0(sp)
  800438:	dec00104 	addi	sp,sp,4
  80043c:	f800283a 	ret

00800440 <update_timeout>:
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void)
{
  800440:	deffff04 	addi	sp,sp,-4
  800444:	df000015 	stw	fp,0(sp)
  800448:	d839883a 	mov	fp,sp

}
  80044c:	e037883a 	mov	sp,fp
  800450:	df000017 	ldw	fp,0(sp)
  800454:	dec00104 	addi	sp,sp,4
  800458:	f800283a 	ret

0080045c <camera_timer_isr>:
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context)
{
  80045c:	defffd04 	addi	sp,sp,-12
  800460:	df000215 	stw	fp,8(sp)
  800464:	df000204 	addi	fp,sp,8
  800468:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  80046c:	e0bfff17 	ldw	r2,-4(fp)
  800470:	e0bffe15 	stw	r2,-8(fp)
	*trigger = 1;
  800474:	e0fffe17 	ldw	r3,-8(fp)
  800478:	00800044 	movi	r2,1
  80047c:	18800015 	stw	r2,0(r3)
	return 0;
  800480:	0005883a 	mov	r2,zero
}
  800484:	e037883a 	mov	sp,fp
  800488:	df000017 	ldw	fp,0(sp)
  80048c:	dec00104 	addi	sp,sp,4
  800490:	f800283a 	ret

00800494 <camera_tlc>:
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state)
{
  800494:	defffd04 	addi	sp,sp,-12
  800498:	dfc00215 	stw	ra,8(sp)
  80049c:	df000115 	stw	fp,4(sp)
  8004a0:	df000104 	addi	fp,sp,4
  8004a4:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8004a8:	e0bfff17 	ldw	r2,-4(fp)
  8004ac:	10800017 	ldw	r2,0(r2)
  8004b0:	10bfffd8 	cmpnei	r2,r2,-1
  8004b4:	1000021e 	bne	r2,zero,8004c0 <camera_tlc+0x2c>
		configurable_tlc(state);
  8004b8:	e13fff17 	ldw	r4,-4(fp)
  8004bc:	080039c0 	call	80039c <configurable_tlc>
		return;
	}

}
  8004c0:	e037883a 	mov	sp,fp
  8004c4:	dfc00117 	ldw	ra,4(sp)
  8004c8:	df000017 	ldw	fp,0(sp)
  8004cc:	dec00204 	addi	sp,sp,8
  8004d0:	f800283a 	ret

008004d4 <handle_vehicle_button>:
/* DESCRIPTION: Simulates the entry and exit of vehicles at the intersection
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_vehicle_button(void)
{
  8004d4:	deffff04 	addi	sp,sp,-4
  8004d8:	df000015 	stw	fp,0(sp)
  8004dc:	d839883a 	mov	fp,sp

}
  8004e0:	e037883a 	mov	sp,fp
  8004e4:	df000017 	ldw	fp,0(sp)
  8004e8:	dec00104 	addi	sp,sp,4
  8004ec:	f800283a 	ret

008004f0 <clear_vehicle_detected>:

// set vehicle_detected to 'no vehicle' state
void clear_vehicle_detected(void)
{
  8004f0:	deffff04 	addi	sp,sp,-4
  8004f4:	df000015 	stw	fp,0(sp)
  8004f8:	d839883a 	mov	fp,sp
}
  8004fc:	e037883a 	mov	sp,fp
  800500:	df000017 	ldw	fp,0(sp)
  800504:	dec00104 	addi	sp,sp,4
  800508:	f800283a 	ret

0080050c <vehicle_checked>:
// set vehicle_detected to 'checking' state
void vehicle_checked(void)
{
  80050c:	deffff04 	addi	sp,sp,-4
  800510:	df000015 	stw	fp,0(sp)
  800514:	d839883a 	mov	fp,sp
}
  800518:	e037883a 	mov	sp,fp
  80051c:	df000017 	ldw	fp,0(sp)
  800520:	dec00104 	addi	sp,sp,4
  800524:	f800283a 	ret

00800528 <is_vehicle_detected>:
// return true or false if a vehicle has been detected
int is_vehicle_detected(void)
{
  800528:	deffff04 	addi	sp,sp,-4
  80052c:	df000015 	stw	fp,0(sp)
  800530:	d839883a 	mov	fp,sp
}
  800534:	e037883a 	mov	sp,fp
  800538:	df000017 	ldw	fp,0(sp)
  80053c:	dec00104 	addi	sp,sp,4
  800540:	f800283a 	ret

00800544 <is_vehicle_left>:
// return true or false if the vehicle has left the intersection yet
int is_vehicle_left(void)
{
  800544:	deffff04 	addi	sp,sp,-4
  800548:	df000015 	stw	fp,0(sp)
  80054c:	d839883a 	mov	fp,sp
}
  800550:	e037883a 	mov	sp,fp
  800554:	df000017 	ldw	fp,0(sp)
  800558:	dec00104 	addi	sp,sp,4
  80055c:	f800283a 	ret

00800560 <main>:




int main(void)
{
  800560:	defffc04 	addi	sp,sp,-16
  800564:	dfc00315 	stw	ra,12(sp)
  800568:	df000215 	stw	fp,8(sp)
  80056c:	df000204 	addi	fp,sp,8
	int buttons = 0;			// status of mode button
  800570:	e03ffe15 	stw	zero,-8(fp)

	lcd_set_mode(0);		// initialize lcd
  800574:	0009883a 	mov	r4,zero
  800578:	080021c0 	call	80021c <lcd_set_mode>
	init_buttons_pio();			// initialize buttons
  80057c:	080030c0 	call	80030c <init_buttons_pio>
  800580:	00000006 	br	800584 <main+0x24>
			// handle_mode_button to change state & display
		// if Car button pushed...
			// handle_vehicle_button

		// Execute the correct TLC
    	switch (mode) {
  800584:	d0a62f17 	ldw	r2,-26436(gp)
  800588:	e0bfff15 	stw	r2,-4(fp)
  80058c:	e0ffff17 	ldw	r3,-4(fp)
  800590:	18800060 	cmpeqi	r2,r3,1
  800594:	10000e1e 	bne	r2,zero,8005d0 <main+0x70>
  800598:	e0ffff17 	ldw	r3,-4(fp)
  80059c:	18800070 	cmpltui	r2,r3,1
  8005a0:	1000071e 	bne	r2,zero,8005c0 <main+0x60>
  8005a4:	e0ffff17 	ldw	r3,-4(fp)
  8005a8:	188000a0 	cmpeqi	r2,r3,2
  8005ac:	10000c1e 	bne	r2,zero,8005e0 <main+0x80>
  8005b0:	e0ffff17 	ldw	r3,-4(fp)
  8005b4:	188000e0 	cmpeqi	r2,r3,3
  8005b8:	10000d1e 	bne	r2,zero,8005f0 <main+0x90>
  8005bc:	003ff106 	br	800584 <main+0x24>
			case 0:
				simple_tlc(&proc_state[0]);
  8005c0:	01002034 	movhi	r4,128
  8005c4:	21126304 	addi	r4,r4,18828
  8005c8:	08002840 	call	800284 <simple_tlc>
				break;
  8005cc:	003fed06 	br	800584 <main+0x24>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  8005d0:	01002034 	movhi	r4,128
  8005d4:	21126404 	addi	r4,r4,18832
  8005d8:	08003280 	call	800328 <pedestrian_tlc>
				break;
  8005dc:	003fe906 	br	800584 <main+0x24>
			case 2:
				configurable_tlc(&proc_state[2]);
  8005e0:	01002034 	movhi	r4,128
  8005e4:	21126504 	addi	r4,r4,18836
  8005e8:	080039c0 	call	80039c <configurable_tlc>
				break;
  8005ec:	003fe506 	br	800584 <main+0x24>
			case 3:
				camera_tlc(&proc_state[3]);
  8005f0:	01002034 	movhi	r4,128
  8005f4:	21126604 	addi	r4,r4,18840
  8005f8:	08004940 	call	800494 <camera_tlc>
				break;
		}
		// Update Displays
	}
  8005fc:	003fe106 	br	800584 <main+0x24>

00800600 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800600:	defffe04 	addi	sp,sp,-8
  800604:	dfc00115 	stw	ra,4(sp)
  800608:	df000015 	stw	fp,0(sp)
  80060c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800610:	01002034 	movhi	r4,128
  800614:	21187104 	addi	r4,r4,25028
  800618:	01402034 	movhi	r5,128
  80061c:	29525604 	addi	r5,r5,18776
  800620:	01802034 	movhi	r6,128
  800624:	31987104 	addi	r6,r6,25028
  800628:	08006800 	call	800680 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80062c:	01002034 	movhi	r4,128
  800630:	21000804 	addi	r4,r4,32
  800634:	01402034 	movhi	r5,128
  800638:	29400804 	addi	r5,r5,32
  80063c:	01802034 	movhi	r6,128
  800640:	31806d04 	addi	r6,r6,436
  800644:	08006800 	call	800680 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800648:	01002034 	movhi	r4,128
  80064c:	2111a304 	addi	r4,r4,18060
  800650:	01402034 	movhi	r5,128
  800654:	2951a304 	addi	r5,r5,18060
  800658:	01802034 	movhi	r6,128
  80065c:	31925604 	addi	r6,r6,18776
  800660:	08006800 	call	800680 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800664:	0802fa40 	call	802fa4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  800668:	08031f00 	call	8031f0 <alt_icache_flush_all>
}
  80066c:	e037883a 	mov	sp,fp
  800670:	dfc00117 	ldw	ra,4(sp)
  800674:	df000017 	ldw	fp,0(sp)
  800678:	dec00204 	addi	sp,sp,8
  80067c:	f800283a 	ret

00800680 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800680:	defffc04 	addi	sp,sp,-16
  800684:	df000315 	stw	fp,12(sp)
  800688:	df000304 	addi	fp,sp,12
  80068c:	e13ffd15 	stw	r4,-12(fp)
  800690:	e17ffe15 	stw	r5,-8(fp)
  800694:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800698:	e0fffe17 	ldw	r3,-8(fp)
  80069c:	e0bffd17 	ldw	r2,-12(fp)
  8006a0:	18800e26 	beq	r3,r2,8006dc <alt_load_section+0x5c>
  {
    while( to != end )
  8006a4:	00000a06 	br	8006d0 <alt_load_section+0x50>
    {
      *to++ = *from++;
  8006a8:	e0bffd17 	ldw	r2,-12(fp)
  8006ac:	10c00017 	ldw	r3,0(r2)
  8006b0:	e0bffe17 	ldw	r2,-8(fp)
  8006b4:	10c00015 	stw	r3,0(r2)
  8006b8:	e0bffe17 	ldw	r2,-8(fp)
  8006bc:	10800104 	addi	r2,r2,4
  8006c0:	e0bffe15 	stw	r2,-8(fp)
  8006c4:	e0bffd17 	ldw	r2,-12(fp)
  8006c8:	10800104 	addi	r2,r2,4
  8006cc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8006d0:	e0fffe17 	ldw	r3,-8(fp)
  8006d4:	e0bfff17 	ldw	r2,-4(fp)
  8006d8:	18bff31e 	bne	r3,r2,8006a8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8006dc:	e037883a 	mov	sp,fp
  8006e0:	df000017 	ldw	fp,0(sp)
  8006e4:	dec00104 	addi	sp,sp,4
  8006e8:	f800283a 	ret

008006ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8006ec:	defffd04 	addi	sp,sp,-12
  8006f0:	dfc00215 	stw	ra,8(sp)
  8006f4:	df000115 	stw	fp,4(sp)
  8006f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8006fc:	0009883a 	mov	r4,zero
  800700:	08007580 	call	800758 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800704:	080078c0 	call	80078c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800708:	01002034 	movhi	r4,128
  80070c:	2111a304 	addi	r4,r4,18060
  800710:	01402034 	movhi	r5,128
  800714:	2951a304 	addi	r5,r5,18060
  800718:	01802034 	movhi	r6,128
  80071c:	3191a304 	addi	r6,r6,18060
  800720:	08035b00 	call	8035b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  800724:	08031280 	call	803128 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  800728:	01002034 	movhi	r4,128
  80072c:	210c6304 	addi	r4,r4,12684
  800730:	0803f880 	call	803f88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800734:	d1263317 	ldw	r4,-26420(gp)
  800738:	d1663417 	ldw	r5,-26416(gp)
  80073c:	d1a63517 	ldw	r6,-26412(gp)
  800740:	08005600 	call	800560 <main>
  800744:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  800748:	01000044 	movi	r4,1
  80074c:	0802e480 	call	802e48 <close>
  exit (result);
  800750:	e13fff17 	ldw	r4,-4(fp)
  800754:	0803f9c0 	call	803f9c <exit>

00800758 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800758:	defffd04 	addi	sp,sp,-12
  80075c:	dfc00215 	stw	ra,8(sp)
  800760:	df000115 	stw	fp,4(sp)
  800764:	df000104 	addi	fp,sp,4
  800768:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80076c:	0803b200 	call	803b20 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800770:	00800044 	movi	r2,1
  800774:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800778:	e037883a 	mov	sp,fp
  80077c:	dfc00117 	ldw	ra,4(sp)
  800780:	df000017 	ldw	fp,0(sp)
  800784:	dec00204 	addi	sp,sp,8
  800788:	f800283a 	ret

0080078c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80078c:	defffe04 	addi	sp,sp,-8
  800790:	dfc00115 	stw	ra,4(sp)
  800794:	df000015 	stw	fp,0(sp)
  800798:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80079c:	01004074 	movhi	r4,257
  8007a0:	21040804 	addi	r4,r4,4128
  8007a4:	000b883a 	mov	r5,zero
  8007a8:	01800084 	movi	r6,2
  8007ac:	01c0fa04 	movi	r7,1000
  8007b0:	08022b40 	call	8022b4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8007b4:	01002034 	movhi	r4,128
  8007b8:	21127104 	addi	r4,r4,18884
  8007bc:	000b883a 	mov	r5,zero
  8007c0:	01800044 	movi	r6,1
  8007c4:	08009a00 	call	8009a0 <altera_avalon_jtag_uart_init>
  8007c8:	01002034 	movhi	r4,128
  8007cc:	21126704 	addi	r4,r4,18844
  8007d0:	08008200 	call	800820 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8007d4:	01002034 	movhi	r4,128
  8007d8:	21168904 	addi	r4,r4,23076
  8007dc:	08020b00 	call	8020b0 <altera_avalon_lcd_16207_init>
  8007e0:	01002034 	movhi	r4,128
  8007e4:	21167f04 	addi	r4,r4,23036
  8007e8:	08008200 	call	800820 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8007ec:	01002034 	movhi	r4,128
  8007f0:	2116d104 	addi	r4,r4,23364
  8007f4:	000b883a 	mov	r5,zero
  8007f8:	000d883a 	mov	r6,zero
  8007fc:	080243c0 	call	80243c <altera_avalon_uart_init>
  800800:	01002034 	movhi	r4,128
  800804:	2116c704 	addi	r4,r4,23324
  800808:	08008200 	call	800820 <alt_dev_reg>
}
  80080c:	e037883a 	mov	sp,fp
  800810:	dfc00117 	ldw	ra,4(sp)
  800814:	df000017 	ldw	fp,0(sp)
  800818:	dec00204 	addi	sp,sp,8
  80081c:	f800283a 	ret

00800820 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  800820:	defffd04 	addi	sp,sp,-12
  800824:	dfc00215 	stw	ra,8(sp)
  800828:	df000115 	stw	fp,4(sp)
  80082c:	df000104 	addi	fp,sp,4
  800830:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800834:	e13fff17 	ldw	r4,-4(fp)
  800838:	01402034 	movhi	r5,128
  80083c:	29586704 	addi	r5,r5,24988
  800840:	08030140 	call	803014 <alt_dev_llist_insert>
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800858:	defffa04 	addi	sp,sp,-24
  80085c:	dfc00515 	stw	ra,20(sp)
  800860:	df000415 	stw	fp,16(sp)
  800864:	df000404 	addi	fp,sp,16
  800868:	e13ffd15 	stw	r4,-12(fp)
  80086c:	e17ffe15 	stw	r5,-8(fp)
  800870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800874:	e0bffd17 	ldw	r2,-12(fp)
  800878:	10800017 	ldw	r2,0(r2)
  80087c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800880:	e0bffc17 	ldw	r2,-16(fp)
  800884:	11000a04 	addi	r4,r2,40
  800888:	e0bffd17 	ldw	r2,-12(fp)
  80088c:	11c00217 	ldw	r7,8(r2)
  800890:	e17ffe17 	ldw	r5,-8(fp)
  800894:	e1bfff17 	ldw	r6,-4(fp)
  800898:	0800ea00 	call	800ea0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80089c:	e037883a 	mov	sp,fp
  8008a0:	dfc00117 	ldw	ra,4(sp)
  8008a4:	df000017 	ldw	fp,0(sp)
  8008a8:	dec00204 	addi	sp,sp,8
  8008ac:	f800283a 	ret

008008b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8008b0:	defffa04 	addi	sp,sp,-24
  8008b4:	dfc00515 	stw	ra,20(sp)
  8008b8:	df000415 	stw	fp,16(sp)
  8008bc:	df000404 	addi	fp,sp,16
  8008c0:	e13ffd15 	stw	r4,-12(fp)
  8008c4:	e17ffe15 	stw	r5,-8(fp)
  8008c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8008cc:	e0bffd17 	ldw	r2,-12(fp)
  8008d0:	10800017 	ldw	r2,0(r2)
  8008d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8008d8:	e0bffc17 	ldw	r2,-16(fp)
  8008dc:	11000a04 	addi	r4,r2,40
  8008e0:	e0bffd17 	ldw	r2,-12(fp)
  8008e4:	11c00217 	ldw	r7,8(r2)
  8008e8:	e17ffe17 	ldw	r5,-8(fp)
  8008ec:	e1bfff17 	ldw	r6,-4(fp)
  8008f0:	08010c40 	call	8010c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8008f4:	e037883a 	mov	sp,fp
  8008f8:	dfc00117 	ldw	ra,4(sp)
  8008fc:	df000017 	ldw	fp,0(sp)
  800900:	dec00204 	addi	sp,sp,8
  800904:	f800283a 	ret

00800908 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800908:	defffc04 	addi	sp,sp,-16
  80090c:	dfc00315 	stw	ra,12(sp)
  800910:	df000215 	stw	fp,8(sp)
  800914:	df000204 	addi	fp,sp,8
  800918:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80091c:	e0bfff17 	ldw	r2,-4(fp)
  800920:	10800017 	ldw	r2,0(r2)
  800924:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800928:	e0bffe17 	ldw	r2,-8(fp)
  80092c:	11000a04 	addi	r4,r2,40
  800930:	e0bfff17 	ldw	r2,-4(fp)
  800934:	11400217 	ldw	r5,8(r2)
  800938:	0800d380 	call	800d38 <altera_avalon_jtag_uart_close>
}
  80093c:	e037883a 	mov	sp,fp
  800940:	dfc00117 	ldw	ra,4(sp)
  800944:	df000017 	ldw	fp,0(sp)
  800948:	dec00204 	addi	sp,sp,8
  80094c:	f800283a 	ret

00800950 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  800950:	defffa04 	addi	sp,sp,-24
  800954:	dfc00515 	stw	ra,20(sp)
  800958:	df000415 	stw	fp,16(sp)
  80095c:	df000404 	addi	fp,sp,16
  800960:	e13ffd15 	stw	r4,-12(fp)
  800964:	e17ffe15 	stw	r5,-8(fp)
  800968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80096c:	e0bffd17 	ldw	r2,-12(fp)
  800970:	10800017 	ldw	r2,0(r2)
  800974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  800978:	e0bffc17 	ldw	r2,-16(fp)
  80097c:	11000a04 	addi	r4,r2,40
  800980:	e17ffe17 	ldw	r5,-8(fp)
  800984:	e1bfff17 	ldw	r6,-4(fp)
  800988:	0800dac0 	call	800dac <altera_avalon_jtag_uart_ioctl>
}
  80098c:	e037883a 	mov	sp,fp
  800990:	dfc00117 	ldw	ra,4(sp)
  800994:	df000017 	ldw	fp,0(sp)
  800998:	dec00204 	addi	sp,sp,8
  80099c:	f800283a 	ret

008009a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8009a0:	defffa04 	addi	sp,sp,-24
  8009a4:	dfc00515 	stw	ra,20(sp)
  8009a8:	df000415 	stw	fp,16(sp)
  8009ac:	df000404 	addi	fp,sp,16
  8009b0:	e13ffd15 	stw	r4,-12(fp)
  8009b4:	e17ffe15 	stw	r5,-8(fp)
  8009b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8009bc:	e0fffd17 	ldw	r3,-12(fp)
  8009c0:	00800044 	movi	r2,1
  8009c4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8009c8:	e0bffd17 	ldw	r2,-12(fp)
  8009cc:	10800017 	ldw	r2,0(r2)
  8009d0:	11000104 	addi	r4,r2,4
  8009d4:	e0bffd17 	ldw	r2,-12(fp)
  8009d8:	10800817 	ldw	r2,32(r2)
  8009dc:	1007883a 	mov	r3,r2
  8009e0:	2005883a 	mov	r2,r4
  8009e4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8009e8:	e13ffe17 	ldw	r4,-8(fp)
  8009ec:	e17fff17 	ldw	r5,-4(fp)
  8009f0:	d8000015 	stw	zero,0(sp)
  8009f4:	01802034 	movhi	r6,128
  8009f8:	31829804 	addi	r6,r6,2656
  8009fc:	e1fffd17 	ldw	r7,-12(fp)
  800a00:	08032200 	call	803220 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  800a04:	e0bffd17 	ldw	r2,-12(fp)
  800a08:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  800a0c:	e0bffd17 	ldw	r2,-12(fp)
  800a10:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800a14:	00802034 	movhi	r2,128
  800a18:	109e9904 	addi	r2,r2,31332
  800a1c:	10800017 	ldw	r2,0(r2)
  800a20:	100b883a 	mov	r5,r2
  800a24:	01802034 	movhi	r6,128
  800a28:	31832204 	addi	r6,r6,3208
  800a2c:	e1fffd17 	ldw	r7,-12(fp)
  800a30:	0802cf40 	call	802cf4 <alt_alarm_start>
  800a34:	1004403a 	cmpge	r2,r2,zero
  800a38:	1000041e 	bne	r2,zero,800a4c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800a3c:	e0fffd17 	ldw	r3,-12(fp)
  800a40:	00a00034 	movhi	r2,32768
  800a44:	10bfffc4 	addi	r2,r2,-1
  800a48:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800a4c:	e037883a 	mov	sp,fp
  800a50:	dfc00117 	ldw	ra,4(sp)
  800a54:	df000017 	ldw	fp,0(sp)
  800a58:	dec00204 	addi	sp,sp,8
  800a5c:	f800283a 	ret

00800a60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  800a60:	defff804 	addi	sp,sp,-32
  800a64:	df000715 	stw	fp,28(sp)
  800a68:	df000704 	addi	fp,sp,28
  800a6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  800a70:	e0bfff17 	ldw	r2,-4(fp)
  800a74:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  800a78:	e0bffe17 	ldw	r2,-8(fp)
  800a7c:	10800017 	ldw	r2,0(r2)
  800a80:	e0bffd15 	stw	r2,-12(fp)
  800a84:	00000006 	br	800a88 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800a88:	e0bffd17 	ldw	r2,-12(fp)
  800a8c:	10800104 	addi	r2,r2,4
  800a90:	10800037 	ldwio	r2,0(r2)
  800a94:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  800a98:	e0bffc17 	ldw	r2,-16(fp)
  800a9c:	1080c00c 	andi	r2,r2,768
  800aa0:	1005003a 	cmpeq	r2,r2,zero
  800aa4:	1000741e 	bne	r2,zero,800c78 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  800aa8:	e0bffc17 	ldw	r2,-16(fp)
  800aac:	1080400c 	andi	r2,r2,256
  800ab0:	1005003a 	cmpeq	r2,r2,zero
  800ab4:	1000351e 	bne	r2,zero,800b8c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  800ab8:	00800074 	movhi	r2,1
  800abc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800ac0:	e0bffe17 	ldw	r2,-8(fp)
  800ac4:	10800a17 	ldw	r2,40(r2)
  800ac8:	10800044 	addi	r2,r2,1
  800acc:	1081ffcc 	andi	r2,r2,2047
  800ad0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  800ad4:	e0bffe17 	ldw	r2,-8(fp)
  800ad8:	10c00b17 	ldw	r3,44(r2)
  800adc:	e0bffa17 	ldw	r2,-24(fp)
  800ae0:	18801626 	beq	r3,r2,800b3c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  800ae4:	e0bffd17 	ldw	r2,-12(fp)
  800ae8:	10800037 	ldwio	r2,0(r2)
  800aec:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  800af0:	e0bffb17 	ldw	r2,-20(fp)
  800af4:	10a0000c 	andi	r2,r2,32768
  800af8:	1005003a 	cmpeq	r2,r2,zero
  800afc:	10000f1e 	bne	r2,zero,800b3c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800b00:	e0bffe17 	ldw	r2,-8(fp)
  800b04:	10c00a17 	ldw	r3,40(r2)
  800b08:	e0bffb17 	ldw	r2,-20(fp)
  800b0c:	1009883a 	mov	r4,r2
  800b10:	e0bffe17 	ldw	r2,-8(fp)
  800b14:	1885883a 	add	r2,r3,r2
  800b18:	10800e04 	addi	r2,r2,56
  800b1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800b20:	e0bffe17 	ldw	r2,-8(fp)
  800b24:	10800a17 	ldw	r2,40(r2)
  800b28:	10800044 	addi	r2,r2,1
  800b2c:	10c1ffcc 	andi	r3,r2,2047
  800b30:	e0bffe17 	ldw	r2,-8(fp)
  800b34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  800b38:	003fe106 	br	800ac0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800b3c:	e0bffb17 	ldw	r2,-20(fp)
  800b40:	10bfffec 	andhi	r2,r2,65535
  800b44:	1005003a 	cmpeq	r2,r2,zero
  800b48:	1000101e 	bne	r2,zero,800b8c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800b4c:	e0bffe17 	ldw	r2,-8(fp)
  800b50:	10c00817 	ldw	r3,32(r2)
  800b54:	00bfff84 	movi	r2,-2
  800b58:	1886703a 	and	r3,r3,r2
  800b5c:	e0bffe17 	ldw	r2,-8(fp)
  800b60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  800b64:	e0bffd17 	ldw	r2,-12(fp)
  800b68:	11000104 	addi	r4,r2,4
  800b6c:	e0bffe17 	ldw	r2,-8(fp)
  800b70:	10800817 	ldw	r2,32(r2)
  800b74:	1007883a 	mov	r3,r2
  800b78:	2005883a 	mov	r2,r4
  800b7c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800b80:	e0bffd17 	ldw	r2,-12(fp)
  800b84:	10800104 	addi	r2,r2,4
  800b88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  800b8c:	e0bffc17 	ldw	r2,-16(fp)
  800b90:	1080800c 	andi	r2,r2,512
  800b94:	1005003a 	cmpeq	r2,r2,zero
  800b98:	103fbb1e 	bne	r2,zero,800a88 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  800b9c:	e0bffc17 	ldw	r2,-16(fp)
  800ba0:	10bfffec 	andhi	r2,r2,65535
  800ba4:	1004d43a 	srli	r2,r2,16
  800ba8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  800bac:	00001506 	br	800c04 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  800bb0:	e13ffd17 	ldw	r4,-12(fp)
  800bb4:	e0bffe17 	ldw	r2,-8(fp)
  800bb8:	10c00d17 	ldw	r3,52(r2)
  800bbc:	e0bffe17 	ldw	r2,-8(fp)
  800bc0:	1885883a 	add	r2,r3,r2
  800bc4:	10820e04 	addi	r2,r2,2104
  800bc8:	10800003 	ldbu	r2,0(r2)
  800bcc:	10c03fcc 	andi	r3,r2,255
  800bd0:	18c0201c 	xori	r3,r3,128
  800bd4:	18ffe004 	addi	r3,r3,-128
  800bd8:	2005883a 	mov	r2,r4
  800bdc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800be0:	e0bffe17 	ldw	r2,-8(fp)
  800be4:	10800d17 	ldw	r2,52(r2)
  800be8:	10800044 	addi	r2,r2,1
  800bec:	10c1ffcc 	andi	r3,r2,2047
  800bf0:	e0bffe17 	ldw	r2,-8(fp)
  800bf4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  800bf8:	e0bff917 	ldw	r2,-28(fp)
  800bfc:	10bfffc4 	addi	r2,r2,-1
  800c00:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  800c04:	e0bff917 	ldw	r2,-28(fp)
  800c08:	1005003a 	cmpeq	r2,r2,zero
  800c0c:	1000051e 	bne	r2,zero,800c24 <altera_avalon_jtag_uart_irq+0x1c4>
  800c10:	e0bffe17 	ldw	r2,-8(fp)
  800c14:	10c00d17 	ldw	r3,52(r2)
  800c18:	e0bffe17 	ldw	r2,-8(fp)
  800c1c:	10800c17 	ldw	r2,48(r2)
  800c20:	18bfe31e 	bne	r3,r2,800bb0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800c24:	e0bff917 	ldw	r2,-28(fp)
  800c28:	1005003a 	cmpeq	r2,r2,zero
  800c2c:	103f961e 	bne	r2,zero,800a88 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800c30:	e0bffe17 	ldw	r2,-8(fp)
  800c34:	10c00817 	ldw	r3,32(r2)
  800c38:	00bfff44 	movi	r2,-3
  800c3c:	1886703a 	and	r3,r3,r2
  800c40:	e0bffe17 	ldw	r2,-8(fp)
  800c44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800c48:	e0bffe17 	ldw	r2,-8(fp)
  800c4c:	10800017 	ldw	r2,0(r2)
  800c50:	11000104 	addi	r4,r2,4
  800c54:	e0bffe17 	ldw	r2,-8(fp)
  800c58:	10800817 	ldw	r2,32(r2)
  800c5c:	1007883a 	mov	r3,r2
  800c60:	2005883a 	mov	r2,r4
  800c64:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  800c68:	e0bffd17 	ldw	r2,-12(fp)
  800c6c:	10800104 	addi	r2,r2,4
  800c70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  800c74:	003f8406 	br	800a88 <altera_avalon_jtag_uart_irq+0x28>
}
  800c78:	e037883a 	mov	sp,fp
  800c7c:	df000017 	ldw	fp,0(sp)
  800c80:	dec00104 	addi	sp,sp,4
  800c84:	f800283a 	ret

00800c88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  800c88:	defffc04 	addi	sp,sp,-16
  800c8c:	df000315 	stw	fp,12(sp)
  800c90:	df000304 	addi	fp,sp,12
  800c94:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  800c98:	e0bfff17 	ldw	r2,-4(fp)
  800c9c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  800ca0:	e0bffe17 	ldw	r2,-8(fp)
  800ca4:	10800017 	ldw	r2,0(r2)
  800ca8:	10800104 	addi	r2,r2,4
  800cac:	10800037 	ldwio	r2,0(r2)
  800cb0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  800cb4:	e0bffd17 	ldw	r2,-12(fp)
  800cb8:	1081000c 	andi	r2,r2,1024
  800cbc:	1005003a 	cmpeq	r2,r2,zero
  800cc0:	10000c1e 	bne	r2,zero,800cf4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  800cc4:	e0bffe17 	ldw	r2,-8(fp)
  800cc8:	10800017 	ldw	r2,0(r2)
  800ccc:	11000104 	addi	r4,r2,4
  800cd0:	e0bffe17 	ldw	r2,-8(fp)
  800cd4:	10800817 	ldw	r2,32(r2)
  800cd8:	10810014 	ori	r2,r2,1024
  800cdc:	1007883a 	mov	r3,r2
  800ce0:	2005883a 	mov	r2,r4
  800ce4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  800ce8:	e0bffe17 	ldw	r2,-8(fp)
  800cec:	10000915 	stw	zero,36(r2)
  800cf0:	00000a06 	br	800d1c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  800cf4:	e0bffe17 	ldw	r2,-8(fp)
  800cf8:	10c00917 	ldw	r3,36(r2)
  800cfc:	00a00034 	movhi	r2,32768
  800d00:	10bfff04 	addi	r2,r2,-4
  800d04:	10c00536 	bltu	r2,r3,800d1c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  800d08:	e0bffe17 	ldw	r2,-8(fp)
  800d0c:	10800917 	ldw	r2,36(r2)
  800d10:	10c00044 	addi	r3,r2,1
  800d14:	e0bffe17 	ldw	r2,-8(fp)
  800d18:	10c00915 	stw	r3,36(r2)
  800d1c:	00802034 	movhi	r2,128
  800d20:	109e9904 	addi	r2,r2,31332
  800d24:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  800d28:	e037883a 	mov	sp,fp
  800d2c:	df000017 	ldw	fp,0(sp)
  800d30:	dec00104 	addi	sp,sp,4
  800d34:	f800283a 	ret

00800d38 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  800d38:	defffc04 	addi	sp,sp,-16
  800d3c:	df000315 	stw	fp,12(sp)
  800d40:	df000304 	addi	fp,sp,12
  800d44:	e13ffd15 	stw	r4,-12(fp)
  800d48:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800d4c:	00000706 	br	800d6c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  800d50:	e0bffe17 	ldw	r2,-8(fp)
  800d54:	1090000c 	andi	r2,r2,16384
  800d58:	1005003a 	cmpeq	r2,r2,zero
  800d5c:	1000031e 	bne	r2,zero,800d6c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  800d60:	00bffd44 	movi	r2,-11
  800d64:	e0bfff15 	stw	r2,-4(fp)
  800d68:	00000b06 	br	800d98 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800d6c:	e0bffd17 	ldw	r2,-12(fp)
  800d70:	10c00d17 	ldw	r3,52(r2)
  800d74:	e0bffd17 	ldw	r2,-12(fp)
  800d78:	10800c17 	ldw	r2,48(r2)
  800d7c:	18800526 	beq	r3,r2,800d94 <altera_avalon_jtag_uart_close+0x5c>
  800d80:	e0bffd17 	ldw	r2,-12(fp)
  800d84:	10c00917 	ldw	r3,36(r2)
  800d88:	e0bffd17 	ldw	r2,-12(fp)
  800d8c:	10800117 	ldw	r2,4(r2)
  800d90:	18bfef36 	bltu	r3,r2,800d50 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  800d94:	e03fff15 	stw	zero,-4(fp)
  800d98:	e0bfff17 	ldw	r2,-4(fp)
}
  800d9c:	e037883a 	mov	sp,fp
  800da0:	df000017 	ldw	fp,0(sp)
  800da4:	dec00104 	addi	sp,sp,4
  800da8:	f800283a 	ret

00800dac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  800dac:	defff804 	addi	sp,sp,-32
  800db0:	df000715 	stw	fp,28(sp)
  800db4:	df000704 	addi	fp,sp,28
  800db8:	e13ffb15 	stw	r4,-20(fp)
  800dbc:	e17ffc15 	stw	r5,-16(fp)
  800dc0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  800dc4:	00bff9c4 	movi	r2,-25
  800dc8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  800dcc:	e0bffc17 	ldw	r2,-16(fp)
  800dd0:	e0bfff15 	stw	r2,-4(fp)
  800dd4:	e0ffff17 	ldw	r3,-4(fp)
  800dd8:	189a8060 	cmpeqi	r2,r3,27137
  800ddc:	1000041e 	bne	r2,zero,800df0 <altera_avalon_jtag_uart_ioctl+0x44>
  800de0:	e0ffff17 	ldw	r3,-4(fp)
  800de4:	189a80a0 	cmpeqi	r2,r3,27138
  800de8:	10001b1e 	bne	r2,zero,800e58 <altera_avalon_jtag_uart_ioctl+0xac>
  800dec:	00002706 	br	800e8c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  800df0:	e0bffb17 	ldw	r2,-20(fp)
  800df4:	10c00117 	ldw	r3,4(r2)
  800df8:	00a00034 	movhi	r2,32768
  800dfc:	10bfffc4 	addi	r2,r2,-1
  800e00:	18802226 	beq	r3,r2,800e8c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  800e04:	e0bffd17 	ldw	r2,-12(fp)
  800e08:	10800017 	ldw	r2,0(r2)
  800e0c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  800e10:	e0bff917 	ldw	r2,-28(fp)
  800e14:	10800090 	cmplti	r2,r2,2
  800e18:	1000071e 	bne	r2,zero,800e38 <altera_avalon_jtag_uart_ioctl+0x8c>
  800e1c:	e0fff917 	ldw	r3,-28(fp)
  800e20:	00a00034 	movhi	r2,32768
  800e24:	10bfffc4 	addi	r2,r2,-1
  800e28:	18800326 	beq	r3,r2,800e38 <altera_avalon_jtag_uart_ioctl+0x8c>
  800e2c:	e0bff917 	ldw	r2,-28(fp)
  800e30:	e0bffe15 	stw	r2,-8(fp)
  800e34:	00000306 	br	800e44 <altera_avalon_jtag_uart_ioctl+0x98>
  800e38:	00e00034 	movhi	r3,32768
  800e3c:	18ffff84 	addi	r3,r3,-2
  800e40:	e0fffe15 	stw	r3,-8(fp)
  800e44:	e0bffb17 	ldw	r2,-20(fp)
  800e48:	e0fffe17 	ldw	r3,-8(fp)
  800e4c:	10c00115 	stw	r3,4(r2)
      rc = 0;
  800e50:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  800e54:	00000d06 	br	800e8c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  800e58:	e0bffb17 	ldw	r2,-20(fp)
  800e5c:	10c00117 	ldw	r3,4(r2)
  800e60:	00a00034 	movhi	r2,32768
  800e64:	10bfffc4 	addi	r2,r2,-1
  800e68:	18800826 	beq	r3,r2,800e8c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800e6c:	e13ffd17 	ldw	r4,-12(fp)
  800e70:	e0bffb17 	ldw	r2,-20(fp)
  800e74:	10c00917 	ldw	r3,36(r2)
  800e78:	e0bffb17 	ldw	r2,-20(fp)
  800e7c:	10800117 	ldw	r2,4(r2)
  800e80:	1885803a 	cmpltu	r2,r3,r2
  800e84:	20800015 	stw	r2,0(r4)
      rc = 0;
  800e88:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  800e8c:	e0bffa17 	ldw	r2,-24(fp)
}
  800e90:	e037883a 	mov	sp,fp
  800e94:	df000017 	ldw	fp,0(sp)
  800e98:	dec00104 	addi	sp,sp,4
  800e9c:	f800283a 	ret

00800ea0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  800ea0:	defff204 	addi	sp,sp,-56
  800ea4:	dfc00d15 	stw	ra,52(sp)
  800ea8:	df000c15 	stw	fp,48(sp)
  800eac:	df000c04 	addi	fp,sp,48
  800eb0:	e13ffb15 	stw	r4,-20(fp)
  800eb4:	e17ffc15 	stw	r5,-16(fp)
  800eb8:	e1bffd15 	stw	r6,-12(fp)
  800ebc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  800ec0:	e0bffc17 	ldw	r2,-16(fp)
  800ec4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800ec8:	00004806 	br	800fec <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  800ecc:	e0bffb17 	ldw	r2,-20(fp)
  800ed0:	10800a17 	ldw	r2,40(r2)
  800ed4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  800ed8:	e0bffb17 	ldw	r2,-20(fp)
  800edc:	10800b17 	ldw	r2,44(r2)
  800ee0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  800ee4:	e0fff717 	ldw	r3,-36(fp)
  800ee8:	e0bff617 	ldw	r2,-40(fp)
  800eec:	18800536 	bltu	r3,r2,800f04 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800ef0:	e0bff717 	ldw	r2,-36(fp)
  800ef4:	e0fff617 	ldw	r3,-40(fp)
  800ef8:	10c5c83a 	sub	r2,r2,r3
  800efc:	e0bff815 	stw	r2,-32(fp)
  800f00:	00000406 	br	800f14 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800f04:	00820004 	movi	r2,2048
  800f08:	e0fff617 	ldw	r3,-40(fp)
  800f0c:	10c5c83a 	sub	r2,r2,r3
  800f10:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  800f14:	e0bff817 	ldw	r2,-32(fp)
  800f18:	1005003a 	cmpeq	r2,r2,zero
  800f1c:	10001f1e 	bne	r2,zero,800f9c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  800f20:	e0fffd17 	ldw	r3,-12(fp)
  800f24:	e0bff817 	ldw	r2,-32(fp)
  800f28:	1880022e 	bgeu	r3,r2,800f34 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  800f2c:	e0bffd17 	ldw	r2,-12(fp)
  800f30:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800f34:	e0bffb17 	ldw	r2,-20(fp)
  800f38:	10c00e04 	addi	r3,r2,56
  800f3c:	e0bff617 	ldw	r2,-40(fp)
  800f40:	1887883a 	add	r3,r3,r2
  800f44:	e0bffa17 	ldw	r2,-24(fp)
  800f48:	1009883a 	mov	r4,r2
  800f4c:	180b883a 	mov	r5,r3
  800f50:	e1bff817 	ldw	r6,-32(fp)
  800f54:	08040480 	call	804048 <memcpy>
      ptr   += n;
  800f58:	e0fff817 	ldw	r3,-32(fp)
  800f5c:	e0bffa17 	ldw	r2,-24(fp)
  800f60:	10c5883a 	add	r2,r2,r3
  800f64:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  800f68:	e0fffd17 	ldw	r3,-12(fp)
  800f6c:	e0bff817 	ldw	r2,-32(fp)
  800f70:	1885c83a 	sub	r2,r3,r2
  800f74:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800f78:	e0fff617 	ldw	r3,-40(fp)
  800f7c:	e0bff817 	ldw	r2,-32(fp)
  800f80:	1885883a 	add	r2,r3,r2
  800f84:	10c1ffcc 	andi	r3,r2,2047
  800f88:	e0bffb17 	ldw	r2,-20(fp)
  800f8c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  800f90:	e0bffd17 	ldw	r2,-12(fp)
  800f94:	10800048 	cmpgei	r2,r2,1
  800f98:	103fcc1e 	bne	r2,zero,800ecc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  800f9c:	e0fffa17 	ldw	r3,-24(fp)
  800fa0:	e0bffc17 	ldw	r2,-16(fp)
  800fa4:	1880141e 	bne	r3,r2,800ff8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  800fa8:	e0bffe17 	ldw	r2,-8(fp)
  800fac:	1090000c 	andi	r2,r2,16384
  800fb0:	1004c03a 	cmpne	r2,r2,zero
  800fb4:	1000101e 	bne	r2,zero,800ff8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  800fb8:	e0bffb17 	ldw	r2,-20(fp)
  800fbc:	10c00a17 	ldw	r3,40(r2)
  800fc0:	e0bff717 	ldw	r2,-36(fp)
  800fc4:	1880051e 	bne	r3,r2,800fdc <altera_avalon_jtag_uart_read+0x13c>
  800fc8:	e0bffb17 	ldw	r2,-20(fp)
  800fcc:	10c00917 	ldw	r3,36(r2)
  800fd0:	e0bffb17 	ldw	r2,-20(fp)
  800fd4:	10800117 	ldw	r2,4(r2)
  800fd8:	18bff736 	bltu	r3,r2,800fb8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  800fdc:	e0bffb17 	ldw	r2,-20(fp)
  800fe0:	10c00a17 	ldw	r3,40(r2)
  800fe4:	e0bff717 	ldw	r2,-36(fp)
  800fe8:	18800326 	beq	r3,r2,800ff8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800fec:	e0bffd17 	ldw	r2,-12(fp)
  800ff0:	10800048 	cmpgei	r2,r2,1
  800ff4:	103fb51e 	bne	r2,zero,800ecc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800ff8:	e0fffa17 	ldw	r3,-24(fp)
  800ffc:	e0bffc17 	ldw	r2,-16(fp)
  801000:	18801926 	beq	r3,r2,801068 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801004:	0005303a 	rdctl	r2,status
  801008:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80100c:	e0fff517 	ldw	r3,-44(fp)
  801010:	00bfff84 	movi	r2,-2
  801014:	1884703a 	and	r2,r3,r2
  801018:	1001703a 	wrctl	status,r2
  
  return context;
  80101c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  801020:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  801024:	e0bffb17 	ldw	r2,-20(fp)
  801028:	10800817 	ldw	r2,32(r2)
  80102c:	10c00054 	ori	r3,r2,1
  801030:	e0bffb17 	ldw	r2,-20(fp)
  801034:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801038:	e0bffb17 	ldw	r2,-20(fp)
  80103c:	10800017 	ldw	r2,0(r2)
  801040:	11000104 	addi	r4,r2,4
  801044:	e0bffb17 	ldw	r2,-20(fp)
  801048:	10800817 	ldw	r2,32(r2)
  80104c:	1007883a 	mov	r3,r2
  801050:	2005883a 	mov	r2,r4
  801054:	10c00035 	stwio	r3,0(r2)
  801058:	e0bff917 	ldw	r2,-28(fp)
  80105c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801060:	e0bff417 	ldw	r2,-48(fp)
  801064:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  801068:	e0fffa17 	ldw	r3,-24(fp)
  80106c:	e0bffc17 	ldw	r2,-16(fp)
  801070:	18800526 	beq	r3,r2,801088 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  801074:	e0fffa17 	ldw	r3,-24(fp)
  801078:	e0bffc17 	ldw	r2,-16(fp)
  80107c:	1887c83a 	sub	r3,r3,r2
  801080:	e0ffff15 	stw	r3,-4(fp)
  801084:	00000906 	br	8010ac <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  801088:	e0bffe17 	ldw	r2,-8(fp)
  80108c:	1090000c 	andi	r2,r2,16384
  801090:	1005003a 	cmpeq	r2,r2,zero
  801094:	1000031e 	bne	r2,zero,8010a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  801098:	00bffd44 	movi	r2,-11
  80109c:	e0bfff15 	stw	r2,-4(fp)
  8010a0:	00000206 	br	8010ac <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  8010a4:	00bffec4 	movi	r2,-5
  8010a8:	e0bfff15 	stw	r2,-4(fp)
  8010ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8010b0:	e037883a 	mov	sp,fp
  8010b4:	dfc00117 	ldw	ra,4(sp)
  8010b8:	df000017 	ldw	fp,0(sp)
  8010bc:	dec00204 	addi	sp,sp,8
  8010c0:	f800283a 	ret

008010c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8010c4:	defff204 	addi	sp,sp,-56
  8010c8:	dfc00d15 	stw	ra,52(sp)
  8010cc:	df000c15 	stw	fp,48(sp)
  8010d0:	df000c04 	addi	fp,sp,48
  8010d4:	e13ffb15 	stw	r4,-20(fp)
  8010d8:	e17ffc15 	stw	r5,-16(fp)
  8010dc:	e1bffd15 	stw	r6,-12(fp)
  8010e0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8010e4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8010e8:	e0bffc17 	ldw	r2,-16(fp)
  8010ec:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8010f0:	00003a06 	br	8011dc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8010f4:	e0bffb17 	ldw	r2,-20(fp)
  8010f8:	10800c17 	ldw	r2,48(r2)
  8010fc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  801100:	e0bffb17 	ldw	r2,-20(fp)
  801104:	10800d17 	ldw	r2,52(r2)
  801108:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80110c:	e0fffa17 	ldw	r3,-24(fp)
  801110:	e0bff917 	ldw	r2,-28(fp)
  801114:	1880062e 	bgeu	r3,r2,801130 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  801118:	e0fff917 	ldw	r3,-28(fp)
  80111c:	e0bffa17 	ldw	r2,-24(fp)
  801120:	1885c83a 	sub	r2,r3,r2
  801124:	10bfffc4 	addi	r2,r2,-1
  801128:	e0bff815 	stw	r2,-32(fp)
  80112c:	00000c06 	br	801160 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  801130:	e0bff917 	ldw	r2,-28(fp)
  801134:	1005003a 	cmpeq	r2,r2,zero
  801138:	1000051e 	bne	r2,zero,801150 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80113c:	00820004 	movi	r2,2048
  801140:	e0fffa17 	ldw	r3,-24(fp)
  801144:	10c5c83a 	sub	r2,r2,r3
  801148:	e0bff815 	stw	r2,-32(fp)
  80114c:	00000406 	br	801160 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  801150:	0081ffc4 	movi	r2,2047
  801154:	e0fffa17 	ldw	r3,-24(fp)
  801158:	10c5c83a 	sub	r2,r2,r3
  80115c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  801160:	e0bff817 	ldw	r2,-32(fp)
  801164:	1005003a 	cmpeq	r2,r2,zero
  801168:	10001f1e 	bne	r2,zero,8011e8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80116c:	e0fffd17 	ldw	r3,-12(fp)
  801170:	e0bff817 	ldw	r2,-32(fp)
  801174:	1880022e 	bgeu	r3,r2,801180 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  801178:	e0bffd17 	ldw	r2,-12(fp)
  80117c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  801180:	e0bffb17 	ldw	r2,-20(fp)
  801184:	10c20e04 	addi	r3,r2,2104
  801188:	e0bffa17 	ldw	r2,-24(fp)
  80118c:	1885883a 	add	r2,r3,r2
  801190:	e0fffc17 	ldw	r3,-16(fp)
  801194:	1009883a 	mov	r4,r2
  801198:	180b883a 	mov	r5,r3
  80119c:	e1bff817 	ldw	r6,-32(fp)
  8011a0:	08040480 	call	804048 <memcpy>
      ptr   += n;
  8011a4:	e0fff817 	ldw	r3,-32(fp)
  8011a8:	e0bffc17 	ldw	r2,-16(fp)
  8011ac:	10c5883a 	add	r2,r2,r3
  8011b0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  8011b4:	e0fffd17 	ldw	r3,-12(fp)
  8011b8:	e0bff817 	ldw	r2,-32(fp)
  8011bc:	1885c83a 	sub	r2,r3,r2
  8011c0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8011c4:	e0fffa17 	ldw	r3,-24(fp)
  8011c8:	e0bff817 	ldw	r2,-32(fp)
  8011cc:	1885883a 	add	r2,r3,r2
  8011d0:	10c1ffcc 	andi	r3,r2,2047
  8011d4:	e0bffb17 	ldw	r2,-20(fp)
  8011d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8011dc:	e0bffd17 	ldw	r2,-12(fp)
  8011e0:	10800048 	cmpgei	r2,r2,1
  8011e4:	103fc31e 	bne	r2,zero,8010f4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8011e8:	0005303a 	rdctl	r2,status
  8011ec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8011f0:	e0fff517 	ldw	r3,-44(fp)
  8011f4:	00bfff84 	movi	r2,-2
  8011f8:	1884703a 	and	r2,r3,r2
  8011fc:	1001703a 	wrctl	status,r2
  
  return context;
  801200:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  801204:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  801208:	e0bffb17 	ldw	r2,-20(fp)
  80120c:	10800817 	ldw	r2,32(r2)
  801210:	10c00094 	ori	r3,r2,2
  801214:	e0bffb17 	ldw	r2,-20(fp)
  801218:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80121c:	e0bffb17 	ldw	r2,-20(fp)
  801220:	10800017 	ldw	r2,0(r2)
  801224:	11000104 	addi	r4,r2,4
  801228:	e0bffb17 	ldw	r2,-20(fp)
  80122c:	10800817 	ldw	r2,32(r2)
  801230:	1007883a 	mov	r3,r2
  801234:	2005883a 	mov	r2,r4
  801238:	10c00035 	stwio	r3,0(r2)
  80123c:	e0bff717 	ldw	r2,-36(fp)
  801240:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801244:	e0bff417 	ldw	r2,-48(fp)
  801248:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80124c:	e0bffd17 	ldw	r2,-12(fp)
  801250:	10800050 	cmplti	r2,r2,1
  801254:	1000111e 	bne	r2,zero,80129c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  801258:	e0bffe17 	ldw	r2,-8(fp)
  80125c:	1090000c 	andi	r2,r2,16384
  801260:	1004c03a 	cmpne	r2,r2,zero
  801264:	1000101e 	bne	r2,zero,8012a8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  801268:	e0bffb17 	ldw	r2,-20(fp)
  80126c:	10c00d17 	ldw	r3,52(r2)
  801270:	e0bff917 	ldw	r2,-28(fp)
  801274:	1880051e 	bne	r3,r2,80128c <altera_avalon_jtag_uart_write+0x1c8>
  801278:	e0bffb17 	ldw	r2,-20(fp)
  80127c:	10c00917 	ldw	r3,36(r2)
  801280:	e0bffb17 	ldw	r2,-20(fp)
  801284:	10800117 	ldw	r2,4(r2)
  801288:	18bff736 	bltu	r3,r2,801268 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80128c:	e0bffb17 	ldw	r2,-20(fp)
  801290:	10c00d17 	ldw	r3,52(r2)
  801294:	e0bff917 	ldw	r2,-28(fp)
  801298:	18800326 	beq	r3,r2,8012a8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80129c:	e0bffd17 	ldw	r2,-12(fp)
  8012a0:	10800048 	cmpgei	r2,r2,1
  8012a4:	103fcd1e 	bne	r2,zero,8011dc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8012a8:	e0fffc17 	ldw	r3,-16(fp)
  8012ac:	e0bff617 	ldw	r2,-40(fp)
  8012b0:	18800526 	beq	r3,r2,8012c8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  8012b4:	e0fffc17 	ldw	r3,-16(fp)
  8012b8:	e0bff617 	ldw	r2,-40(fp)
  8012bc:	1887c83a 	sub	r3,r3,r2
  8012c0:	e0ffff15 	stw	r3,-4(fp)
  8012c4:	00000906 	br	8012ec <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  8012c8:	e0bffe17 	ldw	r2,-8(fp)
  8012cc:	1090000c 	andi	r2,r2,16384
  8012d0:	1005003a 	cmpeq	r2,r2,zero
  8012d4:	1000031e 	bne	r2,zero,8012e4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  8012d8:	00bffd44 	movi	r2,-11
  8012dc:	e0bfff15 	stw	r2,-4(fp)
  8012e0:	00000206 	br	8012ec <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8012e4:	00bffec4 	movi	r2,-5
  8012e8:	e0bfff15 	stw	r2,-4(fp)
  8012ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8012f0:	e037883a 	mov	sp,fp
  8012f4:	dfc00117 	ldw	ra,4(sp)
  8012f8:	df000017 	ldw	fp,0(sp)
  8012fc:	dec00204 	addi	sp,sp,8
  801300:	f800283a 	ret

00801304 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  801304:	defffa04 	addi	sp,sp,-24
  801308:	dfc00515 	stw	ra,20(sp)
  80130c:	df000415 	stw	fp,16(sp)
  801310:	df000404 	addi	fp,sp,16
  801314:	e13ffe15 	stw	r4,-8(fp)
  801318:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80131c:	e0bffe17 	ldw	r2,-8(fp)
  801320:	10800017 	ldw	r2,0(r2)
  801324:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801328:	008003f4 	movhi	r2,15
  80132c:	10909004 	addi	r2,r2,16960
  801330:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801334:	e0bffe17 	ldw	r2,-8(fp)
  801338:	10800803 	ldbu	r2,32(r2)
  80133c:	10803fcc 	andi	r2,r2,255
  801340:	1080201c 	xori	r2,r2,128
  801344:	10bfe004 	addi	r2,r2,-128
  801348:	1004c03a 	cmpne	r2,r2,zero
  80134c:	1000161e 	bne	r2,zero,8013a8 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801350:	00000a06 	br	80137c <lcd_write_command+0x78>
    if (--i == 0)
  801354:	e0bffc17 	ldw	r2,-16(fp)
  801358:	10bfffc4 	addi	r2,r2,-1
  80135c:	e0bffc15 	stw	r2,-16(fp)
  801360:	e0bffc17 	ldw	r2,-16(fp)
  801364:	1004c03a 	cmpne	r2,r2,zero
  801368:	1000041e 	bne	r2,zero,80137c <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80136c:	e0fffe17 	ldw	r3,-8(fp)
  801370:	00800044 	movi	r2,1
  801374:	18800805 	stb	r2,32(r3)
      return;
  801378:	00000b06 	br	8013a8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80137c:	e0bffd17 	ldw	r2,-12(fp)
  801380:	10800104 	addi	r2,r2,4
  801384:	10800037 	ldwio	r2,0(r2)
  801388:	1080200c 	andi	r2,r2,128
  80138c:	1004c03a 	cmpne	r2,r2,zero
  801390:	103ff01e 	bne	r2,zero,801354 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801394:	01001904 	movi	r4,100
  801398:	0803af00 	call	803af0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80139c:	e0bffd17 	ldw	r2,-12(fp)
  8013a0:	e0ffff03 	ldbu	r3,-4(fp)
  8013a4:	10c00035 	stwio	r3,0(r2)
}
  8013a8:	e037883a 	mov	sp,fp
  8013ac:	dfc00117 	ldw	ra,4(sp)
  8013b0:	df000017 	ldw	fp,0(sp)
  8013b4:	dec00204 	addi	sp,sp,8
  8013b8:	f800283a 	ret

008013bc <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8013bc:	defffa04 	addi	sp,sp,-24
  8013c0:	dfc00515 	stw	ra,20(sp)
  8013c4:	df000415 	stw	fp,16(sp)
  8013c8:	df000404 	addi	fp,sp,16
  8013cc:	e13ffe15 	stw	r4,-8(fp)
  8013d0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8013d4:	e0bffe17 	ldw	r2,-8(fp)
  8013d8:	10800017 	ldw	r2,0(r2)
  8013dc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8013e0:	008003f4 	movhi	r2,15
  8013e4:	10909004 	addi	r2,r2,16960
  8013e8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8013ec:	e0bffe17 	ldw	r2,-8(fp)
  8013f0:	10800803 	ldbu	r2,32(r2)
  8013f4:	10803fcc 	andi	r2,r2,255
  8013f8:	1080201c 	xori	r2,r2,128
  8013fc:	10bfe004 	addi	r2,r2,-128
  801400:	1004c03a 	cmpne	r2,r2,zero
  801404:	10001d1e 	bne	r2,zero,80147c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801408:	00000a06 	br	801434 <lcd_write_data+0x78>
    if (--i == 0)
  80140c:	e0bffc17 	ldw	r2,-16(fp)
  801410:	10bfffc4 	addi	r2,r2,-1
  801414:	e0bffc15 	stw	r2,-16(fp)
  801418:	e0bffc17 	ldw	r2,-16(fp)
  80141c:	1004c03a 	cmpne	r2,r2,zero
  801420:	1000041e 	bne	r2,zero,801434 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  801424:	e0fffe17 	ldw	r3,-8(fp)
  801428:	00800044 	movi	r2,1
  80142c:	18800805 	stb	r2,32(r3)
      return;
  801430:	00001206 	br	80147c <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801434:	e0bffd17 	ldw	r2,-12(fp)
  801438:	10800104 	addi	r2,r2,4
  80143c:	10800037 	ldwio	r2,0(r2)
  801440:	1080200c 	andi	r2,r2,128
  801444:	1004c03a 	cmpne	r2,r2,zero
  801448:	103ff01e 	bne	r2,zero,80140c <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80144c:	01001904 	movi	r4,100
  801450:	0803af00 	call	803af0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  801454:	e0bffd17 	ldw	r2,-12(fp)
  801458:	10800204 	addi	r2,r2,8
  80145c:	e0ffff03 	ldbu	r3,-4(fp)
  801460:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  801464:	e0bffe17 	ldw	r2,-8(fp)
  801468:	108008c3 	ldbu	r2,35(r2)
  80146c:	10800044 	addi	r2,r2,1
  801470:	1007883a 	mov	r3,r2
  801474:	e0bffe17 	ldw	r2,-8(fp)
  801478:	10c008c5 	stb	r3,35(r2)
}
  80147c:	e037883a 	mov	sp,fp
  801480:	dfc00117 	ldw	ra,4(sp)
  801484:	df000017 	ldw	fp,0(sp)
  801488:	dec00204 	addi	sp,sp,8
  80148c:	f800283a 	ret

00801490 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  801490:	defffc04 	addi	sp,sp,-16
  801494:	dfc00315 	stw	ra,12(sp)
  801498:	df000215 	stw	fp,8(sp)
  80149c:	df000204 	addi	fp,sp,8
  8014a0:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8014a4:	e13fff17 	ldw	r4,-4(fp)
  8014a8:	01400044 	movi	r5,1
  8014ac:	08013040 	call	801304 <lcd_write_command>

  sp->x = 0;
  8014b0:	e0bfff17 	ldw	r2,-4(fp)
  8014b4:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8014b8:	e0bfff17 	ldw	r2,-4(fp)
  8014bc:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8014c0:	e0bfff17 	ldw	r2,-4(fp)
  8014c4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8014c8:	e03ffe15 	stw	zero,-8(fp)
  8014cc:	00001906 	br	801534 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8014d0:	e0bffe17 	ldw	r2,-8(fp)
  8014d4:	10801924 	muli	r2,r2,100
  8014d8:	10c01004 	addi	r3,r2,64
  8014dc:	e0bfff17 	ldw	r2,-4(fp)
  8014e0:	1889883a 	add	r4,r3,r2
  8014e4:	01400804 	movi	r5,32
  8014e8:	01801444 	movi	r6,81
  8014ec:	08040e80 	call	8040e8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8014f0:	e0bffe17 	ldw	r2,-8(fp)
  8014f4:	10801924 	muli	r2,r2,100
  8014f8:	10c00c04 	addi	r3,r2,48
  8014fc:	e0bfff17 	ldw	r2,-4(fp)
  801500:	1889883a 	add	r4,r3,r2
  801504:	01400804 	movi	r5,32
  801508:	01800404 	movi	r6,16
  80150c:	08040e80 	call	8040e8 <memset>
    sp->line[y].width = 0;
  801510:	e0bffe17 	ldw	r2,-8(fp)
  801514:	e0ffff17 	ldw	r3,-4(fp)
  801518:	10801924 	muli	r2,r2,100
  80151c:	10c5883a 	add	r2,r2,r3
  801520:	10802404 	addi	r2,r2,144
  801524:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801528:	e0bffe17 	ldw	r2,-8(fp)
  80152c:	10800044 	addi	r2,r2,1
  801530:	e0bffe15 	stw	r2,-8(fp)
  801534:	e0bffe17 	ldw	r2,-8(fp)
  801538:	10800090 	cmplti	r2,r2,2
  80153c:	103fe41e 	bne	r2,zero,8014d0 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  801540:	e037883a 	mov	sp,fp
  801544:	dfc00117 	ldw	ra,4(sp)
  801548:	df000017 	ldw	fp,0(sp)
  80154c:	dec00204 	addi	sp,sp,8
  801550:	f800283a 	ret

00801554 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  801554:	defff604 	addi	sp,sp,-40
  801558:	dfc00915 	stw	ra,36(sp)
  80155c:	df000815 	stw	fp,32(sp)
  801560:	dc000715 	stw	r16,28(sp)
  801564:	df000704 	addi	fp,sp,28
  801568:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80156c:	e0bfff17 	ldw	r2,-4(fp)
  801570:	10800943 	ldbu	r2,37(r2)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080201c 	xori	r2,r2,128
  80157c:	10bfe004 	addi	r2,r2,-128
  801580:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801584:	e03ffe15 	stw	zero,-8(fp)
  801588:	00006406 	br	80171c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80158c:	e0bffe17 	ldw	r2,-8(fp)
  801590:	e0ffff17 	ldw	r3,-4(fp)
  801594:	10801924 	muli	r2,r2,100
  801598:	10c5883a 	add	r2,r2,r3
  80159c:	10802404 	addi	r2,r2,144
  8015a0:	10800043 	ldbu	r2,1(r2)
  8015a4:	10803fcc 	andi	r2,r2,255
  8015a8:	1080201c 	xori	r2,r2,128
  8015ac:	10bfe004 	addi	r2,r2,-128
  8015b0:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8015b4:	e0bffe17 	ldw	r2,-8(fp)
  8015b8:	e0ffff17 	ldw	r3,-4(fp)
  8015bc:	10801924 	muli	r2,r2,100
  8015c0:	10c5883a 	add	r2,r2,r3
  8015c4:	10802404 	addi	r2,r2,144
  8015c8:	10800083 	ldbu	r2,2(r2)
  8015cc:	10c03fcc 	andi	r3,r2,255
  8015d0:	e0bffc17 	ldw	r2,-16(fp)
  8015d4:	1885383a 	mul	r2,r3,r2
  8015d8:	1005d23a 	srai	r2,r2,8
  8015dc:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  8015e0:	e0fffa17 	ldw	r3,-24(fp)
  8015e4:	e0bffb17 	ldw	r2,-20(fp)
  8015e8:	18800116 	blt	r3,r2,8015f0 <lcd_repaint_screen+0x9c>
      offset = 0;
  8015ec:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8015f0:	e03ffd15 	stw	zero,-12(fp)
  8015f4:	00004306 	br	801704 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8015f8:	e43ffe17 	ldw	r16,-8(fp)
  8015fc:	e0fffd17 	ldw	r3,-12(fp)
  801600:	e0bffa17 	ldw	r2,-24(fp)
  801604:	1889883a 	add	r4,r3,r2
  801608:	e17ffb17 	ldw	r5,-20(fp)
  80160c:	08045b80 	call	8045b8 <__modsi3>
  801610:	1009883a 	mov	r4,r2
  801614:	e0ffff17 	ldw	r3,-4(fp)
  801618:	80801924 	muli	r2,r16,100
  80161c:	10c5883a 	add	r2,r2,r3
  801620:	1105883a 	add	r2,r2,r4
  801624:	10801004 	addi	r2,r2,64
  801628:	10800003 	ldbu	r2,0(r2)
  80162c:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  801630:	e0bffe17 	ldw	r2,-8(fp)
  801634:	e13ffd17 	ldw	r4,-12(fp)
  801638:	e0ffff17 	ldw	r3,-4(fp)
  80163c:	10801924 	muli	r2,r2,100
  801640:	10c5883a 	add	r2,r2,r3
  801644:	1105883a 	add	r2,r2,r4
  801648:	10800c04 	addi	r2,r2,48
  80164c:	10800003 	ldbu	r2,0(r2)
  801650:	10c03fcc 	andi	r3,r2,255
  801654:	18c0201c 	xori	r3,r3,128
  801658:	18ffe004 	addi	r3,r3,-128
  80165c:	e0bff947 	ldb	r2,-27(fp)
  801660:	18802526 	beq	r3,r2,8016f8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  801664:	e0fffe17 	ldw	r3,-8(fp)
  801668:	d0a00204 	addi	r2,gp,-32760
  80166c:	1885883a 	add	r2,r3,r2
  801670:	10800003 	ldbu	r2,0(r2)
  801674:	1007883a 	mov	r3,r2
  801678:	e0bffd17 	ldw	r2,-12(fp)
  80167c:	1885883a 	add	r2,r3,r2
  801680:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  801684:	e0fff903 	ldbu	r3,-28(fp)
  801688:	e0bfff17 	ldw	r2,-4(fp)
  80168c:	108008c3 	ldbu	r2,35(r2)
  801690:	10803fcc 	andi	r2,r2,255
  801694:	1080201c 	xori	r2,r2,128
  801698:	10bfe004 	addi	r2,r2,-128
  80169c:	18800926 	beq	r3,r2,8016c4 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8016a0:	e0fff903 	ldbu	r3,-28(fp)
  8016a4:	00bfe004 	movi	r2,-128
  8016a8:	1884b03a 	or	r2,r3,r2
  8016ac:	11403fcc 	andi	r5,r2,255
  8016b0:	e13fff17 	ldw	r4,-4(fp)
  8016b4:	08013040 	call	801304 <lcd_write_command>
          sp->address = address;
  8016b8:	e0fff903 	ldbu	r3,-28(fp)
  8016bc:	e0bfff17 	ldw	r2,-4(fp)
  8016c0:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8016c4:	e0bff943 	ldbu	r2,-27(fp)
  8016c8:	11403fcc 	andi	r5,r2,255
  8016cc:	e13fff17 	ldw	r4,-4(fp)
  8016d0:	08013bc0 	call	8013bc <lcd_write_data>
        sp->line[y].visible[x] = c;
  8016d4:	e0bffe17 	ldw	r2,-8(fp)
  8016d8:	e13ffd17 	ldw	r4,-12(fp)
  8016dc:	e0ffff17 	ldw	r3,-4(fp)
  8016e0:	10801924 	muli	r2,r2,100
  8016e4:	10c5883a 	add	r2,r2,r3
  8016e8:	1105883a 	add	r2,r2,r4
  8016ec:	10c00c04 	addi	r3,r2,48
  8016f0:	e0bff943 	ldbu	r2,-27(fp)
  8016f4:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8016f8:	e0bffd17 	ldw	r2,-12(fp)
  8016fc:	10800044 	addi	r2,r2,1
  801700:	e0bffd15 	stw	r2,-12(fp)
  801704:	e0bffd17 	ldw	r2,-12(fp)
  801708:	10800410 	cmplti	r2,r2,16
  80170c:	103fba1e 	bne	r2,zero,8015f8 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801710:	e0bffe17 	ldw	r2,-8(fp)
  801714:	10800044 	addi	r2,r2,1
  801718:	e0bffe15 	stw	r2,-8(fp)
  80171c:	e0bffe17 	ldw	r2,-8(fp)
  801720:	10800090 	cmplti	r2,r2,2
  801724:	103f991e 	bne	r2,zero,80158c <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  801728:	e037883a 	mov	sp,fp
  80172c:	dfc00217 	ldw	ra,8(sp)
  801730:	df000117 	ldw	fp,4(sp)
  801734:	dc000017 	ldw	r16,0(sp)
  801738:	dec00304 	addi	sp,sp,12
  80173c:	f800283a 	ret

00801740 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  801740:	defffc04 	addi	sp,sp,-16
  801744:	dfc00315 	stw	ra,12(sp)
  801748:	df000215 	stw	fp,8(sp)
  80174c:	df000204 	addi	fp,sp,8
  801750:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801754:	e03ffe15 	stw	zero,-8(fp)
  801758:	00001d06 	br	8017d0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80175c:	e0bffe17 	ldw	r2,-8(fp)
  801760:	10800048 	cmpgei	r2,r2,1
  801764:	10000f1e 	bne	r2,zero,8017a4 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  801768:	e0bffe17 	ldw	r2,-8(fp)
  80176c:	10801924 	muli	r2,r2,100
  801770:	10c01004 	addi	r3,r2,64
  801774:	e0bfff17 	ldw	r2,-4(fp)
  801778:	1889883a 	add	r4,r3,r2
  80177c:	e0bffe17 	ldw	r2,-8(fp)
  801780:	10800044 	addi	r2,r2,1
  801784:	10801924 	muli	r2,r2,100
  801788:	10c01004 	addi	r3,r2,64
  80178c:	e0bfff17 	ldw	r2,-4(fp)
  801790:	1885883a 	add	r2,r3,r2
  801794:	100b883a 	mov	r5,r2
  801798:	01801404 	movi	r6,80
  80179c:	08040480 	call	804048 <memcpy>
  8017a0:	00000806 	br	8017c4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8017a4:	e0bffe17 	ldw	r2,-8(fp)
  8017a8:	10801924 	muli	r2,r2,100
  8017ac:	10c01004 	addi	r3,r2,64
  8017b0:	e0bfff17 	ldw	r2,-4(fp)
  8017b4:	1889883a 	add	r4,r3,r2
  8017b8:	01400804 	movi	r5,32
  8017bc:	01801404 	movi	r6,80
  8017c0:	08040e80 	call	8040e8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8017c4:	e0bffe17 	ldw	r2,-8(fp)
  8017c8:	10800044 	addi	r2,r2,1
  8017cc:	e0bffe15 	stw	r2,-8(fp)
  8017d0:	e0bffe17 	ldw	r2,-8(fp)
  8017d4:	10800090 	cmplti	r2,r2,2
  8017d8:	103fe01e 	bne	r2,zero,80175c <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8017dc:	e0bfff17 	ldw	r2,-4(fp)
  8017e0:	10800883 	ldbu	r2,34(r2)
  8017e4:	10bfffc4 	addi	r2,r2,-1
  8017e8:	1007883a 	mov	r3,r2
  8017ec:	e0bfff17 	ldw	r2,-4(fp)
  8017f0:	10c00885 	stb	r3,34(r2)
}
  8017f4:	e037883a 	mov	sp,fp
  8017f8:	dfc00117 	ldw	ra,4(sp)
  8017fc:	df000017 	ldw	fp,0(sp)
  801800:	dec00204 	addi	sp,sp,8
  801804:	f800283a 	ret

00801808 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  801808:	defff804 	addi	sp,sp,-32
  80180c:	dfc00715 	stw	ra,28(sp)
  801810:	df000615 	stw	fp,24(sp)
  801814:	df000604 	addi	fp,sp,24
  801818:	e13ffd15 	stw	r4,-12(fp)
  80181c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  801820:	e03ffc15 	stw	zero,-16(fp)
  801824:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  801828:	e0bffd17 	ldw	r2,-12(fp)
  80182c:	10800a03 	ldbu	r2,40(r2)
  801830:	10803fcc 	andi	r2,r2,255
  801834:	1080201c 	xori	r2,r2,128
  801838:	10bfe004 	addi	r2,r2,-128
  80183c:	108016d8 	cmpnei	r2,r2,91
  801840:	1000491e 	bne	r2,zero,801968 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  801844:	e0bffd17 	ldw	r2,-12(fp)
  801848:	10800a04 	addi	r2,r2,40
  80184c:	10800044 	addi	r2,r2,1
  801850:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  801854:	00000d06 	br	80188c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  801858:	e0bffc17 	ldw	r2,-16(fp)
  80185c:	10c002a4 	muli	r3,r2,10
  801860:	e0bffa17 	ldw	r2,-24(fp)
  801864:	10800003 	ldbu	r2,0(r2)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	1885883a 	add	r2,r3,r2
  801878:	10bff404 	addi	r2,r2,-48
  80187c:	e0bffc15 	stw	r2,-16(fp)
  801880:	e0bffa17 	ldw	r2,-24(fp)
  801884:	10800044 	addi	r2,r2,1
  801888:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80188c:	e0bffa17 	ldw	r2,-24(fp)
  801890:	10800003 	ldbu	r2,0(r2)
  801894:	10803fcc 	andi	r2,r2,255
  801898:	1080201c 	xori	r2,r2,128
  80189c:	10bfe004 	addi	r2,r2,-128
  8018a0:	1007883a 	mov	r3,r2
  8018a4:	00802034 	movhi	r2,128
  8018a8:	10986e04 	addi	r2,r2,25016
  8018ac:	10800017 	ldw	r2,0(r2)
  8018b0:	1885883a 	add	r2,r3,r2
  8018b4:	10800003 	ldbu	r2,0(r2)
  8018b8:	10803fcc 	andi	r2,r2,255
  8018bc:	1080010c 	andi	r2,r2,4
  8018c0:	1004c03a 	cmpne	r2,r2,zero
  8018c4:	103fe41e 	bne	r2,zero,801858 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8018c8:	e0bffa17 	ldw	r2,-24(fp)
  8018cc:	10800003 	ldbu	r2,0(r2)
  8018d0:	10803fcc 	andi	r2,r2,255
  8018d4:	1080201c 	xori	r2,r2,128
  8018d8:	10bfe004 	addi	r2,r2,-128
  8018dc:	10800ed8 	cmpnei	r2,r2,59
  8018e0:	1000231e 	bne	r2,zero,801970 <lcd_handle_escape+0x168>
    {
      ptr++;
  8018e4:	e0bffa17 	ldw	r2,-24(fp)
  8018e8:	10800044 	addi	r2,r2,1
  8018ec:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  8018f0:	00000d06 	br	801928 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8018f4:	e0bffb17 	ldw	r2,-20(fp)
  8018f8:	10c002a4 	muli	r3,r2,10
  8018fc:	e0bffa17 	ldw	r2,-24(fp)
  801900:	10800003 	ldbu	r2,0(r2)
  801904:	10803fcc 	andi	r2,r2,255
  801908:	1080201c 	xori	r2,r2,128
  80190c:	10bfe004 	addi	r2,r2,-128
  801910:	1885883a 	add	r2,r3,r2
  801914:	10bff404 	addi	r2,r2,-48
  801918:	e0bffb15 	stw	r2,-20(fp)
  80191c:	e0bffa17 	ldw	r2,-24(fp)
  801920:	10800044 	addi	r2,r2,1
  801924:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  801928:	e0bffa17 	ldw	r2,-24(fp)
  80192c:	10800003 	ldbu	r2,0(r2)
  801930:	10803fcc 	andi	r2,r2,255
  801934:	1080201c 	xori	r2,r2,128
  801938:	10bfe004 	addi	r2,r2,-128
  80193c:	1007883a 	mov	r3,r2
  801940:	00802034 	movhi	r2,128
  801944:	10986e04 	addi	r2,r2,25016
  801948:	10800017 	ldw	r2,0(r2)
  80194c:	1885883a 	add	r2,r3,r2
  801950:	10800003 	ldbu	r2,0(r2)
  801954:	10803fcc 	andi	r2,r2,255
  801958:	1080010c 	andi	r2,r2,4
  80195c:	1004c03a 	cmpne	r2,r2,zero
  801960:	103fe41e 	bne	r2,zero,8018f4 <lcd_handle_escape+0xec>
  801964:	00000206 	br	801970 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  801968:	00bfffc4 	movi	r2,-1
  80196c:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  801970:	e0bffe07 	ldb	r2,-8(fp)
  801974:	e0bfff15 	stw	r2,-4(fp)
  801978:	e0ffff17 	ldw	r3,-4(fp)
  80197c:	188012a0 	cmpeqi	r2,r3,74
  801980:	10002f1e 	bne	r2,zero,801a40 <lcd_handle_escape+0x238>
  801984:	e0ffff17 	ldw	r3,-4(fp)
  801988:	188012c8 	cmpgei	r2,r3,75
  80198c:	1000041e 	bne	r2,zero,8019a0 <lcd_handle_escape+0x198>
  801990:	e0ffff17 	ldw	r3,-4(fp)
  801994:	18801220 	cmpeqi	r2,r3,72
  801998:	1000081e 	bne	r2,zero,8019bc <lcd_handle_escape+0x1b4>
  80199c:	00004906 	br	801ac4 <lcd_handle_escape+0x2bc>
  8019a0:	e0ffff17 	ldw	r3,-4(fp)
  8019a4:	188012e0 	cmpeqi	r2,r3,75
  8019a8:	10002b1e 	bne	r2,zero,801a58 <lcd_handle_escape+0x250>
  8019ac:	e0ffff17 	ldw	r3,-4(fp)
  8019b0:	188019a0 	cmpeqi	r2,r3,102
  8019b4:	1000011e 	bne	r2,zero,8019bc <lcd_handle_escape+0x1b4>
  8019b8:	00004206 	br	801ac4 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8019bc:	e0bffb17 	ldw	r2,-20(fp)
  8019c0:	10800050 	cmplti	r2,r2,1
  8019c4:	1000051e 	bne	r2,zero,8019dc <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  8019c8:	e0bffb17 	ldw	r2,-20(fp)
  8019cc:	10bfffc4 	addi	r2,r2,-1
  8019d0:	1007883a 	mov	r3,r2
  8019d4:	e0bffd17 	ldw	r2,-12(fp)
  8019d8:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8019dc:	e0bffc17 	ldw	r2,-16(fp)
  8019e0:	10800050 	cmplti	r2,r2,1
  8019e4:	1000371e 	bne	r2,zero,801ac4 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  8019e8:	e0bffc17 	ldw	r2,-16(fp)
  8019ec:	10bfffc4 	addi	r2,r2,-1
  8019f0:	1007883a 	mov	r3,r2
  8019f4:	e0bffd17 	ldw	r2,-12(fp)
  8019f8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8019fc:	e0bffd17 	ldw	r2,-12(fp)
  801a00:	10800883 	ldbu	r2,34(r2)
  801a04:	10803fcc 	andi	r2,r2,255
  801a08:	10800170 	cmpltui	r2,r2,5
  801a0c:	1000061e 	bne	r2,zero,801a28 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  801a10:	e0fffd17 	ldw	r3,-12(fp)
  801a14:	00800104 	movi	r2,4
  801a18:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  801a1c:	00000206 	br	801a28 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  801a20:	e13ffd17 	ldw	r4,-12(fp)
  801a24:	08017400 	call	801740 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  801a28:	e0bffd17 	ldw	r2,-12(fp)
  801a2c:	10800883 	ldbu	r2,34(r2)
  801a30:	10803fcc 	andi	r2,r2,255
  801a34:	108000e8 	cmpgeui	r2,r2,3
  801a38:	103ff91e 	bne	r2,zero,801a20 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  801a3c:	00002106 	br	801ac4 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  801a40:	e0bffc17 	ldw	r2,-16(fp)
  801a44:	10800098 	cmpnei	r2,r2,2
  801a48:	10001e1e 	bne	r2,zero,801ac4 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  801a4c:	e13ffd17 	ldw	r4,-12(fp)
  801a50:	08014900 	call	801490 <lcd_clear_screen>
    break;
  801a54:	00001b06 	br	801ac4 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  801a58:	e0bffc17 	ldw	r2,-16(fp)
  801a5c:	10800048 	cmpgei	r2,r2,1
  801a60:	1000181e 	bne	r2,zero,801ac4 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801a64:	e0bffd17 	ldw	r2,-12(fp)
  801a68:	10800843 	ldbu	r2,33(r2)
  801a6c:	10803fcc 	andi	r2,r2,255
  801a70:	10801428 	cmpgeui	r2,r2,80
  801a74:	1000131e 	bne	r2,zero,801ac4 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  801a78:	e0bffd17 	ldw	r2,-12(fp)
  801a7c:	10800883 	ldbu	r2,34(r2)
  801a80:	10803fcc 	andi	r2,r2,255
  801a84:	10801924 	muli	r2,r2,100
  801a88:	10c01004 	addi	r3,r2,64
  801a8c:	e0bffd17 	ldw	r2,-12(fp)
  801a90:	1887883a 	add	r3,r3,r2
  801a94:	e0bffd17 	ldw	r2,-12(fp)
  801a98:	10800843 	ldbu	r2,33(r2)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1889883a 	add	r4,r3,r2
  801aa4:	e0bffd17 	ldw	r2,-12(fp)
  801aa8:	10800843 	ldbu	r2,33(r2)
  801aac:	10c03fcc 	andi	r3,r2,255
  801ab0:	00801404 	movi	r2,80
  801ab4:	10c5c83a 	sub	r2,r2,r3
  801ab8:	100d883a 	mov	r6,r2
  801abc:	01400804 	movi	r5,32
  801ac0:	08040e80 	call	8040e8 <memset>
    }
    break;
  }
}
  801ac4:	e037883a 	mov	sp,fp
  801ac8:	dfc00117 	ldw	ra,4(sp)
  801acc:	df000017 	ldw	fp,0(sp)
  801ad0:	dec00204 	addi	sp,sp,8
  801ad4:	f800283a 	ret

00801ad8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801ad8:	defff204 	addi	sp,sp,-56
  801adc:	dfc00d15 	stw	ra,52(sp)
  801ae0:	df000c15 	stw	fp,48(sp)
  801ae4:	dc000b15 	stw	r16,44(sp)
  801ae8:	df000b04 	addi	fp,sp,44
  801aec:	e13ffc15 	stw	r4,-16(fp)
  801af0:	e17ffd15 	stw	r5,-12(fp)
  801af4:	e1bffe15 	stw	r6,-8(fp)
  801af8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801afc:	e0bffe17 	ldw	r2,-8(fp)
  801b00:	1007883a 	mov	r3,r2
  801b04:	e0bffd17 	ldw	r2,-12(fp)
  801b08:	10c5883a 	add	r2,r2,r3
  801b0c:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801b10:	e0fffc17 	ldw	r3,-16(fp)
  801b14:	00800044 	movi	r2,1
  801b18:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  801b1c:	0000a206 	br	801da8 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  801b20:	e0bffd17 	ldw	r2,-12(fp)
  801b24:	10800003 	ldbu	r2,0(r2)
  801b28:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  801b2c:	e0bffc17 	ldw	r2,-16(fp)
  801b30:	10800903 	ldbu	r2,36(r2)
  801b34:	10803fcc 	andi	r2,r2,255
  801b38:	1080201c 	xori	r2,r2,128
  801b3c:	10bfe004 	addi	r2,r2,-128
  801b40:	1004803a 	cmplt	r2,r2,zero
  801b44:	10003b1e 	bne	r2,zero,801c34 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  801b48:	e0bffc17 	ldw	r2,-16(fp)
  801b4c:	10800903 	ldbu	r2,36(r2)
  801b50:	10803fcc 	andi	r2,r2,255
  801b54:	1080201c 	xori	r2,r2,128
  801b58:	10bfe004 	addi	r2,r2,-128
  801b5c:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  801b60:	e0bff717 	ldw	r2,-36(fp)
  801b64:	1004c03a 	cmpne	r2,r2,zero
  801b68:	1000031e 	bne	r2,zero,801b78 <altera_avalon_lcd_16207_write+0xa0>
  801b6c:	e0bff807 	ldb	r2,-32(fp)
  801b70:	108016d8 	cmpnei	r2,r2,91
  801b74:	1000111e 	bne	r2,zero,801bbc <altera_avalon_lcd_16207_write+0xe4>
  801b78:	e0bff717 	ldw	r2,-36(fp)
  801b7c:	1005003a 	cmpeq	r2,r2,zero
  801b80:	10001a1e 	bne	r2,zero,801bec <altera_avalon_lcd_16207_write+0x114>
  801b84:	e0bff807 	ldb	r2,-32(fp)
  801b88:	1007883a 	mov	r3,r2
  801b8c:	00802034 	movhi	r2,128
  801b90:	10986e04 	addi	r2,r2,25016
  801b94:	10800017 	ldw	r2,0(r2)
  801b98:	1885883a 	add	r2,r3,r2
  801b9c:	10800003 	ldbu	r2,0(r2)
  801ba0:	10803fcc 	andi	r2,r2,255
  801ba4:	1080010c 	andi	r2,r2,4
  801ba8:	1004c03a 	cmpne	r2,r2,zero
  801bac:	10000f1e 	bne	r2,zero,801bec <altera_avalon_lcd_16207_write+0x114>
  801bb0:	e0bff807 	ldb	r2,-32(fp)
  801bb4:	10800ee0 	cmpeqi	r2,r2,59
  801bb8:	10000c1e 	bne	r2,zero,801bec <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  801bbc:	e0fff717 	ldw	r3,-36(fp)
  801bc0:	e0bffc17 	ldw	r2,-16(fp)
  801bc4:	1885883a 	add	r2,r3,r2
  801bc8:	10800a04 	addi	r2,r2,40
  801bcc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801bd0:	e17ff807 	ldb	r5,-32(fp)
  801bd4:	e13ffc17 	ldw	r4,-16(fp)
  801bd8:	08018080 	call	801808 <lcd_handle_escape>

        sp->esccount = -1;
  801bdc:	e0fffc17 	ldw	r3,-16(fp)
  801be0:	00bfffc4 	movi	r2,-1
  801be4:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  801be8:	00006c06 	br	801d9c <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801bec:	e0bffc17 	ldw	r2,-16(fp)
  801bf0:	10800903 	ldbu	r2,36(r2)
  801bf4:	10803fcc 	andi	r2,r2,255
  801bf8:	108001e8 	cmpgeui	r2,r2,7
  801bfc:	1000671e 	bne	r2,zero,801d9c <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  801c00:	e0fff717 	ldw	r3,-36(fp)
  801c04:	e0bffc17 	ldw	r2,-16(fp)
  801c08:	1885883a 	add	r2,r3,r2
  801c0c:	10c00a04 	addi	r3,r2,40
  801c10:	e0bff803 	ldbu	r2,-32(fp)
  801c14:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  801c18:	e0bffc17 	ldw	r2,-16(fp)
  801c1c:	10800903 	ldbu	r2,36(r2)
  801c20:	10800044 	addi	r2,r2,1
  801c24:	1007883a 	mov	r3,r2
  801c28:	e0bffc17 	ldw	r2,-16(fp)
  801c2c:	10c00905 	stb	r3,36(r2)
  801c30:	00005a06 	br	801d9c <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  801c34:	e0bff807 	ldb	r2,-32(fp)
  801c38:	108006d8 	cmpnei	r2,r2,27
  801c3c:	1000031e 	bne	r2,zero,801c4c <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  801c40:	e0bffc17 	ldw	r2,-16(fp)
  801c44:	10000905 	stb	zero,36(r2)
  801c48:	00005406 	br	801d9c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  801c4c:	e0bff807 	ldb	r2,-32(fp)
  801c50:	10800358 	cmpnei	r2,r2,13
  801c54:	1000031e 	bne	r2,zero,801c64 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10000845 	stb	zero,33(r2)
  801c60:	00004e06 	br	801d9c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  801c64:	e0bff807 	ldb	r2,-32(fp)
  801c68:	10800298 	cmpnei	r2,r2,10
  801c6c:	1000101e 	bne	r2,zero,801cb0 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	10000845 	stb	zero,33(r2)
      sp->y++;
  801c78:	e0bffc17 	ldw	r2,-16(fp)
  801c7c:	10800883 	ldbu	r2,34(r2)
  801c80:	10800044 	addi	r2,r2,1
  801c84:	1007883a 	mov	r3,r2
  801c88:	e0bffc17 	ldw	r2,-16(fp)
  801c8c:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  801c90:	e0bffc17 	ldw	r2,-16(fp)
  801c94:	10800883 	ldbu	r2,34(r2)
  801c98:	10803fcc 	andi	r2,r2,255
  801c9c:	108000f0 	cmpltui	r2,r2,3
  801ca0:	10003e1e 	bne	r2,zero,801d9c <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  801ca4:	e13ffc17 	ldw	r4,-16(fp)
  801ca8:	08017400 	call	801740 <lcd_scroll_up>
  801cac:	00003b06 	br	801d9c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  801cb0:	e0bff807 	ldb	r2,-32(fp)
  801cb4:	10800218 	cmpnei	r2,r2,8
  801cb8:	10000c1e 	bne	r2,zero,801cec <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  801cbc:	e0bffc17 	ldw	r2,-16(fp)
  801cc0:	10800843 	ldbu	r2,33(r2)
  801cc4:	10803fcc 	andi	r2,r2,255
  801cc8:	1005003a 	cmpeq	r2,r2,zero
  801ccc:	1000331e 	bne	r2,zero,801d9c <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  801cd0:	e0bffc17 	ldw	r2,-16(fp)
  801cd4:	10800843 	ldbu	r2,33(r2)
  801cd8:	10bfffc4 	addi	r2,r2,-1
  801cdc:	1007883a 	mov	r3,r2
  801ce0:	e0bffc17 	ldw	r2,-16(fp)
  801ce4:	10c00845 	stb	r3,33(r2)
  801ce8:	00002c06 	br	801d9c <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  801cec:	e0bff807 	ldb	r2,-32(fp)
  801cf0:	1007883a 	mov	r3,r2
  801cf4:	00802034 	movhi	r2,128
  801cf8:	10986e04 	addi	r2,r2,25016
  801cfc:	10800017 	ldw	r2,0(r2)
  801d00:	1885883a 	add	r2,r3,r2
  801d04:	10800003 	ldbu	r2,0(r2)
  801d08:	10803fcc 	andi	r2,r2,255
  801d0c:	1080201c 	xori	r2,r2,128
  801d10:	10bfe004 	addi	r2,r2,-128
  801d14:	108025cc 	andi	r2,r2,151
  801d18:	1005003a 	cmpeq	r2,r2,zero
  801d1c:	10001f1e 	bne	r2,zero,801d9c <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801d20:	e0bffc17 	ldw	r2,-16(fp)
  801d24:	10800883 	ldbu	r2,34(r2)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	108000b0 	cmpltui	r2,r2,2
  801d30:	1000021e 	bne	r2,zero,801d3c <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  801d34:	e13ffc17 	ldw	r4,-16(fp)
  801d38:	08017400 	call	801740 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  801d3c:	e0bffc17 	ldw	r2,-16(fp)
  801d40:	10800843 	ldbu	r2,33(r2)
  801d44:	10803fcc 	andi	r2,r2,255
  801d48:	10801428 	cmpgeui	r2,r2,80
  801d4c:	10000d1e 	bne	r2,zero,801d84 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  801d50:	e0bffc17 	ldw	r2,-16(fp)
  801d54:	10800883 	ldbu	r2,34(r2)
  801d58:	11003fcc 	andi	r4,r2,255
  801d5c:	e0bffc17 	ldw	r2,-16(fp)
  801d60:	10800843 	ldbu	r2,33(r2)
  801d64:	11403fcc 	andi	r5,r2,255
  801d68:	e0fffc17 	ldw	r3,-16(fp)
  801d6c:	20801924 	muli	r2,r4,100
  801d70:	10c5883a 	add	r2,r2,r3
  801d74:	1145883a 	add	r2,r2,r5
  801d78:	10c01004 	addi	r3,r2,64
  801d7c:	e0bff803 	ldbu	r2,-32(fp)
  801d80:	18800005 	stb	r2,0(r3)

      sp->x++;
  801d84:	e0bffc17 	ldw	r2,-16(fp)
  801d88:	10800843 	ldbu	r2,33(r2)
  801d8c:	10800044 	addi	r2,r2,1
  801d90:	1007883a 	mov	r3,r2
  801d94:	e0bffc17 	ldw	r2,-16(fp)
  801d98:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  801d9c:	e0bffd17 	ldw	r2,-12(fp)
  801da0:	10800044 	addi	r2,r2,1
  801da4:	e0bffd15 	stw	r2,-12(fp)
  801da8:	e0fffd17 	ldw	r3,-12(fp)
  801dac:	e0bffb17 	ldw	r2,-20(fp)
  801db0:	18bf5b36 	bltu	r3,r2,801b20 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  801db4:	00800404 	movi	r2,16
  801db8:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801dbc:	e03ffa15 	stw	zero,-24(fp)
  801dc0:	00003606 	br	801e9c <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801dc4:	00801404 	movi	r2,80
  801dc8:	e0bff615 	stw	r2,-40(fp)
  801dcc:	00001106 	br	801e14 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  801dd0:	e13ffa17 	ldw	r4,-24(fp)
  801dd4:	e0bff617 	ldw	r2,-40(fp)
  801dd8:	117fffc4 	addi	r5,r2,-1
  801ddc:	e0fffc17 	ldw	r3,-16(fp)
  801de0:	20801924 	muli	r2,r4,100
  801de4:	10c5883a 	add	r2,r2,r3
  801de8:	1145883a 	add	r2,r2,r5
  801dec:	10801004 	addi	r2,r2,64
  801df0:	10800003 	ldbu	r2,0(r2)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1080201c 	xori	r2,r2,128
  801dfc:	10bfe004 	addi	r2,r2,-128
  801e00:	10800818 	cmpnei	r2,r2,32
  801e04:	1000061e 	bne	r2,zero,801e20 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801e08:	e0bff617 	ldw	r2,-40(fp)
  801e0c:	10bfffc4 	addi	r2,r2,-1
  801e10:	e0bff615 	stw	r2,-40(fp)
  801e14:	e0bff617 	ldw	r2,-40(fp)
  801e18:	10800048 	cmpgei	r2,r2,1
  801e1c:	103fec1e 	bne	r2,zero,801dd0 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801e20:	e0bff617 	ldw	r2,-40(fp)
  801e24:	10800448 	cmpgei	r2,r2,17
  801e28:	1000031e 	bne	r2,zero,801e38 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  801e2c:	00800404 	movi	r2,16
  801e30:	e0bff615 	stw	r2,-40(fp)
  801e34:	00000306 	br	801e44 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  801e38:	e0bff617 	ldw	r2,-40(fp)
  801e3c:	10800044 	addi	r2,r2,1
  801e40:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  801e44:	e13ffa17 	ldw	r4,-24(fp)
  801e48:	e0bff617 	ldw	r2,-40(fp)
  801e4c:	100b883a 	mov	r5,r2
  801e50:	e0fffc17 	ldw	r3,-16(fp)
  801e54:	20801924 	muli	r2,r4,100
  801e58:	10c5883a 	add	r2,r2,r3
  801e5c:	10802404 	addi	r2,r2,144
  801e60:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  801e64:	e0fff917 	ldw	r3,-28(fp)
  801e68:	e0bff617 	ldw	r2,-40(fp)
  801e6c:	1880020e 	bge	r3,r2,801e78 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  801e70:	e0bff617 	ldw	r2,-40(fp)
  801e74:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801e78:	e0bffa17 	ldw	r2,-24(fp)
  801e7c:	e0fffc17 	ldw	r3,-16(fp)
  801e80:	10801924 	muli	r2,r2,100
  801e84:	10c5883a 	add	r2,r2,r3
  801e88:	10802404 	addi	r2,r2,144
  801e8c:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801e90:	e0bffa17 	ldw	r2,-24(fp)
  801e94:	10800044 	addi	r2,r2,1
  801e98:	e0bffa15 	stw	r2,-24(fp)
  801e9c:	e0bffa17 	ldw	r2,-24(fp)
  801ea0:	10800090 	cmplti	r2,r2,2
  801ea4:	103fc71e 	bne	r2,zero,801dc4 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801ea8:	e0bff917 	ldw	r2,-28(fp)
  801eac:	10800448 	cmpgei	r2,r2,17
  801eb0:	1000031e 	bne	r2,zero,801ec0 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  801eb4:	e0bffc17 	ldw	r2,-16(fp)
  801eb8:	10000985 	stb	zero,38(r2)
  801ebc:	00002d06 	br	801f74 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  801ec0:	e0bff917 	ldw	r2,-28(fp)
  801ec4:	1085883a 	add	r2,r2,r2
  801ec8:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  801ecc:	e0bff917 	ldw	r2,-28(fp)
  801ed0:	1007883a 	mov	r3,r2
  801ed4:	e0bffc17 	ldw	r2,-16(fp)
  801ed8:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801edc:	e03ffa15 	stw	zero,-24(fp)
  801ee0:	00002106 	br	801f68 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  801ee4:	e0bffa17 	ldw	r2,-24(fp)
  801ee8:	e0fffc17 	ldw	r3,-16(fp)
  801eec:	10801924 	muli	r2,r2,100
  801ef0:	10c5883a 	add	r2,r2,r3
  801ef4:	10802404 	addi	r2,r2,144
  801ef8:	10800043 	ldbu	r2,1(r2)
  801efc:	10803fcc 	andi	r2,r2,255
  801f00:	1080201c 	xori	r2,r2,128
  801f04:	10bfe004 	addi	r2,r2,-128
  801f08:	10800450 	cmplti	r2,r2,17
  801f0c:	1000131e 	bne	r2,zero,801f5c <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801f10:	e43ffa17 	ldw	r16,-24(fp)
  801f14:	e0bffa17 	ldw	r2,-24(fp)
  801f18:	e0fffc17 	ldw	r3,-16(fp)
  801f1c:	10801924 	muli	r2,r2,100
  801f20:	10c5883a 	add	r2,r2,r3
  801f24:	10802404 	addi	r2,r2,144
  801f28:	10800043 	ldbu	r2,1(r2)
  801f2c:	10803fcc 	andi	r2,r2,255
  801f30:	1080201c 	xori	r2,r2,128
  801f34:	10bfe004 	addi	r2,r2,-128
  801f38:	1008923a 	slli	r4,r2,8
  801f3c:	e17ff917 	ldw	r5,-28(fp)
  801f40:	08045580 	call	804558 <__divsi3>
  801f44:	1009883a 	mov	r4,r2
  801f48:	e0fffc17 	ldw	r3,-16(fp)
  801f4c:	80801924 	muli	r2,r16,100
  801f50:	10c5883a 	add	r2,r2,r3
  801f54:	10802404 	addi	r2,r2,144
  801f58:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801f5c:	e0bffa17 	ldw	r2,-24(fp)
  801f60:	10800044 	addi	r2,r2,1
  801f64:	e0bffa15 	stw	r2,-24(fp)
  801f68:	e0bffa17 	ldw	r2,-24(fp)
  801f6c:	10800090 	cmplti	r2,r2,2
  801f70:	103fdc1e 	bne	r2,zero,801ee4 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801f74:	e0bffc17 	ldw	r2,-16(fp)
  801f78:	10800943 	ldbu	r2,37(r2)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  801f8c:	e13ffc17 	ldw	r4,-16(fp)
  801f90:	08015540 	call	801554 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801f94:	e0bffc17 	ldw	r2,-16(fp)
  801f98:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801f9c:	e0bffc17 	ldw	r2,-16(fp)
  801fa0:	10800943 	ldbu	r2,37(r2)
  801fa4:	10c03fcc 	andi	r3,r2,255
  801fa8:	18c0201c 	xori	r3,r3,128
  801fac:	18ffe004 	addi	r3,r3,-128
  801fb0:	e0bff517 	ldw	r2,-44(fp)
  801fb4:	18800426 	beq	r3,r2,801fc8 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801fb8:	e0fffc17 	ldw	r3,-16(fp)
  801fbc:	00800044 	movi	r2,1
  801fc0:	188009c5 	stb	r2,39(r3)
  }
  801fc4:	003feb06 	br	801f74 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801fc8:	e0bffe17 	ldw	r2,-8(fp)
}
  801fcc:	e037883a 	mov	sp,fp
  801fd0:	dfc00217 	ldw	ra,8(sp)
  801fd4:	df000117 	ldw	fp,4(sp)
  801fd8:	dc000017 	ldw	r16,0(sp)
  801fdc:	dec00304 	addi	sp,sp,12
  801fe0:	f800283a 	ret

00801fe4 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801fe4:	defffc04 	addi	sp,sp,-16
  801fe8:	dfc00315 	stw	ra,12(sp)
  801fec:	df000215 	stw	fp,8(sp)
  801ff0:	df000204 	addi	fp,sp,8
  801ff4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801ff8:	e0bfff17 	ldw	r2,-4(fp)
  801ffc:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  802000:	e0bffe17 	ldw	r2,-8(fp)
  802004:	10800943 	ldbu	r2,37(r2)
  802008:	10803fcc 	andi	r2,r2,255
  80200c:	1080201c 	xori	r2,r2,128
  802010:	10bfe004 	addi	r2,r2,-128
  802014:	10c00044 	addi	r3,r2,1
  802018:	e0bffe17 	ldw	r2,-8(fp)
  80201c:	10800983 	ldbu	r2,38(r2)
  802020:	10803fcc 	andi	r2,r2,255
  802024:	1080201c 	xori	r2,r2,128
  802028:	10bfe004 	addi	r2,r2,-128
  80202c:	18800316 	blt	r3,r2,80203c <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  802030:	e0bffe17 	ldw	r2,-8(fp)
  802034:	10000945 	stb	zero,37(r2)
  802038:	00000606 	br	802054 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80203c:	e0bffe17 	ldw	r2,-8(fp)
  802040:	10800943 	ldbu	r2,37(r2)
  802044:	10800044 	addi	r2,r2,1
  802048:	1007883a 	mov	r3,r2
  80204c:	e0bffe17 	ldw	r2,-8(fp)
  802050:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  802054:	e0bffe17 	ldw	r2,-8(fp)
  802058:	10800983 	ldbu	r2,38(r2)
  80205c:	10803fcc 	andi	r2,r2,255
  802060:	1080201c 	xori	r2,r2,128
  802064:	10bfe004 	addi	r2,r2,-128
  802068:	10800050 	cmplti	r2,r2,1
  80206c:	1000091e 	bne	r2,zero,802094 <alt_lcd_16207_timeout+0xb0>
  802070:	e0bffe17 	ldw	r2,-8(fp)
  802074:	108009c3 	ldbu	r2,39(r2)
  802078:	10803fcc 	andi	r2,r2,255
  80207c:	1080201c 	xori	r2,r2,128
  802080:	10bfe004 	addi	r2,r2,-128
  802084:	1004c03a 	cmpne	r2,r2,zero
  802088:	1000021e 	bne	r2,zero,802094 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  80208c:	e13ffe17 	ldw	r4,-8(fp)
  802090:	08015540 	call	801554 <lcd_repaint_screen>

  return sp->period;
  802094:	e0bffe17 	ldw	r2,-8(fp)
  802098:	10800717 	ldw	r2,28(r2)
}
  80209c:	e037883a 	mov	sp,fp
  8020a0:	dfc00117 	ldw	ra,4(sp)
  8020a4:	df000017 	ldw	fp,0(sp)
  8020a8:	dec00204 	addi	sp,sp,8
  8020ac:	f800283a 	ret

008020b0 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8020b0:	defffc04 	addi	sp,sp,-16
  8020b4:	dfc00315 	stw	ra,12(sp)
  8020b8:	df000215 	stw	fp,8(sp)
  8020bc:	df000204 	addi	fp,sp,8
  8020c0:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  8020c4:	e0bfff17 	ldw	r2,-4(fp)
  8020c8:	10800017 	ldw	r2,0(r2)
  8020cc:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  8020d0:	e0bfff17 	ldw	r2,-4(fp)
  8020d4:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  8020d8:	010ea604 	movi	r4,15000
  8020dc:	0803af00 	call	803af0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8020e0:	e0bffe17 	ldw	r2,-8(fp)
  8020e4:	1007883a 	mov	r3,r2
  8020e8:	00800c04 	movi	r2,48
  8020ec:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  8020f0:	01040104 	movi	r4,4100
  8020f4:	0803af00 	call	803af0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  8020f8:	e0bffe17 	ldw	r2,-8(fp)
  8020fc:	1007883a 	mov	r3,r2
  802100:	00800c04 	movi	r2,48
  802104:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  802108:	0100fa04 	movi	r4,1000
  80210c:	0803af00 	call	803af0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802110:	e0bffe17 	ldw	r2,-8(fp)
  802114:	1007883a 	mov	r3,r2
  802118:	00800c04 	movi	r2,48
  80211c:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  802120:	e13fff17 	ldw	r4,-4(fp)
  802124:	01400e04 	movi	r5,56
  802128:	08013040 	call	801304 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80212c:	e13fff17 	ldw	r4,-4(fp)
  802130:	01400204 	movi	r5,8
  802134:	08013040 	call	801304 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  802138:	e13fff17 	ldw	r4,-4(fp)
  80213c:	08014900 	call	801490 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  802140:	e13fff17 	ldw	r4,-4(fp)
  802144:	01400184 	movi	r5,6
  802148:	08013040 	call	801304 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80214c:	e13fff17 	ldw	r4,-4(fp)
  802150:	01400304 	movi	r5,12
  802154:	08013040 	call	801304 <lcd_write_command>

  sp->esccount = -1;
  802158:	e0ffff17 	ldw	r3,-4(fp)
  80215c:	00bfffc4 	movi	r2,-1
  802160:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  802164:	e0bfff17 	ldw	r2,-4(fp)
  802168:	11000a04 	addi	r4,r2,40
  80216c:	000b883a 	mov	r5,zero
  802170:	01800204 	movi	r6,8
  802174:	08040e80 	call	8040e8 <memset>

  sp->scrollpos = 0;
  802178:	e0bfff17 	ldw	r2,-4(fp)
  80217c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  802180:	e0bfff17 	ldw	r2,-4(fp)
  802184:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  802188:	e0bfff17 	ldw	r2,-4(fp)
  80218c:	100009c5 	stb	zero,39(r2)
  802190:	00802034 	movhi	r2,128
  802194:	109e9904 	addi	r2,r2,31332
  802198:	10800017 	ldw	r2,0(r2)
  80219c:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8021a0:	01400284 	movi	r5,10
  8021a4:	08046180 	call	804618 <__udivsi3>
  8021a8:	1007883a 	mov	r3,r2
  8021ac:	e0bfff17 	ldw	r2,-4(fp)
  8021b0:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8021b4:	e0bfff17 	ldw	r2,-4(fp)
  8021b8:	11000104 	addi	r4,r2,4
  8021bc:	e0bfff17 	ldw	r2,-4(fp)
  8021c0:	10800717 	ldw	r2,28(r2)
  8021c4:	100b883a 	mov	r5,r2
  8021c8:	01802034 	movhi	r6,128
  8021cc:	3187f904 	addi	r6,r6,8164
  8021d0:	e1ffff17 	ldw	r7,-4(fp)
  8021d4:	0802cf40 	call	802cf4 <alt_alarm_start>
}
  8021d8:	e037883a 	mov	sp,fp
  8021dc:	dfc00117 	ldw	ra,4(sp)
  8021e0:	df000017 	ldw	fp,0(sp)
  8021e4:	dec00204 	addi	sp,sp,8
  8021e8:	f800283a 	ret

008021ec <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8021ec:	defffa04 	addi	sp,sp,-24
  8021f0:	dfc00515 	stw	ra,20(sp)
  8021f4:	df000415 	stw	fp,16(sp)
  8021f8:	df000404 	addi	fp,sp,16
  8021fc:	e13ffd15 	stw	r4,-12(fp)
  802200:	e17ffe15 	stw	r5,-8(fp)
  802204:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  802208:	e0bffd17 	ldw	r2,-12(fp)
  80220c:	10800017 	ldw	r2,0(r2)
  802210:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  802214:	e0bffc17 	ldw	r2,-16(fp)
  802218:	11000a04 	addi	r4,r2,40
  80221c:	e0bffd17 	ldw	r2,-12(fp)
  802220:	11c00217 	ldw	r7,8(r2)
  802224:	e17ffe17 	ldw	r5,-8(fp)
  802228:	e1bfff17 	ldw	r6,-4(fp)
  80222c:	0801ad80 	call	801ad8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  802230:	e037883a 	mov	sp,fp
  802234:	dfc00117 	ldw	ra,4(sp)
  802238:	df000017 	ldw	fp,0(sp)
  80223c:	dec00204 	addi	sp,sp,8
  802240:	f800283a 	ret

00802244 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  802244:	defffa04 	addi	sp,sp,-24
  802248:	dfc00515 	stw	ra,20(sp)
  80224c:	df000415 	stw	fp,16(sp)
  802250:	df000404 	addi	fp,sp,16
  802254:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  802258:	e0bfff17 	ldw	r2,-4(fp)
  80225c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  802260:	e0bfff17 	ldw	r2,-4(fp)
  802264:	10800104 	addi	r2,r2,4
  802268:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80226c:	0005303a 	rdctl	r2,status
  802270:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802274:	e0fffd17 	ldw	r3,-12(fp)
  802278:	00bfff84 	movi	r2,-2
  80227c:	1884703a 	and	r2,r3,r2
  802280:	1001703a 	wrctl	status,r2
  
  return context;
  802284:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  802288:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80228c:	08039e40 	call	8039e4 <alt_tick>
  802290:	e0bffe17 	ldw	r2,-8(fp)
  802294:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802298:	e0bffc17 	ldw	r2,-16(fp)
  80229c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8022a0:	e037883a 	mov	sp,fp
  8022a4:	dfc00117 	ldw	ra,4(sp)
  8022a8:	df000017 	ldw	fp,0(sp)
  8022ac:	dec00204 	addi	sp,sp,8
  8022b0:	f800283a 	ret

008022b4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8022b4:	defff804 	addi	sp,sp,-32
  8022b8:	dfc00715 	stw	ra,28(sp)
  8022bc:	df000615 	stw	fp,24(sp)
  8022c0:	df000604 	addi	fp,sp,24
  8022c4:	e13ffc15 	stw	r4,-16(fp)
  8022c8:	e17ffd15 	stw	r5,-12(fp)
  8022cc:	e1bffe15 	stw	r6,-8(fp)
  8022d0:	e1ffff15 	stw	r7,-4(fp)
  8022d4:	e0bfff17 	ldw	r2,-4(fp)
  8022d8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8022dc:	00802034 	movhi	r2,128
  8022e0:	109e9904 	addi	r2,r2,31332
  8022e4:	10800017 	ldw	r2,0(r2)
  8022e8:	1004c03a 	cmpne	r2,r2,zero
  8022ec:	1000041e 	bne	r2,zero,802300 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8022f0:	00c02034 	movhi	r3,128
  8022f4:	18de9904 	addi	r3,r3,31332
  8022f8:	e0bffb17 	ldw	r2,-20(fp)
  8022fc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  802300:	e0bffc17 	ldw	r2,-16(fp)
  802304:	10800104 	addi	r2,r2,4
  802308:	1007883a 	mov	r3,r2
  80230c:	008001c4 	movi	r2,7
  802310:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  802314:	d8000015 	stw	zero,0(sp)
  802318:	e13ffd17 	ldw	r4,-12(fp)
  80231c:	e17ffe17 	ldw	r5,-8(fp)
  802320:	01802034 	movhi	r6,128
  802324:	31889104 	addi	r6,r6,8772
  802328:	e1fffc17 	ldw	r7,-16(fp)
  80232c:	08032200 	call	803220 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  802330:	e037883a 	mov	sp,fp
  802334:	dfc00117 	ldw	ra,4(sp)
  802338:	df000017 	ldw	fp,0(sp)
  80233c:	dec00204 	addi	sp,sp,8
  802340:	f800283a 	ret

00802344 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802344:	defffa04 	addi	sp,sp,-24
  802348:	dfc00515 	stw	ra,20(sp)
  80234c:	df000415 	stw	fp,16(sp)
  802350:	df000404 	addi	fp,sp,16
  802354:	e13ffd15 	stw	r4,-12(fp)
  802358:	e17ffe15 	stw	r5,-8(fp)
  80235c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802360:	e0bffd17 	ldw	r2,-12(fp)
  802364:	10800017 	ldw	r2,0(r2)
  802368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80236c:	e0bffc17 	ldw	r2,-16(fp)
  802370:	11000a04 	addi	r4,r2,40
  802374:	e0bffd17 	ldw	r2,-12(fp)
  802378:	11c00217 	ldw	r7,8(r2)
  80237c:	e17ffe17 	ldw	r5,-8(fp)
  802380:	e1bfff17 	ldw	r6,-4(fp)
  802384:	080283c0 	call	80283c <altera_avalon_uart_read>
      fd->fd_flags);
}
  802388:	e037883a 	mov	sp,fp
  80238c:	dfc00117 	ldw	ra,4(sp)
  802390:	df000017 	ldw	fp,0(sp)
  802394:	dec00204 	addi	sp,sp,8
  802398:	f800283a 	ret

0080239c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80239c:	defffa04 	addi	sp,sp,-24
  8023a0:	dfc00515 	stw	ra,20(sp)
  8023a4:	df000415 	stw	fp,16(sp)
  8023a8:	df000404 	addi	fp,sp,16
  8023ac:	e13ffd15 	stw	r4,-12(fp)
  8023b0:	e17ffe15 	stw	r5,-8(fp)
  8023b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8023b8:	e0bffd17 	ldw	r2,-12(fp)
  8023bc:	10800017 	ldw	r2,0(r2)
  8023c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8023c4:	e0bffc17 	ldw	r2,-16(fp)
  8023c8:	11000a04 	addi	r4,r2,40
  8023cc:	e0bffd17 	ldw	r2,-12(fp)
  8023d0:	11c00217 	ldw	r7,8(r2)
  8023d4:	e17ffe17 	ldw	r5,-8(fp)
  8023d8:	e1bfff17 	ldw	r6,-4(fp)
  8023dc:	0802acc0 	call	802acc <altera_avalon_uart_write>
      fd->fd_flags);
}
  8023e0:	e037883a 	mov	sp,fp
  8023e4:	dfc00117 	ldw	ra,4(sp)
  8023e8:	df000017 	ldw	fp,0(sp)
  8023ec:	dec00204 	addi	sp,sp,8
  8023f0:	f800283a 	ret

008023f4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8023f4:	defffc04 	addi	sp,sp,-16
  8023f8:	dfc00315 	stw	ra,12(sp)
  8023fc:	df000215 	stw	fp,8(sp)
  802400:	df000204 	addi	fp,sp,8
  802404:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802408:	e0bfff17 	ldw	r2,-4(fp)
  80240c:	10800017 	ldw	r2,0(r2)
  802410:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  802414:	e0bffe17 	ldw	r2,-8(fp)
  802418:	11000a04 	addi	r4,r2,40
  80241c:	e0bfff17 	ldw	r2,-4(fp)
  802420:	11400217 	ldw	r5,8(r2)
  802424:	08027dc0 	call	8027dc <altera_avalon_uart_close>
}
  802428:	e037883a 	mov	sp,fp
  80242c:	dfc00117 	ldw	ra,4(sp)
  802430:	df000017 	ldw	fp,0(sp)
  802434:	dec00204 	addi	sp,sp,8
  802438:	f800283a 	ret

0080243c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80243c:	defff704 	addi	sp,sp,-36
  802440:	dfc00815 	stw	ra,32(sp)
  802444:	df000715 	stw	fp,28(sp)
  802448:	df000704 	addi	fp,sp,28
  80244c:	e13ffc15 	stw	r4,-16(fp)
  802450:	e17ffd15 	stw	r5,-12(fp)
  802454:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  802458:	e0bffc17 	ldw	r2,-16(fp)
  80245c:	10800017 	ldw	r2,0(r2)
  802460:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  802464:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  802468:	1004c03a 	cmpne	r2,r2,zero
  80246c:	1000061e 	bne	r2,zero,802488 <altera_avalon_uart_init+0x4c>
  802470:	0005883a 	mov	r2,zero
  802474:	1004c03a 	cmpne	r2,r2,zero
  802478:	1000031e 	bne	r2,zero,802488 <altera_avalon_uart_init+0x4c>
  80247c:	0005883a 	mov	r2,zero
  802480:	1005003a 	cmpeq	r2,r2,zero
  802484:	1000031e 	bne	r2,zero,802494 <altera_avalon_uart_init+0x58>
  802488:	00800044 	movi	r2,1
  80248c:	e0bfff15 	stw	r2,-4(fp)
  802490:	00000106 	br	802498 <altera_avalon_uart_init+0x5c>
  802494:	e03fff15 	stw	zero,-4(fp)
  802498:	e0bfff17 	ldw	r2,-4(fp)
  80249c:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8024a0:	e0bffa17 	ldw	r2,-24(fp)
  8024a4:	1004c03a 	cmpne	r2,r2,zero
  8024a8:	1000111e 	bne	r2,zero,8024f0 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8024ac:	e0fffc17 	ldw	r3,-16(fp)
  8024b0:	00832004 	movi	r2,3200
  8024b4:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8024b8:	e0bffb17 	ldw	r2,-20(fp)
  8024bc:	11000304 	addi	r4,r2,12
  8024c0:	e0bffc17 	ldw	r2,-16(fp)
  8024c4:	10800117 	ldw	r2,4(r2)
  8024c8:	1007883a 	mov	r3,r2
  8024cc:	2005883a 	mov	r2,r4
  8024d0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8024d4:	d8000015 	stw	zero,0(sp)
  8024d8:	e13ffd17 	ldw	r4,-12(fp)
  8024dc:	e17ffe17 	ldw	r5,-8(fp)
  8024e0:	01802034 	movhi	r6,128
  8024e4:	31894104 	addi	r6,r6,9476
  8024e8:	e1fffc17 	ldw	r7,-16(fp)
  8024ec:	08032200 	call	803220 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8024f0:	e037883a 	mov	sp,fp
  8024f4:	dfc00117 	ldw	ra,4(sp)
  8024f8:	df000017 	ldw	fp,0(sp)
  8024fc:	dec00204 	addi	sp,sp,8
  802500:	f800283a 	ret

00802504 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  802504:	defffa04 	addi	sp,sp,-24
  802508:	dfc00515 	stw	ra,20(sp)
  80250c:	df000415 	stw	fp,16(sp)
  802510:	df000404 	addi	fp,sp,16
  802514:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  802518:	e0bfff17 	ldw	r2,-4(fp)
  80251c:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  802520:	e0bffd17 	ldw	r2,-12(fp)
  802524:	10800017 	ldw	r2,0(r2)
  802528:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80252c:	e0bffc17 	ldw	r2,-16(fp)
  802530:	10800204 	addi	r2,r2,8
  802534:	10800037 	ldwio	r2,0(r2)
  802538:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80253c:	e0bffc17 	ldw	r2,-16(fp)
  802540:	10800204 	addi	r2,r2,8
  802544:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  802548:	e0bffc17 	ldw	r2,-16(fp)
  80254c:	10800204 	addi	r2,r2,8
  802550:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  802554:	e0bffe17 	ldw	r2,-8(fp)
  802558:	1080200c 	andi	r2,r2,128
  80255c:	1005003a 	cmpeq	r2,r2,zero
  802560:	1000031e 	bne	r2,zero,802570 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  802564:	e13ffd17 	ldw	r4,-12(fp)
  802568:	e17ffe17 	ldw	r5,-8(fp)
  80256c:	08025a00 	call	8025a0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  802570:	e0bffe17 	ldw	r2,-8(fp)
  802574:	1081100c 	andi	r2,r2,1088
  802578:	1005003a 	cmpeq	r2,r2,zero
  80257c:	1000031e 	bne	r2,zero,80258c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  802580:	e13ffd17 	ldw	r4,-12(fp)
  802584:	e17ffe17 	ldw	r5,-8(fp)
  802588:	08026800 	call	802680 <altera_avalon_uart_txirq>
  }
  

}
  80258c:	e037883a 	mov	sp,fp
  802590:	dfc00117 	ldw	ra,4(sp)
  802594:	df000017 	ldw	fp,0(sp)
  802598:	dec00204 	addi	sp,sp,8
  80259c:	f800283a 	ret

008025a0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8025a0:	defffc04 	addi	sp,sp,-16
  8025a4:	df000315 	stw	fp,12(sp)
  8025a8:	df000304 	addi	fp,sp,12
  8025ac:	e13ffe15 	stw	r4,-8(fp)
  8025b0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8025b4:	e0bfff17 	ldw	r2,-4(fp)
  8025b8:	108000cc 	andi	r2,r2,3
  8025bc:	1004c03a 	cmpne	r2,r2,zero
  8025c0:	10002b1e 	bne	r2,zero,802670 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8025c4:	e0bffe17 	ldw	r2,-8(fp)
  8025c8:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8025cc:	e0bffe17 	ldw	r2,-8(fp)
  8025d0:	10800317 	ldw	r2,12(r2)
  8025d4:	10800044 	addi	r2,r2,1
  8025d8:	10800fcc 	andi	r2,r2,63
  8025dc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8025e0:	e0bffe17 	ldw	r2,-8(fp)
  8025e4:	11000317 	ldw	r4,12(r2)
  8025e8:	e0bffe17 	ldw	r2,-8(fp)
  8025ec:	10800017 	ldw	r2,0(r2)
  8025f0:	10800037 	ldwio	r2,0(r2)
  8025f4:	1007883a 	mov	r3,r2
  8025f8:	e0bffe17 	ldw	r2,-8(fp)
  8025fc:	2085883a 	add	r2,r4,r2
  802600:	10800704 	addi	r2,r2,28
  802604:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  802608:	e0fffe17 	ldw	r3,-8(fp)
  80260c:	e0bffd17 	ldw	r2,-12(fp)
  802610:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802614:	e0bffe17 	ldw	r2,-8(fp)
  802618:	10800317 	ldw	r2,12(r2)
  80261c:	10800044 	addi	r2,r2,1
  802620:	10800fcc 	andi	r2,r2,63
  802624:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  802628:	e0bffe17 	ldw	r2,-8(fp)
  80262c:	10c00217 	ldw	r3,8(r2)
  802630:	e0bffd17 	ldw	r2,-12(fp)
  802634:	18800e1e 	bne	r3,r2,802670 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802638:	e0bffe17 	ldw	r2,-8(fp)
  80263c:	10c00117 	ldw	r3,4(r2)
  802640:	00bfdfc4 	movi	r2,-129
  802644:	1886703a 	and	r3,r3,r2
  802648:	e0bffe17 	ldw	r2,-8(fp)
  80264c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  802650:	e0bffe17 	ldw	r2,-8(fp)
  802654:	10800017 	ldw	r2,0(r2)
  802658:	11000304 	addi	r4,r2,12
  80265c:	e0bffe17 	ldw	r2,-8(fp)
  802660:	10800117 	ldw	r2,4(r2)
  802664:	1007883a 	mov	r3,r2
  802668:	2005883a 	mov	r2,r4
  80266c:	10c00035 	stwio	r3,0(r2)
  }   
}
  802670:	e037883a 	mov	sp,fp
  802674:	df000017 	ldw	fp,0(sp)
  802678:	dec00104 	addi	sp,sp,4
  80267c:	f800283a 	ret

00802680 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  802680:	defffd04 	addi	sp,sp,-12
  802684:	df000215 	stw	fp,8(sp)
  802688:	df000204 	addi	fp,sp,8
  80268c:	e13ffe15 	stw	r4,-8(fp)
  802690:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  802694:	e0bffe17 	ldw	r2,-8(fp)
  802698:	10c00417 	ldw	r3,16(r2)
  80269c:	e0bffe17 	ldw	r2,-8(fp)
  8026a0:	10800517 	ldw	r2,20(r2)
  8026a4:	18803626 	beq	r3,r2,802780 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8026a8:	e0bffe17 	ldw	r2,-8(fp)
  8026ac:	10800617 	ldw	r2,24(r2)
  8026b0:	1080008c 	andi	r2,r2,2
  8026b4:	1005003a 	cmpeq	r2,r2,zero
  8026b8:	1000041e 	bne	r2,zero,8026cc <altera_avalon_uart_txirq+0x4c>
  8026bc:	e0bfff17 	ldw	r2,-4(fp)
  8026c0:	1082000c 	andi	r2,r2,2048
  8026c4:	1005003a 	cmpeq	r2,r2,zero
  8026c8:	10001e1e 	bne	r2,zero,802744 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8026cc:	e0bffe17 	ldw	r2,-8(fp)
  8026d0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8026d4:	e0bffe17 	ldw	r2,-8(fp)
  8026d8:	10800017 	ldw	r2,0(r2)
  8026dc:	11000104 	addi	r4,r2,4
  8026e0:	e0bffe17 	ldw	r2,-8(fp)
  8026e4:	10c00417 	ldw	r3,16(r2)
  8026e8:	e0bffe17 	ldw	r2,-8(fp)
  8026ec:	1885883a 	add	r2,r3,r2
  8026f0:	10801704 	addi	r2,r2,92
  8026f4:	10800003 	ldbu	r2,0(r2)
  8026f8:	10c03fcc 	andi	r3,r2,255
  8026fc:	2005883a 	mov	r2,r4
  802700:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802704:	e0bffe17 	ldw	r2,-8(fp)
  802708:	10800417 	ldw	r2,16(r2)
  80270c:	10c00044 	addi	r3,r2,1
  802710:	e0bffe17 	ldw	r2,-8(fp)
  802714:	10c00415 	stw	r3,16(r2)
  802718:	e0bffe17 	ldw	r2,-8(fp)
  80271c:	10800417 	ldw	r2,16(r2)
  802720:	10c00fcc 	andi	r3,r2,63
  802724:	e0bffe17 	ldw	r2,-8(fp)
  802728:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80272c:	e0bffe17 	ldw	r2,-8(fp)
  802730:	10800117 	ldw	r2,4(r2)
  802734:	10c01014 	ori	r3,r2,64
  802738:	e0bffe17 	ldw	r2,-8(fp)
  80273c:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  802740:	00000f06 	br	802780 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  802744:	e0bffe17 	ldw	r2,-8(fp)
  802748:	10800017 	ldw	r2,0(r2)
  80274c:	10800204 	addi	r2,r2,8
  802750:	10800037 	ldwio	r2,0(r2)
  802754:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  802758:	e0bfff17 	ldw	r2,-4(fp)
  80275c:	1082000c 	andi	r2,r2,2048
  802760:	1004c03a 	cmpne	r2,r2,zero
  802764:	1000061e 	bne	r2,zero,802780 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802768:	e0bffe17 	ldw	r2,-8(fp)
  80276c:	10c00117 	ldw	r3,4(r2)
  802770:	00bfefc4 	movi	r2,-65
  802774:	1886703a 	and	r3,r3,r2
  802778:	e0bffe17 	ldw	r2,-8(fp)
  80277c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  802780:	e0bffe17 	ldw	r2,-8(fp)
  802784:	10c00417 	ldw	r3,16(r2)
  802788:	e0bffe17 	ldw	r2,-8(fp)
  80278c:	10800517 	ldw	r2,20(r2)
  802790:	1880061e 	bne	r3,r2,8027ac <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802794:	e0bffe17 	ldw	r2,-8(fp)
  802798:	10c00117 	ldw	r3,4(r2)
  80279c:	00beefc4 	movi	r2,-1089
  8027a0:	1886703a 	and	r3,r3,r2
  8027a4:	e0bffe17 	ldw	r2,-8(fp)
  8027a8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8027ac:	e0bffe17 	ldw	r2,-8(fp)
  8027b0:	10800017 	ldw	r2,0(r2)
  8027b4:	11000304 	addi	r4,r2,12
  8027b8:	e0bffe17 	ldw	r2,-8(fp)
  8027bc:	10800117 	ldw	r2,4(r2)
  8027c0:	1007883a 	mov	r3,r2
  8027c4:	2005883a 	mov	r2,r4
  8027c8:	10c00035 	stwio	r3,0(r2)
}
  8027cc:	e037883a 	mov	sp,fp
  8027d0:	df000017 	ldw	fp,0(sp)
  8027d4:	dec00104 	addi	sp,sp,4
  8027d8:	f800283a 	ret

008027dc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8027dc:	defffc04 	addi	sp,sp,-16
  8027e0:	df000315 	stw	fp,12(sp)
  8027e4:	df000304 	addi	fp,sp,12
  8027e8:	e13ffd15 	stw	r4,-12(fp)
  8027ec:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8027f0:	00000706 	br	802810 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8027f4:	e0bffe17 	ldw	r2,-8(fp)
  8027f8:	1090000c 	andi	r2,r2,16384
  8027fc:	1005003a 	cmpeq	r2,r2,zero
  802800:	1000031e 	bne	r2,zero,802810 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  802804:	00bffd44 	movi	r2,-11
  802808:	e0bfff15 	stw	r2,-4(fp)
  80280c:	00000606 	br	802828 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  802810:	e0bffd17 	ldw	r2,-12(fp)
  802814:	10c00417 	ldw	r3,16(r2)
  802818:	e0bffd17 	ldw	r2,-12(fp)
  80281c:	10800517 	ldw	r2,20(r2)
  802820:	18bff41e 	bne	r3,r2,8027f4 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  802824:	e03fff15 	stw	zero,-4(fp)
  802828:	e0bfff17 	ldw	r2,-4(fp)
}
  80282c:	e037883a 	mov	sp,fp
  802830:	df000017 	ldw	fp,0(sp)
  802834:	dec00104 	addi	sp,sp,4
  802838:	f800283a 	ret

0080283c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80283c:	defff004 	addi	sp,sp,-64
  802840:	dfc00f15 	stw	ra,60(sp)
  802844:	df000e15 	stw	fp,56(sp)
  802848:	df000e04 	addi	fp,sp,56
  80284c:	e13ffb15 	stw	r4,-20(fp)
  802850:	e17ffc15 	stw	r5,-16(fp)
  802854:	e1bffd15 	stw	r6,-12(fp)
  802858:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80285c:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  802860:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  802864:	e0bffe17 	ldw	r2,-8(fp)
  802868:	1090000c 	andi	r2,r2,16384
  80286c:	1005003a 	cmpeq	r2,r2,zero
  802870:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  802874:	e0bffb17 	ldw	r2,-20(fp)
  802878:	10800217 	ldw	r2,8(r2)
  80287c:	10800044 	addi	r2,r2,1
  802880:	10800fcc 	andi	r2,r2,63
  802884:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  802888:	00001906 	br	8028f0 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80288c:	e0bff617 	ldw	r2,-40(fp)
  802890:	10800044 	addi	r2,r2,1
  802894:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  802898:	e0bffb17 	ldw	r2,-20(fp)
  80289c:	10c00217 	ldw	r3,8(r2)
  8028a0:	e0bffb17 	ldw	r2,-20(fp)
  8028a4:	1885883a 	add	r2,r3,r2
  8028a8:	10800704 	addi	r2,r2,28
  8028ac:	10800003 	ldbu	r2,0(r2)
  8028b0:	1007883a 	mov	r3,r2
  8028b4:	e0bffc17 	ldw	r2,-16(fp)
  8028b8:	10c00005 	stb	r3,0(r2)
  8028bc:	e0bffc17 	ldw	r2,-16(fp)
  8028c0:	10800044 	addi	r2,r2,1
  8028c4:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  8028c8:	e0bffb17 	ldw	r2,-20(fp)
  8028cc:	10800217 	ldw	r2,8(r2)
  8028d0:	10c00044 	addi	r3,r2,1
  8028d4:	e0bffb17 	ldw	r2,-20(fp)
  8028d8:	10c00215 	stw	r3,8(r2)
  8028dc:	e0bffb17 	ldw	r2,-20(fp)
  8028e0:	10800217 	ldw	r2,8(r2)
  8028e4:	10c00fcc 	andi	r3,r2,63
  8028e8:	e0bffb17 	ldw	r2,-20(fp)
  8028ec:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8028f0:	e0fff617 	ldw	r3,-40(fp)
  8028f4:	e0bffd17 	ldw	r2,-12(fp)
  8028f8:	1880050e 	bge	r3,r2,802910 <altera_avalon_uart_read+0xd4>
  8028fc:	e0bffb17 	ldw	r2,-20(fp)
  802900:	10c00217 	ldw	r3,8(r2)
  802904:	e0bffb17 	ldw	r2,-20(fp)
  802908:	10800317 	ldw	r2,12(r2)
  80290c:	18bfdf1e 	bne	r3,r2,80288c <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  802910:	e0bff617 	ldw	r2,-40(fp)
  802914:	1004c03a 	cmpne	r2,r2,zero
  802918:	1000271e 	bne	r2,zero,8029b8 <altera_avalon_uart_read+0x17c>
  80291c:	e0bffb17 	ldw	r2,-20(fp)
  802920:	10c00217 	ldw	r3,8(r2)
  802924:	e0bffb17 	ldw	r2,-20(fp)
  802928:	10800317 	ldw	r2,12(r2)
  80292c:	1880221e 	bne	r3,r2,8029b8 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  802930:	e0bff917 	ldw	r2,-28(fp)
  802934:	1004c03a 	cmpne	r2,r2,zero
  802938:	1000061e 	bne	r2,zero,802954 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80293c:	0802a6c0 	call	802a6c <alt_get_errno>
  802940:	00c002c4 	movi	r3,11
  802944:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  802948:	00800044 	movi	r2,1
  80294c:	e0bff705 	stb	r2,-36(fp)
        break;
  802950:	00001f06 	br	8029d0 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802954:	0005303a 	rdctl	r2,status
  802958:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80295c:	e0fff517 	ldw	r3,-44(fp)
  802960:	00bfff84 	movi	r2,-2
  802964:	1884703a 	and	r2,r3,r2
  802968:	1001703a 	wrctl	status,r2
  
  return context;
  80296c:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  802970:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802974:	e0bffb17 	ldw	r2,-20(fp)
  802978:	10800117 	ldw	r2,4(r2)
  80297c:	10c02014 	ori	r3,r2,128
  802980:	e0bffb17 	ldw	r2,-20(fp)
  802984:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802988:	e0bffb17 	ldw	r2,-20(fp)
  80298c:	10800017 	ldw	r2,0(r2)
  802990:	11000304 	addi	r4,r2,12
  802994:	e0bffb17 	ldw	r2,-20(fp)
  802998:	10800117 	ldw	r2,4(r2)
  80299c:	1007883a 	mov	r3,r2
  8029a0:	2005883a 	mov	r2,r4
  8029a4:	10c00035 	stwio	r3,0(r2)
  8029a8:	e0bffa17 	ldw	r2,-24(fp)
  8029ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8029b0:	e0bff417 	ldw	r2,-48(fp)
  8029b4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8029b8:	e0bff617 	ldw	r2,-40(fp)
  8029bc:	1004c03a 	cmpne	r2,r2,zero
  8029c0:	1000031e 	bne	r2,zero,8029d0 <altera_avalon_uart_read+0x194>
  8029c4:	e0bffd17 	ldw	r2,-12(fp)
  8029c8:	1004c03a 	cmpne	r2,r2,zero
  8029cc:	103fc81e 	bne	r2,zero,8028f0 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8029d0:	0005303a 	rdctl	r2,status
  8029d4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8029d8:	e0fff317 	ldw	r3,-52(fp)
  8029dc:	00bfff84 	movi	r2,-2
  8029e0:	1884703a 	and	r2,r3,r2
  8029e4:	1001703a 	wrctl	status,r2
  
  return context;
  8029e8:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8029ec:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8029f0:	e0bffb17 	ldw	r2,-20(fp)
  8029f4:	10800117 	ldw	r2,4(r2)
  8029f8:	10c02014 	ori	r3,r2,128
  8029fc:	e0bffb17 	ldw	r2,-20(fp)
  802a00:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802a04:	e0bffb17 	ldw	r2,-20(fp)
  802a08:	10800017 	ldw	r2,0(r2)
  802a0c:	11000304 	addi	r4,r2,12
  802a10:	e0bffb17 	ldw	r2,-20(fp)
  802a14:	10800117 	ldw	r2,4(r2)
  802a18:	1007883a 	mov	r3,r2
  802a1c:	2005883a 	mov	r2,r4
  802a20:	10c00035 	stwio	r3,0(r2)
  802a24:	e0bffa17 	ldw	r2,-24(fp)
  802a28:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802a2c:	e0bff217 	ldw	r2,-56(fp)
  802a30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  802a34:	e0bff703 	ldbu	r2,-36(fp)
  802a38:	1005003a 	cmpeq	r2,r2,zero
  802a3c:	1000031e 	bne	r2,zero,802a4c <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  802a40:	00bffd04 	movi	r2,-12
  802a44:	e0bfff15 	stw	r2,-4(fp)
  802a48:	00000206 	br	802a54 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  802a4c:	e0bff617 	ldw	r2,-40(fp)
  802a50:	e0bfff15 	stw	r2,-4(fp)
  802a54:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  802a58:	e037883a 	mov	sp,fp
  802a5c:	dfc00117 	ldw	ra,4(sp)
  802a60:	df000017 	ldw	fp,0(sp)
  802a64:	dec00204 	addi	sp,sp,8
  802a68:	f800283a 	ret

00802a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802a6c:	defffd04 	addi	sp,sp,-12
  802a70:	dfc00215 	stw	ra,8(sp)
  802a74:	df000115 	stw	fp,4(sp)
  802a78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802a7c:	00802034 	movhi	r2,128
  802a80:	10986a04 	addi	r2,r2,25000
  802a84:	10800017 	ldw	r2,0(r2)
  802a88:	1005003a 	cmpeq	r2,r2,zero
  802a8c:	1000061e 	bne	r2,zero,802aa8 <alt_get_errno+0x3c>
  802a90:	00802034 	movhi	r2,128
  802a94:	10986a04 	addi	r2,r2,25000
  802a98:	10800017 	ldw	r2,0(r2)
  802a9c:	103ee83a 	callr	r2
  802aa0:	e0bfff15 	stw	r2,-4(fp)
  802aa4:	00000306 	br	802ab4 <alt_get_errno+0x48>
  802aa8:	00802034 	movhi	r2,128
  802aac:	109e9b04 	addi	r2,r2,31340
  802ab0:	e0bfff15 	stw	r2,-4(fp)
  802ab4:	e0bfff17 	ldw	r2,-4(fp)
}
  802ab8:	e037883a 	mov	sp,fp
  802abc:	dfc00117 	ldw	ra,4(sp)
  802ac0:	df000017 	ldw	fp,0(sp)
  802ac4:	dec00204 	addi	sp,sp,8
  802ac8:	f800283a 	ret

00802acc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  802acc:	defff204 	addi	sp,sp,-56
  802ad0:	dfc00d15 	stw	ra,52(sp)
  802ad4:	df000c15 	stw	fp,48(sp)
  802ad8:	df000c04 	addi	fp,sp,48
  802adc:	e13ffc15 	stw	r4,-16(fp)
  802ae0:	e17ffd15 	stw	r5,-12(fp)
  802ae4:	e1bffe15 	stw	r6,-8(fp)
  802ae8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  802aec:	e0bffe17 	ldw	r2,-8(fp)
  802af0:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  802af4:	e0bfff17 	ldw	r2,-4(fp)
  802af8:	1090000c 	andi	r2,r2,16384
  802afc:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802b00:	00004006 	br	802c04 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  802b04:	e0bffc17 	ldw	r2,-16(fp)
  802b08:	10800517 	ldw	r2,20(r2)
  802b0c:	10800044 	addi	r2,r2,1
  802b10:	10800fcc 	andi	r2,r2,63
  802b14:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  802b18:	e0bffc17 	ldw	r2,-16(fp)
  802b1c:	10c00417 	ldw	r3,16(r2)
  802b20:	e0bff917 	ldw	r2,-28(fp)
  802b24:	1880251e 	bne	r3,r2,802bbc <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  802b28:	e0bffa17 	ldw	r2,-24(fp)
  802b2c:	1005003a 	cmpeq	r2,r2,zero
  802b30:	1000051e 	bne	r2,zero,802b48 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  802b34:	0802c940 	call	802c94 <alt_get_errno>
  802b38:	1007883a 	mov	r3,r2
  802b3c:	008002c4 	movi	r2,11
  802b40:	18800015 	stw	r2,0(r3)
        break;
  802b44:	00003206 	br	802c10 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802b48:	0005303a 	rdctl	r2,status
  802b4c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802b50:	e0fff717 	ldw	r3,-36(fp)
  802b54:	00bfff84 	movi	r2,-2
  802b58:	1884703a 	and	r2,r3,r2
  802b5c:	1001703a 	wrctl	status,r2
  
  return context;
  802b60:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  802b64:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802b68:	e0bffc17 	ldw	r2,-16(fp)
  802b6c:	10800117 	ldw	r2,4(r2)
  802b70:	10c11014 	ori	r3,r2,1088
  802b74:	e0bffc17 	ldw	r2,-16(fp)
  802b78:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802b7c:	e0bffc17 	ldw	r2,-16(fp)
  802b80:	10800017 	ldw	r2,0(r2)
  802b84:	11000304 	addi	r4,r2,12
  802b88:	e0bffc17 	ldw	r2,-16(fp)
  802b8c:	10800117 	ldw	r2,4(r2)
  802b90:	1007883a 	mov	r3,r2
  802b94:	2005883a 	mov	r2,r4
  802b98:	10c00035 	stwio	r3,0(r2)
  802b9c:	e0bffb17 	ldw	r2,-20(fp)
  802ba0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802ba4:	e0bff617 	ldw	r2,-40(fp)
  802ba8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	10c00417 	ldw	r3,16(r2)
  802bb4:	e0bff917 	ldw	r2,-28(fp)
  802bb8:	18bffc26 	beq	r3,r2,802bac <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  802bbc:	e0bff817 	ldw	r2,-32(fp)
  802bc0:	10bfffc4 	addi	r2,r2,-1
  802bc4:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  802bc8:	e0bffc17 	ldw	r2,-16(fp)
  802bcc:	10c00517 	ldw	r3,20(r2)
  802bd0:	e0bffd17 	ldw	r2,-12(fp)
  802bd4:	10800003 	ldbu	r2,0(r2)
  802bd8:	1009883a 	mov	r4,r2
  802bdc:	e0bffc17 	ldw	r2,-16(fp)
  802be0:	1885883a 	add	r2,r3,r2
  802be4:	10801704 	addi	r2,r2,92
  802be8:	11000005 	stb	r4,0(r2)
  802bec:	e0bffd17 	ldw	r2,-12(fp)
  802bf0:	10800044 	addi	r2,r2,1
  802bf4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  802bf8:	e0fffc17 	ldw	r3,-16(fp)
  802bfc:	e0bff917 	ldw	r2,-28(fp)
  802c00:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  802c04:	e0bff817 	ldw	r2,-32(fp)
  802c08:	1004c03a 	cmpne	r2,r2,zero
  802c0c:	103fbd1e 	bne	r2,zero,802b04 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802c10:	0005303a 	rdctl	r2,status
  802c14:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802c18:	e0fff517 	ldw	r3,-44(fp)
  802c1c:	00bfff84 	movi	r2,-2
  802c20:	1884703a 	and	r2,r3,r2
  802c24:	1001703a 	wrctl	status,r2
  
  return context;
  802c28:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  802c2c:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802c30:	e0bffc17 	ldw	r2,-16(fp)
  802c34:	10800117 	ldw	r2,4(r2)
  802c38:	10c11014 	ori	r3,r2,1088
  802c3c:	e0bffc17 	ldw	r2,-16(fp)
  802c40:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802c44:	e0bffc17 	ldw	r2,-16(fp)
  802c48:	10800017 	ldw	r2,0(r2)
  802c4c:	11000304 	addi	r4,r2,12
  802c50:	e0bffc17 	ldw	r2,-16(fp)
  802c54:	10800117 	ldw	r2,4(r2)
  802c58:	1007883a 	mov	r3,r2
  802c5c:	2005883a 	mov	r2,r4
  802c60:	10c00035 	stwio	r3,0(r2)
  802c64:	e0bffb17 	ldw	r2,-20(fp)
  802c68:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802c6c:	e0bff417 	ldw	r2,-48(fp)
  802c70:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  802c74:	e0fffe17 	ldw	r3,-8(fp)
  802c78:	e0bff817 	ldw	r2,-32(fp)
  802c7c:	1885c83a 	sub	r2,r3,r2
}
  802c80:	e037883a 	mov	sp,fp
  802c84:	dfc00117 	ldw	ra,4(sp)
  802c88:	df000017 	ldw	fp,0(sp)
  802c8c:	dec00204 	addi	sp,sp,8
  802c90:	f800283a 	ret

00802c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802c94:	defffd04 	addi	sp,sp,-12
  802c98:	dfc00215 	stw	ra,8(sp)
  802c9c:	df000115 	stw	fp,4(sp)
  802ca0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802ca4:	00802034 	movhi	r2,128
  802ca8:	10986a04 	addi	r2,r2,25000
  802cac:	10800017 	ldw	r2,0(r2)
  802cb0:	1005003a 	cmpeq	r2,r2,zero
  802cb4:	1000061e 	bne	r2,zero,802cd0 <alt_get_errno+0x3c>
  802cb8:	00802034 	movhi	r2,128
  802cbc:	10986a04 	addi	r2,r2,25000
  802cc0:	10800017 	ldw	r2,0(r2)
  802cc4:	103ee83a 	callr	r2
  802cc8:	e0bfff15 	stw	r2,-4(fp)
  802ccc:	00000306 	br	802cdc <alt_get_errno+0x48>
  802cd0:	00802034 	movhi	r2,128
  802cd4:	109e9b04 	addi	r2,r2,31340
  802cd8:	e0bfff15 	stw	r2,-4(fp)
  802cdc:	e0bfff17 	ldw	r2,-4(fp)
}
  802ce0:	e037883a 	mov	sp,fp
  802ce4:	dfc00117 	ldw	ra,4(sp)
  802ce8:	df000017 	ldw	fp,0(sp)
  802cec:	dec00204 	addi	sp,sp,8
  802cf0:	f800283a 	ret

00802cf4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  802cf4:	defff404 	addi	sp,sp,-48
  802cf8:	df000b15 	stw	fp,44(sp)
  802cfc:	df000b04 	addi	fp,sp,44
  802d00:	e13ffb15 	stw	r4,-20(fp)
  802d04:	e17ffc15 	stw	r5,-16(fp)
  802d08:	e1bffd15 	stw	r6,-12(fp)
  802d0c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  802d10:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802d14:	00802034 	movhi	r2,128
  802d18:	109e9904 	addi	r2,r2,31332
  802d1c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  802d20:	1005003a 	cmpeq	r2,r2,zero
  802d24:	1000411e 	bne	r2,zero,802e2c <alt_alarm_start+0x138>
  {
    if (alarm)
  802d28:	e0bffb17 	ldw	r2,-20(fp)
  802d2c:	1005003a 	cmpeq	r2,r2,zero
  802d30:	10003b1e 	bne	r2,zero,802e20 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  802d34:	e0fffb17 	ldw	r3,-20(fp)
  802d38:	e0bffd17 	ldw	r2,-12(fp)
  802d3c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  802d40:	e0fffb17 	ldw	r3,-20(fp)
  802d44:	e0bffe17 	ldw	r2,-8(fp)
  802d48:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d4c:	0005303a 	rdctl	r2,status
  802d50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d54:	e0fff817 	ldw	r3,-32(fp)
  802d58:	00bfff84 	movi	r2,-2
  802d5c:	1884703a 	and	r2,r3,r2
  802d60:	1001703a 	wrctl	status,r2
  
  return context;
  802d64:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  802d68:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  802d6c:	00802034 	movhi	r2,128
  802d70:	109e9a04 	addi	r2,r2,31336
  802d74:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  802d78:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  802d7c:	e0fffc17 	ldw	r3,-16(fp)
  802d80:	e0bff917 	ldw	r2,-28(fp)
  802d84:	1885883a 	add	r2,r3,r2
  802d88:	10c00044 	addi	r3,r2,1
  802d8c:	e0bffb17 	ldw	r2,-20(fp)
  802d90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  802d94:	e0bffb17 	ldw	r2,-20(fp)
  802d98:	10c00217 	ldw	r3,8(r2)
  802d9c:	e0bff917 	ldw	r2,-28(fp)
  802da0:	1880042e 	bgeu	r3,r2,802db4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  802da4:	e0fffb17 	ldw	r3,-20(fp)
  802da8:	00800044 	movi	r2,1
  802dac:	18800405 	stb	r2,16(r3)
  802db0:	00000206 	br	802dbc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  802db4:	e0bffb17 	ldw	r2,-20(fp)
  802db8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802dbc:	e0fffb17 	ldw	r3,-20(fp)
  802dc0:	00802034 	movhi	r2,128
  802dc4:	10986c04 	addi	r2,r2,25008
  802dc8:	e0bff615 	stw	r2,-40(fp)
  802dcc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802dd0:	e0fff717 	ldw	r3,-36(fp)
  802dd4:	e0bff617 	ldw	r2,-40(fp)
  802dd8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  802ddc:	e0bff617 	ldw	r2,-40(fp)
  802de0:	10c00017 	ldw	r3,0(r2)
  802de4:	e0bff717 	ldw	r2,-36(fp)
  802de8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802dec:	e0bff617 	ldw	r2,-40(fp)
  802df0:	10c00017 	ldw	r3,0(r2)
  802df4:	e0bff717 	ldw	r2,-36(fp)
  802df8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  802dfc:	e0fff617 	ldw	r3,-40(fp)
  802e00:	e0bff717 	ldw	r2,-36(fp)
  802e04:	18800015 	stw	r2,0(r3)
  802e08:	e0bffa17 	ldw	r2,-24(fp)
  802e0c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802e10:	e0bff517 	ldw	r2,-44(fp)
  802e14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  802e18:	e03fff15 	stw	zero,-4(fp)
  802e1c:	00000506 	br	802e34 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  802e20:	00bffa84 	movi	r2,-22
  802e24:	e0bfff15 	stw	r2,-4(fp)
  802e28:	00000206 	br	802e34 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  802e2c:	00bfde84 	movi	r2,-134
  802e30:	e0bfff15 	stw	r2,-4(fp)
  802e34:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  802e38:	e037883a 	mov	sp,fp
  802e3c:	df000017 	ldw	fp,0(sp)
  802e40:	dec00104 	addi	sp,sp,4
  802e44:	f800283a 	ret

00802e48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  802e48:	defff804 	addi	sp,sp,-32
  802e4c:	dfc00715 	stw	ra,28(sp)
  802e50:	df000615 	stw	fp,24(sp)
  802e54:	df000604 	addi	fp,sp,24
  802e58:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  802e5c:	e0bffc17 	ldw	r2,-16(fp)
  802e60:	1004803a 	cmplt	r2,r2,zero
  802e64:	1000081e 	bne	r2,zero,802e88 <close+0x40>
  802e68:	e0bffc17 	ldw	r2,-16(fp)
  802e6c:	10800324 	muli	r2,r2,12
  802e70:	1007883a 	mov	r3,r2
  802e74:	00802034 	movhi	r2,128
  802e78:	10970204 	addi	r2,r2,23560
  802e7c:	1887883a 	add	r3,r3,r2
  802e80:	e0ffff15 	stw	r3,-4(fp)
  802e84:	00000106 	br	802e8c <close+0x44>
  802e88:	e03fff15 	stw	zero,-4(fp)
  802e8c:	e0bfff17 	ldw	r2,-4(fp)
  802e90:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  802e94:	e0bffb17 	ldw	r2,-20(fp)
  802e98:	1005003a 	cmpeq	r2,r2,zero
  802e9c:	10001d1e 	bne	r2,zero,802f14 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802ea0:	e0bffb17 	ldw	r2,-20(fp)
  802ea4:	10800017 	ldw	r2,0(r2)
  802ea8:	10800417 	ldw	r2,16(r2)
  802eac:	1005003a 	cmpeq	r2,r2,zero
  802eb0:	1000071e 	bne	r2,zero,802ed0 <close+0x88>
  802eb4:	e0bffb17 	ldw	r2,-20(fp)
  802eb8:	10800017 	ldw	r2,0(r2)
  802ebc:	10800417 	ldw	r2,16(r2)
  802ec0:	e13ffb17 	ldw	r4,-20(fp)
  802ec4:	103ee83a 	callr	r2
  802ec8:	e0bffe15 	stw	r2,-8(fp)
  802ecc:	00000106 	br	802ed4 <close+0x8c>
  802ed0:	e03ffe15 	stw	zero,-8(fp)
  802ed4:	e0bffe17 	ldw	r2,-8(fp)
  802ed8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802edc:	e13ffc17 	ldw	r4,-16(fp)
  802ee0:	08038ec0 	call	8038ec <alt_release_fd>
    if (rval < 0)
  802ee4:	e0bffa17 	ldw	r2,-24(fp)
  802ee8:	1004403a 	cmpge	r2,r2,zero
  802eec:	1000071e 	bne	r2,zero,802f0c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  802ef0:	0802f440 	call	802f44 <alt_get_errno>
  802ef4:	e0fffa17 	ldw	r3,-24(fp)
  802ef8:	00c7c83a 	sub	r3,zero,r3
  802efc:	10c00015 	stw	r3,0(r2)
      return -1;
  802f00:	00bfffc4 	movi	r2,-1
  802f04:	e0bffd15 	stw	r2,-12(fp)
  802f08:	00000806 	br	802f2c <close+0xe4>
    }
    return 0;
  802f0c:	e03ffd15 	stw	zero,-12(fp)
  802f10:	00000606 	br	802f2c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802f14:	0802f440 	call	802f44 <alt_get_errno>
  802f18:	1007883a 	mov	r3,r2
  802f1c:	00801444 	movi	r2,81
  802f20:	18800015 	stw	r2,0(r3)
    return -1;
  802f24:	00bfffc4 	movi	r2,-1
  802f28:	e0bffd15 	stw	r2,-12(fp)
  802f2c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  802f30:	e037883a 	mov	sp,fp
  802f34:	dfc00117 	ldw	ra,4(sp)
  802f38:	df000017 	ldw	fp,0(sp)
  802f3c:	dec00204 	addi	sp,sp,8
  802f40:	f800283a 	ret

00802f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802f44:	defffd04 	addi	sp,sp,-12
  802f48:	dfc00215 	stw	ra,8(sp)
  802f4c:	df000115 	stw	fp,4(sp)
  802f50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  802f54:	00802034 	movhi	r2,128
  802f58:	10986a04 	addi	r2,r2,25000
  802f5c:	10800017 	ldw	r2,0(r2)
  802f60:	1005003a 	cmpeq	r2,r2,zero
  802f64:	1000061e 	bne	r2,zero,802f80 <alt_get_errno+0x3c>
  802f68:	00802034 	movhi	r2,128
  802f6c:	10986a04 	addi	r2,r2,25000
  802f70:	10800017 	ldw	r2,0(r2)
  802f74:	103ee83a 	callr	r2
  802f78:	e0bfff15 	stw	r2,-4(fp)
  802f7c:	00000306 	br	802f8c <alt_get_errno+0x48>
  802f80:	00802034 	movhi	r2,128
  802f84:	109e9b04 	addi	r2,r2,31340
  802f88:	e0bfff15 	stw	r2,-4(fp)
  802f8c:	e0bfff17 	ldw	r2,-4(fp)
}
  802f90:	e037883a 	mov	sp,fp
  802f94:	dfc00117 	ldw	ra,4(sp)
  802f98:	df000017 	ldw	fp,0(sp)
  802f9c:	dec00204 	addi	sp,sp,8
  802fa0:	f800283a 	ret

00802fa4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802fa4:	defffe04 	addi	sp,sp,-8
  802fa8:	df000115 	stw	fp,4(sp)
  802fac:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802fb0:	e03fff15 	stw	zero,-4(fp)
  802fb4:	00000506 	br	802fcc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  802fb8:	e0bfff17 	ldw	r2,-4(fp)
  802fbc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802fc0:	e0bfff17 	ldw	r2,-4(fp)
  802fc4:	10800804 	addi	r2,r2,32
  802fc8:	e0bfff15 	stw	r2,-4(fp)
  802fcc:	e0bfff17 	ldw	r2,-4(fp)
  802fd0:	10820030 	cmpltui	r2,r2,2048
  802fd4:	103ff81e 	bne	r2,zero,802fb8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802fd8:	e037883a 	mov	sp,fp
  802fdc:	df000017 	ldw	fp,0(sp)
  802fe0:	dec00104 	addi	sp,sp,4
  802fe4:	f800283a 	ret

00802fe8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802fe8:	defffc04 	addi	sp,sp,-16
  802fec:	df000315 	stw	fp,12(sp)
  802ff0:	df000304 	addi	fp,sp,12
  802ff4:	e13ffd15 	stw	r4,-12(fp)
  802ff8:	e17ffe15 	stw	r5,-8(fp)
  802ffc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  803000:	e0bfff17 	ldw	r2,-4(fp)
}
  803004:	e037883a 	mov	sp,fp
  803008:	df000017 	ldw	fp,0(sp)
  80300c:	dec00104 	addi	sp,sp,4
  803010:	f800283a 	ret

00803014 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  803014:	defff904 	addi	sp,sp,-28
  803018:	dfc00615 	stw	ra,24(sp)
  80301c:	df000515 	stw	fp,20(sp)
  803020:	df000504 	addi	fp,sp,20
  803024:	e13ffd15 	stw	r4,-12(fp)
  803028:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80302c:	e0bffd17 	ldw	r2,-12(fp)
  803030:	1005003a 	cmpeq	r2,r2,zero
  803034:	1000041e 	bne	r2,zero,803048 <alt_dev_llist_insert+0x34>
  803038:	e0bffd17 	ldw	r2,-12(fp)
  80303c:	10800217 	ldw	r2,8(r2)
  803040:	1004c03a 	cmpne	r2,r2,zero
  803044:	1000071e 	bne	r2,zero,803064 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  803048:	08030c80 	call	8030c8 <alt_get_errno>
  80304c:	1007883a 	mov	r3,r2
  803050:	00800584 	movi	r2,22
  803054:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  803058:	00bffa84 	movi	r2,-22
  80305c:	e0bfff15 	stw	r2,-4(fp)
  803060:	00001306 	br	8030b0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  803064:	e0fffd17 	ldw	r3,-12(fp)
  803068:	e0bffe17 	ldw	r2,-8(fp)
  80306c:	e0bffb15 	stw	r2,-20(fp)
  803070:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803074:	e0fffc17 	ldw	r3,-16(fp)
  803078:	e0bffb17 	ldw	r2,-20(fp)
  80307c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  803080:	e0bffb17 	ldw	r2,-20(fp)
  803084:	10c00017 	ldw	r3,0(r2)
  803088:	e0bffc17 	ldw	r2,-16(fp)
  80308c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803090:	e0bffb17 	ldw	r2,-20(fp)
  803094:	10c00017 	ldw	r3,0(r2)
  803098:	e0bffc17 	ldw	r2,-16(fp)
  80309c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8030a0:	e0fffb17 	ldw	r3,-20(fp)
  8030a4:	e0bffc17 	ldw	r2,-16(fp)
  8030a8:	18800015 	stw	r2,0(r3)

  return 0;  
  8030ac:	e03fff15 	stw	zero,-4(fp)
  8030b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8030b4:	e037883a 	mov	sp,fp
  8030b8:	dfc00117 	ldw	ra,4(sp)
  8030bc:	df000017 	ldw	fp,0(sp)
  8030c0:	dec00204 	addi	sp,sp,8
  8030c4:	f800283a 	ret

008030c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8030c8:	defffd04 	addi	sp,sp,-12
  8030cc:	dfc00215 	stw	ra,8(sp)
  8030d0:	df000115 	stw	fp,4(sp)
  8030d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8030d8:	00802034 	movhi	r2,128
  8030dc:	10986a04 	addi	r2,r2,25000
  8030e0:	10800017 	ldw	r2,0(r2)
  8030e4:	1005003a 	cmpeq	r2,r2,zero
  8030e8:	1000061e 	bne	r2,zero,803104 <alt_get_errno+0x3c>
  8030ec:	00802034 	movhi	r2,128
  8030f0:	10986a04 	addi	r2,r2,25000
  8030f4:	10800017 	ldw	r2,0(r2)
  8030f8:	103ee83a 	callr	r2
  8030fc:	e0bfff15 	stw	r2,-4(fp)
  803100:	00000306 	br	803110 <alt_get_errno+0x48>
  803104:	00802034 	movhi	r2,128
  803108:	109e9b04 	addi	r2,r2,31340
  80310c:	e0bfff15 	stw	r2,-4(fp)
  803110:	e0bfff17 	ldw	r2,-4(fp)
}
  803114:	e037883a 	mov	sp,fp
  803118:	dfc00117 	ldw	ra,4(sp)
  80311c:	df000017 	ldw	fp,0(sp)
  803120:	dec00204 	addi	sp,sp,8
  803124:	f800283a 	ret

00803128 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  803128:	defffd04 	addi	sp,sp,-12
  80312c:	dfc00215 	stw	ra,8(sp)
  803130:	df000115 	stw	fp,4(sp)
  803134:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  803138:	00bfff04 	movi	r2,-4
  80313c:	00c02034 	movhi	r3,128
  803140:	18d1a304 	addi	r3,r3,18060
  803144:	1885883a 	add	r2,r3,r2
  803148:	e0bfff15 	stw	r2,-4(fp)
  80314c:	00000606 	br	803168 <_do_ctors+0x40>
        (*ctor) (); 
  803150:	e0bfff17 	ldw	r2,-4(fp)
  803154:	10800017 	ldw	r2,0(r2)
  803158:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80315c:	e0bfff17 	ldw	r2,-4(fp)
  803160:	10bfff04 	addi	r2,r2,-4
  803164:	e0bfff15 	stw	r2,-4(fp)
  803168:	e0ffff17 	ldw	r3,-4(fp)
  80316c:	00802034 	movhi	r2,128
  803170:	1091a204 	addi	r2,r2,18056
  803174:	18bff62e 	bgeu	r3,r2,803150 <_do_ctors+0x28>
        (*ctor) (); 
}
  803178:	e037883a 	mov	sp,fp
  80317c:	dfc00117 	ldw	ra,4(sp)
  803180:	df000017 	ldw	fp,0(sp)
  803184:	dec00204 	addi	sp,sp,8
  803188:	f800283a 	ret

0080318c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80318c:	defffd04 	addi	sp,sp,-12
  803190:	dfc00215 	stw	ra,8(sp)
  803194:	df000115 	stw	fp,4(sp)
  803198:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80319c:	00bfff04 	movi	r2,-4
  8031a0:	00c02034 	movhi	r3,128
  8031a4:	18d1a304 	addi	r3,r3,18060
  8031a8:	1885883a 	add	r2,r3,r2
  8031ac:	e0bfff15 	stw	r2,-4(fp)
  8031b0:	00000606 	br	8031cc <_do_dtors+0x40>
        (*dtor) (); 
  8031b4:	e0bfff17 	ldw	r2,-4(fp)
  8031b8:	10800017 	ldw	r2,0(r2)
  8031bc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8031c0:	e0bfff17 	ldw	r2,-4(fp)
  8031c4:	10bfff04 	addi	r2,r2,-4
  8031c8:	e0bfff15 	stw	r2,-4(fp)
  8031cc:	e0ffff17 	ldw	r3,-4(fp)
  8031d0:	00802034 	movhi	r2,128
  8031d4:	1091a304 	addi	r2,r2,18060
  8031d8:	18bff62e 	bgeu	r3,r2,8031b4 <_do_dtors+0x28>
        (*dtor) (); 
}
  8031dc:	e037883a 	mov	sp,fp
  8031e0:	dfc00117 	ldw	ra,4(sp)
  8031e4:	df000017 	ldw	fp,0(sp)
  8031e8:	dec00204 	addi	sp,sp,8
  8031ec:	f800283a 	ret

008031f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8031f0:	defffe04 	addi	sp,sp,-8
  8031f4:	dfc00115 	stw	ra,4(sp)
  8031f8:	df000015 	stw	fp,0(sp)
  8031fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  803200:	0009883a 	mov	r4,zero
  803204:	01440004 	movi	r5,4096
  803208:	0803ef80 	call	803ef8 <alt_icache_flush>
#endif
}
  80320c:	e037883a 	mov	sp,fp
  803210:	dfc00117 	ldw	ra,4(sp)
  803214:	df000017 	ldw	fp,0(sp)
  803218:	dec00204 	addi	sp,sp,8
  80321c:	f800283a 	ret

00803220 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803220:	defff904 	addi	sp,sp,-28
  803224:	dfc00615 	stw	ra,24(sp)
  803228:	df000515 	stw	fp,20(sp)
  80322c:	df000504 	addi	fp,sp,20
  803230:	e13ffc15 	stw	r4,-16(fp)
  803234:	e17ffd15 	stw	r5,-12(fp)
  803238:	e1bffe15 	stw	r6,-8(fp)
  80323c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  803240:	e0800217 	ldw	r2,8(fp)
  803244:	d8800015 	stw	r2,0(sp)
  803248:	e13ffc17 	ldw	r4,-16(fp)
  80324c:	e17ffd17 	ldw	r5,-12(fp)
  803250:	e1bffe17 	ldw	r6,-8(fp)
  803254:	e1ffff17 	ldw	r7,-4(fp)
  803258:	08033f40 	call	8033f4 <alt_iic_isr_register>
}  
  80325c:	e037883a 	mov	sp,fp
  803260:	dfc00117 	ldw	ra,4(sp)
  803264:	df000017 	ldw	fp,0(sp)
  803268:	dec00204 	addi	sp,sp,8
  80326c:	f800283a 	ret

00803270 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  803270:	defff904 	addi	sp,sp,-28
  803274:	df000615 	stw	fp,24(sp)
  803278:	df000604 	addi	fp,sp,24
  80327c:	e13ffe15 	stw	r4,-8(fp)
  803280:	e17fff15 	stw	r5,-4(fp)
  803284:	e0bfff17 	ldw	r2,-4(fp)
  803288:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80328c:	0005303a 	rdctl	r2,status
  803290:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803294:	e0fffb17 	ldw	r3,-20(fp)
  803298:	00bfff84 	movi	r2,-2
  80329c:	1884703a 	and	r2,r3,r2
  8032a0:	1001703a 	wrctl	status,r2
  
  return context;
  8032a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8032a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8032ac:	e0fffc17 	ldw	r3,-16(fp)
  8032b0:	00800044 	movi	r2,1
  8032b4:	10c4983a 	sll	r2,r2,r3
  8032b8:	1007883a 	mov	r3,r2
  8032bc:	00802034 	movhi	r2,128
  8032c0:	109e9804 	addi	r2,r2,31328
  8032c4:	10800017 	ldw	r2,0(r2)
  8032c8:	1886b03a 	or	r3,r3,r2
  8032cc:	00802034 	movhi	r2,128
  8032d0:	109e9804 	addi	r2,r2,31328
  8032d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8032d8:	00802034 	movhi	r2,128
  8032dc:	109e9804 	addi	r2,r2,31328
  8032e0:	10800017 	ldw	r2,0(r2)
  8032e4:	100170fa 	wrctl	ienable,r2
  8032e8:	e0bffd17 	ldw	r2,-12(fp)
  8032ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8032f0:	e0bffa17 	ldw	r2,-24(fp)
  8032f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8032f8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  8032fc:	e037883a 	mov	sp,fp
  803300:	df000017 	ldw	fp,0(sp)
  803304:	dec00104 	addi	sp,sp,4
  803308:	f800283a 	ret

0080330c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80330c:	defff904 	addi	sp,sp,-28
  803310:	df000615 	stw	fp,24(sp)
  803314:	df000604 	addi	fp,sp,24
  803318:	e13ffe15 	stw	r4,-8(fp)
  80331c:	e17fff15 	stw	r5,-4(fp)
  803320:	e0bfff17 	ldw	r2,-4(fp)
  803324:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803328:	0005303a 	rdctl	r2,status
  80332c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803330:	e0fffb17 	ldw	r3,-20(fp)
  803334:	00bfff84 	movi	r2,-2
  803338:	1884703a 	and	r2,r3,r2
  80333c:	1001703a 	wrctl	status,r2
  
  return context;
  803340:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803344:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  803348:	e0fffc17 	ldw	r3,-16(fp)
  80334c:	00800044 	movi	r2,1
  803350:	10c4983a 	sll	r2,r2,r3
  803354:	0084303a 	nor	r2,zero,r2
  803358:	1007883a 	mov	r3,r2
  80335c:	00802034 	movhi	r2,128
  803360:	109e9804 	addi	r2,r2,31328
  803364:	10800017 	ldw	r2,0(r2)
  803368:	1886703a 	and	r3,r3,r2
  80336c:	00802034 	movhi	r2,128
  803370:	109e9804 	addi	r2,r2,31328
  803374:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803378:	00802034 	movhi	r2,128
  80337c:	109e9804 	addi	r2,r2,31328
  803380:	10800017 	ldw	r2,0(r2)
  803384:	100170fa 	wrctl	ienable,r2
  803388:	e0bffd17 	ldw	r2,-12(fp)
  80338c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803390:	e0bffa17 	ldw	r2,-24(fp)
  803394:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803398:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80339c:	e037883a 	mov	sp,fp
  8033a0:	df000017 	ldw	fp,0(sp)
  8033a4:	dec00104 	addi	sp,sp,4
  8033a8:	f800283a 	ret

008033ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8033ac:	defffc04 	addi	sp,sp,-16
  8033b0:	df000315 	stw	fp,12(sp)
  8033b4:	df000304 	addi	fp,sp,12
  8033b8:	e13ffe15 	stw	r4,-8(fp)
  8033bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8033c0:	000530fa 	rdctl	r2,ienable
  8033c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8033c8:	e0ffff17 	ldw	r3,-4(fp)
  8033cc:	00800044 	movi	r2,1
  8033d0:	10c4983a 	sll	r2,r2,r3
  8033d4:	1007883a 	mov	r3,r2
  8033d8:	e0bffd17 	ldw	r2,-12(fp)
  8033dc:	1884703a 	and	r2,r3,r2
  8033e0:	1004c03a 	cmpne	r2,r2,zero
}
  8033e4:	e037883a 	mov	sp,fp
  8033e8:	df000017 	ldw	fp,0(sp)
  8033ec:	dec00104 	addi	sp,sp,4
  8033f0:	f800283a 	ret

008033f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8033f4:	defff404 	addi	sp,sp,-48
  8033f8:	dfc00b15 	stw	ra,44(sp)
  8033fc:	df000a15 	stw	fp,40(sp)
  803400:	df000a04 	addi	fp,sp,40
  803404:	e13ffb15 	stw	r4,-20(fp)
  803408:	e17ffc15 	stw	r5,-16(fp)
  80340c:	e1bffd15 	stw	r6,-12(fp)
  803410:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  803414:	00bffa84 	movi	r2,-22
  803418:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80341c:	e0bffc17 	ldw	r2,-16(fp)
  803420:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803424:	e0bff917 	ldw	r2,-28(fp)
  803428:	10800808 	cmpgei	r2,r2,32
  80342c:	1000291e 	bne	r2,zero,8034d4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803430:	0005303a 	rdctl	r2,status
  803434:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803438:	e0fff717 	ldw	r3,-36(fp)
  80343c:	00bfff84 	movi	r2,-2
  803440:	1884703a 	and	r2,r3,r2
  803444:	1001703a 	wrctl	status,r2
  
  return context;
  803448:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80344c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  803450:	e0bff917 	ldw	r2,-28(fp)
  803454:	00c02034 	movhi	r3,128
  803458:	18dea804 	addi	r3,r3,31392
  80345c:	100490fa 	slli	r2,r2,3
  803460:	10c7883a 	add	r3,r2,r3
  803464:	e0bffd17 	ldw	r2,-12(fp)
  803468:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80346c:	e0bff917 	ldw	r2,-28(fp)
  803470:	00c02034 	movhi	r3,128
  803474:	18dea804 	addi	r3,r3,31392
  803478:	100490fa 	slli	r2,r2,3
  80347c:	10c5883a 	add	r2,r2,r3
  803480:	10c00104 	addi	r3,r2,4
  803484:	e0bffe17 	ldw	r2,-8(fp)
  803488:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80348c:	e0bffd17 	ldw	r2,-12(fp)
  803490:	1005003a 	cmpeq	r2,r2,zero
  803494:	1000051e 	bne	r2,zero,8034ac <alt_iic_isr_register+0xb8>
  803498:	e17ff917 	ldw	r5,-28(fp)
  80349c:	e13ffb17 	ldw	r4,-20(fp)
  8034a0:	08032700 	call	803270 <alt_ic_irq_enable>
  8034a4:	e0bfff15 	stw	r2,-4(fp)
  8034a8:	00000406 	br	8034bc <alt_iic_isr_register+0xc8>
  8034ac:	e17ff917 	ldw	r5,-28(fp)
  8034b0:	e13ffb17 	ldw	r4,-20(fp)
  8034b4:	080330c0 	call	80330c <alt_ic_irq_disable>
  8034b8:	e0bfff15 	stw	r2,-4(fp)
  8034bc:	e0bfff17 	ldw	r2,-4(fp)
  8034c0:	e0bffa15 	stw	r2,-24(fp)
  8034c4:	e0bff817 	ldw	r2,-32(fp)
  8034c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8034cc:	e0bff617 	ldw	r2,-40(fp)
  8034d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8034d4:	e0bffa17 	ldw	r2,-24(fp)
}
  8034d8:	e037883a 	mov	sp,fp
  8034dc:	dfc00117 	ldw	ra,4(sp)
  8034e0:	df000017 	ldw	fp,0(sp)
  8034e4:	dec00204 	addi	sp,sp,8
  8034e8:	f800283a 	ret

008034ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8034ec:	defff904 	addi	sp,sp,-28
  8034f0:	dfc00615 	stw	ra,24(sp)
  8034f4:	df000515 	stw	fp,20(sp)
  8034f8:	df000504 	addi	fp,sp,20
  8034fc:	e13ffc15 	stw	r4,-16(fp)
  803500:	e17ffd15 	stw	r5,-12(fp)
  803504:	e1bffe15 	stw	r6,-8(fp)
  803508:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80350c:	e13ffd17 	ldw	r4,-12(fp)
  803510:	e17ffe17 	ldw	r5,-8(fp)
  803514:	e1bfff17 	ldw	r6,-4(fp)
  803518:	08037040 	call	803704 <open>
  80351c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  803520:	e0bffb17 	ldw	r2,-20(fp)
  803524:	1004803a 	cmplt	r2,r2,zero
  803528:	10001c1e 	bne	r2,zero,80359c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80352c:	e0bffb17 	ldw	r2,-20(fp)
  803530:	00c02034 	movhi	r3,128
  803534:	18d70204 	addi	r3,r3,23560
  803538:	10800324 	muli	r2,r2,12
  80353c:	10c5883a 	add	r2,r2,r3
  803540:	10c00017 	ldw	r3,0(r2)
  803544:	e0bffc17 	ldw	r2,-16(fp)
  803548:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80354c:	e0bffb17 	ldw	r2,-20(fp)
  803550:	00c02034 	movhi	r3,128
  803554:	18d70204 	addi	r3,r3,23560
  803558:	10800324 	muli	r2,r2,12
  80355c:	10c5883a 	add	r2,r2,r3
  803560:	10800104 	addi	r2,r2,4
  803564:	10c00017 	ldw	r3,0(r2)
  803568:	e0bffc17 	ldw	r2,-16(fp)
  80356c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  803570:	e0bffb17 	ldw	r2,-20(fp)
  803574:	00c02034 	movhi	r3,128
  803578:	18d70204 	addi	r3,r3,23560
  80357c:	10800324 	muli	r2,r2,12
  803580:	10c5883a 	add	r2,r2,r3
  803584:	10800204 	addi	r2,r2,8
  803588:	10c00017 	ldw	r3,0(r2)
  80358c:	e0bffc17 	ldw	r2,-16(fp)
  803590:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  803594:	e13ffb17 	ldw	r4,-20(fp)
  803598:	08038ec0 	call	8038ec <alt_release_fd>
  }
} 
  80359c:	e037883a 	mov	sp,fp
  8035a0:	dfc00117 	ldw	ra,4(sp)
  8035a4:	df000017 	ldw	fp,0(sp)
  8035a8:	dec00204 	addi	sp,sp,8
  8035ac:	f800283a 	ret

008035b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8035b0:	defffb04 	addi	sp,sp,-20
  8035b4:	dfc00415 	stw	ra,16(sp)
  8035b8:	df000315 	stw	fp,12(sp)
  8035bc:	df000304 	addi	fp,sp,12
  8035c0:	e13ffd15 	stw	r4,-12(fp)
  8035c4:	e17ffe15 	stw	r5,-8(fp)
  8035c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8035cc:	01002034 	movhi	r4,128
  8035d0:	21170504 	addi	r4,r4,23572
  8035d4:	e17ffd17 	ldw	r5,-12(fp)
  8035d8:	01800044 	movi	r6,1
  8035dc:	01c07fc4 	movi	r7,511
  8035e0:	08034ec0 	call	8034ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8035e4:	01002034 	movhi	r4,128
  8035e8:	21170204 	addi	r4,r4,23560
  8035ec:	e17ffe17 	ldw	r5,-8(fp)
  8035f0:	000d883a 	mov	r6,zero
  8035f4:	01c07fc4 	movi	r7,511
  8035f8:	08034ec0 	call	8034ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8035fc:	01002034 	movhi	r4,128
  803600:	21170804 	addi	r4,r4,23584
  803604:	e17fff17 	ldw	r5,-4(fp)
  803608:	01800044 	movi	r6,1
  80360c:	01c07fc4 	movi	r7,511
  803610:	08034ec0 	call	8034ec <alt_open_fd>
}  
  803614:	e037883a 	mov	sp,fp
  803618:	dfc00117 	ldw	ra,4(sp)
  80361c:	df000017 	ldw	fp,0(sp)
  803620:	dec00204 	addi	sp,sp,8
  803624:	f800283a 	ret

00803628 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803628:	defffc04 	addi	sp,sp,-16
  80362c:	df000315 	stw	fp,12(sp)
  803630:	df000304 	addi	fp,sp,12
  803634:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803638:	e0bffe17 	ldw	r2,-8(fp)
  80363c:	10800217 	ldw	r2,8(r2)
  803640:	10d00034 	orhi	r3,r2,16384
  803644:	e0bffe17 	ldw	r2,-8(fp)
  803648:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80364c:	e03ffd15 	stw	zero,-12(fp)
  803650:	00002006 	br	8036d4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803654:	e0bffd17 	ldw	r2,-12(fp)
  803658:	00c02034 	movhi	r3,128
  80365c:	18d70204 	addi	r3,r3,23560
  803660:	10800324 	muli	r2,r2,12
  803664:	10c5883a 	add	r2,r2,r3
  803668:	10c00017 	ldw	r3,0(r2)
  80366c:	e0bffe17 	ldw	r2,-8(fp)
  803670:	10800017 	ldw	r2,0(r2)
  803674:	1880141e 	bne	r3,r2,8036c8 <alt_file_locked+0xa0>
  803678:	e0bffd17 	ldw	r2,-12(fp)
  80367c:	00c02034 	movhi	r3,128
  803680:	18d70204 	addi	r3,r3,23560
  803684:	10800324 	muli	r2,r2,12
  803688:	10c5883a 	add	r2,r2,r3
  80368c:	10800204 	addi	r2,r2,8
  803690:	10800017 	ldw	r2,0(r2)
  803694:	1004403a 	cmpge	r2,r2,zero
  803698:	10000b1e 	bne	r2,zero,8036c8 <alt_file_locked+0xa0>
  80369c:	e0bffd17 	ldw	r2,-12(fp)
  8036a0:	10800324 	muli	r2,r2,12
  8036a4:	1007883a 	mov	r3,r2
  8036a8:	00802034 	movhi	r2,128
  8036ac:	10970204 	addi	r2,r2,23560
  8036b0:	1887883a 	add	r3,r3,r2
  8036b4:	e0bffe17 	ldw	r2,-8(fp)
  8036b8:	18800326 	beq	r3,r2,8036c8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8036bc:	00bffcc4 	movi	r2,-13
  8036c0:	e0bfff15 	stw	r2,-4(fp)
  8036c4:	00000a06 	br	8036f0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8036c8:	e0bffd17 	ldw	r2,-12(fp)
  8036cc:	10800044 	addi	r2,r2,1
  8036d0:	e0bffd15 	stw	r2,-12(fp)
  8036d4:	00802034 	movhi	r2,128
  8036d8:	10986904 	addi	r2,r2,24996
  8036dc:	10800017 	ldw	r2,0(r2)
  8036e0:	1007883a 	mov	r3,r2
  8036e4:	e0bffd17 	ldw	r2,-12(fp)
  8036e8:	18bfda2e 	bgeu	r3,r2,803654 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8036ec:	e03fff15 	stw	zero,-4(fp)
  8036f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8036f4:	e037883a 	mov	sp,fp
  8036f8:	df000017 	ldw	fp,0(sp)
  8036fc:	dec00104 	addi	sp,sp,4
  803700:	f800283a 	ret

00803704 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  803704:	defff404 	addi	sp,sp,-48
  803708:	dfc00b15 	stw	ra,44(sp)
  80370c:	df000a15 	stw	fp,40(sp)
  803710:	df000a04 	addi	fp,sp,40
  803714:	e13ffb15 	stw	r4,-20(fp)
  803718:	e17ffc15 	stw	r5,-16(fp)
  80371c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  803720:	00bfffc4 	movi	r2,-1
  803724:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  803728:	00bffb44 	movi	r2,-19
  80372c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  803730:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803734:	e13ffb17 	ldw	r4,-20(fp)
  803738:	01402034 	movhi	r5,128
  80373c:	29586704 	addi	r5,r5,24988
  803740:	0803c8c0 	call	803c8c <alt_find_dev>
  803744:	e0bffa15 	stw	r2,-24(fp)
  803748:	e0bffa17 	ldw	r2,-24(fp)
  80374c:	1004c03a 	cmpne	r2,r2,zero
  803750:	1000051e 	bne	r2,zero,803768 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  803754:	e13ffb17 	ldw	r4,-20(fp)
  803758:	0803d200 	call	803d20 <alt_find_file>
  80375c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  803760:	00800044 	movi	r2,1
  803764:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803768:	e0bffa17 	ldw	r2,-24(fp)
  80376c:	1005003a 	cmpeq	r2,r2,zero
  803770:	1000301e 	bne	r2,zero,803834 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803774:	e13ffa17 	ldw	r4,-24(fp)
  803778:	0803e400 	call	803e40 <alt_get_fd>
  80377c:	e0bff815 	stw	r2,-32(fp)
  803780:	e0bff817 	ldw	r2,-32(fp)
  803784:	1004403a 	cmpge	r2,r2,zero
  803788:	1000031e 	bne	r2,zero,803798 <open+0x94>
    {
      status = index;
  80378c:	e0bff817 	ldw	r2,-32(fp)
  803790:	e0bff715 	stw	r2,-36(fp)
  803794:	00002906 	br	80383c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  803798:	e0bff817 	ldw	r2,-32(fp)
  80379c:	10800324 	muli	r2,r2,12
  8037a0:	1007883a 	mov	r3,r2
  8037a4:	00802034 	movhi	r2,128
  8037a8:	10970204 	addi	r2,r2,23560
  8037ac:	1885883a 	add	r2,r3,r2
  8037b0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8037b4:	e0fffc17 	ldw	r3,-16(fp)
  8037b8:	00900034 	movhi	r2,16384
  8037bc:	10bfffc4 	addi	r2,r2,-1
  8037c0:	1886703a 	and	r3,r3,r2
  8037c4:	e0bff917 	ldw	r2,-28(fp)
  8037c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8037cc:	e0bff617 	ldw	r2,-40(fp)
  8037d0:	1004c03a 	cmpne	r2,r2,zero
  8037d4:	1000061e 	bne	r2,zero,8037f0 <open+0xec>
  8037d8:	e13ff917 	ldw	r4,-28(fp)
  8037dc:	08036280 	call	803628 <alt_file_locked>
  8037e0:	e0bff715 	stw	r2,-36(fp)
  8037e4:	e0bff717 	ldw	r2,-36(fp)
  8037e8:	1004803a 	cmplt	r2,r2,zero
  8037ec:	1000131e 	bne	r2,zero,80383c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8037f0:	e0bffa17 	ldw	r2,-24(fp)
  8037f4:	10800317 	ldw	r2,12(r2)
  8037f8:	1005003a 	cmpeq	r2,r2,zero
  8037fc:	1000091e 	bne	r2,zero,803824 <open+0x120>
  803800:	e0bffa17 	ldw	r2,-24(fp)
  803804:	10800317 	ldw	r2,12(r2)
  803808:	e13ff917 	ldw	r4,-28(fp)
  80380c:	e17ffb17 	ldw	r5,-20(fp)
  803810:	e1bffc17 	ldw	r6,-16(fp)
  803814:	e1fffd17 	ldw	r7,-12(fp)
  803818:	103ee83a 	callr	r2
  80381c:	e0bfff15 	stw	r2,-4(fp)
  803820:	00000106 	br	803828 <open+0x124>
  803824:	e03fff15 	stw	zero,-4(fp)
  803828:	e0bfff17 	ldw	r2,-4(fp)
  80382c:	e0bff715 	stw	r2,-36(fp)
  803830:	00000206 	br	80383c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  803834:	00bffb44 	movi	r2,-19
  803838:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80383c:	e0bff717 	ldw	r2,-36(fp)
  803840:	1004403a 	cmpge	r2,r2,zero
  803844:	1000091e 	bne	r2,zero,80386c <open+0x168>
  {
    alt_release_fd (index);  
  803848:	e13ff817 	ldw	r4,-32(fp)
  80384c:	08038ec0 	call	8038ec <alt_release_fd>
    ALT_ERRNO = -status;
  803850:	080388c0 	call	80388c <alt_get_errno>
  803854:	e0fff717 	ldw	r3,-36(fp)
  803858:	00c7c83a 	sub	r3,zero,r3
  80385c:	10c00015 	stw	r3,0(r2)
    return -1;
  803860:	00bfffc4 	movi	r2,-1
  803864:	e0bffe15 	stw	r2,-8(fp)
  803868:	00000206 	br	803874 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80386c:	e0bff817 	ldw	r2,-32(fp)
  803870:	e0bffe15 	stw	r2,-8(fp)
  803874:	e0bffe17 	ldw	r2,-8(fp)
}
  803878:	e037883a 	mov	sp,fp
  80387c:	dfc00117 	ldw	ra,4(sp)
  803880:	df000017 	ldw	fp,0(sp)
  803884:	dec00204 	addi	sp,sp,8
  803888:	f800283a 	ret

0080388c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80388c:	defffd04 	addi	sp,sp,-12
  803890:	dfc00215 	stw	ra,8(sp)
  803894:	df000115 	stw	fp,4(sp)
  803898:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80389c:	00802034 	movhi	r2,128
  8038a0:	10986a04 	addi	r2,r2,25000
  8038a4:	10800017 	ldw	r2,0(r2)
  8038a8:	1005003a 	cmpeq	r2,r2,zero
  8038ac:	1000061e 	bne	r2,zero,8038c8 <alt_get_errno+0x3c>
  8038b0:	00802034 	movhi	r2,128
  8038b4:	10986a04 	addi	r2,r2,25000
  8038b8:	10800017 	ldw	r2,0(r2)
  8038bc:	103ee83a 	callr	r2
  8038c0:	e0bfff15 	stw	r2,-4(fp)
  8038c4:	00000306 	br	8038d4 <alt_get_errno+0x48>
  8038c8:	00802034 	movhi	r2,128
  8038cc:	109e9b04 	addi	r2,r2,31340
  8038d0:	e0bfff15 	stw	r2,-4(fp)
  8038d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8038d8:	e037883a 	mov	sp,fp
  8038dc:	dfc00117 	ldw	ra,4(sp)
  8038e0:	df000017 	ldw	fp,0(sp)
  8038e4:	dec00204 	addi	sp,sp,8
  8038e8:	f800283a 	ret

008038ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8038ec:	defffe04 	addi	sp,sp,-8
  8038f0:	df000115 	stw	fp,4(sp)
  8038f4:	df000104 	addi	fp,sp,4
  8038f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8038fc:	e0bfff17 	ldw	r2,-4(fp)
  803900:	108000d0 	cmplti	r2,r2,3
  803904:	10000d1e 	bne	r2,zero,80393c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803908:	e0bfff17 	ldw	r2,-4(fp)
  80390c:	00c02034 	movhi	r3,128
  803910:	18d70204 	addi	r3,r3,23560
  803914:	10800324 	muli	r2,r2,12
  803918:	10c5883a 	add	r2,r2,r3
  80391c:	10800204 	addi	r2,r2,8
  803920:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803924:	e0bfff17 	ldw	r2,-4(fp)
  803928:	00c02034 	movhi	r3,128
  80392c:	18d70204 	addi	r3,r3,23560
  803930:	10800324 	muli	r2,r2,12
  803934:	10c5883a 	add	r2,r2,r3
  803938:	10000015 	stw	zero,0(r2)
  }
}
  80393c:	e037883a 	mov	sp,fp
  803940:	df000017 	ldw	fp,0(sp)
  803944:	dec00104 	addi	sp,sp,4
  803948:	f800283a 	ret

0080394c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80394c:	defffa04 	addi	sp,sp,-24
  803950:	df000515 	stw	fp,20(sp)
  803954:	df000504 	addi	fp,sp,20
  803958:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80395c:	0005303a 	rdctl	r2,status
  803960:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803964:	e0fffd17 	ldw	r3,-12(fp)
  803968:	00bfff84 	movi	r2,-2
  80396c:	1884703a 	and	r2,r3,r2
  803970:	1001703a 	wrctl	status,r2
  
  return context;
  803974:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  803978:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80397c:	e0bfff17 	ldw	r2,-4(fp)
  803980:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803984:	e0bffc17 	ldw	r2,-16(fp)
  803988:	10c00017 	ldw	r3,0(r2)
  80398c:	e0bffc17 	ldw	r2,-16(fp)
  803990:	10800117 	ldw	r2,4(r2)
  803994:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  803998:	e0bffc17 	ldw	r2,-16(fp)
  80399c:	10c00117 	ldw	r3,4(r2)
  8039a0:	e0bffc17 	ldw	r2,-16(fp)
  8039a4:	10800017 	ldw	r2,0(r2)
  8039a8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8039ac:	e0fffc17 	ldw	r3,-16(fp)
  8039b0:	e0bffc17 	ldw	r2,-16(fp)
  8039b4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8039b8:	e0fffc17 	ldw	r3,-16(fp)
  8039bc:	e0bffc17 	ldw	r2,-16(fp)
  8039c0:	18800015 	stw	r2,0(r3)
  8039c4:	e0bffe17 	ldw	r2,-8(fp)
  8039c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8039cc:	e0bffb17 	ldw	r2,-20(fp)
  8039d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8039d4:	e037883a 	mov	sp,fp
  8039d8:	df000017 	ldw	fp,0(sp)
  8039dc:	dec00104 	addi	sp,sp,4
  8039e0:	f800283a 	ret

008039e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8039e4:	defffb04 	addi	sp,sp,-20
  8039e8:	dfc00415 	stw	ra,16(sp)
  8039ec:	df000315 	stw	fp,12(sp)
  8039f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8039f4:	d0a00a17 	ldw	r2,-32728(gp)
  8039f8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8039fc:	d0a63817 	ldw	r2,-26400(gp)
  803a00:	10800044 	addi	r2,r2,1
  803a04:	d0a63815 	stw	r2,-26400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803a08:	00003106 	br	803ad0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  803a0c:	e0bffe17 	ldw	r2,-8(fp)
  803a10:	10800017 	ldw	r2,0(r2)
  803a14:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803a18:	e0bffe17 	ldw	r2,-8(fp)
  803a1c:	10800403 	ldbu	r2,16(r2)
  803a20:	10803fcc 	andi	r2,r2,255
  803a24:	1005003a 	cmpeq	r2,r2,zero
  803a28:	1000051e 	bne	r2,zero,803a40 <alt_tick+0x5c>
  803a2c:	d0a63817 	ldw	r2,-26400(gp)
  803a30:	1004c03a 	cmpne	r2,r2,zero
  803a34:	1000021e 	bne	r2,zero,803a40 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  803a38:	e0bffe17 	ldw	r2,-8(fp)
  803a3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803a40:	e0bffe17 	ldw	r2,-8(fp)
  803a44:	10c00217 	ldw	r3,8(r2)
  803a48:	d0a63817 	ldw	r2,-26400(gp)
  803a4c:	10c01e36 	bltu	r2,r3,803ac8 <alt_tick+0xe4>
  803a50:	e0bffe17 	ldw	r2,-8(fp)
  803a54:	10800403 	ldbu	r2,16(r2)
  803a58:	10803fcc 	andi	r2,r2,255
  803a5c:	1004c03a 	cmpne	r2,r2,zero
  803a60:	1000191e 	bne	r2,zero,803ac8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  803a64:	e0bffe17 	ldw	r2,-8(fp)
  803a68:	10c00317 	ldw	r3,12(r2)
  803a6c:	e0bffe17 	ldw	r2,-8(fp)
  803a70:	11000517 	ldw	r4,20(r2)
  803a74:	183ee83a 	callr	r3
  803a78:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803a7c:	e0bffd17 	ldw	r2,-12(fp)
  803a80:	1004c03a 	cmpne	r2,r2,zero
  803a84:	1000031e 	bne	r2,zero,803a94 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  803a88:	e13ffe17 	ldw	r4,-8(fp)
  803a8c:	080394c0 	call	80394c <alt_alarm_stop>
  803a90:	00000d06 	br	803ac8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  803a94:	e0bffe17 	ldw	r2,-8(fp)
  803a98:	10c00217 	ldw	r3,8(r2)
  803a9c:	e0bffd17 	ldw	r2,-12(fp)
  803aa0:	1887883a 	add	r3,r3,r2
  803aa4:	e0bffe17 	ldw	r2,-8(fp)
  803aa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803aac:	e0bffe17 	ldw	r2,-8(fp)
  803ab0:	10c00217 	ldw	r3,8(r2)
  803ab4:	d0a63817 	ldw	r2,-26400(gp)
  803ab8:	1880032e 	bgeu	r3,r2,803ac8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  803abc:	e0fffe17 	ldw	r3,-8(fp)
  803ac0:	00800044 	movi	r2,1
  803ac4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  803ac8:	e0bfff17 	ldw	r2,-4(fp)
  803acc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803ad0:	d0e00a04 	addi	r3,gp,-32728
  803ad4:	e0bffe17 	ldw	r2,-8(fp)
  803ad8:	10ffcc1e 	bne	r2,r3,803a0c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  803adc:	e037883a 	mov	sp,fp
  803ae0:	dfc00117 	ldw	ra,4(sp)
  803ae4:	df000017 	ldw	fp,0(sp)
  803ae8:	dec00204 	addi	sp,sp,8
  803aec:	f800283a 	ret

00803af0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803af0:	defffd04 	addi	sp,sp,-12
  803af4:	dfc00215 	stw	ra,8(sp)
  803af8:	df000115 	stw	fp,4(sp)
  803afc:	df000104 	addi	fp,sp,4
  803b00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803b04:	e13fff17 	ldw	r4,-4(fp)
  803b08:	0803b400 	call	803b40 <alt_busy_sleep>
}
  803b0c:	e037883a 	mov	sp,fp
  803b10:	dfc00117 	ldw	ra,4(sp)
  803b14:	df000017 	ldw	fp,0(sp)
  803b18:	dec00204 	addi	sp,sp,8
  803b1c:	f800283a 	ret

00803b20 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  803b20:	deffff04 	addi	sp,sp,-4
  803b24:	df000015 	stw	fp,0(sp)
  803b28:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803b2c:	000170fa 	wrctl	ienable,zero
}
  803b30:	e037883a 	mov	sp,fp
  803b34:	df000017 	ldw	fp,0(sp)
  803b38:	dec00104 	addi	sp,sp,4
  803b3c:	f800283a 	ret

00803b40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  803b40:	defffa04 	addi	sp,sp,-24
  803b44:	dfc00515 	stw	ra,20(sp)
  803b48:	df000415 	stw	fp,16(sp)
  803b4c:	df000404 	addi	fp,sp,16
  803b50:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  803b54:	008000c4 	movi	r2,3
  803b58:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  803b5c:	e0fffc17 	ldw	r3,-16(fp)
  803b60:	008003f4 	movhi	r2,15
  803b64:	10909004 	addi	r2,r2,16960
  803b68:	188b383a 	mul	r5,r3,r2
  803b6c:	0100bef4 	movhi	r4,763
  803b70:	213c2004 	addi	r4,r4,-3968
  803b74:	08046180 	call	804618 <__udivsi3>
  803b78:	100b883a 	mov	r5,r2
  803b7c:	01200034 	movhi	r4,32768
  803b80:	213fffc4 	addi	r4,r4,-1
  803b84:	08046180 	call	804618 <__udivsi3>
  803b88:	100b883a 	mov	r5,r2
  803b8c:	e13fff17 	ldw	r4,-4(fp)
  803b90:	08046180 	call	804618 <__udivsi3>
  803b94:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  803b98:	e0bffd17 	ldw	r2,-12(fp)
  803b9c:	1005003a 	cmpeq	r2,r2,zero
  803ba0:	1000281e 	bne	r2,zero,803c44 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  803ba4:	e03ffe15 	stw	zero,-8(fp)
  803ba8:	00001606 	br	803c04 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  803bac:	00a00034 	movhi	r2,32768
  803bb0:	10bfffc4 	addi	r2,r2,-1
  803bb4:	10bfffc4 	addi	r2,r2,-1
  803bb8:	103ffe1e 	bne	r2,zero,803bb4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803bbc:	e0fffc17 	ldw	r3,-16(fp)
  803bc0:	008003f4 	movhi	r2,15
  803bc4:	10909004 	addi	r2,r2,16960
  803bc8:	188b383a 	mul	r5,r3,r2
  803bcc:	0100bef4 	movhi	r4,763
  803bd0:	213c2004 	addi	r4,r4,-3968
  803bd4:	08046180 	call	804618 <__udivsi3>
  803bd8:	100b883a 	mov	r5,r2
  803bdc:	01200034 	movhi	r4,32768
  803be0:	213fffc4 	addi	r4,r4,-1
  803be4:	08046180 	call	804618 <__udivsi3>
  803be8:	1007883a 	mov	r3,r2
  803bec:	e0bfff17 	ldw	r2,-4(fp)
  803bf0:	10c5c83a 	sub	r2,r2,r3
  803bf4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803bf8:	e0bffe17 	ldw	r2,-8(fp)
  803bfc:	10800044 	addi	r2,r2,1
  803c00:	e0bffe15 	stw	r2,-8(fp)
  803c04:	e0fffe17 	ldw	r3,-8(fp)
  803c08:	e0bffd17 	ldw	r2,-12(fp)
  803c0c:	18bfe716 	blt	r3,r2,803bac <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803c10:	e0fffc17 	ldw	r3,-16(fp)
  803c14:	008003f4 	movhi	r2,15
  803c18:	10909004 	addi	r2,r2,16960
  803c1c:	188b383a 	mul	r5,r3,r2
  803c20:	0100bef4 	movhi	r4,763
  803c24:	213c2004 	addi	r4,r4,-3968
  803c28:	08046180 	call	804618 <__udivsi3>
  803c2c:	1007883a 	mov	r3,r2
  803c30:	e0bfff17 	ldw	r2,-4(fp)
  803c34:	1885383a 	mul	r2,r3,r2
  803c38:	10bfffc4 	addi	r2,r2,-1
  803c3c:	103ffe1e 	bne	r2,zero,803c38 <alt_busy_sleep+0xf8>
  803c40:	00000c06 	br	803c74 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803c44:	e0fffc17 	ldw	r3,-16(fp)
  803c48:	008003f4 	movhi	r2,15
  803c4c:	10909004 	addi	r2,r2,16960
  803c50:	188b383a 	mul	r5,r3,r2
  803c54:	0100bef4 	movhi	r4,763
  803c58:	213c2004 	addi	r4,r4,-3968
  803c5c:	08046180 	call	804618 <__udivsi3>
  803c60:	1007883a 	mov	r3,r2
  803c64:	e0bfff17 	ldw	r2,-4(fp)
  803c68:	1885383a 	mul	r2,r3,r2
  803c6c:	10bfffc4 	addi	r2,r2,-1
  803c70:	00bffe16 	blt	zero,r2,803c6c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  803c74:	0005883a 	mov	r2,zero
}
  803c78:	e037883a 	mov	sp,fp
  803c7c:	dfc00117 	ldw	ra,4(sp)
  803c80:	df000017 	ldw	fp,0(sp)
  803c84:	dec00204 	addi	sp,sp,8
  803c88:	f800283a 	ret

00803c8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  803c8c:	defff904 	addi	sp,sp,-28
  803c90:	dfc00615 	stw	ra,24(sp)
  803c94:	df000515 	stw	fp,20(sp)
  803c98:	df000504 	addi	fp,sp,20
  803c9c:	e13ffd15 	stw	r4,-12(fp)
  803ca0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803ca4:	e0bffe17 	ldw	r2,-8(fp)
  803ca8:	10800017 	ldw	r2,0(r2)
  803cac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803cb0:	e13ffd17 	ldw	r4,-12(fp)
  803cb4:	08041800 	call	804180 <strlen>
  803cb8:	10800044 	addi	r2,r2,1
  803cbc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803cc0:	00000d06 	br	803cf8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803cc4:	e0bffc17 	ldw	r2,-16(fp)
  803cc8:	11000217 	ldw	r4,8(r2)
  803ccc:	e1bffb17 	ldw	r6,-20(fp)
  803cd0:	e17ffd17 	ldw	r5,-12(fp)
  803cd4:	0803fd40 	call	803fd4 <memcmp>
  803cd8:	1004c03a 	cmpne	r2,r2,zero
  803cdc:	1000031e 	bne	r2,zero,803cec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803ce0:	e0bffc17 	ldw	r2,-16(fp)
  803ce4:	e0bfff15 	stw	r2,-4(fp)
  803ce8:	00000706 	br	803d08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  803cec:	e0bffc17 	ldw	r2,-16(fp)
  803cf0:	10800017 	ldw	r2,0(r2)
  803cf4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803cf8:	e0fffe17 	ldw	r3,-8(fp)
  803cfc:	e0bffc17 	ldw	r2,-16(fp)
  803d00:	10fff01e 	bne	r2,r3,803cc4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803d04:	e03fff15 	stw	zero,-4(fp)
  803d08:	e0bfff17 	ldw	r2,-4(fp)
}
  803d0c:	e037883a 	mov	sp,fp
  803d10:	dfc00117 	ldw	ra,4(sp)
  803d14:	df000017 	ldw	fp,0(sp)
  803d18:	dec00204 	addi	sp,sp,8
  803d1c:	f800283a 	ret

00803d20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  803d20:	defffa04 	addi	sp,sp,-24
  803d24:	dfc00515 	stw	ra,20(sp)
  803d28:	df000415 	stw	fp,16(sp)
  803d2c:	df000404 	addi	fp,sp,16
  803d30:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803d34:	00802034 	movhi	r2,128
  803d38:	10986504 	addi	r2,r2,24980
  803d3c:	10800017 	ldw	r2,0(r2)
  803d40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803d44:	00003306 	br	803e14 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  803d48:	e0bffd17 	ldw	r2,-12(fp)
  803d4c:	11000217 	ldw	r4,8(r2)
  803d50:	08041800 	call	804180 <strlen>
  803d54:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  803d58:	e0bffd17 	ldw	r2,-12(fp)
  803d5c:	10c00217 	ldw	r3,8(r2)
  803d60:	e0bffc17 	ldw	r2,-16(fp)
  803d64:	1885883a 	add	r2,r3,r2
  803d68:	10bfffc4 	addi	r2,r2,-1
  803d6c:	10800003 	ldbu	r2,0(r2)
  803d70:	10803fcc 	andi	r2,r2,255
  803d74:	1080201c 	xori	r2,r2,128
  803d78:	10bfe004 	addi	r2,r2,-128
  803d7c:	10800bd8 	cmpnei	r2,r2,47
  803d80:	1000031e 	bne	r2,zero,803d90 <alt_find_file+0x70>
    {
      len -= 1;
  803d84:	e0bffc17 	ldw	r2,-16(fp)
  803d88:	10bfffc4 	addi	r2,r2,-1
  803d8c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803d90:	e0bffc17 	ldw	r2,-16(fp)
  803d94:	1007883a 	mov	r3,r2
  803d98:	e0bffe17 	ldw	r2,-8(fp)
  803d9c:	1885883a 	add	r2,r3,r2
  803da0:	10800003 	ldbu	r2,0(r2)
  803da4:	10803fcc 	andi	r2,r2,255
  803da8:	1080201c 	xori	r2,r2,128
  803dac:	10bfe004 	addi	r2,r2,-128
  803db0:	10800be0 	cmpeqi	r2,r2,47
  803db4:	10000a1e 	bne	r2,zero,803de0 <alt_find_file+0xc0>
  803db8:	e0bffc17 	ldw	r2,-16(fp)
  803dbc:	1007883a 	mov	r3,r2
  803dc0:	e0bffe17 	ldw	r2,-8(fp)
  803dc4:	1885883a 	add	r2,r3,r2
  803dc8:	10800003 	ldbu	r2,0(r2)
  803dcc:	10803fcc 	andi	r2,r2,255
  803dd0:	1080201c 	xori	r2,r2,128
  803dd4:	10bfe004 	addi	r2,r2,-128
  803dd8:	1004c03a 	cmpne	r2,r2,zero
  803ddc:	10000a1e 	bne	r2,zero,803e08 <alt_find_file+0xe8>
  803de0:	e0bffd17 	ldw	r2,-12(fp)
  803de4:	11000217 	ldw	r4,8(r2)
  803de8:	e1bffc17 	ldw	r6,-16(fp)
  803dec:	e17ffe17 	ldw	r5,-8(fp)
  803df0:	0803fd40 	call	803fd4 <memcmp>
  803df4:	1004c03a 	cmpne	r2,r2,zero
  803df8:	1000031e 	bne	r2,zero,803e08 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803dfc:	e0bffd17 	ldw	r2,-12(fp)
  803e00:	e0bfff15 	stw	r2,-4(fp)
  803e04:	00000806 	br	803e28 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  803e08:	e0bffd17 	ldw	r2,-12(fp)
  803e0c:	10800017 	ldw	r2,0(r2)
  803e10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803e14:	00c02034 	movhi	r3,128
  803e18:	18d86504 	addi	r3,r3,24980
  803e1c:	e0bffd17 	ldw	r2,-12(fp)
  803e20:	10ffc91e 	bne	r2,r3,803d48 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  803e24:	e03fff15 	stw	zero,-4(fp)
  803e28:	e0bfff17 	ldw	r2,-4(fp)
}
  803e2c:	e037883a 	mov	sp,fp
  803e30:	dfc00117 	ldw	ra,4(sp)
  803e34:	df000017 	ldw	fp,0(sp)
  803e38:	dec00204 	addi	sp,sp,8
  803e3c:	f800283a 	ret

00803e40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803e40:	defffc04 	addi	sp,sp,-16
  803e44:	df000315 	stw	fp,12(sp)
  803e48:	df000304 	addi	fp,sp,12
  803e4c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  803e50:	00bffa04 	movi	r2,-24
  803e54:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803e58:	e03ffe15 	stw	zero,-8(fp)
  803e5c:	00001e06 	br	803ed8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  803e60:	e0bffe17 	ldw	r2,-8(fp)
  803e64:	00c02034 	movhi	r3,128
  803e68:	18d70204 	addi	r3,r3,23560
  803e6c:	10800324 	muli	r2,r2,12
  803e70:	10c5883a 	add	r2,r2,r3
  803e74:	10800017 	ldw	r2,0(r2)
  803e78:	1004c03a 	cmpne	r2,r2,zero
  803e7c:	1000131e 	bne	r2,zero,803ecc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  803e80:	e0bffe17 	ldw	r2,-8(fp)
  803e84:	00c02034 	movhi	r3,128
  803e88:	18d70204 	addi	r3,r3,23560
  803e8c:	10800324 	muli	r2,r2,12
  803e90:	10c7883a 	add	r3,r2,r3
  803e94:	e0bfff17 	ldw	r2,-4(fp)
  803e98:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  803e9c:	00802034 	movhi	r2,128
  803ea0:	10986904 	addi	r2,r2,24996
  803ea4:	10c00017 	ldw	r3,0(r2)
  803ea8:	e0bffe17 	ldw	r2,-8(fp)
  803eac:	1880040e 	bge	r3,r2,803ec0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  803eb0:	00c02034 	movhi	r3,128
  803eb4:	18d86904 	addi	r3,r3,24996
  803eb8:	e0bffe17 	ldw	r2,-8(fp)
  803ebc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  803ec0:	e0bffe17 	ldw	r2,-8(fp)
  803ec4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  803ec8:	00000606 	br	803ee4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803ecc:	e0bffe17 	ldw	r2,-8(fp)
  803ed0:	10800044 	addi	r2,r2,1
  803ed4:	e0bffe15 	stw	r2,-8(fp)
  803ed8:	e0bffe17 	ldw	r2,-8(fp)
  803edc:	10800810 	cmplti	r2,r2,32
  803ee0:	103fdf1e 	bne	r2,zero,803e60 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803ee4:	e0bffd17 	ldw	r2,-12(fp)
}
  803ee8:	e037883a 	mov	sp,fp
  803eec:	df000017 	ldw	fp,0(sp)
  803ef0:	dec00104 	addi	sp,sp,4
  803ef4:	f800283a 	ret

00803ef8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  803ef8:	defffb04 	addi	sp,sp,-20
  803efc:	df000415 	stw	fp,16(sp)
  803f00:	df000404 	addi	fp,sp,16
  803f04:	e13ffe15 	stw	r4,-8(fp)
  803f08:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  803f0c:	e0bfff17 	ldw	r2,-4(fp)
  803f10:	10840070 	cmpltui	r2,r2,4097
  803f14:	1000021e 	bne	r2,zero,803f20 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  803f18:	00840004 	movi	r2,4096
  803f1c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  803f20:	e0fffe17 	ldw	r3,-8(fp)
  803f24:	e0bfff17 	ldw	r2,-4(fp)
  803f28:	1885883a 	add	r2,r3,r2
  803f2c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803f30:	e0bffe17 	ldw	r2,-8(fp)
  803f34:	e0bffd15 	stw	r2,-12(fp)
  803f38:	00000506 	br	803f50 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  803f3c:	e0bffd17 	ldw	r2,-12(fp)
  803f40:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803f44:	e0bffd17 	ldw	r2,-12(fp)
  803f48:	10800804 	addi	r2,r2,32
  803f4c:	e0bffd15 	stw	r2,-12(fp)
  803f50:	e0fffd17 	ldw	r3,-12(fp)
  803f54:	e0bffc17 	ldw	r2,-16(fp)
  803f58:	18bff836 	bltu	r3,r2,803f3c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  803f5c:	e0bffe17 	ldw	r2,-8(fp)
  803f60:	108007cc 	andi	r2,r2,31
  803f64:	1005003a 	cmpeq	r2,r2,zero
  803f68:	1000021e 	bne	r2,zero,803f74 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  803f6c:	e0bffd17 	ldw	r2,-12(fp)
  803f70:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  803f74:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  803f78:	e037883a 	mov	sp,fp
  803f7c:	df000017 	ldw	fp,0(sp)
  803f80:	dec00104 	addi	sp,sp,4
  803f84:	f800283a 	ret

00803f88 <atexit>:
  803f88:	200b883a 	mov	r5,r4
  803f8c:	000d883a 	mov	r6,zero
  803f90:	0009883a 	mov	r4,zero
  803f94:	000f883a 	mov	r7,zero
  803f98:	08041f41 	jmpi	8041f4 <__register_exitproc>

00803f9c <exit>:
  803f9c:	defffe04 	addi	sp,sp,-8
  803fa0:	000b883a 	mov	r5,zero
  803fa4:	dc000015 	stw	r16,0(sp)
  803fa8:	dfc00115 	stw	ra,4(sp)
  803fac:	2021883a 	mov	r16,r4
  803fb0:	080432c0 	call	80432c <__call_exitprocs>
  803fb4:	00802034 	movhi	r2,128
  803fb8:	10987004 	addi	r2,r2,25024
  803fbc:	11000017 	ldw	r4,0(r2)
  803fc0:	20800f17 	ldw	r2,60(r4)
  803fc4:	10000126 	beq	r2,zero,803fcc <exit+0x30>
  803fc8:	103ee83a 	callr	r2
  803fcc:	8009883a 	mov	r4,r16
  803fd0:	08046680 	call	804668 <_exit>

00803fd4 <memcmp>:
  803fd4:	00c000c4 	movi	r3,3
  803fd8:	1980032e 	bgeu	r3,r6,803fe8 <memcmp+0x14>
  803fdc:	2144b03a 	or	r2,r4,r5
  803fe0:	10c4703a 	and	r2,r2,r3
  803fe4:	10000f26 	beq	r2,zero,804024 <memcmp+0x50>
  803fe8:	31ffffc4 	addi	r7,r6,-1
  803fec:	3000061e 	bne	r6,zero,804008 <memcmp+0x34>
  803ff0:	00000a06 	br	80401c <memcmp+0x48>
  803ff4:	39ffffc4 	addi	r7,r7,-1
  803ff8:	00bfffc4 	movi	r2,-1
  803ffc:	21000044 	addi	r4,r4,1
  804000:	29400044 	addi	r5,r5,1
  804004:	38800526 	beq	r7,r2,80401c <memcmp+0x48>
  804008:	20c00003 	ldbu	r3,0(r4)
  80400c:	28800003 	ldbu	r2,0(r5)
  804010:	18bff826 	beq	r3,r2,803ff4 <memcmp+0x20>
  804014:	1885c83a 	sub	r2,r3,r2
  804018:	f800283a 	ret
  80401c:	0005883a 	mov	r2,zero
  804020:	f800283a 	ret
  804024:	180f883a 	mov	r7,r3
  804028:	20c00017 	ldw	r3,0(r4)
  80402c:	28800017 	ldw	r2,0(r5)
  804030:	18bfed1e 	bne	r3,r2,803fe8 <memcmp+0x14>
  804034:	31bfff04 	addi	r6,r6,-4
  804038:	21000104 	addi	r4,r4,4
  80403c:	29400104 	addi	r5,r5,4
  804040:	39bff936 	bltu	r7,r6,804028 <memcmp+0x54>
  804044:	003fe806 	br	803fe8 <memcmp+0x14>

00804048 <memcpy>:
  804048:	01c003c4 	movi	r7,15
  80404c:	2007883a 	mov	r3,r4
  804050:	3980032e 	bgeu	r7,r6,804060 <memcpy+0x18>
  804054:	2904b03a 	or	r2,r5,r4
  804058:	108000cc 	andi	r2,r2,3
  80405c:	10000926 	beq	r2,zero,804084 <memcpy+0x3c>
  804060:	30000626 	beq	r6,zero,80407c <memcpy+0x34>
  804064:	30cd883a 	add	r6,r6,r3
  804068:	28800003 	ldbu	r2,0(r5)
  80406c:	29400044 	addi	r5,r5,1
  804070:	18800005 	stb	r2,0(r3)
  804074:	18c00044 	addi	r3,r3,1
  804078:	30fffb1e 	bne	r6,r3,804068 <memcpy+0x20>
  80407c:	2005883a 	mov	r2,r4
  804080:	f800283a 	ret
  804084:	3811883a 	mov	r8,r7
  804088:	200f883a 	mov	r7,r4
  80408c:	28c00017 	ldw	r3,0(r5)
  804090:	31bffc04 	addi	r6,r6,-16
  804094:	38c00015 	stw	r3,0(r7)
  804098:	28800117 	ldw	r2,4(r5)
  80409c:	38800115 	stw	r2,4(r7)
  8040a0:	28c00217 	ldw	r3,8(r5)
  8040a4:	38c00215 	stw	r3,8(r7)
  8040a8:	28800317 	ldw	r2,12(r5)
  8040ac:	29400404 	addi	r5,r5,16
  8040b0:	38800315 	stw	r2,12(r7)
  8040b4:	39c00404 	addi	r7,r7,16
  8040b8:	41bff436 	bltu	r8,r6,80408c <memcpy+0x44>
  8040bc:	008000c4 	movi	r2,3
  8040c0:	1180072e 	bgeu	r2,r6,8040e0 <memcpy+0x98>
  8040c4:	1007883a 	mov	r3,r2
  8040c8:	28800017 	ldw	r2,0(r5)
  8040cc:	31bfff04 	addi	r6,r6,-4
  8040d0:	29400104 	addi	r5,r5,4
  8040d4:	38800015 	stw	r2,0(r7)
  8040d8:	39c00104 	addi	r7,r7,4
  8040dc:	19bffa36 	bltu	r3,r6,8040c8 <memcpy+0x80>
  8040e0:	3807883a 	mov	r3,r7
  8040e4:	003fde06 	br	804060 <memcpy+0x18>

008040e8 <memset>:
  8040e8:	008000c4 	movi	r2,3
  8040ec:	29403fcc 	andi	r5,r5,255
  8040f0:	2007883a 	mov	r3,r4
  8040f4:	1180022e 	bgeu	r2,r6,804100 <memset+0x18>
  8040f8:	2084703a 	and	r2,r4,r2
  8040fc:	10000826 	beq	r2,zero,804120 <memset+0x38>
  804100:	30000526 	beq	r6,zero,804118 <memset+0x30>
  804104:	2805883a 	mov	r2,r5
  804108:	30cd883a 	add	r6,r6,r3
  80410c:	18800005 	stb	r2,0(r3)
  804110:	18c00044 	addi	r3,r3,1
  804114:	19bffd1e 	bne	r3,r6,80410c <memset+0x24>
  804118:	2005883a 	mov	r2,r4
  80411c:	f800283a 	ret
  804120:	2804923a 	slli	r2,r5,8
  804124:	020003c4 	movi	r8,15
  804128:	200f883a 	mov	r7,r4
  80412c:	2884b03a 	or	r2,r5,r2
  804130:	1006943a 	slli	r3,r2,16
  804134:	10c6b03a 	or	r3,r2,r3
  804138:	41800a2e 	bgeu	r8,r6,804164 <memset+0x7c>
  80413c:	4005883a 	mov	r2,r8
  804140:	31bffc04 	addi	r6,r6,-16
  804144:	38c00015 	stw	r3,0(r7)
  804148:	38c00115 	stw	r3,4(r7)
  80414c:	38c00215 	stw	r3,8(r7)
  804150:	38c00315 	stw	r3,12(r7)
  804154:	39c00404 	addi	r7,r7,16
  804158:	11bff936 	bltu	r2,r6,804140 <memset+0x58>
  80415c:	008000c4 	movi	r2,3
  804160:	1180052e 	bgeu	r2,r6,804178 <memset+0x90>
  804164:	31bfff04 	addi	r6,r6,-4
  804168:	008000c4 	movi	r2,3
  80416c:	38c00015 	stw	r3,0(r7)
  804170:	39c00104 	addi	r7,r7,4
  804174:	11bffb36 	bltu	r2,r6,804164 <memset+0x7c>
  804178:	3807883a 	mov	r3,r7
  80417c:	003fe006 	br	804100 <memset+0x18>

00804180 <strlen>:
  804180:	208000cc 	andi	r2,r4,3
  804184:	2011883a 	mov	r8,r4
  804188:	1000161e 	bne	r2,zero,8041e4 <strlen+0x64>
  80418c:	20c00017 	ldw	r3,0(r4)
  804190:	017fbff4 	movhi	r5,65279
  804194:	297fbfc4 	addi	r5,r5,-257
  804198:	01e02074 	movhi	r7,32897
  80419c:	39e02004 	addi	r7,r7,-32640
  8041a0:	1945883a 	add	r2,r3,r5
  8041a4:	11c4703a 	and	r2,r2,r7
  8041a8:	00c6303a 	nor	r3,zero,r3
  8041ac:	1886703a 	and	r3,r3,r2
  8041b0:	18000c1e 	bne	r3,zero,8041e4 <strlen+0x64>
  8041b4:	280d883a 	mov	r6,r5
  8041b8:	380b883a 	mov	r5,r7
  8041bc:	21000104 	addi	r4,r4,4
  8041c0:	20800017 	ldw	r2,0(r4)
  8041c4:	1187883a 	add	r3,r2,r6
  8041c8:	1946703a 	and	r3,r3,r5
  8041cc:	0084303a 	nor	r2,zero,r2
  8041d0:	10c4703a 	and	r2,r2,r3
  8041d4:	103ff926 	beq	r2,zero,8041bc <strlen+0x3c>
  8041d8:	20800007 	ldb	r2,0(r4)
  8041dc:	10000326 	beq	r2,zero,8041ec <strlen+0x6c>
  8041e0:	21000044 	addi	r4,r4,1
  8041e4:	20800007 	ldb	r2,0(r4)
  8041e8:	103ffd1e 	bne	r2,zero,8041e0 <strlen+0x60>
  8041ec:	2205c83a 	sub	r2,r4,r8
  8041f0:	f800283a 	ret

008041f4 <__register_exitproc>:
  8041f4:	defffa04 	addi	sp,sp,-24
  8041f8:	00802034 	movhi	r2,128
  8041fc:	10987004 	addi	r2,r2,25024
  804200:	dc000015 	stw	r16,0(sp)
  804204:	14000017 	ldw	r16,0(r2)
  804208:	dd000415 	stw	r20,16(sp)
  80420c:	2829883a 	mov	r20,r5
  804210:	81405217 	ldw	r5,328(r16)
  804214:	dcc00315 	stw	r19,12(sp)
  804218:	dc800215 	stw	r18,8(sp)
  80421c:	dc400115 	stw	r17,4(sp)
  804220:	dfc00515 	stw	ra,20(sp)
  804224:	2023883a 	mov	r17,r4
  804228:	3027883a 	mov	r19,r6
  80422c:	3825883a 	mov	r18,r7
  804230:	28002526 	beq	r5,zero,8042c8 <__register_exitproc+0xd4>
  804234:	29000117 	ldw	r4,4(r5)
  804238:	008007c4 	movi	r2,31
  80423c:	11002716 	blt	r2,r4,8042dc <__register_exitproc+0xe8>
  804240:	8800101e 	bne	r17,zero,804284 <__register_exitproc+0x90>
  804244:	2105883a 	add	r2,r4,r4
  804248:	1085883a 	add	r2,r2,r2
  80424c:	20c00044 	addi	r3,r4,1
  804250:	1145883a 	add	r2,r2,r5
  804254:	0009883a 	mov	r4,zero
  804258:	15000215 	stw	r20,8(r2)
  80425c:	28c00115 	stw	r3,4(r5)
  804260:	2005883a 	mov	r2,r4
  804264:	dfc00517 	ldw	ra,20(sp)
  804268:	dd000417 	ldw	r20,16(sp)
  80426c:	dcc00317 	ldw	r19,12(sp)
  804270:	dc800217 	ldw	r18,8(sp)
  804274:	dc400117 	ldw	r17,4(sp)
  804278:	dc000017 	ldw	r16,0(sp)
  80427c:	dec00604 	addi	sp,sp,24
  804280:	f800283a 	ret
  804284:	29802204 	addi	r6,r5,136
  804288:	00800044 	movi	r2,1
  80428c:	110e983a 	sll	r7,r2,r4
  804290:	30c04017 	ldw	r3,256(r6)
  804294:	2105883a 	add	r2,r4,r4
  804298:	1085883a 	add	r2,r2,r2
  80429c:	1185883a 	add	r2,r2,r6
  8042a0:	19c6b03a 	or	r3,r3,r7
  8042a4:	14802015 	stw	r18,128(r2)
  8042a8:	14c00015 	stw	r19,0(r2)
  8042ac:	00800084 	movi	r2,2
  8042b0:	30c04015 	stw	r3,256(r6)
  8042b4:	88bfe31e 	bne	r17,r2,804244 <__register_exitproc+0x50>
  8042b8:	30804117 	ldw	r2,260(r6)
  8042bc:	11c4b03a 	or	r2,r2,r7
  8042c0:	30804115 	stw	r2,260(r6)
  8042c4:	003fdf06 	br	804244 <__register_exitproc+0x50>
  8042c8:	00802034 	movhi	r2,128
  8042cc:	109ee804 	addi	r2,r2,31648
  8042d0:	100b883a 	mov	r5,r2
  8042d4:	80805215 	stw	r2,328(r16)
  8042d8:	003fd606 	br	804234 <__register_exitproc+0x40>
  8042dc:	00800034 	movhi	r2,0
  8042e0:	10800004 	addi	r2,r2,0
  8042e4:	1000021e 	bne	r2,zero,8042f0 <__register_exitproc+0xfc>
  8042e8:	013fffc4 	movi	r4,-1
  8042ec:	003fdc06 	br	804260 <__register_exitproc+0x6c>
  8042f0:	01006404 	movi	r4,400
  8042f4:	103ee83a 	callr	r2
  8042f8:	1007883a 	mov	r3,r2
  8042fc:	103ffa26 	beq	r2,zero,8042e8 <__register_exitproc+0xf4>
  804300:	80805217 	ldw	r2,328(r16)
  804304:	180b883a 	mov	r5,r3
  804308:	18000115 	stw	zero,4(r3)
  80430c:	18800015 	stw	r2,0(r3)
  804310:	80c05215 	stw	r3,328(r16)
  804314:	18006215 	stw	zero,392(r3)
  804318:	18006315 	stw	zero,396(r3)
  80431c:	0009883a 	mov	r4,zero
  804320:	883fc826 	beq	r17,zero,804244 <__register_exitproc+0x50>
  804324:	003fd706 	br	804284 <__register_exitproc+0x90>

00804328 <register_fini>:
  804328:	f800283a 	ret

0080432c <__call_exitprocs>:
  80432c:	00802034 	movhi	r2,128
  804330:	10987004 	addi	r2,r2,25024
  804334:	10800017 	ldw	r2,0(r2)
  804338:	defff304 	addi	sp,sp,-52
  80433c:	df000b15 	stw	fp,44(sp)
  804340:	d8800115 	stw	r2,4(sp)
  804344:	00800034 	movhi	r2,0
  804348:	10800004 	addi	r2,r2,0
  80434c:	1005003a 	cmpeq	r2,r2,zero
  804350:	d8800215 	stw	r2,8(sp)
  804354:	d8800117 	ldw	r2,4(sp)
  804358:	dd400815 	stw	r21,32(sp)
  80435c:	dd000715 	stw	r20,28(sp)
  804360:	10805204 	addi	r2,r2,328
  804364:	dfc00c15 	stw	ra,48(sp)
  804368:	ddc00a15 	stw	r23,40(sp)
  80436c:	dd800915 	stw	r22,36(sp)
  804370:	dcc00615 	stw	r19,24(sp)
  804374:	dc800515 	stw	r18,20(sp)
  804378:	dc400415 	stw	r17,16(sp)
  80437c:	dc000315 	stw	r16,12(sp)
  804380:	282b883a 	mov	r21,r5
  804384:	2039883a 	mov	fp,r4
  804388:	d8800015 	stw	r2,0(sp)
  80438c:	2829003a 	cmpeq	r20,r5,zero
  804390:	d8800117 	ldw	r2,4(sp)
  804394:	14405217 	ldw	r17,328(r2)
  804398:	88001026 	beq	r17,zero,8043dc <__call_exitprocs+0xb0>
  80439c:	ddc00017 	ldw	r23,0(sp)
  8043a0:	88800117 	ldw	r2,4(r17)
  8043a4:	8c802204 	addi	r18,r17,136
  8043a8:	143fffc4 	addi	r16,r2,-1
  8043ac:	80000916 	blt	r16,zero,8043d4 <__call_exitprocs+0xa8>
  8043b0:	05bfffc4 	movi	r22,-1
  8043b4:	a000151e 	bne	r20,zero,80440c <__call_exitprocs+0xe0>
  8043b8:	8409883a 	add	r4,r16,r16
  8043bc:	2105883a 	add	r2,r4,r4
  8043c0:	1485883a 	add	r2,r2,r18
  8043c4:	10c02017 	ldw	r3,128(r2)
  8043c8:	a8c01126 	beq	r21,r3,804410 <__call_exitprocs+0xe4>
  8043cc:	843fffc4 	addi	r16,r16,-1
  8043d0:	85bff81e 	bne	r16,r22,8043b4 <__call_exitprocs+0x88>
  8043d4:	d8800217 	ldw	r2,8(sp)
  8043d8:	10003126 	beq	r2,zero,8044a0 <__call_exitprocs+0x174>
  8043dc:	dfc00c17 	ldw	ra,48(sp)
  8043e0:	df000b17 	ldw	fp,44(sp)
  8043e4:	ddc00a17 	ldw	r23,40(sp)
  8043e8:	dd800917 	ldw	r22,36(sp)
  8043ec:	dd400817 	ldw	r21,32(sp)
  8043f0:	dd000717 	ldw	r20,28(sp)
  8043f4:	dcc00617 	ldw	r19,24(sp)
  8043f8:	dc800517 	ldw	r18,20(sp)
  8043fc:	dc400417 	ldw	r17,16(sp)
  804400:	dc000317 	ldw	r16,12(sp)
  804404:	dec00d04 	addi	sp,sp,52
  804408:	f800283a 	ret
  80440c:	8409883a 	add	r4,r16,r16
  804410:	88c00117 	ldw	r3,4(r17)
  804414:	2105883a 	add	r2,r4,r4
  804418:	1445883a 	add	r2,r2,r17
  80441c:	18ffffc4 	addi	r3,r3,-1
  804420:	11800217 	ldw	r6,8(r2)
  804424:	1c001526 	beq	r3,r16,80447c <__call_exitprocs+0x150>
  804428:	10000215 	stw	zero,8(r2)
  80442c:	303fe726 	beq	r6,zero,8043cc <__call_exitprocs+0xa0>
  804430:	00c00044 	movi	r3,1
  804434:	1c06983a 	sll	r3,r3,r16
  804438:	90804017 	ldw	r2,256(r18)
  80443c:	8cc00117 	ldw	r19,4(r17)
  804440:	1884703a 	and	r2,r3,r2
  804444:	10001426 	beq	r2,zero,804498 <__call_exitprocs+0x16c>
  804448:	90804117 	ldw	r2,260(r18)
  80444c:	1884703a 	and	r2,r3,r2
  804450:	10000c1e 	bne	r2,zero,804484 <__call_exitprocs+0x158>
  804454:	2105883a 	add	r2,r4,r4
  804458:	1485883a 	add	r2,r2,r18
  80445c:	11400017 	ldw	r5,0(r2)
  804460:	e009883a 	mov	r4,fp
  804464:	303ee83a 	callr	r6
  804468:	88800117 	ldw	r2,4(r17)
  80446c:	98bfc81e 	bne	r19,r2,804390 <__call_exitprocs+0x64>
  804470:	b8800017 	ldw	r2,0(r23)
  804474:	147fd526 	beq	r2,r17,8043cc <__call_exitprocs+0xa0>
  804478:	003fc506 	br	804390 <__call_exitprocs+0x64>
  80447c:	8c000115 	stw	r16,4(r17)
  804480:	003fea06 	br	80442c <__call_exitprocs+0x100>
  804484:	2105883a 	add	r2,r4,r4
  804488:	1485883a 	add	r2,r2,r18
  80448c:	11000017 	ldw	r4,0(r2)
  804490:	303ee83a 	callr	r6
  804494:	003ff406 	br	804468 <__call_exitprocs+0x13c>
  804498:	303ee83a 	callr	r6
  80449c:	003ff206 	br	804468 <__call_exitprocs+0x13c>
  8044a0:	88800117 	ldw	r2,4(r17)
  8044a4:	1000081e 	bne	r2,zero,8044c8 <__call_exitprocs+0x19c>
  8044a8:	89000017 	ldw	r4,0(r17)
  8044ac:	20000726 	beq	r4,zero,8044cc <__call_exitprocs+0x1a0>
  8044b0:	b9000015 	stw	r4,0(r23)
  8044b4:	8809883a 	mov	r4,r17
  8044b8:	00000000 	call	0 <__reset-0x800000>
  8044bc:	bc400017 	ldw	r17,0(r23)
  8044c0:	883fb71e 	bne	r17,zero,8043a0 <__call_exitprocs+0x74>
  8044c4:	003fc506 	br	8043dc <__call_exitprocs+0xb0>
  8044c8:	89000017 	ldw	r4,0(r17)
  8044cc:	882f883a 	mov	r23,r17
  8044d0:	2023883a 	mov	r17,r4
  8044d4:	883fb21e 	bne	r17,zero,8043a0 <__call_exitprocs+0x74>
  8044d8:	003fc006 	br	8043dc <__call_exitprocs+0xb0>

008044dc <udivmodsi4>:
  8044dc:	29001b2e 	bgeu	r5,r4,80454c <udivmodsi4+0x70>
  8044e0:	28001a16 	blt	r5,zero,80454c <udivmodsi4+0x70>
  8044e4:	00800044 	movi	r2,1
  8044e8:	0007883a 	mov	r3,zero
  8044ec:	01c007c4 	movi	r7,31
  8044f0:	00000306 	br	804500 <udivmodsi4+0x24>
  8044f4:	19c01326 	beq	r3,r7,804544 <udivmodsi4+0x68>
  8044f8:	18c00044 	addi	r3,r3,1
  8044fc:	28000416 	blt	r5,zero,804510 <udivmodsi4+0x34>
  804500:	294b883a 	add	r5,r5,r5
  804504:	1085883a 	add	r2,r2,r2
  804508:	293ffa36 	bltu	r5,r4,8044f4 <udivmodsi4+0x18>
  80450c:	10000d26 	beq	r2,zero,804544 <udivmodsi4+0x68>
  804510:	0007883a 	mov	r3,zero
  804514:	21400236 	bltu	r4,r5,804520 <udivmodsi4+0x44>
  804518:	2149c83a 	sub	r4,r4,r5
  80451c:	1886b03a 	or	r3,r3,r2
  804520:	1004d07a 	srli	r2,r2,1
  804524:	280ad07a 	srli	r5,r5,1
  804528:	103ffa1e 	bne	r2,zero,804514 <udivmodsi4+0x38>
  80452c:	30000226 	beq	r6,zero,804538 <udivmodsi4+0x5c>
  804530:	2005883a 	mov	r2,r4
  804534:	f800283a 	ret
  804538:	1809883a 	mov	r4,r3
  80453c:	2005883a 	mov	r2,r4
  804540:	f800283a 	ret
  804544:	0007883a 	mov	r3,zero
  804548:	003ff806 	br	80452c <udivmodsi4+0x50>
  80454c:	00800044 	movi	r2,1
  804550:	0007883a 	mov	r3,zero
  804554:	003fef06 	br	804514 <udivmodsi4+0x38>

00804558 <__divsi3>:
  804558:	defffe04 	addi	sp,sp,-8
  80455c:	dc000015 	stw	r16,0(sp)
  804560:	dfc00115 	stw	ra,4(sp)
  804564:	0021883a 	mov	r16,zero
  804568:	20000c16 	blt	r4,zero,80459c <__divsi3+0x44>
  80456c:	000d883a 	mov	r6,zero
  804570:	28000e16 	blt	r5,zero,8045ac <__divsi3+0x54>
  804574:	08044dc0 	call	8044dc <udivmodsi4>
  804578:	1007883a 	mov	r3,r2
  80457c:	8005003a 	cmpeq	r2,r16,zero
  804580:	1000011e 	bne	r2,zero,804588 <__divsi3+0x30>
  804584:	00c7c83a 	sub	r3,zero,r3
  804588:	1805883a 	mov	r2,r3
  80458c:	dfc00117 	ldw	ra,4(sp)
  804590:	dc000017 	ldw	r16,0(sp)
  804594:	dec00204 	addi	sp,sp,8
  804598:	f800283a 	ret
  80459c:	0109c83a 	sub	r4,zero,r4
  8045a0:	04000044 	movi	r16,1
  8045a4:	000d883a 	mov	r6,zero
  8045a8:	283ff20e 	bge	r5,zero,804574 <__divsi3+0x1c>
  8045ac:	014bc83a 	sub	r5,zero,r5
  8045b0:	8021003a 	cmpeq	r16,r16,zero
  8045b4:	003fef06 	br	804574 <__divsi3+0x1c>

008045b8 <__modsi3>:
  8045b8:	deffff04 	addi	sp,sp,-4
  8045bc:	dfc00015 	stw	ra,0(sp)
  8045c0:	01800044 	movi	r6,1
  8045c4:	2807883a 	mov	r3,r5
  8045c8:	20000416 	blt	r4,zero,8045dc <__modsi3+0x24>
  8045cc:	28000c16 	blt	r5,zero,804600 <__modsi3+0x48>
  8045d0:	dfc00017 	ldw	ra,0(sp)
  8045d4:	dec00104 	addi	sp,sp,4
  8045d8:	08044dc1 	jmpi	8044dc <udivmodsi4>
  8045dc:	0109c83a 	sub	r4,zero,r4
  8045e0:	28000b16 	blt	r5,zero,804610 <__modsi3+0x58>
  8045e4:	180b883a 	mov	r5,r3
  8045e8:	01800044 	movi	r6,1
  8045ec:	08044dc0 	call	8044dc <udivmodsi4>
  8045f0:	0085c83a 	sub	r2,zero,r2
  8045f4:	dfc00017 	ldw	ra,0(sp)
  8045f8:	dec00104 	addi	sp,sp,4
  8045fc:	f800283a 	ret
  804600:	014bc83a 	sub	r5,zero,r5
  804604:	dfc00017 	ldw	ra,0(sp)
  804608:	dec00104 	addi	sp,sp,4
  80460c:	08044dc1 	jmpi	8044dc <udivmodsi4>
  804610:	0147c83a 	sub	r3,zero,r5
  804614:	003ff306 	br	8045e4 <__modsi3+0x2c>

00804618 <__udivsi3>:
  804618:	000d883a 	mov	r6,zero
  80461c:	08044dc1 	jmpi	8044dc <udivmodsi4>

00804620 <__umodsi3>:
  804620:	01800044 	movi	r6,1
  804624:	08044dc1 	jmpi	8044dc <udivmodsi4>

00804628 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  804628:	defffd04 	addi	sp,sp,-12
  80462c:	df000215 	stw	fp,8(sp)
  804630:	df000204 	addi	fp,sp,8
  804634:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  804638:	e0bfff17 	ldw	r2,-4(fp)
  80463c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804640:	e0bffe17 	ldw	r2,-8(fp)
  804644:	1005003a 	cmpeq	r2,r2,zero
  804648:	1000021e 	bne	r2,zero,804654 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80464c:	002af070 	cmpltui	zero,zero,43969
  804650:	00000106 	br	804658 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  804654:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  804658:	e037883a 	mov	sp,fp
  80465c:	df000017 	ldw	fp,0(sp)
  804660:	dec00104 	addi	sp,sp,4
  804664:	f800283a 	ret

00804668 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  804668:	defffd04 	addi	sp,sp,-12
  80466c:	dfc00215 	stw	ra,8(sp)
  804670:	df000115 	stw	fp,4(sp)
  804674:	df000104 	addi	fp,sp,4
  804678:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80467c:	e13fff17 	ldw	r4,-4(fp)
  804680:	08046280 	call	804628 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804684:	003fff06 	br	804684 <_exit+0x1c>
  804688:	00804328 	cmpgeui	r2,zero,268
