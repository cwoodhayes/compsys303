
cs303_a1.elf:     file format elf32-littlenios2
cs303_a1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010428 memsz 0x00010428 flags r-x
    LOAD off    0x00011448 vaddr 0x00810448 paddr 0x008120dc align 2**12
         filesz 0x00001c94 memsz 0x00001c94 flags rw-
    LOAD off    0x00013d70 vaddr 0x00813d70 paddr 0x00813d70 align 2**12
         filesz 0x00000000 memsz 0x00000344 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fbc0  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006d4  0080fd74  0080fd74  00010d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c94  00810448  008120dc  00011448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000344  00813d70  00813d70  00013d70  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000130dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f58  00000000  00000000  00013100  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000194f  00000000  00000000  00014058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f09b  00000000  00000000  000159a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009c1b  00000000  00000000  00044a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018366  00000000  00000000  0004e65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020f4  00000000  00000000  000669c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000274e  00000000  00000000  00068ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d737  00000000  00000000  0006b206  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00078940  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  000789a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007cf92  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0007cf95  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007cf98  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007cf99  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007cf9a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007cf9e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007cfa2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007cfa6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007cfaf  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007cfb8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0007cfc1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000d  00000000  00000000  0007cfc7  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062390  00000000  00000000  0007cfd4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080fd74 l    d  .rodata	00000000 .rodata
00810448 l    d  .rwdata	00000000 .rwdata
00813d70 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tlc.c
00813d70 l     O .bss	00000004 tlc_timer_event
00813d74 l     O .bss	00000004 camera_timer_event
00813d78 l     O .bss	00000004 pedestrianNS
00813d7c l     O .bss	00000004 pedestrianEW
00813d80 l     O .bss	00000004 vehicle_detected
00810448 l     O .rwdata	00000018 timeout
00810460 l     O .rwdata	0000001c timeout_buf
0081208c l     O .rwdata	00000006 traffic_lights
00813d84 l     O .bss	00000004 mode
0081047c l     O .rwdata	00000010 proc_state
00813dcc l     O .bss	00000018 tlc_timer
00813d88 l     O .bss	00000004 state.2924
00813d8c l     O .bss	00000004 state.3019
00813de4 l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 lib2-divmod.c
00800e34 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801414 l     F .text	00000058 std
00801520 l     F .text	00000008 __fp_lock
00801528 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0081048c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
008030ac l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
008035c0 l     F .text	00000058 __sprint_r
0080fee8 l     O .rodata	00000010 blanks.3452
0080fed8 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0080fffc l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
0080570c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
008120ac l     O .rwdata	00000004 charset
0081019c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
008102e4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00809f28 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080b8d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080b930 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ba30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080bd10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080bdf0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080bf4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080c058 l     F .text	000000dc alt_file_locked
0080c2bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080c43c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008120cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080c87c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810e48 l     O .rwdata	00001060 jtag_uart
00811ea8 l     O .rwdata	00000120 lcd
00811fc8 l     O .rwdata	000000c4 uart
0080c9a4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080cbe4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080ce0c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008120d8 l     O .rwdata	00000004 colstart
0080d488 l     F .text	000000b8 lcd_write_command
0080d540 l     F .text	000000d4 lcd_write_data
0080d614 l     F .text	000000c4 lcd_clear_screen
0080d6d8 l     F .text	000001ec lcd_repaint_screen
0080d8c4 l     F .text	000000c8 lcd_scroll_up
0080d98c l     F .text	000002d0 lcd_handle_escape
0080e168 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080e3c8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080e688 l     F .text	0000009c altera_avalon_uart_irq
0080e724 l     F .text	000000e0 altera_avalon_uart_rxirq
0080e804 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080ebf0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080ee18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080ef70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f600 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080fb5c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080fd10 l     F .text	00000040 alt_sim_halt
00802e10 g     F .text	0000001c putchar
00807c30 g     F .text	00000094 _mprec_log10
008002a4 g     F .text	00000078 lcd_set_mode
00807d1c g     F .text	00000088 __any_on
00807414 g     F .text	00000070 _isatty_r
008102bc g     O .rodata	00000028 __mprec_tinytens
0080bfac g     F .text	0000006c alt_main
00802e34 g     F .text	000000a0 _puts_r
00813e24 g     O .bss	00000100 alt_irq
00807548 g     F .text	00000078 _lseek_r
00800b88 g     F .text	0000001c clear_vehicle_detected
008120dc g       *ABS*	00000000 __flash_rwdata_start
00806ed8 g     F .text	000000a0 __sflags
0080aa48 g     F .text	00000088 __eqdf2
008140b4 g       *ABS*	00000000 __alt_heap_start
00802d98 g     F .text	00000044 printf
008031a0 g     F .text	00000068 __sseek
0080147c g     F .text	000000a4 __sinit
0080919c g     F .text	00000130 __swbuf_r
008074a8 g     F .text	00000084 _setlocale_r
0080157c g     F .text	00000068 __sfmoreglue
0080c038 g     F .text	00000020 __malloc_unlock
00807744 g     F .text	000000e0 memmove
00800bc0 g     F .text	0000001c is_vehicle_detected
0080156c g     F .text	00000010 _cleanup
00807da4 g     F .text	000000bc _Balloc
00800908 g     F .text	00000080 buffer_timeout
0080ab58 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008020e4 g     F .text	00000074 _fstat_r
00813d98 g     O .bss	00000004 errno
00803114 g     F .text	00000014 __srget
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00813dbc g     O .bss	00000004 alt_argv
0081a08c g       *ABS*	00000000 _gp
0080f73c g     F .text	00000030 usleep
008004dc g     F .text	00000038 tlc_timer_isr
00810cc8 g     O .rwdata	00000180 alt_fd_list
00802e2c g     F .text	00000008 _putchar_r
0080f098 g     F .text	00000094 alt_find_dev
008076a4 g     F .text	000000a0 memcpy
00800af4 g     F .text	00000038 camera_timer_isr
00801560 g     F .text	0000000c _cleanup_r
0080acf0 g     F .text	000000f8 __floatsidf
0080f6c4 g     F .text	00000078 alt_io_redirect
0080ac68 g     F .text	00000088 __ltdf2
0080fd74 g       *ABS*	00000000 __DTOR_END__
00802ed4 g     F .text	00000014 puts
00807b80 g     F .text	000000b0 __ratio
00800568 g     F .text	000001dc pedestrian_tlc
0080d024 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00802ddc g     F .text	00000034 _printf_r
00800f70 g     F .text	00000008 __udivsi3
0080bc50 g     F .text	000000c0 isatty
008101cc g     O .rodata	000000c8 __mprec_tens
00807484 g     F .text	00000008 __locale_charset
00800bdc g     F .text	0000001c is_vehicle_left
0080f8d8 g     F .text	00000090 alt_icache_flush
00813d9c g     O .bss	00000004 __malloc_top_pad
008120a8 g     O .rwdata	00000004 __mb_cur_max
0080748c g     F .text	0000000c _localeconv_r
0080849c g     F .text	0000003c __i2b
00806f78 g     F .text	0000049c __sfvwrite_r
00803128 g     F .text	00000070 _sbrk_r
008007a0 g     F .text	00000050 configurable_tlc
00808a04 g     F .text	00000078 _read_r
00810c94 g     O .rwdata	0000000c __lc_ctype
008120c0 g     O .rwdata	00000004 alt_max_fd
0080b480 g     F .text	00000138 __unpack_d
00800f98 g     F .text	00000110 _fclose_r
008012b8 g     F .text	00000034 fflush
00800b6c g     F .text	0000001c handle_vehicle_button
00813da0 g     O .bss	00000004 __malloc_max_sbrked_mem
0080ba90 g     F .text	000001c0 alt_irq_register
00801384 g     F .text	00000090 _fgetc_r
0080a3b8 g     F .text	00000074 __adddf3
00807a60 g     F .text	00000120 __b2d
00809978 g     F .text	000005b0 __umoddi3
0080be5c g     F .text	000000f0 lseek
00812098 g     O .rwdata	00000004 _global_impure_ptr
00808a7c g     F .text	000005f4 _realloc_r
008140b4 g       *ABS*	00000000 __bss_end
0080f508 g     F .text	000000f8 alt_iic_isr_register
0080c650 g     F .text	0000010c alt_tick
0080939c g     F .text	000005dc __udivdi3
00810294 g     O .rodata	00000028 __mprec_bigtens
008086f8 g     F .text	00000120 __s2b
0080aec0 g     F .text	00000194 __floatunsidf
00807980 g     F .text	00000060 __mcmp
0080e5c0 g     F .text	000000c8 altera_avalon_uart_init
008120a4 g     O .rwdata	00000004 __ctype_ptr
00801548 g     F .text	00000018 __fp_lock_all
0080f4c0 g     F .text	00000048 alt_ic_irq_enabled
0080c5b8 g     F .text	00000098 alt_alarm_stop
00800b2c g     F .text	00000040 camera_tlc
0080359c g     F .text	00000024 strtol
00813db4 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00810ca0 g     O .rwdata	00000028 alt_dev_null
0080ee78 g     F .text	00000044 alt_dcache_flush_all
0080784c g     F .text	00000070 __hi0bits
0080ade8 g     F .text	000000d8 __fixdfsi
008120dc g       *ABS*	00000000 __ram_rwdata_end
008120b8 g     O .rwdata	00000008 alt_dev_list
0080c75c g     F .text	00000120 write
0080891c g     F .text	000000e8 _putc_r
00810448 g       *ABS*	00000000 __ram_rodata_end
0080b95c g     F .text	000000d4 fstat
008017e4 g     F .text	0000002c fprintf
008085d8 g     F .text	00000120 __pow5mult
00813da8 g     O .bss	00000004 __nlocale_changed
00800f78 g     F .text	00000008 __umodsi3
008140b4 g       *ABS*	00000000 end
0080dc5c g     F .text	0000050c altera_avalon_lcd_16207_write
00800f80 g     F .text	0000000c _atoi_r
0080ec50 g     F .text	000001c8 altera_avalon_uart_write
008020c0 g     F .text	00000024 fseek
0080cb24 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080fd70 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080e438 g     F .text	00000090 alt_avalon_timer_sc_init
0080e520 g     F .text	00000058 altera_avalon_uart_write_fd
0080b0ec g     F .text	00000080 __clzsi2
0080e578 g     F .text	00000048 altera_avalon_uart_close_fd
0080d248 g     F .text	00000240 altera_avalon_jtag_uart_write
0080146c g     F .text	00000004 __sfp_lock_acquire
008075c0 g     F .text	000000e4 memchr
00803618 g     F .text	00001eac ___vfprintf_internal_r
00801970 g     F .text	00000314 _free_r
0080fb60 g     F .text	000001b0 __call_exitprocs
008030c8 g     F .text	0000004c __srget_r
00813dac g     O .bss	00000004 __mlocale_changed
008120a0 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00813dc4 g     O .bss	00000004 _alt_tick_rate
00808168 g     F .text	0000014c __lshift
00813dc8 g     O .bss	00000004 _alt_nticks
0080c31c g     F .text	00000120 read
0080c910 g     F .text	00000094 alt_sys_init
00802d20 g     F .text	00000078 _open_r
0080fa28 g     F .text	00000134 __register_exitproc
00813d90 g     O .bss	00000004 uart_fp
008082b4 g     F .text	000001e8 __multiply
0080cebc g     F .text	00000074 altera_avalon_jtag_uart_close
00810448 g       *ABS*	00000000 __ram_rwdata_start
0080fd74 g       *ABS*	00000000 __ram_rodata_start
00813dfc g     O .bss	00000028 __malloc_current_mallinfo
00807e60 g     F .text	0000017c __d2b
0080c9dc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080f24c g     F .text	000000b8 alt_get_fd
0080f78c g     F .text	0000014c alt_busy_sleep
0080b5b8 g     F .text	000000c8 __fpcmp_parts_d
0080569c g     F .text	00000070 _close_r
0080f9b4 g     F .text	00000074 memcmp
0080ca8c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008140b4 g       *ABS*	00000000 __alt_stack_base
0080cad4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008022d8 g     F .text	0000009c _fwrite_r
00805560 g     F .text	0000013c __swsetup_r
0080a7f0 g     F .text	00000258 __divdf3
008015e4 g     F .text	000000f0 __sfp
00807cc4 g     F .text	00000058 __copybits
0081088c g     O .rwdata	00000408 __malloc_av_
00801478 g     F .text	00000004 __sinit_lock_release
0080a42c g     F .text	000003c4 __muldf3
00803284 g     F .text	00000060 __sread
0080f12c g     F .text	00000120 alt_find_file
0080eebc g     F .text	000000b4 alt_dev_llist_insert
0080c018 g     F .text	00000020 __malloc_lock
00801810 g     F .text	00000034 _fprintf_r
0080c4fc g     F .text	000000bc sbrk
008010bc g     F .text	000001fc _fflush_r
008092e8 g     F .text	000000b4 _calloc_r
008017c8 g     F .text	0000001c fopen
00813d70 g       *ABS*	00000000 __bss_start
00802c88 g     F .text	00000098 memset
00800d48 g     F .text	000000ec main
00813dc0 g     O .bss	00000004 alt_envp
00813da4 g     O .bss	00000004 __malloc_max_total_mem
0080ca34 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008092cc g     F .text	0000001c __swbuf
0080e234 g     F .text	0000013c altera_avalon_lcd_16207_init
008007f0 g     F .text	00000064 config_tlc
00803198 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008010a8 g     F .text	00000014 fclose
00803358 g     F .text	00000244 _strtol_r
00813f24 g     O .bss	00000190 _atexit0
0080031c g     F .text	00000028 buttons_driver
00805924 g     F .text	000015b4 _dtoa_r
00802548 g     F .text	00000740 _malloc_r
008120c4 g     O .rwdata	00000004 alt_errno
00800744 g     F .text	0000005c NSEW_ped_isr
00802220 g     F .text	000000b8 _fwalk
00808818 g     F .text	00000104 putc
00800eb0 g     F .text	00000060 __divsi3
008102f0 g     O .rodata	00000014 __thenan_df
00801844 g     F .text	0000012c _malloc_trim_r
00800988 g     F .text	0000016c update_timeout
0080fd74 g       *ABS*	00000000 __CTOR_END__
008090e0 g     F .text	000000bc strcmp
0080fd74 g       *ABS*	00000000 __flash_rodata_start
0080fd74 g       *ABS*	00000000 __DTOR_LIST__
0080aad0 g     F .text	00000088 __nedf2
0080c8dc g     F .text	00000034 alt_irq_init
0080c49c g     F .text	00000060 alt_release_fd
008012ec g     F .text	00000098 fgetc
00810304 g     O .rodata	00000100 __clz_tab
00813db0 g     O .bss	00000004 _PathLocale
00800bf8 g     F .text	00000150 update_traffic_lights
0080f968 g     F .text	00000014 atexit
008054e8 g     F .text	00000078 _write_r
0080752c g     F .text	0000001c setlocale
00812094 g     O .rwdata	00000004 _impure_ptr
00813d94 g     O .bss	00000004 lcd_fp
00813db8 g     O .bss	00000004 alt_argc
0080f034 g     F .text	00000064 _do_dtors
00801c84 g     F .text	0000043c _fseek_r
00800854 g     F .text	000000b4 timeout_data_handler
00802ee8 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
008079e0 g     F .text	00000080 __ulp
00809070 g     F .text	00000040 __isinfd
00801530 g     F .text	00000018 __fp_unlock_all
0080e370 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
008120b0 g     O .rwdata	00000008 alt_fs_list
00800ba4 g     F .text	0000001c vehicle_checked
00800020 g       *ABS*	00000000 __ram_exceptions_start
00807498 g     F .text	00000010 localeconv
0080f334 g     F .text	00000050 alt_ic_isr_register
00802374 g     F .text	00000040 fwrite
008120dc g       *ABS*	00000000 _edata
0080e4c8 g     F .text	00000058 altera_avalon_uart_read_fd
008140b4 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080cf30 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080f420 g     F .text	000000a0 alt_ic_irq_disable
00803208 g     F .text	0000007c __swrite
0081209c g     O .rwdata	00000004 __malloc_trim_threshold
0080f76c g     F .text	00000020 altera_nios2_qsys_irq_init
0080f97c g     F .text	00000038 exit
00802158 g     F .text	000000c8 _fwalk_reent
00807fdc g     F .text	0000018c __mdiff
00800344 g     F .text	00000198 simple_tlc
00800f10 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00801470 g     F .text	00000004 __sfp_lock_release
00800f8c g     F .text	0000000c atoi
00800200 g     F .text	000000a4 init_tlc
0080fef8 g     O .rodata	00000101 _ctype_
0080e960 g     F .text	00000060 altera_avalon_uart_close
008016d4 g     F .text	000000f4 _fopen_r
0080fd50 g     F .text	00000020 _exit
008090b0 g     F .text	00000030 __isnand
0080b680 g     F .text	00000154 alt_alarm_start
0080b054 g     F .text	00000098 __muldi3
008023b4 g     F .text	00000194 __smakebuf_r
008032e4 g     F .text	00000074 strlen
0080c134 g     F .text	00000188 open
0080abe0 g     F .text	00000088 __gedf2
0080f304 g     F .text	00000030 alt_icache_flush_all
008120c8 g     O .rwdata	00000004 alt_priority_mask
0080f384 g     F .text	0000009c alt_ic_irq_enable
008054c4 g     F .text	00000024 __vfprintf_internal
0080e9c0 g     F .text	00000230 altera_avalon_uart_read
0080a338 g     F .text	00000080 __subdf3
008078bc g     F .text	000000c4 __lo0bits
008120d0 g     O .rwdata	00000008 alt_alarm_list
0080efd0 g     F .text	00000064 _do_ctors
0080b7d4 g     F .text	000000fc close
00800514 g     F .text	00000054 init_buttons_pio
0080bd70 g     F .text	00000080 alt_load
0080b16c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00801474 g     F .text	00000004 __sinit_lock_acquire
008084d8 g     F .text	00000100 __multadd
00807824 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18cf8904 	addi	r3,r3,15908
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18cf8904 	addi	r3,r3,15908
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6a82314 	ori	gp,gp,41100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	108f5c14 	ori	r2,r2,15728

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18d02d14 	ori	r3,r3,16564

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080bd700 	call	80bd70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080bfac0 	call	80bfac <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int proc_state[OPERATION_MODES + 1] = {-1, -1, -1, -1};

// Initialize the traffic light controller
// for any / all modes
void init_tlc(void)
{
  800200:	defffe04 	addi	sp,sp,-8
  800204:	dfc00115 	stw	ra,4(sp)
  800208:	df000015 	stw	fp,0(sp)
  80020c:	d839883a 	mov	fp,sp
	printf("Initializing TLC...\n");
  800210:	01002074 	movhi	r4,129
  800214:	213f5d04 	addi	r4,r4,-652
  800218:	0802ed40 	call	802ed4 <puts>
	//start the TLC timer
	alt_alarm_stop(&tlc_timer);
  80021c:	01002074 	movhi	r4,129
  800220:	210f7304 	addi	r4,r4,15820
  800224:	080c5b80 	call	80c5b8 <alt_alarm_stop>
	alt_alarm_start(&tlc_timer, timeout[proc_state[mode]], tlc_timer_isr, &tlc_timer_event);
  800228:	d0a73e17 	ldw	r2,-25352(gp)
  80022c:	00c02074 	movhi	r3,129
  800230:	18c11f04 	addi	r3,r3,1148
  800234:	1085883a 	add	r2,r2,r2
  800238:	1085883a 	add	r2,r2,r2
  80023c:	10c5883a 	add	r2,r2,r3
  800240:	10800017 	ldw	r2,0(r2)
  800244:	00c02074 	movhi	r3,129
  800248:	18c11204 	addi	r3,r3,1096
  80024c:	1085883a 	add	r2,r2,r2
  800250:	1085883a 	add	r2,r2,r2
  800254:	10c5883a 	add	r2,r2,r3
  800258:	11400017 	ldw	r5,0(r2)
  80025c:	01002074 	movhi	r4,129
  800260:	210f7304 	addi	r4,r4,15820
  800264:	01802034 	movhi	r6,128
  800268:	31813704 	addi	r6,r6,1244
  80026c:	d1e73904 	addi	r7,gp,-25372
  800270:	080b6800 	call	80b680 <alt_alarm_start>
	//get the initial mode from the switches
	mode = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3;
  800274:	00804074 	movhi	r2,257
  800278:	10842404 	addi	r2,r2,4240
  80027c:	10800037 	ldwio	r2,0(r2)
  800280:	108000cc 	andi	r2,r2,3
  800284:	d0a73e15 	stw	r2,-25352(gp)
	lcd_set_mode(mode);
  800288:	d1273e17 	ldw	r4,-25352(gp)
  80028c:	08002a40 	call	8002a4 <lcd_set_mode>
}
  800290:	e037883a 	mov	sp,fp
  800294:	dfc00117 	ldw	ra,4(sp)
  800298:	df000017 	ldw	fp,0(sp)
  80029c:	dec00204 	addi	sp,sp,8
  8002a0:	f800283a 	ret

008002a4 <lcd_set_mode>:
/* DESCRIPTION: Writes the mode to the LCD screen
 * PARAMETER:   mode - the current mode
 * RETURNS:     none
 */
void lcd_set_mode(unsigned int mode)
{
  8002a4:	defffd04 	addi	sp,sp,-12
  8002a8:	dfc00215 	stw	ra,8(sp)
  8002ac:	df000115 	stw	fp,4(sp)
  8002b0:	df000104 	addi	fp,sp,4
  8002b4:	e13fff15 	stw	r4,-4(fp)

	lcd_fp = fopen(LCD_NAME, "w");
  8002b8:	01002074 	movhi	r4,129
  8002bc:	213f6204 	addi	r4,r4,-632
  8002c0:	01402074 	movhi	r5,129
  8002c4:	297f6504 	addi	r5,r5,-620
  8002c8:	08017c80 	call	8017c8 <fopen>
  8002cc:	d0a74215 	stw	r2,-25336(gp)
	fprintf(lcd_fp, "\x1B[2J");
  8002d0:	d1e74217 	ldw	r7,-25336(gp)
  8002d4:	01002074 	movhi	r4,129
  8002d8:	213f6604 	addi	r4,r4,-616
  8002dc:	01400044 	movi	r5,1
  8002e0:	01800104 	movi	r6,4
  8002e4:	08023740 	call	802374 <fwrite>
	fprintf(lcd_fp, "TLC Mode: %d", mode+1);
  8002e8:	d1274217 	ldw	r4,-25336(gp)
  8002ec:	e0bfff17 	ldw	r2,-4(fp)
  8002f0:	11800044 	addi	r6,r2,1
  8002f4:	01402074 	movhi	r5,129
  8002f8:	297f6804 	addi	r5,r5,-608
  8002fc:	08017e40 	call	8017e4 <fprintf>
	fclose(lcd_fp);
  800300:	d1274217 	ldw	r4,-25336(gp)
  800304:	08010a80 	call	8010a8 <fclose>
}
  800308:	e037883a 	mov	sp,fp
  80030c:	dfc00117 	ldw	ra,4(sp)
  800310:	df000017 	ldw	fp,0(sp)
  800314:	dec00204 	addi	sp,sp,8
  800318:	f800283a 	ret

0080031c <buttons_driver>:
/* DESCRIPTION: Performs button-press detection and debouncing
 * PARAMETER:   button - referenced argument to indicate the state of the button
 * RETURNS:     none
 */
void buttons_driver(int* button)
{
  80031c:	defffe04 	addi	sp,sp,-8
  800320:	df000115 	stw	fp,4(sp)
  800324:	df000104 	addi	fp,sp,4
  800328:	e13fff15 	stw	r4,-4(fp)
	// Persistant state of 'buttons_driver'
	static int state = 0;

	*button = 0;	// no assumption is made on intial value of *button
  80032c:	e0bfff17 	ldw	r2,-4(fp)
  800330:	10000015 	stw	zero,0(r2)
	// Debounce state machine
	// call handle_mode_button()
}
  800334:	e037883a 	mov	sp,fp
  800338:	df000017 	ldw	fp,0(sp)
  80033c:	dec00104 	addi	sp,sp,4
  800340:	f800283a 	ret

00800344 <simple_tlc>:
/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state)
{
  800344:	defffb04 	addi	sp,sp,-20
  800348:	dfc00415 	stw	ra,16(sp)
  80034c:	df000315 	stw	fp,12(sp)
  800350:	df000304 	addi	fp,sp,12
  800354:	e13ffd15 	stw	r4,-12(fp)
	if (*state == -1) {
  800358:	e0bffd17 	ldw	r2,-12(fp)
  80035c:	10800017 	ldw	r2,0(r2)
  800360:	10bfffd8 	cmpnei	r2,r2,-1
  800364:	1000071e 	bne	r2,zero,800384 <simple_tlc+0x40>
		// Process initialization state
		init_tlc();
  800368:	08002000 	call	800200 <init_tlc>
		(*state)++;
  80036c:	e0bffd17 	ldw	r2,-12(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	10c00044 	addi	r3,r2,1
  800378:	e0bffd17 	ldw	r2,-12(fp)
  80037c:	10c00015 	stw	r3,0(r2)
		return;
  800380:	00005106 	br	8004c8 <simple_tlc+0x184>
	}

	// If the timeout has occured
	if (tlc_timer_event) {
  800384:	d0a73917 	ldw	r2,-25372(gp)
  800388:	1005003a 	cmpeq	r2,r2,zero
  80038c:	10004e1e 	bne	r2,zero,8004c8 <simple_tlc+0x184>
		alt_alarm_stop(&tlc_timer);
  800390:	01002074 	movhi	r4,129
  800394:	210f7304 	addi	r4,r4,15820
  800398:	080c5b80 	call	80c5b8 <alt_alarm_stop>
		tlc_timer_event = 0;
  80039c:	d0273915 	stw	zero,-25372(gp)
		switch(*state) {
  8003a0:	e0bffd17 	ldw	r2,-12(fp)
  8003a4:	10800017 	ldw	r2,0(r2)
  8003a8:	e0bffe15 	stw	r2,-8(fp)
  8003ac:	e0fffe17 	ldw	r3,-8(fp)
  8003b0:	18800228 	cmpgeui	r2,r3,8
  8003b4:	1000311e 	bne	r2,zero,80047c <simple_tlc+0x138>
  8003b8:	e13ffe17 	ldw	r4,-8(fp)
  8003bc:	e13ffe17 	ldw	r4,-8(fp)
  8003c0:	2105883a 	add	r2,r4,r4
  8003c4:	1087883a 	add	r3,r2,r2
  8003c8:	00802034 	movhi	r2,128
  8003cc:	1080f704 	addi	r2,r2,988
  8003d0:	1885883a 	add	r2,r3,r2
  8003d4:	10800017 	ldw	r2,0(r2)
  8003d8:	1000683a 	jmp	r2
  8003dc:	008003fc 	xorhi	r2,zero,15
  8003e0:	0080045c 	xori	r2,zero,17
  8003e4:	0080047c 	xorhi	r2,zero,17
  8003e8:	008003fc 	xorhi	r2,zero,15
  8003ec:	008003fc 	xorhi	r2,zero,15
  8003f0:	0080046c 	andhi	r2,zero,17
  8003f4:	0080047c 	xorhi	r2,zero,17
  8003f8:	008003fc 	xorhi	r2,zero,15
		case RR0:
		case YR:
		case RR1:
		case RY:
			*state = (*state+1)%8;
  8003fc:	e0bffd17 	ldw	r2,-12(fp)
  800400:	10800017 	ldw	r2,0(r2)
  800404:	10c00044 	addi	r3,r2,1
  800408:	00a00034 	movhi	r2,32768
  80040c:	108001c4 	addi	r2,r2,7
  800410:	1886703a 	and	r3,r3,r2
  800414:	e0ffff15 	stw	r3,-4(fp)
  800418:	e0ffff17 	ldw	r3,-4(fp)
  80041c:	1804403a 	cmpge	r2,r3,zero
  800420:	10000a1e 	bne	r2,zero,80044c <simple_tlc+0x108>
  800424:	e13fff17 	ldw	r4,-4(fp)
  800428:	213fffc4 	addi	r4,r4,-1
  80042c:	e13fff15 	stw	r4,-4(fp)
  800430:	00bffe04 	movi	r2,-8
  800434:	e0ffff17 	ldw	r3,-4(fp)
  800438:	1886b03a 	or	r3,r3,r2
  80043c:	e0ffff15 	stw	r3,-4(fp)
  800440:	e13fff17 	ldw	r4,-4(fp)
  800444:	21000044 	addi	r4,r4,1
  800448:	e13fff15 	stw	r4,-4(fp)
  80044c:	e0ffff17 	ldw	r3,-4(fp)
  800450:	e0bffd17 	ldw	r2,-12(fp)
  800454:	10c00015 	stw	r3,0(r2)
			break;
  800458:	00000d06 	br	800490 <simple_tlc+0x14c>
		case GR:
			*state = YR;
  80045c:	e0fffd17 	ldw	r3,-12(fp)
  800460:	008000c4 	movi	r2,3
  800464:	18800015 	stw	r2,0(r3)
			break;
  800468:	00000906 	br	800490 <simple_tlc+0x14c>
		case RG:
			*state = RY;
  80046c:	e0fffd17 	ldw	r3,-12(fp)
  800470:	008001c4 	movi	r2,7
  800474:	18800015 	stw	r2,0(r3)

			break;
  800478:	00000506 	br	800490 <simple_tlc+0x14c>
		default:
			printf("Error. Invalid state in mode 1 (s=%d)\n", *state);
  80047c:	e0bffd17 	ldw	r2,-12(fp)
  800480:	11400017 	ldw	r5,0(r2)
  800484:	01002074 	movhi	r4,129
  800488:	213f6c04 	addi	r4,r4,-592
  80048c:	0802d980 	call	802d98 <printf>
			break;
		}
		alt_alarm_start(&tlc_timer, timeout[*state], tlc_timer_isr, &tlc_timer_event);
  800490:	e0bffd17 	ldw	r2,-12(fp)
  800494:	10800017 	ldw	r2,0(r2)
  800498:	00c02074 	movhi	r3,129
  80049c:	18c11204 	addi	r3,r3,1096
  8004a0:	1085883a 	add	r2,r2,r2
  8004a4:	1085883a 	add	r2,r2,r2
  8004a8:	10c5883a 	add	r2,r2,r3
  8004ac:	11400017 	ldw	r5,0(r2)
  8004b0:	01002074 	movhi	r4,129
  8004b4:	210f7304 	addi	r4,r4,15820
  8004b8:	01802034 	movhi	r6,128
  8004bc:	31813704 	addi	r6,r6,1244
  8004c0:	d1e73904 	addi	r7,gp,-25372
  8004c4:	080b6800 	call	80b680 <alt_alarm_start>
	}
	/*
		// Increase state number (within bounds)
		// Restart timer with new timeout value
	*/
}
  8004c8:	e037883a 	mov	sp,fp
  8004cc:	dfc00117 	ldw	ra,4(sp)
  8004d0:	df000017 	ldw	fp,0(sp)
  8004d4:	dec00204 	addi	sp,sp,8
  8004d8:	f800283a 	ret

008004dc <tlc_timer_isr>:
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context)
{
  8004dc:	defffd04 	addi	sp,sp,-12
  8004e0:	df000215 	stw	fp,8(sp)
  8004e4:	df000204 	addi	fp,sp,8
  8004e8:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  8004ec:	e0bfff17 	ldw	r2,-4(fp)
  8004f0:	e0bffe15 	stw	r2,-8(fp)
	*trigger = 1;
  8004f4:	e0fffe17 	ldw	r3,-8(fp)
  8004f8:	00800044 	movi	r2,1
  8004fc:	18800015 	stw	r2,0(r3)
	return 0;
  800500:	0005883a 	mov	r2,zero
}
  800504:	e037883a 	mov	sp,fp
  800508:	df000017 	ldw	fp,0(sp)
  80050c:	dec00104 	addi	sp,sp,4
  800510:	f800283a 	ret

00800514 <init_buttons_pio>:
/* DESCRIPTION: Initialize the interrupts for all buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void)
{
  800514:	defffe04 	addi	sp,sp,-8
  800518:	dfc00115 	stw	ra,4(sp)
  80051c:	df000015 	stw	fp,0(sp)
  800520:	d839883a 	mov	fp,sp
	// clears the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800524:	00804074 	movhi	r2,257
  800528:	10842b04 	addi	r2,r2,4268
  80052c:	10000035 	stwio	zero,0(r2)
	// enable interrupts for all buttons
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0x3);
  800530:	00c04074 	movhi	r3,257
  800534:	18c42a04 	addi	r3,r3,4264
  800538:	008000c4 	movi	r2,3
  80053c:	18800035 	stwio	r2,0(r3)
	// register the ISR
	alt_irq_register(BUTTONS_IRQ, (void*) 0x0 , NSEW_ped_isr);
  800540:	01000104 	movi	r4,4
  800544:	000b883a 	mov	r5,zero
  800548:	01802034 	movhi	r6,128
  80054c:	3181d104 	addi	r6,r6,1860
  800550:	080ba900 	call	80ba90 <alt_irq_register>


}
  800554:	e037883a 	mov	sp,fp
  800558:	dfc00117 	ldw	ra,4(sp)
  80055c:	df000017 	ldw	fp,0(sp)
  800560:	dec00204 	addi	sp,sp,8
  800564:	f800283a 	ret

00800568 <pedestrian_tlc>:
/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state)
{
  800568:	defffc04 	addi	sp,sp,-16
  80056c:	dfc00315 	stw	ra,12(sp)
  800570:	df000215 	stw	fp,8(sp)
  800574:	df000204 	addi	fp,sp,8
  800578:	e13ffe15 	stw	r4,-8(fp)
	if (*state == -1) {
  80057c:	e0bffe17 	ldw	r2,-8(fp)
  800580:	10800017 	ldw	r2,0(r2)
  800584:	10bfffd8 	cmpnei	r2,r2,-1
  800588:	1000071e 	bne	r2,zero,8005a8 <pedestrian_tlc+0x40>
		// Process initialization state
		init_tlc();
  80058c:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800590:	e0bffe17 	ldw	r2,-8(fp)
  800594:	10800017 	ldw	r2,0(r2)
  800598:	10c00044 	addi	r3,r2,1
  80059c:	e0bffe17 	ldw	r2,-8(fp)
  8005a0:	10c00015 	stw	r3,0(r2)
		return;
  8005a4:	00006206 	br	800730 <pedestrian_tlc+0x1c8>
	}
	// Same as simple TLC
	// with additional states / signals for Pedestrian crossings

	// If the timeout has occured
	if (tlc_timer_event) {
  8005a8:	d0a73917 	ldw	r2,-25372(gp)
  8005ac:	1005003a 	cmpeq	r2,r2,zero
  8005b0:	10005f1e 	bne	r2,zero,800730 <pedestrian_tlc+0x1c8>
		alt_alarm_stop(&tlc_timer);
  8005b4:	01002074 	movhi	r4,129
  8005b8:	210f7304 	addi	r4,r4,15820
  8005bc:	080c5b80 	call	80c5b8 <alt_alarm_stop>
		tlc_timer_event = 0;
  8005c0:	d0273915 	stw	zero,-25372(gp)
		switch(*state) {
  8005c4:	e0bffe17 	ldw	r2,-8(fp)
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	e0bfff15 	stw	r2,-4(fp)
  8005d0:	e0ffff17 	ldw	r3,-4(fp)
  8005d4:	18800228 	cmpgeui	r2,r3,8
  8005d8:	1000381e 	bne	r2,zero,8006bc <pedestrian_tlc+0x154>
  8005dc:	e13fff17 	ldw	r4,-4(fp)
  8005e0:	e13fff17 	ldw	r4,-4(fp)
  8005e4:	2105883a 	add	r2,r4,r4
  8005e8:	1087883a 	add	r3,r2,r2
  8005ec:	00802034 	movhi	r2,128
  8005f0:	10818004 	addi	r2,r2,1536
  8005f4:	1885883a 	add	r2,r3,r2
  8005f8:	10800017 	ldw	r2,0(r2)
  8005fc:	1000683a 	jmp	r2
  800600:	00800620 	cmpeqi	r2,zero,24
  800604:	0080068c 	andi	r2,zero,26
  800608:	0080068c 	andi	r2,zero,26
  80060c:	0080069c 	xori	r2,zero,26
  800610:	00800650 	cmplti	r2,zero,25
  800614:	008006ac 	andhi	r2,zero,26
  800618:	008006ac 	andhi	r2,zero,26
  80061c:	00800680 	call	80068 <__alt_mem_sdram_controller-0x77ff98>
		case RR0:
			if (pedestrianNS) {
  800620:	d0a73b17 	ldw	r2,-25364(gp)
  800624:	1005003a 	cmpeq	r2,r2,zero
  800628:	1000051e 	bne	r2,zero,800640 <pedestrian_tlc+0xd8>
				*state = GR_p;
  80062c:	e0fffe17 	ldw	r3,-8(fp)
  800630:	00800084 	movi	r2,2
  800634:	18800015 	stw	r2,0(r3)
				pedestrianNS = 0;
  800638:	d0273b15 	stw	zero,-25364(gp)
  80063c:	00002406 	br	8006d0 <pedestrian_tlc+0x168>
			}
			else *state = GR;
  800640:	e0fffe17 	ldw	r3,-8(fp)
  800644:	00800044 	movi	r2,1
  800648:	18800015 	stw	r2,0(r3)
			break;
  80064c:	00002006 	br	8006d0 <pedestrian_tlc+0x168>
		case RR1:
			if (pedestrianEW) {
  800650:	d0a73c17 	ldw	r2,-25360(gp)
  800654:	1005003a 	cmpeq	r2,r2,zero
  800658:	1000051e 	bne	r2,zero,800670 <pedestrian_tlc+0x108>
				*state = RG_p;
  80065c:	e0fffe17 	ldw	r3,-8(fp)
  800660:	00800184 	movi	r2,6
  800664:	18800015 	stw	r2,0(r3)
				pedestrianEW = 0;
  800668:	d0273c15 	stw	zero,-25360(gp)
  80066c:	00001806 	br	8006d0 <pedestrian_tlc+0x168>
			}
			else *state = RG;
  800670:	e0fffe17 	ldw	r3,-8(fp)
  800674:	00800144 	movi	r2,5
  800678:	18800015 	stw	r2,0(r3)
			break;
  80067c:	00001406 	br	8006d0 <pedestrian_tlc+0x168>
		case RY: 		*state = RR0;			break;
  800680:	e0bffe17 	ldw	r2,-8(fp)
  800684:	10000015 	stw	zero,0(r2)
  800688:	00001106 	br	8006d0 <pedestrian_tlc+0x168>
		case GR_p:
		case GR:		*state = YR;			break;
  80068c:	e0fffe17 	ldw	r3,-8(fp)
  800690:	008000c4 	movi	r2,3
  800694:	18800015 	stw	r2,0(r3)
  800698:	00000d06 	br	8006d0 <pedestrian_tlc+0x168>
		case YR:		*state = RR1;			break;
  80069c:	e0fffe17 	ldw	r3,-8(fp)
  8006a0:	00800104 	movi	r2,4
  8006a4:	18800015 	stw	r2,0(r3)
  8006a8:	00000906 	br	8006d0 <pedestrian_tlc+0x168>
		case RG_p:
		case RG: 		*state = RY; 			break;
  8006ac:	e0fffe17 	ldw	r3,-8(fp)
  8006b0:	008001c4 	movi	r2,7
  8006b4:	18800015 	stw	r2,0(r3)
  8006b8:	00000506 	br	8006d0 <pedestrian_tlc+0x168>
		default:
			printf("Error. Invalid state in mode 2 (s=%d)\n", *state);
  8006bc:	e0bffe17 	ldw	r2,-8(fp)
  8006c0:	11400017 	ldw	r5,0(r2)
  8006c4:	01002074 	movhi	r4,129
  8006c8:	213f7604 	addi	r4,r4,-552
  8006cc:	0802d980 	call	802d98 <printf>
			break;
		}
		alt_alarm_start(&tlc_timer, timeout[*state], tlc_timer_isr, &tlc_timer_event);
  8006d0:	e0bffe17 	ldw	r2,-8(fp)
  8006d4:	10800017 	ldw	r2,0(r2)
  8006d8:	00c02074 	movhi	r3,129
  8006dc:	18c11204 	addi	r3,r3,1096
  8006e0:	1085883a 	add	r2,r2,r2
  8006e4:	1085883a 	add	r2,r2,r2
  8006e8:	10c5883a 	add	r2,r2,r3
  8006ec:	11400017 	ldw	r5,0(r2)
  8006f0:	01002074 	movhi	r4,129
  8006f4:	210f7304 	addi	r4,r4,15820
  8006f8:	01802034 	movhi	r6,128
  8006fc:	31813704 	addi	r6,r6,1244
  800700:	d1e73904 	addi	r7,gp,-25372
  800704:	080b6800 	call	80b680 <alt_alarm_start>
		printf("new state: %d\n", proc_state[mode]);
  800708:	d0a73e17 	ldw	r2,-25352(gp)
  80070c:	00c02074 	movhi	r3,129
  800710:	18c11f04 	addi	r3,r3,1148
  800714:	1085883a 	add	r2,r2,r2
  800718:	1085883a 	add	r2,r2,r2
  80071c:	10c5883a 	add	r2,r2,r3
  800720:	11400017 	ldw	r5,0(r2)
  800724:	01002074 	movhi	r4,129
  800728:	213f8004 	addi	r4,r4,-512
  80072c:	0802d980 	call	802d98 <printf>
	}

}
  800730:	e037883a 	mov	sp,fp
  800734:	dfc00117 	ldw	ra,4(sp)
  800738:	df000017 	ldw	fp,0(sp)
  80073c:	dec00204 	addi	sp,sp,8
  800740:	f800283a 	ret

00800744 <NSEW_ped_isr>:
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id)
{
  800744:	defffc04 	addi	sp,sp,-16
  800748:	df000315 	stw	fp,12(sp)
  80074c:	df000304 	addi	fp,sp,12
  800750:	e13ffe15 	stw	r4,-8(fp)
  800754:	e17fff15 	stw	r5,-4(fp)
	// NOTE:
	// Cast context to volatile to avoid unwanted compiler optimization.
	// Store the value in the Button's edge capture register in *context

	//our way:
	int buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800758:	00804074 	movhi	r2,257
  80075c:	10842804 	addi	r2,r2,4256
  800760:	10800037 	ldwio	r2,0(r2)
  800764:	e0bffd15 	stw	r2,-12(fp)
	pedestrianNS = (buttons >> 0) & 0x01;
  800768:	e0bffd17 	ldw	r2,-12(fp)
  80076c:	1080004c 	andi	r2,r2,1
  800770:	d0a73b15 	stw	r2,-25364(gp)
	pedestrianEW = (buttons >> 1) & 0x01;
  800774:	e0bffd17 	ldw	r2,-12(fp)
  800778:	1005d07a 	srai	r2,r2,1
  80077c:	1080004c 	andi	r2,r2,1
  800780:	d0a73c15 	stw	r2,-25360(gp)
	//set the edge cap register back to 0
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800784:	00804074 	movhi	r2,257
  800788:	10842b04 	addi	r2,r2,4268
  80078c:	10000035 	stwio	zero,0(r2)
	//printf("button pressed: %02x\n", buttons & 0x3);
}
  800790:	e037883a 	mov	sp,fp
  800794:	df000017 	ldw	fp,0(sp)
  800798:	dec00104 	addi	sp,sp,4
  80079c:	f800283a 	ret

008007a0 <configurable_tlc>:
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state)
{
  8007a0:	defffd04 	addi	sp,sp,-12
  8007a4:	dfc00215 	stw	ra,8(sp)
  8007a8:	df000115 	stw	fp,4(sp)
  8007ac:	df000104 	addi	fp,sp,4
  8007b0:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8007b4:	e0bfff17 	ldw	r2,-4(fp)
  8007b8:	10800017 	ldw	r2,0(r2)
  8007bc:	10bfffd8 	cmpnei	r2,r2,-1
  8007c0:	1000061e 	bne	r2,zero,8007dc <configurable_tlc+0x3c>
		// Process initialization state
		init_tlc();
  8007c4:	08002000 	call	800200 <init_tlc>
		(*state)++;
  8007c8:	e0bfff17 	ldw	r2,-4(fp)
  8007cc:	10800017 	ldw	r2,0(r2)
  8007d0:	10c00044 	addi	r3,r2,1
  8007d4:	e0bfff17 	ldw	r2,-4(fp)
  8007d8:	10c00015 	stw	r3,0(r2)
		return;
	}


}
  8007dc:	e037883a 	mov	sp,fp
  8007e0:	dfc00117 	ldw	ra,4(sp)
  8007e4:	df000017 	ldw	fp,0(sp)
  8007e8:	dec00204 	addi	sp,sp,8
  8007ec:	f800283a 	ret

008007f0 <config_tlc>:
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state)
{
  8007f0:	defffc04 	addi	sp,sp,-16
  8007f4:	dfc00315 	stw	ra,12(sp)
  8007f8:	df000215 	stw	fp,8(sp)
  8007fc:	df000204 	addi	fp,sp,8
  800800:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  800804:	e0bffe17 	ldw	r2,-8(fp)
  800808:	10800017 	ldw	r2,0(r2)
  80080c:	10bfffd8 	cmpnei	r2,r2,-1
  800810:	1000081e 	bne	r2,zero,800834 <config_tlc+0x44>
		// Process initialization state
		init_tlc();
  800814:	08002000 	call	800200 <init_tlc>
		(*tl_state)++;
  800818:	e0bffe17 	ldw	r2,-8(fp)
  80081c:	10800017 	ldw	r2,0(r2)
  800820:	10c00044 	addi	r3,r2,1
  800824:	e0bffe17 	ldw	r2,-8(fp)
  800828:	10c00015 	stw	r3,0(r2)
		return 0;
  80082c:	e03fff15 	stw	zero,-4(fp)
  800830:	00000206 	br	80083c <config_tlc+0x4c>
	}

	return state;
  800834:	d0a74017 	ldw	r2,-25344(gp)
  800838:	e0bfff15 	stw	r2,-4(fp)
  80083c:	e0bfff17 	ldw	r2,-4(fp)
}
  800840:	e037883a 	mov	sp,fp
  800844:	dfc00117 	ldw	ra,4(sp)
  800848:	df000017 	ldw	fp,0(sp)
  80084c:	dec00204 	addi	sp,sp,8
  800850:	f800283a 	ret

00800854 <timeout_data_handler>:
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void)
{
  800854:	defffc04 	addi	sp,sp,-16
  800858:	dfc00315 	stw	ra,12(sp)
  80085c:	df000215 	stw	fp,8(sp)
  800860:	df000204 	addi	fp,sp,8
	while(1) {
		char c;
		unsigned int num = 0;
  800864:	e03ffe15 	stw	zero,-8(fp)
		timeout_buf.index = 0;
  800868:	00802074 	movhi	r2,129
  80086c:	10811804 	addi	r2,r2,1120
  800870:	10000015 	stw	zero,0(r2)
		do {
			c = fgetc(uart_fp);
  800874:	d1274117 	ldw	r4,-25340(gp)
  800878:	08012ec0 	call	8012ec <fgetc>
  80087c:	e0bfff05 	stb	r2,-4(fp)
			if (c <= '9' && c >= '0') {
  800880:	e0bfff07 	ldb	r2,-4(fp)
  800884:	10800e88 	cmpgei	r2,r2,58
  800888:	10000d1e 	bne	r2,zero,8008c0 <timeout_data_handler+0x6c>
  80088c:	e0bfff07 	ldb	r2,-4(fp)
  800890:	10800c10 	cmplti	r2,r2,48
  800894:	10000a1e 	bne	r2,zero,8008c0 <timeout_data_handler+0x6c>
				num += atoi(c);
  800898:	e0bfff07 	ldb	r2,-4(fp)
  80089c:	1009883a 	mov	r4,r2
  8008a0:	0800f8c0 	call	800f8c <atoi>
  8008a4:	1007883a 	mov	r3,r2
  8008a8:	e0bffe17 	ldw	r2,-8(fp)
  8008ac:	10c5883a 	add	r2,r2,r3
  8008b0:	e0bffe15 	stw	r2,-8(fp)
				num *= 10;
  8008b4:	e0bffe17 	ldw	r2,-8(fp)
  8008b8:	108002a4 	muli	r2,r2,10
  8008bc:	e0bffe15 	stw	r2,-8(fp)
				//TODO: check for invalid number? (i.e., bigger than 4 digits)
			}
			if (c == ',') {
  8008c0:	e0bfff07 	ldb	r2,-4(fp)
  8008c4:	10800b18 	cmpnei	r2,r2,44
  8008c8:	1000031e 	bne	r2,zero,8008d8 <timeout_data_handler+0x84>
				buffer_timeout(num);
  8008cc:	e13ffe17 	ldw	r4,-8(fp)
  8008d0:	08009080 	call	800908 <buffer_timeout>
				num = 0;
  8008d4:	e03ffe15 	stw	zero,-8(fp)
			}
			//ignore \r
		} while (c != '\n');
  8008d8:	e0bfff07 	ldb	r2,-4(fp)
  8008dc:	10800298 	cmpnei	r2,r2,10
  8008e0:	103fe41e 	bne	r2,zero,800874 <timeout_data_handler+0x20>
		if (update_timeout()) return;
  8008e4:	08009880 	call	800988 <update_timeout>
  8008e8:	1004c03a 	cmpne	r2,r2,zero
  8008ec:	1000011e 	bne	r2,zero,8008f4 <timeout_data_handler+0xa0>
		else; //try again
	}
  8008f0:	003fdc06 	br	800864 <timeout_data_handler+0x10>
}
  8008f4:	e037883a 	mov	sp,fp
  8008f8:	dfc00117 	ldw	ra,4(sp)
  8008fc:	df000017 	ldw	fp,0(sp)
  800900:	dec00204 	addi	sp,sp,8
  800904:	f800283a 	ret

00800908 <buffer_timeout>:
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(unsigned int value)
{
  800908:	defffd04 	addi	sp,sp,-12
  80090c:	dfc00215 	stw	ra,8(sp)
  800910:	df000115 	stw	fp,4(sp)
  800914:	df000104 	addi	fp,sp,4
  800918:	e13fff15 	stw	r4,-4(fp)
	timeout_buf.timeout[timeout_buf.index] = value;
  80091c:	00802074 	movhi	r2,129
  800920:	10811804 	addi	r2,r2,1120
  800924:	10800017 	ldw	r2,0(r2)
  800928:	00c02074 	movhi	r3,129
  80092c:	18c11804 	addi	r3,r3,1120
  800930:	1085883a 	add	r2,r2,r2
  800934:	1085883a 	add	r2,r2,r2
  800938:	10c5883a 	add	r2,r2,r3
  80093c:	10c00104 	addi	r3,r2,4
  800940:	e0bfff17 	ldw	r2,-4(fp)
  800944:	18800015 	stw	r2,0(r3)
	timeout_buf.index = (timeout_buf.index+1)%sizeof(timeout_buf.timeout);
  800948:	00802074 	movhi	r2,129
  80094c:	10811804 	addi	r2,r2,1120
  800950:	10800017 	ldw	r2,0(r2)
  800954:	10800044 	addi	r2,r2,1
  800958:	1009883a 	mov	r4,r2
  80095c:	01400604 	movi	r5,24
  800960:	0800f780 	call	800f78 <__umodsi3>
  800964:	1007883a 	mov	r3,r2
  800968:	00802074 	movhi	r2,129
  80096c:	10811804 	addi	r2,r2,1120
  800970:	10c00015 	stw	r3,0(r2)
}
  800974:	e037883a 	mov	sp,fp
  800978:	dfc00117 	ldw	ra,4(sp)
  80097c:	df000017 	ldw	fp,0(sp)
  800980:	dec00204 	addi	sp,sp,8
  800984:	f800283a 	ret

00800988 <update_timeout>:
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void)
{
  800988:	defffb04 	addi	sp,sp,-20
  80098c:	dfc00415 	stw	ra,16(sp)
  800990:	df000315 	stw	fp,12(sp)
  800994:	df000304 	addi	fp,sp,12
	if (timeout_buf.index != sizeof(timeout_buf.timeout)-1) {
  800998:	00802074 	movhi	r2,129
  80099c:	10811804 	addi	r2,r2,1120
  8009a0:	10800017 	ldw	r2,0(r2)
  8009a4:	108005e0 	cmpeqi	r2,r2,23
  8009a8:	10001f1e 	bne	r2,zero,800a28 <update_timeout+0xa0>
		//We didn't receive 6 numbers.  Packet rx failure
		printf("Invalid packet received: ");
  8009ac:	01002074 	movhi	r4,129
  8009b0:	213f8404 	addi	r4,r4,-496
  8009b4:	0802d980 	call	802d98 <printf>
		int i=0;
  8009b8:	e03ffe15 	stw	zero,-8(fp)
		for (; i<timeout_buf.index; i++) {
  8009bc:	00000e06 	br	8009f8 <update_timeout+0x70>
			printf("%d,", timeout_buf.timeout[i]);
  8009c0:	e0bffe17 	ldw	r2,-8(fp)
  8009c4:	00c02074 	movhi	r3,129
  8009c8:	18c11804 	addi	r3,r3,1120
  8009cc:	1085883a 	add	r2,r2,r2
  8009d0:	1085883a 	add	r2,r2,r2
  8009d4:	10c5883a 	add	r2,r2,r3
  8009d8:	10800104 	addi	r2,r2,4
  8009dc:	11400017 	ldw	r5,0(r2)
  8009e0:	01002074 	movhi	r4,129
  8009e4:	213f8b04 	addi	r4,r4,-468
  8009e8:	0802d980 	call	802d98 <printf>
{
	if (timeout_buf.index != sizeof(timeout_buf.timeout)-1) {
		//We didn't receive 6 numbers.  Packet rx failure
		printf("Invalid packet received: ");
		int i=0;
		for (; i<timeout_buf.index; i++) {
  8009ec:	e0bffe17 	ldw	r2,-8(fp)
  8009f0:	10800044 	addi	r2,r2,1
  8009f4:	e0bffe15 	stw	r2,-8(fp)
  8009f8:	00802074 	movhi	r2,129
  8009fc:	10811804 	addi	r2,r2,1120
  800a00:	10c00017 	ldw	r3,0(r2)
  800a04:	e0bffe17 	ldw	r2,-8(fp)
  800a08:	10ffed16 	blt	r2,r3,8009c0 <update_timeout+0x38>
			printf("%d,", timeout_buf.timeout[i]);
		}
		printf("\n");
  800a0c:	01000284 	movi	r4,10
  800a10:	0802e100 	call	802e10 <putchar>
		timeout_buf.index = 0;
  800a14:	00802074 	movhi	r2,129
  800a18:	10811804 	addi	r2,r2,1120
  800a1c:	10000015 	stw	zero,0(r2)
		return 0;
  800a20:	e03fff15 	stw	zero,-4(fp)
  800a24:	00002d06 	br	800adc <update_timeout+0x154>
	}
	else {
		//valid packet received. transfer the data into the timeout array.
		printf("timeout values updated: ");
  800a28:	01002074 	movhi	r4,129
  800a2c:	213f8c04 	addi	r4,r4,-464
  800a30:	0802d980 	call	802d98 <printf>
		int i=0;
  800a34:	e03ffd15 	stw	zero,-12(fp)
		for (; i<timeout_buf.index; i++) {
  800a38:	00001c06 	br	800aac <update_timeout+0x124>
			timeout[i] = timeout_buf.timeout[i];
  800a3c:	e17ffd17 	ldw	r5,-12(fp)
  800a40:	e0bffd17 	ldw	r2,-12(fp)
  800a44:	00c02074 	movhi	r3,129
  800a48:	18c11804 	addi	r3,r3,1120
  800a4c:	1085883a 	add	r2,r2,r2
  800a50:	1085883a 	add	r2,r2,r2
  800a54:	10c5883a 	add	r2,r2,r3
  800a58:	10800104 	addi	r2,r2,4
  800a5c:	11000017 	ldw	r4,0(r2)
  800a60:	00c02074 	movhi	r3,129
  800a64:	18c11204 	addi	r3,r3,1096
  800a68:	2945883a 	add	r2,r5,r5
  800a6c:	1085883a 	add	r2,r2,r2
  800a70:	10c5883a 	add	r2,r2,r3
  800a74:	11000015 	stw	r4,0(r2)
			printf("%d,",timeout[i]);
  800a78:	e0bffd17 	ldw	r2,-12(fp)
  800a7c:	00c02074 	movhi	r3,129
  800a80:	18c11204 	addi	r3,r3,1096
  800a84:	1085883a 	add	r2,r2,r2
  800a88:	1085883a 	add	r2,r2,r2
  800a8c:	10c5883a 	add	r2,r2,r3
  800a90:	11400017 	ldw	r5,0(r2)
  800a94:	01002074 	movhi	r4,129
  800a98:	213f8b04 	addi	r4,r4,-468
  800a9c:	0802d980 	call	802d98 <printf>
	}
	else {
		//valid packet received. transfer the data into the timeout array.
		printf("timeout values updated: ");
		int i=0;
		for (; i<timeout_buf.index; i++) {
  800aa0:	e0bffd17 	ldw	r2,-12(fp)
  800aa4:	10800044 	addi	r2,r2,1
  800aa8:	e0bffd15 	stw	r2,-12(fp)
  800aac:	00802074 	movhi	r2,129
  800ab0:	10811804 	addi	r2,r2,1120
  800ab4:	10c00017 	ldw	r3,0(r2)
  800ab8:	e0bffd17 	ldw	r2,-12(fp)
  800abc:	10ffdf16 	blt	r2,r3,800a3c <update_timeout+0xb4>
			timeout[i] = timeout_buf.timeout[i];
			printf("%d,",timeout[i]);
		}
		printf("\n");
  800ac0:	01000284 	movi	r4,10
  800ac4:	0802e100 	call	802e10 <putchar>
		timeout_buf.index = 0;
  800ac8:	00802074 	movhi	r2,129
  800acc:	10811804 	addi	r2,r2,1120
  800ad0:	10000015 	stw	zero,0(r2)
		return 1;
  800ad4:	00800044 	movi	r2,1
  800ad8:	e0bfff15 	stw	r2,-4(fp)
  800adc:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  800ae0:	e037883a 	mov	sp,fp
  800ae4:	dfc00117 	ldw	ra,4(sp)
  800ae8:	df000017 	ldw	fp,0(sp)
  800aec:	dec00204 	addi	sp,sp,8
  800af0:	f800283a 	ret

00800af4 <camera_timer_isr>:
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context)
{
  800af4:	defffd04 	addi	sp,sp,-12
  800af8:	df000215 	stw	fp,8(sp)
  800afc:	df000204 	addi	fp,sp,8
  800b00:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  800b04:	e0bfff17 	ldw	r2,-4(fp)
  800b08:	e0bffe15 	stw	r2,-8(fp)
	*trigger = 1;
  800b0c:	e0fffe17 	ldw	r3,-8(fp)
  800b10:	00800044 	movi	r2,1
  800b14:	18800015 	stw	r2,0(r3)
	return 0;
  800b18:	0005883a 	mov	r2,zero
}
  800b1c:	e037883a 	mov	sp,fp
  800b20:	df000017 	ldw	fp,0(sp)
  800b24:	dec00104 	addi	sp,sp,4
  800b28:	f800283a 	ret

00800b2c <camera_tlc>:
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state)
{
  800b2c:	defffd04 	addi	sp,sp,-12
  800b30:	dfc00215 	stw	ra,8(sp)
  800b34:	df000115 	stw	fp,4(sp)
  800b38:	df000104 	addi	fp,sp,4
  800b3c:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800b40:	e0bfff17 	ldw	r2,-4(fp)
  800b44:	10800017 	ldw	r2,0(r2)
  800b48:	10bfffd8 	cmpnei	r2,r2,-1
  800b4c:	1000021e 	bne	r2,zero,800b58 <camera_tlc+0x2c>
		configurable_tlc(state);
  800b50:	e13fff17 	ldw	r4,-4(fp)
  800b54:	08007a00 	call	8007a0 <configurable_tlc>
		return;
	}

}
  800b58:	e037883a 	mov	sp,fp
  800b5c:	dfc00117 	ldw	ra,4(sp)
  800b60:	df000017 	ldw	fp,0(sp)
  800b64:	dec00204 	addi	sp,sp,8
  800b68:	f800283a 	ret

00800b6c <handle_vehicle_button>:
/* DESCRIPTION: Simulates the entry and exit of vehicles at the intersection
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_vehicle_button(void)
{
  800b6c:	deffff04 	addi	sp,sp,-4
  800b70:	df000015 	stw	fp,0(sp)
  800b74:	d839883a 	mov	fp,sp

}
  800b78:	e037883a 	mov	sp,fp
  800b7c:	df000017 	ldw	fp,0(sp)
  800b80:	dec00104 	addi	sp,sp,4
  800b84:	f800283a 	ret

00800b88 <clear_vehicle_detected>:

// set vehicle_detected to 'no vehicle' state
void clear_vehicle_detected(void)
{
  800b88:	deffff04 	addi	sp,sp,-4
  800b8c:	df000015 	stw	fp,0(sp)
  800b90:	d839883a 	mov	fp,sp
}
  800b94:	e037883a 	mov	sp,fp
  800b98:	df000017 	ldw	fp,0(sp)
  800b9c:	dec00104 	addi	sp,sp,4
  800ba0:	f800283a 	ret

00800ba4 <vehicle_checked>:
// set vehicle_detected to 'checking' state
void vehicle_checked(void)
{
  800ba4:	deffff04 	addi	sp,sp,-4
  800ba8:	df000015 	stw	fp,0(sp)
  800bac:	d839883a 	mov	fp,sp
}
  800bb0:	e037883a 	mov	sp,fp
  800bb4:	df000017 	ldw	fp,0(sp)
  800bb8:	dec00104 	addi	sp,sp,4
  800bbc:	f800283a 	ret

00800bc0 <is_vehicle_detected>:
// return true or false if a vehicle has been detected
int is_vehicle_detected(void)
{
  800bc0:	deffff04 	addi	sp,sp,-4
  800bc4:	df000015 	stw	fp,0(sp)
  800bc8:	d839883a 	mov	fp,sp
}
  800bcc:	e037883a 	mov	sp,fp
  800bd0:	df000017 	ldw	fp,0(sp)
  800bd4:	dec00104 	addi	sp,sp,4
  800bd8:	f800283a 	ret

00800bdc <is_vehicle_left>:
// return true or false if the vehicle has left the intersection yet
int is_vehicle_left(void)
{
  800bdc:	deffff04 	addi	sp,sp,-4
  800be0:	df000015 	stw	fp,0(sp)
  800be4:	d839883a 	mov	fp,sp
}
  800be8:	e037883a 	mov	sp,fp
  800bec:	df000017 	ldw	fp,0(sp)
  800bf0:	dec00104 	addi	sp,sp,4
  800bf4:	f800283a 	ret

00800bf8 <update_traffic_lights>:

void update_traffic_lights(void) {
  800bf8:	defffd04 	addi	sp,sp,-12
  800bfc:	dfc00215 	stw	ra,8(sp)
  800c00:	df000115 	stw	fp,4(sp)
  800c04:	df000104 	addi	fp,sp,4
	switch (proc_state[mode]) {
  800c08:	d0a73e17 	ldw	r2,-25352(gp)
  800c0c:	00c02074 	movhi	r3,129
  800c10:	18c11f04 	addi	r3,r3,1148
  800c14:	1085883a 	add	r2,r2,r2
  800c18:	1085883a 	add	r2,r2,r2
  800c1c:	10c5883a 	add	r2,r2,r3
  800c20:	10800017 	ldw	r2,0(r2)
  800c24:	e0bfff15 	stw	r2,-4(fp)
  800c28:	e0ffff17 	ldw	r3,-4(fp)
  800c2c:	18800228 	cmpgeui	r2,r3,8
  800c30:	1000341e 	bne	r2,zero,800d04 <update_traffic_lights+0x10c>
  800c34:	e13fff17 	ldw	r4,-4(fp)
  800c38:	e13fff17 	ldw	r4,-4(fp)
  800c3c:	2105883a 	add	r2,r4,r4
  800c40:	1087883a 	add	r3,r2,r2
  800c44:	00802034 	movhi	r2,128
  800c48:	10831604 	addi	r2,r2,3160
  800c4c:	1885883a 	add	r2,r3,r2
  800c50:	10800017 	ldw	r2,0(r2)
  800c54:	1000683a 	jmp	r2
  800c58:	00800c78 	rdprs	r2,zero,49
  800c5c:	00800cdc 	xori	r2,zero,51
  800c60:	00800cc8 	cmpgei	r2,zero,51
  800c64:	00800cf0 	cmpltui	r2,zero,51
  800c68:	00800c78 	rdprs	r2,zero,49
  800c6c:	00800ca0 	cmpeqi	r2,zero,50
  800c70:	00800c8c 	andi	r2,zero,50
  800c74:	00800cb4 	movhi	r2,50
	case RR0:
	case RR1:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x24);
  800c78:	00c04074 	movhi	r3,257
  800c7c:	18c41804 	addi	r3,r3,4192
  800c80:	00800904 	movi	r2,36
  800c84:	18800035 	stwio	r2,0(r3)
		break;
  800c88:	00002a06 	br	800d34 <update_traffic_lights+0x13c>
	case RG_p:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0xA1);
  800c8c:	00c04074 	movhi	r3,257
  800c90:	18c41804 	addi	r3,r3,4192
  800c94:	00802844 	movi	r2,161
  800c98:	18800035 	stwio	r2,0(r3)
		break;
  800c9c:	00002506 	br	800d34 <update_traffic_lights+0x13c>
	case RG:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x21);
  800ca0:	00c04074 	movhi	r3,257
  800ca4:	18c41804 	addi	r3,r3,4192
  800ca8:	00800844 	movi	r2,33
  800cac:	18800035 	stwio	r2,0(r3)
		break;
  800cb0:	00002006 	br	800d34 <update_traffic_lights+0x13c>
	case RY:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x22);
  800cb4:	00c04074 	movhi	r3,257
  800cb8:	18c41804 	addi	r3,r3,4192
  800cbc:	00800884 	movi	r2,34
  800cc0:	18800035 	stwio	r2,0(r3)
		break;
  800cc4:	00001b06 	br	800d34 <update_traffic_lights+0x13c>
	case GR_p:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x4C);
  800cc8:	00c04074 	movhi	r3,257
  800ccc:	18c41804 	addi	r3,r3,4192
  800cd0:	00801304 	movi	r2,76
  800cd4:	18800035 	stwio	r2,0(r3)
		break;
  800cd8:	00001606 	br	800d34 <update_traffic_lights+0x13c>
	case GR:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x0C);
  800cdc:	00c04074 	movhi	r3,257
  800ce0:	18c41804 	addi	r3,r3,4192
  800ce4:	00800304 	movi	r2,12
  800ce8:	18800035 	stwio	r2,0(r3)
		break;
  800cec:	00001106 	br	800d34 <update_traffic_lights+0x13c>
	case YR:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x14);
  800cf0:	00c04074 	movhi	r3,257
  800cf4:	18c41804 	addi	r3,r3,4192
  800cf8:	00800504 	movi	r2,20
  800cfc:	18800035 	stwio	r2,0(r3)
		break;
  800d00:	00000c06 	br	800d34 <update_traffic_lights+0x13c>
	default:
		printf("TLC state invalid: %d  mode: %d\n", proc_state[mode], mode+1);
  800d04:	d0a73e17 	ldw	r2,-25352(gp)
  800d08:	00c02074 	movhi	r3,129
  800d0c:	18c11f04 	addi	r3,r3,1148
  800d10:	1085883a 	add	r2,r2,r2
  800d14:	1085883a 	add	r2,r2,r2
  800d18:	10c5883a 	add	r2,r2,r3
  800d1c:	11400017 	ldw	r5,0(r2)
  800d20:	d0a73e17 	ldw	r2,-25352(gp)
  800d24:	11800044 	addi	r6,r2,1
  800d28:	01002074 	movhi	r4,129
  800d2c:	213f9304 	addi	r4,r4,-436
  800d30:	0802d980 	call	802d98 <printf>
		break;
	}
}
  800d34:	e037883a 	mov	sp,fp
  800d38:	dfc00117 	ldw	ra,4(sp)
  800d3c:	df000017 	ldw	fp,0(sp)
  800d40:	dec00204 	addi	sp,sp,8
  800d44:	f800283a 	ret

00800d48 <main>:


int main(void)
{
  800d48:	defffc04 	addi	sp,sp,-16
  800d4c:	dfc00315 	stw	ra,12(sp)
  800d50:	df000215 	stw	fp,8(sp)
  800d54:	df000204 	addi	fp,sp,8
	int buttons = 0;			// status of mode button
  800d58:	e03ffe15 	stw	zero,-8(fp)
	init_buttons_pio();			// initialize buttons
  800d5c:	08005140 	call	800514 <init_buttons_pio>
	while (1) {
		// Button detection & debouncing

		// if Mode switches change:
		if (mode != (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3)) {
  800d60:	00804074 	movhi	r2,257
  800d64:	10842404 	addi	r2,r2,4240
  800d68:	10800037 	ldwio	r2,0(r2)
  800d6c:	10c000cc 	andi	r3,r2,3
  800d70:	d0a73e17 	ldw	r2,-25352(gp)
  800d74:	18800f26 	beq	r3,r2,800db4 <main+0x6c>
			proc_state[mode] = -1;
  800d78:	d0a73e17 	ldw	r2,-25352(gp)
  800d7c:	00c02074 	movhi	r3,129
  800d80:	18c11f04 	addi	r3,r3,1148
  800d84:	1085883a 	add	r2,r2,r2
  800d88:	1085883a 	add	r2,r2,r2
  800d8c:	10c7883a 	add	r3,r2,r3
  800d90:	00bfffc4 	movi	r2,-1
  800d94:	18800015 	stw	r2,0(r3)
			mode = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3;
  800d98:	00804074 	movhi	r2,257
  800d9c:	10842404 	addi	r2,r2,4240
  800da0:	10800037 	ldwio	r2,0(r2)
  800da4:	108000cc 	andi	r2,r2,3
  800da8:	d0a73e15 	stw	r2,-25352(gp)
			//printf("mode: %08x\n", mode);
			lcd_set_mode(mode);
  800dac:	d1273e17 	ldw	r4,-25352(gp)
  800db0:	08002a40 	call	8002a4 <lcd_set_mode>

		// if Car button pushed...
			// handle_vehicle_button

		// Execute the correct TLC
    	switch (mode) {
  800db4:	d0a73e17 	ldw	r2,-25352(gp)
  800db8:	e0bfff15 	stw	r2,-4(fp)
  800dbc:	e0ffff17 	ldw	r3,-4(fp)
  800dc0:	18800060 	cmpeqi	r2,r3,1
  800dc4:	10000e1e 	bne	r2,zero,800e00 <main+0xb8>
  800dc8:	e0ffff17 	ldw	r3,-4(fp)
  800dcc:	18800070 	cmpltui	r2,r3,1
  800dd0:	1000071e 	bne	r2,zero,800df0 <main+0xa8>
  800dd4:	e0ffff17 	ldw	r3,-4(fp)
  800dd8:	188000a0 	cmpeqi	r2,r3,2
  800ddc:	10000c1e 	bne	r2,zero,800e10 <main+0xc8>
  800de0:	e0ffff17 	ldw	r3,-4(fp)
  800de4:	188000e0 	cmpeqi	r2,r3,3
  800de8:	10000d1e 	bne	r2,zero,800e20 <main+0xd8>
  800dec:	00000f06 	br	800e2c <main+0xe4>
			case 0:
				simple_tlc(&proc_state[0]);
  800df0:	01002074 	movhi	r4,129
  800df4:	21011f04 	addi	r4,r4,1148
  800df8:	08003440 	call	800344 <simple_tlc>
				break;
  800dfc:	00000b06 	br	800e2c <main+0xe4>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  800e00:	01002074 	movhi	r4,129
  800e04:	21012004 	addi	r4,r4,1152
  800e08:	08005680 	call	800568 <pedestrian_tlc>
				break;
  800e0c:	00000706 	br	800e2c <main+0xe4>
			case 2:
				configurable_tlc(&proc_state[2]);
  800e10:	01002074 	movhi	r4,129
  800e14:	21012104 	addi	r4,r4,1156
  800e18:	08007a00 	call	8007a0 <configurable_tlc>
				break;
  800e1c:	00000306 	br	800e2c <main+0xe4>
			case 3:
				camera_tlc(&proc_state[3]);
  800e20:	01002074 	movhi	r4,129
  800e24:	21012204 	addi	r4,r4,1160
  800e28:	0800b2c0 	call	800b2c <camera_tlc>
				break;
		}
		// Update Displays
    	// Update LED display:
    	update_traffic_lights();
  800e2c:	0800bf80 	call	800bf8 <update_traffic_lights>

	}
  800e30:	003fcb06 	br	800d60 <main+0x18>

00800e34 <udivmodsi4>:
  800e34:	29001b2e 	bgeu	r5,r4,800ea4 <udivmodsi4+0x70>
  800e38:	28001a16 	blt	r5,zero,800ea4 <udivmodsi4+0x70>
  800e3c:	00800044 	movi	r2,1
  800e40:	0007883a 	mov	r3,zero
  800e44:	01c007c4 	movi	r7,31
  800e48:	00000306 	br	800e58 <udivmodsi4+0x24>
  800e4c:	19c01326 	beq	r3,r7,800e9c <udivmodsi4+0x68>
  800e50:	18c00044 	addi	r3,r3,1
  800e54:	28000416 	blt	r5,zero,800e68 <udivmodsi4+0x34>
  800e58:	294b883a 	add	r5,r5,r5
  800e5c:	1085883a 	add	r2,r2,r2
  800e60:	293ffa36 	bltu	r5,r4,800e4c <udivmodsi4+0x18>
  800e64:	10000d26 	beq	r2,zero,800e9c <udivmodsi4+0x68>
  800e68:	0007883a 	mov	r3,zero
  800e6c:	21400236 	bltu	r4,r5,800e78 <udivmodsi4+0x44>
  800e70:	2149c83a 	sub	r4,r4,r5
  800e74:	1886b03a 	or	r3,r3,r2
  800e78:	1004d07a 	srli	r2,r2,1
  800e7c:	280ad07a 	srli	r5,r5,1
  800e80:	103ffa1e 	bne	r2,zero,800e6c <udivmodsi4+0x38>
  800e84:	30000226 	beq	r6,zero,800e90 <udivmodsi4+0x5c>
  800e88:	2005883a 	mov	r2,r4
  800e8c:	f800283a 	ret
  800e90:	1809883a 	mov	r4,r3
  800e94:	2005883a 	mov	r2,r4
  800e98:	f800283a 	ret
  800e9c:	0007883a 	mov	r3,zero
  800ea0:	003ff806 	br	800e84 <udivmodsi4+0x50>
  800ea4:	00800044 	movi	r2,1
  800ea8:	0007883a 	mov	r3,zero
  800eac:	003fef06 	br	800e6c <udivmodsi4+0x38>

00800eb0 <__divsi3>:
  800eb0:	defffe04 	addi	sp,sp,-8
  800eb4:	dc000015 	stw	r16,0(sp)
  800eb8:	dfc00115 	stw	ra,4(sp)
  800ebc:	0021883a 	mov	r16,zero
  800ec0:	20000c16 	blt	r4,zero,800ef4 <__divsi3+0x44>
  800ec4:	000d883a 	mov	r6,zero
  800ec8:	28000e16 	blt	r5,zero,800f04 <__divsi3+0x54>
  800ecc:	0800e340 	call	800e34 <udivmodsi4>
  800ed0:	1007883a 	mov	r3,r2
  800ed4:	8005003a 	cmpeq	r2,r16,zero
  800ed8:	1000011e 	bne	r2,zero,800ee0 <__divsi3+0x30>
  800edc:	00c7c83a 	sub	r3,zero,r3
  800ee0:	1805883a 	mov	r2,r3
  800ee4:	dfc00117 	ldw	ra,4(sp)
  800ee8:	dc000017 	ldw	r16,0(sp)
  800eec:	dec00204 	addi	sp,sp,8
  800ef0:	f800283a 	ret
  800ef4:	0109c83a 	sub	r4,zero,r4
  800ef8:	04000044 	movi	r16,1
  800efc:	000d883a 	mov	r6,zero
  800f00:	283ff20e 	bge	r5,zero,800ecc <__divsi3+0x1c>
  800f04:	014bc83a 	sub	r5,zero,r5
  800f08:	8021003a 	cmpeq	r16,r16,zero
  800f0c:	003fef06 	br	800ecc <__divsi3+0x1c>

00800f10 <__modsi3>:
  800f10:	deffff04 	addi	sp,sp,-4
  800f14:	dfc00015 	stw	ra,0(sp)
  800f18:	01800044 	movi	r6,1
  800f1c:	2807883a 	mov	r3,r5
  800f20:	20000416 	blt	r4,zero,800f34 <__modsi3+0x24>
  800f24:	28000c16 	blt	r5,zero,800f58 <__modsi3+0x48>
  800f28:	dfc00017 	ldw	ra,0(sp)
  800f2c:	dec00104 	addi	sp,sp,4
  800f30:	0800e341 	jmpi	800e34 <udivmodsi4>
  800f34:	0109c83a 	sub	r4,zero,r4
  800f38:	28000b16 	blt	r5,zero,800f68 <__modsi3+0x58>
  800f3c:	180b883a 	mov	r5,r3
  800f40:	01800044 	movi	r6,1
  800f44:	0800e340 	call	800e34 <udivmodsi4>
  800f48:	0085c83a 	sub	r2,zero,r2
  800f4c:	dfc00017 	ldw	ra,0(sp)
  800f50:	dec00104 	addi	sp,sp,4
  800f54:	f800283a 	ret
  800f58:	014bc83a 	sub	r5,zero,r5
  800f5c:	dfc00017 	ldw	ra,0(sp)
  800f60:	dec00104 	addi	sp,sp,4
  800f64:	0800e341 	jmpi	800e34 <udivmodsi4>
  800f68:	0147c83a 	sub	r3,zero,r5
  800f6c:	003ff306 	br	800f3c <__modsi3+0x2c>

00800f70 <__udivsi3>:
  800f70:	000d883a 	mov	r6,zero
  800f74:	0800e341 	jmpi	800e34 <udivmodsi4>

00800f78 <__umodsi3>:
  800f78:	01800044 	movi	r6,1
  800f7c:	0800e341 	jmpi	800e34 <udivmodsi4>

00800f80 <_atoi_r>:
  800f80:	000d883a 	mov	r6,zero
  800f84:	01c00284 	movi	r7,10
  800f88:	08033581 	jmpi	803358 <_strtol_r>

00800f8c <atoi>:
  800f8c:	000b883a 	mov	r5,zero
  800f90:	01800284 	movi	r6,10
  800f94:	080359c1 	jmpi	80359c <strtol>

00800f98 <_fclose_r>:
  800f98:	defffc04 	addi	sp,sp,-16
  800f9c:	dc400115 	stw	r17,4(sp)
  800fa0:	dc000015 	stw	r16,0(sp)
  800fa4:	dfc00315 	stw	ra,12(sp)
  800fa8:	dc800215 	stw	r18,8(sp)
  800fac:	2821883a 	mov	r16,r5
  800fb0:	2023883a 	mov	r17,r4
  800fb4:	28002926 	beq	r5,zero,80105c <_fclose_r+0xc4>
  800fb8:	080146c0 	call	80146c <__sfp_lock_acquire>
  800fbc:	88000226 	beq	r17,zero,800fc8 <_fclose_r+0x30>
  800fc0:	88800e17 	ldw	r2,56(r17)
  800fc4:	10002d26 	beq	r2,zero,80107c <_fclose_r+0xe4>
  800fc8:	8080030f 	ldh	r2,12(r16)
  800fcc:	10002226 	beq	r2,zero,801058 <_fclose_r+0xc0>
  800fd0:	8809883a 	mov	r4,r17
  800fd4:	800b883a 	mov	r5,r16
  800fd8:	08010bc0 	call	8010bc <_fflush_r>
  800fdc:	1025883a 	mov	r18,r2
  800fe0:	80800b17 	ldw	r2,44(r16)
  800fe4:	10000426 	beq	r2,zero,800ff8 <_fclose_r+0x60>
  800fe8:	81400717 	ldw	r5,28(r16)
  800fec:	8809883a 	mov	r4,r17
  800ff0:	103ee83a 	callr	r2
  800ff4:	10002a16 	blt	r2,zero,8010a0 <_fclose_r+0x108>
  800ff8:	8080030b 	ldhu	r2,12(r16)
  800ffc:	1080200c 	andi	r2,r2,128
  801000:	1000231e 	bne	r2,zero,801090 <_fclose_r+0xf8>
  801004:	81400c17 	ldw	r5,48(r16)
  801008:	28000526 	beq	r5,zero,801020 <_fclose_r+0x88>
  80100c:	80801004 	addi	r2,r16,64
  801010:	28800226 	beq	r5,r2,80101c <_fclose_r+0x84>
  801014:	8809883a 	mov	r4,r17
  801018:	08019700 	call	801970 <_free_r>
  80101c:	80000c15 	stw	zero,48(r16)
  801020:	81401117 	ldw	r5,68(r16)
  801024:	28000326 	beq	r5,zero,801034 <_fclose_r+0x9c>
  801028:	8809883a 	mov	r4,r17
  80102c:	08019700 	call	801970 <_free_r>
  801030:	80001115 	stw	zero,68(r16)
  801034:	8000030d 	sth	zero,12(r16)
  801038:	08014700 	call	801470 <__sfp_lock_release>
  80103c:	9005883a 	mov	r2,r18
  801040:	dfc00317 	ldw	ra,12(sp)
  801044:	dc800217 	ldw	r18,8(sp)
  801048:	dc400117 	ldw	r17,4(sp)
  80104c:	dc000017 	ldw	r16,0(sp)
  801050:	dec00404 	addi	sp,sp,16
  801054:	f800283a 	ret
  801058:	08014700 	call	801470 <__sfp_lock_release>
  80105c:	0025883a 	mov	r18,zero
  801060:	9005883a 	mov	r2,r18
  801064:	dfc00317 	ldw	ra,12(sp)
  801068:	dc800217 	ldw	r18,8(sp)
  80106c:	dc400117 	ldw	r17,4(sp)
  801070:	dc000017 	ldw	r16,0(sp)
  801074:	dec00404 	addi	sp,sp,16
  801078:	f800283a 	ret
  80107c:	8809883a 	mov	r4,r17
  801080:	080147c0 	call	80147c <__sinit>
  801084:	8080030f 	ldh	r2,12(r16)
  801088:	103fd11e 	bne	r2,zero,800fd0 <_fclose_r+0x38>
  80108c:	003ff206 	br	801058 <_fclose_r+0xc0>
  801090:	81400417 	ldw	r5,16(r16)
  801094:	8809883a 	mov	r4,r17
  801098:	08019700 	call	801970 <_free_r>
  80109c:	003fd906 	br	801004 <_fclose_r+0x6c>
  8010a0:	04bfffc4 	movi	r18,-1
  8010a4:	003fd406 	br	800ff8 <_fclose_r+0x60>

008010a8 <fclose>:
  8010a8:	00802074 	movhi	r2,129
  8010ac:	10882504 	addi	r2,r2,8340
  8010b0:	200b883a 	mov	r5,r4
  8010b4:	11000017 	ldw	r4,0(r2)
  8010b8:	0800f981 	jmpi	800f98 <_fclose_r>

008010bc <_fflush_r>:
  8010bc:	defffb04 	addi	sp,sp,-20
  8010c0:	dcc00315 	stw	r19,12(sp)
  8010c4:	dc800215 	stw	r18,8(sp)
  8010c8:	dfc00415 	stw	ra,16(sp)
  8010cc:	dc400115 	stw	r17,4(sp)
  8010d0:	dc000015 	stw	r16,0(sp)
  8010d4:	2027883a 	mov	r19,r4
  8010d8:	2825883a 	mov	r18,r5
  8010dc:	20000226 	beq	r4,zero,8010e8 <_fflush_r+0x2c>
  8010e0:	20800e17 	ldw	r2,56(r4)
  8010e4:	10005626 	beq	r2,zero,801240 <_fflush_r+0x184>
  8010e8:	9100030b 	ldhu	r4,12(r18)
  8010ec:	20ffffcc 	andi	r3,r4,65535
  8010f0:	18e0001c 	xori	r3,r3,32768
  8010f4:	18e00004 	addi	r3,r3,-32768
  8010f8:	1880020c 	andi	r2,r3,8
  8010fc:	1000261e 	bne	r2,zero,801198 <_fflush_r+0xdc>
  801100:	90c00117 	ldw	r3,4(r18)
  801104:	20820014 	ori	r2,r4,2048
  801108:	9080030d 	sth	r2,12(r18)
  80110c:	1009883a 	mov	r4,r2
  801110:	00c0400e 	bge	zero,r3,801214 <_fflush_r+0x158>
  801114:	92000a17 	ldw	r8,40(r18)
  801118:	40004026 	beq	r8,zero,80121c <_fflush_r+0x160>
  80111c:	2084000c 	andi	r2,r4,4096
  801120:	10005326 	beq	r2,zero,801270 <_fflush_r+0x1b4>
  801124:	94001417 	ldw	r16,80(r18)
  801128:	9080030b 	ldhu	r2,12(r18)
  80112c:	1080010c 	andi	r2,r2,4
  801130:	1000481e 	bne	r2,zero,801254 <_fflush_r+0x198>
  801134:	91400717 	ldw	r5,28(r18)
  801138:	9809883a 	mov	r4,r19
  80113c:	800d883a 	mov	r6,r16
  801140:	000f883a 	mov	r7,zero
  801144:	403ee83a 	callr	r8
  801148:	8080261e 	bne	r16,r2,8011e4 <_fflush_r+0x128>
  80114c:	9080030b 	ldhu	r2,12(r18)
  801150:	91000417 	ldw	r4,16(r18)
  801154:	90000115 	stw	zero,4(r18)
  801158:	10bdffcc 	andi	r2,r2,63487
  80115c:	10ffffcc 	andi	r3,r2,65535
  801160:	18c4000c 	andi	r3,r3,4096
  801164:	9080030d 	sth	r2,12(r18)
  801168:	91000015 	stw	r4,0(r18)
  80116c:	18002b26 	beq	r3,zero,80121c <_fflush_r+0x160>
  801170:	0007883a 	mov	r3,zero
  801174:	1805883a 	mov	r2,r3
  801178:	94001415 	stw	r16,80(r18)
  80117c:	dfc00417 	ldw	ra,16(sp)
  801180:	dcc00317 	ldw	r19,12(sp)
  801184:	dc800217 	ldw	r18,8(sp)
  801188:	dc400117 	ldw	r17,4(sp)
  80118c:	dc000017 	ldw	r16,0(sp)
  801190:	dec00504 	addi	sp,sp,20
  801194:	f800283a 	ret
  801198:	94400417 	ldw	r17,16(r18)
  80119c:	88001f26 	beq	r17,zero,80121c <_fflush_r+0x160>
  8011a0:	90800017 	ldw	r2,0(r18)
  8011a4:	18c000cc 	andi	r3,r3,3
  8011a8:	94400015 	stw	r17,0(r18)
  8011ac:	1461c83a 	sub	r16,r2,r17
  8011b0:	18002526 	beq	r3,zero,801248 <_fflush_r+0x18c>
  8011b4:	0005883a 	mov	r2,zero
  8011b8:	90800215 	stw	r2,8(r18)
  8011bc:	0400170e 	bge	zero,r16,80121c <_fflush_r+0x160>
  8011c0:	90c00917 	ldw	r3,36(r18)
  8011c4:	91400717 	ldw	r5,28(r18)
  8011c8:	880d883a 	mov	r6,r17
  8011cc:	800f883a 	mov	r7,r16
  8011d0:	9809883a 	mov	r4,r19
  8011d4:	183ee83a 	callr	r3
  8011d8:	88a3883a 	add	r17,r17,r2
  8011dc:	80a1c83a 	sub	r16,r16,r2
  8011e0:	00bff616 	blt	zero,r2,8011bc <_fflush_r+0x100>
  8011e4:	9080030b 	ldhu	r2,12(r18)
  8011e8:	00ffffc4 	movi	r3,-1
  8011ec:	10801014 	ori	r2,r2,64
  8011f0:	9080030d 	sth	r2,12(r18)
  8011f4:	1805883a 	mov	r2,r3
  8011f8:	dfc00417 	ldw	ra,16(sp)
  8011fc:	dcc00317 	ldw	r19,12(sp)
  801200:	dc800217 	ldw	r18,8(sp)
  801204:	dc400117 	ldw	r17,4(sp)
  801208:	dc000017 	ldw	r16,0(sp)
  80120c:	dec00504 	addi	sp,sp,20
  801210:	f800283a 	ret
  801214:	90800f17 	ldw	r2,60(r18)
  801218:	00bfbe16 	blt	zero,r2,801114 <_fflush_r+0x58>
  80121c:	0007883a 	mov	r3,zero
  801220:	1805883a 	mov	r2,r3
  801224:	dfc00417 	ldw	ra,16(sp)
  801228:	dcc00317 	ldw	r19,12(sp)
  80122c:	dc800217 	ldw	r18,8(sp)
  801230:	dc400117 	ldw	r17,4(sp)
  801234:	dc000017 	ldw	r16,0(sp)
  801238:	dec00504 	addi	sp,sp,20
  80123c:	f800283a 	ret
  801240:	080147c0 	call	80147c <__sinit>
  801244:	003fa806 	br	8010e8 <_fflush_r+0x2c>
  801248:	90800517 	ldw	r2,20(r18)
  80124c:	90800215 	stw	r2,8(r18)
  801250:	003fda06 	br	8011bc <_fflush_r+0x100>
  801254:	90800117 	ldw	r2,4(r18)
  801258:	90c00c17 	ldw	r3,48(r18)
  80125c:	80a1c83a 	sub	r16,r16,r2
  801260:	183fb426 	beq	r3,zero,801134 <_fflush_r+0x78>
  801264:	90800f17 	ldw	r2,60(r18)
  801268:	80a1c83a 	sub	r16,r16,r2
  80126c:	003fb106 	br	801134 <_fflush_r+0x78>
  801270:	91400717 	ldw	r5,28(r18)
  801274:	9809883a 	mov	r4,r19
  801278:	000d883a 	mov	r6,zero
  80127c:	01c00044 	movi	r7,1
  801280:	403ee83a 	callr	r8
  801284:	1021883a 	mov	r16,r2
  801288:	00bfffc4 	movi	r2,-1
  80128c:	80800226 	beq	r16,r2,801298 <_fflush_r+0x1dc>
  801290:	92000a17 	ldw	r8,40(r18)
  801294:	003fa406 	br	801128 <_fflush_r+0x6c>
  801298:	98c00017 	ldw	r3,0(r19)
  80129c:	00800744 	movi	r2,29
  8012a0:	18bfde26 	beq	r3,r2,80121c <_fflush_r+0x160>
  8012a4:	9080030b 	ldhu	r2,12(r18)
  8012a8:	8007883a 	mov	r3,r16
  8012ac:	10801014 	ori	r2,r2,64
  8012b0:	9080030d 	sth	r2,12(r18)
  8012b4:	003fcf06 	br	8011f4 <_fflush_r+0x138>

008012b8 <fflush>:
  8012b8:	01402034 	movhi	r5,128
  8012bc:	29442f04 	addi	r5,r5,4284
  8012c0:	2007883a 	mov	r3,r4
  8012c4:	20000526 	beq	r4,zero,8012dc <fflush+0x24>
  8012c8:	00802074 	movhi	r2,129
  8012cc:	10882504 	addi	r2,r2,8340
  8012d0:	11000017 	ldw	r4,0(r2)
  8012d4:	180b883a 	mov	r5,r3
  8012d8:	08010bc1 	jmpi	8010bc <_fflush_r>
  8012dc:	00802074 	movhi	r2,129
  8012e0:	10882604 	addi	r2,r2,8344
  8012e4:	11000017 	ldw	r4,0(r2)
  8012e8:	08021581 	jmpi	802158 <_fwalk_reent>

008012ec <fgetc>:
  8012ec:	defffd04 	addi	sp,sp,-12
  8012f0:	dc400115 	stw	r17,4(sp)
  8012f4:	04402074 	movhi	r17,129
  8012f8:	8c482504 	addi	r17,r17,8340
  8012fc:	88c00017 	ldw	r3,0(r17)
  801300:	dc000015 	stw	r16,0(sp)
  801304:	dfc00215 	stw	ra,8(sp)
  801308:	2021883a 	mov	r16,r4
  80130c:	18000326 	beq	r3,zero,80131c <fgetc+0x30>
  801310:	18800e17 	ldw	r2,56(r3)
  801314:	1809883a 	mov	r4,r3
  801318:	10000e26 	beq	r2,zero,801354 <fgetc+0x68>
  80131c:	80800117 	ldw	r2,4(r16)
  801320:	800b883a 	mov	r5,r16
  801324:	10bfffc4 	addi	r2,r2,-1
  801328:	80800115 	stw	r2,4(r16)
  80132c:	10000f16 	blt	r2,zero,80136c <fgetc+0x80>
  801330:	80c00017 	ldw	r3,0(r16)
  801334:	18800003 	ldbu	r2,0(r3)
  801338:	18c00044 	addi	r3,r3,1
  80133c:	80c00015 	stw	r3,0(r16)
  801340:	dfc00217 	ldw	ra,8(sp)
  801344:	dc400117 	ldw	r17,4(sp)
  801348:	dc000017 	ldw	r16,0(sp)
  80134c:	dec00304 	addi	sp,sp,12
  801350:	f800283a 	ret
  801354:	080147c0 	call	80147c <__sinit>
  801358:	80800117 	ldw	r2,4(r16)
  80135c:	800b883a 	mov	r5,r16
  801360:	10bfffc4 	addi	r2,r2,-1
  801364:	80800115 	stw	r2,4(r16)
  801368:	103ff10e 	bge	r2,zero,801330 <fgetc+0x44>
  80136c:	89000017 	ldw	r4,0(r17)
  801370:	dfc00217 	ldw	ra,8(sp)
  801374:	dc400117 	ldw	r17,4(sp)
  801378:	dc000017 	ldw	r16,0(sp)
  80137c:	dec00304 	addi	sp,sp,12
  801380:	08030c81 	jmpi	8030c8 <__srget_r>

00801384 <_fgetc_r>:
  801384:	defffd04 	addi	sp,sp,-12
  801388:	dc400115 	stw	r17,4(sp)
  80138c:	dc000015 	stw	r16,0(sp)
  801390:	dfc00215 	stw	ra,8(sp)
  801394:	2021883a 	mov	r16,r4
  801398:	2823883a 	mov	r17,r5
  80139c:	20000226 	beq	r4,zero,8013a8 <_fgetc_r+0x24>
  8013a0:	20800e17 	ldw	r2,56(r4)
  8013a4:	10000f26 	beq	r2,zero,8013e4 <_fgetc_r+0x60>
  8013a8:	88800117 	ldw	r2,4(r17)
  8013ac:	8009883a 	mov	r4,r16
  8013b0:	880b883a 	mov	r5,r17
  8013b4:	10bfffc4 	addi	r2,r2,-1
  8013b8:	88800115 	stw	r2,4(r17)
  8013bc:	10001016 	blt	r2,zero,801400 <_fgetc_r+0x7c>
  8013c0:	88c00017 	ldw	r3,0(r17)
  8013c4:	18800003 	ldbu	r2,0(r3)
  8013c8:	18c00044 	addi	r3,r3,1
  8013cc:	88c00015 	stw	r3,0(r17)
  8013d0:	dfc00217 	ldw	ra,8(sp)
  8013d4:	dc400117 	ldw	r17,4(sp)
  8013d8:	dc000017 	ldw	r16,0(sp)
  8013dc:	dec00304 	addi	sp,sp,12
  8013e0:	f800283a 	ret
  8013e4:	080147c0 	call	80147c <__sinit>
  8013e8:	88800117 	ldw	r2,4(r17)
  8013ec:	8009883a 	mov	r4,r16
  8013f0:	880b883a 	mov	r5,r17
  8013f4:	10bfffc4 	addi	r2,r2,-1
  8013f8:	88800115 	stw	r2,4(r17)
  8013fc:	103ff00e 	bge	r2,zero,8013c0 <_fgetc_r+0x3c>
  801400:	dfc00217 	ldw	ra,8(sp)
  801404:	dc400117 	ldw	r17,4(sp)
  801408:	dc000017 	ldw	r16,0(sp)
  80140c:	dec00304 	addi	sp,sp,12
  801410:	08030c81 	jmpi	8030c8 <__srget_r>

00801414 <std>:
  801414:	00802034 	movhi	r2,128
  801418:	108c6604 	addi	r2,r2,12696
  80141c:	20800b15 	stw	r2,44(r4)
  801420:	00802034 	movhi	r2,128
  801424:	108ca104 	addi	r2,r2,12932
  801428:	20800815 	stw	r2,32(r4)
  80142c:	00c02034 	movhi	r3,128
  801430:	18cc8204 	addi	r3,r3,12808
  801434:	00802034 	movhi	r2,128
  801438:	108c6804 	addi	r2,r2,12704
  80143c:	2140030d 	sth	r5,12(r4)
  801440:	2180038d 	sth	r6,14(r4)
  801444:	20c00915 	stw	r3,36(r4)
  801448:	20800a15 	stw	r2,40(r4)
  80144c:	20000015 	stw	zero,0(r4)
  801450:	20000115 	stw	zero,4(r4)
  801454:	20000215 	stw	zero,8(r4)
  801458:	20000415 	stw	zero,16(r4)
  80145c:	20000515 	stw	zero,20(r4)
  801460:	20000615 	stw	zero,24(r4)
  801464:	21000715 	stw	r4,28(r4)
  801468:	f800283a 	ret

0080146c <__sfp_lock_acquire>:
  80146c:	f800283a 	ret

00801470 <__sfp_lock_release>:
  801470:	f800283a 	ret

00801474 <__sinit_lock_acquire>:
  801474:	f800283a 	ret

00801478 <__sinit_lock_release>:
  801478:	f800283a 	ret

0080147c <__sinit>:
  80147c:	20800e17 	ldw	r2,56(r4)
  801480:	defffd04 	addi	sp,sp,-12
  801484:	dc400115 	stw	r17,4(sp)
  801488:	dc000015 	stw	r16,0(sp)
  80148c:	dfc00215 	stw	ra,8(sp)
  801490:	04400044 	movi	r17,1
  801494:	01400104 	movi	r5,4
  801498:	000d883a 	mov	r6,zero
  80149c:	2021883a 	mov	r16,r4
  8014a0:	2200bb04 	addi	r8,r4,748
  8014a4:	200f883a 	mov	r7,r4
  8014a8:	10000526 	beq	r2,zero,8014c0 <__sinit+0x44>
  8014ac:	dfc00217 	ldw	ra,8(sp)
  8014b0:	dc400117 	ldw	r17,4(sp)
  8014b4:	dc000017 	ldw	r16,0(sp)
  8014b8:	dec00304 	addi	sp,sp,12
  8014bc:	f800283a 	ret
  8014c0:	21000117 	ldw	r4,4(r4)
  8014c4:	00802034 	movhi	r2,128
  8014c8:	10855804 	addi	r2,r2,5472
  8014cc:	00c000c4 	movi	r3,3
  8014d0:	80800f15 	stw	r2,60(r16)
  8014d4:	80c0b915 	stw	r3,740(r16)
  8014d8:	8200ba15 	stw	r8,744(r16)
  8014dc:	84400e15 	stw	r17,56(r16)
  8014e0:	8000b815 	stw	zero,736(r16)
  8014e4:	08014140 	call	801414 <std>
  8014e8:	81000217 	ldw	r4,8(r16)
  8014ec:	880d883a 	mov	r6,r17
  8014f0:	800f883a 	mov	r7,r16
  8014f4:	01400284 	movi	r5,10
  8014f8:	08014140 	call	801414 <std>
  8014fc:	81000317 	ldw	r4,12(r16)
  801500:	800f883a 	mov	r7,r16
  801504:	01400484 	movi	r5,18
  801508:	01800084 	movi	r6,2
  80150c:	dfc00217 	ldw	ra,8(sp)
  801510:	dc400117 	ldw	r17,4(sp)
  801514:	dc000017 	ldw	r16,0(sp)
  801518:	dec00304 	addi	sp,sp,12
  80151c:	08014141 	jmpi	801414 <std>

00801520 <__fp_lock>:
  801520:	0005883a 	mov	r2,zero
  801524:	f800283a 	ret

00801528 <__fp_unlock>:
  801528:	0005883a 	mov	r2,zero
  80152c:	f800283a 	ret

00801530 <__fp_unlock_all>:
  801530:	00802074 	movhi	r2,129
  801534:	10882504 	addi	r2,r2,8340
  801538:	11000017 	ldw	r4,0(r2)
  80153c:	01402034 	movhi	r5,128
  801540:	29454a04 	addi	r5,r5,5416
  801544:	08022201 	jmpi	802220 <_fwalk>

00801548 <__fp_lock_all>:
  801548:	00802074 	movhi	r2,129
  80154c:	10882504 	addi	r2,r2,8340
  801550:	11000017 	ldw	r4,0(r2)
  801554:	01402034 	movhi	r5,128
  801558:	29454804 	addi	r5,r5,5408
  80155c:	08022201 	jmpi	802220 <_fwalk>

00801560 <_cleanup_r>:
  801560:	01402034 	movhi	r5,128
  801564:	29442a04 	addi	r5,r5,4264
  801568:	08022201 	jmpi	802220 <_fwalk>

0080156c <_cleanup>:
  80156c:	00802074 	movhi	r2,129
  801570:	10882604 	addi	r2,r2,8344
  801574:	11000017 	ldw	r4,0(r2)
  801578:	08015601 	jmpi	801560 <_cleanup_r>

0080157c <__sfmoreglue>:
  80157c:	defffc04 	addi	sp,sp,-16
  801580:	dc400115 	stw	r17,4(sp)
  801584:	2c401724 	muli	r17,r5,92
  801588:	dc800215 	stw	r18,8(sp)
  80158c:	2825883a 	mov	r18,r5
  801590:	89400304 	addi	r5,r17,12
  801594:	dc000015 	stw	r16,0(sp)
  801598:	dfc00315 	stw	ra,12(sp)
  80159c:	08025480 	call	802548 <_malloc_r>
  8015a0:	0021883a 	mov	r16,zero
  8015a4:	880d883a 	mov	r6,r17
  8015a8:	000b883a 	mov	r5,zero
  8015ac:	10000626 	beq	r2,zero,8015c8 <__sfmoreglue+0x4c>
  8015b0:	11000304 	addi	r4,r2,12
  8015b4:	14800115 	stw	r18,4(r2)
  8015b8:	10000015 	stw	zero,0(r2)
  8015bc:	11000215 	stw	r4,8(r2)
  8015c0:	1021883a 	mov	r16,r2
  8015c4:	0802c880 	call	802c88 <memset>
  8015c8:	8005883a 	mov	r2,r16
  8015cc:	dfc00317 	ldw	ra,12(sp)
  8015d0:	dc800217 	ldw	r18,8(sp)
  8015d4:	dc400117 	ldw	r17,4(sp)
  8015d8:	dc000017 	ldw	r16,0(sp)
  8015dc:	dec00404 	addi	sp,sp,16
  8015e0:	f800283a 	ret

008015e4 <__sfp>:
  8015e4:	defffd04 	addi	sp,sp,-12
  8015e8:	00802074 	movhi	r2,129
  8015ec:	10882604 	addi	r2,r2,8344
  8015f0:	dc000015 	stw	r16,0(sp)
  8015f4:	14000017 	ldw	r16,0(r2)
  8015f8:	dc400115 	stw	r17,4(sp)
  8015fc:	dfc00215 	stw	ra,8(sp)
  801600:	80800e17 	ldw	r2,56(r16)
  801604:	2023883a 	mov	r17,r4
  801608:	10002626 	beq	r2,zero,8016a4 <__sfp+0xc0>
  80160c:	8400b804 	addi	r16,r16,736
  801610:	80800117 	ldw	r2,4(r16)
  801614:	81000217 	ldw	r4,8(r16)
  801618:	10ffffc4 	addi	r3,r2,-1
  80161c:	18000916 	blt	r3,zero,801644 <__sfp+0x60>
  801620:	2080030f 	ldh	r2,12(r4)
  801624:	10000b26 	beq	r2,zero,801654 <__sfp+0x70>
  801628:	017fffc4 	movi	r5,-1
  80162c:	00000206 	br	801638 <__sfp+0x54>
  801630:	2080030f 	ldh	r2,12(r4)
  801634:	10000726 	beq	r2,zero,801654 <__sfp+0x70>
  801638:	18ffffc4 	addi	r3,r3,-1
  80163c:	21001704 	addi	r4,r4,92
  801640:	197ffb1e 	bne	r3,r5,801630 <__sfp+0x4c>
  801644:	80800017 	ldw	r2,0(r16)
  801648:	10001926 	beq	r2,zero,8016b0 <__sfp+0xcc>
  80164c:	1021883a 	mov	r16,r2
  801650:	003fef06 	br	801610 <__sfp+0x2c>
  801654:	00bfffc4 	movi	r2,-1
  801658:	00c00044 	movi	r3,1
  80165c:	2080038d 	sth	r2,14(r4)
  801660:	20c0030d 	sth	r3,12(r4)
  801664:	20000015 	stw	zero,0(r4)
  801668:	20000215 	stw	zero,8(r4)
  80166c:	20000115 	stw	zero,4(r4)
  801670:	20000415 	stw	zero,16(r4)
  801674:	20000515 	stw	zero,20(r4)
  801678:	20000615 	stw	zero,24(r4)
  80167c:	20000c15 	stw	zero,48(r4)
  801680:	20000d15 	stw	zero,52(r4)
  801684:	20001115 	stw	zero,68(r4)
  801688:	20001215 	stw	zero,72(r4)
  80168c:	2005883a 	mov	r2,r4
  801690:	dfc00217 	ldw	ra,8(sp)
  801694:	dc400117 	ldw	r17,4(sp)
  801698:	dc000017 	ldw	r16,0(sp)
  80169c:	dec00304 	addi	sp,sp,12
  8016a0:	f800283a 	ret
  8016a4:	8009883a 	mov	r4,r16
  8016a8:	080147c0 	call	80147c <__sinit>
  8016ac:	003fd706 	br	80160c <__sfp+0x28>
  8016b0:	8809883a 	mov	r4,r17
  8016b4:	01400104 	movi	r5,4
  8016b8:	080157c0 	call	80157c <__sfmoreglue>
  8016bc:	80800015 	stw	r2,0(r16)
  8016c0:	103fe21e 	bne	r2,zero,80164c <__sfp+0x68>
  8016c4:	00800304 	movi	r2,12
  8016c8:	0009883a 	mov	r4,zero
  8016cc:	88800015 	stw	r2,0(r17)
  8016d0:	003fee06 	br	80168c <__sfp+0xa8>

008016d4 <_fopen_r>:
  8016d4:	defffa04 	addi	sp,sp,-24
  8016d8:	dcc00415 	stw	r19,16(sp)
  8016dc:	2827883a 	mov	r19,r5
  8016e0:	300b883a 	mov	r5,r6
  8016e4:	d80d883a 	mov	r6,sp
  8016e8:	dc800315 	stw	r18,12(sp)
  8016ec:	dc400215 	stw	r17,8(sp)
  8016f0:	dc000115 	stw	r16,4(sp)
  8016f4:	dfc00515 	stw	ra,20(sp)
  8016f8:	2021883a 	mov	r16,r4
  8016fc:	0806ed80 	call	806ed8 <__sflags>
  801700:	1025883a 	mov	r18,r2
  801704:	8009883a 	mov	r4,r16
  801708:	0023883a 	mov	r17,zero
  80170c:	1000081e 	bne	r2,zero,801730 <_fopen_r+0x5c>
  801710:	8805883a 	mov	r2,r17
  801714:	dfc00517 	ldw	ra,20(sp)
  801718:	dcc00417 	ldw	r19,16(sp)
  80171c:	dc800317 	ldw	r18,12(sp)
  801720:	dc400217 	ldw	r17,8(sp)
  801724:	dc000117 	ldw	r16,4(sp)
  801728:	dec00604 	addi	sp,sp,24
  80172c:	f800283a 	ret
  801730:	08015e40 	call	8015e4 <__sfp>
  801734:	1023883a 	mov	r17,r2
  801738:	980b883a 	mov	r5,r19
  80173c:	8009883a 	mov	r4,r16
  801740:	01c06d84 	movi	r7,438
  801744:	103ff226 	beq	r2,zero,801710 <_fopen_r+0x3c>
  801748:	d9800017 	ldw	r6,0(sp)
  80174c:	0802d200 	call	802d20 <_open_r>
  801750:	10001816 	blt	r2,zero,8017b4 <_fopen_r+0xe0>
  801754:	00c02034 	movhi	r3,128
  801758:	18cc8204 	addi	r3,r3,12808
  80175c:	923fffcc 	andi	r8,r18,65535
  801760:	8880038d 	sth	r2,14(r17)
  801764:	00802034 	movhi	r2,128
  801768:	108ca104 	addi	r2,r2,12932
  80176c:	88800815 	stw	r2,32(r17)
  801770:	88c00915 	stw	r3,36(r17)
  801774:	00802034 	movhi	r2,128
  801778:	108c6804 	addi	r2,r2,12704
  80177c:	00c02034 	movhi	r3,128
  801780:	18cc6604 	addi	r3,r3,12696
  801784:	4200400c 	andi	r8,r8,256
  801788:	8c80030d 	sth	r18,12(r17)
  80178c:	8009883a 	mov	r4,r16
  801790:	880b883a 	mov	r5,r17
  801794:	000d883a 	mov	r6,zero
  801798:	01c00084 	movi	r7,2
  80179c:	88800a15 	stw	r2,40(r17)
  8017a0:	88c00b15 	stw	r3,44(r17)
  8017a4:	8c400715 	stw	r17,28(r17)
  8017a8:	403fd926 	beq	r8,zero,801710 <_fopen_r+0x3c>
  8017ac:	0801c840 	call	801c84 <_fseek_r>
  8017b0:	003fd706 	br	801710 <_fopen_r+0x3c>
  8017b4:	080146c0 	call	80146c <__sfp_lock_acquire>
  8017b8:	8800030d 	sth	zero,12(r17)
  8017bc:	08014700 	call	801470 <__sfp_lock_release>
  8017c0:	0023883a 	mov	r17,zero
  8017c4:	003fd206 	br	801710 <_fopen_r+0x3c>

008017c8 <fopen>:
  8017c8:	01802074 	movhi	r6,129
  8017cc:	31882504 	addi	r6,r6,8340
  8017d0:	2007883a 	mov	r3,r4
  8017d4:	31000017 	ldw	r4,0(r6)
  8017d8:	280d883a 	mov	r6,r5
  8017dc:	180b883a 	mov	r5,r3
  8017e0:	08016d41 	jmpi	8016d4 <_fopen_r>

008017e4 <fprintf>:
  8017e4:	defffc04 	addi	sp,sp,-16
  8017e8:	dfc00115 	stw	ra,4(sp)
  8017ec:	d9800215 	stw	r6,8(sp)
  8017f0:	d9c00315 	stw	r7,12(sp)
  8017f4:	d8800204 	addi	r2,sp,8
  8017f8:	100d883a 	mov	r6,r2
  8017fc:	d8800015 	stw	r2,0(sp)
  801800:	08054c40 	call	8054c4 <__vfprintf_internal>
  801804:	dfc00117 	ldw	ra,4(sp)
  801808:	dec00404 	addi	sp,sp,16
  80180c:	f800283a 	ret

00801810 <_fprintf_r>:
  801810:	defffd04 	addi	sp,sp,-12
  801814:	2807883a 	mov	r3,r5
  801818:	dfc00115 	stw	ra,4(sp)
  80181c:	d9c00215 	stw	r7,8(sp)
  801820:	d8800204 	addi	r2,sp,8
  801824:	300b883a 	mov	r5,r6
  801828:	1809883a 	mov	r4,r3
  80182c:	100d883a 	mov	r6,r2
  801830:	d8800015 	stw	r2,0(sp)
  801834:	08054c40 	call	8054c4 <__vfprintf_internal>
  801838:	dfc00117 	ldw	ra,4(sp)
  80183c:	dec00304 	addi	sp,sp,12
  801840:	f800283a 	ret

00801844 <_malloc_trim_r>:
  801844:	defffb04 	addi	sp,sp,-20
  801848:	dcc00315 	stw	r19,12(sp)
  80184c:	04c02074 	movhi	r19,129
  801850:	9cc22304 	addi	r19,r19,2188
  801854:	dc800215 	stw	r18,8(sp)
  801858:	dc400115 	stw	r17,4(sp)
  80185c:	dc000015 	stw	r16,0(sp)
  801860:	2823883a 	mov	r17,r5
  801864:	2025883a 	mov	r18,r4
  801868:	dfc00415 	stw	ra,16(sp)
  80186c:	080c0180 	call	80c018 <__malloc_lock>
  801870:	98800217 	ldw	r2,8(r19)
  801874:	9009883a 	mov	r4,r18
  801878:	000b883a 	mov	r5,zero
  80187c:	10c00117 	ldw	r3,4(r2)
  801880:	00bfff04 	movi	r2,-4
  801884:	18a0703a 	and	r16,r3,r2
  801888:	8463c83a 	sub	r17,r16,r17
  80188c:	8c43fbc4 	addi	r17,r17,4079
  801890:	8822d33a 	srli	r17,r17,12
  801894:	0083ffc4 	movi	r2,4095
  801898:	8c7fffc4 	addi	r17,r17,-1
  80189c:	8822933a 	slli	r17,r17,12
  8018a0:	1440060e 	bge	r2,r17,8018bc <_malloc_trim_r+0x78>
  8018a4:	08031280 	call	803128 <_sbrk_r>
  8018a8:	98c00217 	ldw	r3,8(r19)
  8018ac:	9009883a 	mov	r4,r18
  8018b0:	044bc83a 	sub	r5,zero,r17
  8018b4:	80c7883a 	add	r3,r16,r3
  8018b8:	10c00926 	beq	r2,r3,8018e0 <_malloc_trim_r+0x9c>
  8018bc:	080c0380 	call	80c038 <__malloc_unlock>
  8018c0:	0005883a 	mov	r2,zero
  8018c4:	dfc00417 	ldw	ra,16(sp)
  8018c8:	dcc00317 	ldw	r19,12(sp)
  8018cc:	dc800217 	ldw	r18,8(sp)
  8018d0:	dc400117 	ldw	r17,4(sp)
  8018d4:	dc000017 	ldw	r16,0(sp)
  8018d8:	dec00504 	addi	sp,sp,20
  8018dc:	f800283a 	ret
  8018e0:	9009883a 	mov	r4,r18
  8018e4:	08031280 	call	803128 <_sbrk_r>
  8018e8:	844dc83a 	sub	r6,r16,r17
  8018ec:	00ffffc4 	movi	r3,-1
  8018f0:	9009883a 	mov	r4,r18
  8018f4:	000b883a 	mov	r5,zero
  8018f8:	01c02074 	movhi	r7,129
  8018fc:	39cf7f04 	addi	r7,r7,15868
  801900:	31800054 	ori	r6,r6,1
  801904:	10c00926 	beq	r2,r3,80192c <_malloc_trim_r+0xe8>
  801908:	38800017 	ldw	r2,0(r7)
  80190c:	98c00217 	ldw	r3,8(r19)
  801910:	9009883a 	mov	r4,r18
  801914:	1445c83a 	sub	r2,r2,r17
  801918:	38800015 	stw	r2,0(r7)
  80191c:	19800115 	stw	r6,4(r3)
  801920:	080c0380 	call	80c038 <__malloc_unlock>
  801924:	00800044 	movi	r2,1
  801928:	003fe606 	br	8018c4 <_malloc_trim_r+0x80>
  80192c:	08031280 	call	803128 <_sbrk_r>
  801930:	99800217 	ldw	r6,8(r19)
  801934:	100f883a 	mov	r7,r2
  801938:	9009883a 	mov	r4,r18
  80193c:	1187c83a 	sub	r3,r2,r6
  801940:	008003c4 	movi	r2,15
  801944:	19400054 	ori	r5,r3,1
  801948:	10ffdc0e 	bge	r2,r3,8018bc <_malloc_trim_r+0x78>
  80194c:	00802074 	movhi	r2,129
  801950:	10882804 	addi	r2,r2,8352
  801954:	10c00017 	ldw	r3,0(r2)
  801958:	00802074 	movhi	r2,129
  80195c:	108f7f04 	addi	r2,r2,15868
  801960:	31400115 	stw	r5,4(r6)
  801964:	38c7c83a 	sub	r3,r7,r3
  801968:	10c00015 	stw	r3,0(r2)
  80196c:	003fd306 	br	8018bc <_malloc_trim_r+0x78>

00801970 <_free_r>:
  801970:	defffd04 	addi	sp,sp,-12
  801974:	dc400115 	stw	r17,4(sp)
  801978:	dc000015 	stw	r16,0(sp)
  80197c:	dfc00215 	stw	ra,8(sp)
  801980:	2821883a 	mov	r16,r5
  801984:	2023883a 	mov	r17,r4
  801988:	28005a26 	beq	r5,zero,801af4 <_free_r+0x184>
  80198c:	080c0180 	call	80c018 <__malloc_lock>
  801990:	823ffe04 	addi	r8,r16,-8
  801994:	41400117 	ldw	r5,4(r8)
  801998:	00bfff84 	movi	r2,-2
  80199c:	02802074 	movhi	r10,129
  8019a0:	52822304 	addi	r10,r10,2188
  8019a4:	288e703a 	and	r7,r5,r2
  8019a8:	41cd883a 	add	r6,r8,r7
  8019ac:	30c00117 	ldw	r3,4(r6)
  8019b0:	51000217 	ldw	r4,8(r10)
  8019b4:	00bfff04 	movi	r2,-4
  8019b8:	1892703a 	and	r9,r3,r2
  8019bc:	5017883a 	mov	r11,r10
  8019c0:	31006726 	beq	r6,r4,801b60 <_free_r+0x1f0>
  8019c4:	2880004c 	andi	r2,r5,1
  8019c8:	1005003a 	cmpeq	r2,r2,zero
  8019cc:	32400115 	stw	r9,4(r6)
  8019d0:	10001a1e 	bne	r2,zero,801a3c <_free_r+0xcc>
  8019d4:	000b883a 	mov	r5,zero
  8019d8:	3247883a 	add	r3,r6,r9
  8019dc:	18800117 	ldw	r2,4(r3)
  8019e0:	1080004c 	andi	r2,r2,1
  8019e4:	1000231e 	bne	r2,zero,801a74 <_free_r+0x104>
  8019e8:	280ac03a 	cmpne	r5,r5,zero
  8019ec:	3a4f883a 	add	r7,r7,r9
  8019f0:	2800451e 	bne	r5,zero,801b08 <_free_r+0x198>
  8019f4:	31000217 	ldw	r4,8(r6)
  8019f8:	00802074 	movhi	r2,129
  8019fc:	10822504 	addi	r2,r2,2196
  801a00:	20807b26 	beq	r4,r2,801bf0 <_free_r+0x280>
  801a04:	30800317 	ldw	r2,12(r6)
  801a08:	3a07883a 	add	r3,r7,r8
  801a0c:	19c00015 	stw	r7,0(r3)
  801a10:	11000215 	stw	r4,8(r2)
  801a14:	20800315 	stw	r2,12(r4)
  801a18:	38800054 	ori	r2,r7,1
  801a1c:	40800115 	stw	r2,4(r8)
  801a20:	28001a26 	beq	r5,zero,801a8c <_free_r+0x11c>
  801a24:	8809883a 	mov	r4,r17
  801a28:	dfc00217 	ldw	ra,8(sp)
  801a2c:	dc400117 	ldw	r17,4(sp)
  801a30:	dc000017 	ldw	r16,0(sp)
  801a34:	dec00304 	addi	sp,sp,12
  801a38:	080c0381 	jmpi	80c038 <__malloc_unlock>
  801a3c:	80bffe17 	ldw	r2,-8(r16)
  801a40:	50c00204 	addi	r3,r10,8
  801a44:	4091c83a 	sub	r8,r8,r2
  801a48:	41000217 	ldw	r4,8(r8)
  801a4c:	388f883a 	add	r7,r7,r2
  801a50:	20c06126 	beq	r4,r3,801bd8 <_free_r+0x268>
  801a54:	40800317 	ldw	r2,12(r8)
  801a58:	3247883a 	add	r3,r6,r9
  801a5c:	000b883a 	mov	r5,zero
  801a60:	11000215 	stw	r4,8(r2)
  801a64:	20800315 	stw	r2,12(r4)
  801a68:	18800117 	ldw	r2,4(r3)
  801a6c:	1080004c 	andi	r2,r2,1
  801a70:	103fdd26 	beq	r2,zero,8019e8 <_free_r+0x78>
  801a74:	38800054 	ori	r2,r7,1
  801a78:	3a07883a 	add	r3,r7,r8
  801a7c:	280ac03a 	cmpne	r5,r5,zero
  801a80:	40800115 	stw	r2,4(r8)
  801a84:	19c00015 	stw	r7,0(r3)
  801a88:	283fe61e 	bne	r5,zero,801a24 <_free_r+0xb4>
  801a8c:	00807fc4 	movi	r2,511
  801a90:	11c01f2e 	bgeu	r2,r7,801b10 <_free_r+0x1a0>
  801a94:	3806d27a 	srli	r3,r7,9
  801a98:	1800481e 	bne	r3,zero,801bbc <_free_r+0x24c>
  801a9c:	3804d0fa 	srli	r2,r7,3
  801aa0:	100690fa 	slli	r3,r2,3
  801aa4:	1acd883a 	add	r6,r3,r11
  801aa8:	31400217 	ldw	r5,8(r6)
  801aac:	31405926 	beq	r6,r5,801c14 <_free_r+0x2a4>
  801ab0:	28800117 	ldw	r2,4(r5)
  801ab4:	00ffff04 	movi	r3,-4
  801ab8:	10c4703a 	and	r2,r2,r3
  801abc:	3880022e 	bgeu	r7,r2,801ac8 <_free_r+0x158>
  801ac0:	29400217 	ldw	r5,8(r5)
  801ac4:	317ffa1e 	bne	r6,r5,801ab0 <_free_r+0x140>
  801ac8:	29800317 	ldw	r6,12(r5)
  801acc:	41800315 	stw	r6,12(r8)
  801ad0:	41400215 	stw	r5,8(r8)
  801ad4:	8809883a 	mov	r4,r17
  801ad8:	2a000315 	stw	r8,12(r5)
  801adc:	32000215 	stw	r8,8(r6)
  801ae0:	dfc00217 	ldw	ra,8(sp)
  801ae4:	dc400117 	ldw	r17,4(sp)
  801ae8:	dc000017 	ldw	r16,0(sp)
  801aec:	dec00304 	addi	sp,sp,12
  801af0:	080c0381 	jmpi	80c038 <__malloc_unlock>
  801af4:	dfc00217 	ldw	ra,8(sp)
  801af8:	dc400117 	ldw	r17,4(sp)
  801afc:	dc000017 	ldw	r16,0(sp)
  801b00:	dec00304 	addi	sp,sp,12
  801b04:	f800283a 	ret
  801b08:	31000217 	ldw	r4,8(r6)
  801b0c:	003fbd06 	br	801a04 <_free_r+0x94>
  801b10:	3806d0fa 	srli	r3,r7,3
  801b14:	00800044 	movi	r2,1
  801b18:	51400117 	ldw	r5,4(r10)
  801b1c:	180890fa 	slli	r4,r3,3
  801b20:	1807d0ba 	srai	r3,r3,2
  801b24:	22c9883a 	add	r4,r4,r11
  801b28:	21800217 	ldw	r6,8(r4)
  801b2c:	10c4983a 	sll	r2,r2,r3
  801b30:	41000315 	stw	r4,12(r8)
  801b34:	41800215 	stw	r6,8(r8)
  801b38:	288ab03a 	or	r5,r5,r2
  801b3c:	22000215 	stw	r8,8(r4)
  801b40:	8809883a 	mov	r4,r17
  801b44:	51400115 	stw	r5,4(r10)
  801b48:	32000315 	stw	r8,12(r6)
  801b4c:	dfc00217 	ldw	ra,8(sp)
  801b50:	dc400117 	ldw	r17,4(sp)
  801b54:	dc000017 	ldw	r16,0(sp)
  801b58:	dec00304 	addi	sp,sp,12
  801b5c:	080c0381 	jmpi	80c038 <__malloc_unlock>
  801b60:	2880004c 	andi	r2,r5,1
  801b64:	3a4d883a 	add	r6,r7,r9
  801b68:	1000071e 	bne	r2,zero,801b88 <_free_r+0x218>
  801b6c:	80bffe17 	ldw	r2,-8(r16)
  801b70:	4091c83a 	sub	r8,r8,r2
  801b74:	41000317 	ldw	r4,12(r8)
  801b78:	40c00217 	ldw	r3,8(r8)
  801b7c:	308d883a 	add	r6,r6,r2
  801b80:	20c00215 	stw	r3,8(r4)
  801b84:	19000315 	stw	r4,12(r3)
  801b88:	00802074 	movhi	r2,129
  801b8c:	10882704 	addi	r2,r2,8348
  801b90:	11000017 	ldw	r4,0(r2)
  801b94:	30c00054 	ori	r3,r6,1
  801b98:	52000215 	stw	r8,8(r10)
  801b9c:	40c00115 	stw	r3,4(r8)
  801ba0:	313fa036 	bltu	r6,r4,801a24 <_free_r+0xb4>
  801ba4:	00802074 	movhi	r2,129
  801ba8:	108f6704 	addi	r2,r2,15772
  801bac:	11400017 	ldw	r5,0(r2)
  801bb0:	8809883a 	mov	r4,r17
  801bb4:	08018440 	call	801844 <_malloc_trim_r>
  801bb8:	003f9a06 	br	801a24 <_free_r+0xb4>
  801bbc:	00800104 	movi	r2,4
  801bc0:	10c0072e 	bgeu	r2,r3,801be0 <_free_r+0x270>
  801bc4:	00800504 	movi	r2,20
  801bc8:	10c01936 	bltu	r2,r3,801c30 <_free_r+0x2c0>
  801bcc:	188016c4 	addi	r2,r3,91
  801bd0:	100690fa 	slli	r3,r2,3
  801bd4:	003fb306 	br	801aa4 <_free_r+0x134>
  801bd8:	01400044 	movi	r5,1
  801bdc:	003f7e06 	br	8019d8 <_free_r+0x68>
  801be0:	3804d1ba 	srli	r2,r7,6
  801be4:	10800e04 	addi	r2,r2,56
  801be8:	100690fa 	slli	r3,r2,3
  801bec:	003fad06 	br	801aa4 <_free_r+0x134>
  801bf0:	22000315 	stw	r8,12(r4)
  801bf4:	22000215 	stw	r8,8(r4)
  801bf8:	3a05883a 	add	r2,r7,r8
  801bfc:	38c00054 	ori	r3,r7,1
  801c00:	11c00015 	stw	r7,0(r2)
  801c04:	41000215 	stw	r4,8(r8)
  801c08:	40c00115 	stw	r3,4(r8)
  801c0c:	41000315 	stw	r4,12(r8)
  801c10:	003f8406 	br	801a24 <_free_r+0xb4>
  801c14:	1005d0ba 	srai	r2,r2,2
  801c18:	00c00044 	movi	r3,1
  801c1c:	51000117 	ldw	r4,4(r10)
  801c20:	1886983a 	sll	r3,r3,r2
  801c24:	20c8b03a 	or	r4,r4,r3
  801c28:	51000115 	stw	r4,4(r10)
  801c2c:	003fa706 	br	801acc <_free_r+0x15c>
  801c30:	00801504 	movi	r2,84
  801c34:	10c00436 	bltu	r2,r3,801c48 <_free_r+0x2d8>
  801c38:	3804d33a 	srli	r2,r7,12
  801c3c:	10801b84 	addi	r2,r2,110
  801c40:	100690fa 	slli	r3,r2,3
  801c44:	003f9706 	br	801aa4 <_free_r+0x134>
  801c48:	00805504 	movi	r2,340
  801c4c:	10c00436 	bltu	r2,r3,801c60 <_free_r+0x2f0>
  801c50:	3804d3fa 	srli	r2,r7,15
  801c54:	10801dc4 	addi	r2,r2,119
  801c58:	100690fa 	slli	r3,r2,3
  801c5c:	003f9106 	br	801aa4 <_free_r+0x134>
  801c60:	00815504 	movi	r2,1364
  801c64:	10c0032e 	bgeu	r2,r3,801c74 <_free_r+0x304>
  801c68:	00801f84 	movi	r2,126
  801c6c:	00c0fc04 	movi	r3,1008
  801c70:	003f8c06 	br	801aa4 <_free_r+0x134>
  801c74:	3804d4ba 	srli	r2,r7,18
  801c78:	10801f04 	addi	r2,r2,124
  801c7c:	100690fa 	slli	r3,r2,3
  801c80:	003f8806 	br	801aa4 <_free_r+0x134>

00801c84 <_fseek_r>:
  801c84:	deffe804 	addi	sp,sp,-96
  801c88:	dd801515 	stw	r22,84(sp)
  801c8c:	dcc01215 	stw	r19,72(sp)
  801c90:	dc801115 	stw	r18,68(sp)
  801c94:	dc000f15 	stw	r16,60(sp)
  801c98:	dfc01715 	stw	ra,92(sp)
  801c9c:	ddc01615 	stw	r23,88(sp)
  801ca0:	dd401415 	stw	r21,80(sp)
  801ca4:	dd001315 	stw	r20,76(sp)
  801ca8:	dc401015 	stw	r17,64(sp)
  801cac:	2025883a 	mov	r18,r4
  801cb0:	2821883a 	mov	r16,r5
  801cb4:	302d883a 	mov	r22,r6
  801cb8:	3827883a 	mov	r19,r7
  801cbc:	20000226 	beq	r4,zero,801cc8 <_fseek_r+0x44>
  801cc0:	20800e17 	ldw	r2,56(r4)
  801cc4:	10007826 	beq	r2,zero,801ea8 <_fseek_r+0x224>
  801cc8:	8080030b 	ldhu	r2,12(r16)
  801ccc:	00c04204 	movi	r3,264
  801cd0:	1080420c 	andi	r2,r2,264
  801cd4:	10c07926 	beq	r2,r3,801ebc <_fseek_r+0x238>
  801cd8:	85400a17 	ldw	r21,40(r16)
  801cdc:	a800ea26 	beq	r21,zero,802088 <_fseek_r+0x404>
  801ce0:	00800044 	movi	r2,1
  801ce4:	98805f26 	beq	r19,r2,801e64 <_fseek_r+0x1e0>
  801ce8:	00800084 	movi	r2,2
  801cec:	98801026 	beq	r19,r2,801d30 <_fseek_r+0xac>
  801cf0:	98000f26 	beq	r19,zero,801d30 <_fseek_r+0xac>
  801cf4:	00800584 	movi	r2,22
  801cf8:	013fffc4 	movi	r4,-1
  801cfc:	90800015 	stw	r2,0(r18)
  801d00:	2005883a 	mov	r2,r4
  801d04:	dfc01717 	ldw	ra,92(sp)
  801d08:	ddc01617 	ldw	r23,88(sp)
  801d0c:	dd801517 	ldw	r22,84(sp)
  801d10:	dd401417 	ldw	r21,80(sp)
  801d14:	dd001317 	ldw	r20,76(sp)
  801d18:	dcc01217 	ldw	r19,72(sp)
  801d1c:	dc801117 	ldw	r18,68(sp)
  801d20:	dc401017 	ldw	r17,64(sp)
  801d24:	dc000f17 	ldw	r16,60(sp)
  801d28:	dec01804 	addi	sp,sp,96
  801d2c:	f800283a 	ret
  801d30:	81800417 	ldw	r6,16(r16)
  801d34:	0023883a 	mov	r17,zero
  801d38:	002f883a 	mov	r23,zero
  801d3c:	3000a626 	beq	r6,zero,801fd8 <_fseek_r+0x354>
  801d40:	8100030b 	ldhu	r4,12(r16)
  801d44:	2082068c 	andi	r2,r4,2074
  801d48:	1000081e 	bne	r2,zero,801d6c <_fseek_r+0xe8>
  801d4c:	2081000c 	andi	r2,r4,1024
  801d50:	10001b1e 	bne	r2,zero,801dc0 <_fseek_r+0x13c>
  801d54:	00802034 	movhi	r2,128
  801d58:	108c6804 	addi	r2,r2,12704
  801d5c:	a8800926 	beq	r21,r2,801d84 <_fseek_r+0x100>
  801d60:	8080030b 	ldhu	r2,12(r16)
  801d64:	10820014 	ori	r2,r2,2048
  801d68:	8080030d 	sth	r2,12(r16)
  801d6c:	9009883a 	mov	r4,r18
  801d70:	800b883a 	mov	r5,r16
  801d74:	08010bc0 	call	8010bc <_fflush_r>
  801d78:	1000a326 	beq	r2,zero,802008 <_fseek_r+0x384>
  801d7c:	013fffc4 	movi	r4,-1
  801d80:	003fdf06 	br	801d00 <_fseek_r+0x7c>
  801d84:	8140038f 	ldh	r5,14(r16)
  801d88:	283ff516 	blt	r5,zero,801d60 <_fseek_r+0xdc>
  801d8c:	9009883a 	mov	r4,r18
  801d90:	d80d883a 	mov	r6,sp
  801d94:	08020e40 	call	8020e4 <_fstat_r>
  801d98:	103ff11e 	bne	r2,zero,801d60 <_fseek_r+0xdc>
  801d9c:	d8800117 	ldw	r2,4(sp)
  801da0:	00e00014 	movui	r3,32768
  801da4:	10bc000c 	andi	r2,r2,61440
  801da8:	10ffed1e 	bne	r2,r3,801d60 <_fseek_r+0xdc>
  801dac:	80c0030b 	ldhu	r3,12(r16)
  801db0:	00810004 	movi	r2,1024
  801db4:	80801315 	stw	r2,76(r16)
  801db8:	1886b03a 	or	r3,r3,r2
  801dbc:	80c0030d 	sth	r3,12(r16)
  801dc0:	9800701e 	bne	r19,zero,801f84 <_fseek_r+0x300>
  801dc4:	b029883a 	mov	r20,r22
  801dc8:	b804c03a 	cmpne	r2,r23,zero
  801dcc:	10003f1e 	bne	r2,zero,801ecc <_fseek_r+0x248>
  801dd0:	8100030b 	ldhu	r4,12(r16)
  801dd4:	2084000c 	andi	r2,r4,4096
  801dd8:	1000a126 	beq	r2,zero,802060 <_fseek_r+0x3dc>
  801ddc:	81801417 	ldw	r6,80(r16)
  801de0:	80c00117 	ldw	r3,4(r16)
  801de4:	81400c17 	ldw	r5,48(r16)
  801de8:	30e3c83a 	sub	r17,r6,r3
  801dec:	28008026 	beq	r5,zero,801ff0 <_fseek_r+0x36c>
  801df0:	81c00f17 	ldw	r7,60(r16)
  801df4:	89e3c83a 	sub	r17,r17,r7
  801df8:	80800e17 	ldw	r2,56(r16)
  801dfc:	81800417 	ldw	r6,16(r16)
  801e00:	88c7883a 	add	r3,r17,r3
  801e04:	1185c83a 	sub	r2,r2,r6
  801e08:	11cf883a 	add	r7,r2,r7
  801e0c:	1887c83a 	sub	r3,r3,r2
  801e10:	2088000c 	andi	r2,r4,8192
  801e14:	10003e1e 	bne	r2,zero,801f10 <_fseek_r+0x28c>
  801e18:	a0c03d16 	blt	r20,r3,801f10 <_fseek_r+0x28c>
  801e1c:	38c5883a 	add	r2,r7,r3
  801e20:	a0803b2e 	bgeu	r20,r2,801f10 <_fseek_r+0x28c>
  801e24:	a0c5c83a 	sub	r2,r20,r3
  801e28:	3887c83a 	sub	r3,r7,r2
  801e2c:	3085883a 	add	r2,r6,r2
  801e30:	80800015 	stw	r2,0(r16)
  801e34:	80c00115 	stw	r3,4(r16)
  801e38:	28000526 	beq	r5,zero,801e50 <_fseek_r+0x1cc>
  801e3c:	80801004 	addi	r2,r16,64
  801e40:	28800226 	beq	r5,r2,801e4c <_fseek_r+0x1c8>
  801e44:	9009883a 	mov	r4,r18
  801e48:	08019700 	call	801970 <_free_r>
  801e4c:	80000c15 	stw	zero,48(r16)
  801e50:	8080030b 	ldhu	r2,12(r16)
  801e54:	0009883a 	mov	r4,zero
  801e58:	10bff7cc 	andi	r2,r2,65503
  801e5c:	8080030d 	sth	r2,12(r16)
  801e60:	003fa706 	br	801d00 <_fseek_r+0x7c>
  801e64:	9009883a 	mov	r4,r18
  801e68:	800b883a 	mov	r5,r16
  801e6c:	08010bc0 	call	8010bc <_fflush_r>
  801e70:	8100030b 	ldhu	r4,12(r16)
  801e74:	2084000c 	andi	r2,r4,4096
  801e78:	10008726 	beq	r2,zero,802098 <_fseek_r+0x414>
  801e7c:	84401417 	ldw	r17,80(r16)
  801e80:	2080010c 	andi	r2,r4,4
  801e84:	1000171e 	bne	r2,zero,801ee4 <_fseek_r+0x260>
  801e88:	2080020c 	andi	r2,r4,8
  801e8c:	10003b26 	beq	r2,zero,801f7c <_fseek_r+0x2f8>
  801e90:	80800017 	ldw	r2,0(r16)
  801e94:	10003926 	beq	r2,zero,801f7c <_fseek_r+0x2f8>
  801e98:	81800417 	ldw	r6,16(r16)
  801e9c:	1185c83a 	sub	r2,r2,r6
  801ea0:	88a3883a 	add	r17,r17,r2
  801ea4:	00001606 	br	801f00 <_fseek_r+0x27c>
  801ea8:	080147c0 	call	80147c <__sinit>
  801eac:	8080030b 	ldhu	r2,12(r16)
  801eb0:	00c04204 	movi	r3,264
  801eb4:	1080420c 	andi	r2,r2,264
  801eb8:	10ff871e 	bne	r2,r3,801cd8 <_fseek_r+0x54>
  801ebc:	9009883a 	mov	r4,r18
  801ec0:	800b883a 	mov	r5,r16
  801ec4:	08010bc0 	call	8010bc <_fflush_r>
  801ec8:	003f8306 	br	801cd8 <_fseek_r+0x54>
  801ecc:	81400c17 	ldw	r5,48(r16)
  801ed0:	28004526 	beq	r5,zero,801fe8 <_fseek_r+0x364>
  801ed4:	8100030b 	ldhu	r4,12(r16)
  801ed8:	80c00117 	ldw	r3,4(r16)
  801edc:	81c00f17 	ldw	r7,60(r16)
  801ee0:	003fc506 	br	801df8 <_fseek_r+0x174>
  801ee4:	80c00117 	ldw	r3,4(r16)
  801ee8:	80800c17 	ldw	r2,48(r16)
  801eec:	88e3c83a 	sub	r17,r17,r3
  801ef0:	10002226 	beq	r2,zero,801f7c <_fseek_r+0x2f8>
  801ef4:	81c00f17 	ldw	r7,60(r16)
  801ef8:	81800417 	ldw	r6,16(r16)
  801efc:	89e3c83a 	sub	r17,r17,r7
  801f00:	b46d883a 	add	r22,r22,r17
  801f04:	0027883a 	mov	r19,zero
  801f08:	05c00044 	movi	r23,1
  801f0c:	003f8b06 	br	801d3c <_fseek_r+0xb8>
  801f10:	80801317 	ldw	r2,76(r16)
  801f14:	81400717 	ldw	r5,28(r16)
  801f18:	9009883a 	mov	r4,r18
  801f1c:	0085c83a 	sub	r2,zero,r2
  801f20:	a0a2703a 	and	r17,r20,r2
  801f24:	880d883a 	mov	r6,r17
  801f28:	000f883a 	mov	r7,zero
  801f2c:	a83ee83a 	callr	r21
  801f30:	00ffffc4 	movi	r3,-1
  801f34:	10ff8d26 	beq	r2,r3,801d6c <_fseek_r+0xe8>
  801f38:	80800417 	ldw	r2,16(r16)
  801f3c:	81400c17 	ldw	r5,48(r16)
  801f40:	80000115 	stw	zero,4(r16)
  801f44:	80800015 	stw	r2,0(r16)
  801f48:	28000526 	beq	r5,zero,801f60 <_fseek_r+0x2dc>
  801f4c:	80801004 	addi	r2,r16,64
  801f50:	28800226 	beq	r5,r2,801f5c <_fseek_r+0x2d8>
  801f54:	9009883a 	mov	r4,r18
  801f58:	08019700 	call	801970 <_free_r>
  801f5c:	80000c15 	stw	zero,48(r16)
  801f60:	8080030b 	ldhu	r2,12(r16)
  801f64:	a463c83a 	sub	r17,r20,r17
  801f68:	10bff7cc 	andi	r2,r2,65503
  801f6c:	8080030d 	sth	r2,12(r16)
  801f70:	88000c1e 	bne	r17,zero,801fa4 <_fseek_r+0x320>
  801f74:	0009883a 	mov	r4,zero
  801f78:	003f6106 	br	801d00 <_fseek_r+0x7c>
  801f7c:	81800417 	ldw	r6,16(r16)
  801f80:	003fdf06 	br	801f00 <_fseek_r+0x27c>
  801f84:	8140038f 	ldh	r5,14(r16)
  801f88:	9009883a 	mov	r4,r18
  801f8c:	d80d883a 	mov	r6,sp
  801f90:	08020e40 	call	8020e4 <_fstat_r>
  801f94:	103f751e 	bne	r2,zero,801d6c <_fseek_r+0xe8>
  801f98:	d8800417 	ldw	r2,16(sp)
  801f9c:	b0a9883a 	add	r20,r22,r2
  801fa0:	003f8906 	br	801dc8 <_fseek_r+0x144>
  801fa4:	9009883a 	mov	r4,r18
  801fa8:	800b883a 	mov	r5,r16
  801fac:	0802ee80 	call	802ee8 <__srefill_r>
  801fb0:	103f6e1e 	bne	r2,zero,801d6c <_fseek_r+0xe8>
  801fb4:	80c00117 	ldw	r3,4(r16)
  801fb8:	1c7f6c36 	bltu	r3,r17,801d6c <_fseek_r+0xe8>
  801fbc:	80800017 	ldw	r2,0(r16)
  801fc0:	1c47c83a 	sub	r3,r3,r17
  801fc4:	0009883a 	mov	r4,zero
  801fc8:	1445883a 	add	r2,r2,r17
  801fcc:	80c00115 	stw	r3,4(r16)
  801fd0:	80800015 	stw	r2,0(r16)
  801fd4:	003f4a06 	br	801d00 <_fseek_r+0x7c>
  801fd8:	9009883a 	mov	r4,r18
  801fdc:	800b883a 	mov	r5,r16
  801fe0:	08023b40 	call	8023b4 <__smakebuf_r>
  801fe4:	003f5606 	br	801d40 <_fseek_r+0xbc>
  801fe8:	8100030b 	ldhu	r4,12(r16)
  801fec:	80c00117 	ldw	r3,4(r16)
  801ff0:	80800017 	ldw	r2,0(r16)
  801ff4:	81800417 	ldw	r6,16(r16)
  801ff8:	1185c83a 	sub	r2,r2,r6
  801ffc:	10cf883a 	add	r7,r2,r3
  802000:	8887c83a 	sub	r3,r17,r2
  802004:	003f8206 	br	801e10 <_fseek_r+0x18c>
  802008:	81400717 	ldw	r5,28(r16)
  80200c:	b00d883a 	mov	r6,r22
  802010:	980f883a 	mov	r7,r19
  802014:	9009883a 	mov	r4,r18
  802018:	a83ee83a 	callr	r21
  80201c:	00ffffc4 	movi	r3,-1
  802020:	10ff5626 	beq	r2,r3,801d7c <_fseek_r+0xf8>
  802024:	81400c17 	ldw	r5,48(r16)
  802028:	28000526 	beq	r5,zero,802040 <_fseek_r+0x3bc>
  80202c:	80801004 	addi	r2,r16,64
  802030:	28800226 	beq	r5,r2,80203c <_fseek_r+0x3b8>
  802034:	9009883a 	mov	r4,r18
  802038:	08019700 	call	801970 <_free_r>
  80203c:	80000c15 	stw	zero,48(r16)
  802040:	8080030b 	ldhu	r2,12(r16)
  802044:	80c00417 	ldw	r3,16(r16)
  802048:	0009883a 	mov	r4,zero
  80204c:	10bdf7cc 	andi	r2,r2,63455
  802050:	8080030d 	sth	r2,12(r16)
  802054:	80c00015 	stw	r3,0(r16)
  802058:	80000115 	stw	zero,4(r16)
  80205c:	003f2806 	br	801d00 <_fseek_r+0x7c>
  802060:	81400717 	ldw	r5,28(r16)
  802064:	000d883a 	mov	r6,zero
  802068:	9009883a 	mov	r4,r18
  80206c:	01c00044 	movi	r7,1
  802070:	a83ee83a 	callr	r21
  802074:	100d883a 	mov	r6,r2
  802078:	00bfffc4 	movi	r2,-1
  80207c:	30bf3b26 	beq	r6,r2,801d6c <_fseek_r+0xe8>
  802080:	8100030b 	ldhu	r4,12(r16)
  802084:	003f5606 	br	801de0 <_fseek_r+0x15c>
  802088:	00800744 	movi	r2,29
  80208c:	013fffc4 	movi	r4,-1
  802090:	90800015 	stw	r2,0(r18)
  802094:	003f1a06 	br	801d00 <_fseek_r+0x7c>
  802098:	81400717 	ldw	r5,28(r16)
  80209c:	980f883a 	mov	r7,r19
  8020a0:	9009883a 	mov	r4,r18
  8020a4:	000d883a 	mov	r6,zero
  8020a8:	a83ee83a 	callr	r21
  8020ac:	1023883a 	mov	r17,r2
  8020b0:	00bfffc4 	movi	r2,-1
  8020b4:	88bf3126 	beq	r17,r2,801d7c <_fseek_r+0xf8>
  8020b8:	8100030b 	ldhu	r4,12(r16)
  8020bc:	003f7006 	br	801e80 <_fseek_r+0x1fc>

008020c0 <fseek>:
  8020c0:	00802074 	movhi	r2,129
  8020c4:	10882504 	addi	r2,r2,8340
  8020c8:	2013883a 	mov	r9,r4
  8020cc:	11000017 	ldw	r4,0(r2)
  8020d0:	2805883a 	mov	r2,r5
  8020d4:	300f883a 	mov	r7,r6
  8020d8:	480b883a 	mov	r5,r9
  8020dc:	100d883a 	mov	r6,r2
  8020e0:	0801c841 	jmpi	801c84 <_fseek_r>

008020e4 <_fstat_r>:
  8020e4:	defffd04 	addi	sp,sp,-12
  8020e8:	dc000015 	stw	r16,0(sp)
  8020ec:	04002074 	movhi	r16,129
  8020f0:	840f6604 	addi	r16,r16,15768
  8020f4:	dc400115 	stw	r17,4(sp)
  8020f8:	80000015 	stw	zero,0(r16)
  8020fc:	2023883a 	mov	r17,r4
  802100:	2809883a 	mov	r4,r5
  802104:	300b883a 	mov	r5,r6
  802108:	dfc00215 	stw	ra,8(sp)
  80210c:	080b95c0 	call	80b95c <fstat>
  802110:	1007883a 	mov	r3,r2
  802114:	00bfffc4 	movi	r2,-1
  802118:	18800626 	beq	r3,r2,802134 <_fstat_r+0x50>
  80211c:	1805883a 	mov	r2,r3
  802120:	dfc00217 	ldw	ra,8(sp)
  802124:	dc400117 	ldw	r17,4(sp)
  802128:	dc000017 	ldw	r16,0(sp)
  80212c:	dec00304 	addi	sp,sp,12
  802130:	f800283a 	ret
  802134:	80800017 	ldw	r2,0(r16)
  802138:	103ff826 	beq	r2,zero,80211c <_fstat_r+0x38>
  80213c:	88800015 	stw	r2,0(r17)
  802140:	1805883a 	mov	r2,r3
  802144:	dfc00217 	ldw	ra,8(sp)
  802148:	dc400117 	ldw	r17,4(sp)
  80214c:	dc000017 	ldw	r16,0(sp)
  802150:	dec00304 	addi	sp,sp,12
  802154:	f800283a 	ret

00802158 <_fwalk_reent>:
  802158:	defff704 	addi	sp,sp,-36
  80215c:	dcc00315 	stw	r19,12(sp)
  802160:	24c0b804 	addi	r19,r4,736
  802164:	dd800615 	stw	r22,24(sp)
  802168:	dd400515 	stw	r21,20(sp)
  80216c:	dfc00815 	stw	ra,32(sp)
  802170:	ddc00715 	stw	r23,28(sp)
  802174:	dd000415 	stw	r20,16(sp)
  802178:	dc800215 	stw	r18,8(sp)
  80217c:	dc400115 	stw	r17,4(sp)
  802180:	dc000015 	stw	r16,0(sp)
  802184:	202b883a 	mov	r21,r4
  802188:	282d883a 	mov	r22,r5
  80218c:	080146c0 	call	80146c <__sfp_lock_acquire>
  802190:	98002126 	beq	r19,zero,802218 <_fwalk_reent+0xc0>
  802194:	002f883a 	mov	r23,zero
  802198:	9c800117 	ldw	r18,4(r19)
  80219c:	9c000217 	ldw	r16,8(r19)
  8021a0:	90bfffc4 	addi	r2,r18,-1
  8021a4:	10000d16 	blt	r2,zero,8021dc <_fwalk_reent+0x84>
  8021a8:	0023883a 	mov	r17,zero
  8021ac:	053fffc4 	movi	r20,-1
  8021b0:	8080030f 	ldh	r2,12(r16)
  8021b4:	8c400044 	addi	r17,r17,1
  8021b8:	10000626 	beq	r2,zero,8021d4 <_fwalk_reent+0x7c>
  8021bc:	8080038f 	ldh	r2,14(r16)
  8021c0:	800b883a 	mov	r5,r16
  8021c4:	a809883a 	mov	r4,r21
  8021c8:	15000226 	beq	r2,r20,8021d4 <_fwalk_reent+0x7c>
  8021cc:	b03ee83a 	callr	r22
  8021d0:	b8aeb03a 	or	r23,r23,r2
  8021d4:	84001704 	addi	r16,r16,92
  8021d8:	947ff51e 	bne	r18,r17,8021b0 <_fwalk_reent+0x58>
  8021dc:	9cc00017 	ldw	r19,0(r19)
  8021e0:	983fed1e 	bne	r19,zero,802198 <_fwalk_reent+0x40>
  8021e4:	08014700 	call	801470 <__sfp_lock_release>
  8021e8:	b805883a 	mov	r2,r23
  8021ec:	dfc00817 	ldw	ra,32(sp)
  8021f0:	ddc00717 	ldw	r23,28(sp)
  8021f4:	dd800617 	ldw	r22,24(sp)
  8021f8:	dd400517 	ldw	r21,20(sp)
  8021fc:	dd000417 	ldw	r20,16(sp)
  802200:	dcc00317 	ldw	r19,12(sp)
  802204:	dc800217 	ldw	r18,8(sp)
  802208:	dc400117 	ldw	r17,4(sp)
  80220c:	dc000017 	ldw	r16,0(sp)
  802210:	dec00904 	addi	sp,sp,36
  802214:	f800283a 	ret
  802218:	002f883a 	mov	r23,zero
  80221c:	003ff106 	br	8021e4 <_fwalk_reent+0x8c>

00802220 <_fwalk>:
  802220:	defff804 	addi	sp,sp,-32
  802224:	dcc00315 	stw	r19,12(sp)
  802228:	24c0b804 	addi	r19,r4,736
  80222c:	dd400515 	stw	r21,20(sp)
  802230:	dfc00715 	stw	ra,28(sp)
  802234:	dd800615 	stw	r22,24(sp)
  802238:	dd000415 	stw	r20,16(sp)
  80223c:	dc800215 	stw	r18,8(sp)
  802240:	dc400115 	stw	r17,4(sp)
  802244:	dc000015 	stw	r16,0(sp)
  802248:	282b883a 	mov	r21,r5
  80224c:	080146c0 	call	80146c <__sfp_lock_acquire>
  802250:	98001f26 	beq	r19,zero,8022d0 <_fwalk+0xb0>
  802254:	002d883a 	mov	r22,zero
  802258:	9c800117 	ldw	r18,4(r19)
  80225c:	9c000217 	ldw	r16,8(r19)
  802260:	90bfffc4 	addi	r2,r18,-1
  802264:	10000c16 	blt	r2,zero,802298 <_fwalk+0x78>
  802268:	0023883a 	mov	r17,zero
  80226c:	053fffc4 	movi	r20,-1
  802270:	8080030f 	ldh	r2,12(r16)
  802274:	8c400044 	addi	r17,r17,1
  802278:	10000526 	beq	r2,zero,802290 <_fwalk+0x70>
  80227c:	8080038f 	ldh	r2,14(r16)
  802280:	8009883a 	mov	r4,r16
  802284:	15000226 	beq	r2,r20,802290 <_fwalk+0x70>
  802288:	a83ee83a 	callr	r21
  80228c:	b0acb03a 	or	r22,r22,r2
  802290:	84001704 	addi	r16,r16,92
  802294:	947ff61e 	bne	r18,r17,802270 <_fwalk+0x50>
  802298:	9cc00017 	ldw	r19,0(r19)
  80229c:	983fee1e 	bne	r19,zero,802258 <_fwalk+0x38>
  8022a0:	08014700 	call	801470 <__sfp_lock_release>
  8022a4:	b005883a 	mov	r2,r22
  8022a8:	dfc00717 	ldw	ra,28(sp)
  8022ac:	dd800617 	ldw	r22,24(sp)
  8022b0:	dd400517 	ldw	r21,20(sp)
  8022b4:	dd000417 	ldw	r20,16(sp)
  8022b8:	dcc00317 	ldw	r19,12(sp)
  8022bc:	dc800217 	ldw	r18,8(sp)
  8022c0:	dc400117 	ldw	r17,4(sp)
  8022c4:	dc000017 	ldw	r16,0(sp)
  8022c8:	dec00804 	addi	sp,sp,32
  8022cc:	f800283a 	ret
  8022d0:	002d883a 	mov	r22,zero
  8022d4:	003ff206 	br	8022a0 <_fwalk+0x80>

008022d8 <_fwrite_r>:
  8022d8:	defff604 	addi	sp,sp,-40
  8022dc:	dc400615 	stw	r17,24(sp)
  8022e0:	39a3383a 	mul	r17,r7,r6
  8022e4:	00800044 	movi	r2,1
  8022e8:	dcc00815 	stw	r19,32(sp)
  8022ec:	dc800715 	stw	r18,28(sp)
  8022f0:	dc000515 	stw	r16,20(sp)
  8022f4:	dfc00915 	stw	ra,36(sp)
  8022f8:	3825883a 	mov	r18,r7
  8022fc:	3027883a 	mov	r19,r6
  802300:	2021883a 	mov	r16,r4
  802304:	d9400015 	stw	r5,0(sp)
  802308:	d8800315 	stw	r2,12(sp)
  80230c:	dc400115 	stw	r17,4(sp)
  802310:	dc400415 	stw	r17,16(sp)
  802314:	dec00215 	stw	sp,8(sp)
  802318:	20000226 	beq	r4,zero,802324 <_fwrite_r+0x4c>
  80231c:	20800e17 	ldw	r2,56(r4)
  802320:	10001226 	beq	r2,zero,80236c <_fwrite_r+0x94>
  802324:	d9400a17 	ldw	r5,40(sp)
  802328:	8009883a 	mov	r4,r16
  80232c:	d9800204 	addi	r6,sp,8
  802330:	0806f780 	call	806f78 <__sfvwrite_r>
  802334:	980b883a 	mov	r5,r19
  802338:	10000426 	beq	r2,zero,80234c <_fwrite_r+0x74>
  80233c:	d9000417 	ldw	r4,16(sp)
  802340:	8909c83a 	sub	r4,r17,r4
  802344:	0800f700 	call	800f70 <__udivsi3>
  802348:	1025883a 	mov	r18,r2
  80234c:	9005883a 	mov	r2,r18
  802350:	dfc00917 	ldw	ra,36(sp)
  802354:	dcc00817 	ldw	r19,32(sp)
  802358:	dc800717 	ldw	r18,28(sp)
  80235c:	dc400617 	ldw	r17,24(sp)
  802360:	dc000517 	ldw	r16,20(sp)
  802364:	dec00a04 	addi	sp,sp,40
  802368:	f800283a 	ret
  80236c:	080147c0 	call	80147c <__sinit>
  802370:	003fec06 	br	802324 <_fwrite_r+0x4c>

00802374 <fwrite>:
  802374:	00802074 	movhi	r2,129
  802378:	10882504 	addi	r2,r2,8340
  80237c:	2017883a 	mov	r11,r4
  802380:	11000017 	ldw	r4,0(r2)
  802384:	defffe04 	addi	sp,sp,-8
  802388:	3013883a 	mov	r9,r6
  80238c:	2805883a 	mov	r2,r5
  802390:	d9c00015 	stw	r7,0(sp)
  802394:	580b883a 	mov	r5,r11
  802398:	100d883a 	mov	r6,r2
  80239c:	480f883a 	mov	r7,r9
  8023a0:	dfc00115 	stw	ra,4(sp)
  8023a4:	08022d80 	call	8022d8 <_fwrite_r>
  8023a8:	dfc00117 	ldw	ra,4(sp)
  8023ac:	dec00204 	addi	sp,sp,8
  8023b0:	f800283a 	ret

008023b4 <__smakebuf_r>:
  8023b4:	2880030b 	ldhu	r2,12(r5)
  8023b8:	deffed04 	addi	sp,sp,-76
  8023bc:	dc401015 	stw	r17,64(sp)
  8023c0:	1080008c 	andi	r2,r2,2
  8023c4:	dc000f15 	stw	r16,60(sp)
  8023c8:	dfc01215 	stw	ra,72(sp)
  8023cc:	dc801115 	stw	r18,68(sp)
  8023d0:	2821883a 	mov	r16,r5
  8023d4:	2023883a 	mov	r17,r4
  8023d8:	10000b26 	beq	r2,zero,802408 <__smakebuf_r+0x54>
  8023dc:	28c010c4 	addi	r3,r5,67
  8023e0:	00800044 	movi	r2,1
  8023e4:	28800515 	stw	r2,20(r5)
  8023e8:	28c00415 	stw	r3,16(r5)
  8023ec:	28c00015 	stw	r3,0(r5)
  8023f0:	dfc01217 	ldw	ra,72(sp)
  8023f4:	dc801117 	ldw	r18,68(sp)
  8023f8:	dc401017 	ldw	r17,64(sp)
  8023fc:	dc000f17 	ldw	r16,60(sp)
  802400:	dec01304 	addi	sp,sp,76
  802404:	f800283a 	ret
  802408:	2940038f 	ldh	r5,14(r5)
  80240c:	28002116 	blt	r5,zero,802494 <__smakebuf_r+0xe0>
  802410:	d80d883a 	mov	r6,sp
  802414:	08020e40 	call	8020e4 <_fstat_r>
  802418:	10001e16 	blt	r2,zero,802494 <__smakebuf_r+0xe0>
  80241c:	d8800117 	ldw	r2,4(sp)
  802420:	00e00014 	movui	r3,32768
  802424:	113c000c 	andi	r4,r2,61440
  802428:	20c03126 	beq	r4,r3,8024f0 <__smakebuf_r+0x13c>
  80242c:	8080030b 	ldhu	r2,12(r16)
  802430:	00c80004 	movi	r3,8192
  802434:	10820014 	ori	r2,r2,2048
  802438:	8080030d 	sth	r2,12(r16)
  80243c:	20c01e26 	beq	r4,r3,8024b8 <__smakebuf_r+0x104>
  802440:	04810004 	movi	r18,1024
  802444:	8809883a 	mov	r4,r17
  802448:	900b883a 	mov	r5,r18
  80244c:	08025480 	call	802548 <_malloc_r>
  802450:	1009883a 	mov	r4,r2
  802454:	10003126 	beq	r2,zero,80251c <__smakebuf_r+0x168>
  802458:	80c0030b 	ldhu	r3,12(r16)
  80245c:	00802034 	movhi	r2,128
  802460:	10855804 	addi	r2,r2,5472
  802464:	88800f15 	stw	r2,60(r17)
  802468:	18c02014 	ori	r3,r3,128
  80246c:	84800515 	stw	r18,20(r16)
  802470:	80c0030d 	sth	r3,12(r16)
  802474:	81000415 	stw	r4,16(r16)
  802478:	81000015 	stw	r4,0(r16)
  80247c:	dfc01217 	ldw	ra,72(sp)
  802480:	dc801117 	ldw	r18,68(sp)
  802484:	dc401017 	ldw	r17,64(sp)
  802488:	dc000f17 	ldw	r16,60(sp)
  80248c:	dec01304 	addi	sp,sp,76
  802490:	f800283a 	ret
  802494:	80c0030b 	ldhu	r3,12(r16)
  802498:	1880200c 	andi	r2,r3,128
  80249c:	10000426 	beq	r2,zero,8024b0 <__smakebuf_r+0xfc>
  8024a0:	04801004 	movi	r18,64
  8024a4:	18820014 	ori	r2,r3,2048
  8024a8:	8080030d 	sth	r2,12(r16)
  8024ac:	003fe506 	br	802444 <__smakebuf_r+0x90>
  8024b0:	04810004 	movi	r18,1024
  8024b4:	003ffb06 	br	8024a4 <__smakebuf_r+0xf0>
  8024b8:	8140038f 	ldh	r5,14(r16)
  8024bc:	8809883a 	mov	r4,r17
  8024c0:	08074140 	call	807414 <_isatty_r>
  8024c4:	103fde26 	beq	r2,zero,802440 <__smakebuf_r+0x8c>
  8024c8:	8080030b 	ldhu	r2,12(r16)
  8024cc:	80c010c4 	addi	r3,r16,67
  8024d0:	04810004 	movi	r18,1024
  8024d4:	10800054 	ori	r2,r2,1
  8024d8:	8080030d 	sth	r2,12(r16)
  8024dc:	00800044 	movi	r2,1
  8024e0:	80c00415 	stw	r3,16(r16)
  8024e4:	80800515 	stw	r2,20(r16)
  8024e8:	80c00015 	stw	r3,0(r16)
  8024ec:	003fd506 	br	802444 <__smakebuf_r+0x90>
  8024f0:	80c00a17 	ldw	r3,40(r16)
  8024f4:	00802034 	movhi	r2,128
  8024f8:	108c6804 	addi	r2,r2,12704
  8024fc:	18bfcb1e 	bne	r3,r2,80242c <__smakebuf_r+0x78>
  802500:	8080030b 	ldhu	r2,12(r16)
  802504:	00c10004 	movi	r3,1024
  802508:	1825883a 	mov	r18,r3
  80250c:	10c4b03a 	or	r2,r2,r3
  802510:	8080030d 	sth	r2,12(r16)
  802514:	80c01315 	stw	r3,76(r16)
  802518:	003fca06 	br	802444 <__smakebuf_r+0x90>
  80251c:	8100030b 	ldhu	r4,12(r16)
  802520:	2080800c 	andi	r2,r4,512
  802524:	103fb21e 	bne	r2,zero,8023f0 <__smakebuf_r+0x3c>
  802528:	80c010c4 	addi	r3,r16,67
  80252c:	21000094 	ori	r4,r4,2
  802530:	00800044 	movi	r2,1
  802534:	80800515 	stw	r2,20(r16)
  802538:	8100030d 	sth	r4,12(r16)
  80253c:	80c00415 	stw	r3,16(r16)
  802540:	80c00015 	stw	r3,0(r16)
  802544:	003faa06 	br	8023f0 <__smakebuf_r+0x3c>

00802548 <_malloc_r>:
  802548:	defff604 	addi	sp,sp,-40
  80254c:	28c002c4 	addi	r3,r5,11
  802550:	00800584 	movi	r2,22
  802554:	dc800215 	stw	r18,8(sp)
  802558:	dfc00915 	stw	ra,36(sp)
  80255c:	df000815 	stw	fp,32(sp)
  802560:	ddc00715 	stw	r23,28(sp)
  802564:	dd800615 	stw	r22,24(sp)
  802568:	dd400515 	stw	r21,20(sp)
  80256c:	dd000415 	stw	r20,16(sp)
  802570:	dcc00315 	stw	r19,12(sp)
  802574:	dc400115 	stw	r17,4(sp)
  802578:	dc000015 	stw	r16,0(sp)
  80257c:	2025883a 	mov	r18,r4
  802580:	10c01236 	bltu	r2,r3,8025cc <_malloc_r+0x84>
  802584:	04400404 	movi	r17,16
  802588:	8940142e 	bgeu	r17,r5,8025dc <_malloc_r+0x94>
  80258c:	00800304 	movi	r2,12
  802590:	0007883a 	mov	r3,zero
  802594:	90800015 	stw	r2,0(r18)
  802598:	1805883a 	mov	r2,r3
  80259c:	dfc00917 	ldw	ra,36(sp)
  8025a0:	df000817 	ldw	fp,32(sp)
  8025a4:	ddc00717 	ldw	r23,28(sp)
  8025a8:	dd800617 	ldw	r22,24(sp)
  8025ac:	dd400517 	ldw	r21,20(sp)
  8025b0:	dd000417 	ldw	r20,16(sp)
  8025b4:	dcc00317 	ldw	r19,12(sp)
  8025b8:	dc800217 	ldw	r18,8(sp)
  8025bc:	dc400117 	ldw	r17,4(sp)
  8025c0:	dc000017 	ldw	r16,0(sp)
  8025c4:	dec00a04 	addi	sp,sp,40
  8025c8:	f800283a 	ret
  8025cc:	00bffe04 	movi	r2,-8
  8025d0:	18a2703a 	and	r17,r3,r2
  8025d4:	883fed16 	blt	r17,zero,80258c <_malloc_r+0x44>
  8025d8:	897fec36 	bltu	r17,r5,80258c <_malloc_r+0x44>
  8025dc:	9009883a 	mov	r4,r18
  8025e0:	080c0180 	call	80c018 <__malloc_lock>
  8025e4:	00807dc4 	movi	r2,503
  8025e8:	14402b2e 	bgeu	r2,r17,802698 <_malloc_r+0x150>
  8025ec:	8806d27a 	srli	r3,r17,9
  8025f0:	18003f1e 	bne	r3,zero,8026f0 <_malloc_r+0x1a8>
  8025f4:	880cd0fa 	srli	r6,r17,3
  8025f8:	300490fa 	slli	r2,r6,3
  8025fc:	02c02074 	movhi	r11,129
  802600:	5ac22304 	addi	r11,r11,2188
  802604:	12cb883a 	add	r5,r2,r11
  802608:	2c000317 	ldw	r16,12(r5)
  80260c:	580f883a 	mov	r7,r11
  802610:	2c00041e 	bne	r5,r16,802624 <_malloc_r+0xdc>
  802614:	00000a06 	br	802640 <_malloc_r+0xf8>
  802618:	1800860e 	bge	r3,zero,802834 <_malloc_r+0x2ec>
  80261c:	84000317 	ldw	r16,12(r16)
  802620:	2c000726 	beq	r5,r16,802640 <_malloc_r+0xf8>
  802624:	80800117 	ldw	r2,4(r16)
  802628:	00ffff04 	movi	r3,-4
  80262c:	10c8703a 	and	r4,r2,r3
  802630:	2447c83a 	sub	r3,r4,r17
  802634:	008003c4 	movi	r2,15
  802638:	10fff70e 	bge	r2,r3,802618 <_malloc_r+0xd0>
  80263c:	31bfffc4 	addi	r6,r6,-1
  802640:	32400044 	addi	r9,r6,1
  802644:	02802074 	movhi	r10,129
  802648:	52822504 	addi	r10,r10,2196
  80264c:	54000217 	ldw	r16,8(r10)
  802650:	8280a026 	beq	r16,r10,8028d4 <_malloc_r+0x38c>
  802654:	80800117 	ldw	r2,4(r16)
  802658:	00ffff04 	movi	r3,-4
  80265c:	10ca703a 	and	r5,r2,r3
  802660:	2c4dc83a 	sub	r6,r5,r17
  802664:	008003c4 	movi	r2,15
  802668:	11808316 	blt	r2,r6,802878 <_malloc_r+0x330>
  80266c:	52800315 	stw	r10,12(r10)
  802670:	52800215 	stw	r10,8(r10)
  802674:	30002916 	blt	r6,zero,80271c <_malloc_r+0x1d4>
  802678:	8147883a 	add	r3,r16,r5
  80267c:	18800117 	ldw	r2,4(r3)
  802680:	9009883a 	mov	r4,r18
  802684:	10800054 	ori	r2,r2,1
  802688:	18800115 	stw	r2,4(r3)
  80268c:	080c0380 	call	80c038 <__malloc_unlock>
  802690:	80c00204 	addi	r3,r16,8
  802694:	003fc006 	br	802598 <_malloc_r+0x50>
  802698:	02c02074 	movhi	r11,129
  80269c:	5ac22304 	addi	r11,r11,2188
  8026a0:	8ac5883a 	add	r2,r17,r11
  8026a4:	14000317 	ldw	r16,12(r2)
  8026a8:	580f883a 	mov	r7,r11
  8026ac:	8806d0fa 	srli	r3,r17,3
  8026b0:	14006c26 	beq	r2,r16,802864 <_malloc_r+0x31c>
  8026b4:	80c00117 	ldw	r3,4(r16)
  8026b8:	00bfff04 	movi	r2,-4
  8026bc:	81800317 	ldw	r6,12(r16)
  8026c0:	1886703a 	and	r3,r3,r2
  8026c4:	80c7883a 	add	r3,r16,r3
  8026c8:	18800117 	ldw	r2,4(r3)
  8026cc:	81400217 	ldw	r5,8(r16)
  8026d0:	9009883a 	mov	r4,r18
  8026d4:	10800054 	ori	r2,r2,1
  8026d8:	18800115 	stw	r2,4(r3)
  8026dc:	31400215 	stw	r5,8(r6)
  8026e0:	29800315 	stw	r6,12(r5)
  8026e4:	080c0380 	call	80c038 <__malloc_unlock>
  8026e8:	80c00204 	addi	r3,r16,8
  8026ec:	003faa06 	br	802598 <_malloc_r+0x50>
  8026f0:	00800104 	movi	r2,4
  8026f4:	10c0052e 	bgeu	r2,r3,80270c <_malloc_r+0x1c4>
  8026f8:	00800504 	movi	r2,20
  8026fc:	10c07836 	bltu	r2,r3,8028e0 <_malloc_r+0x398>
  802700:	198016c4 	addi	r6,r3,91
  802704:	300490fa 	slli	r2,r6,3
  802708:	003fbc06 	br	8025fc <_malloc_r+0xb4>
  80270c:	8804d1ba 	srli	r2,r17,6
  802710:	11800e04 	addi	r6,r2,56
  802714:	300490fa 	slli	r2,r6,3
  802718:	003fb806 	br	8025fc <_malloc_r+0xb4>
  80271c:	00807fc4 	movi	r2,511
  802720:	1140bb36 	bltu	r2,r5,802a10 <_malloc_r+0x4c8>
  802724:	2806d0fa 	srli	r3,r5,3
  802728:	573ffe04 	addi	fp,r10,-8
  80272c:	00800044 	movi	r2,1
  802730:	180890fa 	slli	r4,r3,3
  802734:	1807d0ba 	srai	r3,r3,2
  802738:	e1c00117 	ldw	r7,4(fp)
  80273c:	5909883a 	add	r4,r11,r4
  802740:	21400217 	ldw	r5,8(r4)
  802744:	10c4983a 	sll	r2,r2,r3
  802748:	81000315 	stw	r4,12(r16)
  80274c:	81400215 	stw	r5,8(r16)
  802750:	388eb03a 	or	r7,r7,r2
  802754:	2c000315 	stw	r16,12(r5)
  802758:	24000215 	stw	r16,8(r4)
  80275c:	e1c00115 	stw	r7,4(fp)
  802760:	4807883a 	mov	r3,r9
  802764:	4800cd16 	blt	r9,zero,802a9c <_malloc_r+0x554>
  802768:	1807d0ba 	srai	r3,r3,2
  80276c:	00800044 	movi	r2,1
  802770:	10c8983a 	sll	r4,r2,r3
  802774:	39004436 	bltu	r7,r4,802888 <_malloc_r+0x340>
  802778:	21c4703a 	and	r2,r4,r7
  80277c:	10000a1e 	bne	r2,zero,8027a8 <_malloc_r+0x260>
  802780:	2109883a 	add	r4,r4,r4
  802784:	00bfff04 	movi	r2,-4
  802788:	4884703a 	and	r2,r9,r2
  80278c:	3906703a 	and	r3,r7,r4
  802790:	12400104 	addi	r9,r2,4
  802794:	1800041e 	bne	r3,zero,8027a8 <_malloc_r+0x260>
  802798:	2109883a 	add	r4,r4,r4
  80279c:	3904703a 	and	r2,r7,r4
  8027a0:	4a400104 	addi	r9,r9,4
  8027a4:	103ffc26 	beq	r2,zero,802798 <_malloc_r+0x250>
  8027a8:	480490fa 	slli	r2,r9,3
  8027ac:	4819883a 	mov	r12,r9
  8027b0:	023fff04 	movi	r8,-4
  8027b4:	589b883a 	add	r13,r11,r2
  8027b8:	6807883a 	mov	r3,r13
  8027bc:	014003c4 	movi	r5,15
  8027c0:	1c000317 	ldw	r16,12(r3)
  8027c4:	1c00041e 	bne	r3,r16,8027d8 <_malloc_r+0x290>
  8027c8:	0000a706 	br	802a68 <_malloc_r+0x520>
  8027cc:	3000ab0e 	bge	r6,zero,802a7c <_malloc_r+0x534>
  8027d0:	84000317 	ldw	r16,12(r16)
  8027d4:	1c00a426 	beq	r3,r16,802a68 <_malloc_r+0x520>
  8027d8:	80800117 	ldw	r2,4(r16)
  8027dc:	1204703a 	and	r2,r2,r8
  8027e0:	144dc83a 	sub	r6,r2,r17
  8027e4:	29bff90e 	bge	r5,r6,8027cc <_malloc_r+0x284>
  8027e8:	81000317 	ldw	r4,12(r16)
  8027ec:	80c00217 	ldw	r3,8(r16)
  8027f0:	89400054 	ori	r5,r17,1
  8027f4:	8445883a 	add	r2,r16,r17
  8027f8:	20c00215 	stw	r3,8(r4)
  8027fc:	19000315 	stw	r4,12(r3)
  802800:	81400115 	stw	r5,4(r16)
  802804:	1187883a 	add	r3,r2,r6
  802808:	31000054 	ori	r4,r6,1
  80280c:	50800315 	stw	r2,12(r10)
  802810:	50800215 	stw	r2,8(r10)
  802814:	19800015 	stw	r6,0(r3)
  802818:	11000115 	stw	r4,4(r2)
  80281c:	12800215 	stw	r10,8(r2)
  802820:	12800315 	stw	r10,12(r2)
  802824:	9009883a 	mov	r4,r18
  802828:	080c0380 	call	80c038 <__malloc_unlock>
  80282c:	80c00204 	addi	r3,r16,8
  802830:	003f5906 	br	802598 <_malloc_r+0x50>
  802834:	8109883a 	add	r4,r16,r4
  802838:	20800117 	ldw	r2,4(r4)
  80283c:	80c00217 	ldw	r3,8(r16)
  802840:	81400317 	ldw	r5,12(r16)
  802844:	10800054 	ori	r2,r2,1
  802848:	20800115 	stw	r2,4(r4)
  80284c:	28c00215 	stw	r3,8(r5)
  802850:	19400315 	stw	r5,12(r3)
  802854:	9009883a 	mov	r4,r18
  802858:	080c0380 	call	80c038 <__malloc_unlock>
  80285c:	80c00204 	addi	r3,r16,8
  802860:	003f4d06 	br	802598 <_malloc_r+0x50>
  802864:	80800204 	addi	r2,r16,8
  802868:	14000317 	ldw	r16,12(r2)
  80286c:	143f911e 	bne	r2,r16,8026b4 <_malloc_r+0x16c>
  802870:	1a400084 	addi	r9,r3,2
  802874:	003f7306 	br	802644 <_malloc_r+0xfc>
  802878:	88c00054 	ori	r3,r17,1
  80287c:	8445883a 	add	r2,r16,r17
  802880:	80c00115 	stw	r3,4(r16)
  802884:	003fdf06 	br	802804 <_malloc_r+0x2bc>
  802888:	e4000217 	ldw	r16,8(fp)
  80288c:	00bfff04 	movi	r2,-4
  802890:	80c00117 	ldw	r3,4(r16)
  802894:	802d883a 	mov	r22,r16
  802898:	18aa703a 	and	r21,r3,r2
  80289c:	ac401636 	bltu	r21,r17,8028f8 <_malloc_r+0x3b0>
  8028a0:	ac49c83a 	sub	r4,r21,r17
  8028a4:	008003c4 	movi	r2,15
  8028a8:	1100130e 	bge	r2,r4,8028f8 <_malloc_r+0x3b0>
  8028ac:	88800054 	ori	r2,r17,1
  8028b0:	8447883a 	add	r3,r16,r17
  8028b4:	80800115 	stw	r2,4(r16)
  8028b8:	20800054 	ori	r2,r4,1
  8028bc:	18800115 	stw	r2,4(r3)
  8028c0:	e0c00215 	stw	r3,8(fp)
  8028c4:	9009883a 	mov	r4,r18
  8028c8:	080c0380 	call	80c038 <__malloc_unlock>
  8028cc:	80c00204 	addi	r3,r16,8
  8028d0:	003f3106 	br	802598 <_malloc_r+0x50>
  8028d4:	39c00117 	ldw	r7,4(r7)
  8028d8:	573ffe04 	addi	fp,r10,-8
  8028dc:	003fa006 	br	802760 <_malloc_r+0x218>
  8028e0:	00801504 	movi	r2,84
  8028e4:	10c06736 	bltu	r2,r3,802a84 <_malloc_r+0x53c>
  8028e8:	8804d33a 	srli	r2,r17,12
  8028ec:	11801b84 	addi	r6,r2,110
  8028f0:	300490fa 	slli	r2,r6,3
  8028f4:	003f4106 	br	8025fc <_malloc_r+0xb4>
  8028f8:	d0a74417 	ldw	r2,-25328(gp)
  8028fc:	d0e00517 	ldw	r3,-32748(gp)
  802900:	053fffc4 	movi	r20,-1
  802904:	10800404 	addi	r2,r2,16
  802908:	88a7883a 	add	r19,r17,r2
  80290c:	1d000326 	beq	r3,r20,80291c <_malloc_r+0x3d4>
  802910:	98c3ffc4 	addi	r3,r19,4095
  802914:	00bc0004 	movi	r2,-4096
  802918:	18a6703a 	and	r19,r3,r2
  80291c:	9009883a 	mov	r4,r18
  802920:	980b883a 	mov	r5,r19
  802924:	08031280 	call	803128 <_sbrk_r>
  802928:	1009883a 	mov	r4,r2
  80292c:	15000426 	beq	r2,r20,802940 <_malloc_r+0x3f8>
  802930:	854b883a 	add	r5,r16,r21
  802934:	1029883a 	mov	r20,r2
  802938:	11405a2e 	bgeu	r2,r5,802aa4 <_malloc_r+0x55c>
  80293c:	87000c26 	beq	r16,fp,802970 <_malloc_r+0x428>
  802940:	e4000217 	ldw	r16,8(fp)
  802944:	80c00117 	ldw	r3,4(r16)
  802948:	00bfff04 	movi	r2,-4
  80294c:	1884703a 	and	r2,r3,r2
  802950:	14400336 	bltu	r2,r17,802960 <_malloc_r+0x418>
  802954:	1449c83a 	sub	r4,r2,r17
  802958:	008003c4 	movi	r2,15
  80295c:	113fd316 	blt	r2,r4,8028ac <_malloc_r+0x364>
  802960:	9009883a 	mov	r4,r18
  802964:	080c0380 	call	80c038 <__malloc_unlock>
  802968:	0007883a 	mov	r3,zero
  80296c:	003f0a06 	br	802598 <_malloc_r+0x50>
  802970:	05c02074 	movhi	r23,129
  802974:	bdcf7f04 	addi	r23,r23,15868
  802978:	b8800017 	ldw	r2,0(r23)
  80297c:	988d883a 	add	r6,r19,r2
  802980:	b9800015 	stw	r6,0(r23)
  802984:	d0e00517 	ldw	r3,-32748(gp)
  802988:	00bfffc4 	movi	r2,-1
  80298c:	18808e26 	beq	r3,r2,802bc8 <_malloc_r+0x680>
  802990:	2145c83a 	sub	r2,r4,r5
  802994:	3085883a 	add	r2,r6,r2
  802998:	b8800015 	stw	r2,0(r23)
  80299c:	20c001cc 	andi	r3,r4,7
  8029a0:	18005f1e 	bne	r3,zero,802b20 <_malloc_r+0x5d8>
  8029a4:	000b883a 	mov	r5,zero
  8029a8:	a4c5883a 	add	r2,r20,r19
  8029ac:	1083ffcc 	andi	r2,r2,4095
  8029b0:	00c40004 	movi	r3,4096
  8029b4:	1887c83a 	sub	r3,r3,r2
  8029b8:	28e7883a 	add	r19,r5,r3
  8029bc:	9009883a 	mov	r4,r18
  8029c0:	980b883a 	mov	r5,r19
  8029c4:	08031280 	call	803128 <_sbrk_r>
  8029c8:	1007883a 	mov	r3,r2
  8029cc:	00bfffc4 	movi	r2,-1
  8029d0:	18807a26 	beq	r3,r2,802bbc <_malloc_r+0x674>
  8029d4:	1d05c83a 	sub	r2,r3,r20
  8029d8:	9885883a 	add	r2,r19,r2
  8029dc:	10c00054 	ori	r3,r2,1
  8029e0:	b8800017 	ldw	r2,0(r23)
  8029e4:	a021883a 	mov	r16,r20
  8029e8:	a0c00115 	stw	r3,4(r20)
  8029ec:	9885883a 	add	r2,r19,r2
  8029f0:	b8800015 	stw	r2,0(r23)
  8029f4:	e5000215 	stw	r20,8(fp)
  8029f8:	b7003626 	beq	r22,fp,802ad4 <_malloc_r+0x58c>
  8029fc:	018003c4 	movi	r6,15
  802a00:	35404b36 	bltu	r6,r21,802b30 <_malloc_r+0x5e8>
  802a04:	00800044 	movi	r2,1
  802a08:	a0800115 	stw	r2,4(r20)
  802a0c:	003fcd06 	br	802944 <_malloc_r+0x3fc>
  802a10:	2808d27a 	srli	r4,r5,9
  802a14:	2000371e 	bne	r4,zero,802af4 <_malloc_r+0x5ac>
  802a18:	2808d0fa 	srli	r4,r5,3
  802a1c:	200690fa 	slli	r3,r4,3
  802a20:	1ad1883a 	add	r8,r3,r11
  802a24:	41800217 	ldw	r6,8(r8)
  802a28:	41805b26 	beq	r8,r6,802b98 <_malloc_r+0x650>
  802a2c:	30800117 	ldw	r2,4(r6)
  802a30:	00ffff04 	movi	r3,-4
  802a34:	10c4703a 	and	r2,r2,r3
  802a38:	2880022e 	bgeu	r5,r2,802a44 <_malloc_r+0x4fc>
  802a3c:	31800217 	ldw	r6,8(r6)
  802a40:	41bffa1e 	bne	r8,r6,802a2c <_malloc_r+0x4e4>
  802a44:	32000317 	ldw	r8,12(r6)
  802a48:	39c00117 	ldw	r7,4(r7)
  802a4c:	82000315 	stw	r8,12(r16)
  802a50:	81800215 	stw	r6,8(r16)
  802a54:	07002074 	movhi	fp,129
  802a58:	e7022304 	addi	fp,fp,2188
  802a5c:	34000315 	stw	r16,12(r6)
  802a60:	44000215 	stw	r16,8(r8)
  802a64:	003f3e06 	br	802760 <_malloc_r+0x218>
  802a68:	63000044 	addi	r12,r12,1
  802a6c:	608000cc 	andi	r2,r12,3
  802a70:	10005d26 	beq	r2,zero,802be8 <_malloc_r+0x6a0>
  802a74:	18c00204 	addi	r3,r3,8
  802a78:	003f5106 	br	8027c0 <_malloc_r+0x278>
  802a7c:	8089883a 	add	r4,r16,r2
  802a80:	003f6d06 	br	802838 <_malloc_r+0x2f0>
  802a84:	00805504 	movi	r2,340
  802a88:	10c02036 	bltu	r2,r3,802b0c <_malloc_r+0x5c4>
  802a8c:	8804d3fa 	srli	r2,r17,15
  802a90:	11801dc4 	addi	r6,r2,119
  802a94:	300490fa 	slli	r2,r6,3
  802a98:	003ed806 	br	8025fc <_malloc_r+0xb4>
  802a9c:	48c000c4 	addi	r3,r9,3
  802aa0:	003f3106 	br	802768 <_malloc_r+0x220>
  802aa4:	05c02074 	movhi	r23,129
  802aa8:	bdcf7f04 	addi	r23,r23,15868
  802aac:	b8800017 	ldw	r2,0(r23)
  802ab0:	988d883a 	add	r6,r19,r2
  802ab4:	b9800015 	stw	r6,0(r23)
  802ab8:	293fb21e 	bne	r5,r4,802984 <_malloc_r+0x43c>
  802abc:	2083ffcc 	andi	r2,r4,4095
  802ac0:	103fb01e 	bne	r2,zero,802984 <_malloc_r+0x43c>
  802ac4:	e4000217 	ldw	r16,8(fp)
  802ac8:	9d45883a 	add	r2,r19,r21
  802acc:	10800054 	ori	r2,r2,1
  802ad0:	80800115 	stw	r2,4(r16)
  802ad4:	b8c00017 	ldw	r3,0(r23)
  802ad8:	d0a74517 	ldw	r2,-25324(gp)
  802adc:	10c0012e 	bgeu	r2,r3,802ae4 <_malloc_r+0x59c>
  802ae0:	d0e74515 	stw	r3,-25324(gp)
  802ae4:	d0a74617 	ldw	r2,-25320(gp)
  802ae8:	10ff962e 	bgeu	r2,r3,802944 <_malloc_r+0x3fc>
  802aec:	d0e74615 	stw	r3,-25320(gp)
  802af0:	003f9406 	br	802944 <_malloc_r+0x3fc>
  802af4:	00800104 	movi	r2,4
  802af8:	11001e36 	bltu	r2,r4,802b74 <_malloc_r+0x62c>
  802afc:	2804d1ba 	srli	r2,r5,6
  802b00:	11000e04 	addi	r4,r2,56
  802b04:	200690fa 	slli	r3,r4,3
  802b08:	003fc506 	br	802a20 <_malloc_r+0x4d8>
  802b0c:	00815504 	movi	r2,1364
  802b10:	10c01d2e 	bgeu	r2,r3,802b88 <_malloc_r+0x640>
  802b14:	01801f84 	movi	r6,126
  802b18:	0080fc04 	movi	r2,1008
  802b1c:	003eb706 	br	8025fc <_malloc_r+0xb4>
  802b20:	00800204 	movi	r2,8
  802b24:	10cbc83a 	sub	r5,r2,r3
  802b28:	2169883a 	add	r20,r4,r5
  802b2c:	003f9e06 	br	8029a8 <_malloc_r+0x460>
  802b30:	00bffe04 	movi	r2,-8
  802b34:	a93ffd04 	addi	r4,r21,-12
  802b38:	2088703a 	and	r4,r4,r2
  802b3c:	b10b883a 	add	r5,r22,r4
  802b40:	00c00144 	movi	r3,5
  802b44:	28c00215 	stw	r3,8(r5)
  802b48:	28c00115 	stw	r3,4(r5)
  802b4c:	b0800117 	ldw	r2,4(r22)
  802b50:	1080004c 	andi	r2,r2,1
  802b54:	2084b03a 	or	r2,r4,r2
  802b58:	b0800115 	stw	r2,4(r22)
  802b5c:	313fdd2e 	bgeu	r6,r4,802ad4 <_malloc_r+0x58c>
  802b60:	b1400204 	addi	r5,r22,8
  802b64:	9009883a 	mov	r4,r18
  802b68:	08019700 	call	801970 <_free_r>
  802b6c:	e4000217 	ldw	r16,8(fp)
  802b70:	003fd806 	br	802ad4 <_malloc_r+0x58c>
  802b74:	00800504 	movi	r2,20
  802b78:	11001536 	bltu	r2,r4,802bd0 <_malloc_r+0x688>
  802b7c:	210016c4 	addi	r4,r4,91
  802b80:	200690fa 	slli	r3,r4,3
  802b84:	003fa606 	br	802a20 <_malloc_r+0x4d8>
  802b88:	8804d4ba 	srli	r2,r17,18
  802b8c:	11801f04 	addi	r6,r2,124
  802b90:	300490fa 	slli	r2,r6,3
  802b94:	003e9906 	br	8025fc <_malloc_r+0xb4>
  802b98:	2009d0ba 	srai	r4,r4,2
  802b9c:	01402074 	movhi	r5,129
  802ba0:	29422304 	addi	r5,r5,2188
  802ba4:	00c00044 	movi	r3,1
  802ba8:	28800117 	ldw	r2,4(r5)
  802bac:	1906983a 	sll	r3,r3,r4
  802bb0:	10c4b03a 	or	r2,r2,r3
  802bb4:	28800115 	stw	r2,4(r5)
  802bb8:	003fa306 	br	802a48 <_malloc_r+0x500>
  802bbc:	0027883a 	mov	r19,zero
  802bc0:	00c00044 	movi	r3,1
  802bc4:	003f8606 	br	8029e0 <_malloc_r+0x498>
  802bc8:	d1200515 	stw	r4,-32748(gp)
  802bcc:	003f7306 	br	80299c <_malloc_r+0x454>
  802bd0:	00801504 	movi	r2,84
  802bd4:	11001936 	bltu	r2,r4,802c3c <_malloc_r+0x6f4>
  802bd8:	2804d33a 	srli	r2,r5,12
  802bdc:	11001b84 	addi	r4,r2,110
  802be0:	200690fa 	slli	r3,r4,3
  802be4:	003f8e06 	br	802a20 <_malloc_r+0x4d8>
  802be8:	480b883a 	mov	r5,r9
  802bec:	6807883a 	mov	r3,r13
  802bf0:	288000cc 	andi	r2,r5,3
  802bf4:	18fffe04 	addi	r3,r3,-8
  802bf8:	297fffc4 	addi	r5,r5,-1
  802bfc:	10001526 	beq	r2,zero,802c54 <_malloc_r+0x70c>
  802c00:	18800217 	ldw	r2,8(r3)
  802c04:	10fffa26 	beq	r2,r3,802bf0 <_malloc_r+0x6a8>
  802c08:	2109883a 	add	r4,r4,r4
  802c0c:	393f1e36 	bltu	r7,r4,802888 <_malloc_r+0x340>
  802c10:	203f1d26 	beq	r4,zero,802888 <_malloc_r+0x340>
  802c14:	21c4703a 	and	r2,r4,r7
  802c18:	10000226 	beq	r2,zero,802c24 <_malloc_r+0x6dc>
  802c1c:	6013883a 	mov	r9,r12
  802c20:	003ee106 	br	8027a8 <_malloc_r+0x260>
  802c24:	2109883a 	add	r4,r4,r4
  802c28:	3904703a 	and	r2,r7,r4
  802c2c:	63000104 	addi	r12,r12,4
  802c30:	103ffc26 	beq	r2,zero,802c24 <_malloc_r+0x6dc>
  802c34:	6013883a 	mov	r9,r12
  802c38:	003edb06 	br	8027a8 <_malloc_r+0x260>
  802c3c:	00805504 	movi	r2,340
  802c40:	11000836 	bltu	r2,r4,802c64 <_malloc_r+0x71c>
  802c44:	2804d3fa 	srli	r2,r5,15
  802c48:	11001dc4 	addi	r4,r2,119
  802c4c:	200690fa 	slli	r3,r4,3
  802c50:	003f7306 	br	802a20 <_malloc_r+0x4d8>
  802c54:	0104303a 	nor	r2,zero,r4
  802c58:	388e703a 	and	r7,r7,r2
  802c5c:	e1c00115 	stw	r7,4(fp)
  802c60:	003fe906 	br	802c08 <_malloc_r+0x6c0>
  802c64:	00815504 	movi	r2,1364
  802c68:	1100032e 	bgeu	r2,r4,802c78 <_malloc_r+0x730>
  802c6c:	01001f84 	movi	r4,126
  802c70:	00c0fc04 	movi	r3,1008
  802c74:	003f6a06 	br	802a20 <_malloc_r+0x4d8>
  802c78:	2804d4ba 	srli	r2,r5,18
  802c7c:	11001f04 	addi	r4,r2,124
  802c80:	200690fa 	slli	r3,r4,3
  802c84:	003f6606 	br	802a20 <_malloc_r+0x4d8>

00802c88 <memset>:
  802c88:	008000c4 	movi	r2,3
  802c8c:	29403fcc 	andi	r5,r5,255
  802c90:	2007883a 	mov	r3,r4
  802c94:	1180022e 	bgeu	r2,r6,802ca0 <memset+0x18>
  802c98:	2084703a 	and	r2,r4,r2
  802c9c:	10000826 	beq	r2,zero,802cc0 <memset+0x38>
  802ca0:	30000526 	beq	r6,zero,802cb8 <memset+0x30>
  802ca4:	2805883a 	mov	r2,r5
  802ca8:	30cd883a 	add	r6,r6,r3
  802cac:	18800005 	stb	r2,0(r3)
  802cb0:	18c00044 	addi	r3,r3,1
  802cb4:	19bffd1e 	bne	r3,r6,802cac <memset+0x24>
  802cb8:	2005883a 	mov	r2,r4
  802cbc:	f800283a 	ret
  802cc0:	2804923a 	slli	r2,r5,8
  802cc4:	020003c4 	movi	r8,15
  802cc8:	200f883a 	mov	r7,r4
  802ccc:	2884b03a 	or	r2,r5,r2
  802cd0:	1006943a 	slli	r3,r2,16
  802cd4:	10c6b03a 	or	r3,r2,r3
  802cd8:	41800a2e 	bgeu	r8,r6,802d04 <memset+0x7c>
  802cdc:	4005883a 	mov	r2,r8
  802ce0:	31bffc04 	addi	r6,r6,-16
  802ce4:	38c00015 	stw	r3,0(r7)
  802ce8:	38c00115 	stw	r3,4(r7)
  802cec:	38c00215 	stw	r3,8(r7)
  802cf0:	38c00315 	stw	r3,12(r7)
  802cf4:	39c00404 	addi	r7,r7,16
  802cf8:	11bff936 	bltu	r2,r6,802ce0 <memset+0x58>
  802cfc:	008000c4 	movi	r2,3
  802d00:	1180052e 	bgeu	r2,r6,802d18 <memset+0x90>
  802d04:	31bfff04 	addi	r6,r6,-4
  802d08:	008000c4 	movi	r2,3
  802d0c:	38c00015 	stw	r3,0(r7)
  802d10:	39c00104 	addi	r7,r7,4
  802d14:	11bffb36 	bltu	r2,r6,802d04 <memset+0x7c>
  802d18:	3807883a 	mov	r3,r7
  802d1c:	003fe006 	br	802ca0 <memset+0x18>

00802d20 <_open_r>:
  802d20:	defffd04 	addi	sp,sp,-12
  802d24:	dc000015 	stw	r16,0(sp)
  802d28:	04002074 	movhi	r16,129
  802d2c:	840f6604 	addi	r16,r16,15768
  802d30:	dc400115 	stw	r17,4(sp)
  802d34:	80000015 	stw	zero,0(r16)
  802d38:	2023883a 	mov	r17,r4
  802d3c:	2809883a 	mov	r4,r5
  802d40:	300b883a 	mov	r5,r6
  802d44:	380d883a 	mov	r6,r7
  802d48:	dfc00215 	stw	ra,8(sp)
  802d4c:	080c1340 	call	80c134 <open>
  802d50:	1007883a 	mov	r3,r2
  802d54:	00bfffc4 	movi	r2,-1
  802d58:	18800626 	beq	r3,r2,802d74 <_open_r+0x54>
  802d5c:	1805883a 	mov	r2,r3
  802d60:	dfc00217 	ldw	ra,8(sp)
  802d64:	dc400117 	ldw	r17,4(sp)
  802d68:	dc000017 	ldw	r16,0(sp)
  802d6c:	dec00304 	addi	sp,sp,12
  802d70:	f800283a 	ret
  802d74:	80800017 	ldw	r2,0(r16)
  802d78:	103ff826 	beq	r2,zero,802d5c <_open_r+0x3c>
  802d7c:	88800015 	stw	r2,0(r17)
  802d80:	1805883a 	mov	r2,r3
  802d84:	dfc00217 	ldw	ra,8(sp)
  802d88:	dc400117 	ldw	r17,4(sp)
  802d8c:	dc000017 	ldw	r16,0(sp)
  802d90:	dec00304 	addi	sp,sp,12
  802d94:	f800283a 	ret

00802d98 <printf>:
  802d98:	defffb04 	addi	sp,sp,-20
  802d9c:	dfc00115 	stw	ra,4(sp)
  802da0:	d9400215 	stw	r5,8(sp)
  802da4:	d9800315 	stw	r6,12(sp)
  802da8:	d9c00415 	stw	r7,16(sp)
  802dac:	00802074 	movhi	r2,129
  802db0:	10882504 	addi	r2,r2,8340
  802db4:	10c00017 	ldw	r3,0(r2)
  802db8:	200b883a 	mov	r5,r4
  802dbc:	d8800204 	addi	r2,sp,8
  802dc0:	19000217 	ldw	r4,8(r3)
  802dc4:	100d883a 	mov	r6,r2
  802dc8:	d8800015 	stw	r2,0(sp)
  802dcc:	08054c40 	call	8054c4 <__vfprintf_internal>
  802dd0:	dfc00117 	ldw	ra,4(sp)
  802dd4:	dec00504 	addi	sp,sp,20
  802dd8:	f800283a 	ret

00802ddc <_printf_r>:
  802ddc:	defffc04 	addi	sp,sp,-16
  802de0:	dfc00115 	stw	ra,4(sp)
  802de4:	d9800215 	stw	r6,8(sp)
  802de8:	d9c00315 	stw	r7,12(sp)
  802dec:	280d883a 	mov	r6,r5
  802df0:	21400217 	ldw	r5,8(r4)
  802df4:	d8c00204 	addi	r3,sp,8
  802df8:	180f883a 	mov	r7,r3
  802dfc:	d8c00015 	stw	r3,0(sp)
  802e00:	08036180 	call	803618 <___vfprintf_internal_r>
  802e04:	dfc00117 	ldw	ra,4(sp)
  802e08:	dec00404 	addi	sp,sp,16
  802e0c:	f800283a 	ret

00802e10 <putchar>:
  802e10:	00802074 	movhi	r2,129
  802e14:	10882504 	addi	r2,r2,8340
  802e18:	11800017 	ldw	r6,0(r2)
  802e1c:	200b883a 	mov	r5,r4
  802e20:	3009883a 	mov	r4,r6
  802e24:	31800217 	ldw	r6,8(r6)
  802e28:	080891c1 	jmpi	80891c <_putc_r>

00802e2c <_putchar_r>:
  802e2c:	21800217 	ldw	r6,8(r4)
  802e30:	080891c1 	jmpi	80891c <_putc_r>

00802e34 <_puts_r>:
  802e34:	defff604 	addi	sp,sp,-40
  802e38:	dc400715 	stw	r17,28(sp)
  802e3c:	2023883a 	mov	r17,r4
  802e40:	2809883a 	mov	r4,r5
  802e44:	dfc00915 	stw	ra,36(sp)
  802e48:	dcc00815 	stw	r19,32(sp)
  802e4c:	2827883a 	mov	r19,r5
  802e50:	08032e40 	call	8032e4 <strlen>
  802e54:	89400217 	ldw	r5,8(r17)
  802e58:	00c02074 	movhi	r3,129
  802e5c:	18ff9d04 	addi	r3,r3,-396
  802e60:	01c00044 	movi	r7,1
  802e64:	12000044 	addi	r8,r2,1
  802e68:	d8c00515 	stw	r3,20(sp)
  802e6c:	d9c00615 	stw	r7,24(sp)
  802e70:	d8c00304 	addi	r3,sp,12
  802e74:	01c00084 	movi	r7,2
  802e78:	8809883a 	mov	r4,r17
  802e7c:	d80d883a 	mov	r6,sp
  802e80:	d8c00015 	stw	r3,0(sp)
  802e84:	dcc00315 	stw	r19,12(sp)
  802e88:	da000215 	stw	r8,8(sp)
  802e8c:	d9c00115 	stw	r7,4(sp)
  802e90:	d8800415 	stw	r2,16(sp)
  802e94:	0806f780 	call	806f78 <__sfvwrite_r>
  802e98:	00ffffc4 	movi	r3,-1
  802e9c:	10000626 	beq	r2,zero,802eb8 <_puts_r+0x84>
  802ea0:	1805883a 	mov	r2,r3
  802ea4:	dfc00917 	ldw	ra,36(sp)
  802ea8:	dcc00817 	ldw	r19,32(sp)
  802eac:	dc400717 	ldw	r17,28(sp)
  802eb0:	dec00a04 	addi	sp,sp,40
  802eb4:	f800283a 	ret
  802eb8:	00c00284 	movi	r3,10
  802ebc:	1805883a 	mov	r2,r3
  802ec0:	dfc00917 	ldw	ra,36(sp)
  802ec4:	dcc00817 	ldw	r19,32(sp)
  802ec8:	dc400717 	ldw	r17,28(sp)
  802ecc:	dec00a04 	addi	sp,sp,40
  802ed0:	f800283a 	ret

00802ed4 <puts>:
  802ed4:	00802074 	movhi	r2,129
  802ed8:	10882504 	addi	r2,r2,8340
  802edc:	200b883a 	mov	r5,r4
  802ee0:	11000017 	ldw	r4,0(r2)
  802ee4:	0802e341 	jmpi	802e34 <_puts_r>

00802ee8 <__srefill_r>:
  802ee8:	defffd04 	addi	sp,sp,-12
  802eec:	dc400115 	stw	r17,4(sp)
  802ef0:	dc000015 	stw	r16,0(sp)
  802ef4:	dfc00215 	stw	ra,8(sp)
  802ef8:	2023883a 	mov	r17,r4
  802efc:	2821883a 	mov	r16,r5
  802f00:	20000226 	beq	r4,zero,802f0c <__srefill_r+0x24>
  802f04:	20800e17 	ldw	r2,56(r4)
  802f08:	10004126 	beq	r2,zero,803010 <__srefill_r+0x128>
  802f0c:	80c0030b 	ldhu	r3,12(r16)
  802f10:	80000115 	stw	zero,4(r16)
  802f14:	1880080c 	andi	r2,r3,32
  802f18:	1000361e 	bne	r2,zero,802ff4 <__srefill_r+0x10c>
  802f1c:	1880010c 	andi	r2,r3,4
  802f20:	1000211e 	bne	r2,zero,802fa8 <__srefill_r+0xc0>
  802f24:	1880040c 	andi	r2,r3,16
  802f28:	10005026 	beq	r2,zero,80306c <__srefill_r+0x184>
  802f2c:	1880020c 	andi	r2,r3,8
  802f30:	1000541e 	bne	r2,zero,803084 <__srefill_r+0x19c>
  802f34:	8080030b 	ldhu	r2,12(r16)
  802f38:	10800114 	ori	r2,r2,4
  802f3c:	8080030d 	sth	r2,12(r16)
  802f40:	80800417 	ldw	r2,16(r16)
  802f44:	10004526 	beq	r2,zero,80305c <__srefill_r+0x174>
  802f48:	8080030b 	ldhu	r2,12(r16)
  802f4c:	108000cc 	andi	r2,r2,3
  802f50:	1000361e 	bne	r2,zero,80302c <__srefill_r+0x144>
  802f54:	81800417 	ldw	r6,16(r16)
  802f58:	80c00817 	ldw	r3,32(r16)
  802f5c:	81400717 	ldw	r5,28(r16)
  802f60:	81c00517 	ldw	r7,20(r16)
  802f64:	8809883a 	mov	r4,r17
  802f68:	81800015 	stw	r6,0(r16)
  802f6c:	183ee83a 	callr	r3
  802f70:	80c0030b 	ldhu	r3,12(r16)
  802f74:	1009883a 	mov	r4,r2
  802f78:	80800115 	stw	r2,4(r16)
  802f7c:	00b7ffc4 	movi	r2,-8193
  802f80:	1884703a 	and	r2,r3,r2
  802f84:	8080030d 	sth	r2,12(r16)
  802f88:	0100230e 	bge	zero,r4,803018 <__srefill_r+0x130>
  802f8c:	0009883a 	mov	r4,zero
  802f90:	2005883a 	mov	r2,r4
  802f94:	dfc00217 	ldw	ra,8(sp)
  802f98:	dc400117 	ldw	r17,4(sp)
  802f9c:	dc000017 	ldw	r16,0(sp)
  802fa0:	dec00304 	addi	sp,sp,12
  802fa4:	f800283a 	ret
  802fa8:	81400c17 	ldw	r5,48(r16)
  802fac:	283fe426 	beq	r5,zero,802f40 <__srefill_r+0x58>
  802fb0:	80801004 	addi	r2,r16,64
  802fb4:	28800226 	beq	r5,r2,802fc0 <__srefill_r+0xd8>
  802fb8:	8809883a 	mov	r4,r17
  802fbc:	08019700 	call	801970 <_free_r>
  802fc0:	80800f17 	ldw	r2,60(r16)
  802fc4:	80000c15 	stw	zero,48(r16)
  802fc8:	80800115 	stw	r2,4(r16)
  802fcc:	103fdc26 	beq	r2,zero,802f40 <__srefill_r+0x58>
  802fd0:	80800e17 	ldw	r2,56(r16)
  802fd4:	0009883a 	mov	r4,zero
  802fd8:	80800015 	stw	r2,0(r16)
  802fdc:	2005883a 	mov	r2,r4
  802fe0:	dfc00217 	ldw	ra,8(sp)
  802fe4:	dc400117 	ldw	r17,4(sp)
  802fe8:	dc000017 	ldw	r16,0(sp)
  802fec:	dec00304 	addi	sp,sp,12
  802ff0:	f800283a 	ret
  802ff4:	013fffc4 	movi	r4,-1
  802ff8:	2005883a 	mov	r2,r4
  802ffc:	dfc00217 	ldw	ra,8(sp)
  803000:	dc400117 	ldw	r17,4(sp)
  803004:	dc000017 	ldw	r16,0(sp)
  803008:	dec00304 	addi	sp,sp,12
  80300c:	f800283a 	ret
  803010:	080147c0 	call	80147c <__sinit>
  803014:	003fbd06 	br	802f0c <__srefill_r+0x24>
  803018:	20000b1e 	bne	r4,zero,803048 <__srefill_r+0x160>
  80301c:	10800814 	ori	r2,r2,32
  803020:	013fffc4 	movi	r4,-1
  803024:	8080030d 	sth	r2,12(r16)
  803028:	003fd906 	br	802f90 <__srefill_r+0xa8>
  80302c:	00802074 	movhi	r2,129
  803030:	10882604 	addi	r2,r2,8344
  803034:	11000017 	ldw	r4,0(r2)
  803038:	01402034 	movhi	r5,128
  80303c:	294c2b04 	addi	r5,r5,12460
  803040:	08022200 	call	802220 <_fwalk>
  803044:	003fc306 	br	802f54 <__srefill_r+0x6c>
  803048:	10801014 	ori	r2,r2,64
  80304c:	013fffc4 	movi	r4,-1
  803050:	8080030d 	sth	r2,12(r16)
  803054:	80000115 	stw	zero,4(r16)
  803058:	003fcd06 	br	802f90 <__srefill_r+0xa8>
  80305c:	8809883a 	mov	r4,r17
  803060:	800b883a 	mov	r5,r16
  803064:	08023b40 	call	8023b4 <__smakebuf_r>
  803068:	003fb706 	br	802f48 <__srefill_r+0x60>
  80306c:	18c01014 	ori	r3,r3,64
  803070:	00800244 	movi	r2,9
  803074:	013fffc4 	movi	r4,-1
  803078:	88800015 	stw	r2,0(r17)
  80307c:	80c0030d 	sth	r3,12(r16)
  803080:	003fc306 	br	802f90 <__srefill_r+0xa8>
  803084:	8809883a 	mov	r4,r17
  803088:	800b883a 	mov	r5,r16
  80308c:	08010bc0 	call	8010bc <_fflush_r>
  803090:	103fd81e 	bne	r2,zero,802ff4 <__srefill_r+0x10c>
  803094:	8080030b 	ldhu	r2,12(r16)
  803098:	80000215 	stw	zero,8(r16)
  80309c:	80000615 	stw	zero,24(r16)
  8030a0:	10bffdcc 	andi	r2,r2,65527
  8030a4:	8080030d 	sth	r2,12(r16)
  8030a8:	003fa206 	br	802f34 <__srefill_r+0x4c>

008030ac <lflush>:
  8030ac:	20c0030b 	ldhu	r3,12(r4)
  8030b0:	01400244 	movi	r5,9
  8030b4:	0005883a 	mov	r2,zero
  8030b8:	18c0024c 	andi	r3,r3,9
  8030bc:	19400126 	beq	r3,r5,8030c4 <lflush+0x18>
  8030c0:	f800283a 	ret
  8030c4:	08012b81 	jmpi	8012b8 <fflush>

008030c8 <__srget_r>:
  8030c8:	defffe04 	addi	sp,sp,-8
  8030cc:	dc000015 	stw	r16,0(sp)
  8030d0:	dfc00115 	stw	ra,4(sp)
  8030d4:	2821883a 	mov	r16,r5
  8030d8:	0802ee80 	call	802ee8 <__srefill_r>
  8030dc:	013fffc4 	movi	r4,-1
  8030e0:	1000071e 	bne	r2,zero,803100 <__srget_r+0x38>
  8030e4:	80800117 	ldw	r2,4(r16)
  8030e8:	81000017 	ldw	r4,0(r16)
  8030ec:	10bfffc4 	addi	r2,r2,-1
  8030f0:	20c00044 	addi	r3,r4,1
  8030f4:	80800115 	stw	r2,4(r16)
  8030f8:	21000003 	ldbu	r4,0(r4)
  8030fc:	80c00015 	stw	r3,0(r16)
  803100:	2005883a 	mov	r2,r4
  803104:	dfc00117 	ldw	ra,4(sp)
  803108:	dc000017 	ldw	r16,0(sp)
  80310c:	dec00204 	addi	sp,sp,8
  803110:	f800283a 	ret

00803114 <__srget>:
  803114:	00802074 	movhi	r2,129
  803118:	10882504 	addi	r2,r2,8340
  80311c:	200b883a 	mov	r5,r4
  803120:	11000017 	ldw	r4,0(r2)
  803124:	08030c81 	jmpi	8030c8 <__srget_r>

00803128 <_sbrk_r>:
  803128:	defffd04 	addi	sp,sp,-12
  80312c:	dc000015 	stw	r16,0(sp)
  803130:	04002074 	movhi	r16,129
  803134:	840f6604 	addi	r16,r16,15768
  803138:	dc400115 	stw	r17,4(sp)
  80313c:	80000015 	stw	zero,0(r16)
  803140:	2023883a 	mov	r17,r4
  803144:	2809883a 	mov	r4,r5
  803148:	dfc00215 	stw	ra,8(sp)
  80314c:	080c4fc0 	call	80c4fc <sbrk>
  803150:	1007883a 	mov	r3,r2
  803154:	00bfffc4 	movi	r2,-1
  803158:	18800626 	beq	r3,r2,803174 <_sbrk_r+0x4c>
  80315c:	1805883a 	mov	r2,r3
  803160:	dfc00217 	ldw	ra,8(sp)
  803164:	dc400117 	ldw	r17,4(sp)
  803168:	dc000017 	ldw	r16,0(sp)
  80316c:	dec00304 	addi	sp,sp,12
  803170:	f800283a 	ret
  803174:	80800017 	ldw	r2,0(r16)
  803178:	103ff826 	beq	r2,zero,80315c <_sbrk_r+0x34>
  80317c:	88800015 	stw	r2,0(r17)
  803180:	1805883a 	mov	r2,r3
  803184:	dfc00217 	ldw	ra,8(sp)
  803188:	dc400117 	ldw	r17,4(sp)
  80318c:	dc000017 	ldw	r16,0(sp)
  803190:	dec00304 	addi	sp,sp,12
  803194:	f800283a 	ret

00803198 <__sclose>:
  803198:	2940038f 	ldh	r5,14(r5)
  80319c:	080569c1 	jmpi	80569c <_close_r>

008031a0 <__sseek>:
  8031a0:	defffe04 	addi	sp,sp,-8
  8031a4:	dc000015 	stw	r16,0(sp)
  8031a8:	2821883a 	mov	r16,r5
  8031ac:	2940038f 	ldh	r5,14(r5)
  8031b0:	dfc00115 	stw	ra,4(sp)
  8031b4:	08075480 	call	807548 <_lseek_r>
  8031b8:	1007883a 	mov	r3,r2
  8031bc:	00bfffc4 	movi	r2,-1
  8031c0:	18800926 	beq	r3,r2,8031e8 <__sseek+0x48>
  8031c4:	8080030b 	ldhu	r2,12(r16)
  8031c8:	80c01415 	stw	r3,80(r16)
  8031cc:	10840014 	ori	r2,r2,4096
  8031d0:	8080030d 	sth	r2,12(r16)
  8031d4:	1805883a 	mov	r2,r3
  8031d8:	dfc00117 	ldw	ra,4(sp)
  8031dc:	dc000017 	ldw	r16,0(sp)
  8031e0:	dec00204 	addi	sp,sp,8
  8031e4:	f800283a 	ret
  8031e8:	8080030b 	ldhu	r2,12(r16)
  8031ec:	10bbffcc 	andi	r2,r2,61439
  8031f0:	8080030d 	sth	r2,12(r16)
  8031f4:	1805883a 	mov	r2,r3
  8031f8:	dfc00117 	ldw	ra,4(sp)
  8031fc:	dc000017 	ldw	r16,0(sp)
  803200:	dec00204 	addi	sp,sp,8
  803204:	f800283a 	ret

00803208 <__swrite>:
  803208:	2880030b 	ldhu	r2,12(r5)
  80320c:	defffb04 	addi	sp,sp,-20
  803210:	dcc00315 	stw	r19,12(sp)
  803214:	1080400c 	andi	r2,r2,256
  803218:	dc800215 	stw	r18,8(sp)
  80321c:	dc400115 	stw	r17,4(sp)
  803220:	dc000015 	stw	r16,0(sp)
  803224:	3027883a 	mov	r19,r6
  803228:	3825883a 	mov	r18,r7
  80322c:	dfc00415 	stw	ra,16(sp)
  803230:	2821883a 	mov	r16,r5
  803234:	000d883a 	mov	r6,zero
  803238:	01c00084 	movi	r7,2
  80323c:	2023883a 	mov	r17,r4
  803240:	10000226 	beq	r2,zero,80324c <__swrite+0x44>
  803244:	2940038f 	ldh	r5,14(r5)
  803248:	08075480 	call	807548 <_lseek_r>
  80324c:	8080030b 	ldhu	r2,12(r16)
  803250:	8140038f 	ldh	r5,14(r16)
  803254:	8809883a 	mov	r4,r17
  803258:	10bbffcc 	andi	r2,r2,61439
  80325c:	980d883a 	mov	r6,r19
  803260:	900f883a 	mov	r7,r18
  803264:	8080030d 	sth	r2,12(r16)
  803268:	dfc00417 	ldw	ra,16(sp)
  80326c:	dcc00317 	ldw	r19,12(sp)
  803270:	dc800217 	ldw	r18,8(sp)
  803274:	dc400117 	ldw	r17,4(sp)
  803278:	dc000017 	ldw	r16,0(sp)
  80327c:	dec00504 	addi	sp,sp,20
  803280:	08054e81 	jmpi	8054e8 <_write_r>

00803284 <__sread>:
  803284:	defffe04 	addi	sp,sp,-8
  803288:	dc000015 	stw	r16,0(sp)
  80328c:	2821883a 	mov	r16,r5
  803290:	2940038f 	ldh	r5,14(r5)
  803294:	dfc00115 	stw	ra,4(sp)
  803298:	0808a040 	call	808a04 <_read_r>
  80329c:	1007883a 	mov	r3,r2
  8032a0:	10000816 	blt	r2,zero,8032c4 <__sread+0x40>
  8032a4:	80801417 	ldw	r2,80(r16)
  8032a8:	10c5883a 	add	r2,r2,r3
  8032ac:	80801415 	stw	r2,80(r16)
  8032b0:	1805883a 	mov	r2,r3
  8032b4:	dfc00117 	ldw	ra,4(sp)
  8032b8:	dc000017 	ldw	r16,0(sp)
  8032bc:	dec00204 	addi	sp,sp,8
  8032c0:	f800283a 	ret
  8032c4:	8080030b 	ldhu	r2,12(r16)
  8032c8:	10bbffcc 	andi	r2,r2,61439
  8032cc:	8080030d 	sth	r2,12(r16)
  8032d0:	1805883a 	mov	r2,r3
  8032d4:	dfc00117 	ldw	ra,4(sp)
  8032d8:	dc000017 	ldw	r16,0(sp)
  8032dc:	dec00204 	addi	sp,sp,8
  8032e0:	f800283a 	ret

008032e4 <strlen>:
  8032e4:	208000cc 	andi	r2,r4,3
  8032e8:	2011883a 	mov	r8,r4
  8032ec:	1000161e 	bne	r2,zero,803348 <strlen+0x64>
  8032f0:	20c00017 	ldw	r3,0(r4)
  8032f4:	017fbff4 	movhi	r5,65279
  8032f8:	297fbfc4 	addi	r5,r5,-257
  8032fc:	01e02074 	movhi	r7,32897
  803300:	39e02004 	addi	r7,r7,-32640
  803304:	1945883a 	add	r2,r3,r5
  803308:	11c4703a 	and	r2,r2,r7
  80330c:	00c6303a 	nor	r3,zero,r3
  803310:	1886703a 	and	r3,r3,r2
  803314:	18000c1e 	bne	r3,zero,803348 <strlen+0x64>
  803318:	280d883a 	mov	r6,r5
  80331c:	380b883a 	mov	r5,r7
  803320:	21000104 	addi	r4,r4,4
  803324:	20800017 	ldw	r2,0(r4)
  803328:	1187883a 	add	r3,r2,r6
  80332c:	1946703a 	and	r3,r3,r5
  803330:	0084303a 	nor	r2,zero,r2
  803334:	10c4703a 	and	r2,r2,r3
  803338:	103ff926 	beq	r2,zero,803320 <strlen+0x3c>
  80333c:	20800007 	ldb	r2,0(r4)
  803340:	10000326 	beq	r2,zero,803350 <strlen+0x6c>
  803344:	21000044 	addi	r4,r4,1
  803348:	20800007 	ldb	r2,0(r4)
  80334c:	103ffd1e 	bne	r2,zero,803344 <strlen+0x60>
  803350:	2205c83a 	sub	r2,r4,r8
  803354:	f800283a 	ret

00803358 <_strtol_r>:
  803358:	defff304 	addi	sp,sp,-52
  80335c:	00802074 	movhi	r2,129
  803360:	10882904 	addi	r2,r2,8356
  803364:	dcc00615 	stw	r19,24(sp)
  803368:	14c00017 	ldw	r19,0(r2)
  80336c:	ddc00a15 	stw	r23,40(sp)
  803370:	dc000315 	stw	r16,12(sp)
  803374:	dfc00c15 	stw	ra,48(sp)
  803378:	df000b15 	stw	fp,44(sp)
  80337c:	dd800915 	stw	r22,36(sp)
  803380:	dd400815 	stw	r21,32(sp)
  803384:	dd000715 	stw	r20,28(sp)
  803388:	dc800515 	stw	r18,20(sp)
  80338c:	dc400415 	stw	r17,16(sp)
  803390:	282f883a 	mov	r23,r5
  803394:	d9000015 	stw	r4,0(sp)
  803398:	d9800115 	stw	r6,4(sp)
  80339c:	2821883a 	mov	r16,r5
  8033a0:	84400007 	ldb	r17,0(r16)
  8033a4:	84000044 	addi	r16,r16,1
  8033a8:	9c47883a 	add	r3,r19,r17
  8033ac:	18800003 	ldbu	r2,0(r3)
  8033b0:	1080020c 	andi	r2,r2,8
  8033b4:	103ffa1e 	bne	r2,zero,8033a0 <_strtol_r+0x48>
  8033b8:	00800b44 	movi	r2,45
  8033bc:	88805c26 	beq	r17,r2,803530 <_strtol_r+0x1d8>
  8033c0:	00800ac4 	movi	r2,43
  8033c4:	88805726 	beq	r17,r2,803524 <_strtol_r+0x1cc>
  8033c8:	0039883a 	mov	fp,zero
  8033cc:	3807003a 	cmpeq	r3,r7,zero
  8033d0:	1800431e 	bne	r3,zero,8034e0 <_strtol_r+0x188>
  8033d4:	00800404 	movi	r2,16
  8033d8:	38804126 	beq	r7,r2,8034e0 <_strtol_r+0x188>
  8033dc:	3829883a 	mov	r20,r7
  8033e0:	e02cc03a 	cmpne	r22,fp,zero
  8033e4:	b0004b1e 	bne	r22,zero,803514 <_strtol_r+0x1bc>
  8033e8:	04a00034 	movhi	r18,32768
  8033ec:	94bfffc4 	addi	r18,r18,-1
  8033f0:	9009883a 	mov	r4,r18
  8033f4:	a00b883a 	mov	r5,r20
  8033f8:	d9c00215 	stw	r7,8(sp)
  8033fc:	0800f780 	call	800f78 <__umodsi3>
  803400:	9009883a 	mov	r4,r18
  803404:	a00b883a 	mov	r5,r20
  803408:	102b883a 	mov	r21,r2
  80340c:	0800f700 	call	800f70 <__udivsi3>
  803410:	1011883a 	mov	r8,r2
  803414:	9c45883a 	add	r2,r19,r17
  803418:	11000003 	ldbu	r4,0(r2)
  80341c:	000b883a 	mov	r5,zero
  803420:	000d883a 	mov	r6,zero
  803424:	20c0010c 	andi	r3,r4,4
  803428:	d9c00217 	ldw	r7,8(sp)
  80342c:	18000e26 	beq	r3,zero,803468 <_strtol_r+0x110>
  803430:	88fff404 	addi	r3,r17,-48
  803434:	19c0140e 	bge	r3,r7,803488 <_strtol_r+0x130>
  803438:	30003116 	blt	r6,zero,803500 <_strtol_r+0x1a8>
  80343c:	41403036 	bltu	r8,r5,803500 <_strtol_r+0x1a8>
  803440:	2a002e26 	beq	r5,r8,8034fc <_strtol_r+0x1a4>
  803444:	2d05383a 	mul	r2,r5,r20
  803448:	01800044 	movi	r6,1
  80344c:	10cb883a 	add	r5,r2,r3
  803450:	84400007 	ldb	r17,0(r16)
  803454:	84000044 	addi	r16,r16,1
  803458:	9c45883a 	add	r2,r19,r17
  80345c:	11000003 	ldbu	r4,0(r2)
  803460:	20c0010c 	andi	r3,r4,4
  803464:	183ff21e 	bne	r3,zero,803430 <_strtol_r+0xd8>
  803468:	208000cc 	andi	r2,r4,3
  80346c:	10000626 	beq	r2,zero,803488 <_strtol_r+0x130>
  803470:	2080004c 	andi	r2,r4,1
  803474:	1005003a 	cmpeq	r2,r2,zero
  803478:	1000231e 	bne	r2,zero,803508 <_strtol_r+0x1b0>
  80347c:	00800dc4 	movi	r2,55
  803480:	8887c83a 	sub	r3,r17,r2
  803484:	19ffec16 	blt	r3,r7,803438 <_strtol_r+0xe0>
  803488:	30002d16 	blt	r6,zero,803540 <_strtol_r+0x1e8>
  80348c:	b000231e 	bne	r22,zero,80351c <_strtol_r+0x1c4>
  803490:	2807883a 	mov	r3,r5
  803494:	d8800117 	ldw	r2,4(sp)
  803498:	10000426 	beq	r2,zero,8034ac <_strtol_r+0x154>
  80349c:	30000126 	beq	r6,zero,8034a4 <_strtol_r+0x14c>
  8034a0:	85ffffc4 	addi	r23,r16,-1
  8034a4:	d9000117 	ldw	r4,4(sp)
  8034a8:	25c00015 	stw	r23,0(r4)
  8034ac:	1805883a 	mov	r2,r3
  8034b0:	dfc00c17 	ldw	ra,48(sp)
  8034b4:	df000b17 	ldw	fp,44(sp)
  8034b8:	ddc00a17 	ldw	r23,40(sp)
  8034bc:	dd800917 	ldw	r22,36(sp)
  8034c0:	dd400817 	ldw	r21,32(sp)
  8034c4:	dd000717 	ldw	r20,28(sp)
  8034c8:	dcc00617 	ldw	r19,24(sp)
  8034cc:	dc800517 	ldw	r18,20(sp)
  8034d0:	dc400417 	ldw	r17,16(sp)
  8034d4:	dc000317 	ldw	r16,12(sp)
  8034d8:	dec00d04 	addi	sp,sp,52
  8034dc:	f800283a 	ret
  8034e0:	00800c04 	movi	r2,48
  8034e4:	88801d26 	beq	r17,r2,80355c <_strtol_r+0x204>
  8034e8:	183fbc26 	beq	r3,zero,8033dc <_strtol_r+0x84>
  8034ec:	00800c04 	movi	r2,48
  8034f0:	88802726 	beq	r17,r2,803590 <_strtol_r+0x238>
  8034f4:	01c00284 	movi	r7,10
  8034f8:	003fb806 	br	8033dc <_strtol_r+0x84>
  8034fc:	a8ffd10e 	bge	r21,r3,803444 <_strtol_r+0xec>
  803500:	01bfffc4 	movi	r6,-1
  803504:	003fd206 	br	803450 <_strtol_r+0xf8>
  803508:	008015c4 	movi	r2,87
  80350c:	8887c83a 	sub	r3,r17,r2
  803510:	003fdc06 	br	803484 <_strtol_r+0x12c>
  803514:	04a00034 	movhi	r18,32768
  803518:	003fb506 	br	8033f0 <_strtol_r+0x98>
  80351c:	0147c83a 	sub	r3,zero,r5
  803520:	003fdc06 	br	803494 <_strtol_r+0x13c>
  803524:	84400007 	ldb	r17,0(r16)
  803528:	84000044 	addi	r16,r16,1
  80352c:	003fa606 	br	8033c8 <_strtol_r+0x70>
  803530:	84400007 	ldb	r17,0(r16)
  803534:	07000044 	movi	fp,1
  803538:	84000044 	addi	r16,r16,1
  80353c:	003fa306 	br	8033cc <_strtol_r+0x74>
  803540:	e005003a 	cmpeq	r2,fp,zero
  803544:	10000f1e 	bne	r2,zero,803584 <_strtol_r+0x22c>
  803548:	00e00034 	movhi	r3,32768
  80354c:	d9000017 	ldw	r4,0(sp)
  803550:	00800884 	movi	r2,34
  803554:	20800015 	stw	r2,0(r4)
  803558:	003fce06 	br	803494 <_strtol_r+0x13c>
  80355c:	81000007 	ldb	r4,0(r16)
  803560:	00801e04 	movi	r2,120
  803564:	20800226 	beq	r4,r2,803570 <_strtol_r+0x218>
  803568:	00801604 	movi	r2,88
  80356c:	20bfde1e 	bne	r4,r2,8034e8 <_strtol_r+0x190>
  803570:	84400047 	ldb	r17,1(r16)
  803574:	01c00404 	movi	r7,16
  803578:	84000084 	addi	r16,r16,2
  80357c:	3829883a 	mov	r20,r7
  803580:	003f9706 	br	8033e0 <_strtol_r+0x88>
  803584:	00e00034 	movhi	r3,32768
  803588:	18ffffc4 	addi	r3,r3,-1
  80358c:	003fef06 	br	80354c <_strtol_r+0x1f4>
  803590:	01c00204 	movi	r7,8
  803594:	3829883a 	mov	r20,r7
  803598:	003f9106 	br	8033e0 <_strtol_r+0x88>

0080359c <strtol>:
  80359c:	00802074 	movhi	r2,129
  8035a0:	10882504 	addi	r2,r2,8340
  8035a4:	2013883a 	mov	r9,r4
  8035a8:	11000017 	ldw	r4,0(r2)
  8035ac:	2805883a 	mov	r2,r5
  8035b0:	300f883a 	mov	r7,r6
  8035b4:	480b883a 	mov	r5,r9
  8035b8:	100d883a 	mov	r6,r2
  8035bc:	08033581 	jmpi	803358 <_strtol_r>

008035c0 <__sprint_r>:
  8035c0:	30800217 	ldw	r2,8(r6)
  8035c4:	defffe04 	addi	sp,sp,-8
  8035c8:	dc000015 	stw	r16,0(sp)
  8035cc:	dfc00115 	stw	ra,4(sp)
  8035d0:	3021883a 	mov	r16,r6
  8035d4:	0007883a 	mov	r3,zero
  8035d8:	1000061e 	bne	r2,zero,8035f4 <__sprint_r+0x34>
  8035dc:	1805883a 	mov	r2,r3
  8035e0:	30000115 	stw	zero,4(r6)
  8035e4:	dfc00117 	ldw	ra,4(sp)
  8035e8:	dc000017 	ldw	r16,0(sp)
  8035ec:	dec00204 	addi	sp,sp,8
  8035f0:	f800283a 	ret
  8035f4:	0806f780 	call	806f78 <__sfvwrite_r>
  8035f8:	1007883a 	mov	r3,r2
  8035fc:	1805883a 	mov	r2,r3
  803600:	80000115 	stw	zero,4(r16)
  803604:	80000215 	stw	zero,8(r16)
  803608:	dfc00117 	ldw	ra,4(sp)
  80360c:	dc000017 	ldw	r16,0(sp)
  803610:	dec00204 	addi	sp,sp,8
  803614:	f800283a 	ret

00803618 <___vfprintf_internal_r>:
  803618:	defea304 	addi	sp,sp,-1396
  80361c:	dd815915 	stw	r22,1380(sp)
  803620:	dc015315 	stw	r16,1356(sp)
  803624:	d9c15215 	stw	r7,1352(sp)
  803628:	dfc15c15 	stw	ra,1392(sp)
  80362c:	df015b15 	stw	fp,1388(sp)
  803630:	ddc15a15 	stw	r23,1384(sp)
  803634:	dd415815 	stw	r21,1376(sp)
  803638:	dd015715 	stw	r20,1372(sp)
  80363c:	dcc15615 	stw	r19,1368(sp)
  803640:	dc815515 	stw	r18,1364(sp)
  803644:	dc415415 	stw	r17,1360(sp)
  803648:	282d883a 	mov	r22,r5
  80364c:	3021883a 	mov	r16,r6
  803650:	d9015015 	stw	r4,1344(sp)
  803654:	080748c0 	call	80748c <_localeconv_r>
  803658:	10800017 	ldw	r2,0(r2)
  80365c:	d9c15217 	ldw	r7,1352(sp)
  803660:	d8814a15 	stw	r2,1320(sp)
  803664:	d8815017 	ldw	r2,1344(sp)
  803668:	10000226 	beq	r2,zero,803674 <___vfprintf_internal_r+0x5c>
  80366c:	10800e17 	ldw	r2,56(r2)
  803670:	10020d26 	beq	r2,zero,803ea8 <___vfprintf_internal_r+0x890>
  803674:	b080030b 	ldhu	r2,12(r22)
  803678:	1080020c 	andi	r2,r2,8
  80367c:	10020e26 	beq	r2,zero,803eb8 <___vfprintf_internal_r+0x8a0>
  803680:	b0800417 	ldw	r2,16(r22)
  803684:	10020c26 	beq	r2,zero,803eb8 <___vfprintf_internal_r+0x8a0>
  803688:	b200030b 	ldhu	r8,12(r22)
  80368c:	00800284 	movi	r2,10
  803690:	40c0068c 	andi	r3,r8,26
  803694:	18802f1e 	bne	r3,r2,803754 <___vfprintf_internal_r+0x13c>
  803698:	b080038f 	ldh	r2,14(r22)
  80369c:	10002d16 	blt	r2,zero,803754 <___vfprintf_internal_r+0x13c>
  8036a0:	b240038b 	ldhu	r9,14(r22)
  8036a4:	b2800717 	ldw	r10,28(r22)
  8036a8:	b2c00917 	ldw	r11,36(r22)
  8036ac:	d9015017 	ldw	r4,1344(sp)
  8036b0:	dc402a04 	addi	r17,sp,168
  8036b4:	d8804104 	addi	r2,sp,260
  8036b8:	00c10004 	movi	r3,1024
  8036bc:	423fff4c 	andi	r8,r8,65533
  8036c0:	800d883a 	mov	r6,r16
  8036c4:	880b883a 	mov	r5,r17
  8036c8:	da002d0d 	sth	r8,180(sp)
  8036cc:	da402d8d 	sth	r9,182(sp)
  8036d0:	da803115 	stw	r10,196(sp)
  8036d4:	dac03315 	stw	r11,204(sp)
  8036d8:	d8802e15 	stw	r2,184(sp)
  8036dc:	d8c02f15 	stw	r3,188(sp)
  8036e0:	d8802a15 	stw	r2,168(sp)
  8036e4:	d8c02c15 	stw	r3,176(sp)
  8036e8:	d8003015 	stw	zero,192(sp)
  8036ec:	08036180 	call	803618 <___vfprintf_internal_r>
  8036f0:	d8814c15 	stw	r2,1328(sp)
  8036f4:	10000416 	blt	r2,zero,803708 <___vfprintf_internal_r+0xf0>
  8036f8:	d9015017 	ldw	r4,1344(sp)
  8036fc:	880b883a 	mov	r5,r17
  803700:	08010bc0 	call	8010bc <_fflush_r>
  803704:	1002321e 	bne	r2,zero,803fd0 <___vfprintf_internal_r+0x9b8>
  803708:	d8802d0b 	ldhu	r2,180(sp)
  80370c:	1080100c 	andi	r2,r2,64
  803710:	10000326 	beq	r2,zero,803720 <___vfprintf_internal_r+0x108>
  803714:	b080030b 	ldhu	r2,12(r22)
  803718:	10801014 	ori	r2,r2,64
  80371c:	b080030d 	sth	r2,12(r22)
  803720:	d8814c17 	ldw	r2,1328(sp)
  803724:	dfc15c17 	ldw	ra,1392(sp)
  803728:	df015b17 	ldw	fp,1388(sp)
  80372c:	ddc15a17 	ldw	r23,1384(sp)
  803730:	dd815917 	ldw	r22,1380(sp)
  803734:	dd415817 	ldw	r21,1376(sp)
  803738:	dd015717 	ldw	r20,1372(sp)
  80373c:	dcc15617 	ldw	r19,1368(sp)
  803740:	dc815517 	ldw	r18,1364(sp)
  803744:	dc415417 	ldw	r17,1360(sp)
  803748:	dc015317 	ldw	r16,1356(sp)
  80374c:	dec15d04 	addi	sp,sp,1396
  803750:	f800283a 	ret
  803754:	0005883a 	mov	r2,zero
  803758:	0007883a 	mov	r3,zero
  80375c:	dd401a04 	addi	r21,sp,104
  803760:	d8814315 	stw	r2,1292(sp)
  803764:	802f883a 	mov	r23,r16
  803768:	d8c14415 	stw	r3,1296(sp)
  80376c:	d8014c15 	stw	zero,1328(sp)
  803770:	d8014915 	stw	zero,1316(sp)
  803774:	d8014515 	stw	zero,1300(sp)
  803778:	d8014815 	stw	zero,1312(sp)
  80377c:	dd400d15 	stw	r21,52(sp)
  803780:	d8000f15 	stw	zero,60(sp)
  803784:	d8000e15 	stw	zero,56(sp)
  803788:	b8800007 	ldb	r2,0(r23)
  80378c:	10001926 	beq	r2,zero,8037f4 <___vfprintf_internal_r+0x1dc>
  803790:	00c00944 	movi	r3,37
  803794:	10c01726 	beq	r2,r3,8037f4 <___vfprintf_internal_r+0x1dc>
  803798:	b821883a 	mov	r16,r23
  80379c:	00000106 	br	8037a4 <___vfprintf_internal_r+0x18c>
  8037a0:	10c00326 	beq	r2,r3,8037b0 <___vfprintf_internal_r+0x198>
  8037a4:	84000044 	addi	r16,r16,1
  8037a8:	80800007 	ldb	r2,0(r16)
  8037ac:	103ffc1e 	bne	r2,zero,8037a0 <___vfprintf_internal_r+0x188>
  8037b0:	85e7c83a 	sub	r19,r16,r23
  8037b4:	98000e26 	beq	r19,zero,8037f0 <___vfprintf_internal_r+0x1d8>
  8037b8:	dc800f17 	ldw	r18,60(sp)
  8037bc:	dc400e17 	ldw	r17,56(sp)
  8037c0:	008001c4 	movi	r2,7
  8037c4:	94e5883a 	add	r18,r18,r19
  8037c8:	8c400044 	addi	r17,r17,1
  8037cc:	adc00015 	stw	r23,0(r21)
  8037d0:	dc800f15 	stw	r18,60(sp)
  8037d4:	acc00115 	stw	r19,4(r21)
  8037d8:	dc400e15 	stw	r17,56(sp)
  8037dc:	14428b16 	blt	r2,r17,80420c <___vfprintf_internal_r+0xbf4>
  8037e0:	ad400204 	addi	r21,r21,8
  8037e4:	d9014c17 	ldw	r4,1328(sp)
  8037e8:	24c9883a 	add	r4,r4,r19
  8037ec:	d9014c15 	stw	r4,1328(sp)
  8037f0:	802f883a 	mov	r23,r16
  8037f4:	b8800007 	ldb	r2,0(r23)
  8037f8:	10013c26 	beq	r2,zero,803cec <___vfprintf_internal_r+0x6d4>
  8037fc:	bdc00044 	addi	r23,r23,1
  803800:	d8000405 	stb	zero,16(sp)
  803804:	b8c00007 	ldb	r3,0(r23)
  803808:	04ffffc4 	movi	r19,-1
  80380c:	d8014d15 	stw	zero,1332(sp)
  803810:	d8014b15 	stw	zero,1324(sp)
  803814:	d8c14e15 	stw	r3,1336(sp)
  803818:	bdc00044 	addi	r23,r23,1
  80381c:	d9414e17 	ldw	r5,1336(sp)
  803820:	00801604 	movi	r2,88
  803824:	28fff804 	addi	r3,r5,-32
  803828:	10c06036 	bltu	r2,r3,8039ac <___vfprintf_internal_r+0x394>
  80382c:	18c5883a 	add	r2,r3,r3
  803830:	1085883a 	add	r2,r2,r2
  803834:	00c02034 	movhi	r3,128
  803838:	18ce1204 	addi	r3,r3,14408
  80383c:	10c5883a 	add	r2,r2,r3
  803840:	11000017 	ldw	r4,0(r2)
  803844:	2000683a 	jmp	r4
  803848:	008047bc 	xorhi	r2,zero,286
  80384c:	008039ac 	andhi	r2,zero,230
  803850:	008039ac 	andhi	r2,zero,230
  803854:	008047a8 	cmpgeui	r2,zero,286
  803858:	008039ac 	andhi	r2,zero,230
  80385c:	008039ac 	andhi	r2,zero,230
  803860:	008039ac 	andhi	r2,zero,230
  803864:	008039ac 	andhi	r2,zero,230
  803868:	008039ac 	andhi	r2,zero,230
  80386c:	008039ac 	andhi	r2,zero,230
  803870:	00804588 	cmpgei	r2,zero,278
  803874:	00804798 	cmpnei	r2,zero,286
  803878:	008039ac 	andhi	r2,zero,230
  80387c:	008045a0 	cmpeqi	r2,zero,278
  803880:	00804834 	movhi	r2,288
  803884:	008039ac 	andhi	r2,zero,230
  803888:	00804820 	cmpeqi	r2,zero,288
  80388c:	008047e8 	cmpgeui	r2,zero,287
  803890:	008047e8 	cmpgeui	r2,zero,287
  803894:	008047e8 	cmpgeui	r2,zero,287
  803898:	008047e8 	cmpgeui	r2,zero,287
  80389c:	008047e8 	cmpgeui	r2,zero,287
  8038a0:	008047e8 	cmpgeui	r2,zero,287
  8038a4:	008047e8 	cmpgeui	r2,zero,287
  8038a8:	008047e8 	cmpgeui	r2,zero,287
  8038ac:	008047e8 	cmpgeui	r2,zero,287
  8038b0:	008039ac 	andhi	r2,zero,230
  8038b4:	008039ac 	andhi	r2,zero,230
  8038b8:	008039ac 	andhi	r2,zero,230
  8038bc:	008039ac 	andhi	r2,zero,230
  8038c0:	008039ac 	andhi	r2,zero,230
  8038c4:	008039ac 	andhi	r2,zero,230
  8038c8:	008039ac 	andhi	r2,zero,230
  8038cc:	008039ac 	andhi	r2,zero,230
  8038d0:	008039ac 	andhi	r2,zero,230
  8038d4:	008039ac 	andhi	r2,zero,230
  8038d8:	00804004 	movi	r2,256
  8038dc:	00804670 	cmpltui	r2,zero,281
  8038e0:	008039ac 	andhi	r2,zero,230
  8038e4:	00804670 	cmpltui	r2,zero,281
  8038e8:	008039ac 	andhi	r2,zero,230
  8038ec:	008039ac 	andhi	r2,zero,230
  8038f0:	008039ac 	andhi	r2,zero,230
  8038f4:	008039ac 	andhi	r2,zero,230
  8038f8:	008047d4 	movui	r2,287
  8038fc:	008039ac 	andhi	r2,zero,230
  803900:	008039ac 	andhi	r2,zero,230
  803904:	008040b8 	rdprs	r2,zero,258
  803908:	008039ac 	andhi	r2,zero,230
  80390c:	008039ac 	andhi	r2,zero,230
  803910:	008039ac 	andhi	r2,zero,230
  803914:	008039ac 	andhi	r2,zero,230
  803918:	008039ac 	andhi	r2,zero,230
  80391c:	00804104 	movi	r2,260
  803920:	008039ac 	andhi	r2,zero,230
  803924:	008039ac 	andhi	r2,zero,230
  803928:	00804724 	muli	r2,zero,284
  80392c:	008039ac 	andhi	r2,zero,230
  803930:	008039ac 	andhi	r2,zero,230
  803934:	008039ac 	andhi	r2,zero,230
  803938:	008039ac 	andhi	r2,zero,230
  80393c:	008039ac 	andhi	r2,zero,230
  803940:	008039ac 	andhi	r2,zero,230
  803944:	008039ac 	andhi	r2,zero,230
  803948:	008039ac 	andhi	r2,zero,230
  80394c:	008039ac 	andhi	r2,zero,230
  803950:	008039ac 	andhi	r2,zero,230
  803954:	008046f8 	rdprs	r2,zero,283
  803958:	00804010 	cmplti	r2,zero,256
  80395c:	00804670 	cmpltui	r2,zero,281
  803960:	00804670 	cmpltui	r2,zero,281
  803964:	00804670 	cmpltui	r2,zero,281
  803968:	0080465c 	xori	r2,zero,281
  80396c:	00804010 	cmplti	r2,zero,256
  803970:	008039ac 	andhi	r2,zero,230
  803974:	008039ac 	andhi	r2,zero,230
  803978:	008045e4 	muli	r2,zero,279
  80397c:	008039ac 	andhi	r2,zero,230
  803980:	008045b4 	movhi	r2,278
  803984:	008040c4 	movi	r2,259
  803988:	00804614 	movui	r2,280
  80398c:	00804600 	call	80460 <__alt_mem_sdram_controller-0x77fba0>
  803990:	008039ac 	andhi	r2,zero,230
  803994:	00804890 	cmplti	r2,zero,290
  803998:	008039ac 	andhi	r2,zero,230
  80399c:	00804110 	cmplti	r2,zero,260
  8039a0:	008039ac 	andhi	r2,zero,230
  8039a4:	008039ac 	andhi	r2,zero,230
  8039a8:	00804788 	cmpgei	r2,zero,286
  8039ac:	d9014e17 	ldw	r4,1336(sp)
  8039b0:	2000ce26 	beq	r4,zero,803cec <___vfprintf_internal_r+0x6d4>
  8039b4:	01400044 	movi	r5,1
  8039b8:	d9801004 	addi	r6,sp,64
  8039bc:	d9c14115 	stw	r7,1284(sp)
  8039c0:	d9414615 	stw	r5,1304(sp)
  8039c4:	d9814215 	stw	r6,1288(sp)
  8039c8:	280f883a 	mov	r7,r5
  8039cc:	d9001005 	stb	r4,64(sp)
  8039d0:	d8000405 	stb	zero,16(sp)
  8039d4:	d8014715 	stw	zero,1308(sp)
  8039d8:	d8c14d17 	ldw	r3,1332(sp)
  8039dc:	1880008c 	andi	r2,r3,2
  8039e0:	1005003a 	cmpeq	r2,r2,zero
  8039e4:	d8815115 	stw	r2,1348(sp)
  8039e8:	1000031e 	bne	r2,zero,8039f8 <___vfprintf_internal_r+0x3e0>
  8039ec:	d9014617 	ldw	r4,1304(sp)
  8039f0:	21000084 	addi	r4,r4,2
  8039f4:	d9014615 	stw	r4,1304(sp)
  8039f8:	d9414d17 	ldw	r5,1332(sp)
  8039fc:	2940210c 	andi	r5,r5,132
  803a00:	d9414f15 	stw	r5,1340(sp)
  803a04:	28002d1e 	bne	r5,zero,803abc <___vfprintf_internal_r+0x4a4>
  803a08:	d9814b17 	ldw	r6,1324(sp)
  803a0c:	d8814617 	ldw	r2,1304(sp)
  803a10:	30a1c83a 	sub	r16,r6,r2
  803a14:	0400290e 	bge	zero,r16,803abc <___vfprintf_internal_r+0x4a4>
  803a18:	00800404 	movi	r2,16
  803a1c:	1404580e 	bge	r2,r16,804b80 <___vfprintf_internal_r+0x1568>
  803a20:	dc800f17 	ldw	r18,60(sp)
  803a24:	dc400e17 	ldw	r17,56(sp)
  803a28:	1027883a 	mov	r19,r2
  803a2c:	07002074 	movhi	fp,129
  803a30:	e73fba04 	addi	fp,fp,-280
  803a34:	050001c4 	movi	r20,7
  803a38:	00000306 	br	803a48 <___vfprintf_internal_r+0x430>
  803a3c:	843ffc04 	addi	r16,r16,-16
  803a40:	ad400204 	addi	r21,r21,8
  803a44:	9c00130e 	bge	r19,r16,803a94 <___vfprintf_internal_r+0x47c>
  803a48:	94800404 	addi	r18,r18,16
  803a4c:	8c400044 	addi	r17,r17,1
  803a50:	af000015 	stw	fp,0(r21)
  803a54:	acc00115 	stw	r19,4(r21)
  803a58:	dc800f15 	stw	r18,60(sp)
  803a5c:	dc400e15 	stw	r17,56(sp)
  803a60:	a47ff60e 	bge	r20,r17,803a3c <___vfprintf_internal_r+0x424>
  803a64:	d9015017 	ldw	r4,1344(sp)
  803a68:	b00b883a 	mov	r5,r22
  803a6c:	d9800d04 	addi	r6,sp,52
  803a70:	d9c15215 	stw	r7,1352(sp)
  803a74:	08035c00 	call	8035c0 <__sprint_r>
  803a78:	d9c15217 	ldw	r7,1352(sp)
  803a7c:	10009e1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  803a80:	843ffc04 	addi	r16,r16,-16
  803a84:	dc800f17 	ldw	r18,60(sp)
  803a88:	dc400e17 	ldw	r17,56(sp)
  803a8c:	dd401a04 	addi	r21,sp,104
  803a90:	9c3fed16 	blt	r19,r16,803a48 <___vfprintf_internal_r+0x430>
  803a94:	9425883a 	add	r18,r18,r16
  803a98:	8c400044 	addi	r17,r17,1
  803a9c:	008001c4 	movi	r2,7
  803aa0:	af000015 	stw	fp,0(r21)
  803aa4:	ac000115 	stw	r16,4(r21)
  803aa8:	dc800f15 	stw	r18,60(sp)
  803aac:	dc400e15 	stw	r17,56(sp)
  803ab0:	1441f516 	blt	r2,r17,804288 <___vfprintf_internal_r+0xc70>
  803ab4:	ad400204 	addi	r21,r21,8
  803ab8:	00000206 	br	803ac4 <___vfprintf_internal_r+0x4ac>
  803abc:	dc800f17 	ldw	r18,60(sp)
  803ac0:	dc400e17 	ldw	r17,56(sp)
  803ac4:	d8800407 	ldb	r2,16(sp)
  803ac8:	10000b26 	beq	r2,zero,803af8 <___vfprintf_internal_r+0x4e0>
  803acc:	00800044 	movi	r2,1
  803ad0:	94800044 	addi	r18,r18,1
  803ad4:	8c400044 	addi	r17,r17,1
  803ad8:	a8800115 	stw	r2,4(r21)
  803adc:	d8c00404 	addi	r3,sp,16
  803ae0:	008001c4 	movi	r2,7
  803ae4:	a8c00015 	stw	r3,0(r21)
  803ae8:	dc800f15 	stw	r18,60(sp)
  803aec:	dc400e15 	stw	r17,56(sp)
  803af0:	1441da16 	blt	r2,r17,80425c <___vfprintf_internal_r+0xc44>
  803af4:	ad400204 	addi	r21,r21,8
  803af8:	d9015117 	ldw	r4,1348(sp)
  803afc:	20000b1e 	bne	r4,zero,803b2c <___vfprintf_internal_r+0x514>
  803b00:	d8800504 	addi	r2,sp,20
  803b04:	94800084 	addi	r18,r18,2
  803b08:	8c400044 	addi	r17,r17,1
  803b0c:	a8800015 	stw	r2,0(r21)
  803b10:	00c00084 	movi	r3,2
  803b14:	008001c4 	movi	r2,7
  803b18:	a8c00115 	stw	r3,4(r21)
  803b1c:	dc800f15 	stw	r18,60(sp)
  803b20:	dc400e15 	stw	r17,56(sp)
  803b24:	1441c216 	blt	r2,r17,804230 <___vfprintf_internal_r+0xc18>
  803b28:	ad400204 	addi	r21,r21,8
  803b2c:	d9414f17 	ldw	r5,1340(sp)
  803b30:	00802004 	movi	r2,128
  803b34:	2880b126 	beq	r5,r2,803dfc <___vfprintf_internal_r+0x7e4>
  803b38:	d8c14717 	ldw	r3,1308(sp)
  803b3c:	19e1c83a 	sub	r16,r3,r7
  803b40:	0400260e 	bge	zero,r16,803bdc <___vfprintf_internal_r+0x5c4>
  803b44:	00800404 	movi	r2,16
  803b48:	1403c90e 	bge	r2,r16,804a70 <___vfprintf_internal_r+0x1458>
  803b4c:	1027883a 	mov	r19,r2
  803b50:	07002074 	movhi	fp,129
  803b54:	e73fb604 	addi	fp,fp,-296
  803b58:	050001c4 	movi	r20,7
  803b5c:	00000306 	br	803b6c <___vfprintf_internal_r+0x554>
  803b60:	843ffc04 	addi	r16,r16,-16
  803b64:	ad400204 	addi	r21,r21,8
  803b68:	9c00130e 	bge	r19,r16,803bb8 <___vfprintf_internal_r+0x5a0>
  803b6c:	94800404 	addi	r18,r18,16
  803b70:	8c400044 	addi	r17,r17,1
  803b74:	af000015 	stw	fp,0(r21)
  803b78:	acc00115 	stw	r19,4(r21)
  803b7c:	dc800f15 	stw	r18,60(sp)
  803b80:	dc400e15 	stw	r17,56(sp)
  803b84:	a47ff60e 	bge	r20,r17,803b60 <___vfprintf_internal_r+0x548>
  803b88:	d9015017 	ldw	r4,1344(sp)
  803b8c:	b00b883a 	mov	r5,r22
  803b90:	d9800d04 	addi	r6,sp,52
  803b94:	d9c15215 	stw	r7,1352(sp)
  803b98:	08035c00 	call	8035c0 <__sprint_r>
  803b9c:	d9c15217 	ldw	r7,1352(sp)
  803ba0:	1000551e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  803ba4:	843ffc04 	addi	r16,r16,-16
  803ba8:	dc800f17 	ldw	r18,60(sp)
  803bac:	dc400e17 	ldw	r17,56(sp)
  803bb0:	dd401a04 	addi	r21,sp,104
  803bb4:	9c3fed16 	blt	r19,r16,803b6c <___vfprintf_internal_r+0x554>
  803bb8:	9425883a 	add	r18,r18,r16
  803bbc:	8c400044 	addi	r17,r17,1
  803bc0:	008001c4 	movi	r2,7
  803bc4:	af000015 	stw	fp,0(r21)
  803bc8:	ac000115 	stw	r16,4(r21)
  803bcc:	dc800f15 	stw	r18,60(sp)
  803bd0:	dc400e15 	stw	r17,56(sp)
  803bd4:	14418216 	blt	r2,r17,8041e0 <___vfprintf_internal_r+0xbc8>
  803bd8:	ad400204 	addi	r21,r21,8
  803bdc:	d9014d17 	ldw	r4,1332(sp)
  803be0:	2080400c 	andi	r2,r4,256
  803be4:	10004a1e 	bne	r2,zero,803d10 <___vfprintf_internal_r+0x6f8>
  803be8:	d9414217 	ldw	r5,1288(sp)
  803bec:	91e5883a 	add	r18,r18,r7
  803bf0:	8c400044 	addi	r17,r17,1
  803bf4:	008001c4 	movi	r2,7
  803bf8:	a9400015 	stw	r5,0(r21)
  803bfc:	a9c00115 	stw	r7,4(r21)
  803c00:	dc800f15 	stw	r18,60(sp)
  803c04:	dc400e15 	stw	r17,56(sp)
  803c08:	14416716 	blt	r2,r17,8041a8 <___vfprintf_internal_r+0xb90>
  803c0c:	a8c00204 	addi	r3,r21,8
  803c10:	d9814d17 	ldw	r6,1332(sp)
  803c14:	3080010c 	andi	r2,r6,4
  803c18:	10002826 	beq	r2,zero,803cbc <___vfprintf_internal_r+0x6a4>
  803c1c:	d8814b17 	ldw	r2,1324(sp)
  803c20:	d9014617 	ldw	r4,1304(sp)
  803c24:	1121c83a 	sub	r16,r2,r4
  803c28:	0400240e 	bge	zero,r16,803cbc <___vfprintf_internal_r+0x6a4>
  803c2c:	00800404 	movi	r2,16
  803c30:	14044f0e 	bge	r2,r16,804d70 <___vfprintf_internal_r+0x1758>
  803c34:	dc400e17 	ldw	r17,56(sp)
  803c38:	1027883a 	mov	r19,r2
  803c3c:	07002074 	movhi	fp,129
  803c40:	e73fba04 	addi	fp,fp,-280
  803c44:	050001c4 	movi	r20,7
  803c48:	00000306 	br	803c58 <___vfprintf_internal_r+0x640>
  803c4c:	843ffc04 	addi	r16,r16,-16
  803c50:	18c00204 	addi	r3,r3,8
  803c54:	9c00110e 	bge	r19,r16,803c9c <___vfprintf_internal_r+0x684>
  803c58:	94800404 	addi	r18,r18,16
  803c5c:	8c400044 	addi	r17,r17,1
  803c60:	1f000015 	stw	fp,0(r3)
  803c64:	1cc00115 	stw	r19,4(r3)
  803c68:	dc800f15 	stw	r18,60(sp)
  803c6c:	dc400e15 	stw	r17,56(sp)
  803c70:	a47ff60e 	bge	r20,r17,803c4c <___vfprintf_internal_r+0x634>
  803c74:	d9015017 	ldw	r4,1344(sp)
  803c78:	b00b883a 	mov	r5,r22
  803c7c:	d9800d04 	addi	r6,sp,52
  803c80:	08035c00 	call	8035c0 <__sprint_r>
  803c84:	10001c1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  803c88:	843ffc04 	addi	r16,r16,-16
  803c8c:	dc800f17 	ldw	r18,60(sp)
  803c90:	dc400e17 	ldw	r17,56(sp)
  803c94:	d8c01a04 	addi	r3,sp,104
  803c98:	9c3fef16 	blt	r19,r16,803c58 <___vfprintf_internal_r+0x640>
  803c9c:	9425883a 	add	r18,r18,r16
  803ca0:	8c400044 	addi	r17,r17,1
  803ca4:	008001c4 	movi	r2,7
  803ca8:	1f000015 	stw	fp,0(r3)
  803cac:	1c000115 	stw	r16,4(r3)
  803cb0:	dc800f15 	stw	r18,60(sp)
  803cb4:	dc400e15 	stw	r17,56(sp)
  803cb8:	1440cb16 	blt	r2,r17,803fe8 <___vfprintf_internal_r+0x9d0>
  803cbc:	d8814b17 	ldw	r2,1324(sp)
  803cc0:	d9414617 	ldw	r5,1304(sp)
  803cc4:	1140010e 	bge	r2,r5,803ccc <___vfprintf_internal_r+0x6b4>
  803cc8:	2805883a 	mov	r2,r5
  803ccc:	d9814c17 	ldw	r6,1328(sp)
  803cd0:	308d883a 	add	r6,r6,r2
  803cd4:	d9814c15 	stw	r6,1328(sp)
  803cd8:	90013b1e 	bne	r18,zero,8041c8 <___vfprintf_internal_r+0xbb0>
  803cdc:	d9c14117 	ldw	r7,1284(sp)
  803ce0:	dd401a04 	addi	r21,sp,104
  803ce4:	d8000e15 	stw	zero,56(sp)
  803ce8:	003ea706 	br	803788 <___vfprintf_internal_r+0x170>
  803cec:	d8800f17 	ldw	r2,60(sp)
  803cf0:	10053f1e 	bne	r2,zero,8051f0 <___vfprintf_internal_r+0x1bd8>
  803cf4:	d8000e15 	stw	zero,56(sp)
  803cf8:	b080030b 	ldhu	r2,12(r22)
  803cfc:	1080100c 	andi	r2,r2,64
  803d00:	103e8726 	beq	r2,zero,803720 <___vfprintf_internal_r+0x108>
  803d04:	00bfffc4 	movi	r2,-1
  803d08:	d8814c15 	stw	r2,1328(sp)
  803d0c:	003e8406 	br	803720 <___vfprintf_internal_r+0x108>
  803d10:	d9814e17 	ldw	r6,1336(sp)
  803d14:	00801944 	movi	r2,101
  803d18:	11806e16 	blt	r2,r6,803ed4 <___vfprintf_internal_r+0x8bc>
  803d1c:	d9414817 	ldw	r5,1312(sp)
  803d20:	00c00044 	movi	r3,1
  803d24:	1943430e 	bge	r3,r5,804a34 <___vfprintf_internal_r+0x141c>
  803d28:	d8814217 	ldw	r2,1288(sp)
  803d2c:	94800044 	addi	r18,r18,1
  803d30:	8c400044 	addi	r17,r17,1
  803d34:	a8800015 	stw	r2,0(r21)
  803d38:	008001c4 	movi	r2,7
  803d3c:	a8c00115 	stw	r3,4(r21)
  803d40:	dc800f15 	stw	r18,60(sp)
  803d44:	dc400e15 	stw	r17,56(sp)
  803d48:	1441ca16 	blt	r2,r17,804474 <___vfprintf_internal_r+0xe5c>
  803d4c:	a8c00204 	addi	r3,r21,8
  803d50:	d9014a17 	ldw	r4,1320(sp)
  803d54:	00800044 	movi	r2,1
  803d58:	94800044 	addi	r18,r18,1
  803d5c:	8c400044 	addi	r17,r17,1
  803d60:	18800115 	stw	r2,4(r3)
  803d64:	008001c4 	movi	r2,7
  803d68:	19000015 	stw	r4,0(r3)
  803d6c:	dc800f15 	stw	r18,60(sp)
  803d70:	dc400e15 	stw	r17,56(sp)
  803d74:	1441b616 	blt	r2,r17,804450 <___vfprintf_internal_r+0xe38>
  803d78:	1cc00204 	addi	r19,r3,8
  803d7c:	d9014317 	ldw	r4,1292(sp)
  803d80:	d9414417 	ldw	r5,1296(sp)
  803d84:	000d883a 	mov	r6,zero
  803d88:	000f883a 	mov	r7,zero
  803d8c:	080aad00 	call	80aad0 <__nedf2>
  803d90:	10017426 	beq	r2,zero,804364 <___vfprintf_internal_r+0xd4c>
  803d94:	d9414817 	ldw	r5,1312(sp)
  803d98:	d9814217 	ldw	r6,1288(sp)
  803d9c:	8c400044 	addi	r17,r17,1
  803da0:	2c85883a 	add	r2,r5,r18
  803da4:	14bfffc4 	addi	r18,r2,-1
  803da8:	28bfffc4 	addi	r2,r5,-1
  803dac:	30c00044 	addi	r3,r6,1
  803db0:	98800115 	stw	r2,4(r19)
  803db4:	008001c4 	movi	r2,7
  803db8:	98c00015 	stw	r3,0(r19)
  803dbc:	dc800f15 	stw	r18,60(sp)
  803dc0:	dc400e15 	stw	r17,56(sp)
  803dc4:	14418e16 	blt	r2,r17,804400 <___vfprintf_internal_r+0xde8>
  803dc8:	9cc00204 	addi	r19,r19,8
  803dcc:	d9414917 	ldw	r5,1316(sp)
  803dd0:	d8800904 	addi	r2,sp,36
  803dd4:	8c400044 	addi	r17,r17,1
  803dd8:	9165883a 	add	r18,r18,r5
  803ddc:	98800015 	stw	r2,0(r19)
  803de0:	008001c4 	movi	r2,7
  803de4:	99400115 	stw	r5,4(r19)
  803de8:	dc800f15 	stw	r18,60(sp)
  803dec:	dc400e15 	stw	r17,56(sp)
  803df0:	1440ed16 	blt	r2,r17,8041a8 <___vfprintf_internal_r+0xb90>
  803df4:	98c00204 	addi	r3,r19,8
  803df8:	003f8506 	br	803c10 <___vfprintf_internal_r+0x5f8>
  803dfc:	d9814b17 	ldw	r6,1324(sp)
  803e00:	d8814617 	ldw	r2,1304(sp)
  803e04:	30a1c83a 	sub	r16,r6,r2
  803e08:	043f4b0e 	bge	zero,r16,803b38 <___vfprintf_internal_r+0x520>
  803e0c:	00800404 	movi	r2,16
  803e10:	1404340e 	bge	r2,r16,804ee4 <___vfprintf_internal_r+0x18cc>
  803e14:	1027883a 	mov	r19,r2
  803e18:	07002074 	movhi	fp,129
  803e1c:	e73fb604 	addi	fp,fp,-296
  803e20:	050001c4 	movi	r20,7
  803e24:	00000306 	br	803e34 <___vfprintf_internal_r+0x81c>
  803e28:	843ffc04 	addi	r16,r16,-16
  803e2c:	ad400204 	addi	r21,r21,8
  803e30:	9c00130e 	bge	r19,r16,803e80 <___vfprintf_internal_r+0x868>
  803e34:	94800404 	addi	r18,r18,16
  803e38:	8c400044 	addi	r17,r17,1
  803e3c:	af000015 	stw	fp,0(r21)
  803e40:	acc00115 	stw	r19,4(r21)
  803e44:	dc800f15 	stw	r18,60(sp)
  803e48:	dc400e15 	stw	r17,56(sp)
  803e4c:	a47ff60e 	bge	r20,r17,803e28 <___vfprintf_internal_r+0x810>
  803e50:	d9015017 	ldw	r4,1344(sp)
  803e54:	b00b883a 	mov	r5,r22
  803e58:	d9800d04 	addi	r6,sp,52
  803e5c:	d9c15215 	stw	r7,1352(sp)
  803e60:	08035c00 	call	8035c0 <__sprint_r>
  803e64:	d9c15217 	ldw	r7,1352(sp)
  803e68:	103fa31e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  803e6c:	843ffc04 	addi	r16,r16,-16
  803e70:	dc800f17 	ldw	r18,60(sp)
  803e74:	dc400e17 	ldw	r17,56(sp)
  803e78:	dd401a04 	addi	r21,sp,104
  803e7c:	9c3fed16 	blt	r19,r16,803e34 <___vfprintf_internal_r+0x81c>
  803e80:	9425883a 	add	r18,r18,r16
  803e84:	8c400044 	addi	r17,r17,1
  803e88:	008001c4 	movi	r2,7
  803e8c:	af000015 	stw	fp,0(r21)
  803e90:	ac000115 	stw	r16,4(r21)
  803e94:	dc800f15 	stw	r18,60(sp)
  803e98:	dc400e15 	stw	r17,56(sp)
  803e9c:	14416116 	blt	r2,r17,804424 <___vfprintf_internal_r+0xe0c>
  803ea0:	ad400204 	addi	r21,r21,8
  803ea4:	003f2406 	br	803b38 <___vfprintf_internal_r+0x520>
  803ea8:	d9015017 	ldw	r4,1344(sp)
  803eac:	080147c0 	call	80147c <__sinit>
  803eb0:	d9c15217 	ldw	r7,1352(sp)
  803eb4:	003def06 	br	803674 <___vfprintf_internal_r+0x5c>
  803eb8:	d9015017 	ldw	r4,1344(sp)
  803ebc:	b00b883a 	mov	r5,r22
  803ec0:	d9c15215 	stw	r7,1352(sp)
  803ec4:	08055600 	call	805560 <__swsetup_r>
  803ec8:	d9c15217 	ldw	r7,1352(sp)
  803ecc:	103dee26 	beq	r2,zero,803688 <___vfprintf_internal_r+0x70>
  803ed0:	003f8c06 	br	803d04 <___vfprintf_internal_r+0x6ec>
  803ed4:	d9014317 	ldw	r4,1292(sp)
  803ed8:	d9414417 	ldw	r5,1296(sp)
  803edc:	000d883a 	mov	r6,zero
  803ee0:	000f883a 	mov	r7,zero
  803ee4:	080aa480 	call	80aa48 <__eqdf2>
  803ee8:	1000f21e 	bne	r2,zero,8042b4 <___vfprintf_internal_r+0xc9c>
  803eec:	00802074 	movhi	r2,129
  803ef0:	10bfb504 	addi	r2,r2,-300
  803ef4:	94800044 	addi	r18,r18,1
  803ef8:	8c400044 	addi	r17,r17,1
  803efc:	a8800015 	stw	r2,0(r21)
  803f00:	00c00044 	movi	r3,1
  803f04:	008001c4 	movi	r2,7
  803f08:	a8c00115 	stw	r3,4(r21)
  803f0c:	dc800f15 	stw	r18,60(sp)
  803f10:	dc400e15 	stw	r17,56(sp)
  803f14:	1442fa16 	blt	r2,r17,804b00 <___vfprintf_internal_r+0x14e8>
  803f18:	a8c00204 	addi	r3,r21,8
  803f1c:	d8800617 	ldw	r2,24(sp)
  803f20:	d9014817 	ldw	r4,1312(sp)
  803f24:	11015c0e 	bge	r2,r4,804498 <___vfprintf_internal_r+0xe80>
  803f28:	dc400e17 	ldw	r17,56(sp)
  803f2c:	d9814a17 	ldw	r6,1320(sp)
  803f30:	00800044 	movi	r2,1
  803f34:	94800044 	addi	r18,r18,1
  803f38:	8c400044 	addi	r17,r17,1
  803f3c:	18800115 	stw	r2,4(r3)
  803f40:	008001c4 	movi	r2,7
  803f44:	19800015 	stw	r6,0(r3)
  803f48:	dc800f15 	stw	r18,60(sp)
  803f4c:	dc400e15 	stw	r17,56(sp)
  803f50:	14431016 	blt	r2,r17,804b94 <___vfprintf_internal_r+0x157c>
  803f54:	18c00204 	addi	r3,r3,8
  803f58:	d8814817 	ldw	r2,1312(sp)
  803f5c:	143fffc4 	addi	r16,r2,-1
  803f60:	043f2b0e 	bge	zero,r16,803c10 <___vfprintf_internal_r+0x5f8>
  803f64:	00800404 	movi	r2,16
  803f68:	1402a20e 	bge	r2,r16,8049f4 <___vfprintf_internal_r+0x13dc>
  803f6c:	dc400e17 	ldw	r17,56(sp)
  803f70:	1027883a 	mov	r19,r2
  803f74:	07002074 	movhi	fp,129
  803f78:	e73fb604 	addi	fp,fp,-296
  803f7c:	050001c4 	movi	r20,7
  803f80:	00000306 	br	803f90 <___vfprintf_internal_r+0x978>
  803f84:	18c00204 	addi	r3,r3,8
  803f88:	843ffc04 	addi	r16,r16,-16
  803f8c:	9c029c0e 	bge	r19,r16,804a00 <___vfprintf_internal_r+0x13e8>
  803f90:	94800404 	addi	r18,r18,16
  803f94:	8c400044 	addi	r17,r17,1
  803f98:	1f000015 	stw	fp,0(r3)
  803f9c:	1cc00115 	stw	r19,4(r3)
  803fa0:	dc800f15 	stw	r18,60(sp)
  803fa4:	dc400e15 	stw	r17,56(sp)
  803fa8:	a47ff60e 	bge	r20,r17,803f84 <___vfprintf_internal_r+0x96c>
  803fac:	d9015017 	ldw	r4,1344(sp)
  803fb0:	b00b883a 	mov	r5,r22
  803fb4:	d9800d04 	addi	r6,sp,52
  803fb8:	08035c00 	call	8035c0 <__sprint_r>
  803fbc:	103f4e1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  803fc0:	dc800f17 	ldw	r18,60(sp)
  803fc4:	dc400e17 	ldw	r17,56(sp)
  803fc8:	d8c01a04 	addi	r3,sp,104
  803fcc:	003fee06 	br	803f88 <___vfprintf_internal_r+0x970>
  803fd0:	d8802d0b 	ldhu	r2,180(sp)
  803fd4:	00ffffc4 	movi	r3,-1
  803fd8:	d8c14c15 	stw	r3,1328(sp)
  803fdc:	1080100c 	andi	r2,r2,64
  803fe0:	103dcc1e 	bne	r2,zero,803714 <___vfprintf_internal_r+0xfc>
  803fe4:	003dce06 	br	803720 <___vfprintf_internal_r+0x108>
  803fe8:	d9015017 	ldw	r4,1344(sp)
  803fec:	b00b883a 	mov	r5,r22
  803ff0:	d9800d04 	addi	r6,sp,52
  803ff4:	08035c00 	call	8035c0 <__sprint_r>
  803ff8:	103f3f1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  803ffc:	dc800f17 	ldw	r18,60(sp)
  804000:	003f2e06 	br	803cbc <___vfprintf_internal_r+0x6a4>
  804004:	d9414d17 	ldw	r5,1332(sp)
  804008:	29400414 	ori	r5,r5,16
  80400c:	d9414d15 	stw	r5,1332(sp)
  804010:	d9814d17 	ldw	r6,1332(sp)
  804014:	3080080c 	andi	r2,r6,32
  804018:	10014f1e 	bne	r2,zero,804558 <___vfprintf_internal_r+0xf40>
  80401c:	d8c14d17 	ldw	r3,1332(sp)
  804020:	1880040c 	andi	r2,r3,16
  804024:	1002ea1e 	bne	r2,zero,804bd0 <___vfprintf_internal_r+0x15b8>
  804028:	d9014d17 	ldw	r4,1332(sp)
  80402c:	2080100c 	andi	r2,r4,64
  804030:	1002e726 	beq	r2,zero,804bd0 <___vfprintf_internal_r+0x15b8>
  804034:	3880000f 	ldh	r2,0(r7)
  804038:	39c00104 	addi	r7,r7,4
  80403c:	d9c14115 	stw	r7,1284(sp)
  804040:	1023d7fa 	srai	r17,r2,31
  804044:	1021883a 	mov	r16,r2
  804048:	88037216 	blt	r17,zero,804e14 <___vfprintf_internal_r+0x17fc>
  80404c:	01000044 	movi	r4,1
  804050:	98000416 	blt	r19,zero,804064 <___vfprintf_internal_r+0xa4c>
  804054:	d8c14d17 	ldw	r3,1332(sp)
  804058:	00bfdfc4 	movi	r2,-129
  80405c:	1886703a 	and	r3,r3,r2
  804060:	d8c14d15 	stw	r3,1332(sp)
  804064:	8444b03a 	or	r2,r16,r17
  804068:	1002261e 	bne	r2,zero,804904 <___vfprintf_internal_r+0x12ec>
  80406c:	9802251e 	bne	r19,zero,804904 <___vfprintf_internal_r+0x12ec>
  804070:	20803fcc 	andi	r2,r4,255
  804074:	10029b26 	beq	r2,zero,804ae4 <___vfprintf_internal_r+0x14cc>
  804078:	d8c01a04 	addi	r3,sp,104
  80407c:	dd001004 	addi	r20,sp,64
  804080:	d8c14215 	stw	r3,1288(sp)
  804084:	d8c14217 	ldw	r3,1288(sp)
  804088:	dcc14615 	stw	r19,1304(sp)
  80408c:	a0c5c83a 	sub	r2,r20,r3
  804090:	11c00a04 	addi	r7,r2,40
  804094:	99c0010e 	bge	r19,r7,80409c <___vfprintf_internal_r+0xa84>
  804098:	d9c14615 	stw	r7,1304(sp)
  80409c:	dcc14715 	stw	r19,1308(sp)
  8040a0:	d8800407 	ldb	r2,16(sp)
  8040a4:	103e4c26 	beq	r2,zero,8039d8 <___vfprintf_internal_r+0x3c0>
  8040a8:	d8814617 	ldw	r2,1304(sp)
  8040ac:	10800044 	addi	r2,r2,1
  8040b0:	d8814615 	stw	r2,1304(sp)
  8040b4:	003e4806 	br	8039d8 <___vfprintf_internal_r+0x3c0>
  8040b8:	d9814d17 	ldw	r6,1332(sp)
  8040bc:	31800414 	ori	r6,r6,16
  8040c0:	d9814d15 	stw	r6,1332(sp)
  8040c4:	d8c14d17 	ldw	r3,1332(sp)
  8040c8:	1880080c 	andi	r2,r3,32
  8040cc:	1001271e 	bne	r2,zero,80456c <___vfprintf_internal_r+0xf54>
  8040d0:	d9414d17 	ldw	r5,1332(sp)
  8040d4:	2880040c 	andi	r2,r5,16
  8040d8:	1002b61e 	bne	r2,zero,804bb4 <___vfprintf_internal_r+0x159c>
  8040dc:	d9814d17 	ldw	r6,1332(sp)
  8040e0:	3080100c 	andi	r2,r6,64
  8040e4:	1002b326 	beq	r2,zero,804bb4 <___vfprintf_internal_r+0x159c>
  8040e8:	3c00000b 	ldhu	r16,0(r7)
  8040ec:	0009883a 	mov	r4,zero
  8040f0:	39c00104 	addi	r7,r7,4
  8040f4:	0023883a 	mov	r17,zero
  8040f8:	d9c14115 	stw	r7,1284(sp)
  8040fc:	d8000405 	stb	zero,16(sp)
  804100:	003fd306 	br	804050 <___vfprintf_internal_r+0xa38>
  804104:	d9014d17 	ldw	r4,1332(sp)
  804108:	21000414 	ori	r4,r4,16
  80410c:	d9014d15 	stw	r4,1332(sp)
  804110:	d9414d17 	ldw	r5,1332(sp)
  804114:	2880080c 	andi	r2,r5,32
  804118:	1001081e 	bne	r2,zero,80453c <___vfprintf_internal_r+0xf24>
  80411c:	d8c14d17 	ldw	r3,1332(sp)
  804120:	1880040c 	andi	r2,r3,16
  804124:	1002b01e 	bne	r2,zero,804be8 <___vfprintf_internal_r+0x15d0>
  804128:	d9014d17 	ldw	r4,1332(sp)
  80412c:	2080100c 	andi	r2,r4,64
  804130:	1002ad26 	beq	r2,zero,804be8 <___vfprintf_internal_r+0x15d0>
  804134:	3c00000b 	ldhu	r16,0(r7)
  804138:	01000044 	movi	r4,1
  80413c:	39c00104 	addi	r7,r7,4
  804140:	0023883a 	mov	r17,zero
  804144:	d9c14115 	stw	r7,1284(sp)
  804148:	d8000405 	stb	zero,16(sp)
  80414c:	003fc006 	br	804050 <___vfprintf_internal_r+0xa38>
  804150:	d9015017 	ldw	r4,1344(sp)
  804154:	b00b883a 	mov	r5,r22
  804158:	d9800d04 	addi	r6,sp,52
  80415c:	08035c00 	call	8035c0 <__sprint_r>
  804160:	103ee51e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804164:	dc800f17 	ldw	r18,60(sp)
  804168:	d8c01a04 	addi	r3,sp,104
  80416c:	d9814d17 	ldw	r6,1332(sp)
  804170:	3080004c 	andi	r2,r6,1
  804174:	1005003a 	cmpeq	r2,r2,zero
  804178:	103ea51e 	bne	r2,zero,803c10 <___vfprintf_internal_r+0x5f8>
  80417c:	00800044 	movi	r2,1
  804180:	dc400e17 	ldw	r17,56(sp)
  804184:	18800115 	stw	r2,4(r3)
  804188:	d8814a17 	ldw	r2,1320(sp)
  80418c:	94800044 	addi	r18,r18,1
  804190:	8c400044 	addi	r17,r17,1
  804194:	18800015 	stw	r2,0(r3)
  804198:	008001c4 	movi	r2,7
  80419c:	dc800f15 	stw	r18,60(sp)
  8041a0:	dc400e15 	stw	r17,56(sp)
  8041a4:	14421e0e 	bge	r2,r17,804a20 <___vfprintf_internal_r+0x1408>
  8041a8:	d9015017 	ldw	r4,1344(sp)
  8041ac:	b00b883a 	mov	r5,r22
  8041b0:	d9800d04 	addi	r6,sp,52
  8041b4:	08035c00 	call	8035c0 <__sprint_r>
  8041b8:	103ecf1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  8041bc:	dc800f17 	ldw	r18,60(sp)
  8041c0:	d8c01a04 	addi	r3,sp,104
  8041c4:	003e9206 	br	803c10 <___vfprintf_internal_r+0x5f8>
  8041c8:	d9015017 	ldw	r4,1344(sp)
  8041cc:	b00b883a 	mov	r5,r22
  8041d0:	d9800d04 	addi	r6,sp,52
  8041d4:	08035c00 	call	8035c0 <__sprint_r>
  8041d8:	103ec026 	beq	r2,zero,803cdc <___vfprintf_internal_r+0x6c4>
  8041dc:	003ec606 	br	803cf8 <___vfprintf_internal_r+0x6e0>
  8041e0:	d9015017 	ldw	r4,1344(sp)
  8041e4:	b00b883a 	mov	r5,r22
  8041e8:	d9800d04 	addi	r6,sp,52
  8041ec:	d9c15215 	stw	r7,1352(sp)
  8041f0:	08035c00 	call	8035c0 <__sprint_r>
  8041f4:	d9c15217 	ldw	r7,1352(sp)
  8041f8:	103ebf1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  8041fc:	dc800f17 	ldw	r18,60(sp)
  804200:	dc400e17 	ldw	r17,56(sp)
  804204:	dd401a04 	addi	r21,sp,104
  804208:	003e7406 	br	803bdc <___vfprintf_internal_r+0x5c4>
  80420c:	d9015017 	ldw	r4,1344(sp)
  804210:	b00b883a 	mov	r5,r22
  804214:	d9800d04 	addi	r6,sp,52
  804218:	d9c15215 	stw	r7,1352(sp)
  80421c:	08035c00 	call	8035c0 <__sprint_r>
  804220:	d9c15217 	ldw	r7,1352(sp)
  804224:	103eb41e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804228:	dd401a04 	addi	r21,sp,104
  80422c:	003d6d06 	br	8037e4 <___vfprintf_internal_r+0x1cc>
  804230:	d9015017 	ldw	r4,1344(sp)
  804234:	b00b883a 	mov	r5,r22
  804238:	d9800d04 	addi	r6,sp,52
  80423c:	d9c15215 	stw	r7,1352(sp)
  804240:	08035c00 	call	8035c0 <__sprint_r>
  804244:	d9c15217 	ldw	r7,1352(sp)
  804248:	103eab1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  80424c:	dc800f17 	ldw	r18,60(sp)
  804250:	dc400e17 	ldw	r17,56(sp)
  804254:	dd401a04 	addi	r21,sp,104
  804258:	003e3406 	br	803b2c <___vfprintf_internal_r+0x514>
  80425c:	d9015017 	ldw	r4,1344(sp)
  804260:	b00b883a 	mov	r5,r22
  804264:	d9800d04 	addi	r6,sp,52
  804268:	d9c15215 	stw	r7,1352(sp)
  80426c:	08035c00 	call	8035c0 <__sprint_r>
  804270:	d9c15217 	ldw	r7,1352(sp)
  804274:	103ea01e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804278:	dc800f17 	ldw	r18,60(sp)
  80427c:	dc400e17 	ldw	r17,56(sp)
  804280:	dd401a04 	addi	r21,sp,104
  804284:	003e1c06 	br	803af8 <___vfprintf_internal_r+0x4e0>
  804288:	d9015017 	ldw	r4,1344(sp)
  80428c:	b00b883a 	mov	r5,r22
  804290:	d9800d04 	addi	r6,sp,52
  804294:	d9c15215 	stw	r7,1352(sp)
  804298:	08035c00 	call	8035c0 <__sprint_r>
  80429c:	d9c15217 	ldw	r7,1352(sp)
  8042a0:	103e951e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  8042a4:	dc800f17 	ldw	r18,60(sp)
  8042a8:	dc400e17 	ldw	r17,56(sp)
  8042ac:	dd401a04 	addi	r21,sp,104
  8042b0:	003e0406 	br	803ac4 <___vfprintf_internal_r+0x4ac>
  8042b4:	d9000617 	ldw	r4,24(sp)
  8042b8:	0102520e 	bge	zero,r4,804c04 <___vfprintf_internal_r+0x15ec>
  8042bc:	d9814817 	ldw	r6,1312(sp)
  8042c0:	21807a16 	blt	r4,r6,8044ac <___vfprintf_internal_r+0xe94>
  8042c4:	d8814217 	ldw	r2,1288(sp)
  8042c8:	91a5883a 	add	r18,r18,r6
  8042cc:	8c400044 	addi	r17,r17,1
  8042d0:	a8800015 	stw	r2,0(r21)
  8042d4:	008001c4 	movi	r2,7
  8042d8:	a9800115 	stw	r6,4(r21)
  8042dc:	dc800f15 	stw	r18,60(sp)
  8042e0:	dc400e15 	stw	r17,56(sp)
  8042e4:	1442f616 	blt	r2,r17,804ec0 <___vfprintf_internal_r+0x18a8>
  8042e8:	a8c00204 	addi	r3,r21,8
  8042ec:	d9414817 	ldw	r5,1312(sp)
  8042f0:	2161c83a 	sub	r16,r4,r5
  8042f4:	043f9d0e 	bge	zero,r16,80416c <___vfprintf_internal_r+0xb54>
  8042f8:	00800404 	movi	r2,16
  8042fc:	1402130e 	bge	r2,r16,804b4c <___vfprintf_internal_r+0x1534>
  804300:	dc400e17 	ldw	r17,56(sp)
  804304:	1027883a 	mov	r19,r2
  804308:	07002074 	movhi	fp,129
  80430c:	e73fb604 	addi	fp,fp,-296
  804310:	050001c4 	movi	r20,7
  804314:	00000306 	br	804324 <___vfprintf_internal_r+0xd0c>
  804318:	18c00204 	addi	r3,r3,8
  80431c:	843ffc04 	addi	r16,r16,-16
  804320:	9c020d0e 	bge	r19,r16,804b58 <___vfprintf_internal_r+0x1540>
  804324:	94800404 	addi	r18,r18,16
  804328:	8c400044 	addi	r17,r17,1
  80432c:	1f000015 	stw	fp,0(r3)
  804330:	1cc00115 	stw	r19,4(r3)
  804334:	dc800f15 	stw	r18,60(sp)
  804338:	dc400e15 	stw	r17,56(sp)
  80433c:	a47ff60e 	bge	r20,r17,804318 <___vfprintf_internal_r+0xd00>
  804340:	d9015017 	ldw	r4,1344(sp)
  804344:	b00b883a 	mov	r5,r22
  804348:	d9800d04 	addi	r6,sp,52
  80434c:	08035c00 	call	8035c0 <__sprint_r>
  804350:	103e691e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804354:	dc800f17 	ldw	r18,60(sp)
  804358:	dc400e17 	ldw	r17,56(sp)
  80435c:	d8c01a04 	addi	r3,sp,104
  804360:	003fee06 	br	80431c <___vfprintf_internal_r+0xd04>
  804364:	d8814817 	ldw	r2,1312(sp)
  804368:	143fffc4 	addi	r16,r2,-1
  80436c:	043e970e 	bge	zero,r16,803dcc <___vfprintf_internal_r+0x7b4>
  804370:	00800404 	movi	r2,16
  804374:	1400180e 	bge	r2,r16,8043d8 <___vfprintf_internal_r+0xdc0>
  804378:	1029883a 	mov	r20,r2
  80437c:	07002074 	movhi	fp,129
  804380:	e73fb604 	addi	fp,fp,-296
  804384:	054001c4 	movi	r21,7
  804388:	00000306 	br	804398 <___vfprintf_internal_r+0xd80>
  80438c:	9cc00204 	addi	r19,r19,8
  804390:	843ffc04 	addi	r16,r16,-16
  804394:	a400120e 	bge	r20,r16,8043e0 <___vfprintf_internal_r+0xdc8>
  804398:	94800404 	addi	r18,r18,16
  80439c:	8c400044 	addi	r17,r17,1
  8043a0:	9f000015 	stw	fp,0(r19)
  8043a4:	9d000115 	stw	r20,4(r19)
  8043a8:	dc800f15 	stw	r18,60(sp)
  8043ac:	dc400e15 	stw	r17,56(sp)
  8043b0:	ac7ff60e 	bge	r21,r17,80438c <___vfprintf_internal_r+0xd74>
  8043b4:	d9015017 	ldw	r4,1344(sp)
  8043b8:	b00b883a 	mov	r5,r22
  8043bc:	d9800d04 	addi	r6,sp,52
  8043c0:	08035c00 	call	8035c0 <__sprint_r>
  8043c4:	103e4c1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  8043c8:	dc800f17 	ldw	r18,60(sp)
  8043cc:	dc400e17 	ldw	r17,56(sp)
  8043d0:	dcc01a04 	addi	r19,sp,104
  8043d4:	003fee06 	br	804390 <___vfprintf_internal_r+0xd78>
  8043d8:	07002074 	movhi	fp,129
  8043dc:	e73fb604 	addi	fp,fp,-296
  8043e0:	9425883a 	add	r18,r18,r16
  8043e4:	8c400044 	addi	r17,r17,1
  8043e8:	008001c4 	movi	r2,7
  8043ec:	9f000015 	stw	fp,0(r19)
  8043f0:	9c000115 	stw	r16,4(r19)
  8043f4:	dc800f15 	stw	r18,60(sp)
  8043f8:	dc400e15 	stw	r17,56(sp)
  8043fc:	147e720e 	bge	r2,r17,803dc8 <___vfprintf_internal_r+0x7b0>
  804400:	d9015017 	ldw	r4,1344(sp)
  804404:	b00b883a 	mov	r5,r22
  804408:	d9800d04 	addi	r6,sp,52
  80440c:	08035c00 	call	8035c0 <__sprint_r>
  804410:	103e391e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804414:	dc800f17 	ldw	r18,60(sp)
  804418:	dc400e17 	ldw	r17,56(sp)
  80441c:	dcc01a04 	addi	r19,sp,104
  804420:	003e6a06 	br	803dcc <___vfprintf_internal_r+0x7b4>
  804424:	d9015017 	ldw	r4,1344(sp)
  804428:	b00b883a 	mov	r5,r22
  80442c:	d9800d04 	addi	r6,sp,52
  804430:	d9c15215 	stw	r7,1352(sp)
  804434:	08035c00 	call	8035c0 <__sprint_r>
  804438:	d9c15217 	ldw	r7,1352(sp)
  80443c:	103e2e1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804440:	dc800f17 	ldw	r18,60(sp)
  804444:	dc400e17 	ldw	r17,56(sp)
  804448:	dd401a04 	addi	r21,sp,104
  80444c:	003dba06 	br	803b38 <___vfprintf_internal_r+0x520>
  804450:	d9015017 	ldw	r4,1344(sp)
  804454:	b00b883a 	mov	r5,r22
  804458:	d9800d04 	addi	r6,sp,52
  80445c:	08035c00 	call	8035c0 <__sprint_r>
  804460:	103e251e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804464:	dc800f17 	ldw	r18,60(sp)
  804468:	dc400e17 	ldw	r17,56(sp)
  80446c:	dcc01a04 	addi	r19,sp,104
  804470:	003e4206 	br	803d7c <___vfprintf_internal_r+0x764>
  804474:	d9015017 	ldw	r4,1344(sp)
  804478:	b00b883a 	mov	r5,r22
  80447c:	d9800d04 	addi	r6,sp,52
  804480:	08035c00 	call	8035c0 <__sprint_r>
  804484:	103e1c1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804488:	dc800f17 	ldw	r18,60(sp)
  80448c:	dc400e17 	ldw	r17,56(sp)
  804490:	d8c01a04 	addi	r3,sp,104
  804494:	003e2e06 	br	803d50 <___vfprintf_internal_r+0x738>
  804498:	d9414d17 	ldw	r5,1332(sp)
  80449c:	2880004c 	andi	r2,r5,1
  8044a0:	1005003a 	cmpeq	r2,r2,zero
  8044a4:	103dda1e 	bne	r2,zero,803c10 <___vfprintf_internal_r+0x5f8>
  8044a8:	003e9f06 	br	803f28 <___vfprintf_internal_r+0x910>
  8044ac:	d8c14217 	ldw	r3,1288(sp)
  8044b0:	9125883a 	add	r18,r18,r4
  8044b4:	8c400044 	addi	r17,r17,1
  8044b8:	008001c4 	movi	r2,7
  8044bc:	a8c00015 	stw	r3,0(r21)
  8044c0:	a9000115 	stw	r4,4(r21)
  8044c4:	dc800f15 	stw	r18,60(sp)
  8044c8:	dc400e15 	stw	r17,56(sp)
  8044cc:	14426616 	blt	r2,r17,804e68 <___vfprintf_internal_r+0x1850>
  8044d0:	a8c00204 	addi	r3,r21,8
  8044d4:	d9414a17 	ldw	r5,1320(sp)
  8044d8:	00800044 	movi	r2,1
  8044dc:	94800044 	addi	r18,r18,1
  8044e0:	8c400044 	addi	r17,r17,1
  8044e4:	18800115 	stw	r2,4(r3)
  8044e8:	008001c4 	movi	r2,7
  8044ec:	19400015 	stw	r5,0(r3)
  8044f0:	dc800f15 	stw	r18,60(sp)
  8044f4:	dc400e15 	stw	r17,56(sp)
  8044f8:	2021883a 	mov	r16,r4
  8044fc:	14425016 	blt	r2,r17,804e40 <___vfprintf_internal_r+0x1828>
  804500:	19400204 	addi	r5,r3,8
  804504:	d9814817 	ldw	r6,1312(sp)
  804508:	8c400044 	addi	r17,r17,1
  80450c:	dc400e15 	stw	r17,56(sp)
  804510:	3107c83a 	sub	r3,r6,r4
  804514:	d9014217 	ldw	r4,1288(sp)
  804518:	90e5883a 	add	r18,r18,r3
  80451c:	28c00115 	stw	r3,4(r5)
  804520:	8105883a 	add	r2,r16,r4
  804524:	28800015 	stw	r2,0(r5)
  804528:	008001c4 	movi	r2,7
  80452c:	dc800f15 	stw	r18,60(sp)
  804530:	147f1d16 	blt	r2,r17,8041a8 <___vfprintf_internal_r+0xb90>
  804534:	28c00204 	addi	r3,r5,8
  804538:	003db506 	br	803c10 <___vfprintf_internal_r+0x5f8>
  80453c:	3c000017 	ldw	r16,0(r7)
  804540:	3c400117 	ldw	r17,4(r7)
  804544:	39800204 	addi	r6,r7,8
  804548:	01000044 	movi	r4,1
  80454c:	d9814115 	stw	r6,1284(sp)
  804550:	d8000405 	stb	zero,16(sp)
  804554:	003ebe06 	br	804050 <___vfprintf_internal_r+0xa38>
  804558:	3c000017 	ldw	r16,0(r7)
  80455c:	3c400117 	ldw	r17,4(r7)
  804560:	38800204 	addi	r2,r7,8
  804564:	d8814115 	stw	r2,1284(sp)
  804568:	003eb706 	br	804048 <___vfprintf_internal_r+0xa30>
  80456c:	3c000017 	ldw	r16,0(r7)
  804570:	3c400117 	ldw	r17,4(r7)
  804574:	39000204 	addi	r4,r7,8
  804578:	d9014115 	stw	r4,1284(sp)
  80457c:	0009883a 	mov	r4,zero
  804580:	d8000405 	stb	zero,16(sp)
  804584:	003eb206 	br	804050 <___vfprintf_internal_r+0xa38>
  804588:	38c00017 	ldw	r3,0(r7)
  80458c:	39c00104 	addi	r7,r7,4
  804590:	d8c14b15 	stw	r3,1324(sp)
  804594:	1800d10e 	bge	r3,zero,8048dc <___vfprintf_internal_r+0x12c4>
  804598:	00c7c83a 	sub	r3,zero,r3
  80459c:	d8c14b15 	stw	r3,1324(sp)
  8045a0:	d9014d17 	ldw	r4,1332(sp)
  8045a4:	b8c00007 	ldb	r3,0(r23)
  8045a8:	21000114 	ori	r4,r4,4
  8045ac:	d9014d15 	stw	r4,1332(sp)
  8045b0:	003c9806 	br	803814 <___vfprintf_internal_r+0x1fc>
  8045b4:	d9814d17 	ldw	r6,1332(sp)
  8045b8:	3080080c 	andi	r2,r6,32
  8045bc:	1001f026 	beq	r2,zero,804d80 <___vfprintf_internal_r+0x1768>
  8045c0:	d9014c17 	ldw	r4,1328(sp)
  8045c4:	38800017 	ldw	r2,0(r7)
  8045c8:	39c00104 	addi	r7,r7,4
  8045cc:	d9c14115 	stw	r7,1284(sp)
  8045d0:	2007d7fa 	srai	r3,r4,31
  8045d4:	d9c14117 	ldw	r7,1284(sp)
  8045d8:	11000015 	stw	r4,0(r2)
  8045dc:	10c00115 	stw	r3,4(r2)
  8045e0:	003c6906 	br	803788 <___vfprintf_internal_r+0x170>
  8045e4:	b8c00007 	ldb	r3,0(r23)
  8045e8:	00801b04 	movi	r2,108
  8045ec:	18824f26 	beq	r3,r2,804f2c <___vfprintf_internal_r+0x1914>
  8045f0:	d9414d17 	ldw	r5,1332(sp)
  8045f4:	29400414 	ori	r5,r5,16
  8045f8:	d9414d15 	stw	r5,1332(sp)
  8045fc:	003c8506 	br	803814 <___vfprintf_internal_r+0x1fc>
  804600:	d9814d17 	ldw	r6,1332(sp)
  804604:	b8c00007 	ldb	r3,0(r23)
  804608:	31800814 	ori	r6,r6,32
  80460c:	d9814d15 	stw	r6,1332(sp)
  804610:	003c8006 	br	803814 <___vfprintf_internal_r+0x1fc>
  804614:	d8814d17 	ldw	r2,1332(sp)
  804618:	3c000017 	ldw	r16,0(r7)
  80461c:	00c01e04 	movi	r3,120
  804620:	10800094 	ori	r2,r2,2
  804624:	d8814d15 	stw	r2,1332(sp)
  804628:	39c00104 	addi	r7,r7,4
  80462c:	01402074 	movhi	r5,129
  804630:	297f9e04 	addi	r5,r5,-392
  804634:	00800c04 	movi	r2,48
  804638:	0023883a 	mov	r17,zero
  80463c:	01000084 	movi	r4,2
  804640:	d9c14115 	stw	r7,1284(sp)
  804644:	d8c14e15 	stw	r3,1336(sp)
  804648:	d9414515 	stw	r5,1300(sp)
  80464c:	d8800505 	stb	r2,20(sp)
  804650:	d8c00545 	stb	r3,21(sp)
  804654:	d8000405 	stb	zero,16(sp)
  804658:	003e7d06 	br	804050 <___vfprintf_internal_r+0xa38>
  80465c:	d8814d17 	ldw	r2,1332(sp)
  804660:	b8c00007 	ldb	r3,0(r23)
  804664:	10801014 	ori	r2,r2,64
  804668:	d8814d15 	stw	r2,1332(sp)
  80466c:	003c6906 	br	803814 <___vfprintf_internal_r+0x1fc>
  804670:	d9414d17 	ldw	r5,1332(sp)
  804674:	2880020c 	andi	r2,r5,8
  804678:	1001df26 	beq	r2,zero,804df8 <___vfprintf_internal_r+0x17e0>
  80467c:	39800017 	ldw	r6,0(r7)
  804680:	38800204 	addi	r2,r7,8
  804684:	d8814115 	stw	r2,1284(sp)
  804688:	d9814315 	stw	r6,1292(sp)
  80468c:	39c00117 	ldw	r7,4(r7)
  804690:	d9c14415 	stw	r7,1296(sp)
  804694:	d9014317 	ldw	r4,1292(sp)
  804698:	d9414417 	ldw	r5,1296(sp)
  80469c:	08090700 	call	809070 <__isinfd>
  8046a0:	10021726 	beq	r2,zero,804f00 <___vfprintf_internal_r+0x18e8>
  8046a4:	d9014317 	ldw	r4,1292(sp)
  8046a8:	d9414417 	ldw	r5,1296(sp)
  8046ac:	000d883a 	mov	r6,zero
  8046b0:	000f883a 	mov	r7,zero
  8046b4:	080ac680 	call	80ac68 <__ltdf2>
  8046b8:	1002ca16 	blt	r2,zero,8051e4 <___vfprintf_internal_r+0x1bcc>
  8046bc:	d9414e17 	ldw	r5,1336(sp)
  8046c0:	008011c4 	movi	r2,71
  8046c4:	11420a16 	blt	r2,r5,804ef0 <___vfprintf_internal_r+0x18d8>
  8046c8:	01802074 	movhi	r6,129
  8046cc:	31bfa304 	addi	r6,r6,-372
  8046d0:	d9814215 	stw	r6,1288(sp)
  8046d4:	d9014d17 	ldw	r4,1332(sp)
  8046d8:	00c000c4 	movi	r3,3
  8046dc:	00bfdfc4 	movi	r2,-129
  8046e0:	2088703a 	and	r4,r4,r2
  8046e4:	180f883a 	mov	r7,r3
  8046e8:	d8c14615 	stw	r3,1304(sp)
  8046ec:	d9014d15 	stw	r4,1332(sp)
  8046f0:	d8014715 	stw	zero,1308(sp)
  8046f4:	003e6a06 	br	8040a0 <___vfprintf_internal_r+0xa88>
  8046f8:	38800017 	ldw	r2,0(r7)
  8046fc:	00c00044 	movi	r3,1
  804700:	39c00104 	addi	r7,r7,4
  804704:	d9c14115 	stw	r7,1284(sp)
  804708:	d9001004 	addi	r4,sp,64
  80470c:	180f883a 	mov	r7,r3
  804710:	d8c14615 	stw	r3,1304(sp)
  804714:	d9014215 	stw	r4,1288(sp)
  804718:	d8801005 	stb	r2,64(sp)
  80471c:	d8000405 	stb	zero,16(sp)
  804720:	003cac06 	br	8039d4 <___vfprintf_internal_r+0x3bc>
  804724:	01402074 	movhi	r5,129
  804728:	297fa904 	addi	r5,r5,-348
  80472c:	d9414515 	stw	r5,1300(sp)
  804730:	d9814d17 	ldw	r6,1332(sp)
  804734:	3080080c 	andi	r2,r6,32
  804738:	1000f926 	beq	r2,zero,804b20 <___vfprintf_internal_r+0x1508>
  80473c:	3c000017 	ldw	r16,0(r7)
  804740:	3c400117 	ldw	r17,4(r7)
  804744:	38800204 	addi	r2,r7,8
  804748:	d8814115 	stw	r2,1284(sp)
  80474c:	d9414d17 	ldw	r5,1332(sp)
  804750:	2880004c 	andi	r2,r5,1
  804754:	1005003a 	cmpeq	r2,r2,zero
  804758:	1000b31e 	bne	r2,zero,804a28 <___vfprintf_internal_r+0x1410>
  80475c:	8444b03a 	or	r2,r16,r17
  804760:	1000b126 	beq	r2,zero,804a28 <___vfprintf_internal_r+0x1410>
  804764:	d9814e17 	ldw	r6,1336(sp)
  804768:	29400094 	ori	r5,r5,2
  80476c:	00800c04 	movi	r2,48
  804770:	01000084 	movi	r4,2
  804774:	d9414d15 	stw	r5,1332(sp)
  804778:	d8800505 	stb	r2,20(sp)
  80477c:	d9800545 	stb	r6,21(sp)
  804780:	d8000405 	stb	zero,16(sp)
  804784:	003e3206 	br	804050 <___vfprintf_internal_r+0xa38>
  804788:	01802074 	movhi	r6,129
  80478c:	31bf9e04 	addi	r6,r6,-392
  804790:	d9814515 	stw	r6,1300(sp)
  804794:	003fe606 	br	804730 <___vfprintf_internal_r+0x1118>
  804798:	00800ac4 	movi	r2,43
  80479c:	d8800405 	stb	r2,16(sp)
  8047a0:	b8c00007 	ldb	r3,0(r23)
  8047a4:	003c1b06 	br	803814 <___vfprintf_internal_r+0x1fc>
  8047a8:	d8814d17 	ldw	r2,1332(sp)
  8047ac:	b8c00007 	ldb	r3,0(r23)
  8047b0:	10800054 	ori	r2,r2,1
  8047b4:	d8814d15 	stw	r2,1332(sp)
  8047b8:	003c1606 	br	803814 <___vfprintf_internal_r+0x1fc>
  8047bc:	d8800407 	ldb	r2,16(sp)
  8047c0:	1000461e 	bne	r2,zero,8048dc <___vfprintf_internal_r+0x12c4>
  8047c4:	00800804 	movi	r2,32
  8047c8:	d8800405 	stb	r2,16(sp)
  8047cc:	b8c00007 	ldb	r3,0(r23)
  8047d0:	003c1006 	br	803814 <___vfprintf_internal_r+0x1fc>
  8047d4:	d9814d17 	ldw	r6,1332(sp)
  8047d8:	b8c00007 	ldb	r3,0(r23)
  8047dc:	31800214 	ori	r6,r6,8
  8047e0:	d9814d15 	stw	r6,1332(sp)
  8047e4:	003c0b06 	br	803814 <___vfprintf_internal_r+0x1fc>
  8047e8:	0007883a 	mov	r3,zero
  8047ec:	01000244 	movi	r4,9
  8047f0:	188002a4 	muli	r2,r3,10
  8047f4:	b8c00007 	ldb	r3,0(r23)
  8047f8:	d9814e17 	ldw	r6,1336(sp)
  8047fc:	bdc00044 	addi	r23,r23,1
  804800:	d8c14e15 	stw	r3,1336(sp)
  804804:	d9414e17 	ldw	r5,1336(sp)
  804808:	3085883a 	add	r2,r6,r2
  80480c:	10fff404 	addi	r3,r2,-48
  804810:	28bff404 	addi	r2,r5,-48
  804814:	20bff62e 	bgeu	r4,r2,8047f0 <___vfprintf_internal_r+0x11d8>
  804818:	d8c14b15 	stw	r3,1324(sp)
  80481c:	003bff06 	br	80381c <___vfprintf_internal_r+0x204>
  804820:	d9414d17 	ldw	r5,1332(sp)
  804824:	b8c00007 	ldb	r3,0(r23)
  804828:	29402014 	ori	r5,r5,128
  80482c:	d9414d15 	stw	r5,1332(sp)
  804830:	003bf806 	br	803814 <___vfprintf_internal_r+0x1fc>
  804834:	b8c00007 	ldb	r3,0(r23)
  804838:	00800a84 	movi	r2,42
  80483c:	bdc00044 	addi	r23,r23,1
  804840:	18831526 	beq	r3,r2,805498 <___vfprintf_internal_r+0x1e80>
  804844:	d8c14e15 	stw	r3,1336(sp)
  804848:	18bff404 	addi	r2,r3,-48
  80484c:	00c00244 	movi	r3,9
  804850:	18827836 	bltu	r3,r2,805234 <___vfprintf_internal_r+0x1c1c>
  804854:	000d883a 	mov	r6,zero
  804858:	308002a4 	muli	r2,r6,10
  80485c:	b9800007 	ldb	r6,0(r23)
  804860:	d9414e17 	ldw	r5,1336(sp)
  804864:	bdc00044 	addi	r23,r23,1
  804868:	d9814e15 	stw	r6,1336(sp)
  80486c:	d9014e17 	ldw	r4,1336(sp)
  804870:	1145883a 	add	r2,r2,r5
  804874:	11bff404 	addi	r6,r2,-48
  804878:	20bff404 	addi	r2,r4,-48
  80487c:	18bff62e 	bgeu	r3,r2,804858 <___vfprintf_internal_r+0x1240>
  804880:	3027883a 	mov	r19,r6
  804884:	303be50e 	bge	r6,zero,80381c <___vfprintf_internal_r+0x204>
  804888:	04ffffc4 	movi	r19,-1
  80488c:	003be306 	br	80381c <___vfprintf_internal_r+0x204>
  804890:	d8000405 	stb	zero,16(sp)
  804894:	39800017 	ldw	r6,0(r7)
  804898:	39c00104 	addi	r7,r7,4
  80489c:	d9c14115 	stw	r7,1284(sp)
  8048a0:	d9814215 	stw	r6,1288(sp)
  8048a4:	3001c926 	beq	r6,zero,804fcc <___vfprintf_internal_r+0x19b4>
  8048a8:	98000e16 	blt	r19,zero,8048e4 <___vfprintf_internal_r+0x12cc>
  8048ac:	d9014217 	ldw	r4,1288(sp)
  8048b0:	000b883a 	mov	r5,zero
  8048b4:	980d883a 	mov	r6,r19
  8048b8:	08075c00 	call	8075c0 <memchr>
  8048bc:	10025926 	beq	r2,zero,805224 <___vfprintf_internal_r+0x1c0c>
  8048c0:	d8c14217 	ldw	r3,1288(sp)
  8048c4:	10cfc83a 	sub	r7,r2,r3
  8048c8:	99c19e16 	blt	r19,r7,804f44 <___vfprintf_internal_r+0x192c>
  8048cc:	d9c14615 	stw	r7,1304(sp)
  8048d0:	38000916 	blt	r7,zero,8048f8 <___vfprintf_internal_r+0x12e0>
  8048d4:	d8014715 	stw	zero,1308(sp)
  8048d8:	003df106 	br	8040a0 <___vfprintf_internal_r+0xa88>
  8048dc:	b8c00007 	ldb	r3,0(r23)
  8048e0:	003bcc06 	br	803814 <___vfprintf_internal_r+0x1fc>
  8048e4:	d9014217 	ldw	r4,1288(sp)
  8048e8:	08032e40 	call	8032e4 <strlen>
  8048ec:	d8814615 	stw	r2,1304(sp)
  8048f0:	100f883a 	mov	r7,r2
  8048f4:	103ff70e 	bge	r2,zero,8048d4 <___vfprintf_internal_r+0x12bc>
  8048f8:	d8014615 	stw	zero,1304(sp)
  8048fc:	d8014715 	stw	zero,1308(sp)
  804900:	003de706 	br	8040a0 <___vfprintf_internal_r+0xa88>
  804904:	20c03fcc 	andi	r3,r4,255
  804908:	00800044 	movi	r2,1
  80490c:	18802d26 	beq	r3,r2,8049c4 <___vfprintf_internal_r+0x13ac>
  804910:	18800e36 	bltu	r3,r2,80494c <___vfprintf_internal_r+0x1334>
  804914:	00800084 	movi	r2,2
  804918:	1880fa26 	beq	r3,r2,804d04 <___vfprintf_internal_r+0x16ec>
  80491c:	01002074 	movhi	r4,129
  804920:	213fae04 	addi	r4,r4,-328
  804924:	08032e40 	call	8032e4 <strlen>
  804928:	100f883a 	mov	r7,r2
  80492c:	dcc14615 	stw	r19,1304(sp)
  804930:	9880010e 	bge	r19,r2,804938 <___vfprintf_internal_r+0x1320>
  804934:	d8814615 	stw	r2,1304(sp)
  804938:	00802074 	movhi	r2,129
  80493c:	10bfae04 	addi	r2,r2,-328
  804940:	dcc14715 	stw	r19,1308(sp)
  804944:	d8814215 	stw	r2,1288(sp)
  804948:	003dd506 	br	8040a0 <___vfprintf_internal_r+0xa88>
  80494c:	d9401a04 	addi	r5,sp,104
  804950:	dd001004 	addi	r20,sp,64
  804954:	d9414215 	stw	r5,1288(sp)
  804958:	880a977a 	slli	r5,r17,29
  80495c:	d9814217 	ldw	r6,1288(sp)
  804960:	8004d0fa 	srli	r2,r16,3
  804964:	8806d0fa 	srli	r3,r17,3
  804968:	810001cc 	andi	r4,r16,7
  80496c:	2884b03a 	or	r2,r5,r2
  804970:	31bfffc4 	addi	r6,r6,-1
  804974:	21000c04 	addi	r4,r4,48
  804978:	d9814215 	stw	r6,1288(sp)
  80497c:	10cab03a 	or	r5,r2,r3
  804980:	31000005 	stb	r4,0(r6)
  804984:	1021883a 	mov	r16,r2
  804988:	1823883a 	mov	r17,r3
  80498c:	283ff21e 	bne	r5,zero,804958 <___vfprintf_internal_r+0x1340>
  804990:	d8c14d17 	ldw	r3,1332(sp)
  804994:	1880004c 	andi	r2,r3,1
  804998:	1005003a 	cmpeq	r2,r2,zero
  80499c:	103db91e 	bne	r2,zero,804084 <___vfprintf_internal_r+0xa6c>
  8049a0:	20803fcc 	andi	r2,r4,255
  8049a4:	1080201c 	xori	r2,r2,128
  8049a8:	10bfe004 	addi	r2,r2,-128
  8049ac:	00c00c04 	movi	r3,48
  8049b0:	10fdb426 	beq	r2,r3,804084 <___vfprintf_internal_r+0xa6c>
  8049b4:	31bfffc4 	addi	r6,r6,-1
  8049b8:	d9814215 	stw	r6,1288(sp)
  8049bc:	30c00005 	stb	r3,0(r6)
  8049c0:	003db006 	br	804084 <___vfprintf_internal_r+0xa6c>
  8049c4:	88800068 	cmpgeui	r2,r17,1
  8049c8:	10002c1e 	bne	r2,zero,804a7c <___vfprintf_internal_r+0x1464>
  8049cc:	8800021e 	bne	r17,zero,8049d8 <___vfprintf_internal_r+0x13c0>
  8049d0:	00800244 	movi	r2,9
  8049d4:	14002936 	bltu	r2,r16,804a7c <___vfprintf_internal_r+0x1464>
  8049d8:	d90019c4 	addi	r4,sp,103
  8049dc:	dd001004 	addi	r20,sp,64
  8049e0:	d9014215 	stw	r4,1288(sp)
  8049e4:	d9014217 	ldw	r4,1288(sp)
  8049e8:	80800c04 	addi	r2,r16,48
  8049ec:	20800005 	stb	r2,0(r4)
  8049f0:	003da406 	br	804084 <___vfprintf_internal_r+0xa6c>
  8049f4:	dc400e17 	ldw	r17,56(sp)
  8049f8:	07002074 	movhi	fp,129
  8049fc:	e73fb604 	addi	fp,fp,-296
  804a00:	9425883a 	add	r18,r18,r16
  804a04:	8c400044 	addi	r17,r17,1
  804a08:	008001c4 	movi	r2,7
  804a0c:	1f000015 	stw	fp,0(r3)
  804a10:	1c000115 	stw	r16,4(r3)
  804a14:	dc800f15 	stw	r18,60(sp)
  804a18:	dc400e15 	stw	r17,56(sp)
  804a1c:	147de216 	blt	r2,r17,8041a8 <___vfprintf_internal_r+0xb90>
  804a20:	18c00204 	addi	r3,r3,8
  804a24:	003c7a06 	br	803c10 <___vfprintf_internal_r+0x5f8>
  804a28:	01000084 	movi	r4,2
  804a2c:	d8000405 	stb	zero,16(sp)
  804a30:	003d8706 	br	804050 <___vfprintf_internal_r+0xa38>
  804a34:	d9814d17 	ldw	r6,1332(sp)
  804a38:	30c4703a 	and	r2,r6,r3
  804a3c:	1005003a 	cmpeq	r2,r2,zero
  804a40:	103cb926 	beq	r2,zero,803d28 <___vfprintf_internal_r+0x710>
  804a44:	d9014217 	ldw	r4,1288(sp)
  804a48:	94800044 	addi	r18,r18,1
  804a4c:	8c400044 	addi	r17,r17,1
  804a50:	008001c4 	movi	r2,7
  804a54:	a9000015 	stw	r4,0(r21)
  804a58:	a8c00115 	stw	r3,4(r21)
  804a5c:	dc800f15 	stw	r18,60(sp)
  804a60:	dc400e15 	stw	r17,56(sp)
  804a64:	147e6616 	blt	r2,r17,804400 <___vfprintf_internal_r+0xde8>
  804a68:	acc00204 	addi	r19,r21,8
  804a6c:	003cd706 	br	803dcc <___vfprintf_internal_r+0x7b4>
  804a70:	07002074 	movhi	fp,129
  804a74:	e73fb604 	addi	fp,fp,-296
  804a78:	003c4f06 	br	803bb8 <___vfprintf_internal_r+0x5a0>
  804a7c:	dd001004 	addi	r20,sp,64
  804a80:	dc801a04 	addi	r18,sp,104
  804a84:	8009883a 	mov	r4,r16
  804a88:	880b883a 	mov	r5,r17
  804a8c:	01800284 	movi	r6,10
  804a90:	000f883a 	mov	r7,zero
  804a94:	08099780 	call	809978 <__umoddi3>
  804a98:	12000c04 	addi	r8,r2,48
  804a9c:	94bfffc4 	addi	r18,r18,-1
  804aa0:	8009883a 	mov	r4,r16
  804aa4:	880b883a 	mov	r5,r17
  804aa8:	01800284 	movi	r6,10
  804aac:	000f883a 	mov	r7,zero
  804ab0:	92000005 	stb	r8,0(r18)
  804ab4:	080939c0 	call	80939c <__udivdi3>
  804ab8:	1009883a 	mov	r4,r2
  804abc:	1021883a 	mov	r16,r2
  804ac0:	18800068 	cmpgeui	r2,r3,1
  804ac4:	1823883a 	mov	r17,r3
  804ac8:	103fee1e 	bne	r2,zero,804a84 <___vfprintf_internal_r+0x146c>
  804acc:	1800021e 	bne	r3,zero,804ad8 <___vfprintf_internal_r+0x14c0>
  804ad0:	00800244 	movi	r2,9
  804ad4:	113feb36 	bltu	r2,r4,804a84 <___vfprintf_internal_r+0x146c>
  804ad8:	94bfffc4 	addi	r18,r18,-1
  804adc:	dc814215 	stw	r18,1288(sp)
  804ae0:	003fc006 	br	8049e4 <___vfprintf_internal_r+0x13cc>
  804ae4:	d9014d17 	ldw	r4,1332(sp)
  804ae8:	2080004c 	andi	r2,r4,1
  804aec:	10009a1e 	bne	r2,zero,804d58 <___vfprintf_internal_r+0x1740>
  804af0:	d9401a04 	addi	r5,sp,104
  804af4:	dd001004 	addi	r20,sp,64
  804af8:	d9414215 	stw	r5,1288(sp)
  804afc:	003d6106 	br	804084 <___vfprintf_internal_r+0xa6c>
  804b00:	d9015017 	ldw	r4,1344(sp)
  804b04:	b00b883a 	mov	r5,r22
  804b08:	d9800d04 	addi	r6,sp,52
  804b0c:	08035c00 	call	8035c0 <__sprint_r>
  804b10:	103c791e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804b14:	dc800f17 	ldw	r18,60(sp)
  804b18:	d8c01a04 	addi	r3,sp,104
  804b1c:	003cff06 	br	803f1c <___vfprintf_internal_r+0x904>
  804b20:	d8c14d17 	ldw	r3,1332(sp)
  804b24:	1880040c 	andi	r2,r3,16
  804b28:	1000711e 	bne	r2,zero,804cf0 <___vfprintf_internal_r+0x16d8>
  804b2c:	d9014d17 	ldw	r4,1332(sp)
  804b30:	2080100c 	andi	r2,r4,64
  804b34:	10006e26 	beq	r2,zero,804cf0 <___vfprintf_internal_r+0x16d8>
  804b38:	3c00000b 	ldhu	r16,0(r7)
  804b3c:	0023883a 	mov	r17,zero
  804b40:	39c00104 	addi	r7,r7,4
  804b44:	d9c14115 	stw	r7,1284(sp)
  804b48:	003f0006 	br	80474c <___vfprintf_internal_r+0x1134>
  804b4c:	dc400e17 	ldw	r17,56(sp)
  804b50:	07002074 	movhi	fp,129
  804b54:	e73fb604 	addi	fp,fp,-296
  804b58:	9425883a 	add	r18,r18,r16
  804b5c:	8c400044 	addi	r17,r17,1
  804b60:	008001c4 	movi	r2,7
  804b64:	1f000015 	stw	fp,0(r3)
  804b68:	1c000115 	stw	r16,4(r3)
  804b6c:	dc800f15 	stw	r18,60(sp)
  804b70:	dc400e15 	stw	r17,56(sp)
  804b74:	147d7616 	blt	r2,r17,804150 <___vfprintf_internal_r+0xb38>
  804b78:	18c00204 	addi	r3,r3,8
  804b7c:	003d7b06 	br	80416c <___vfprintf_internal_r+0xb54>
  804b80:	dc800f17 	ldw	r18,60(sp)
  804b84:	dc400e17 	ldw	r17,56(sp)
  804b88:	07002074 	movhi	fp,129
  804b8c:	e73fba04 	addi	fp,fp,-280
  804b90:	003bc006 	br	803a94 <___vfprintf_internal_r+0x47c>
  804b94:	d9015017 	ldw	r4,1344(sp)
  804b98:	b00b883a 	mov	r5,r22
  804b9c:	d9800d04 	addi	r6,sp,52
  804ba0:	08035c00 	call	8035c0 <__sprint_r>
  804ba4:	103c541e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804ba8:	dc800f17 	ldw	r18,60(sp)
  804bac:	d8c01a04 	addi	r3,sp,104
  804bb0:	003ce906 	br	803f58 <___vfprintf_internal_r+0x940>
  804bb4:	3c000017 	ldw	r16,0(r7)
  804bb8:	0009883a 	mov	r4,zero
  804bbc:	39c00104 	addi	r7,r7,4
  804bc0:	0023883a 	mov	r17,zero
  804bc4:	d9c14115 	stw	r7,1284(sp)
  804bc8:	d8000405 	stb	zero,16(sp)
  804bcc:	003d2006 	br	804050 <___vfprintf_internal_r+0xa38>
  804bd0:	38800017 	ldw	r2,0(r7)
  804bd4:	39c00104 	addi	r7,r7,4
  804bd8:	d9c14115 	stw	r7,1284(sp)
  804bdc:	1023d7fa 	srai	r17,r2,31
  804be0:	1021883a 	mov	r16,r2
  804be4:	003d1806 	br	804048 <___vfprintf_internal_r+0xa30>
  804be8:	3c000017 	ldw	r16,0(r7)
  804bec:	01000044 	movi	r4,1
  804bf0:	39c00104 	addi	r7,r7,4
  804bf4:	0023883a 	mov	r17,zero
  804bf8:	d9c14115 	stw	r7,1284(sp)
  804bfc:	d8000405 	stb	zero,16(sp)
  804c00:	003d1306 	br	804050 <___vfprintf_internal_r+0xa38>
  804c04:	00802074 	movhi	r2,129
  804c08:	10bfb504 	addi	r2,r2,-300
  804c0c:	94800044 	addi	r18,r18,1
  804c10:	8c400044 	addi	r17,r17,1
  804c14:	a8800015 	stw	r2,0(r21)
  804c18:	00c00044 	movi	r3,1
  804c1c:	008001c4 	movi	r2,7
  804c20:	a8c00115 	stw	r3,4(r21)
  804c24:	dc800f15 	stw	r18,60(sp)
  804c28:	dc400e15 	stw	r17,56(sp)
  804c2c:	1440ca16 	blt	r2,r17,804f58 <___vfprintf_internal_r+0x1940>
  804c30:	a8c00204 	addi	r3,r21,8
  804c34:	2000061e 	bne	r4,zero,804c50 <___vfprintf_internal_r+0x1638>
  804c38:	d9414817 	ldw	r5,1312(sp)
  804c3c:	2800041e 	bne	r5,zero,804c50 <___vfprintf_internal_r+0x1638>
  804c40:	d9814d17 	ldw	r6,1332(sp)
  804c44:	3080004c 	andi	r2,r6,1
  804c48:	1005003a 	cmpeq	r2,r2,zero
  804c4c:	103bf01e 	bne	r2,zero,803c10 <___vfprintf_internal_r+0x5f8>
  804c50:	00800044 	movi	r2,1
  804c54:	dc400e17 	ldw	r17,56(sp)
  804c58:	18800115 	stw	r2,4(r3)
  804c5c:	d8814a17 	ldw	r2,1320(sp)
  804c60:	94800044 	addi	r18,r18,1
  804c64:	8c400044 	addi	r17,r17,1
  804c68:	18800015 	stw	r2,0(r3)
  804c6c:	008001c4 	movi	r2,7
  804c70:	dc800f15 	stw	r18,60(sp)
  804c74:	dc400e15 	stw	r17,56(sp)
  804c78:	1440ca16 	blt	r2,r17,804fa4 <___vfprintf_internal_r+0x198c>
  804c7c:	18c00204 	addi	r3,r3,8
  804c80:	0121c83a 	sub	r16,zero,r4
  804c84:	0400500e 	bge	zero,r16,804dc8 <___vfprintf_internal_r+0x17b0>
  804c88:	00800404 	movi	r2,16
  804c8c:	1400800e 	bge	r2,r16,804e90 <___vfprintf_internal_r+0x1878>
  804c90:	1027883a 	mov	r19,r2
  804c94:	07002074 	movhi	fp,129
  804c98:	e73fb604 	addi	fp,fp,-296
  804c9c:	050001c4 	movi	r20,7
  804ca0:	00000306 	br	804cb0 <___vfprintf_internal_r+0x1698>
  804ca4:	18c00204 	addi	r3,r3,8
  804ca8:	843ffc04 	addi	r16,r16,-16
  804cac:	9c007a0e 	bge	r19,r16,804e98 <___vfprintf_internal_r+0x1880>
  804cb0:	94800404 	addi	r18,r18,16
  804cb4:	8c400044 	addi	r17,r17,1
  804cb8:	1f000015 	stw	fp,0(r3)
  804cbc:	1cc00115 	stw	r19,4(r3)
  804cc0:	dc800f15 	stw	r18,60(sp)
  804cc4:	dc400e15 	stw	r17,56(sp)
  804cc8:	a47ff60e 	bge	r20,r17,804ca4 <___vfprintf_internal_r+0x168c>
  804ccc:	d9015017 	ldw	r4,1344(sp)
  804cd0:	b00b883a 	mov	r5,r22
  804cd4:	d9800d04 	addi	r6,sp,52
  804cd8:	08035c00 	call	8035c0 <__sprint_r>
  804cdc:	103c061e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804ce0:	dc800f17 	ldw	r18,60(sp)
  804ce4:	dc400e17 	ldw	r17,56(sp)
  804ce8:	d8c01a04 	addi	r3,sp,104
  804cec:	003fee06 	br	804ca8 <___vfprintf_internal_r+0x1690>
  804cf0:	3c000017 	ldw	r16,0(r7)
  804cf4:	0023883a 	mov	r17,zero
  804cf8:	39c00104 	addi	r7,r7,4
  804cfc:	d9c14115 	stw	r7,1284(sp)
  804d00:	003e9206 	br	80474c <___vfprintf_internal_r+0x1134>
  804d04:	d9401a04 	addi	r5,sp,104
  804d08:	dd001004 	addi	r20,sp,64
  804d0c:	d9414215 	stw	r5,1288(sp)
  804d10:	d9814517 	ldw	r6,1300(sp)
  804d14:	880a973a 	slli	r5,r17,28
  804d18:	8004d13a 	srli	r2,r16,4
  804d1c:	810003cc 	andi	r4,r16,15
  804d20:	3109883a 	add	r4,r6,r4
  804d24:	2884b03a 	or	r2,r5,r2
  804d28:	21400003 	ldbu	r5,0(r4)
  804d2c:	d9014217 	ldw	r4,1288(sp)
  804d30:	8806d13a 	srli	r3,r17,4
  804d34:	1021883a 	mov	r16,r2
  804d38:	213fffc4 	addi	r4,r4,-1
  804d3c:	d9014215 	stw	r4,1288(sp)
  804d40:	d9814217 	ldw	r6,1288(sp)
  804d44:	10c8b03a 	or	r4,r2,r3
  804d48:	1823883a 	mov	r17,r3
  804d4c:	31400005 	stb	r5,0(r6)
  804d50:	203fef1e 	bne	r4,zero,804d10 <___vfprintf_internal_r+0x16f8>
  804d54:	003ccb06 	br	804084 <___vfprintf_internal_r+0xa6c>
  804d58:	00800c04 	movi	r2,48
  804d5c:	d98019c4 	addi	r6,sp,103
  804d60:	dd001004 	addi	r20,sp,64
  804d64:	d88019c5 	stb	r2,103(sp)
  804d68:	d9814215 	stw	r6,1288(sp)
  804d6c:	003cc506 	br	804084 <___vfprintf_internal_r+0xa6c>
  804d70:	dc400e17 	ldw	r17,56(sp)
  804d74:	07002074 	movhi	fp,129
  804d78:	e73fba04 	addi	fp,fp,-280
  804d7c:	003bc706 	br	803c9c <___vfprintf_internal_r+0x684>
  804d80:	d9414d17 	ldw	r5,1332(sp)
  804d84:	2880040c 	andi	r2,r5,16
  804d88:	10007c26 	beq	r2,zero,804f7c <___vfprintf_internal_r+0x1964>
  804d8c:	38800017 	ldw	r2,0(r7)
  804d90:	39c00104 	addi	r7,r7,4
  804d94:	d9c14115 	stw	r7,1284(sp)
  804d98:	d9814c17 	ldw	r6,1328(sp)
  804d9c:	d9c14117 	ldw	r7,1284(sp)
  804da0:	11800015 	stw	r6,0(r2)
  804da4:	003a7806 	br	803788 <___vfprintf_internal_r+0x170>
  804da8:	d9015017 	ldw	r4,1344(sp)
  804dac:	b00b883a 	mov	r5,r22
  804db0:	d9800d04 	addi	r6,sp,52
  804db4:	08035c00 	call	8035c0 <__sprint_r>
  804db8:	103bcf1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804dbc:	dc800f17 	ldw	r18,60(sp)
  804dc0:	dc400e17 	ldw	r17,56(sp)
  804dc4:	d8c01a04 	addi	r3,sp,104
  804dc8:	d9014817 	ldw	r4,1312(sp)
  804dcc:	d9414217 	ldw	r5,1288(sp)
  804dd0:	8c400044 	addi	r17,r17,1
  804dd4:	9125883a 	add	r18,r18,r4
  804dd8:	008001c4 	movi	r2,7
  804ddc:	19400015 	stw	r5,0(r3)
  804de0:	19000115 	stw	r4,4(r3)
  804de4:	dc800f15 	stw	r18,60(sp)
  804de8:	dc400e15 	stw	r17,56(sp)
  804dec:	147cee16 	blt	r2,r17,8041a8 <___vfprintf_internal_r+0xb90>
  804df0:	18c00204 	addi	r3,r3,8
  804df4:	003b8606 	br	803c10 <___vfprintf_internal_r+0x5f8>
  804df8:	38c00017 	ldw	r3,0(r7)
  804dfc:	39000204 	addi	r4,r7,8
  804e00:	d9014115 	stw	r4,1284(sp)
  804e04:	d8c14315 	stw	r3,1292(sp)
  804e08:	39c00117 	ldw	r7,4(r7)
  804e0c:	d9c14415 	stw	r7,1296(sp)
  804e10:	003e2006 	br	804694 <___vfprintf_internal_r+0x107c>
  804e14:	0005883a 	mov	r2,zero
  804e18:	1409c83a 	sub	r4,r2,r16
  804e1c:	1105803a 	cmpltu	r2,r2,r4
  804e20:	044bc83a 	sub	r5,zero,r17
  804e24:	2885c83a 	sub	r2,r5,r2
  804e28:	2021883a 	mov	r16,r4
  804e2c:	1023883a 	mov	r17,r2
  804e30:	01000044 	movi	r4,1
  804e34:	00800b44 	movi	r2,45
  804e38:	d8800405 	stb	r2,16(sp)
  804e3c:	003c8406 	br	804050 <___vfprintf_internal_r+0xa38>
  804e40:	d9015017 	ldw	r4,1344(sp)
  804e44:	b00b883a 	mov	r5,r22
  804e48:	d9800d04 	addi	r6,sp,52
  804e4c:	08035c00 	call	8035c0 <__sprint_r>
  804e50:	103ba91e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804e54:	dc800f17 	ldw	r18,60(sp)
  804e58:	dc400e17 	ldw	r17,56(sp)
  804e5c:	d9000617 	ldw	r4,24(sp)
  804e60:	d9401a04 	addi	r5,sp,104
  804e64:	003da706 	br	804504 <___vfprintf_internal_r+0xeec>
  804e68:	d9015017 	ldw	r4,1344(sp)
  804e6c:	b00b883a 	mov	r5,r22
  804e70:	d9800d04 	addi	r6,sp,52
  804e74:	08035c00 	call	8035c0 <__sprint_r>
  804e78:	103b9f1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804e7c:	dc800f17 	ldw	r18,60(sp)
  804e80:	dc400e17 	ldw	r17,56(sp)
  804e84:	d9000617 	ldw	r4,24(sp)
  804e88:	d8c01a04 	addi	r3,sp,104
  804e8c:	003d9106 	br	8044d4 <___vfprintf_internal_r+0xebc>
  804e90:	07002074 	movhi	fp,129
  804e94:	e73fb604 	addi	fp,fp,-296
  804e98:	9425883a 	add	r18,r18,r16
  804e9c:	8c400044 	addi	r17,r17,1
  804ea0:	008001c4 	movi	r2,7
  804ea4:	1f000015 	stw	fp,0(r3)
  804ea8:	1c000115 	stw	r16,4(r3)
  804eac:	dc800f15 	stw	r18,60(sp)
  804eb0:	dc400e15 	stw	r17,56(sp)
  804eb4:	147fbc16 	blt	r2,r17,804da8 <___vfprintf_internal_r+0x1790>
  804eb8:	18c00204 	addi	r3,r3,8
  804ebc:	003fc206 	br	804dc8 <___vfprintf_internal_r+0x17b0>
  804ec0:	d9015017 	ldw	r4,1344(sp)
  804ec4:	b00b883a 	mov	r5,r22
  804ec8:	d9800d04 	addi	r6,sp,52
  804ecc:	08035c00 	call	8035c0 <__sprint_r>
  804ed0:	103b891e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804ed4:	dc800f17 	ldw	r18,60(sp)
  804ed8:	d9000617 	ldw	r4,24(sp)
  804edc:	d8c01a04 	addi	r3,sp,104
  804ee0:	003d0206 	br	8042ec <___vfprintf_internal_r+0xcd4>
  804ee4:	07002074 	movhi	fp,129
  804ee8:	e73fb604 	addi	fp,fp,-296
  804eec:	003be406 	br	803e80 <___vfprintf_internal_r+0x868>
  804ef0:	00802074 	movhi	r2,129
  804ef4:	10bfa404 	addi	r2,r2,-368
  804ef8:	d8814215 	stw	r2,1288(sp)
  804efc:	003df506 	br	8046d4 <___vfprintf_internal_r+0x10bc>
  804f00:	d9014317 	ldw	r4,1292(sp)
  804f04:	d9414417 	ldw	r5,1296(sp)
  804f08:	08090b00 	call	8090b0 <__isnand>
  804f0c:	10003926 	beq	r2,zero,804ff4 <___vfprintf_internal_r+0x19dc>
  804f10:	d9414e17 	ldw	r5,1336(sp)
  804f14:	008011c4 	movi	r2,71
  804f18:	1140ce16 	blt	r2,r5,805254 <___vfprintf_internal_r+0x1c3c>
  804f1c:	01802074 	movhi	r6,129
  804f20:	31bfa504 	addi	r6,r6,-364
  804f24:	d9814215 	stw	r6,1288(sp)
  804f28:	003dea06 	br	8046d4 <___vfprintf_internal_r+0x10bc>
  804f2c:	d9014d17 	ldw	r4,1332(sp)
  804f30:	bdc00044 	addi	r23,r23,1
  804f34:	b8c00007 	ldb	r3,0(r23)
  804f38:	21000814 	ori	r4,r4,32
  804f3c:	d9014d15 	stw	r4,1332(sp)
  804f40:	003a3406 	br	803814 <___vfprintf_internal_r+0x1fc>
  804f44:	dcc14615 	stw	r19,1304(sp)
  804f48:	98011016 	blt	r19,zero,80538c <___vfprintf_internal_r+0x1d74>
  804f4c:	980f883a 	mov	r7,r19
  804f50:	d8014715 	stw	zero,1308(sp)
  804f54:	003c5206 	br	8040a0 <___vfprintf_internal_r+0xa88>
  804f58:	d9015017 	ldw	r4,1344(sp)
  804f5c:	b00b883a 	mov	r5,r22
  804f60:	d9800d04 	addi	r6,sp,52
  804f64:	08035c00 	call	8035c0 <__sprint_r>
  804f68:	103b631e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804f6c:	dc800f17 	ldw	r18,60(sp)
  804f70:	d9000617 	ldw	r4,24(sp)
  804f74:	d8c01a04 	addi	r3,sp,104
  804f78:	003f2e06 	br	804c34 <___vfprintf_internal_r+0x161c>
  804f7c:	d8c14d17 	ldw	r3,1332(sp)
  804f80:	1880100c 	andi	r2,r3,64
  804f84:	1000a026 	beq	r2,zero,805208 <___vfprintf_internal_r+0x1bf0>
  804f88:	38800017 	ldw	r2,0(r7)
  804f8c:	39c00104 	addi	r7,r7,4
  804f90:	d9c14115 	stw	r7,1284(sp)
  804f94:	d9014c17 	ldw	r4,1328(sp)
  804f98:	d9c14117 	ldw	r7,1284(sp)
  804f9c:	1100000d 	sth	r4,0(r2)
  804fa0:	0039f906 	br	803788 <___vfprintf_internal_r+0x170>
  804fa4:	d9015017 	ldw	r4,1344(sp)
  804fa8:	b00b883a 	mov	r5,r22
  804fac:	d9800d04 	addi	r6,sp,52
  804fb0:	08035c00 	call	8035c0 <__sprint_r>
  804fb4:	103b501e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  804fb8:	dc800f17 	ldw	r18,60(sp)
  804fbc:	dc400e17 	ldw	r17,56(sp)
  804fc0:	d9000617 	ldw	r4,24(sp)
  804fc4:	d8c01a04 	addi	r3,sp,104
  804fc8:	003f2d06 	br	804c80 <___vfprintf_internal_r+0x1668>
  804fcc:	00800184 	movi	r2,6
  804fd0:	14c09a36 	bltu	r2,r19,80523c <___vfprintf_internal_r+0x1c24>
  804fd4:	dcc14615 	stw	r19,1304(sp)
  804fd8:	9800010e 	bge	r19,zero,804fe0 <___vfprintf_internal_r+0x19c8>
  804fdc:	d8014615 	stw	zero,1304(sp)
  804fe0:	00802074 	movhi	r2,129
  804fe4:	10bfa704 	addi	r2,r2,-356
  804fe8:	980f883a 	mov	r7,r19
  804fec:	d8814215 	stw	r2,1288(sp)
  804ff0:	003a7806 	br	8039d4 <___vfprintf_internal_r+0x3bc>
  804ff4:	00bfffc4 	movi	r2,-1
  804ff8:	9880e226 	beq	r19,r2,805384 <___vfprintf_internal_r+0x1d6c>
  804ffc:	d9414e17 	ldw	r5,1336(sp)
  805000:	008019c4 	movi	r2,103
  805004:	2880dc26 	beq	r5,r2,805378 <___vfprintf_internal_r+0x1d60>
  805008:	008011c4 	movi	r2,71
  80500c:	2880da26 	beq	r5,r2,805378 <___vfprintf_internal_r+0x1d60>
  805010:	d9414d17 	ldw	r5,1332(sp)
  805014:	d9014417 	ldw	r4,1296(sp)
  805018:	d9814317 	ldw	r6,1292(sp)
  80501c:	29404014 	ori	r5,r5,256
  805020:	d9414d15 	stw	r5,1332(sp)
  805024:	2000cc16 	blt	r4,zero,805358 <___vfprintf_internal_r+0x1d40>
  805028:	3021883a 	mov	r16,r6
  80502c:	2023883a 	mov	r17,r4
  805030:	0039883a 	mov	fp,zero
  805034:	d9414e17 	ldw	r5,1336(sp)
  805038:	00801984 	movi	r2,102
  80503c:	2880b726 	beq	r5,r2,80531c <___vfprintf_internal_r+0x1d04>
  805040:	00801184 	movi	r2,70
  805044:	2880b526 	beq	r5,r2,80531c <___vfprintf_internal_r+0x1d04>
  805048:	00801944 	movi	r2,101
  80504c:	2880c826 	beq	r5,r2,805370 <___vfprintf_internal_r+0x1d58>
  805050:	00801144 	movi	r2,69
  805054:	2880c626 	beq	r5,r2,805370 <___vfprintf_internal_r+0x1d58>
  805058:	9829883a 	mov	r20,r19
  80505c:	d9015017 	ldw	r4,1344(sp)
  805060:	d8800604 	addi	r2,sp,24
  805064:	880d883a 	mov	r6,r17
  805068:	d8800115 	stw	r2,4(sp)
  80506c:	d8c00704 	addi	r3,sp,28
  805070:	d8800804 	addi	r2,sp,32
  805074:	800b883a 	mov	r5,r16
  805078:	01c00084 	movi	r7,2
  80507c:	d8c00215 	stw	r3,8(sp)
  805080:	d8800315 	stw	r2,12(sp)
  805084:	dd000015 	stw	r20,0(sp)
  805088:	08059240 	call	805924 <_dtoa_r>
  80508c:	d9814e17 	ldw	r6,1336(sp)
  805090:	d8814215 	stw	r2,1288(sp)
  805094:	008019c4 	movi	r2,103
  805098:	30809526 	beq	r6,r2,8052f0 <___vfprintf_internal_r+0x1cd8>
  80509c:	d8c14e17 	ldw	r3,1336(sp)
  8050a0:	008011c4 	movi	r2,71
  8050a4:	18809226 	beq	r3,r2,8052f0 <___vfprintf_internal_r+0x1cd8>
  8050a8:	d9414217 	ldw	r5,1288(sp)
  8050ac:	d9814e17 	ldw	r6,1336(sp)
  8050b0:	00801984 	movi	r2,102
  8050b4:	2d25883a 	add	r18,r5,r20
  8050b8:	30808626 	beq	r6,r2,8052d4 <___vfprintf_internal_r+0x1cbc>
  8050bc:	00801184 	movi	r2,70
  8050c0:	30808426 	beq	r6,r2,8052d4 <___vfprintf_internal_r+0x1cbc>
  8050c4:	000d883a 	mov	r6,zero
  8050c8:	000f883a 	mov	r7,zero
  8050cc:	880b883a 	mov	r5,r17
  8050d0:	8009883a 	mov	r4,r16
  8050d4:	080aa480 	call	80aa48 <__eqdf2>
  8050d8:	1000751e 	bne	r2,zero,8052b0 <___vfprintf_internal_r+0x1c98>
  8050dc:	9005883a 	mov	r2,r18
  8050e0:	dc800815 	stw	r18,32(sp)
  8050e4:	d9014217 	ldw	r4,1288(sp)
  8050e8:	d9414e17 	ldw	r5,1336(sp)
  8050ec:	00c019c4 	movi	r3,103
  8050f0:	1125c83a 	sub	r18,r2,r4
  8050f4:	28c06826 	beq	r5,r3,805298 <___vfprintf_internal_r+0x1c80>
  8050f8:	008011c4 	movi	r2,71
  8050fc:	28806626 	beq	r5,r2,805298 <___vfprintf_internal_r+0x1c80>
  805100:	d9000617 	ldw	r4,24(sp)
  805104:	d8c14e17 	ldw	r3,1336(sp)
  805108:	00801944 	movi	r2,101
  80510c:	10c05516 	blt	r2,r3,805264 <___vfprintf_internal_r+0x1c4c>
  805110:	213fffc4 	addi	r4,r4,-1
  805114:	d9000615 	stw	r4,24(sp)
  805118:	d8c00905 	stb	r3,36(sp)
  80511c:	2021883a 	mov	r16,r4
  805120:	2000c116 	blt	r4,zero,805428 <___vfprintf_internal_r+0x1e10>
  805124:	00800ac4 	movi	r2,43
  805128:	d8800945 	stb	r2,37(sp)
  80512c:	00800244 	movi	r2,9
  805130:	1400af0e 	bge	r2,r16,8053f0 <___vfprintf_internal_r+0x1dd8>
  805134:	1027883a 	mov	r19,r2
  805138:	dc400cc4 	addi	r17,sp,51
  80513c:	8009883a 	mov	r4,r16
  805140:	01400284 	movi	r5,10
  805144:	0800f100 	call	800f10 <__modsi3>
  805148:	10800c04 	addi	r2,r2,48
  80514c:	8c7fffc4 	addi	r17,r17,-1
  805150:	8009883a 	mov	r4,r16
  805154:	01400284 	movi	r5,10
  805158:	88800005 	stb	r2,0(r17)
  80515c:	0800eb00 	call	800eb0 <__divsi3>
  805160:	1021883a 	mov	r16,r2
  805164:	98bff516 	blt	r19,r2,80513c <___vfprintf_internal_r+0x1b24>
  805168:	10c00c04 	addi	r3,r2,48
  80516c:	d8800b04 	addi	r2,sp,44
  805170:	108001c4 	addi	r2,r2,7
  805174:	897fffc4 	addi	r5,r17,-1
  805178:	88ffffc5 	stb	r3,-1(r17)
  80517c:	2880a72e 	bgeu	r5,r2,80541c <___vfprintf_internal_r+0x1e04>
  805180:	1009883a 	mov	r4,r2
  805184:	d9800904 	addi	r6,sp,36
  805188:	d8c00984 	addi	r3,sp,38
  80518c:	28800003 	ldbu	r2,0(r5)
  805190:	29400044 	addi	r5,r5,1
  805194:	18800005 	stb	r2,0(r3)
  805198:	18c00044 	addi	r3,r3,1
  80519c:	293ffb36 	bltu	r5,r4,80518c <___vfprintf_internal_r+0x1b74>
  8051a0:	1987c83a 	sub	r3,r3,r6
  8051a4:	00800044 	movi	r2,1
  8051a8:	d8c14915 	stw	r3,1316(sp)
  8051ac:	90cf883a 	add	r7,r18,r3
  8051b0:	1480960e 	bge	r2,r18,80540c <___vfprintf_internal_r+0x1df4>
  8051b4:	39c00044 	addi	r7,r7,1
  8051b8:	d9c14615 	stw	r7,1304(sp)
  8051bc:	38003416 	blt	r7,zero,805290 <___vfprintf_internal_r+0x1c78>
  8051c0:	e0803fcc 	andi	r2,fp,255
  8051c4:	1080201c 	xori	r2,r2,128
  8051c8:	10bfe004 	addi	r2,r2,-128
  8051cc:	10004e26 	beq	r2,zero,805308 <___vfprintf_internal_r+0x1cf0>
  8051d0:	00800b44 	movi	r2,45
  8051d4:	dc814815 	stw	r18,1312(sp)
  8051d8:	d8014715 	stw	zero,1308(sp)
  8051dc:	d8800405 	stb	r2,16(sp)
  8051e0:	003bb106 	br	8040a8 <___vfprintf_internal_r+0xa90>
  8051e4:	00800b44 	movi	r2,45
  8051e8:	d8800405 	stb	r2,16(sp)
  8051ec:	003d3306 	br	8046bc <___vfprintf_internal_r+0x10a4>
  8051f0:	d9015017 	ldw	r4,1344(sp)
  8051f4:	b00b883a 	mov	r5,r22
  8051f8:	d9800d04 	addi	r6,sp,52
  8051fc:	08035c00 	call	8035c0 <__sprint_r>
  805200:	103abd1e 	bne	r2,zero,803cf8 <___vfprintf_internal_r+0x6e0>
  805204:	003abb06 	br	803cf4 <___vfprintf_internal_r+0x6dc>
  805208:	38800017 	ldw	r2,0(r7)
  80520c:	39c00104 	addi	r7,r7,4
  805210:	d9c14115 	stw	r7,1284(sp)
  805214:	d9414c17 	ldw	r5,1328(sp)
  805218:	d9c14117 	ldw	r7,1284(sp)
  80521c:	11400015 	stw	r5,0(r2)
  805220:	00395906 	br	803788 <___vfprintf_internal_r+0x170>
  805224:	980f883a 	mov	r7,r19
  805228:	dcc14615 	stw	r19,1304(sp)
  80522c:	d8014715 	stw	zero,1308(sp)
  805230:	003b9b06 	br	8040a0 <___vfprintf_internal_r+0xa88>
  805234:	0027883a 	mov	r19,zero
  805238:	00397806 	br	80381c <___vfprintf_internal_r+0x204>
  80523c:	00c02074 	movhi	r3,129
  805240:	18ffa704 	addi	r3,r3,-356
  805244:	100f883a 	mov	r7,r2
  805248:	d8814615 	stw	r2,1304(sp)
  80524c:	d8c14215 	stw	r3,1288(sp)
  805250:	0039e006 	br	8039d4 <___vfprintf_internal_r+0x3bc>
  805254:	00802074 	movhi	r2,129
  805258:	10bfa604 	addi	r2,r2,-360
  80525c:	d8814215 	stw	r2,1288(sp)
  805260:	003d1c06 	br	8046d4 <___vfprintf_internal_r+0x10bc>
  805264:	d9414e17 	ldw	r5,1336(sp)
  805268:	00801984 	movi	r2,102
  80526c:	28804926 	beq	r5,r2,805394 <___vfprintf_internal_r+0x1d7c>
  805270:	200f883a 	mov	r7,r4
  805274:	24805716 	blt	r4,r18,8053d4 <___vfprintf_internal_r+0x1dbc>
  805278:	d9414d17 	ldw	r5,1332(sp)
  80527c:	2880004c 	andi	r2,r5,1
  805280:	10000126 	beq	r2,zero,805288 <___vfprintf_internal_r+0x1c70>
  805284:	21c00044 	addi	r7,r4,1
  805288:	d9c14615 	stw	r7,1304(sp)
  80528c:	383fcc0e 	bge	r7,zero,8051c0 <___vfprintf_internal_r+0x1ba8>
  805290:	d8014615 	stw	zero,1304(sp)
  805294:	003fca06 	br	8051c0 <___vfprintf_internal_r+0x1ba8>
  805298:	d9000617 	ldw	r4,24(sp)
  80529c:	00bfff04 	movi	r2,-4
  8052a0:	1100480e 	bge	r2,r4,8053c4 <___vfprintf_internal_r+0x1dac>
  8052a4:	99004716 	blt	r19,r4,8053c4 <___vfprintf_internal_r+0x1dac>
  8052a8:	d8c14e15 	stw	r3,1336(sp)
  8052ac:	003ff006 	br	805270 <___vfprintf_internal_r+0x1c58>
  8052b0:	d8800817 	ldw	r2,32(sp)
  8052b4:	14bf8b2e 	bgeu	r2,r18,8050e4 <___vfprintf_internal_r+0x1acc>
  8052b8:	9007883a 	mov	r3,r18
  8052bc:	01000c04 	movi	r4,48
  8052c0:	11000005 	stb	r4,0(r2)
  8052c4:	10800044 	addi	r2,r2,1
  8052c8:	d8800815 	stw	r2,32(sp)
  8052cc:	18bffc1e 	bne	r3,r2,8052c0 <___vfprintf_internal_r+0x1ca8>
  8052d0:	003f8406 	br	8050e4 <___vfprintf_internal_r+0x1acc>
  8052d4:	d8814217 	ldw	r2,1288(sp)
  8052d8:	10c00007 	ldb	r3,0(r2)
  8052dc:	00800c04 	movi	r2,48
  8052e0:	18805b26 	beq	r3,r2,805450 <___vfprintf_internal_r+0x1e38>
  8052e4:	d9000617 	ldw	r4,24(sp)
  8052e8:	9125883a 	add	r18,r18,r4
  8052ec:	003f7506 	br	8050c4 <___vfprintf_internal_r+0x1aac>
  8052f0:	d9014d17 	ldw	r4,1332(sp)
  8052f4:	2080004c 	andi	r2,r4,1
  8052f8:	1005003a 	cmpeq	r2,r2,zero
  8052fc:	103f6a26 	beq	r2,zero,8050a8 <___vfprintf_internal_r+0x1a90>
  805300:	d8800817 	ldw	r2,32(sp)
  805304:	003f7706 	br	8050e4 <___vfprintf_internal_r+0x1acc>
  805308:	d9c14615 	stw	r7,1304(sp)
  80530c:	38004d16 	blt	r7,zero,805444 <___vfprintf_internal_r+0x1e2c>
  805310:	dc814815 	stw	r18,1312(sp)
  805314:	d8014715 	stw	zero,1308(sp)
  805318:	003b6106 	br	8040a0 <___vfprintf_internal_r+0xa88>
  80531c:	d9015017 	ldw	r4,1344(sp)
  805320:	d8800604 	addi	r2,sp,24
  805324:	d8800115 	stw	r2,4(sp)
  805328:	d8c00704 	addi	r3,sp,28
  80532c:	d8800804 	addi	r2,sp,32
  805330:	800b883a 	mov	r5,r16
  805334:	880d883a 	mov	r6,r17
  805338:	01c000c4 	movi	r7,3
  80533c:	d8c00215 	stw	r3,8(sp)
  805340:	d8800315 	stw	r2,12(sp)
  805344:	dcc00015 	stw	r19,0(sp)
  805348:	9829883a 	mov	r20,r19
  80534c:	08059240 	call	805924 <_dtoa_r>
  805350:	d8814215 	stw	r2,1288(sp)
  805354:	003f5106 	br	80509c <___vfprintf_internal_r+0x1a84>
  805358:	d8c14317 	ldw	r3,1292(sp)
  80535c:	d9014417 	ldw	r4,1296(sp)
  805360:	07000b44 	movi	fp,45
  805364:	1821883a 	mov	r16,r3
  805368:	2460003c 	xorhi	r17,r4,32768
  80536c:	003f3106 	br	805034 <___vfprintf_internal_r+0x1a1c>
  805370:	9d000044 	addi	r20,r19,1
  805374:	003f3906 	br	80505c <___vfprintf_internal_r+0x1a44>
  805378:	983f251e 	bne	r19,zero,805010 <___vfprintf_internal_r+0x19f8>
  80537c:	04c00044 	movi	r19,1
  805380:	003f2306 	br	805010 <___vfprintf_internal_r+0x19f8>
  805384:	04c00184 	movi	r19,6
  805388:	003f2106 	br	805010 <___vfprintf_internal_r+0x19f8>
  80538c:	d8014615 	stw	zero,1304(sp)
  805390:	003eee06 	br	804f4c <___vfprintf_internal_r+0x1934>
  805394:	200f883a 	mov	r7,r4
  805398:	0100370e 	bge	zero,r4,805478 <___vfprintf_internal_r+0x1e60>
  80539c:	9800031e 	bne	r19,zero,8053ac <___vfprintf_internal_r+0x1d94>
  8053a0:	d9814d17 	ldw	r6,1332(sp)
  8053a4:	3080004c 	andi	r2,r6,1
  8053a8:	103fb726 	beq	r2,zero,805288 <___vfprintf_internal_r+0x1c70>
  8053ac:	20800044 	addi	r2,r4,1
  8053b0:	98a7883a 	add	r19,r19,r2
  8053b4:	dcc14615 	stw	r19,1304(sp)
  8053b8:	980f883a 	mov	r7,r19
  8053bc:	983f800e 	bge	r19,zero,8051c0 <___vfprintf_internal_r+0x1ba8>
  8053c0:	003fb306 	br	805290 <___vfprintf_internal_r+0x1c78>
  8053c4:	d9814e17 	ldw	r6,1336(sp)
  8053c8:	31bfff84 	addi	r6,r6,-2
  8053cc:	d9814e15 	stw	r6,1336(sp)
  8053d0:	003f4c06 	br	805104 <___vfprintf_internal_r+0x1aec>
  8053d4:	0100180e 	bge	zero,r4,805438 <___vfprintf_internal_r+0x1e20>
  8053d8:	00800044 	movi	r2,1
  8053dc:	1485883a 	add	r2,r2,r18
  8053e0:	d8814615 	stw	r2,1304(sp)
  8053e4:	100f883a 	mov	r7,r2
  8053e8:	103f750e 	bge	r2,zero,8051c0 <___vfprintf_internal_r+0x1ba8>
  8053ec:	003fa806 	br	805290 <___vfprintf_internal_r+0x1c78>
  8053f0:	80c00c04 	addi	r3,r16,48
  8053f4:	00800c04 	movi	r2,48
  8053f8:	d8c009c5 	stb	r3,39(sp)
  8053fc:	d9800904 	addi	r6,sp,36
  805400:	d8c00a04 	addi	r3,sp,40
  805404:	d8800985 	stb	r2,38(sp)
  805408:	003f6506 	br	8051a0 <___vfprintf_internal_r+0x1b88>
  80540c:	d9014d17 	ldw	r4,1332(sp)
  805410:	2084703a 	and	r2,r4,r2
  805414:	103f9c26 	beq	r2,zero,805288 <___vfprintf_internal_r+0x1c70>
  805418:	003f6606 	br	8051b4 <___vfprintf_internal_r+0x1b9c>
  80541c:	d9800904 	addi	r6,sp,36
  805420:	d8c00984 	addi	r3,sp,38
  805424:	003f5e06 	br	8051a0 <___vfprintf_internal_r+0x1b88>
  805428:	00800b44 	movi	r2,45
  80542c:	0121c83a 	sub	r16,zero,r4
  805430:	d8800945 	stb	r2,37(sp)
  805434:	003f3d06 	br	80512c <___vfprintf_internal_r+0x1b14>
  805438:	00800084 	movi	r2,2
  80543c:	1105c83a 	sub	r2,r2,r4
  805440:	003fe606 	br	8053dc <___vfprintf_internal_r+0x1dc4>
  805444:	d8014615 	stw	zero,1304(sp)
  805448:	dc814815 	stw	r18,1312(sp)
  80544c:	003fb106 	br	805314 <___vfprintf_internal_r+0x1cfc>
  805450:	000d883a 	mov	r6,zero
  805454:	000f883a 	mov	r7,zero
  805458:	8009883a 	mov	r4,r16
  80545c:	880b883a 	mov	r5,r17
  805460:	080aad00 	call	80aad0 <__nedf2>
  805464:	103f9f26 	beq	r2,zero,8052e4 <___vfprintf_internal_r+0x1ccc>
  805468:	00800044 	movi	r2,1
  80546c:	1509c83a 	sub	r4,r2,r20
  805470:	d9000615 	stw	r4,24(sp)
  805474:	003f9b06 	br	8052e4 <___vfprintf_internal_r+0x1ccc>
  805478:	98000d1e 	bne	r19,zero,8054b0 <___vfprintf_internal_r+0x1e98>
  80547c:	d8c14d17 	ldw	r3,1332(sp)
  805480:	1880004c 	andi	r2,r3,1
  805484:	10000a1e 	bne	r2,zero,8054b0 <___vfprintf_internal_r+0x1e98>
  805488:	01000044 	movi	r4,1
  80548c:	200f883a 	mov	r7,r4
  805490:	d9014615 	stw	r4,1304(sp)
  805494:	003f4a06 	br	8051c0 <___vfprintf_internal_r+0x1ba8>
  805498:	3cc00017 	ldw	r19,0(r7)
  80549c:	39c00104 	addi	r7,r7,4
  8054a0:	983d0e0e 	bge	r19,zero,8048dc <___vfprintf_internal_r+0x12c4>
  8054a4:	b8c00007 	ldb	r3,0(r23)
  8054a8:	04ffffc4 	movi	r19,-1
  8054ac:	0038d906 	br	803814 <___vfprintf_internal_r+0x1fc>
  8054b0:	9cc00084 	addi	r19,r19,2
  8054b4:	dcc14615 	stw	r19,1304(sp)
  8054b8:	980f883a 	mov	r7,r19
  8054bc:	983f400e 	bge	r19,zero,8051c0 <___vfprintf_internal_r+0x1ba8>
  8054c0:	003f7306 	br	805290 <___vfprintf_internal_r+0x1c78>

008054c4 <__vfprintf_internal>:
  8054c4:	00802074 	movhi	r2,129
  8054c8:	10882504 	addi	r2,r2,8340
  8054cc:	2013883a 	mov	r9,r4
  8054d0:	11000017 	ldw	r4,0(r2)
  8054d4:	2805883a 	mov	r2,r5
  8054d8:	300f883a 	mov	r7,r6
  8054dc:	480b883a 	mov	r5,r9
  8054e0:	100d883a 	mov	r6,r2
  8054e4:	08036181 	jmpi	803618 <___vfprintf_internal_r>

008054e8 <_write_r>:
  8054e8:	defffd04 	addi	sp,sp,-12
  8054ec:	dc000015 	stw	r16,0(sp)
  8054f0:	04002074 	movhi	r16,129
  8054f4:	840f6604 	addi	r16,r16,15768
  8054f8:	dc400115 	stw	r17,4(sp)
  8054fc:	80000015 	stw	zero,0(r16)
  805500:	2023883a 	mov	r17,r4
  805504:	2809883a 	mov	r4,r5
  805508:	300b883a 	mov	r5,r6
  80550c:	380d883a 	mov	r6,r7
  805510:	dfc00215 	stw	ra,8(sp)
  805514:	080c75c0 	call	80c75c <write>
  805518:	1007883a 	mov	r3,r2
  80551c:	00bfffc4 	movi	r2,-1
  805520:	18800626 	beq	r3,r2,80553c <_write_r+0x54>
  805524:	1805883a 	mov	r2,r3
  805528:	dfc00217 	ldw	ra,8(sp)
  80552c:	dc400117 	ldw	r17,4(sp)
  805530:	dc000017 	ldw	r16,0(sp)
  805534:	dec00304 	addi	sp,sp,12
  805538:	f800283a 	ret
  80553c:	80800017 	ldw	r2,0(r16)
  805540:	103ff826 	beq	r2,zero,805524 <_write_r+0x3c>
  805544:	88800015 	stw	r2,0(r17)
  805548:	1805883a 	mov	r2,r3
  80554c:	dfc00217 	ldw	ra,8(sp)
  805550:	dc400117 	ldw	r17,4(sp)
  805554:	dc000017 	ldw	r16,0(sp)
  805558:	dec00304 	addi	sp,sp,12
  80555c:	f800283a 	ret

00805560 <__swsetup_r>:
  805560:	00802074 	movhi	r2,129
  805564:	10882504 	addi	r2,r2,8340
  805568:	10c00017 	ldw	r3,0(r2)
  80556c:	defffd04 	addi	sp,sp,-12
  805570:	dc400115 	stw	r17,4(sp)
  805574:	dc000015 	stw	r16,0(sp)
  805578:	dfc00215 	stw	ra,8(sp)
  80557c:	2023883a 	mov	r17,r4
  805580:	2821883a 	mov	r16,r5
  805584:	18000226 	beq	r3,zero,805590 <__swsetup_r+0x30>
  805588:	18800e17 	ldw	r2,56(r3)
  80558c:	10001f26 	beq	r2,zero,80560c <__swsetup_r+0xac>
  805590:	8100030b 	ldhu	r4,12(r16)
  805594:	2080020c 	andi	r2,r4,8
  805598:	10002826 	beq	r2,zero,80563c <__swsetup_r+0xdc>
  80559c:	81400417 	ldw	r5,16(r16)
  8055a0:	28001d26 	beq	r5,zero,805618 <__swsetup_r+0xb8>
  8055a4:	2080004c 	andi	r2,r4,1
  8055a8:	1005003a 	cmpeq	r2,r2,zero
  8055ac:	10000b26 	beq	r2,zero,8055dc <__swsetup_r+0x7c>
  8055b0:	2080008c 	andi	r2,r4,2
  8055b4:	10001226 	beq	r2,zero,805600 <__swsetup_r+0xa0>
  8055b8:	0005883a 	mov	r2,zero
  8055bc:	80800215 	stw	r2,8(r16)
  8055c0:	28000b26 	beq	r5,zero,8055f0 <__swsetup_r+0x90>
  8055c4:	0005883a 	mov	r2,zero
  8055c8:	dfc00217 	ldw	ra,8(sp)
  8055cc:	dc400117 	ldw	r17,4(sp)
  8055d0:	dc000017 	ldw	r16,0(sp)
  8055d4:	dec00304 	addi	sp,sp,12
  8055d8:	f800283a 	ret
  8055dc:	80800517 	ldw	r2,20(r16)
  8055e0:	80000215 	stw	zero,8(r16)
  8055e4:	0085c83a 	sub	r2,zero,r2
  8055e8:	80800615 	stw	r2,24(r16)
  8055ec:	283ff51e 	bne	r5,zero,8055c4 <__swsetup_r+0x64>
  8055f0:	2080200c 	andi	r2,r4,128
  8055f4:	103ff326 	beq	r2,zero,8055c4 <__swsetup_r+0x64>
  8055f8:	00bfffc4 	movi	r2,-1
  8055fc:	003ff206 	br	8055c8 <__swsetup_r+0x68>
  805600:	80800517 	ldw	r2,20(r16)
  805604:	80800215 	stw	r2,8(r16)
  805608:	003fed06 	br	8055c0 <__swsetup_r+0x60>
  80560c:	1809883a 	mov	r4,r3
  805610:	080147c0 	call	80147c <__sinit>
  805614:	003fde06 	br	805590 <__swsetup_r+0x30>
  805618:	20c0a00c 	andi	r3,r4,640
  80561c:	00808004 	movi	r2,512
  805620:	18bfe026 	beq	r3,r2,8055a4 <__swsetup_r+0x44>
  805624:	8809883a 	mov	r4,r17
  805628:	800b883a 	mov	r5,r16
  80562c:	08023b40 	call	8023b4 <__smakebuf_r>
  805630:	8100030b 	ldhu	r4,12(r16)
  805634:	81400417 	ldw	r5,16(r16)
  805638:	003fda06 	br	8055a4 <__swsetup_r+0x44>
  80563c:	2080040c 	andi	r2,r4,16
  805640:	103fed26 	beq	r2,zero,8055f8 <__swsetup_r+0x98>
  805644:	2080010c 	andi	r2,r4,4
  805648:	10001226 	beq	r2,zero,805694 <__swsetup_r+0x134>
  80564c:	81400c17 	ldw	r5,48(r16)
  805650:	28000526 	beq	r5,zero,805668 <__swsetup_r+0x108>
  805654:	80801004 	addi	r2,r16,64
  805658:	28800226 	beq	r5,r2,805664 <__swsetup_r+0x104>
  80565c:	8809883a 	mov	r4,r17
  805660:	08019700 	call	801970 <_free_r>
  805664:	80000c15 	stw	zero,48(r16)
  805668:	8080030b 	ldhu	r2,12(r16)
  80566c:	81400417 	ldw	r5,16(r16)
  805670:	80000115 	stw	zero,4(r16)
  805674:	10bff6cc 	andi	r2,r2,65499
  805678:	8080030d 	sth	r2,12(r16)
  80567c:	81400015 	stw	r5,0(r16)
  805680:	8080030b 	ldhu	r2,12(r16)
  805684:	10800214 	ori	r2,r2,8
  805688:	113fffcc 	andi	r4,r2,65535
  80568c:	8080030d 	sth	r2,12(r16)
  805690:	003fc306 	br	8055a0 <__swsetup_r+0x40>
  805694:	81400417 	ldw	r5,16(r16)
  805698:	003ff906 	br	805680 <__swsetup_r+0x120>

0080569c <_close_r>:
  80569c:	defffd04 	addi	sp,sp,-12
  8056a0:	dc000015 	stw	r16,0(sp)
  8056a4:	04002074 	movhi	r16,129
  8056a8:	840f6604 	addi	r16,r16,15768
  8056ac:	dc400115 	stw	r17,4(sp)
  8056b0:	80000015 	stw	zero,0(r16)
  8056b4:	2023883a 	mov	r17,r4
  8056b8:	2809883a 	mov	r4,r5
  8056bc:	dfc00215 	stw	ra,8(sp)
  8056c0:	080b7d40 	call	80b7d4 <close>
  8056c4:	1007883a 	mov	r3,r2
  8056c8:	00bfffc4 	movi	r2,-1
  8056cc:	18800626 	beq	r3,r2,8056e8 <_close_r+0x4c>
  8056d0:	1805883a 	mov	r2,r3
  8056d4:	dfc00217 	ldw	ra,8(sp)
  8056d8:	dc400117 	ldw	r17,4(sp)
  8056dc:	dc000017 	ldw	r16,0(sp)
  8056e0:	dec00304 	addi	sp,sp,12
  8056e4:	f800283a 	ret
  8056e8:	80800017 	ldw	r2,0(r16)
  8056ec:	103ff826 	beq	r2,zero,8056d0 <_close_r+0x34>
  8056f0:	88800015 	stw	r2,0(r17)
  8056f4:	1805883a 	mov	r2,r3
  8056f8:	dfc00217 	ldw	ra,8(sp)
  8056fc:	dc400117 	ldw	r17,4(sp)
  805700:	dc000017 	ldw	r16,0(sp)
  805704:	dec00304 	addi	sp,sp,12
  805708:	f800283a 	ret

0080570c <quorem>:
  80570c:	28c00417 	ldw	r3,16(r5)
  805710:	20800417 	ldw	r2,16(r4)
  805714:	defff604 	addi	sp,sp,-40
  805718:	ddc00715 	stw	r23,28(sp)
  80571c:	dd400515 	stw	r21,20(sp)
  805720:	dfc00915 	stw	ra,36(sp)
  805724:	df000815 	stw	fp,32(sp)
  805728:	dd800615 	stw	r22,24(sp)
  80572c:	dd000415 	stw	r20,16(sp)
  805730:	dcc00315 	stw	r19,12(sp)
  805734:	dc800215 	stw	r18,8(sp)
  805738:	dc400115 	stw	r17,4(sp)
  80573c:	dc000015 	stw	r16,0(sp)
  805740:	202f883a 	mov	r23,r4
  805744:	282b883a 	mov	r21,r5
  805748:	10c07416 	blt	r2,r3,80591c <quorem+0x210>
  80574c:	1c7fffc4 	addi	r17,r3,-1
  805750:	8c45883a 	add	r2,r17,r17
  805754:	1085883a 	add	r2,r2,r2
  805758:	2c000504 	addi	r16,r5,20
  80575c:	24c00504 	addi	r19,r4,20
  805760:	14ed883a 	add	r22,r2,r19
  805764:	80a5883a 	add	r18,r16,r2
  805768:	b7000017 	ldw	fp,0(r22)
  80576c:	91400017 	ldw	r5,0(r18)
  805770:	e009883a 	mov	r4,fp
  805774:	29400044 	addi	r5,r5,1
  805778:	0800f700 	call	800f70 <__udivsi3>
  80577c:	1029883a 	mov	r20,r2
  805780:	10003c1e 	bne	r2,zero,805874 <quorem+0x168>
  805784:	a80b883a 	mov	r5,r21
  805788:	b809883a 	mov	r4,r23
  80578c:	08079800 	call	807980 <__mcmp>
  805790:	10002b16 	blt	r2,zero,805840 <quorem+0x134>
  805794:	a5000044 	addi	r20,r20,1
  805798:	980f883a 	mov	r7,r19
  80579c:	0011883a 	mov	r8,zero
  8057a0:	0009883a 	mov	r4,zero
  8057a4:	81400017 	ldw	r5,0(r16)
  8057a8:	38c00017 	ldw	r3,0(r7)
  8057ac:	84000104 	addi	r16,r16,4
  8057b0:	28bfffcc 	andi	r2,r5,65535
  8057b4:	2085883a 	add	r2,r4,r2
  8057b8:	11bfffcc 	andi	r6,r2,65535
  8057bc:	193fffcc 	andi	r4,r3,65535
  8057c0:	1004d43a 	srli	r2,r2,16
  8057c4:	280ad43a 	srli	r5,r5,16
  8057c8:	2189c83a 	sub	r4,r4,r6
  8057cc:	2209883a 	add	r4,r4,r8
  8057d0:	1806d43a 	srli	r3,r3,16
  8057d4:	288b883a 	add	r5,r5,r2
  8057d8:	200dd43a 	srai	r6,r4,16
  8057dc:	28bfffcc 	andi	r2,r5,65535
  8057e0:	1887c83a 	sub	r3,r3,r2
  8057e4:	1987883a 	add	r3,r3,r6
  8057e8:	3900000d 	sth	r4,0(r7)
  8057ec:	38c0008d 	sth	r3,2(r7)
  8057f0:	2808d43a 	srli	r4,r5,16
  8057f4:	39c00104 	addi	r7,r7,4
  8057f8:	1811d43a 	srai	r8,r3,16
  8057fc:	943fe92e 	bgeu	r18,r16,8057a4 <quorem+0x98>
  805800:	8c45883a 	add	r2,r17,r17
  805804:	1085883a 	add	r2,r2,r2
  805808:	9885883a 	add	r2,r19,r2
  80580c:	10c00017 	ldw	r3,0(r2)
  805810:	18000b1e 	bne	r3,zero,805840 <quorem+0x134>
  805814:	113fff04 	addi	r4,r2,-4
  805818:	9900082e 	bgeu	r19,r4,80583c <quorem+0x130>
  80581c:	10bfff17 	ldw	r2,-4(r2)
  805820:	10000326 	beq	r2,zero,805830 <quorem+0x124>
  805824:	00000506 	br	80583c <quorem+0x130>
  805828:	20800017 	ldw	r2,0(r4)
  80582c:	1000031e 	bne	r2,zero,80583c <quorem+0x130>
  805830:	213fff04 	addi	r4,r4,-4
  805834:	8c7fffc4 	addi	r17,r17,-1
  805838:	993ffb36 	bltu	r19,r4,805828 <quorem+0x11c>
  80583c:	bc400415 	stw	r17,16(r23)
  805840:	a005883a 	mov	r2,r20
  805844:	dfc00917 	ldw	ra,36(sp)
  805848:	df000817 	ldw	fp,32(sp)
  80584c:	ddc00717 	ldw	r23,28(sp)
  805850:	dd800617 	ldw	r22,24(sp)
  805854:	dd400517 	ldw	r21,20(sp)
  805858:	dd000417 	ldw	r20,16(sp)
  80585c:	dcc00317 	ldw	r19,12(sp)
  805860:	dc800217 	ldw	r18,8(sp)
  805864:	dc400117 	ldw	r17,4(sp)
  805868:	dc000017 	ldw	r16,0(sp)
  80586c:	dec00a04 	addi	sp,sp,40
  805870:	f800283a 	ret
  805874:	980f883a 	mov	r7,r19
  805878:	8011883a 	mov	r8,r16
  80587c:	0013883a 	mov	r9,zero
  805880:	000d883a 	mov	r6,zero
  805884:	40c00017 	ldw	r3,0(r8)
  805888:	39000017 	ldw	r4,0(r7)
  80588c:	42000104 	addi	r8,r8,4
  805890:	18bfffcc 	andi	r2,r3,65535
  805894:	a085383a 	mul	r2,r20,r2
  805898:	1806d43a 	srli	r3,r3,16
  80589c:	217fffcc 	andi	r5,r4,65535
  8058a0:	3085883a 	add	r2,r6,r2
  8058a4:	11bfffcc 	andi	r6,r2,65535
  8058a8:	a0c7383a 	mul	r3,r20,r3
  8058ac:	1004d43a 	srli	r2,r2,16
  8058b0:	298bc83a 	sub	r5,r5,r6
  8058b4:	2a4b883a 	add	r5,r5,r9
  8058b8:	2008d43a 	srli	r4,r4,16
  8058bc:	1887883a 	add	r3,r3,r2
  8058c0:	280dd43a 	srai	r6,r5,16
  8058c4:	18bfffcc 	andi	r2,r3,65535
  8058c8:	2089c83a 	sub	r4,r4,r2
  8058cc:	2189883a 	add	r4,r4,r6
  8058d0:	3900008d 	sth	r4,2(r7)
  8058d4:	3940000d 	sth	r5,0(r7)
  8058d8:	180cd43a 	srli	r6,r3,16
  8058dc:	39c00104 	addi	r7,r7,4
  8058e0:	2013d43a 	srai	r9,r4,16
  8058e4:	923fe72e 	bgeu	r18,r8,805884 <quorem+0x178>
  8058e8:	e03fa61e 	bne	fp,zero,805784 <quorem+0x78>
  8058ec:	b0ffff04 	addi	r3,r22,-4
  8058f0:	98c0082e 	bgeu	r19,r3,805914 <quorem+0x208>
  8058f4:	b0bfff17 	ldw	r2,-4(r22)
  8058f8:	10000326 	beq	r2,zero,805908 <quorem+0x1fc>
  8058fc:	00000506 	br	805914 <quorem+0x208>
  805900:	18800017 	ldw	r2,0(r3)
  805904:	1000031e 	bne	r2,zero,805914 <quorem+0x208>
  805908:	18ffff04 	addi	r3,r3,-4
  80590c:	8c7fffc4 	addi	r17,r17,-1
  805910:	98fffb36 	bltu	r19,r3,805900 <quorem+0x1f4>
  805914:	bc400415 	stw	r17,16(r23)
  805918:	003f9a06 	br	805784 <quorem+0x78>
  80591c:	0005883a 	mov	r2,zero
  805920:	003fc806 	br	805844 <quorem+0x138>

00805924 <_dtoa_r>:
  805924:	22001017 	ldw	r8,64(r4)
  805928:	deffda04 	addi	sp,sp,-152
  80592c:	dd402115 	stw	r21,132(sp)
  805930:	dd002015 	stw	r20,128(sp)
  805934:	dc801e15 	stw	r18,120(sp)
  805938:	dc401d15 	stw	r17,116(sp)
  80593c:	dfc02515 	stw	ra,148(sp)
  805940:	df002415 	stw	fp,144(sp)
  805944:	ddc02315 	stw	r23,140(sp)
  805948:	dd802215 	stw	r22,136(sp)
  80594c:	dcc01f15 	stw	r19,124(sp)
  805950:	dc001c15 	stw	r16,112(sp)
  805954:	d9001615 	stw	r4,88(sp)
  805958:	3023883a 	mov	r17,r6
  80595c:	2829883a 	mov	r20,r5
  805960:	d9c01715 	stw	r7,92(sp)
  805964:	dc802817 	ldw	r18,160(sp)
  805968:	302b883a 	mov	r21,r6
  80596c:	40000a26 	beq	r8,zero,805998 <_dtoa_r+0x74>
  805970:	20801117 	ldw	r2,68(r4)
  805974:	400b883a 	mov	r5,r8
  805978:	40800115 	stw	r2,4(r8)
  80597c:	20c01117 	ldw	r3,68(r4)
  805980:	00800044 	movi	r2,1
  805984:	10c4983a 	sll	r2,r2,r3
  805988:	40800215 	stw	r2,8(r8)
  80598c:	08078240 	call	807824 <_Bfree>
  805990:	d8c01617 	ldw	r3,88(sp)
  805994:	18001015 	stw	zero,64(r3)
  805998:	8800a316 	blt	r17,zero,805c28 <_dtoa_r+0x304>
  80599c:	90000015 	stw	zero,0(r18)
  8059a0:	a8dffc2c 	andhi	r3,r21,32752
  8059a4:	009ffc34 	movhi	r2,32752
  8059a8:	18809126 	beq	r3,r2,805bf0 <_dtoa_r+0x2cc>
  8059ac:	000d883a 	mov	r6,zero
  8059b0:	000f883a 	mov	r7,zero
  8059b4:	a009883a 	mov	r4,r20
  8059b8:	a80b883a 	mov	r5,r21
  8059bc:	dd001215 	stw	r20,72(sp)
  8059c0:	dd401315 	stw	r21,76(sp)
  8059c4:	080aad00 	call	80aad0 <__nedf2>
  8059c8:	1000171e 	bne	r2,zero,805a28 <_dtoa_r+0x104>
  8059cc:	d9802717 	ldw	r6,156(sp)
  8059d0:	00800044 	movi	r2,1
  8059d4:	30800015 	stw	r2,0(r6)
  8059d8:	d8802917 	ldw	r2,164(sp)
  8059dc:	10029b26 	beq	r2,zero,80644c <_dtoa_r+0xb28>
  8059e0:	d9002917 	ldw	r4,164(sp)
  8059e4:	00802074 	movhi	r2,129
  8059e8:	10bfb544 	addi	r2,r2,-299
  8059ec:	10ffffc4 	addi	r3,r2,-1
  8059f0:	20800015 	stw	r2,0(r4)
  8059f4:	1805883a 	mov	r2,r3
  8059f8:	dfc02517 	ldw	ra,148(sp)
  8059fc:	df002417 	ldw	fp,144(sp)
  805a00:	ddc02317 	ldw	r23,140(sp)
  805a04:	dd802217 	ldw	r22,136(sp)
  805a08:	dd402117 	ldw	r21,132(sp)
  805a0c:	dd002017 	ldw	r20,128(sp)
  805a10:	dcc01f17 	ldw	r19,124(sp)
  805a14:	dc801e17 	ldw	r18,120(sp)
  805a18:	dc401d17 	ldw	r17,116(sp)
  805a1c:	dc001c17 	ldw	r16,112(sp)
  805a20:	dec02604 	addi	sp,sp,152
  805a24:	f800283a 	ret
  805a28:	d9001617 	ldw	r4,88(sp)
  805a2c:	d9401217 	ldw	r5,72(sp)
  805a30:	d8800104 	addi	r2,sp,4
  805a34:	a80d883a 	mov	r6,r21
  805a38:	d9c00204 	addi	r7,sp,8
  805a3c:	d8800015 	stw	r2,0(sp)
  805a40:	0807e600 	call	807e60 <__d2b>
  805a44:	d8800715 	stw	r2,28(sp)
  805a48:	a804d53a 	srli	r2,r21,20
  805a4c:	1101ffcc 	andi	r4,r2,2047
  805a50:	20008626 	beq	r4,zero,805c6c <_dtoa_r+0x348>
  805a54:	d8c01217 	ldw	r3,72(sp)
  805a58:	00800434 	movhi	r2,16
  805a5c:	10bfffc4 	addi	r2,r2,-1
  805a60:	ddc00117 	ldw	r23,4(sp)
  805a64:	a884703a 	and	r2,r21,r2
  805a68:	1811883a 	mov	r8,r3
  805a6c:	124ffc34 	orhi	r9,r2,16368
  805a70:	25bf0044 	addi	r22,r4,-1023
  805a74:	d8000815 	stw	zero,32(sp)
  805a78:	0005883a 	mov	r2,zero
  805a7c:	00cffe34 	movhi	r3,16376
  805a80:	480b883a 	mov	r5,r9
  805a84:	4009883a 	mov	r4,r8
  805a88:	180f883a 	mov	r7,r3
  805a8c:	100d883a 	mov	r6,r2
  805a90:	080a3380 	call	80a338 <__subdf3>
  805a94:	0218dbf4 	movhi	r8,25455
  805a98:	4210d844 	addi	r8,r8,17249
  805a9c:	024ff4f4 	movhi	r9,16339
  805aa0:	4a61e9c4 	addi	r9,r9,-30809
  805aa4:	480f883a 	mov	r7,r9
  805aa8:	400d883a 	mov	r6,r8
  805aac:	180b883a 	mov	r5,r3
  805ab0:	1009883a 	mov	r4,r2
  805ab4:	080a42c0 	call	80a42c <__muldf3>
  805ab8:	0222d874 	movhi	r8,35681
  805abc:	42322cc4 	addi	r8,r8,-14157
  805ac0:	024ff1f4 	movhi	r9,16327
  805ac4:	4a628a04 	addi	r9,r9,-30168
  805ac8:	480f883a 	mov	r7,r9
  805acc:	400d883a 	mov	r6,r8
  805ad0:	180b883a 	mov	r5,r3
  805ad4:	1009883a 	mov	r4,r2
  805ad8:	080a3b80 	call	80a3b8 <__adddf3>
  805adc:	b009883a 	mov	r4,r22
  805ae0:	1021883a 	mov	r16,r2
  805ae4:	1823883a 	mov	r17,r3
  805ae8:	080acf00 	call	80acf0 <__floatsidf>
  805aec:	021427f4 	movhi	r8,20639
  805af0:	421e7ec4 	addi	r8,r8,31227
  805af4:	024ff4f4 	movhi	r9,16339
  805af8:	4a5104c4 	addi	r9,r9,17427
  805afc:	480f883a 	mov	r7,r9
  805b00:	400d883a 	mov	r6,r8
  805b04:	180b883a 	mov	r5,r3
  805b08:	1009883a 	mov	r4,r2
  805b0c:	080a42c0 	call	80a42c <__muldf3>
  805b10:	180f883a 	mov	r7,r3
  805b14:	880b883a 	mov	r5,r17
  805b18:	100d883a 	mov	r6,r2
  805b1c:	8009883a 	mov	r4,r16
  805b20:	080a3b80 	call	80a3b8 <__adddf3>
  805b24:	1009883a 	mov	r4,r2
  805b28:	180b883a 	mov	r5,r3
  805b2c:	1021883a 	mov	r16,r2
  805b30:	1823883a 	mov	r17,r3
  805b34:	080ade80 	call	80ade8 <__fixdfsi>
  805b38:	000d883a 	mov	r6,zero
  805b3c:	000f883a 	mov	r7,zero
  805b40:	8009883a 	mov	r4,r16
  805b44:	880b883a 	mov	r5,r17
  805b48:	d8800d15 	stw	r2,52(sp)
  805b4c:	080ac680 	call	80ac68 <__ltdf2>
  805b50:	10031716 	blt	r2,zero,8067b0 <_dtoa_r+0xe8c>
  805b54:	d8c00d17 	ldw	r3,52(sp)
  805b58:	00800584 	movi	r2,22
  805b5c:	10c1482e 	bgeu	r2,r3,806080 <_dtoa_r+0x75c>
  805b60:	01000044 	movi	r4,1
  805b64:	d9000c15 	stw	r4,48(sp)
  805b68:	bd85c83a 	sub	r2,r23,r22
  805b6c:	11bfffc4 	addi	r6,r2,-1
  805b70:	30030b16 	blt	r6,zero,8067a0 <_dtoa_r+0xe7c>
  805b74:	d9800a15 	stw	r6,40(sp)
  805b78:	d8001115 	stw	zero,68(sp)
  805b7c:	d8c00d17 	ldw	r3,52(sp)
  805b80:	1802ff16 	blt	r3,zero,806780 <_dtoa_r+0xe5c>
  805b84:	d9000a17 	ldw	r4,40(sp)
  805b88:	d8c00915 	stw	r3,36(sp)
  805b8c:	d8001015 	stw	zero,64(sp)
  805b90:	20c9883a 	add	r4,r4,r3
  805b94:	d9000a15 	stw	r4,40(sp)
  805b98:	d9001717 	ldw	r4,92(sp)
  805b9c:	00800244 	movi	r2,9
  805ba0:	11004636 	bltu	r2,r4,805cbc <_dtoa_r+0x398>
  805ba4:	00800144 	movi	r2,5
  805ba8:	11020416 	blt	r2,r4,8063bc <_dtoa_r+0xa98>
  805bac:	04400044 	movi	r17,1
  805bb0:	d8c01717 	ldw	r3,92(sp)
  805bb4:	00800144 	movi	r2,5
  805bb8:	10c1ed36 	bltu	r2,r3,806370 <_dtoa_r+0xa4c>
  805bbc:	18c5883a 	add	r2,r3,r3
  805bc0:	1085883a 	add	r2,r2,r2
  805bc4:	00c02034 	movhi	r3,128
  805bc8:	18d6f604 	addi	r3,r3,23512
  805bcc:	10c5883a 	add	r2,r2,r3
  805bd0:	11000017 	ldw	r4,0(r2)
  805bd4:	2000683a 	jmp	r4
  805bd8:	00805cc4 	movi	r2,371
  805bdc:	00805cc4 	movi	r2,371
  805be0:	008066c4 	movi	r2,411
  805be4:	0080669c 	xori	r2,zero,410
  805be8:	008066e0 	cmpeqi	r2,zero,411
  805bec:	008066ec 	andhi	r2,zero,411
  805bf0:	d9002717 	ldw	r4,156(sp)
  805bf4:	0089c3c4 	movi	r2,9999
  805bf8:	20800015 	stw	r2,0(r4)
  805bfc:	a0001026 	beq	r20,zero,805c40 <_dtoa_r+0x31c>
  805c00:	00c02074 	movhi	r3,129
  805c04:	18c06204 	addi	r3,r3,392
  805c08:	d9802917 	ldw	r6,164(sp)
  805c0c:	303f7926 	beq	r6,zero,8059f4 <_dtoa_r+0xd0>
  805c10:	188000c7 	ldb	r2,3(r3)
  805c14:	190000c4 	addi	r4,r3,3
  805c18:	1000101e 	bne	r2,zero,805c5c <_dtoa_r+0x338>
  805c1c:	d8802917 	ldw	r2,164(sp)
  805c20:	11000015 	stw	r4,0(r2)
  805c24:	003f7306 	br	8059f4 <_dtoa_r+0xd0>
  805c28:	00a00034 	movhi	r2,32768
  805c2c:	10bfffc4 	addi	r2,r2,-1
  805c30:	00c00044 	movi	r3,1
  805c34:	88aa703a 	and	r21,r17,r2
  805c38:	90c00015 	stw	r3,0(r18)
  805c3c:	003f5806 	br	8059a0 <_dtoa_r+0x7c>
  805c40:	00800434 	movhi	r2,16
  805c44:	10bfffc4 	addi	r2,r2,-1
  805c48:	a884703a 	and	r2,r21,r2
  805c4c:	103fec1e 	bne	r2,zero,805c00 <_dtoa_r+0x2dc>
  805c50:	00c02074 	movhi	r3,129
  805c54:	18c05f04 	addi	r3,r3,380
  805c58:	003feb06 	br	805c08 <_dtoa_r+0x2e4>
  805c5c:	d8802917 	ldw	r2,164(sp)
  805c60:	19000204 	addi	r4,r3,8
  805c64:	11000015 	stw	r4,0(r2)
  805c68:	003f6206 	br	8059f4 <_dtoa_r+0xd0>
  805c6c:	ddc00117 	ldw	r23,4(sp)
  805c70:	d8800217 	ldw	r2,8(sp)
  805c74:	01000804 	movi	r4,32
  805c78:	b8c10c84 	addi	r3,r23,1074
  805c7c:	18a3883a 	add	r17,r3,r2
  805c80:	2441b80e 	bge	r4,r17,806364 <_dtoa_r+0xa40>
  805c84:	00c01004 	movi	r3,64
  805c88:	1c47c83a 	sub	r3,r3,r17
  805c8c:	88bff804 	addi	r2,r17,-32
  805c90:	a8c6983a 	sll	r3,r21,r3
  805c94:	a084d83a 	srl	r2,r20,r2
  805c98:	1888b03a 	or	r4,r3,r2
  805c9c:	080aec00 	call	80aec0 <__floatunsidf>
  805ca0:	1011883a 	mov	r8,r2
  805ca4:	00bf8434 	movhi	r2,65040
  805ca8:	01000044 	movi	r4,1
  805cac:	10d3883a 	add	r9,r2,r3
  805cb0:	8dbef344 	addi	r22,r17,-1075
  805cb4:	d9000815 	stw	r4,32(sp)
  805cb8:	003f6f06 	br	805a78 <_dtoa_r+0x154>
  805cbc:	d8001715 	stw	zero,92(sp)
  805cc0:	04400044 	movi	r17,1
  805cc4:	00bfffc4 	movi	r2,-1
  805cc8:	00c00044 	movi	r3,1
  805ccc:	d8800e15 	stw	r2,56(sp)
  805cd0:	d8002615 	stw	zero,152(sp)
  805cd4:	d8800f15 	stw	r2,60(sp)
  805cd8:	d8c00b15 	stw	r3,44(sp)
  805cdc:	1021883a 	mov	r16,r2
  805ce0:	d8801617 	ldw	r2,88(sp)
  805ce4:	10001115 	stw	zero,68(r2)
  805ce8:	d8801617 	ldw	r2,88(sp)
  805cec:	11401117 	ldw	r5,68(r2)
  805cf0:	1009883a 	mov	r4,r2
  805cf4:	0807da40 	call	807da4 <_Balloc>
  805cf8:	d8c01617 	ldw	r3,88(sp)
  805cfc:	d8800515 	stw	r2,20(sp)
  805d00:	18801015 	stw	r2,64(r3)
  805d04:	00800384 	movi	r2,14
  805d08:	14006836 	bltu	r2,r16,805eac <_dtoa_r+0x588>
  805d0c:	8805003a 	cmpeq	r2,r17,zero
  805d10:	1000661e 	bne	r2,zero,805eac <_dtoa_r+0x588>
  805d14:	d9000d17 	ldw	r4,52(sp)
  805d18:	0102300e 	bge	zero,r4,8065dc <_dtoa_r+0xcb8>
  805d1c:	208003cc 	andi	r2,r4,15
  805d20:	100490fa 	slli	r2,r2,3
  805d24:	2025d13a 	srai	r18,r4,4
  805d28:	00c02074 	movhi	r3,129
  805d2c:	18c07304 	addi	r3,r3,460
  805d30:	10c5883a 	add	r2,r2,r3
  805d34:	90c0040c 	andi	r3,r18,16
  805d38:	14000017 	ldw	r16,0(r2)
  805d3c:	14400117 	ldw	r17,4(r2)
  805d40:	18036a1e 	bne	r3,zero,806aec <_dtoa_r+0x11c8>
  805d44:	05800084 	movi	r22,2
  805d48:	90001026 	beq	r18,zero,805d8c <_dtoa_r+0x468>
  805d4c:	04c02074 	movhi	r19,129
  805d50:	9cc0a504 	addi	r19,r19,660
  805d54:	9080004c 	andi	r2,r18,1
  805d58:	1005003a 	cmpeq	r2,r2,zero
  805d5c:	1000081e 	bne	r2,zero,805d80 <_dtoa_r+0x45c>
  805d60:	99800017 	ldw	r6,0(r19)
  805d64:	99c00117 	ldw	r7,4(r19)
  805d68:	880b883a 	mov	r5,r17
  805d6c:	8009883a 	mov	r4,r16
  805d70:	080a42c0 	call	80a42c <__muldf3>
  805d74:	1021883a 	mov	r16,r2
  805d78:	b5800044 	addi	r22,r22,1
  805d7c:	1823883a 	mov	r17,r3
  805d80:	9025d07a 	srai	r18,r18,1
  805d84:	9cc00204 	addi	r19,r19,8
  805d88:	903ff21e 	bne	r18,zero,805d54 <_dtoa_r+0x430>
  805d8c:	a80b883a 	mov	r5,r21
  805d90:	a009883a 	mov	r4,r20
  805d94:	880f883a 	mov	r7,r17
  805d98:	800d883a 	mov	r6,r16
  805d9c:	080a7f00 	call	80a7f0 <__divdf3>
  805da0:	1029883a 	mov	r20,r2
  805da4:	182b883a 	mov	r21,r3
  805da8:	d8c00c17 	ldw	r3,48(sp)
  805dac:	1805003a 	cmpeq	r2,r3,zero
  805db0:	1000081e 	bne	r2,zero,805dd4 <_dtoa_r+0x4b0>
  805db4:	0005883a 	mov	r2,zero
  805db8:	00cffc34 	movhi	r3,16368
  805dbc:	180f883a 	mov	r7,r3
  805dc0:	a009883a 	mov	r4,r20
  805dc4:	a80b883a 	mov	r5,r21
  805dc8:	100d883a 	mov	r6,r2
  805dcc:	080ac680 	call	80ac68 <__ltdf2>
  805dd0:	1003fe16 	blt	r2,zero,806dcc <_dtoa_r+0x14a8>
  805dd4:	b009883a 	mov	r4,r22
  805dd8:	080acf00 	call	80acf0 <__floatsidf>
  805ddc:	180b883a 	mov	r5,r3
  805de0:	1009883a 	mov	r4,r2
  805de4:	a00d883a 	mov	r6,r20
  805de8:	a80f883a 	mov	r7,r21
  805dec:	080a42c0 	call	80a42c <__muldf3>
  805df0:	0011883a 	mov	r8,zero
  805df4:	02500734 	movhi	r9,16412
  805df8:	1009883a 	mov	r4,r2
  805dfc:	180b883a 	mov	r5,r3
  805e00:	480f883a 	mov	r7,r9
  805e04:	400d883a 	mov	r6,r8
  805e08:	080a3b80 	call	80a3b8 <__adddf3>
  805e0c:	d9000f17 	ldw	r4,60(sp)
  805e10:	102d883a 	mov	r22,r2
  805e14:	00bf3034 	movhi	r2,64704
  805e18:	18b9883a 	add	fp,r3,r2
  805e1c:	e02f883a 	mov	r23,fp
  805e20:	20028f1e 	bne	r4,zero,806860 <_dtoa_r+0xf3c>
  805e24:	0005883a 	mov	r2,zero
  805e28:	00d00534 	movhi	r3,16404
  805e2c:	a009883a 	mov	r4,r20
  805e30:	a80b883a 	mov	r5,r21
  805e34:	180f883a 	mov	r7,r3
  805e38:	100d883a 	mov	r6,r2
  805e3c:	080a3380 	call	80a338 <__subdf3>
  805e40:	1009883a 	mov	r4,r2
  805e44:	e00f883a 	mov	r7,fp
  805e48:	180b883a 	mov	r5,r3
  805e4c:	b00d883a 	mov	r6,r22
  805e50:	1025883a 	mov	r18,r2
  805e54:	1827883a 	mov	r19,r3
  805e58:	080ab580 	call	80ab58 <__gtdf2>
  805e5c:	00834f16 	blt	zero,r2,806b9c <_dtoa_r+0x1278>
  805e60:	e0e0003c 	xorhi	r3,fp,32768
  805e64:	9009883a 	mov	r4,r18
  805e68:	980b883a 	mov	r5,r19
  805e6c:	180f883a 	mov	r7,r3
  805e70:	b00d883a 	mov	r6,r22
  805e74:	080ac680 	call	80ac68 <__ltdf2>
  805e78:	1000080e 	bge	r2,zero,805e9c <_dtoa_r+0x578>
  805e7c:	0027883a 	mov	r19,zero
  805e80:	0025883a 	mov	r18,zero
  805e84:	d8802617 	ldw	r2,152(sp)
  805e88:	df000517 	ldw	fp,20(sp)
  805e8c:	d8000615 	stw	zero,24(sp)
  805e90:	0084303a 	nor	r2,zero,r2
  805e94:	d8800d15 	stw	r2,52(sp)
  805e98:	00019b06 	br	806508 <_dtoa_r+0xbe4>
  805e9c:	d9801217 	ldw	r6,72(sp)
  805ea0:	d8801317 	ldw	r2,76(sp)
  805ea4:	3029883a 	mov	r20,r6
  805ea8:	102b883a 	mov	r21,r2
  805eac:	d8c00217 	ldw	r3,8(sp)
  805eb0:	18008516 	blt	r3,zero,8060c8 <_dtoa_r+0x7a4>
  805eb4:	d9000d17 	ldw	r4,52(sp)
  805eb8:	00800384 	movi	r2,14
  805ebc:	11008216 	blt	r2,r4,8060c8 <_dtoa_r+0x7a4>
  805ec0:	200490fa 	slli	r2,r4,3
  805ec4:	d9802617 	ldw	r6,152(sp)
  805ec8:	00c02074 	movhi	r3,129
  805ecc:	18c07304 	addi	r3,r3,460
  805ed0:	10c5883a 	add	r2,r2,r3
  805ed4:	14800017 	ldw	r18,0(r2)
  805ed8:	14c00117 	ldw	r19,4(r2)
  805edc:	30031e16 	blt	r6,zero,806b58 <_dtoa_r+0x1234>
  805ee0:	d9000517 	ldw	r4,20(sp)
  805ee4:	d8c00f17 	ldw	r3,60(sp)
  805ee8:	a823883a 	mov	r17,r21
  805eec:	a021883a 	mov	r16,r20
  805ef0:	192b883a 	add	r21,r3,r4
  805ef4:	2039883a 	mov	fp,r4
  805ef8:	00000f06 	br	805f38 <_dtoa_r+0x614>
  805efc:	0005883a 	mov	r2,zero
  805f00:	00d00934 	movhi	r3,16420
  805f04:	5009883a 	mov	r4,r10
  805f08:	580b883a 	mov	r5,r11
  805f0c:	180f883a 	mov	r7,r3
  805f10:	100d883a 	mov	r6,r2
  805f14:	080a42c0 	call	80a42c <__muldf3>
  805f18:	180b883a 	mov	r5,r3
  805f1c:	000d883a 	mov	r6,zero
  805f20:	000f883a 	mov	r7,zero
  805f24:	1009883a 	mov	r4,r2
  805f28:	1021883a 	mov	r16,r2
  805f2c:	1823883a 	mov	r17,r3
  805f30:	080aad00 	call	80aad0 <__nedf2>
  805f34:	10004526 	beq	r2,zero,80604c <_dtoa_r+0x728>
  805f38:	900d883a 	mov	r6,r18
  805f3c:	980f883a 	mov	r7,r19
  805f40:	8009883a 	mov	r4,r16
  805f44:	880b883a 	mov	r5,r17
  805f48:	080a7f00 	call	80a7f0 <__divdf3>
  805f4c:	180b883a 	mov	r5,r3
  805f50:	1009883a 	mov	r4,r2
  805f54:	080ade80 	call	80ade8 <__fixdfsi>
  805f58:	1009883a 	mov	r4,r2
  805f5c:	1029883a 	mov	r20,r2
  805f60:	080acf00 	call	80acf0 <__floatsidf>
  805f64:	180f883a 	mov	r7,r3
  805f68:	9009883a 	mov	r4,r18
  805f6c:	980b883a 	mov	r5,r19
  805f70:	100d883a 	mov	r6,r2
  805f74:	080a42c0 	call	80a42c <__muldf3>
  805f78:	180f883a 	mov	r7,r3
  805f7c:	880b883a 	mov	r5,r17
  805f80:	8009883a 	mov	r4,r16
  805f84:	100d883a 	mov	r6,r2
  805f88:	080a3380 	call	80a338 <__subdf3>
  805f8c:	1015883a 	mov	r10,r2
  805f90:	a0800c04 	addi	r2,r20,48
  805f94:	e0800005 	stb	r2,0(fp)
  805f98:	e7000044 	addi	fp,fp,1
  805f9c:	1817883a 	mov	r11,r3
  805fa0:	e57fd61e 	bne	fp,r21,805efc <_dtoa_r+0x5d8>
  805fa4:	500d883a 	mov	r6,r10
  805fa8:	180f883a 	mov	r7,r3
  805fac:	5009883a 	mov	r4,r10
  805fb0:	180b883a 	mov	r5,r3
  805fb4:	080a3b80 	call	80a3b8 <__adddf3>
  805fb8:	100d883a 	mov	r6,r2
  805fbc:	9009883a 	mov	r4,r18
  805fc0:	980b883a 	mov	r5,r19
  805fc4:	180f883a 	mov	r7,r3
  805fc8:	1021883a 	mov	r16,r2
  805fcc:	1823883a 	mov	r17,r3
  805fd0:	080ac680 	call	80ac68 <__ltdf2>
  805fd4:	10000816 	blt	r2,zero,805ff8 <_dtoa_r+0x6d4>
  805fd8:	980b883a 	mov	r5,r19
  805fdc:	800d883a 	mov	r6,r16
  805fe0:	880f883a 	mov	r7,r17
  805fe4:	9009883a 	mov	r4,r18
  805fe8:	080aa480 	call	80aa48 <__eqdf2>
  805fec:	1000171e 	bne	r2,zero,80604c <_dtoa_r+0x728>
  805ff0:	a080004c 	andi	r2,r20,1
  805ff4:	10001526 	beq	r2,zero,80604c <_dtoa_r+0x728>
  805ff8:	d8800d17 	ldw	r2,52(sp)
  805ffc:	d8800415 	stw	r2,16(sp)
  806000:	e009883a 	mov	r4,fp
  806004:	213fffc4 	addi	r4,r4,-1
  806008:	20c00007 	ldb	r3,0(r4)
  80600c:	00800e44 	movi	r2,57
  806010:	1880081e 	bne	r3,r2,806034 <_dtoa_r+0x710>
  806014:	d8800517 	ldw	r2,20(sp)
  806018:	113ffa1e 	bne	r2,r4,806004 <_dtoa_r+0x6e0>
  80601c:	d8c00417 	ldw	r3,16(sp)
  806020:	d9800517 	ldw	r6,20(sp)
  806024:	00800c04 	movi	r2,48
  806028:	18c00044 	addi	r3,r3,1
  80602c:	d8c00415 	stw	r3,16(sp)
  806030:	30800005 	stb	r2,0(r6)
  806034:	20800003 	ldbu	r2,0(r4)
  806038:	d8c00417 	ldw	r3,16(sp)
  80603c:	27000044 	addi	fp,r4,1
  806040:	10800044 	addi	r2,r2,1
  806044:	d8c00d15 	stw	r3,52(sp)
  806048:	20800005 	stb	r2,0(r4)
  80604c:	d9001617 	ldw	r4,88(sp)
  806050:	d9400717 	ldw	r5,28(sp)
  806054:	08078240 	call	807824 <_Bfree>
  806058:	e0000005 	stb	zero,0(fp)
  80605c:	d9800d17 	ldw	r6,52(sp)
  806060:	d8c02717 	ldw	r3,156(sp)
  806064:	d9002917 	ldw	r4,164(sp)
  806068:	30800044 	addi	r2,r6,1
  80606c:	18800015 	stw	r2,0(r3)
  806070:	20029c26 	beq	r4,zero,806ae4 <_dtoa_r+0x11c0>
  806074:	d8c00517 	ldw	r3,20(sp)
  806078:	27000015 	stw	fp,0(r4)
  80607c:	003e5d06 	br	8059f4 <_dtoa_r+0xd0>
  806080:	d9800d17 	ldw	r6,52(sp)
  806084:	00c02074 	movhi	r3,129
  806088:	18c07304 	addi	r3,r3,460
  80608c:	d9001217 	ldw	r4,72(sp)
  806090:	300490fa 	slli	r2,r6,3
  806094:	d9401317 	ldw	r5,76(sp)
  806098:	10c5883a 	add	r2,r2,r3
  80609c:	12000017 	ldw	r8,0(r2)
  8060a0:	12400117 	ldw	r9,4(r2)
  8060a4:	400d883a 	mov	r6,r8
  8060a8:	480f883a 	mov	r7,r9
  8060ac:	080ac680 	call	80ac68 <__ltdf2>
  8060b0:	1000030e 	bge	r2,zero,8060c0 <_dtoa_r+0x79c>
  8060b4:	d8800d17 	ldw	r2,52(sp)
  8060b8:	10bfffc4 	addi	r2,r2,-1
  8060bc:	d8800d15 	stw	r2,52(sp)
  8060c0:	d8000c15 	stw	zero,48(sp)
  8060c4:	003ea806 	br	805b68 <_dtoa_r+0x244>
  8060c8:	d9000b17 	ldw	r4,44(sp)
  8060cc:	202cc03a 	cmpne	r22,r4,zero
  8060d0:	b000c71e 	bne	r22,zero,8063f0 <_dtoa_r+0xacc>
  8060d4:	dc001117 	ldw	r16,68(sp)
  8060d8:	dc801017 	ldw	r18,64(sp)
  8060dc:	0027883a 	mov	r19,zero
  8060e0:	04000b0e 	bge	zero,r16,806110 <_dtoa_r+0x7ec>
  8060e4:	d8c00a17 	ldw	r3,40(sp)
  8060e8:	00c0090e 	bge	zero,r3,806110 <_dtoa_r+0x7ec>
  8060ec:	8005883a 	mov	r2,r16
  8060f0:	1c011316 	blt	r3,r16,806540 <_dtoa_r+0xc1c>
  8060f4:	d9000a17 	ldw	r4,40(sp)
  8060f8:	d9801117 	ldw	r6,68(sp)
  8060fc:	80a1c83a 	sub	r16,r16,r2
  806100:	2089c83a 	sub	r4,r4,r2
  806104:	308dc83a 	sub	r6,r6,r2
  806108:	d9000a15 	stw	r4,40(sp)
  80610c:	d9801115 	stw	r6,68(sp)
  806110:	d8801017 	ldw	r2,64(sp)
  806114:	0080150e 	bge	zero,r2,80616c <_dtoa_r+0x848>
  806118:	d8c00b17 	ldw	r3,44(sp)
  80611c:	1805003a 	cmpeq	r2,r3,zero
  806120:	1001c91e 	bne	r2,zero,806848 <_dtoa_r+0xf24>
  806124:	04800e0e 	bge	zero,r18,806160 <_dtoa_r+0x83c>
  806128:	d9001617 	ldw	r4,88(sp)
  80612c:	980b883a 	mov	r5,r19
  806130:	900d883a 	mov	r6,r18
  806134:	08085d80 	call	8085d8 <__pow5mult>
  806138:	d9001617 	ldw	r4,88(sp)
  80613c:	d9800717 	ldw	r6,28(sp)
  806140:	100b883a 	mov	r5,r2
  806144:	1027883a 	mov	r19,r2
  806148:	08082b40 	call	8082b4 <__multiply>
  80614c:	d9001617 	ldw	r4,88(sp)
  806150:	d9400717 	ldw	r5,28(sp)
  806154:	1023883a 	mov	r17,r2
  806158:	08078240 	call	807824 <_Bfree>
  80615c:	dc400715 	stw	r17,28(sp)
  806160:	d9001017 	ldw	r4,64(sp)
  806164:	248dc83a 	sub	r6,r4,r18
  806168:	30010e1e 	bne	r6,zero,8065a4 <_dtoa_r+0xc80>
  80616c:	d9001617 	ldw	r4,88(sp)
  806170:	04400044 	movi	r17,1
  806174:	880b883a 	mov	r5,r17
  806178:	080849c0 	call	80849c <__i2b>
  80617c:	d9800917 	ldw	r6,36(sp)
  806180:	1025883a 	mov	r18,r2
  806184:	0180040e 	bge	zero,r6,806198 <_dtoa_r+0x874>
  806188:	d9001617 	ldw	r4,88(sp)
  80618c:	100b883a 	mov	r5,r2
  806190:	08085d80 	call	8085d8 <__pow5mult>
  806194:	1025883a 	mov	r18,r2
  806198:	d8801717 	ldw	r2,92(sp)
  80619c:	8880f30e 	bge	r17,r2,80656c <_dtoa_r+0xc48>
  8061a0:	0023883a 	mov	r17,zero
  8061a4:	d9800917 	ldw	r6,36(sp)
  8061a8:	30019e1e 	bne	r6,zero,806824 <_dtoa_r+0xf00>
  8061ac:	00c00044 	movi	r3,1
  8061b0:	d9000a17 	ldw	r4,40(sp)
  8061b4:	20c5883a 	add	r2,r4,r3
  8061b8:	10c007cc 	andi	r3,r2,31
  8061bc:	1800841e 	bne	r3,zero,8063d0 <_dtoa_r+0xaac>
  8061c0:	00800704 	movi	r2,28
  8061c4:	d9000a17 	ldw	r4,40(sp)
  8061c8:	d9801117 	ldw	r6,68(sp)
  8061cc:	80a1883a 	add	r16,r16,r2
  8061d0:	2089883a 	add	r4,r4,r2
  8061d4:	308d883a 	add	r6,r6,r2
  8061d8:	d9000a15 	stw	r4,40(sp)
  8061dc:	d9801115 	stw	r6,68(sp)
  8061e0:	d8801117 	ldw	r2,68(sp)
  8061e4:	0080050e 	bge	zero,r2,8061fc <_dtoa_r+0x8d8>
  8061e8:	d9400717 	ldw	r5,28(sp)
  8061ec:	d9001617 	ldw	r4,88(sp)
  8061f0:	100d883a 	mov	r6,r2
  8061f4:	08081680 	call	808168 <__lshift>
  8061f8:	d8800715 	stw	r2,28(sp)
  8061fc:	d8c00a17 	ldw	r3,40(sp)
  806200:	00c0050e 	bge	zero,r3,806218 <_dtoa_r+0x8f4>
  806204:	d9001617 	ldw	r4,88(sp)
  806208:	900b883a 	mov	r5,r18
  80620c:	180d883a 	mov	r6,r3
  806210:	08081680 	call	808168 <__lshift>
  806214:	1025883a 	mov	r18,r2
  806218:	d9000c17 	ldw	r4,48(sp)
  80621c:	2005003a 	cmpeq	r2,r4,zero
  806220:	10016f26 	beq	r2,zero,8067e0 <_dtoa_r+0xebc>
  806224:	d9000f17 	ldw	r4,60(sp)
  806228:	0102170e 	bge	zero,r4,806a88 <_dtoa_r+0x1164>
  80622c:	d9800b17 	ldw	r6,44(sp)
  806230:	3005003a 	cmpeq	r2,r6,zero
  806234:	1000881e 	bne	r2,zero,806458 <_dtoa_r+0xb34>
  806238:	0400050e 	bge	zero,r16,806250 <_dtoa_r+0x92c>
  80623c:	d9001617 	ldw	r4,88(sp)
  806240:	980b883a 	mov	r5,r19
  806244:	800d883a 	mov	r6,r16
  806248:	08081680 	call	808168 <__lshift>
  80624c:	1027883a 	mov	r19,r2
  806250:	8804c03a 	cmpne	r2,r17,zero
  806254:	1002541e 	bne	r2,zero,806ba8 <_dtoa_r+0x1284>
  806258:	980b883a 	mov	r5,r19
  80625c:	dd800517 	ldw	r22,20(sp)
  806260:	dcc00615 	stw	r19,24(sp)
  806264:	a700004c 	andi	fp,r20,1
  806268:	2827883a 	mov	r19,r5
  80626c:	d9000717 	ldw	r4,28(sp)
  806270:	900b883a 	mov	r5,r18
  806274:	080570c0 	call	80570c <quorem>
  806278:	d9000717 	ldw	r4,28(sp)
  80627c:	d9400617 	ldw	r5,24(sp)
  806280:	1023883a 	mov	r17,r2
  806284:	8dc00c04 	addi	r23,r17,48
  806288:	08079800 	call	807980 <__mcmp>
  80628c:	d9001617 	ldw	r4,88(sp)
  806290:	900b883a 	mov	r5,r18
  806294:	980d883a 	mov	r6,r19
  806298:	1029883a 	mov	r20,r2
  80629c:	0807fdc0 	call	807fdc <__mdiff>
  8062a0:	102b883a 	mov	r21,r2
  8062a4:	10800317 	ldw	r2,12(r2)
  8062a8:	1001281e 	bne	r2,zero,80674c <_dtoa_r+0xe28>
  8062ac:	d9000717 	ldw	r4,28(sp)
  8062b0:	a80b883a 	mov	r5,r21
  8062b4:	08079800 	call	807980 <__mcmp>
  8062b8:	d9001617 	ldw	r4,88(sp)
  8062bc:	1021883a 	mov	r16,r2
  8062c0:	a80b883a 	mov	r5,r21
  8062c4:	08078240 	call	807824 <_Bfree>
  8062c8:	8000041e 	bne	r16,zero,8062dc <_dtoa_r+0x9b8>
  8062cc:	d8801717 	ldw	r2,92(sp)
  8062d0:	1000021e 	bne	r2,zero,8062dc <_dtoa_r+0x9b8>
  8062d4:	e004c03a 	cmpne	r2,fp,zero
  8062d8:	10011726 	beq	r2,zero,806738 <_dtoa_r+0xe14>
  8062dc:	a0010616 	blt	r20,zero,8066f8 <_dtoa_r+0xdd4>
  8062e0:	a000041e 	bne	r20,zero,8062f4 <_dtoa_r+0x9d0>
  8062e4:	d8c01717 	ldw	r3,92(sp)
  8062e8:	1800021e 	bne	r3,zero,8062f4 <_dtoa_r+0x9d0>
  8062ec:	e004c03a 	cmpne	r2,fp,zero
  8062f0:	10010126 	beq	r2,zero,8066f8 <_dtoa_r+0xdd4>
  8062f4:	04023d16 	blt	zero,r16,806bec <_dtoa_r+0x12c8>
  8062f8:	b5c00005 	stb	r23,0(r22)
  8062fc:	d9800517 	ldw	r6,20(sp)
  806300:	d9000f17 	ldw	r4,60(sp)
  806304:	b5800044 	addi	r22,r22,1
  806308:	3105883a 	add	r2,r6,r4
  80630c:	b0806526 	beq	r22,r2,8064a4 <_dtoa_r+0xb80>
  806310:	d9400717 	ldw	r5,28(sp)
  806314:	d9001617 	ldw	r4,88(sp)
  806318:	01800284 	movi	r6,10
  80631c:	000f883a 	mov	r7,zero
  806320:	08084d80 	call	8084d8 <__multadd>
  806324:	d8800715 	stw	r2,28(sp)
  806328:	d8800617 	ldw	r2,24(sp)
  80632c:	14c10c26 	beq	r2,r19,806760 <_dtoa_r+0xe3c>
  806330:	d9400617 	ldw	r5,24(sp)
  806334:	d9001617 	ldw	r4,88(sp)
  806338:	01800284 	movi	r6,10
  80633c:	000f883a 	mov	r7,zero
  806340:	08084d80 	call	8084d8 <__multadd>
  806344:	d9001617 	ldw	r4,88(sp)
  806348:	980b883a 	mov	r5,r19
  80634c:	01800284 	movi	r6,10
  806350:	000f883a 	mov	r7,zero
  806354:	d8800615 	stw	r2,24(sp)
  806358:	08084d80 	call	8084d8 <__multadd>
  80635c:	1027883a 	mov	r19,r2
  806360:	003fc206 	br	80626c <_dtoa_r+0x948>
  806364:	2445c83a 	sub	r2,r4,r17
  806368:	a088983a 	sll	r4,r20,r2
  80636c:	003e4b06 	br	805c9c <_dtoa_r+0x378>
  806370:	01bfffc4 	movi	r6,-1
  806374:	00800044 	movi	r2,1
  806378:	d9800e15 	stw	r6,56(sp)
  80637c:	d9800f15 	stw	r6,60(sp)
  806380:	d8800b15 	stw	r2,44(sp)
  806384:	d8c01617 	ldw	r3,88(sp)
  806388:	008005c4 	movi	r2,23
  80638c:	18001115 	stw	zero,68(r3)
  806390:	1580082e 	bgeu	r2,r22,8063b4 <_dtoa_r+0xa90>
  806394:	00c00104 	movi	r3,4
  806398:	0009883a 	mov	r4,zero
  80639c:	18c7883a 	add	r3,r3,r3
  8063a0:	18800504 	addi	r2,r3,20
  8063a4:	21000044 	addi	r4,r4,1
  8063a8:	b0bffc2e 	bgeu	r22,r2,80639c <_dtoa_r+0xa78>
  8063ac:	d9801617 	ldw	r6,88(sp)
  8063b0:	31001115 	stw	r4,68(r6)
  8063b4:	dc000f17 	ldw	r16,60(sp)
  8063b8:	003e4b06 	br	805ce8 <_dtoa_r+0x3c4>
  8063bc:	d9801717 	ldw	r6,92(sp)
  8063c0:	0023883a 	mov	r17,zero
  8063c4:	31bfff04 	addi	r6,r6,-4
  8063c8:	d9801715 	stw	r6,92(sp)
  8063cc:	003df806 	br	805bb0 <_dtoa_r+0x28c>
  8063d0:	00800804 	movi	r2,32
  8063d4:	10c9c83a 	sub	r4,r2,r3
  8063d8:	00c00104 	movi	r3,4
  8063dc:	19005a16 	blt	r3,r4,806548 <_dtoa_r+0xc24>
  8063e0:	008000c4 	movi	r2,3
  8063e4:	113f7e16 	blt	r2,r4,8061e0 <_dtoa_r+0x8bc>
  8063e8:	20800704 	addi	r2,r4,28
  8063ec:	003f7506 	br	8061c4 <_dtoa_r+0x8a0>
  8063f0:	d9801717 	ldw	r6,92(sp)
  8063f4:	00800044 	movi	r2,1
  8063f8:	1180a10e 	bge	r2,r6,806680 <_dtoa_r+0xd5c>
  8063fc:	d9800f17 	ldw	r6,60(sp)
  806400:	d8c01017 	ldw	r3,64(sp)
  806404:	30bfffc4 	addi	r2,r6,-1
  806408:	1881c616 	blt	r3,r2,806b24 <_dtoa_r+0x1200>
  80640c:	18a5c83a 	sub	r18,r3,r2
  806410:	d8800f17 	ldw	r2,60(sp)
  806414:	10026216 	blt	r2,zero,806da0 <_dtoa_r+0x147c>
  806418:	dc001117 	ldw	r16,68(sp)
  80641c:	1007883a 	mov	r3,r2
  806420:	d9800a17 	ldw	r6,40(sp)
  806424:	d8801117 	ldw	r2,68(sp)
  806428:	d9001617 	ldw	r4,88(sp)
  80642c:	30cd883a 	add	r6,r6,r3
  806430:	10c5883a 	add	r2,r2,r3
  806434:	01400044 	movi	r5,1
  806438:	d9800a15 	stw	r6,40(sp)
  80643c:	d8801115 	stw	r2,68(sp)
  806440:	080849c0 	call	80849c <__i2b>
  806444:	1027883a 	mov	r19,r2
  806448:	003f2506 	br	8060e0 <_dtoa_r+0x7bc>
  80644c:	00c02074 	movhi	r3,129
  806450:	18ffb504 	addi	r3,r3,-300
  806454:	003d6706 	br	8059f4 <_dtoa_r+0xd0>
  806458:	dd800517 	ldw	r22,20(sp)
  80645c:	04000044 	movi	r16,1
  806460:	00000706 	br	806480 <_dtoa_r+0xb5c>
  806464:	d9400717 	ldw	r5,28(sp)
  806468:	d9001617 	ldw	r4,88(sp)
  80646c:	01800284 	movi	r6,10
  806470:	000f883a 	mov	r7,zero
  806474:	08084d80 	call	8084d8 <__multadd>
  806478:	d8800715 	stw	r2,28(sp)
  80647c:	84000044 	addi	r16,r16,1
  806480:	d9000717 	ldw	r4,28(sp)
  806484:	900b883a 	mov	r5,r18
  806488:	080570c0 	call	80570c <quorem>
  80648c:	15c00c04 	addi	r23,r2,48
  806490:	b5c00005 	stb	r23,0(r22)
  806494:	d8c00f17 	ldw	r3,60(sp)
  806498:	b5800044 	addi	r22,r22,1
  80649c:	80fff116 	blt	r16,r3,806464 <_dtoa_r+0xb40>
  8064a0:	d8000615 	stw	zero,24(sp)
  8064a4:	d9400717 	ldw	r5,28(sp)
  8064a8:	d9001617 	ldw	r4,88(sp)
  8064ac:	01800044 	movi	r6,1
  8064b0:	08081680 	call	808168 <__lshift>
  8064b4:	1009883a 	mov	r4,r2
  8064b8:	900b883a 	mov	r5,r18
  8064bc:	d8800715 	stw	r2,28(sp)
  8064c0:	08079800 	call	807980 <__mcmp>
  8064c4:	00803c0e 	bge	zero,r2,8065b8 <_dtoa_r+0xc94>
  8064c8:	b009883a 	mov	r4,r22
  8064cc:	213fffc4 	addi	r4,r4,-1
  8064d0:	21400003 	ldbu	r5,0(r4)
  8064d4:	00800e44 	movi	r2,57
  8064d8:	28c03fcc 	andi	r3,r5,255
  8064dc:	18c0201c 	xori	r3,r3,128
  8064e0:	18ffe004 	addi	r3,r3,-128
  8064e4:	1881981e 	bne	r3,r2,806b48 <_dtoa_r+0x1224>
  8064e8:	d9800517 	ldw	r6,20(sp)
  8064ec:	21bff71e 	bne	r4,r6,8064cc <_dtoa_r+0xba8>
  8064f0:	d8800d17 	ldw	r2,52(sp)
  8064f4:	37000044 	addi	fp,r6,1
  8064f8:	10800044 	addi	r2,r2,1
  8064fc:	d8800d15 	stw	r2,52(sp)
  806500:	00800c44 	movi	r2,49
  806504:	30800005 	stb	r2,0(r6)
  806508:	d9001617 	ldw	r4,88(sp)
  80650c:	900b883a 	mov	r5,r18
  806510:	08078240 	call	807824 <_Bfree>
  806514:	983ecd26 	beq	r19,zero,80604c <_dtoa_r+0x728>
  806518:	d8c00617 	ldw	r3,24(sp)
  80651c:	18000426 	beq	r3,zero,806530 <_dtoa_r+0xc0c>
  806520:	1cc00326 	beq	r3,r19,806530 <_dtoa_r+0xc0c>
  806524:	d9001617 	ldw	r4,88(sp)
  806528:	180b883a 	mov	r5,r3
  80652c:	08078240 	call	807824 <_Bfree>
  806530:	d9001617 	ldw	r4,88(sp)
  806534:	980b883a 	mov	r5,r19
  806538:	08078240 	call	807824 <_Bfree>
  80653c:	003ec306 	br	80604c <_dtoa_r+0x728>
  806540:	1805883a 	mov	r2,r3
  806544:	003eeb06 	br	8060f4 <_dtoa_r+0x7d0>
  806548:	d9800a17 	ldw	r6,40(sp)
  80654c:	d8c01117 	ldw	r3,68(sp)
  806550:	20bfff04 	addi	r2,r4,-4
  806554:	308d883a 	add	r6,r6,r2
  806558:	1887883a 	add	r3,r3,r2
  80655c:	80a1883a 	add	r16,r16,r2
  806560:	d9800a15 	stw	r6,40(sp)
  806564:	d8c01115 	stw	r3,68(sp)
  806568:	003f1d06 	br	8061e0 <_dtoa_r+0x8bc>
  80656c:	a03f0c1e 	bne	r20,zero,8061a0 <_dtoa_r+0x87c>
  806570:	00800434 	movhi	r2,16
  806574:	10bfffc4 	addi	r2,r2,-1
  806578:	a884703a 	and	r2,r21,r2
  80657c:	103f081e 	bne	r2,zero,8061a0 <_dtoa_r+0x87c>
  806580:	a89ffc2c 	andhi	r2,r21,32752
  806584:	103f0626 	beq	r2,zero,8061a0 <_dtoa_r+0x87c>
  806588:	d8c01117 	ldw	r3,68(sp)
  80658c:	d9000a17 	ldw	r4,40(sp)
  806590:	18c00044 	addi	r3,r3,1
  806594:	21000044 	addi	r4,r4,1
  806598:	d8c01115 	stw	r3,68(sp)
  80659c:	d9000a15 	stw	r4,40(sp)
  8065a0:	003f0006 	br	8061a4 <_dtoa_r+0x880>
  8065a4:	d9400717 	ldw	r5,28(sp)
  8065a8:	d9001617 	ldw	r4,88(sp)
  8065ac:	08085d80 	call	8085d8 <__pow5mult>
  8065b0:	d8800715 	stw	r2,28(sp)
  8065b4:	003eed06 	br	80616c <_dtoa_r+0x848>
  8065b8:	1000021e 	bne	r2,zero,8065c4 <_dtoa_r+0xca0>
  8065bc:	b880004c 	andi	r2,r23,1
  8065c0:	103fc11e 	bne	r2,zero,8064c8 <_dtoa_r+0xba4>
  8065c4:	b5bfffc4 	addi	r22,r22,-1
  8065c8:	b0c00007 	ldb	r3,0(r22)
  8065cc:	00800c04 	movi	r2,48
  8065d0:	18bffc26 	beq	r3,r2,8065c4 <_dtoa_r+0xca0>
  8065d4:	b7000044 	addi	fp,r22,1
  8065d8:	003fcb06 	br	806508 <_dtoa_r+0xbe4>
  8065dc:	d9800d17 	ldw	r6,52(sp)
  8065e0:	018fc83a 	sub	r7,zero,r6
  8065e4:	3801f726 	beq	r7,zero,806dc4 <_dtoa_r+0x14a0>
  8065e8:	398003cc 	andi	r6,r7,15
  8065ec:	300c90fa 	slli	r6,r6,3
  8065f0:	01402074 	movhi	r5,129
  8065f4:	29407304 	addi	r5,r5,460
  8065f8:	d9001217 	ldw	r4,72(sp)
  8065fc:	314d883a 	add	r6,r6,r5
  806600:	30c00117 	ldw	r3,4(r6)
  806604:	30800017 	ldw	r2,0(r6)
  806608:	d9401317 	ldw	r5,76(sp)
  80660c:	3821d13a 	srai	r16,r7,4
  806610:	100d883a 	mov	r6,r2
  806614:	180f883a 	mov	r7,r3
  806618:	080a42c0 	call	80a42c <__muldf3>
  80661c:	1011883a 	mov	r8,r2
  806620:	1813883a 	mov	r9,r3
  806624:	1029883a 	mov	r20,r2
  806628:	182b883a 	mov	r21,r3
  80662c:	8001e526 	beq	r16,zero,806dc4 <_dtoa_r+0x14a0>
  806630:	05800084 	movi	r22,2
  806634:	04402074 	movhi	r17,129
  806638:	8c40a504 	addi	r17,r17,660
  80663c:	8080004c 	andi	r2,r16,1
  806640:	1005003a 	cmpeq	r2,r2,zero
  806644:	1000081e 	bne	r2,zero,806668 <_dtoa_r+0xd44>
  806648:	89800017 	ldw	r6,0(r17)
  80664c:	89c00117 	ldw	r7,4(r17)
  806650:	480b883a 	mov	r5,r9
  806654:	4009883a 	mov	r4,r8
  806658:	080a42c0 	call	80a42c <__muldf3>
  80665c:	1011883a 	mov	r8,r2
  806660:	b5800044 	addi	r22,r22,1
  806664:	1813883a 	mov	r9,r3
  806668:	8021d07a 	srai	r16,r16,1
  80666c:	8c400204 	addi	r17,r17,8
  806670:	803ff21e 	bne	r16,zero,80663c <_dtoa_r+0xd18>
  806674:	4029883a 	mov	r20,r8
  806678:	482b883a 	mov	r21,r9
  80667c:	003dca06 	br	805da8 <_dtoa_r+0x484>
  806680:	d9000817 	ldw	r4,32(sp)
  806684:	2005003a 	cmpeq	r2,r4,zero
  806688:	1001f61e 	bne	r2,zero,806e64 <_dtoa_r+0x1540>
  80668c:	dc001117 	ldw	r16,68(sp)
  806690:	dc801017 	ldw	r18,64(sp)
  806694:	18c10cc4 	addi	r3,r3,1075
  806698:	003f6106 	br	806420 <_dtoa_r+0xafc>
  80669c:	d8000b15 	stw	zero,44(sp)
  8066a0:	d9802617 	ldw	r6,152(sp)
  8066a4:	d8c00d17 	ldw	r3,52(sp)
  8066a8:	30800044 	addi	r2,r6,1
  8066ac:	18ad883a 	add	r22,r3,r2
  8066b0:	b13fffc4 	addi	r4,r22,-1
  8066b4:	d9000e15 	stw	r4,56(sp)
  8066b8:	0581f60e 	bge	zero,r22,806e94 <_dtoa_r+0x1570>
  8066bc:	dd800f15 	stw	r22,60(sp)
  8066c0:	003f3006 	br	806384 <_dtoa_r+0xa60>
  8066c4:	d8000b15 	stw	zero,44(sp)
  8066c8:	d9002617 	ldw	r4,152(sp)
  8066cc:	0101eb0e 	bge	zero,r4,806e7c <_dtoa_r+0x1558>
  8066d0:	202d883a 	mov	r22,r4
  8066d4:	d9000e15 	stw	r4,56(sp)
  8066d8:	d9000f15 	stw	r4,60(sp)
  8066dc:	003f2906 	br	806384 <_dtoa_r+0xa60>
  8066e0:	01800044 	movi	r6,1
  8066e4:	d9800b15 	stw	r6,44(sp)
  8066e8:	003ff706 	br	8066c8 <_dtoa_r+0xda4>
  8066ec:	01000044 	movi	r4,1
  8066f0:	d9000b15 	stw	r4,44(sp)
  8066f4:	003fea06 	br	8066a0 <_dtoa_r+0xd7c>
  8066f8:	04000c0e 	bge	zero,r16,80672c <_dtoa_r+0xe08>
  8066fc:	d9400717 	ldw	r5,28(sp)
  806700:	d9001617 	ldw	r4,88(sp)
  806704:	01800044 	movi	r6,1
  806708:	08081680 	call	808168 <__lshift>
  80670c:	1009883a 	mov	r4,r2
  806710:	900b883a 	mov	r5,r18
  806714:	d8800715 	stw	r2,28(sp)
  806718:	08079800 	call	807980 <__mcmp>
  80671c:	0081e00e 	bge	zero,r2,806ea0 <_dtoa_r+0x157c>
  806720:	bdc00044 	addi	r23,r23,1
  806724:	00800e84 	movi	r2,58
  806728:	b881a226 	beq	r23,r2,806db4 <_dtoa_r+0x1490>
  80672c:	b7000044 	addi	fp,r22,1
  806730:	b5c00005 	stb	r23,0(r22)
  806734:	003f7406 	br	806508 <_dtoa_r+0xbe4>
  806738:	00800e44 	movi	r2,57
  80673c:	b8819d26 	beq	r23,r2,806db4 <_dtoa_r+0x1490>
  806740:	053ffa0e 	bge	zero,r20,80672c <_dtoa_r+0xe08>
  806744:	8dc00c44 	addi	r23,r17,49
  806748:	003ff806 	br	80672c <_dtoa_r+0xe08>
  80674c:	d9001617 	ldw	r4,88(sp)
  806750:	a80b883a 	mov	r5,r21
  806754:	04000044 	movi	r16,1
  806758:	08078240 	call	807824 <_Bfree>
  80675c:	003edf06 	br	8062dc <_dtoa_r+0x9b8>
  806760:	d9001617 	ldw	r4,88(sp)
  806764:	980b883a 	mov	r5,r19
  806768:	01800284 	movi	r6,10
  80676c:	000f883a 	mov	r7,zero
  806770:	08084d80 	call	8084d8 <__multadd>
  806774:	1027883a 	mov	r19,r2
  806778:	d8800615 	stw	r2,24(sp)
  80677c:	003ebb06 	br	80626c <_dtoa_r+0x948>
  806780:	d9801117 	ldw	r6,68(sp)
  806784:	d8800d17 	ldw	r2,52(sp)
  806788:	d8000915 	stw	zero,36(sp)
  80678c:	308dc83a 	sub	r6,r6,r2
  806790:	0087c83a 	sub	r3,zero,r2
  806794:	d9801115 	stw	r6,68(sp)
  806798:	d8c01015 	stw	r3,64(sp)
  80679c:	003cfe06 	br	805b98 <_dtoa_r+0x274>
  8067a0:	018dc83a 	sub	r6,zero,r6
  8067a4:	d9801115 	stw	r6,68(sp)
  8067a8:	d8000a15 	stw	zero,40(sp)
  8067ac:	003cf306 	br	805b7c <_dtoa_r+0x258>
  8067b0:	d9000d17 	ldw	r4,52(sp)
  8067b4:	080acf00 	call	80acf0 <__floatsidf>
  8067b8:	880b883a 	mov	r5,r17
  8067bc:	8009883a 	mov	r4,r16
  8067c0:	180f883a 	mov	r7,r3
  8067c4:	100d883a 	mov	r6,r2
  8067c8:	080aad00 	call	80aad0 <__nedf2>
  8067cc:	103ce126 	beq	r2,zero,805b54 <_dtoa_r+0x230>
  8067d0:	d9800d17 	ldw	r6,52(sp)
  8067d4:	31bfffc4 	addi	r6,r6,-1
  8067d8:	d9800d15 	stw	r6,52(sp)
  8067dc:	003cdd06 	br	805b54 <_dtoa_r+0x230>
  8067e0:	d9000717 	ldw	r4,28(sp)
  8067e4:	900b883a 	mov	r5,r18
  8067e8:	08079800 	call	807980 <__mcmp>
  8067ec:	103e8d0e 	bge	r2,zero,806224 <_dtoa_r+0x900>
  8067f0:	d9400717 	ldw	r5,28(sp)
  8067f4:	d9001617 	ldw	r4,88(sp)
  8067f8:	01800284 	movi	r6,10
  8067fc:	000f883a 	mov	r7,zero
  806800:	08084d80 	call	8084d8 <__multadd>
  806804:	d9800d17 	ldw	r6,52(sp)
  806808:	d8800715 	stw	r2,28(sp)
  80680c:	31bfffc4 	addi	r6,r6,-1
  806810:	d9800d15 	stw	r6,52(sp)
  806814:	b001a71e 	bne	r22,zero,806eb4 <_dtoa_r+0x1590>
  806818:	d8800e17 	ldw	r2,56(sp)
  80681c:	d8800f15 	stw	r2,60(sp)
  806820:	003e8006 	br	806224 <_dtoa_r+0x900>
  806824:	90800417 	ldw	r2,16(r18)
  806828:	1085883a 	add	r2,r2,r2
  80682c:	1085883a 	add	r2,r2,r2
  806830:	1485883a 	add	r2,r2,r18
  806834:	11000417 	ldw	r4,16(r2)
  806838:	080784c0 	call	80784c <__hi0bits>
  80683c:	00c00804 	movi	r3,32
  806840:	1887c83a 	sub	r3,r3,r2
  806844:	003e5a06 	br	8061b0 <_dtoa_r+0x88c>
  806848:	d9400717 	ldw	r5,28(sp)
  80684c:	d9801017 	ldw	r6,64(sp)
  806850:	d9001617 	ldw	r4,88(sp)
  806854:	08085d80 	call	8085d8 <__pow5mult>
  806858:	d8800715 	stw	r2,28(sp)
  80685c:	003e4306 	br	80616c <_dtoa_r+0x848>
  806860:	d9800f17 	ldw	r6,60(sp)
  806864:	d8800d17 	ldw	r2,52(sp)
  806868:	d9800315 	stw	r6,12(sp)
  80686c:	d8800415 	stw	r2,16(sp)
  806870:	d8c00b17 	ldw	r3,44(sp)
  806874:	1805003a 	cmpeq	r2,r3,zero
  806878:	1000e21e 	bne	r2,zero,806c04 <_dtoa_r+0x12e0>
  80687c:	d9000317 	ldw	r4,12(sp)
  806880:	0005883a 	mov	r2,zero
  806884:	00cff834 	movhi	r3,16352
  806888:	200c90fa 	slli	r6,r4,3
  80688c:	01002074 	movhi	r4,129
  806890:	21007304 	addi	r4,r4,460
  806894:	180b883a 	mov	r5,r3
  806898:	310d883a 	add	r6,r6,r4
  80689c:	327fff17 	ldw	r9,-4(r6)
  8068a0:	323ffe17 	ldw	r8,-8(r6)
  8068a4:	1009883a 	mov	r4,r2
  8068a8:	480f883a 	mov	r7,r9
  8068ac:	400d883a 	mov	r6,r8
  8068b0:	080a7f00 	call	80a7f0 <__divdf3>
  8068b4:	180b883a 	mov	r5,r3
  8068b8:	b00d883a 	mov	r6,r22
  8068bc:	b80f883a 	mov	r7,r23
  8068c0:	1009883a 	mov	r4,r2
  8068c4:	080a3380 	call	80a338 <__subdf3>
  8068c8:	a80b883a 	mov	r5,r21
  8068cc:	a009883a 	mov	r4,r20
  8068d0:	d8c01915 	stw	r3,100(sp)
  8068d4:	d8801815 	stw	r2,96(sp)
  8068d8:	080ade80 	call	80ade8 <__fixdfsi>
  8068dc:	1009883a 	mov	r4,r2
  8068e0:	1027883a 	mov	r19,r2
  8068e4:	080acf00 	call	80acf0 <__floatsidf>
  8068e8:	a80b883a 	mov	r5,r21
  8068ec:	a009883a 	mov	r4,r20
  8068f0:	180f883a 	mov	r7,r3
  8068f4:	100d883a 	mov	r6,r2
  8068f8:	080a3380 	call	80a338 <__subdf3>
  8068fc:	d9801817 	ldw	r6,96(sp)
  806900:	1823883a 	mov	r17,r3
  806904:	d8801415 	stw	r2,80(sp)
  806908:	302d883a 	mov	r22,r6
  80690c:	d9800517 	ldw	r6,20(sp)
  806910:	9cc00c04 	addi	r19,r19,48
  806914:	dc401515 	stw	r17,84(sp)
  806918:	d8c01917 	ldw	r3,100(sp)
  80691c:	34c00005 	stb	r19,0(r6)
  806920:	d8800517 	ldw	r2,20(sp)
  806924:	d9401917 	ldw	r5,100(sp)
  806928:	d9801417 	ldw	r6,80(sp)
  80692c:	b009883a 	mov	r4,r22
  806930:	880f883a 	mov	r7,r17
  806934:	182f883a 	mov	r23,r3
  806938:	17000044 	addi	fp,r2,1
  80693c:	080ab580 	call	80ab58 <__gtdf2>
  806940:	00804e16 	blt	zero,r2,806a7c <_dtoa_r+0x1158>
  806944:	d9801417 	ldw	r6,80(sp)
  806948:	0005883a 	mov	r2,zero
  80694c:	00cffc34 	movhi	r3,16368
  806950:	180b883a 	mov	r5,r3
  806954:	880f883a 	mov	r7,r17
  806958:	1009883a 	mov	r4,r2
  80695c:	080a3380 	call	80a338 <__subdf3>
  806960:	d9401917 	ldw	r5,100(sp)
  806964:	180f883a 	mov	r7,r3
  806968:	b009883a 	mov	r4,r22
  80696c:	100d883a 	mov	r6,r2
  806970:	080ab580 	call	80ab58 <__gtdf2>
  806974:	00bda216 	blt	zero,r2,806000 <_dtoa_r+0x6dc>
  806978:	d8c00317 	ldw	r3,12(sp)
  80697c:	00800044 	movi	r2,1
  806980:	10c01216 	blt	r2,r3,8069cc <_dtoa_r+0x10a8>
  806984:	003d4506 	br	805e9c <_dtoa_r+0x578>
  806988:	d9801417 	ldw	r6,80(sp)
  80698c:	0005883a 	mov	r2,zero
  806990:	00cffc34 	movhi	r3,16368
  806994:	180b883a 	mov	r5,r3
  806998:	880f883a 	mov	r7,r17
  80699c:	1009883a 	mov	r4,r2
  8069a0:	080a3380 	call	80a338 <__subdf3>
  8069a4:	d9c01b17 	ldw	r7,108(sp)
  8069a8:	180b883a 	mov	r5,r3
  8069ac:	1009883a 	mov	r4,r2
  8069b0:	b00d883a 	mov	r6,r22
  8069b4:	080ac680 	call	80ac68 <__ltdf2>
  8069b8:	103d9116 	blt	r2,zero,806000 <_dtoa_r+0x6dc>
  8069bc:	d9800517 	ldw	r6,20(sp)
  8069c0:	d9000317 	ldw	r4,12(sp)
  8069c4:	3105883a 	add	r2,r6,r4
  8069c8:	e0bd3426 	beq	fp,r2,805e9c <_dtoa_r+0x578>
  8069cc:	04500934 	movhi	r17,16420
  8069d0:	0021883a 	mov	r16,zero
  8069d4:	b80b883a 	mov	r5,r23
  8069d8:	b009883a 	mov	r4,r22
  8069dc:	800d883a 	mov	r6,r16
  8069e0:	880f883a 	mov	r7,r17
  8069e4:	080a42c0 	call	80a42c <__muldf3>
  8069e8:	d9401517 	ldw	r5,84(sp)
  8069ec:	d9001417 	ldw	r4,80(sp)
  8069f0:	880f883a 	mov	r7,r17
  8069f4:	000d883a 	mov	r6,zero
  8069f8:	d8801a15 	stw	r2,104(sp)
  8069fc:	d8c01b15 	stw	r3,108(sp)
  806a00:	080a42c0 	call	80a42c <__muldf3>
  806a04:	180b883a 	mov	r5,r3
  806a08:	1009883a 	mov	r4,r2
  806a0c:	1823883a 	mov	r17,r3
  806a10:	1021883a 	mov	r16,r2
  806a14:	080ade80 	call	80ade8 <__fixdfsi>
  806a18:	1009883a 	mov	r4,r2
  806a1c:	102b883a 	mov	r21,r2
  806a20:	080acf00 	call	80acf0 <__floatsidf>
  806a24:	880b883a 	mov	r5,r17
  806a28:	8009883a 	mov	r4,r16
  806a2c:	180f883a 	mov	r7,r3
  806a30:	100d883a 	mov	r6,r2
  806a34:	080a3380 	call	80a338 <__subdf3>
  806a38:	1021883a 	mov	r16,r2
  806a3c:	d9001b17 	ldw	r4,108(sp)
  806a40:	1823883a 	mov	r17,r3
  806a44:	dc001415 	stw	r16,80(sp)
  806a48:	ad400c04 	addi	r21,r21,48
  806a4c:	dc401515 	stw	r17,84(sp)
  806a50:	d8801a17 	ldw	r2,104(sp)
  806a54:	e5400005 	stb	r21,0(fp)
  806a58:	202f883a 	mov	r23,r4
  806a5c:	d9c01b17 	ldw	r7,108(sp)
  806a60:	d9001417 	ldw	r4,80(sp)
  806a64:	880b883a 	mov	r5,r17
  806a68:	100d883a 	mov	r6,r2
  806a6c:	102d883a 	mov	r22,r2
  806a70:	e7000044 	addi	fp,fp,1
  806a74:	080ac680 	call	80ac68 <__ltdf2>
  806a78:	103fc30e 	bge	r2,zero,806988 <_dtoa_r+0x1064>
  806a7c:	d9000417 	ldw	r4,16(sp)
  806a80:	d9000d15 	stw	r4,52(sp)
  806a84:	003d7106 	br	80604c <_dtoa_r+0x728>
  806a88:	d9801717 	ldw	r6,92(sp)
  806a8c:	00800084 	movi	r2,2
  806a90:	11bde60e 	bge	r2,r6,80622c <_dtoa_r+0x908>
  806a94:	203cfb1e 	bne	r4,zero,805e84 <_dtoa_r+0x560>
  806a98:	d9001617 	ldw	r4,88(sp)
  806a9c:	900b883a 	mov	r5,r18
  806aa0:	01800144 	movi	r6,5
  806aa4:	000f883a 	mov	r7,zero
  806aa8:	08084d80 	call	8084d8 <__multadd>
  806aac:	d9000717 	ldw	r4,28(sp)
  806ab0:	100b883a 	mov	r5,r2
  806ab4:	1025883a 	mov	r18,r2
  806ab8:	08079800 	call	807980 <__mcmp>
  806abc:	00bcf10e 	bge	zero,r2,805e84 <_dtoa_r+0x560>
  806ac0:	d8c00d17 	ldw	r3,52(sp)
  806ac4:	d9000517 	ldw	r4,20(sp)
  806ac8:	d8000615 	stw	zero,24(sp)
  806acc:	18c00044 	addi	r3,r3,1
  806ad0:	d8c00d15 	stw	r3,52(sp)
  806ad4:	00800c44 	movi	r2,49
  806ad8:	27000044 	addi	fp,r4,1
  806adc:	20800005 	stb	r2,0(r4)
  806ae0:	003e8906 	br	806508 <_dtoa_r+0xbe4>
  806ae4:	d8c00517 	ldw	r3,20(sp)
  806ae8:	003bc206 	br	8059f4 <_dtoa_r+0xd0>
  806aec:	01802074 	movhi	r6,129
  806af0:	3180a504 	addi	r6,r6,660
  806af4:	30c00917 	ldw	r3,36(r6)
  806af8:	30800817 	ldw	r2,32(r6)
  806afc:	d9001217 	ldw	r4,72(sp)
  806b00:	d9401317 	ldw	r5,76(sp)
  806b04:	180f883a 	mov	r7,r3
  806b08:	100d883a 	mov	r6,r2
  806b0c:	080a7f00 	call	80a7f0 <__divdf3>
  806b10:	948003cc 	andi	r18,r18,15
  806b14:	058000c4 	movi	r22,3
  806b18:	1029883a 	mov	r20,r2
  806b1c:	182b883a 	mov	r21,r3
  806b20:	003c8906 	br	805d48 <_dtoa_r+0x424>
  806b24:	d9001017 	ldw	r4,64(sp)
  806b28:	d9800917 	ldw	r6,36(sp)
  806b2c:	0025883a 	mov	r18,zero
  806b30:	1105c83a 	sub	r2,r2,r4
  806b34:	2089883a 	add	r4,r4,r2
  806b38:	308d883a 	add	r6,r6,r2
  806b3c:	d9001015 	stw	r4,64(sp)
  806b40:	d9800915 	stw	r6,36(sp)
  806b44:	003e3206 	br	806410 <_dtoa_r+0xaec>
  806b48:	28800044 	addi	r2,r5,1
  806b4c:	27000044 	addi	fp,r4,1
  806b50:	20800005 	stb	r2,0(r4)
  806b54:	003e6c06 	br	806508 <_dtoa_r+0xbe4>
  806b58:	d8800f17 	ldw	r2,60(sp)
  806b5c:	00bce016 	blt	zero,r2,805ee0 <_dtoa_r+0x5bc>
  806b60:	d9800f17 	ldw	r6,60(sp)
  806b64:	303cc51e 	bne	r6,zero,805e7c <_dtoa_r+0x558>
  806b68:	0005883a 	mov	r2,zero
  806b6c:	00d00534 	movhi	r3,16404
  806b70:	980b883a 	mov	r5,r19
  806b74:	180f883a 	mov	r7,r3
  806b78:	9009883a 	mov	r4,r18
  806b7c:	100d883a 	mov	r6,r2
  806b80:	080a42c0 	call	80a42c <__muldf3>
  806b84:	180b883a 	mov	r5,r3
  806b88:	a80f883a 	mov	r7,r21
  806b8c:	1009883a 	mov	r4,r2
  806b90:	a00d883a 	mov	r6,r20
  806b94:	080abe00 	call	80abe0 <__gedf2>
  806b98:	103cb80e 	bge	r2,zero,805e7c <_dtoa_r+0x558>
  806b9c:	0027883a 	mov	r19,zero
  806ba0:	0025883a 	mov	r18,zero
  806ba4:	003fc606 	br	806ac0 <_dtoa_r+0x119c>
  806ba8:	99400117 	ldw	r5,4(r19)
  806bac:	d9001617 	ldw	r4,88(sp)
  806bb0:	0807da40 	call	807da4 <_Balloc>
  806bb4:	99800417 	ldw	r6,16(r19)
  806bb8:	11000304 	addi	r4,r2,12
  806bbc:	99400304 	addi	r5,r19,12
  806bc0:	318d883a 	add	r6,r6,r6
  806bc4:	318d883a 	add	r6,r6,r6
  806bc8:	31800204 	addi	r6,r6,8
  806bcc:	1023883a 	mov	r17,r2
  806bd0:	08076a40 	call	8076a4 <memcpy>
  806bd4:	d9001617 	ldw	r4,88(sp)
  806bd8:	880b883a 	mov	r5,r17
  806bdc:	01800044 	movi	r6,1
  806be0:	08081680 	call	808168 <__lshift>
  806be4:	100b883a 	mov	r5,r2
  806be8:	003d9c06 	br	80625c <_dtoa_r+0x938>
  806bec:	00800e44 	movi	r2,57
  806bf0:	b8807026 	beq	r23,r2,806db4 <_dtoa_r+0x1490>
  806bf4:	b8800044 	addi	r2,r23,1
  806bf8:	b7000044 	addi	fp,r22,1
  806bfc:	b0800005 	stb	r2,0(r22)
  806c00:	003e4106 	br	806508 <_dtoa_r+0xbe4>
  806c04:	d8800317 	ldw	r2,12(sp)
  806c08:	01802074 	movhi	r6,129
  806c0c:	31807304 	addi	r6,r6,460
  806c10:	b009883a 	mov	r4,r22
  806c14:	100e90fa 	slli	r7,r2,3
  806c18:	b80b883a 	mov	r5,r23
  806c1c:	398f883a 	add	r7,r7,r6
  806c20:	38bffe17 	ldw	r2,-8(r7)
  806c24:	d9800517 	ldw	r6,20(sp)
  806c28:	38ffff17 	ldw	r3,-4(r7)
  806c2c:	37000044 	addi	fp,r6,1
  806c30:	180f883a 	mov	r7,r3
  806c34:	100d883a 	mov	r6,r2
  806c38:	080a42c0 	call	80a42c <__muldf3>
  806c3c:	a80b883a 	mov	r5,r21
  806c40:	a009883a 	mov	r4,r20
  806c44:	182f883a 	mov	r23,r3
  806c48:	102d883a 	mov	r22,r2
  806c4c:	080ade80 	call	80ade8 <__fixdfsi>
  806c50:	1009883a 	mov	r4,r2
  806c54:	1027883a 	mov	r19,r2
  806c58:	080acf00 	call	80acf0 <__floatsidf>
  806c5c:	a80b883a 	mov	r5,r21
  806c60:	a009883a 	mov	r4,r20
  806c64:	180f883a 	mov	r7,r3
  806c68:	100d883a 	mov	r6,r2
  806c6c:	080a3380 	call	80a338 <__subdf3>
  806c70:	180b883a 	mov	r5,r3
  806c74:	d8c00517 	ldw	r3,20(sp)
  806c78:	9cc00c04 	addi	r19,r19,48
  806c7c:	1009883a 	mov	r4,r2
  806c80:	1cc00005 	stb	r19,0(r3)
  806c84:	2021883a 	mov	r16,r4
  806c88:	d9000317 	ldw	r4,12(sp)
  806c8c:	00800044 	movi	r2,1
  806c90:	2823883a 	mov	r17,r5
  806c94:	20802226 	beq	r4,r2,806d20 <_dtoa_r+0x13fc>
  806c98:	1029883a 	mov	r20,r2
  806c9c:	0005883a 	mov	r2,zero
  806ca0:	00d00934 	movhi	r3,16420
  806ca4:	180f883a 	mov	r7,r3
  806ca8:	100d883a 	mov	r6,r2
  806cac:	880b883a 	mov	r5,r17
  806cb0:	8009883a 	mov	r4,r16
  806cb4:	080a42c0 	call	80a42c <__muldf3>
  806cb8:	180b883a 	mov	r5,r3
  806cbc:	1009883a 	mov	r4,r2
  806cc0:	1823883a 	mov	r17,r3
  806cc4:	1021883a 	mov	r16,r2
  806cc8:	080ade80 	call	80ade8 <__fixdfsi>
  806ccc:	1009883a 	mov	r4,r2
  806cd0:	102b883a 	mov	r21,r2
  806cd4:	080acf00 	call	80acf0 <__floatsidf>
  806cd8:	880b883a 	mov	r5,r17
  806cdc:	8009883a 	mov	r4,r16
  806ce0:	180f883a 	mov	r7,r3
  806ce4:	100d883a 	mov	r6,r2
  806ce8:	080a3380 	call	80a338 <__subdf3>
  806cec:	180b883a 	mov	r5,r3
  806cf0:	d8c00517 	ldw	r3,20(sp)
  806cf4:	1009883a 	mov	r4,r2
  806cf8:	ad400c04 	addi	r21,r21,48
  806cfc:	1d05883a 	add	r2,r3,r20
  806d00:	15400005 	stb	r21,0(r2)
  806d04:	2021883a 	mov	r16,r4
  806d08:	d9000317 	ldw	r4,12(sp)
  806d0c:	a5000044 	addi	r20,r20,1
  806d10:	2823883a 	mov	r17,r5
  806d14:	a13fe11e 	bne	r20,r4,806c9c <_dtoa_r+0x1378>
  806d18:	e505883a 	add	r2,fp,r20
  806d1c:	173fffc4 	addi	fp,r2,-1
  806d20:	0025883a 	mov	r18,zero
  806d24:	04cff834 	movhi	r19,16352
  806d28:	b009883a 	mov	r4,r22
  806d2c:	b80b883a 	mov	r5,r23
  806d30:	900d883a 	mov	r6,r18
  806d34:	980f883a 	mov	r7,r19
  806d38:	080a3b80 	call	80a3b8 <__adddf3>
  806d3c:	180b883a 	mov	r5,r3
  806d40:	1009883a 	mov	r4,r2
  806d44:	800d883a 	mov	r6,r16
  806d48:	880f883a 	mov	r7,r17
  806d4c:	080ac680 	call	80ac68 <__ltdf2>
  806d50:	103cab16 	blt	r2,zero,806000 <_dtoa_r+0x6dc>
  806d54:	0009883a 	mov	r4,zero
  806d58:	980b883a 	mov	r5,r19
  806d5c:	b80f883a 	mov	r7,r23
  806d60:	b00d883a 	mov	r6,r22
  806d64:	080a3380 	call	80a338 <__subdf3>
  806d68:	180b883a 	mov	r5,r3
  806d6c:	880f883a 	mov	r7,r17
  806d70:	1009883a 	mov	r4,r2
  806d74:	800d883a 	mov	r6,r16
  806d78:	080ab580 	call	80ab58 <__gtdf2>
  806d7c:	00bc470e 	bge	zero,r2,805e9c <_dtoa_r+0x578>
  806d80:	00c00c04 	movi	r3,48
  806d84:	e73fffc4 	addi	fp,fp,-1
  806d88:	e0800007 	ldb	r2,0(fp)
  806d8c:	10fffd26 	beq	r2,r3,806d84 <_dtoa_r+0x1460>
  806d90:	d9800417 	ldw	r6,16(sp)
  806d94:	e7000044 	addi	fp,fp,1
  806d98:	d9800d15 	stw	r6,52(sp)
  806d9c:	003cab06 	br	80604c <_dtoa_r+0x728>
  806da0:	d8c00f17 	ldw	r3,60(sp)
  806da4:	d9001117 	ldw	r4,68(sp)
  806da8:	20e1c83a 	sub	r16,r4,r3
  806dac:	0007883a 	mov	r3,zero
  806db0:	003d9b06 	br	806420 <_dtoa_r+0xafc>
  806db4:	00800e44 	movi	r2,57
  806db8:	b0800005 	stb	r2,0(r22)
  806dbc:	b5800044 	addi	r22,r22,1
  806dc0:	003dc106 	br	8064c8 <_dtoa_r+0xba4>
  806dc4:	05800084 	movi	r22,2
  806dc8:	003bf706 	br	805da8 <_dtoa_r+0x484>
  806dcc:	d9000f17 	ldw	r4,60(sp)
  806dd0:	013c000e 	bge	zero,r4,805dd4 <_dtoa_r+0x4b0>
  806dd4:	d9800e17 	ldw	r6,56(sp)
  806dd8:	01bc300e 	bge	zero,r6,805e9c <_dtoa_r+0x578>
  806ddc:	0005883a 	mov	r2,zero
  806de0:	00d00934 	movhi	r3,16420
  806de4:	a80b883a 	mov	r5,r21
  806de8:	180f883a 	mov	r7,r3
  806dec:	a009883a 	mov	r4,r20
  806df0:	100d883a 	mov	r6,r2
  806df4:	080a42c0 	call	80a42c <__muldf3>
  806df8:	b1000044 	addi	r4,r22,1
  806dfc:	1021883a 	mov	r16,r2
  806e00:	1823883a 	mov	r17,r3
  806e04:	080acf00 	call	80acf0 <__floatsidf>
  806e08:	880b883a 	mov	r5,r17
  806e0c:	8009883a 	mov	r4,r16
  806e10:	180f883a 	mov	r7,r3
  806e14:	100d883a 	mov	r6,r2
  806e18:	080a42c0 	call	80a42c <__muldf3>
  806e1c:	0011883a 	mov	r8,zero
  806e20:	02500734 	movhi	r9,16412
  806e24:	180b883a 	mov	r5,r3
  806e28:	480f883a 	mov	r7,r9
  806e2c:	1009883a 	mov	r4,r2
  806e30:	400d883a 	mov	r6,r8
  806e34:	080a3b80 	call	80a3b8 <__adddf3>
  806e38:	102d883a 	mov	r22,r2
  806e3c:	00bf3034 	movhi	r2,64704
  806e40:	10ef883a 	add	r23,r2,r3
  806e44:	d8800d17 	ldw	r2,52(sp)
  806e48:	d8c00e17 	ldw	r3,56(sp)
  806e4c:	8029883a 	mov	r20,r16
  806e50:	10bfffc4 	addi	r2,r2,-1
  806e54:	882b883a 	mov	r21,r17
  806e58:	d8800415 	stw	r2,16(sp)
  806e5c:	d8c00315 	stw	r3,12(sp)
  806e60:	003e8306 	br	806870 <_dtoa_r+0xf4c>
  806e64:	d8800117 	ldw	r2,4(sp)
  806e68:	dc001117 	ldw	r16,68(sp)
  806e6c:	dc801017 	ldw	r18,64(sp)
  806e70:	00c00d84 	movi	r3,54
  806e74:	1887c83a 	sub	r3,r3,r2
  806e78:	003d6906 	br	806420 <_dtoa_r+0xafc>
  806e7c:	01800044 	movi	r6,1
  806e80:	3021883a 	mov	r16,r6
  806e84:	d9800f15 	stw	r6,60(sp)
  806e88:	d9802615 	stw	r6,152(sp)
  806e8c:	d9800e15 	stw	r6,56(sp)
  806e90:	003b9306 	br	805ce0 <_dtoa_r+0x3bc>
  806e94:	b021883a 	mov	r16,r22
  806e98:	dd800f15 	stw	r22,60(sp)
  806e9c:	003b9006 	br	805ce0 <_dtoa_r+0x3bc>
  806ea0:	103e221e 	bne	r2,zero,80672c <_dtoa_r+0xe08>
  806ea4:	b880004c 	andi	r2,r23,1
  806ea8:	1005003a 	cmpeq	r2,r2,zero
  806eac:	103e1f1e 	bne	r2,zero,80672c <_dtoa_r+0xe08>
  806eb0:	003e1b06 	br	806720 <_dtoa_r+0xdfc>
  806eb4:	d9001617 	ldw	r4,88(sp)
  806eb8:	980b883a 	mov	r5,r19
  806ebc:	01800284 	movi	r6,10
  806ec0:	000f883a 	mov	r7,zero
  806ec4:	08084d80 	call	8084d8 <__multadd>
  806ec8:	d8c00e17 	ldw	r3,56(sp)
  806ecc:	1027883a 	mov	r19,r2
  806ed0:	d8c00f15 	stw	r3,60(sp)
  806ed4:	003cd306 	br	806224 <_dtoa_r+0x900>

00806ed8 <__sflags>:
  806ed8:	28c00007 	ldb	r3,0(r5)
  806edc:	00801c84 	movi	r2,114
  806ee0:	18800926 	beq	r3,r2,806f08 <__sflags+0x30>
  806ee4:	00801dc4 	movi	r2,119
  806ee8:	18801426 	beq	r3,r2,806f3c <__sflags+0x64>
  806eec:	00801844 	movi	r2,97
  806ef0:	18801626 	beq	r3,r2,806f4c <__sflags+0x74>
  806ef4:	0007883a 	mov	r3,zero
  806ef8:	00800584 	movi	r2,22
  806efc:	20800015 	stw	r2,0(r4)
  806f00:	1805883a 	mov	r2,r3
  806f04:	f800283a 	ret
  806f08:	000f883a 	mov	r7,zero
  806f0c:	0011883a 	mov	r8,zero
  806f10:	00c00104 	movi	r3,4
  806f14:	28800047 	ldb	r2,1(r5)
  806f18:	10000426 	beq	r2,zero,806f2c <__sflags+0x54>
  806f1c:	01000ac4 	movi	r4,43
  806f20:	11000e26 	beq	r2,r4,806f5c <__sflags+0x84>
  806f24:	28800087 	ldb	r2,2(r5)
  806f28:	11000c26 	beq	r2,r4,806f5c <__sflags+0x84>
  806f2c:	3a04b03a 	or	r2,r7,r8
  806f30:	30800015 	stw	r2,0(r6)
  806f34:	1805883a 	mov	r2,r3
  806f38:	f800283a 	ret
  806f3c:	01c00044 	movi	r7,1
  806f40:	02018004 	movi	r8,1536
  806f44:	00c00204 	movi	r3,8
  806f48:	003ff206 	br	806f14 <__sflags+0x3c>
  806f4c:	01c00044 	movi	r7,1
  806f50:	02008204 	movi	r8,520
  806f54:	00c04204 	movi	r3,264
  806f58:	003fee06 	br	806f14 <__sflags+0x3c>
  806f5c:	00bffcc4 	movi	r2,-13
  806f60:	1884703a 	and	r2,r3,r2
  806f64:	01c00084 	movi	r7,2
  806f68:	10c00414 	ori	r3,r2,16
  806f6c:	3a04b03a 	or	r2,r7,r8
  806f70:	30800015 	stw	r2,0(r6)
  806f74:	003fef06 	br	806f34 <__sflags+0x5c>

00806f78 <__sfvwrite_r>:
  806f78:	30800217 	ldw	r2,8(r6)
  806f7c:	defff504 	addi	sp,sp,-44
  806f80:	df000915 	stw	fp,36(sp)
  806f84:	dd800715 	stw	r22,28(sp)
  806f88:	dc800315 	stw	r18,12(sp)
  806f8c:	dfc00a15 	stw	ra,40(sp)
  806f90:	ddc00815 	stw	r23,32(sp)
  806f94:	dd400615 	stw	r21,24(sp)
  806f98:	dd000515 	stw	r20,20(sp)
  806f9c:	dcc00415 	stw	r19,16(sp)
  806fa0:	dc400215 	stw	r17,8(sp)
  806fa4:	dc000115 	stw	r16,4(sp)
  806fa8:	302d883a 	mov	r22,r6
  806fac:	2039883a 	mov	fp,r4
  806fb0:	2825883a 	mov	r18,r5
  806fb4:	10001c26 	beq	r2,zero,807028 <__sfvwrite_r+0xb0>
  806fb8:	29c0030b 	ldhu	r7,12(r5)
  806fbc:	3880020c 	andi	r2,r7,8
  806fc0:	10002726 	beq	r2,zero,807060 <__sfvwrite_r+0xe8>
  806fc4:	28800417 	ldw	r2,16(r5)
  806fc8:	10002526 	beq	r2,zero,807060 <__sfvwrite_r+0xe8>
  806fcc:	3880008c 	andi	r2,r7,2
  806fd0:	b5400017 	ldw	r21,0(r22)
  806fd4:	10002826 	beq	r2,zero,807078 <__sfvwrite_r+0x100>
  806fd8:	0021883a 	mov	r16,zero
  806fdc:	0023883a 	mov	r17,zero
  806fe0:	880d883a 	mov	r6,r17
  806fe4:	e009883a 	mov	r4,fp
  806fe8:	00810004 	movi	r2,1024
  806fec:	80006e26 	beq	r16,zero,8071a8 <__sfvwrite_r+0x230>
  806ff0:	800f883a 	mov	r7,r16
  806ff4:	91400717 	ldw	r5,28(r18)
  806ff8:	1400012e 	bgeu	r2,r16,807000 <__sfvwrite_r+0x88>
  806ffc:	100f883a 	mov	r7,r2
  807000:	90c00917 	ldw	r3,36(r18)
  807004:	183ee83a 	callr	r3
  807008:	1007883a 	mov	r3,r2
  80700c:	80a1c83a 	sub	r16,r16,r2
  807010:	88a3883a 	add	r17,r17,r2
  807014:	00806d0e 	bge	zero,r2,8071cc <__sfvwrite_r+0x254>
  807018:	b0800217 	ldw	r2,8(r22)
  80701c:	10c5c83a 	sub	r2,r2,r3
  807020:	b0800215 	stw	r2,8(r22)
  807024:	103fee1e 	bne	r2,zero,806fe0 <__sfvwrite_r+0x68>
  807028:	0009883a 	mov	r4,zero
  80702c:	2005883a 	mov	r2,r4
  807030:	dfc00a17 	ldw	ra,40(sp)
  807034:	df000917 	ldw	fp,36(sp)
  807038:	ddc00817 	ldw	r23,32(sp)
  80703c:	dd800717 	ldw	r22,28(sp)
  807040:	dd400617 	ldw	r21,24(sp)
  807044:	dd000517 	ldw	r20,20(sp)
  807048:	dcc00417 	ldw	r19,16(sp)
  80704c:	dc800317 	ldw	r18,12(sp)
  807050:	dc400217 	ldw	r17,8(sp)
  807054:	dc000117 	ldw	r16,4(sp)
  807058:	dec00b04 	addi	sp,sp,44
  80705c:	f800283a 	ret
  807060:	08055600 	call	805560 <__swsetup_r>
  807064:	1000e41e 	bne	r2,zero,8073f8 <__sfvwrite_r+0x480>
  807068:	91c0030b 	ldhu	r7,12(r18)
  80706c:	b5400017 	ldw	r21,0(r22)
  807070:	3880008c 	andi	r2,r7,2
  807074:	103fd81e 	bne	r2,zero,806fd8 <__sfvwrite_r+0x60>
  807078:	3880004c 	andi	r2,r7,1
  80707c:	1005003a 	cmpeq	r2,r2,zero
  807080:	10005726 	beq	r2,zero,8071e0 <__sfvwrite_r+0x268>
  807084:	0029883a 	mov	r20,zero
  807088:	002f883a 	mov	r23,zero
  80708c:	a0004226 	beq	r20,zero,807198 <__sfvwrite_r+0x220>
  807090:	3880800c 	andi	r2,r7,512
  807094:	94000217 	ldw	r16,8(r18)
  807098:	10008b26 	beq	r2,zero,8072c8 <__sfvwrite_r+0x350>
  80709c:	800d883a 	mov	r6,r16
  8070a0:	a400a536 	bltu	r20,r16,807338 <__sfvwrite_r+0x3c0>
  8070a4:	3881200c 	andi	r2,r7,1152
  8070a8:	10002726 	beq	r2,zero,807148 <__sfvwrite_r+0x1d0>
  8070ac:	90800517 	ldw	r2,20(r18)
  8070b0:	92000417 	ldw	r8,16(r18)
  8070b4:	91400017 	ldw	r5,0(r18)
  8070b8:	1087883a 	add	r3,r2,r2
  8070bc:	1887883a 	add	r3,r3,r2
  8070c0:	1808d7fa 	srli	r4,r3,31
  8070c4:	2a21c83a 	sub	r16,r5,r8
  8070c8:	80800044 	addi	r2,r16,1
  8070cc:	20c9883a 	add	r4,r4,r3
  8070d0:	2027d07a 	srai	r19,r4,1
  8070d4:	a085883a 	add	r2,r20,r2
  8070d8:	980d883a 	mov	r6,r19
  8070dc:	9880022e 	bgeu	r19,r2,8070e8 <__sfvwrite_r+0x170>
  8070e0:	1027883a 	mov	r19,r2
  8070e4:	100d883a 	mov	r6,r2
  8070e8:	3881000c 	andi	r2,r7,1024
  8070ec:	1000b826 	beq	r2,zero,8073d0 <__sfvwrite_r+0x458>
  8070f0:	300b883a 	mov	r5,r6
  8070f4:	e009883a 	mov	r4,fp
  8070f8:	08025480 	call	802548 <_malloc_r>
  8070fc:	10003126 	beq	r2,zero,8071c4 <__sfvwrite_r+0x24c>
  807100:	91400417 	ldw	r5,16(r18)
  807104:	1009883a 	mov	r4,r2
  807108:	800d883a 	mov	r6,r16
  80710c:	1023883a 	mov	r17,r2
  807110:	08076a40 	call	8076a4 <memcpy>
  807114:	90c0030b 	ldhu	r3,12(r18)
  807118:	00beffc4 	movi	r2,-1025
  80711c:	1886703a 	and	r3,r3,r2
  807120:	18c02014 	ori	r3,r3,128
  807124:	90c0030d 	sth	r3,12(r18)
  807128:	9c07c83a 	sub	r3,r19,r16
  80712c:	8c05883a 	add	r2,r17,r16
  807130:	a00d883a 	mov	r6,r20
  807134:	a021883a 	mov	r16,r20
  807138:	90800015 	stw	r2,0(r18)
  80713c:	90c00215 	stw	r3,8(r18)
  807140:	94400415 	stw	r17,16(r18)
  807144:	94c00515 	stw	r19,20(r18)
  807148:	91000017 	ldw	r4,0(r18)
  80714c:	b80b883a 	mov	r5,r23
  807150:	a023883a 	mov	r17,r20
  807154:	08077440 	call	807744 <memmove>
  807158:	90c00217 	ldw	r3,8(r18)
  80715c:	90800017 	ldw	r2,0(r18)
  807160:	a027883a 	mov	r19,r20
  807164:	1c07c83a 	sub	r3,r3,r16
  807168:	1405883a 	add	r2,r2,r16
  80716c:	90c00215 	stw	r3,8(r18)
  807170:	a021883a 	mov	r16,r20
  807174:	90800015 	stw	r2,0(r18)
  807178:	b0800217 	ldw	r2,8(r22)
  80717c:	1405c83a 	sub	r2,r2,r16
  807180:	b0800215 	stw	r2,8(r22)
  807184:	103fa826 	beq	r2,zero,807028 <__sfvwrite_r+0xb0>
  807188:	a469c83a 	sub	r20,r20,r17
  80718c:	91c0030b 	ldhu	r7,12(r18)
  807190:	bcef883a 	add	r23,r23,r19
  807194:	a03fbe1e 	bne	r20,zero,807090 <__sfvwrite_r+0x118>
  807198:	adc00017 	ldw	r23,0(r21)
  80719c:	ad000117 	ldw	r20,4(r21)
  8071a0:	ad400204 	addi	r21,r21,8
  8071a4:	003fb906 	br	80708c <__sfvwrite_r+0x114>
  8071a8:	ac400017 	ldw	r17,0(r21)
  8071ac:	ac000117 	ldw	r16,4(r21)
  8071b0:	ad400204 	addi	r21,r21,8
  8071b4:	003f8a06 	br	806fe0 <__sfvwrite_r+0x68>
  8071b8:	91400417 	ldw	r5,16(r18)
  8071bc:	e009883a 	mov	r4,fp
  8071c0:	08019700 	call	801970 <_free_r>
  8071c4:	00800304 	movi	r2,12
  8071c8:	e0800015 	stw	r2,0(fp)
  8071cc:	9080030b 	ldhu	r2,12(r18)
  8071d0:	013fffc4 	movi	r4,-1
  8071d4:	10801014 	ori	r2,r2,64
  8071d8:	9080030d 	sth	r2,12(r18)
  8071dc:	003f9306 	br	80702c <__sfvwrite_r+0xb4>
  8071e0:	0027883a 	mov	r19,zero
  8071e4:	002f883a 	mov	r23,zero
  8071e8:	d8000015 	stw	zero,0(sp)
  8071ec:	0029883a 	mov	r20,zero
  8071f0:	98001e26 	beq	r19,zero,80726c <__sfvwrite_r+0x2f4>
  8071f4:	d8c00017 	ldw	r3,0(sp)
  8071f8:	1804c03a 	cmpne	r2,r3,zero
  8071fc:	10005e26 	beq	r2,zero,807378 <__sfvwrite_r+0x400>
  807200:	9821883a 	mov	r16,r19
  807204:	a4c0012e 	bgeu	r20,r19,80720c <__sfvwrite_r+0x294>
  807208:	a021883a 	mov	r16,r20
  80720c:	91000017 	ldw	r4,0(r18)
  807210:	90800417 	ldw	r2,16(r18)
  807214:	91800217 	ldw	r6,8(r18)
  807218:	91c00517 	ldw	r7,20(r18)
  80721c:	1100022e 	bgeu	r2,r4,807228 <__sfvwrite_r+0x2b0>
  807220:	31e3883a 	add	r17,r6,r7
  807224:	8c001616 	blt	r17,r16,807280 <__sfvwrite_r+0x308>
  807228:	81c03816 	blt	r16,r7,80730c <__sfvwrite_r+0x394>
  80722c:	90c00917 	ldw	r3,36(r18)
  807230:	91400717 	ldw	r5,28(r18)
  807234:	e009883a 	mov	r4,fp
  807238:	b80d883a 	mov	r6,r23
  80723c:	183ee83a 	callr	r3
  807240:	1023883a 	mov	r17,r2
  807244:	00bfe10e 	bge	zero,r2,8071cc <__sfvwrite_r+0x254>
  807248:	a469c83a 	sub	r20,r20,r17
  80724c:	a0001826 	beq	r20,zero,8072b0 <__sfvwrite_r+0x338>
  807250:	b0800217 	ldw	r2,8(r22)
  807254:	1445c83a 	sub	r2,r2,r17
  807258:	b0800215 	stw	r2,8(r22)
  80725c:	103f7226 	beq	r2,zero,807028 <__sfvwrite_r+0xb0>
  807260:	9c67c83a 	sub	r19,r19,r17
  807264:	bc6f883a 	add	r23,r23,r17
  807268:	983fe21e 	bne	r19,zero,8071f4 <__sfvwrite_r+0x27c>
  80726c:	adc00017 	ldw	r23,0(r21)
  807270:	acc00117 	ldw	r19,4(r21)
  807274:	ad400204 	addi	r21,r21,8
  807278:	d8000015 	stw	zero,0(sp)
  80727c:	003fdc06 	br	8071f0 <__sfvwrite_r+0x278>
  807280:	b80b883a 	mov	r5,r23
  807284:	880d883a 	mov	r6,r17
  807288:	08077440 	call	807744 <memmove>
  80728c:	90c00017 	ldw	r3,0(r18)
  807290:	e009883a 	mov	r4,fp
  807294:	900b883a 	mov	r5,r18
  807298:	1c47883a 	add	r3,r3,r17
  80729c:	90c00015 	stw	r3,0(r18)
  8072a0:	08010bc0 	call	8010bc <_fflush_r>
  8072a4:	103fc91e 	bne	r2,zero,8071cc <__sfvwrite_r+0x254>
  8072a8:	a469c83a 	sub	r20,r20,r17
  8072ac:	a03fe81e 	bne	r20,zero,807250 <__sfvwrite_r+0x2d8>
  8072b0:	e009883a 	mov	r4,fp
  8072b4:	900b883a 	mov	r5,r18
  8072b8:	08010bc0 	call	8010bc <_fflush_r>
  8072bc:	103fc31e 	bne	r2,zero,8071cc <__sfvwrite_r+0x254>
  8072c0:	d8000015 	stw	zero,0(sp)
  8072c4:	003fe206 	br	807250 <__sfvwrite_r+0x2d8>
  8072c8:	91000017 	ldw	r4,0(r18)
  8072cc:	90800417 	ldw	r2,16(r18)
  8072d0:	1100022e 	bgeu	r2,r4,8072dc <__sfvwrite_r+0x364>
  8072d4:	8023883a 	mov	r17,r16
  8072d8:	85003136 	bltu	r16,r20,8073a0 <__sfvwrite_r+0x428>
  8072dc:	91c00517 	ldw	r7,20(r18)
  8072e0:	a1c01836 	bltu	r20,r7,807344 <__sfvwrite_r+0x3cc>
  8072e4:	90c00917 	ldw	r3,36(r18)
  8072e8:	91400717 	ldw	r5,28(r18)
  8072ec:	e009883a 	mov	r4,fp
  8072f0:	b80d883a 	mov	r6,r23
  8072f4:	183ee83a 	callr	r3
  8072f8:	1021883a 	mov	r16,r2
  8072fc:	00bfb30e 	bge	zero,r2,8071cc <__sfvwrite_r+0x254>
  807300:	1023883a 	mov	r17,r2
  807304:	1027883a 	mov	r19,r2
  807308:	003f9b06 	br	807178 <__sfvwrite_r+0x200>
  80730c:	b80b883a 	mov	r5,r23
  807310:	800d883a 	mov	r6,r16
  807314:	08077440 	call	807744 <memmove>
  807318:	90c00217 	ldw	r3,8(r18)
  80731c:	90800017 	ldw	r2,0(r18)
  807320:	8023883a 	mov	r17,r16
  807324:	1c07c83a 	sub	r3,r3,r16
  807328:	1405883a 	add	r2,r2,r16
  80732c:	90c00215 	stw	r3,8(r18)
  807330:	90800015 	stw	r2,0(r18)
  807334:	003fc406 	br	807248 <__sfvwrite_r+0x2d0>
  807338:	a00d883a 	mov	r6,r20
  80733c:	a021883a 	mov	r16,r20
  807340:	003f8106 	br	807148 <__sfvwrite_r+0x1d0>
  807344:	b80b883a 	mov	r5,r23
  807348:	a00d883a 	mov	r6,r20
  80734c:	08077440 	call	807744 <memmove>
  807350:	90c00217 	ldw	r3,8(r18)
  807354:	90800017 	ldw	r2,0(r18)
  807358:	a021883a 	mov	r16,r20
  80735c:	1d07c83a 	sub	r3,r3,r20
  807360:	1505883a 	add	r2,r2,r20
  807364:	a023883a 	mov	r17,r20
  807368:	a027883a 	mov	r19,r20
  80736c:	90c00215 	stw	r3,8(r18)
  807370:	90800015 	stw	r2,0(r18)
  807374:	003f8006 	br	807178 <__sfvwrite_r+0x200>
  807378:	b809883a 	mov	r4,r23
  80737c:	01400284 	movi	r5,10
  807380:	980d883a 	mov	r6,r19
  807384:	08075c00 	call	8075c0 <memchr>
  807388:	10001726 	beq	r2,zero,8073e8 <__sfvwrite_r+0x470>
  80738c:	15c5c83a 	sub	r2,r2,r23
  807390:	15000044 	addi	r20,r2,1
  807394:	00800044 	movi	r2,1
  807398:	d8800015 	stw	r2,0(sp)
  80739c:	003f9806 	br	807200 <__sfvwrite_r+0x288>
  8073a0:	b80b883a 	mov	r5,r23
  8073a4:	800d883a 	mov	r6,r16
  8073a8:	08077440 	call	807744 <memmove>
  8073ac:	90c00017 	ldw	r3,0(r18)
  8073b0:	e009883a 	mov	r4,fp
  8073b4:	900b883a 	mov	r5,r18
  8073b8:	1c07883a 	add	r3,r3,r16
  8073bc:	90c00015 	stw	r3,0(r18)
  8073c0:	8027883a 	mov	r19,r16
  8073c4:	08010bc0 	call	8010bc <_fflush_r>
  8073c8:	103f6b26 	beq	r2,zero,807178 <__sfvwrite_r+0x200>
  8073cc:	003f7f06 	br	8071cc <__sfvwrite_r+0x254>
  8073d0:	400b883a 	mov	r5,r8
  8073d4:	e009883a 	mov	r4,fp
  8073d8:	0808a7c0 	call	808a7c <_realloc_r>
  8073dc:	103f7626 	beq	r2,zero,8071b8 <__sfvwrite_r+0x240>
  8073e0:	1023883a 	mov	r17,r2
  8073e4:	003f5006 	br	807128 <__sfvwrite_r+0x1b0>
  8073e8:	00c00044 	movi	r3,1
  8073ec:	9d000044 	addi	r20,r19,1
  8073f0:	d8c00015 	stw	r3,0(sp)
  8073f4:	003f8206 	br	807200 <__sfvwrite_r+0x288>
  8073f8:	9080030b 	ldhu	r2,12(r18)
  8073fc:	00c00244 	movi	r3,9
  807400:	013fffc4 	movi	r4,-1
  807404:	10801014 	ori	r2,r2,64
  807408:	9080030d 	sth	r2,12(r18)
  80740c:	e0c00015 	stw	r3,0(fp)
  807410:	003f0606 	br	80702c <__sfvwrite_r+0xb4>

00807414 <_isatty_r>:
  807414:	defffd04 	addi	sp,sp,-12
  807418:	dc000015 	stw	r16,0(sp)
  80741c:	04002074 	movhi	r16,129
  807420:	840f6604 	addi	r16,r16,15768
  807424:	dc400115 	stw	r17,4(sp)
  807428:	80000015 	stw	zero,0(r16)
  80742c:	2023883a 	mov	r17,r4
  807430:	2809883a 	mov	r4,r5
  807434:	dfc00215 	stw	ra,8(sp)
  807438:	080bc500 	call	80bc50 <isatty>
  80743c:	1007883a 	mov	r3,r2
  807440:	00bfffc4 	movi	r2,-1
  807444:	18800626 	beq	r3,r2,807460 <_isatty_r+0x4c>
  807448:	1805883a 	mov	r2,r3
  80744c:	dfc00217 	ldw	ra,8(sp)
  807450:	dc400117 	ldw	r17,4(sp)
  807454:	dc000017 	ldw	r16,0(sp)
  807458:	dec00304 	addi	sp,sp,12
  80745c:	f800283a 	ret
  807460:	80800017 	ldw	r2,0(r16)
  807464:	103ff826 	beq	r2,zero,807448 <_isatty_r+0x34>
  807468:	88800015 	stw	r2,0(r17)
  80746c:	1805883a 	mov	r2,r3
  807470:	dfc00217 	ldw	ra,8(sp)
  807474:	dc400117 	ldw	r17,4(sp)
  807478:	dc000017 	ldw	r16,0(sp)
  80747c:	dec00304 	addi	sp,sp,12
  807480:	f800283a 	ret

00807484 <__locale_charset>:
  807484:	d0a00817 	ldw	r2,-32736(gp)
  807488:	f800283a 	ret

0080748c <_localeconv_r>:
  80748c:	00802074 	movhi	r2,129
  807490:	10806704 	addi	r2,r2,412
  807494:	f800283a 	ret

00807498 <localeconv>:
  807498:	00802074 	movhi	r2,129
  80749c:	10882504 	addi	r2,r2,8340
  8074a0:	11000017 	ldw	r4,0(r2)
  8074a4:	080748c1 	jmpi	80748c <_localeconv_r>

008074a8 <_setlocale_r>:
  8074a8:	defffc04 	addi	sp,sp,-16
  8074ac:	00c02074 	movhi	r3,129
  8074b0:	18ff9c04 	addi	r3,r3,-400
  8074b4:	dc800215 	stw	r18,8(sp)
  8074b8:	dc400115 	stw	r17,4(sp)
  8074bc:	dc000015 	stw	r16,0(sp)
  8074c0:	2023883a 	mov	r17,r4
  8074c4:	2825883a 	mov	r18,r5
  8074c8:	dfc00315 	stw	ra,12(sp)
  8074cc:	3021883a 	mov	r16,r6
  8074d0:	3009883a 	mov	r4,r6
  8074d4:	180b883a 	mov	r5,r3
  8074d8:	30000926 	beq	r6,zero,807500 <_setlocale_r+0x58>
  8074dc:	08090e00 	call	8090e0 <strcmp>
  8074e0:	8009883a 	mov	r4,r16
  8074e4:	01402074 	movhi	r5,129
  8074e8:	297fad04 	addi	r5,r5,-332
  8074ec:	10000b1e 	bne	r2,zero,80751c <_setlocale_r+0x74>
  8074f0:	8c000d15 	stw	r16,52(r17)
  8074f4:	8c800c15 	stw	r18,48(r17)
  8074f8:	00c02074 	movhi	r3,129
  8074fc:	18ff9c04 	addi	r3,r3,-400
  807500:	1805883a 	mov	r2,r3
  807504:	dfc00317 	ldw	ra,12(sp)
  807508:	dc800217 	ldw	r18,8(sp)
  80750c:	dc400117 	ldw	r17,4(sp)
  807510:	dc000017 	ldw	r16,0(sp)
  807514:	dec00404 	addi	sp,sp,16
  807518:	f800283a 	ret
  80751c:	08090e00 	call	8090e0 <strcmp>
  807520:	0007883a 	mov	r3,zero
  807524:	103ff226 	beq	r2,zero,8074f0 <_setlocale_r+0x48>
  807528:	003ff506 	br	807500 <_setlocale_r+0x58>

0080752c <setlocale>:
  80752c:	01802074 	movhi	r6,129
  807530:	31882504 	addi	r6,r6,8340
  807534:	2007883a 	mov	r3,r4
  807538:	31000017 	ldw	r4,0(r6)
  80753c:	280d883a 	mov	r6,r5
  807540:	180b883a 	mov	r5,r3
  807544:	08074a81 	jmpi	8074a8 <_setlocale_r>

00807548 <_lseek_r>:
  807548:	defffd04 	addi	sp,sp,-12
  80754c:	dc000015 	stw	r16,0(sp)
  807550:	04002074 	movhi	r16,129
  807554:	840f6604 	addi	r16,r16,15768
  807558:	dc400115 	stw	r17,4(sp)
  80755c:	80000015 	stw	zero,0(r16)
  807560:	2023883a 	mov	r17,r4
  807564:	2809883a 	mov	r4,r5
  807568:	300b883a 	mov	r5,r6
  80756c:	380d883a 	mov	r6,r7
  807570:	dfc00215 	stw	ra,8(sp)
  807574:	080be5c0 	call	80be5c <lseek>
  807578:	1007883a 	mov	r3,r2
  80757c:	00bfffc4 	movi	r2,-1
  807580:	18800626 	beq	r3,r2,80759c <_lseek_r+0x54>
  807584:	1805883a 	mov	r2,r3
  807588:	dfc00217 	ldw	ra,8(sp)
  80758c:	dc400117 	ldw	r17,4(sp)
  807590:	dc000017 	ldw	r16,0(sp)
  807594:	dec00304 	addi	sp,sp,12
  807598:	f800283a 	ret
  80759c:	80800017 	ldw	r2,0(r16)
  8075a0:	103ff826 	beq	r2,zero,807584 <_lseek_r+0x3c>
  8075a4:	88800015 	stw	r2,0(r17)
  8075a8:	1805883a 	mov	r2,r3
  8075ac:	dfc00217 	ldw	ra,8(sp)
  8075b0:	dc400117 	ldw	r17,4(sp)
  8075b4:	dc000017 	ldw	r16,0(sp)
  8075b8:	dec00304 	addi	sp,sp,12
  8075bc:	f800283a 	ret

008075c0 <memchr>:
  8075c0:	008000c4 	movi	r2,3
  8075c4:	29403fcc 	andi	r5,r5,255
  8075c8:	2007883a 	mov	r3,r4
  8075cc:	1180022e 	bgeu	r2,r6,8075d8 <memchr+0x18>
  8075d0:	2084703a 	and	r2,r4,r2
  8075d4:	10000b26 	beq	r2,zero,807604 <memchr+0x44>
  8075d8:	313fffc4 	addi	r4,r6,-1
  8075dc:	3000051e 	bne	r6,zero,8075f4 <memchr+0x34>
  8075e0:	00002c06 	br	807694 <memchr+0xd4>
  8075e4:	213fffc4 	addi	r4,r4,-1
  8075e8:	00bfffc4 	movi	r2,-1
  8075ec:	18c00044 	addi	r3,r3,1
  8075f0:	20802826 	beq	r4,r2,807694 <memchr+0xd4>
  8075f4:	18800003 	ldbu	r2,0(r3)
  8075f8:	28bffa1e 	bne	r5,r2,8075e4 <memchr+0x24>
  8075fc:	1805883a 	mov	r2,r3
  807600:	f800283a 	ret
  807604:	0011883a 	mov	r8,zero
  807608:	0007883a 	mov	r3,zero
  80760c:	01c00104 	movi	r7,4
  807610:	4004923a 	slli	r2,r8,8
  807614:	18c00044 	addi	r3,r3,1
  807618:	1151883a 	add	r8,r2,r5
  80761c:	19fffc1e 	bne	r3,r7,807610 <memchr+0x50>
  807620:	02bfbff4 	movhi	r10,65279
  807624:	52bfbfc4 	addi	r10,r10,-257
  807628:	02602074 	movhi	r9,32897
  80762c:	4a602004 	addi	r9,r9,-32640
  807630:	02c000c4 	movi	r11,3
  807634:	20800017 	ldw	r2,0(r4)
  807638:	31bfff04 	addi	r6,r6,-4
  80763c:	200f883a 	mov	r7,r4
  807640:	1204f03a 	xor	r2,r2,r8
  807644:	1287883a 	add	r3,r2,r10
  807648:	1a46703a 	and	r3,r3,r9
  80764c:	0084303a 	nor	r2,zero,r2
  807650:	10c4703a 	and	r2,r2,r3
  807654:	10000b26 	beq	r2,zero,807684 <memchr+0xc4>
  807658:	20800003 	ldbu	r2,0(r4)
  80765c:	28800f26 	beq	r5,r2,80769c <memchr+0xdc>
  807660:	20800043 	ldbu	r2,1(r4)
  807664:	21c00044 	addi	r7,r4,1
  807668:	28800c26 	beq	r5,r2,80769c <memchr+0xdc>
  80766c:	20800083 	ldbu	r2,2(r4)
  807670:	21c00084 	addi	r7,r4,2
  807674:	28800926 	beq	r5,r2,80769c <memchr+0xdc>
  807678:	208000c3 	ldbu	r2,3(r4)
  80767c:	21c000c4 	addi	r7,r4,3
  807680:	28800626 	beq	r5,r2,80769c <memchr+0xdc>
  807684:	21000104 	addi	r4,r4,4
  807688:	59bfea36 	bltu	r11,r6,807634 <memchr+0x74>
  80768c:	2007883a 	mov	r3,r4
  807690:	003fd106 	br	8075d8 <memchr+0x18>
  807694:	0005883a 	mov	r2,zero
  807698:	f800283a 	ret
  80769c:	3805883a 	mov	r2,r7
  8076a0:	f800283a 	ret

008076a4 <memcpy>:
  8076a4:	01c003c4 	movi	r7,15
  8076a8:	2007883a 	mov	r3,r4
  8076ac:	3980032e 	bgeu	r7,r6,8076bc <memcpy+0x18>
  8076b0:	2904b03a 	or	r2,r5,r4
  8076b4:	108000cc 	andi	r2,r2,3
  8076b8:	10000926 	beq	r2,zero,8076e0 <memcpy+0x3c>
  8076bc:	30000626 	beq	r6,zero,8076d8 <memcpy+0x34>
  8076c0:	30cd883a 	add	r6,r6,r3
  8076c4:	28800003 	ldbu	r2,0(r5)
  8076c8:	29400044 	addi	r5,r5,1
  8076cc:	18800005 	stb	r2,0(r3)
  8076d0:	18c00044 	addi	r3,r3,1
  8076d4:	30fffb1e 	bne	r6,r3,8076c4 <memcpy+0x20>
  8076d8:	2005883a 	mov	r2,r4
  8076dc:	f800283a 	ret
  8076e0:	3811883a 	mov	r8,r7
  8076e4:	200f883a 	mov	r7,r4
  8076e8:	28c00017 	ldw	r3,0(r5)
  8076ec:	31bffc04 	addi	r6,r6,-16
  8076f0:	38c00015 	stw	r3,0(r7)
  8076f4:	28800117 	ldw	r2,4(r5)
  8076f8:	38800115 	stw	r2,4(r7)
  8076fc:	28c00217 	ldw	r3,8(r5)
  807700:	38c00215 	stw	r3,8(r7)
  807704:	28800317 	ldw	r2,12(r5)
  807708:	29400404 	addi	r5,r5,16
  80770c:	38800315 	stw	r2,12(r7)
  807710:	39c00404 	addi	r7,r7,16
  807714:	41bff436 	bltu	r8,r6,8076e8 <memcpy+0x44>
  807718:	008000c4 	movi	r2,3
  80771c:	1180072e 	bgeu	r2,r6,80773c <memcpy+0x98>
  807720:	1007883a 	mov	r3,r2
  807724:	28800017 	ldw	r2,0(r5)
  807728:	31bfff04 	addi	r6,r6,-4
  80772c:	29400104 	addi	r5,r5,4
  807730:	38800015 	stw	r2,0(r7)
  807734:	39c00104 	addi	r7,r7,4
  807738:	19bffa36 	bltu	r3,r6,807724 <memcpy+0x80>
  80773c:	3807883a 	mov	r3,r7
  807740:	003fde06 	br	8076bc <memcpy+0x18>

00807744 <memmove>:
  807744:	2807883a 	mov	r3,r5
  807748:	2011883a 	mov	r8,r4
  80774c:	29000c2e 	bgeu	r5,r4,807780 <memmove+0x3c>
  807750:	298f883a 	add	r7,r5,r6
  807754:	21c00a2e 	bgeu	r4,r7,807780 <memmove+0x3c>
  807758:	30000726 	beq	r6,zero,807778 <memmove+0x34>
  80775c:	2187883a 	add	r3,r4,r6
  807760:	198dc83a 	sub	r6,r3,r6
  807764:	39ffffc4 	addi	r7,r7,-1
  807768:	38800003 	ldbu	r2,0(r7)
  80776c:	18ffffc4 	addi	r3,r3,-1
  807770:	18800005 	stb	r2,0(r3)
  807774:	19bffb1e 	bne	r3,r6,807764 <memmove+0x20>
  807778:	2005883a 	mov	r2,r4
  80777c:	f800283a 	ret
  807780:	01c003c4 	movi	r7,15
  807784:	39800a36 	bltu	r7,r6,8077b0 <memmove+0x6c>
  807788:	303ffb26 	beq	r6,zero,807778 <memmove+0x34>
  80778c:	400f883a 	mov	r7,r8
  807790:	320d883a 	add	r6,r6,r8
  807794:	28800003 	ldbu	r2,0(r5)
  807798:	29400044 	addi	r5,r5,1
  80779c:	38800005 	stb	r2,0(r7)
  8077a0:	39c00044 	addi	r7,r7,1
  8077a4:	39bffb1e 	bne	r7,r6,807794 <memmove+0x50>
  8077a8:	2005883a 	mov	r2,r4
  8077ac:	f800283a 	ret
  8077b0:	1904b03a 	or	r2,r3,r4
  8077b4:	108000cc 	andi	r2,r2,3
  8077b8:	103ff31e 	bne	r2,zero,807788 <memmove+0x44>
  8077bc:	3811883a 	mov	r8,r7
  8077c0:	180b883a 	mov	r5,r3
  8077c4:	200f883a 	mov	r7,r4
  8077c8:	28c00017 	ldw	r3,0(r5)
  8077cc:	31bffc04 	addi	r6,r6,-16
  8077d0:	38c00015 	stw	r3,0(r7)
  8077d4:	28800117 	ldw	r2,4(r5)
  8077d8:	38800115 	stw	r2,4(r7)
  8077dc:	28c00217 	ldw	r3,8(r5)
  8077e0:	38c00215 	stw	r3,8(r7)
  8077e4:	28800317 	ldw	r2,12(r5)
  8077e8:	29400404 	addi	r5,r5,16
  8077ec:	38800315 	stw	r2,12(r7)
  8077f0:	39c00404 	addi	r7,r7,16
  8077f4:	41bff436 	bltu	r8,r6,8077c8 <memmove+0x84>
  8077f8:	008000c4 	movi	r2,3
  8077fc:	1180072e 	bgeu	r2,r6,80781c <memmove+0xd8>
  807800:	1007883a 	mov	r3,r2
  807804:	28800017 	ldw	r2,0(r5)
  807808:	31bfff04 	addi	r6,r6,-4
  80780c:	29400104 	addi	r5,r5,4
  807810:	38800015 	stw	r2,0(r7)
  807814:	39c00104 	addi	r7,r7,4
  807818:	19bffa36 	bltu	r3,r6,807804 <memmove+0xc0>
  80781c:	3811883a 	mov	r8,r7
  807820:	003fd906 	br	807788 <memmove+0x44>

00807824 <_Bfree>:
  807824:	28000826 	beq	r5,zero,807848 <_Bfree+0x24>
  807828:	28800117 	ldw	r2,4(r5)
  80782c:	21001317 	ldw	r4,76(r4)
  807830:	1085883a 	add	r2,r2,r2
  807834:	1085883a 	add	r2,r2,r2
  807838:	1105883a 	add	r2,r2,r4
  80783c:	10c00017 	ldw	r3,0(r2)
  807840:	28c00015 	stw	r3,0(r5)
  807844:	11400015 	stw	r5,0(r2)
  807848:	f800283a 	ret

0080784c <__hi0bits>:
  80784c:	20bfffec 	andhi	r2,r4,65535
  807850:	10001426 	beq	r2,zero,8078a4 <__hi0bits+0x58>
  807854:	0007883a 	mov	r3,zero
  807858:	20bfc02c 	andhi	r2,r4,65280
  80785c:	1000021e 	bne	r2,zero,807868 <__hi0bits+0x1c>
  807860:	2008923a 	slli	r4,r4,8
  807864:	18c00204 	addi	r3,r3,8
  807868:	20bc002c 	andhi	r2,r4,61440
  80786c:	1000021e 	bne	r2,zero,807878 <__hi0bits+0x2c>
  807870:	2008913a 	slli	r4,r4,4
  807874:	18c00104 	addi	r3,r3,4
  807878:	20b0002c 	andhi	r2,r4,49152
  80787c:	1000031e 	bne	r2,zero,80788c <__hi0bits+0x40>
  807880:	2105883a 	add	r2,r4,r4
  807884:	18c00084 	addi	r3,r3,2
  807888:	1089883a 	add	r4,r2,r2
  80788c:	20000316 	blt	r4,zero,80789c <__hi0bits+0x50>
  807890:	2090002c 	andhi	r2,r4,16384
  807894:	10000626 	beq	r2,zero,8078b0 <__hi0bits+0x64>
  807898:	18c00044 	addi	r3,r3,1
  80789c:	1805883a 	mov	r2,r3
  8078a0:	f800283a 	ret
  8078a4:	2008943a 	slli	r4,r4,16
  8078a8:	00c00404 	movi	r3,16
  8078ac:	003fea06 	br	807858 <__hi0bits+0xc>
  8078b0:	00c00804 	movi	r3,32
  8078b4:	1805883a 	mov	r2,r3
  8078b8:	f800283a 	ret

008078bc <__lo0bits>:
  8078bc:	20c00017 	ldw	r3,0(r4)
  8078c0:	188001cc 	andi	r2,r3,7
  8078c4:	10000a26 	beq	r2,zero,8078f0 <__lo0bits+0x34>
  8078c8:	1880004c 	andi	r2,r3,1
  8078cc:	1005003a 	cmpeq	r2,r2,zero
  8078d0:	10002126 	beq	r2,zero,807958 <__lo0bits+0x9c>
  8078d4:	1880008c 	andi	r2,r3,2
  8078d8:	1000251e 	bne	r2,zero,807970 <__lo0bits+0xb4>
  8078dc:	1804d0ba 	srli	r2,r3,2
  8078e0:	01400084 	movi	r5,2
  8078e4:	20800015 	stw	r2,0(r4)
  8078e8:	2805883a 	mov	r2,r5
  8078ec:	f800283a 	ret
  8078f0:	18bfffcc 	andi	r2,r3,65535
  8078f4:	10001526 	beq	r2,zero,80794c <__lo0bits+0x90>
  8078f8:	000b883a 	mov	r5,zero
  8078fc:	18803fcc 	andi	r2,r3,255
  807900:	1000021e 	bne	r2,zero,80790c <__lo0bits+0x50>
  807904:	1806d23a 	srli	r3,r3,8
  807908:	29400204 	addi	r5,r5,8
  80790c:	188003cc 	andi	r2,r3,15
  807910:	1000021e 	bne	r2,zero,80791c <__lo0bits+0x60>
  807914:	1806d13a 	srli	r3,r3,4
  807918:	29400104 	addi	r5,r5,4
  80791c:	188000cc 	andi	r2,r3,3
  807920:	1000021e 	bne	r2,zero,80792c <__lo0bits+0x70>
  807924:	1806d0ba 	srli	r3,r3,2
  807928:	29400084 	addi	r5,r5,2
  80792c:	1880004c 	andi	r2,r3,1
  807930:	1000031e 	bne	r2,zero,807940 <__lo0bits+0x84>
  807934:	1806d07a 	srli	r3,r3,1
  807938:	18000a26 	beq	r3,zero,807964 <__lo0bits+0xa8>
  80793c:	29400044 	addi	r5,r5,1
  807940:	2805883a 	mov	r2,r5
  807944:	20c00015 	stw	r3,0(r4)
  807948:	f800283a 	ret
  80794c:	1806d43a 	srli	r3,r3,16
  807950:	01400404 	movi	r5,16
  807954:	003fe906 	br	8078fc <__lo0bits+0x40>
  807958:	000b883a 	mov	r5,zero
  80795c:	2805883a 	mov	r2,r5
  807960:	f800283a 	ret
  807964:	01400804 	movi	r5,32
  807968:	2805883a 	mov	r2,r5
  80796c:	f800283a 	ret
  807970:	1804d07a 	srli	r2,r3,1
  807974:	01400044 	movi	r5,1
  807978:	20800015 	stw	r2,0(r4)
  80797c:	003fda06 	br	8078e8 <__lo0bits+0x2c>

00807980 <__mcmp>:
  807980:	20800417 	ldw	r2,16(r4)
  807984:	28c00417 	ldw	r3,16(r5)
  807988:	10cfc83a 	sub	r7,r2,r3
  80798c:	38000c1e 	bne	r7,zero,8079c0 <__mcmp+0x40>
  807990:	18c5883a 	add	r2,r3,r3
  807994:	1085883a 	add	r2,r2,r2
  807998:	10c00504 	addi	r3,r2,20
  80799c:	21000504 	addi	r4,r4,20
  8079a0:	28cb883a 	add	r5,r5,r3
  8079a4:	2085883a 	add	r2,r4,r2
  8079a8:	10bfff04 	addi	r2,r2,-4
  8079ac:	297fff04 	addi	r5,r5,-4
  8079b0:	11800017 	ldw	r6,0(r2)
  8079b4:	28c00017 	ldw	r3,0(r5)
  8079b8:	30c0031e 	bne	r6,r3,8079c8 <__mcmp+0x48>
  8079bc:	20bffa36 	bltu	r4,r2,8079a8 <__mcmp+0x28>
  8079c0:	3805883a 	mov	r2,r7
  8079c4:	f800283a 	ret
  8079c8:	30c00336 	bltu	r6,r3,8079d8 <__mcmp+0x58>
  8079cc:	01c00044 	movi	r7,1
  8079d0:	3805883a 	mov	r2,r7
  8079d4:	f800283a 	ret
  8079d8:	01ffffc4 	movi	r7,-1
  8079dc:	003ff806 	br	8079c0 <__mcmp+0x40>

008079e0 <__ulp>:
  8079e0:	295ffc2c 	andhi	r5,r5,32752
  8079e4:	013f3034 	movhi	r4,64704
  8079e8:	290b883a 	add	r5,r5,r4
  8079ec:	0145c83a 	sub	r2,zero,r5
  8079f0:	1007d53a 	srai	r3,r2,20
  8079f4:	000d883a 	mov	r6,zero
  8079f8:	0140040e 	bge	zero,r5,807a0c <__ulp+0x2c>
  8079fc:	280f883a 	mov	r7,r5
  807a00:	3807883a 	mov	r3,r7
  807a04:	3005883a 	mov	r2,r6
  807a08:	f800283a 	ret
  807a0c:	008004c4 	movi	r2,19
  807a10:	193ffb04 	addi	r4,r3,-20
  807a14:	10c00c0e 	bge	r2,r3,807a48 <__ulp+0x68>
  807a18:	008007c4 	movi	r2,31
  807a1c:	1107c83a 	sub	r3,r2,r4
  807a20:	00800784 	movi	r2,30
  807a24:	01400044 	movi	r5,1
  807a28:	11000216 	blt	r2,r4,807a34 <__ulp+0x54>
  807a2c:	00800044 	movi	r2,1
  807a30:	10ca983a 	sll	r5,r2,r3
  807a34:	000f883a 	mov	r7,zero
  807a38:	280d883a 	mov	r6,r5
  807a3c:	3807883a 	mov	r3,r7
  807a40:	3005883a 	mov	r2,r6
  807a44:	f800283a 	ret
  807a48:	00800234 	movhi	r2,8
  807a4c:	10cfd83a 	sra	r7,r2,r3
  807a50:	000d883a 	mov	r6,zero
  807a54:	3005883a 	mov	r2,r6
  807a58:	3807883a 	mov	r3,r7
  807a5c:	f800283a 	ret

00807a60 <__b2d>:
  807a60:	20800417 	ldw	r2,16(r4)
  807a64:	defff904 	addi	sp,sp,-28
  807a68:	dd000415 	stw	r20,16(sp)
  807a6c:	1085883a 	add	r2,r2,r2
  807a70:	25000504 	addi	r20,r4,20
  807a74:	1085883a 	add	r2,r2,r2
  807a78:	dc000015 	stw	r16,0(sp)
  807a7c:	a0a1883a 	add	r16,r20,r2
  807a80:	dd400515 	stw	r21,20(sp)
  807a84:	857fff17 	ldw	r21,-4(r16)
  807a88:	dc400115 	stw	r17,4(sp)
  807a8c:	dfc00615 	stw	ra,24(sp)
  807a90:	a809883a 	mov	r4,r21
  807a94:	2823883a 	mov	r17,r5
  807a98:	dcc00315 	stw	r19,12(sp)
  807a9c:	dc800215 	stw	r18,8(sp)
  807aa0:	080784c0 	call	80784c <__hi0bits>
  807aa4:	100b883a 	mov	r5,r2
  807aa8:	00800804 	movi	r2,32
  807aac:	1145c83a 	sub	r2,r2,r5
  807ab0:	88800015 	stw	r2,0(r17)
  807ab4:	00800284 	movi	r2,10
  807ab8:	80ffff04 	addi	r3,r16,-4
  807abc:	11401416 	blt	r2,r5,807b10 <__b2d+0xb0>
  807ac0:	008002c4 	movi	r2,11
  807ac4:	1149c83a 	sub	r4,r2,r5
  807ac8:	a0c02736 	bltu	r20,r3,807b68 <__b2d+0x108>
  807acc:	000d883a 	mov	r6,zero
  807ad0:	28800544 	addi	r2,r5,21
  807ad4:	a906d83a 	srl	r3,r21,r4
  807ad8:	a884983a 	sll	r2,r21,r2
  807adc:	1ccffc34 	orhi	r19,r3,16368
  807ae0:	11a4b03a 	or	r18,r2,r6
  807ae4:	9005883a 	mov	r2,r18
  807ae8:	9807883a 	mov	r3,r19
  807aec:	dfc00617 	ldw	ra,24(sp)
  807af0:	dd400517 	ldw	r21,20(sp)
  807af4:	dd000417 	ldw	r20,16(sp)
  807af8:	dcc00317 	ldw	r19,12(sp)
  807afc:	dc800217 	ldw	r18,8(sp)
  807b00:	dc400117 	ldw	r17,4(sp)
  807b04:	dc000017 	ldw	r16,0(sp)
  807b08:	dec00704 	addi	sp,sp,28
  807b0c:	f800283a 	ret
  807b10:	a0c00e36 	bltu	r20,r3,807b4c <__b2d+0xec>
  807b14:	293ffd44 	addi	r4,r5,-11
  807b18:	000d883a 	mov	r6,zero
  807b1c:	20000f26 	beq	r4,zero,807b5c <__b2d+0xfc>
  807b20:	00800804 	movi	r2,32
  807b24:	110bc83a 	sub	r5,r2,r4
  807b28:	a0c01236 	bltu	r20,r3,807b74 <__b2d+0x114>
  807b2c:	000f883a 	mov	r7,zero
  807b30:	a904983a 	sll	r2,r21,r4
  807b34:	3146d83a 	srl	r3,r6,r5
  807b38:	3108983a 	sll	r4,r6,r4
  807b3c:	108ffc34 	orhi	r2,r2,16368
  807b40:	18a6b03a 	or	r19,r3,r2
  807b44:	3924b03a 	or	r18,r7,r4
  807b48:	003fe606 	br	807ae4 <__b2d+0x84>
  807b4c:	293ffd44 	addi	r4,r5,-11
  807b50:	81bffe17 	ldw	r6,-8(r16)
  807b54:	80fffe04 	addi	r3,r16,-8
  807b58:	203ff11e 	bne	r4,zero,807b20 <__b2d+0xc0>
  807b5c:	accffc34 	orhi	r19,r21,16368
  807b60:	3025883a 	mov	r18,r6
  807b64:	003fdf06 	br	807ae4 <__b2d+0x84>
  807b68:	18bfff17 	ldw	r2,-4(r3)
  807b6c:	110cd83a 	srl	r6,r2,r4
  807b70:	003fd706 	br	807ad0 <__b2d+0x70>
  807b74:	18bfff17 	ldw	r2,-4(r3)
  807b78:	114ed83a 	srl	r7,r2,r5
  807b7c:	003fec06 	br	807b30 <__b2d+0xd0>

00807b80 <__ratio>:
  807b80:	defff904 	addi	sp,sp,-28
  807b84:	dc400215 	stw	r17,8(sp)
  807b88:	2823883a 	mov	r17,r5
  807b8c:	d80b883a 	mov	r5,sp
  807b90:	dfc00615 	stw	ra,24(sp)
  807b94:	dd000515 	stw	r20,20(sp)
  807b98:	dcc00415 	stw	r19,16(sp)
  807b9c:	dc800315 	stw	r18,12(sp)
  807ba0:	2025883a 	mov	r18,r4
  807ba4:	0807a600 	call	807a60 <__b2d>
  807ba8:	8809883a 	mov	r4,r17
  807bac:	d9400104 	addi	r5,sp,4
  807bb0:	1027883a 	mov	r19,r2
  807bb4:	1829883a 	mov	r20,r3
  807bb8:	0807a600 	call	807a60 <__b2d>
  807bbc:	89000417 	ldw	r4,16(r17)
  807bc0:	91c00417 	ldw	r7,16(r18)
  807bc4:	d9800117 	ldw	r6,4(sp)
  807bc8:	180b883a 	mov	r5,r3
  807bcc:	390fc83a 	sub	r7,r7,r4
  807bd0:	1009883a 	mov	r4,r2
  807bd4:	d8800017 	ldw	r2,0(sp)
  807bd8:	380e917a 	slli	r7,r7,5
  807bdc:	2011883a 	mov	r8,r4
  807be0:	1185c83a 	sub	r2,r2,r6
  807be4:	11c5883a 	add	r2,r2,r7
  807be8:	1006953a 	slli	r3,r2,20
  807bec:	2813883a 	mov	r9,r5
  807bf0:	00800d0e 	bge	zero,r2,807c28 <__ratio+0xa8>
  807bf4:	1d29883a 	add	r20,r3,r20
  807bf8:	a00b883a 	mov	r5,r20
  807bfc:	480f883a 	mov	r7,r9
  807c00:	9809883a 	mov	r4,r19
  807c04:	400d883a 	mov	r6,r8
  807c08:	080a7f00 	call	80a7f0 <__divdf3>
  807c0c:	dfc00617 	ldw	ra,24(sp)
  807c10:	dd000517 	ldw	r20,20(sp)
  807c14:	dcc00417 	ldw	r19,16(sp)
  807c18:	dc800317 	ldw	r18,12(sp)
  807c1c:	dc400217 	ldw	r17,8(sp)
  807c20:	dec00704 	addi	sp,sp,28
  807c24:	f800283a 	ret
  807c28:	28d3c83a 	sub	r9,r5,r3
  807c2c:	003ff206 	br	807bf8 <__ratio+0x78>

00807c30 <_mprec_log10>:
  807c30:	defffe04 	addi	sp,sp,-8
  807c34:	008005c4 	movi	r2,23
  807c38:	dc000015 	stw	r16,0(sp)
  807c3c:	dfc00115 	stw	ra,4(sp)
  807c40:	2021883a 	mov	r16,r4
  807c44:	11000c16 	blt	r2,r4,807c78 <_mprec_log10+0x48>
  807c48:	200490fa 	slli	r2,r4,3
  807c4c:	00c02074 	movhi	r3,129
  807c50:	18c07304 	addi	r3,r3,460
  807c54:	10c5883a 	add	r2,r2,r3
  807c58:	12400117 	ldw	r9,4(r2)
  807c5c:	12000017 	ldw	r8,0(r2)
  807c60:	4807883a 	mov	r3,r9
  807c64:	4005883a 	mov	r2,r8
  807c68:	dfc00117 	ldw	ra,4(sp)
  807c6c:	dc000017 	ldw	r16,0(sp)
  807c70:	dec00204 	addi	sp,sp,8
  807c74:	f800283a 	ret
  807c78:	0011883a 	mov	r8,zero
  807c7c:	024ffc34 	movhi	r9,16368
  807c80:	0005883a 	mov	r2,zero
  807c84:	00d00934 	movhi	r3,16420
  807c88:	480b883a 	mov	r5,r9
  807c8c:	4009883a 	mov	r4,r8
  807c90:	180f883a 	mov	r7,r3
  807c94:	100d883a 	mov	r6,r2
  807c98:	080a42c0 	call	80a42c <__muldf3>
  807c9c:	843fffc4 	addi	r16,r16,-1
  807ca0:	1011883a 	mov	r8,r2
  807ca4:	1813883a 	mov	r9,r3
  807ca8:	803ff51e 	bne	r16,zero,807c80 <_mprec_log10+0x50>
  807cac:	4005883a 	mov	r2,r8
  807cb0:	4807883a 	mov	r3,r9
  807cb4:	dfc00117 	ldw	ra,4(sp)
  807cb8:	dc000017 	ldw	r16,0(sp)
  807cbc:	dec00204 	addi	sp,sp,8
  807cc0:	f800283a 	ret

00807cc4 <__copybits>:
  807cc4:	297fffc4 	addi	r5,r5,-1
  807cc8:	30800417 	ldw	r2,16(r6)
  807ccc:	280bd17a 	srai	r5,r5,5
  807cd0:	31800504 	addi	r6,r6,20
  807cd4:	1085883a 	add	r2,r2,r2
  807cd8:	294b883a 	add	r5,r5,r5
  807cdc:	294b883a 	add	r5,r5,r5
  807ce0:	1085883a 	add	r2,r2,r2
  807ce4:	290b883a 	add	r5,r5,r4
  807ce8:	3087883a 	add	r3,r6,r2
  807cec:	29400104 	addi	r5,r5,4
  807cf0:	30c0052e 	bgeu	r6,r3,807d08 <__copybits+0x44>
  807cf4:	30800017 	ldw	r2,0(r6)
  807cf8:	31800104 	addi	r6,r6,4
  807cfc:	20800015 	stw	r2,0(r4)
  807d00:	21000104 	addi	r4,r4,4
  807d04:	30fffb36 	bltu	r6,r3,807cf4 <__copybits+0x30>
  807d08:	2140032e 	bgeu	r4,r5,807d18 <__copybits+0x54>
  807d0c:	20000015 	stw	zero,0(r4)
  807d10:	21000104 	addi	r4,r4,4
  807d14:	217ffd36 	bltu	r4,r5,807d0c <__copybits+0x48>
  807d18:	f800283a 	ret

00807d1c <__any_on>:
  807d1c:	20800417 	ldw	r2,16(r4)
  807d20:	2807d17a 	srai	r3,r5,5
  807d24:	21000504 	addi	r4,r4,20
  807d28:	10c00d0e 	bge	r2,r3,807d60 <__any_on+0x44>
  807d2c:	1085883a 	add	r2,r2,r2
  807d30:	1085883a 	add	r2,r2,r2
  807d34:	208d883a 	add	r6,r4,r2
  807d38:	2180182e 	bgeu	r4,r6,807d9c <__any_on+0x80>
  807d3c:	30bfff17 	ldw	r2,-4(r6)
  807d40:	30ffff04 	addi	r3,r6,-4
  807d44:	1000041e 	bne	r2,zero,807d58 <__any_on+0x3c>
  807d48:	20c0142e 	bgeu	r4,r3,807d9c <__any_on+0x80>
  807d4c:	18ffff04 	addi	r3,r3,-4
  807d50:	18800017 	ldw	r2,0(r3)
  807d54:	103ffc26 	beq	r2,zero,807d48 <__any_on+0x2c>
  807d58:	00800044 	movi	r2,1
  807d5c:	f800283a 	ret
  807d60:	18800a0e 	bge	r3,r2,807d8c <__any_on+0x70>
  807d64:	294007cc 	andi	r5,r5,31
  807d68:	28000826 	beq	r5,zero,807d8c <__any_on+0x70>
  807d6c:	18c5883a 	add	r2,r3,r3
  807d70:	1085883a 	add	r2,r2,r2
  807d74:	208d883a 	add	r6,r4,r2
  807d78:	30c00017 	ldw	r3,0(r6)
  807d7c:	1944d83a 	srl	r2,r3,r5
  807d80:	1144983a 	sll	r2,r2,r5
  807d84:	18bff41e 	bne	r3,r2,807d58 <__any_on+0x3c>
  807d88:	003feb06 	br	807d38 <__any_on+0x1c>
  807d8c:	18c5883a 	add	r2,r3,r3
  807d90:	1085883a 	add	r2,r2,r2
  807d94:	208d883a 	add	r6,r4,r2
  807d98:	003fe706 	br	807d38 <__any_on+0x1c>
  807d9c:	0005883a 	mov	r2,zero
  807da0:	f800283a 	ret

00807da4 <_Balloc>:
  807da4:	20c01317 	ldw	r3,76(r4)
  807da8:	defffb04 	addi	sp,sp,-20
  807dac:	dcc00315 	stw	r19,12(sp)
  807db0:	dc800215 	stw	r18,8(sp)
  807db4:	dfc00415 	stw	ra,16(sp)
  807db8:	2825883a 	mov	r18,r5
  807dbc:	dc400115 	stw	r17,4(sp)
  807dc0:	dc000015 	stw	r16,0(sp)
  807dc4:	2027883a 	mov	r19,r4
  807dc8:	01800404 	movi	r6,16
  807dcc:	01400104 	movi	r5,4
  807dd0:	18001726 	beq	r3,zero,807e30 <_Balloc+0x8c>
  807dd4:	01400044 	movi	r5,1
  807dd8:	9485883a 	add	r2,r18,r18
  807ddc:	2ca2983a 	sll	r17,r5,r18
  807de0:	1085883a 	add	r2,r2,r2
  807de4:	10c7883a 	add	r3,r2,r3
  807de8:	1c000017 	ldw	r16,0(r3)
  807dec:	8c4d883a 	add	r6,r17,r17
  807df0:	318d883a 	add	r6,r6,r6
  807df4:	9809883a 	mov	r4,r19
  807df8:	31800504 	addi	r6,r6,20
  807dfc:	80001226 	beq	r16,zero,807e48 <_Balloc+0xa4>
  807e00:	80800017 	ldw	r2,0(r16)
  807e04:	18800015 	stw	r2,0(r3)
  807e08:	80000415 	stw	zero,16(r16)
  807e0c:	80000315 	stw	zero,12(r16)
  807e10:	8005883a 	mov	r2,r16
  807e14:	dfc00417 	ldw	ra,16(sp)
  807e18:	dcc00317 	ldw	r19,12(sp)
  807e1c:	dc800217 	ldw	r18,8(sp)
  807e20:	dc400117 	ldw	r17,4(sp)
  807e24:	dc000017 	ldw	r16,0(sp)
  807e28:	dec00504 	addi	sp,sp,20
  807e2c:	f800283a 	ret
  807e30:	08092e80 	call	8092e8 <_calloc_r>
  807e34:	1007883a 	mov	r3,r2
  807e38:	0021883a 	mov	r16,zero
  807e3c:	98801315 	stw	r2,76(r19)
  807e40:	103fe41e 	bne	r2,zero,807dd4 <_Balloc+0x30>
  807e44:	003ff206 	br	807e10 <_Balloc+0x6c>
  807e48:	08092e80 	call	8092e8 <_calloc_r>
  807e4c:	103ff026 	beq	r2,zero,807e10 <_Balloc+0x6c>
  807e50:	1021883a 	mov	r16,r2
  807e54:	14800115 	stw	r18,4(r2)
  807e58:	14400215 	stw	r17,8(r2)
  807e5c:	003fea06 	br	807e08 <_Balloc+0x64>

00807e60 <__d2b>:
  807e60:	defff504 	addi	sp,sp,-44
  807e64:	dcc00515 	stw	r19,20(sp)
  807e68:	04c00044 	movi	r19,1
  807e6c:	dc000215 	stw	r16,8(sp)
  807e70:	2821883a 	mov	r16,r5
  807e74:	980b883a 	mov	r5,r19
  807e78:	ddc00915 	stw	r23,36(sp)
  807e7c:	dd800815 	stw	r22,32(sp)
  807e80:	dd400715 	stw	r21,28(sp)
  807e84:	dd000615 	stw	r20,24(sp)
  807e88:	dc800415 	stw	r18,16(sp)
  807e8c:	dc400315 	stw	r17,12(sp)
  807e90:	dfc00a15 	stw	ra,40(sp)
  807e94:	3023883a 	mov	r17,r6
  807e98:	382d883a 	mov	r22,r7
  807e9c:	ddc00b17 	ldw	r23,44(sp)
  807ea0:	0807da40 	call	807da4 <_Balloc>
  807ea4:	1025883a 	mov	r18,r2
  807ea8:	00a00034 	movhi	r2,32768
  807eac:	10bfffc4 	addi	r2,r2,-1
  807eb0:	8888703a 	and	r4,r17,r2
  807eb4:	202ad53a 	srli	r21,r4,20
  807eb8:	00800434 	movhi	r2,16
  807ebc:	10bfffc4 	addi	r2,r2,-1
  807ec0:	8886703a 	and	r3,r17,r2
  807ec4:	a829003a 	cmpeq	r20,r21,zero
  807ec8:	800b883a 	mov	r5,r16
  807ecc:	d8c00115 	stw	r3,4(sp)
  807ed0:	94000504 	addi	r16,r18,20
  807ed4:	a000021e 	bne	r20,zero,807ee0 <__d2b+0x80>
  807ed8:	18c00434 	orhi	r3,r3,16
  807edc:	d8c00115 	stw	r3,4(sp)
  807ee0:	28002726 	beq	r5,zero,807f80 <__d2b+0x120>
  807ee4:	d809883a 	mov	r4,sp
  807ee8:	d9400015 	stw	r5,0(sp)
  807eec:	08078bc0 	call	8078bc <__lo0bits>
  807ef0:	100d883a 	mov	r6,r2
  807ef4:	10003526 	beq	r2,zero,807fcc <__d2b+0x16c>
  807ef8:	d8c00117 	ldw	r3,4(sp)
  807efc:	00800804 	movi	r2,32
  807f00:	1185c83a 	sub	r2,r2,r6
  807f04:	d9000017 	ldw	r4,0(sp)
  807f08:	1886983a 	sll	r3,r3,r2
  807f0c:	1906b03a 	or	r3,r3,r4
  807f10:	90c00515 	stw	r3,20(r18)
  807f14:	d8c00117 	ldw	r3,4(sp)
  807f18:	1986d83a 	srl	r3,r3,r6
  807f1c:	d8c00115 	stw	r3,4(sp)
  807f20:	180b003a 	cmpeq	r5,r3,zero
  807f24:	00800084 	movi	r2,2
  807f28:	114bc83a 	sub	r5,r2,r5
  807f2c:	80c00115 	stw	r3,4(r16)
  807f30:	91400415 	stw	r5,16(r18)
  807f34:	a0001a1e 	bne	r20,zero,807fa0 <__d2b+0x140>
  807f38:	3545883a 	add	r2,r6,r21
  807f3c:	10bef344 	addi	r2,r2,-1075
  807f40:	00c00d44 	movi	r3,53
  807f44:	b0800015 	stw	r2,0(r22)
  807f48:	1987c83a 	sub	r3,r3,r6
  807f4c:	b8c00015 	stw	r3,0(r23)
  807f50:	9005883a 	mov	r2,r18
  807f54:	dfc00a17 	ldw	ra,40(sp)
  807f58:	ddc00917 	ldw	r23,36(sp)
  807f5c:	dd800817 	ldw	r22,32(sp)
  807f60:	dd400717 	ldw	r21,28(sp)
  807f64:	dd000617 	ldw	r20,24(sp)
  807f68:	dcc00517 	ldw	r19,20(sp)
  807f6c:	dc800417 	ldw	r18,16(sp)
  807f70:	dc400317 	ldw	r17,12(sp)
  807f74:	dc000217 	ldw	r16,8(sp)
  807f78:	dec00b04 	addi	sp,sp,44
  807f7c:	f800283a 	ret
  807f80:	d9000104 	addi	r4,sp,4
  807f84:	08078bc0 	call	8078bc <__lo0bits>
  807f88:	11800804 	addi	r6,r2,32
  807f8c:	d8800117 	ldw	r2,4(sp)
  807f90:	94c00415 	stw	r19,16(r18)
  807f94:	980b883a 	mov	r5,r19
  807f98:	90800515 	stw	r2,20(r18)
  807f9c:	a03fe626 	beq	r20,zero,807f38 <__d2b+0xd8>
  807fa0:	2945883a 	add	r2,r5,r5
  807fa4:	1085883a 	add	r2,r2,r2
  807fa8:	1405883a 	add	r2,r2,r16
  807fac:	113fff17 	ldw	r4,-4(r2)
  807fb0:	30fef384 	addi	r3,r6,-1074
  807fb4:	2820917a 	slli	r16,r5,5
  807fb8:	b0c00015 	stw	r3,0(r22)
  807fbc:	080784c0 	call	80784c <__hi0bits>
  807fc0:	80a1c83a 	sub	r16,r16,r2
  807fc4:	bc000015 	stw	r16,0(r23)
  807fc8:	003fe106 	br	807f50 <__d2b+0xf0>
  807fcc:	d8800017 	ldw	r2,0(sp)
  807fd0:	90800515 	stw	r2,20(r18)
  807fd4:	d8c00117 	ldw	r3,4(sp)
  807fd8:	003fd106 	br	807f20 <__d2b+0xc0>

00807fdc <__mdiff>:
  807fdc:	defffb04 	addi	sp,sp,-20
  807fe0:	dc000015 	stw	r16,0(sp)
  807fe4:	2821883a 	mov	r16,r5
  807fe8:	dc800215 	stw	r18,8(sp)
  807fec:	300b883a 	mov	r5,r6
  807ff0:	2025883a 	mov	r18,r4
  807ff4:	8009883a 	mov	r4,r16
  807ff8:	dc400115 	stw	r17,4(sp)
  807ffc:	dfc00415 	stw	ra,16(sp)
  808000:	dcc00315 	stw	r19,12(sp)
  808004:	3023883a 	mov	r17,r6
  808008:	08079800 	call	807980 <__mcmp>
  80800c:	10004226 	beq	r2,zero,808118 <__mdiff+0x13c>
  808010:	10005016 	blt	r2,zero,808154 <__mdiff+0x178>
  808014:	0027883a 	mov	r19,zero
  808018:	81400117 	ldw	r5,4(r16)
  80801c:	9009883a 	mov	r4,r18
  808020:	0807da40 	call	807da4 <_Balloc>
  808024:	1019883a 	mov	r12,r2
  808028:	82800417 	ldw	r10,16(r16)
  80802c:	88800417 	ldw	r2,16(r17)
  808030:	81800504 	addi	r6,r16,20
  808034:	5287883a 	add	r3,r10,r10
  808038:	1085883a 	add	r2,r2,r2
  80803c:	18c7883a 	add	r3,r3,r3
  808040:	1085883a 	add	r2,r2,r2
  808044:	8a000504 	addi	r8,r17,20
  808048:	64c00315 	stw	r19,12(r12)
  80804c:	30db883a 	add	r13,r6,r3
  808050:	4097883a 	add	r11,r8,r2
  808054:	61c00504 	addi	r7,r12,20
  808058:	0013883a 	mov	r9,zero
  80805c:	31000017 	ldw	r4,0(r6)
  808060:	41400017 	ldw	r5,0(r8)
  808064:	42000104 	addi	r8,r8,4
  808068:	20bfffcc 	andi	r2,r4,65535
  80806c:	28ffffcc 	andi	r3,r5,65535
  808070:	10c5c83a 	sub	r2,r2,r3
  808074:	1245883a 	add	r2,r2,r9
  808078:	2008d43a 	srli	r4,r4,16
  80807c:	280ad43a 	srli	r5,r5,16
  808080:	1007d43a 	srai	r3,r2,16
  808084:	3880000d 	sth	r2,0(r7)
  808088:	2149c83a 	sub	r4,r4,r5
  80808c:	20c9883a 	add	r4,r4,r3
  808090:	3900008d 	sth	r4,2(r7)
  808094:	31800104 	addi	r6,r6,4
  808098:	39c00104 	addi	r7,r7,4
  80809c:	2013d43a 	srai	r9,r4,16
  8080a0:	42ffee36 	bltu	r8,r11,80805c <__mdiff+0x80>
  8080a4:	33400c2e 	bgeu	r6,r13,8080d8 <__mdiff+0xfc>
  8080a8:	30800017 	ldw	r2,0(r6)
  8080ac:	31800104 	addi	r6,r6,4
  8080b0:	10ffffcc 	andi	r3,r2,65535
  8080b4:	1a47883a 	add	r3,r3,r9
  8080b8:	1004d43a 	srli	r2,r2,16
  8080bc:	1809d43a 	srai	r4,r3,16
  8080c0:	38c0000d 	sth	r3,0(r7)
  8080c4:	1105883a 	add	r2,r2,r4
  8080c8:	3880008d 	sth	r2,2(r7)
  8080cc:	1013d43a 	srai	r9,r2,16
  8080d0:	39c00104 	addi	r7,r7,4
  8080d4:	337ff436 	bltu	r6,r13,8080a8 <__mdiff+0xcc>
  8080d8:	38bfff17 	ldw	r2,-4(r7)
  8080dc:	38ffff04 	addi	r3,r7,-4
  8080e0:	1000041e 	bne	r2,zero,8080f4 <__mdiff+0x118>
  8080e4:	18ffff04 	addi	r3,r3,-4
  8080e8:	18800017 	ldw	r2,0(r3)
  8080ec:	52bfffc4 	addi	r10,r10,-1
  8080f0:	103ffc26 	beq	r2,zero,8080e4 <__mdiff+0x108>
  8080f4:	6005883a 	mov	r2,r12
  8080f8:	62800415 	stw	r10,16(r12)
  8080fc:	dfc00417 	ldw	ra,16(sp)
  808100:	dcc00317 	ldw	r19,12(sp)
  808104:	dc800217 	ldw	r18,8(sp)
  808108:	dc400117 	ldw	r17,4(sp)
  80810c:	dc000017 	ldw	r16,0(sp)
  808110:	dec00504 	addi	sp,sp,20
  808114:	f800283a 	ret
  808118:	9009883a 	mov	r4,r18
  80811c:	000b883a 	mov	r5,zero
  808120:	0807da40 	call	807da4 <_Balloc>
  808124:	1019883a 	mov	r12,r2
  808128:	00800044 	movi	r2,1
  80812c:	60800415 	stw	r2,16(r12)
  808130:	6005883a 	mov	r2,r12
  808134:	60000515 	stw	zero,20(r12)
  808138:	dfc00417 	ldw	ra,16(sp)
  80813c:	dcc00317 	ldw	r19,12(sp)
  808140:	dc800217 	ldw	r18,8(sp)
  808144:	dc400117 	ldw	r17,4(sp)
  808148:	dc000017 	ldw	r16,0(sp)
  80814c:	dec00504 	addi	sp,sp,20
  808150:	f800283a 	ret
  808154:	880d883a 	mov	r6,r17
  808158:	04c00044 	movi	r19,1
  80815c:	8023883a 	mov	r17,r16
  808160:	3021883a 	mov	r16,r6
  808164:	003fac06 	br	808018 <__mdiff+0x3c>

00808168 <__lshift>:
  808168:	defff904 	addi	sp,sp,-28
  80816c:	28800417 	ldw	r2,16(r5)
  808170:	dc000015 	stw	r16,0(sp)
  808174:	3021d17a 	srai	r16,r6,5
  808178:	28c00217 	ldw	r3,8(r5)
  80817c:	10800044 	addi	r2,r2,1
  808180:	dc400115 	stw	r17,4(sp)
  808184:	80a3883a 	add	r17,r16,r2
  808188:	dd400515 	stw	r21,20(sp)
  80818c:	dd000415 	stw	r20,16(sp)
  808190:	dc800215 	stw	r18,8(sp)
  808194:	dfc00615 	stw	ra,24(sp)
  808198:	2825883a 	mov	r18,r5
  80819c:	dcc00315 	stw	r19,12(sp)
  8081a0:	3029883a 	mov	r20,r6
  8081a4:	202b883a 	mov	r21,r4
  8081a8:	29400117 	ldw	r5,4(r5)
  8081ac:	1c40030e 	bge	r3,r17,8081bc <__lshift+0x54>
  8081b0:	18c7883a 	add	r3,r3,r3
  8081b4:	29400044 	addi	r5,r5,1
  8081b8:	1c7ffd16 	blt	r3,r17,8081b0 <__lshift+0x48>
  8081bc:	a809883a 	mov	r4,r21
  8081c0:	0807da40 	call	807da4 <_Balloc>
  8081c4:	1027883a 	mov	r19,r2
  8081c8:	11400504 	addi	r5,r2,20
  8081cc:	0400090e 	bge	zero,r16,8081f4 <__lshift+0x8c>
  8081d0:	2805883a 	mov	r2,r5
  8081d4:	0007883a 	mov	r3,zero
  8081d8:	18c00044 	addi	r3,r3,1
  8081dc:	10000015 	stw	zero,0(r2)
  8081e0:	10800104 	addi	r2,r2,4
  8081e4:	80fffc1e 	bne	r16,r3,8081d8 <__lshift+0x70>
  8081e8:	8405883a 	add	r2,r16,r16
  8081ec:	1085883a 	add	r2,r2,r2
  8081f0:	288b883a 	add	r5,r5,r2
  8081f4:	90800417 	ldw	r2,16(r18)
  8081f8:	91000504 	addi	r4,r18,20
  8081fc:	a18007cc 	andi	r6,r20,31
  808200:	1085883a 	add	r2,r2,r2
  808204:	1085883a 	add	r2,r2,r2
  808208:	208f883a 	add	r7,r4,r2
  80820c:	30001e26 	beq	r6,zero,808288 <__lshift+0x120>
  808210:	00800804 	movi	r2,32
  808214:	1191c83a 	sub	r8,r2,r6
  808218:	0007883a 	mov	r3,zero
  80821c:	20800017 	ldw	r2,0(r4)
  808220:	1184983a 	sll	r2,r2,r6
  808224:	1884b03a 	or	r2,r3,r2
  808228:	28800015 	stw	r2,0(r5)
  80822c:	20c00017 	ldw	r3,0(r4)
  808230:	21000104 	addi	r4,r4,4
  808234:	29400104 	addi	r5,r5,4
  808238:	1a06d83a 	srl	r3,r3,r8
  80823c:	21fff736 	bltu	r4,r7,80821c <__lshift+0xb4>
  808240:	28c00015 	stw	r3,0(r5)
  808244:	18000126 	beq	r3,zero,80824c <__lshift+0xe4>
  808248:	8c400044 	addi	r17,r17,1
  80824c:	88bfffc4 	addi	r2,r17,-1
  808250:	98800415 	stw	r2,16(r19)
  808254:	a809883a 	mov	r4,r21
  808258:	900b883a 	mov	r5,r18
  80825c:	08078240 	call	807824 <_Bfree>
  808260:	9805883a 	mov	r2,r19
  808264:	dfc00617 	ldw	ra,24(sp)
  808268:	dd400517 	ldw	r21,20(sp)
  80826c:	dd000417 	ldw	r20,16(sp)
  808270:	dcc00317 	ldw	r19,12(sp)
  808274:	dc800217 	ldw	r18,8(sp)
  808278:	dc400117 	ldw	r17,4(sp)
  80827c:	dc000017 	ldw	r16,0(sp)
  808280:	dec00704 	addi	sp,sp,28
  808284:	f800283a 	ret
  808288:	20800017 	ldw	r2,0(r4)
  80828c:	21000104 	addi	r4,r4,4
  808290:	28800015 	stw	r2,0(r5)
  808294:	29400104 	addi	r5,r5,4
  808298:	21ffec2e 	bgeu	r4,r7,80824c <__lshift+0xe4>
  80829c:	20800017 	ldw	r2,0(r4)
  8082a0:	21000104 	addi	r4,r4,4
  8082a4:	28800015 	stw	r2,0(r5)
  8082a8:	29400104 	addi	r5,r5,4
  8082ac:	21fff636 	bltu	r4,r7,808288 <__lshift+0x120>
  8082b0:	003fe606 	br	80824c <__lshift+0xe4>

008082b4 <__multiply>:
  8082b4:	defff904 	addi	sp,sp,-28
  8082b8:	dcc00315 	stw	r19,12(sp)
  8082bc:	dc800215 	stw	r18,8(sp)
  8082c0:	2cc00417 	ldw	r19,16(r5)
  8082c4:	34800417 	ldw	r18,16(r6)
  8082c8:	dd000415 	stw	r20,16(sp)
  8082cc:	dc400115 	stw	r17,4(sp)
  8082d0:	dfc00615 	stw	ra,24(sp)
  8082d4:	dd400515 	stw	r21,20(sp)
  8082d8:	dc000015 	stw	r16,0(sp)
  8082dc:	2823883a 	mov	r17,r5
  8082e0:	3029883a 	mov	r20,r6
  8082e4:	9c80040e 	bge	r19,r18,8082f8 <__multiply+0x44>
  8082e8:	9027883a 	mov	r19,r18
  8082ec:	2c800417 	ldw	r18,16(r5)
  8082f0:	2829883a 	mov	r20,r5
  8082f4:	3023883a 	mov	r17,r6
  8082f8:	88800217 	ldw	r2,8(r17)
  8082fc:	9ca1883a 	add	r16,r19,r18
  808300:	89400117 	ldw	r5,4(r17)
  808304:	1400010e 	bge	r2,r16,80830c <__multiply+0x58>
  808308:	29400044 	addi	r5,r5,1
  80830c:	0807da40 	call	807da4 <_Balloc>
  808310:	102b883a 	mov	r21,r2
  808314:	8405883a 	add	r2,r16,r16
  808318:	1085883a 	add	r2,r2,r2
  80831c:	a9000504 	addi	r4,r21,20
  808320:	209d883a 	add	r14,r4,r2
  808324:	2380042e 	bgeu	r4,r14,808338 <__multiply+0x84>
  808328:	2005883a 	mov	r2,r4
  80832c:	10000015 	stw	zero,0(r2)
  808330:	10800104 	addi	r2,r2,4
  808334:	13bffd36 	bltu	r2,r14,80832c <__multiply+0x78>
  808338:	9485883a 	add	r2,r18,r18
  80833c:	9cc7883a 	add	r3,r19,r19
  808340:	a1800504 	addi	r6,r20,20
  808344:	1085883a 	add	r2,r2,r2
  808348:	8b400504 	addi	r13,r17,20
  80834c:	18c7883a 	add	r3,r3,r3
  808350:	309f883a 	add	r15,r6,r2
  808354:	68d7883a 	add	r11,r13,r3
  808358:	33c03b2e 	bgeu	r6,r15,808448 <__multiply+0x194>
  80835c:	2019883a 	mov	r12,r4
  808360:	30800017 	ldw	r2,0(r6)
  808364:	127fffcc 	andi	r9,r2,65535
  808368:	48001826 	beq	r9,zero,8083cc <__multiply+0x118>
  80836c:	6811883a 	mov	r8,r13
  808370:	600f883a 	mov	r7,r12
  808374:	0015883a 	mov	r10,zero
  808378:	40c00017 	ldw	r3,0(r8)
  80837c:	39400017 	ldw	r5,0(r7)
  808380:	42000104 	addi	r8,r8,4
  808384:	193fffcc 	andi	r4,r3,65535
  808388:	4909383a 	mul	r4,r9,r4
  80838c:	1806d43a 	srli	r3,r3,16
  808390:	28bfffcc 	andi	r2,r5,65535
  808394:	5085883a 	add	r2,r10,r2
  808398:	2089883a 	add	r4,r4,r2
  80839c:	48c7383a 	mul	r3,r9,r3
  8083a0:	280ad43a 	srli	r5,r5,16
  8083a4:	2004d43a 	srli	r2,r4,16
  8083a8:	3900000d 	sth	r4,0(r7)
  8083ac:	1947883a 	add	r3,r3,r5
  8083b0:	10c5883a 	add	r2,r2,r3
  8083b4:	3880008d 	sth	r2,2(r7)
  8083b8:	1014d43a 	srli	r10,r2,16
  8083bc:	39c00104 	addi	r7,r7,4
  8083c0:	42ffed36 	bltu	r8,r11,808378 <__multiply+0xc4>
  8083c4:	3a800015 	stw	r10,0(r7)
  8083c8:	30800017 	ldw	r2,0(r6)
  8083cc:	1012d43a 	srli	r9,r2,16
  8083d0:	48001926 	beq	r9,zero,808438 <__multiply+0x184>
  8083d4:	60800017 	ldw	r2,0(r12)
  8083d8:	6811883a 	mov	r8,r13
  8083dc:	600f883a 	mov	r7,r12
  8083e0:	0015883a 	mov	r10,zero
  8083e4:	100b883a 	mov	r5,r2
  8083e8:	41000017 	ldw	r4,0(r8)
  8083ec:	2806d43a 	srli	r3,r5,16
  8083f0:	3880000d 	sth	r2,0(r7)
  8083f4:	20bfffcc 	andi	r2,r4,65535
  8083f8:	4885383a 	mul	r2,r9,r2
  8083fc:	50c7883a 	add	r3,r10,r3
  808400:	2008d43a 	srli	r4,r4,16
  808404:	10c5883a 	add	r2,r2,r3
  808408:	3880008d 	sth	r2,2(r7)
  80840c:	39c00104 	addi	r7,r7,4
  808410:	39400017 	ldw	r5,0(r7)
  808414:	4909383a 	mul	r4,r9,r4
  808418:	1004d43a 	srli	r2,r2,16
  80841c:	28ffffcc 	andi	r3,r5,65535
  808420:	20c9883a 	add	r4,r4,r3
  808424:	1105883a 	add	r2,r2,r4
  808428:	42000104 	addi	r8,r8,4
  80842c:	1014d43a 	srli	r10,r2,16
  808430:	42ffed36 	bltu	r8,r11,8083e8 <__multiply+0x134>
  808434:	38800015 	stw	r2,0(r7)
  808438:	31800104 	addi	r6,r6,4
  80843c:	33c0022e 	bgeu	r6,r15,808448 <__multiply+0x194>
  808440:	63000104 	addi	r12,r12,4
  808444:	003fc606 	br	808360 <__multiply+0xac>
  808448:	0400090e 	bge	zero,r16,808470 <__multiply+0x1bc>
  80844c:	70bfff17 	ldw	r2,-4(r14)
  808450:	70ffff04 	addi	r3,r14,-4
  808454:	10000326 	beq	r2,zero,808464 <__multiply+0x1b0>
  808458:	00000506 	br	808470 <__multiply+0x1bc>
  80845c:	18800017 	ldw	r2,0(r3)
  808460:	1000031e 	bne	r2,zero,808470 <__multiply+0x1bc>
  808464:	843fffc4 	addi	r16,r16,-1
  808468:	18ffff04 	addi	r3,r3,-4
  80846c:	803ffb1e 	bne	r16,zero,80845c <__multiply+0x1a8>
  808470:	a805883a 	mov	r2,r21
  808474:	ac000415 	stw	r16,16(r21)
  808478:	dfc00617 	ldw	ra,24(sp)
  80847c:	dd400517 	ldw	r21,20(sp)
  808480:	dd000417 	ldw	r20,16(sp)
  808484:	dcc00317 	ldw	r19,12(sp)
  808488:	dc800217 	ldw	r18,8(sp)
  80848c:	dc400117 	ldw	r17,4(sp)
  808490:	dc000017 	ldw	r16,0(sp)
  808494:	dec00704 	addi	sp,sp,28
  808498:	f800283a 	ret

0080849c <__i2b>:
  80849c:	defffd04 	addi	sp,sp,-12
  8084a0:	dc000015 	stw	r16,0(sp)
  8084a4:	04000044 	movi	r16,1
  8084a8:	dc800115 	stw	r18,4(sp)
  8084ac:	2825883a 	mov	r18,r5
  8084b0:	800b883a 	mov	r5,r16
  8084b4:	dfc00215 	stw	ra,8(sp)
  8084b8:	0807da40 	call	807da4 <_Balloc>
  8084bc:	14000415 	stw	r16,16(r2)
  8084c0:	14800515 	stw	r18,20(r2)
  8084c4:	dfc00217 	ldw	ra,8(sp)
  8084c8:	dc800117 	ldw	r18,4(sp)
  8084cc:	dc000017 	ldw	r16,0(sp)
  8084d0:	dec00304 	addi	sp,sp,12
  8084d4:	f800283a 	ret

008084d8 <__multadd>:
  8084d8:	defffa04 	addi	sp,sp,-24
  8084dc:	dc800215 	stw	r18,8(sp)
  8084e0:	2c800417 	ldw	r18,16(r5)
  8084e4:	dd000415 	stw	r20,16(sp)
  8084e8:	dcc00315 	stw	r19,12(sp)
  8084ec:	dc000015 	stw	r16,0(sp)
  8084f0:	dfc00515 	stw	ra,20(sp)
  8084f4:	3821883a 	mov	r16,r7
  8084f8:	dc400115 	stw	r17,4(sp)
  8084fc:	2827883a 	mov	r19,r5
  808500:	2029883a 	mov	r20,r4
  808504:	2a000504 	addi	r8,r5,20
  808508:	000f883a 	mov	r7,zero
  80850c:	40800017 	ldw	r2,0(r8)
  808510:	39c00044 	addi	r7,r7,1
  808514:	10ffffcc 	andi	r3,r2,65535
  808518:	1987383a 	mul	r3,r3,r6
  80851c:	1004d43a 	srli	r2,r2,16
  808520:	1c07883a 	add	r3,r3,r16
  808524:	180ad43a 	srli	r5,r3,16
  808528:	1185383a 	mul	r2,r2,r6
  80852c:	18ffffcc 	andi	r3,r3,65535
  808530:	1145883a 	add	r2,r2,r5
  808534:	1008943a 	slli	r4,r2,16
  808538:	1020d43a 	srli	r16,r2,16
  80853c:	20c9883a 	add	r4,r4,r3
  808540:	41000015 	stw	r4,0(r8)
  808544:	42000104 	addi	r8,r8,4
  808548:	3cbff016 	blt	r7,r18,80850c <__multadd+0x34>
  80854c:	80000826 	beq	r16,zero,808570 <__multadd+0x98>
  808550:	98800217 	ldw	r2,8(r19)
  808554:	90800f0e 	bge	r18,r2,808594 <__multadd+0xbc>
  808558:	9485883a 	add	r2,r18,r18
  80855c:	1085883a 	add	r2,r2,r2
  808560:	14c5883a 	add	r2,r2,r19
  808564:	90c00044 	addi	r3,r18,1
  808568:	14000515 	stw	r16,20(r2)
  80856c:	98c00415 	stw	r3,16(r19)
  808570:	9805883a 	mov	r2,r19
  808574:	dfc00517 	ldw	ra,20(sp)
  808578:	dd000417 	ldw	r20,16(sp)
  80857c:	dcc00317 	ldw	r19,12(sp)
  808580:	dc800217 	ldw	r18,8(sp)
  808584:	dc400117 	ldw	r17,4(sp)
  808588:	dc000017 	ldw	r16,0(sp)
  80858c:	dec00604 	addi	sp,sp,24
  808590:	f800283a 	ret
  808594:	99400117 	ldw	r5,4(r19)
  808598:	a009883a 	mov	r4,r20
  80859c:	29400044 	addi	r5,r5,1
  8085a0:	0807da40 	call	807da4 <_Balloc>
  8085a4:	99800417 	ldw	r6,16(r19)
  8085a8:	99400304 	addi	r5,r19,12
  8085ac:	11000304 	addi	r4,r2,12
  8085b0:	318d883a 	add	r6,r6,r6
  8085b4:	318d883a 	add	r6,r6,r6
  8085b8:	31800204 	addi	r6,r6,8
  8085bc:	1023883a 	mov	r17,r2
  8085c0:	08076a40 	call	8076a4 <memcpy>
  8085c4:	980b883a 	mov	r5,r19
  8085c8:	a009883a 	mov	r4,r20
  8085cc:	08078240 	call	807824 <_Bfree>
  8085d0:	8827883a 	mov	r19,r17
  8085d4:	003fe006 	br	808558 <__multadd+0x80>

008085d8 <__pow5mult>:
  8085d8:	defffa04 	addi	sp,sp,-24
  8085dc:	308000cc 	andi	r2,r6,3
  8085e0:	dd000415 	stw	r20,16(sp)
  8085e4:	dcc00315 	stw	r19,12(sp)
  8085e8:	dc000015 	stw	r16,0(sp)
  8085ec:	dfc00515 	stw	ra,20(sp)
  8085f0:	dc800215 	stw	r18,8(sp)
  8085f4:	dc400115 	stw	r17,4(sp)
  8085f8:	3021883a 	mov	r16,r6
  8085fc:	2027883a 	mov	r19,r4
  808600:	2829883a 	mov	r20,r5
  808604:	10002b1e 	bne	r2,zero,8086b4 <__pow5mult+0xdc>
  808608:	8025d0ba 	srai	r18,r16,2
  80860c:	90001b26 	beq	r18,zero,80867c <__pow5mult+0xa4>
  808610:	9c001217 	ldw	r16,72(r19)
  808614:	8000081e 	bne	r16,zero,808638 <__pow5mult+0x60>
  808618:	00003006 	br	8086dc <__pow5mult+0x104>
  80861c:	800b883a 	mov	r5,r16
  808620:	800d883a 	mov	r6,r16
  808624:	9809883a 	mov	r4,r19
  808628:	90001426 	beq	r18,zero,80867c <__pow5mult+0xa4>
  80862c:	80800017 	ldw	r2,0(r16)
  808630:	10001b26 	beq	r2,zero,8086a0 <__pow5mult+0xc8>
  808634:	1021883a 	mov	r16,r2
  808638:	9080004c 	andi	r2,r18,1
  80863c:	1005003a 	cmpeq	r2,r2,zero
  808640:	9025d07a 	srai	r18,r18,1
  808644:	800d883a 	mov	r6,r16
  808648:	9809883a 	mov	r4,r19
  80864c:	a00b883a 	mov	r5,r20
  808650:	103ff21e 	bne	r2,zero,80861c <__pow5mult+0x44>
  808654:	08082b40 	call	8082b4 <__multiply>
  808658:	a00b883a 	mov	r5,r20
  80865c:	9809883a 	mov	r4,r19
  808660:	1023883a 	mov	r17,r2
  808664:	08078240 	call	807824 <_Bfree>
  808668:	8829883a 	mov	r20,r17
  80866c:	800b883a 	mov	r5,r16
  808670:	800d883a 	mov	r6,r16
  808674:	9809883a 	mov	r4,r19
  808678:	903fec1e 	bne	r18,zero,80862c <__pow5mult+0x54>
  80867c:	a005883a 	mov	r2,r20
  808680:	dfc00517 	ldw	ra,20(sp)
  808684:	dd000417 	ldw	r20,16(sp)
  808688:	dcc00317 	ldw	r19,12(sp)
  80868c:	dc800217 	ldw	r18,8(sp)
  808690:	dc400117 	ldw	r17,4(sp)
  808694:	dc000017 	ldw	r16,0(sp)
  808698:	dec00604 	addi	sp,sp,24
  80869c:	f800283a 	ret
  8086a0:	08082b40 	call	8082b4 <__multiply>
  8086a4:	80800015 	stw	r2,0(r16)
  8086a8:	1021883a 	mov	r16,r2
  8086ac:	10000015 	stw	zero,0(r2)
  8086b0:	003fe106 	br	808638 <__pow5mult+0x60>
  8086b4:	1085883a 	add	r2,r2,r2
  8086b8:	00c02074 	movhi	r3,129
  8086bc:	18c0b904 	addi	r3,r3,740
  8086c0:	1085883a 	add	r2,r2,r2
  8086c4:	10c5883a 	add	r2,r2,r3
  8086c8:	11bfff17 	ldw	r6,-4(r2)
  8086cc:	000f883a 	mov	r7,zero
  8086d0:	08084d80 	call	8084d8 <__multadd>
  8086d4:	1029883a 	mov	r20,r2
  8086d8:	003fcb06 	br	808608 <__pow5mult+0x30>
  8086dc:	9809883a 	mov	r4,r19
  8086e0:	01409c44 	movi	r5,625
  8086e4:	080849c0 	call	80849c <__i2b>
  8086e8:	98801215 	stw	r2,72(r19)
  8086ec:	1021883a 	mov	r16,r2
  8086f0:	10000015 	stw	zero,0(r2)
  8086f4:	003fd006 	br	808638 <__pow5mult+0x60>

008086f8 <__s2b>:
  8086f8:	defff904 	addi	sp,sp,-28
  8086fc:	dcc00315 	stw	r19,12(sp)
  808700:	dc800215 	stw	r18,8(sp)
  808704:	2827883a 	mov	r19,r5
  808708:	2025883a 	mov	r18,r4
  80870c:	01400244 	movi	r5,9
  808710:	39000204 	addi	r4,r7,8
  808714:	dd000415 	stw	r20,16(sp)
  808718:	dc400115 	stw	r17,4(sp)
  80871c:	dfc00615 	stw	ra,24(sp)
  808720:	dd400515 	stw	r21,20(sp)
  808724:	dc000015 	stw	r16,0(sp)
  808728:	3829883a 	mov	r20,r7
  80872c:	3023883a 	mov	r17,r6
  808730:	0800eb00 	call	800eb0 <__divsi3>
  808734:	00c00044 	movi	r3,1
  808738:	1880350e 	bge	r3,r2,808810 <__s2b+0x118>
  80873c:	000b883a 	mov	r5,zero
  808740:	18c7883a 	add	r3,r3,r3
  808744:	29400044 	addi	r5,r5,1
  808748:	18bffd16 	blt	r3,r2,808740 <__s2b+0x48>
  80874c:	9009883a 	mov	r4,r18
  808750:	0807da40 	call	807da4 <_Balloc>
  808754:	1011883a 	mov	r8,r2
  808758:	d8800717 	ldw	r2,28(sp)
  80875c:	00c00044 	movi	r3,1
  808760:	01800244 	movi	r6,9
  808764:	40800515 	stw	r2,20(r8)
  808768:	40c00415 	stw	r3,16(r8)
  80876c:	3440260e 	bge	r6,r17,808808 <__s2b+0x110>
  808770:	3021883a 	mov	r16,r6
  808774:	99ab883a 	add	r21,r19,r6
  808778:	9c05883a 	add	r2,r19,r16
  80877c:	11c00007 	ldb	r7,0(r2)
  808780:	400b883a 	mov	r5,r8
  808784:	9009883a 	mov	r4,r18
  808788:	39fff404 	addi	r7,r7,-48
  80878c:	01800284 	movi	r6,10
  808790:	08084d80 	call	8084d8 <__multadd>
  808794:	84000044 	addi	r16,r16,1
  808798:	1011883a 	mov	r8,r2
  80879c:	8c3ff61e 	bne	r17,r16,808778 <__s2b+0x80>
  8087a0:	ac45883a 	add	r2,r21,r17
  8087a4:	117ffe04 	addi	r5,r2,-8
  8087a8:	880d883a 	mov	r6,r17
  8087ac:	35000c0e 	bge	r6,r20,8087e0 <__s2b+0xe8>
  8087b0:	a185c83a 	sub	r2,r20,r6
  8087b4:	2821883a 	mov	r16,r5
  8087b8:	28a3883a 	add	r17,r5,r2
  8087bc:	81c00007 	ldb	r7,0(r16)
  8087c0:	400b883a 	mov	r5,r8
  8087c4:	9009883a 	mov	r4,r18
  8087c8:	39fff404 	addi	r7,r7,-48
  8087cc:	01800284 	movi	r6,10
  8087d0:	08084d80 	call	8084d8 <__multadd>
  8087d4:	84000044 	addi	r16,r16,1
  8087d8:	1011883a 	mov	r8,r2
  8087dc:	847ff71e 	bne	r16,r17,8087bc <__s2b+0xc4>
  8087e0:	4005883a 	mov	r2,r8
  8087e4:	dfc00617 	ldw	ra,24(sp)
  8087e8:	dd400517 	ldw	r21,20(sp)
  8087ec:	dd000417 	ldw	r20,16(sp)
  8087f0:	dcc00317 	ldw	r19,12(sp)
  8087f4:	dc800217 	ldw	r18,8(sp)
  8087f8:	dc400117 	ldw	r17,4(sp)
  8087fc:	dc000017 	ldw	r16,0(sp)
  808800:	dec00704 	addi	sp,sp,28
  808804:	f800283a 	ret
  808808:	99400284 	addi	r5,r19,10
  80880c:	003fe706 	br	8087ac <__s2b+0xb4>
  808810:	000b883a 	mov	r5,zero
  808814:	003fcd06 	br	80874c <__s2b+0x54>

00808818 <putc>:
  808818:	defffc04 	addi	sp,sp,-16
  80881c:	dc800215 	stw	r18,8(sp)
  808820:	04802074 	movhi	r18,129
  808824:	94882504 	addi	r18,r18,8340
  808828:	90c00017 	ldw	r3,0(r18)
  80882c:	dc400115 	stw	r17,4(sp)
  808830:	dc000015 	stw	r16,0(sp)
  808834:	dfc00315 	stw	ra,12(sp)
  808838:	2023883a 	mov	r17,r4
  80883c:	2821883a 	mov	r16,r5
  808840:	18000226 	beq	r3,zero,80884c <putc+0x34>
  808844:	18800e17 	ldw	r2,56(r3)
  808848:	10001126 	beq	r2,zero,808890 <putc+0x78>
  80884c:	80800217 	ldw	r2,8(r16)
  808850:	10ffffc4 	addi	r3,r2,-1
  808854:	80c00215 	stw	r3,8(r16)
  808858:	18001316 	blt	r3,zero,8088a8 <putc+0x90>
  80885c:	80800017 	ldw	r2,0(r16)
  808860:	14400005 	stb	r17,0(r2)
  808864:	80c00017 	ldw	r3,0(r16)
  808868:	18800044 	addi	r2,r3,1
  80886c:	18c00003 	ldbu	r3,0(r3)
  808870:	80800015 	stw	r2,0(r16)
  808874:	1805883a 	mov	r2,r3
  808878:	dfc00317 	ldw	ra,12(sp)
  80887c:	dc800217 	ldw	r18,8(sp)
  808880:	dc400117 	ldw	r17,4(sp)
  808884:	dc000017 	ldw	r16,0(sp)
  808888:	dec00404 	addi	sp,sp,16
  80888c:	f800283a 	ret
  808890:	1809883a 	mov	r4,r3
  808894:	080147c0 	call	80147c <__sinit>
  808898:	80800217 	ldw	r2,8(r16)
  80889c:	10ffffc4 	addi	r3,r2,-1
  8088a0:	80c00215 	stw	r3,8(r16)
  8088a4:	183fed0e 	bge	r3,zero,80885c <putc+0x44>
  8088a8:	80800617 	ldw	r2,24(r16)
  8088ac:	18800f16 	blt	r3,r2,8088ec <putc+0xd4>
  8088b0:	80800017 	ldw	r2,0(r16)
  8088b4:	14400005 	stb	r17,0(r2)
  8088b8:	81000017 	ldw	r4,0(r16)
  8088bc:	00800284 	movi	r2,10
  8088c0:	20c00003 	ldbu	r3,0(r4)
  8088c4:	18801226 	beq	r3,r2,808910 <putc+0xf8>
  8088c8:	20800044 	addi	r2,r4,1
  8088cc:	80800015 	stw	r2,0(r16)
  8088d0:	1805883a 	mov	r2,r3
  8088d4:	dfc00317 	ldw	ra,12(sp)
  8088d8:	dc800217 	ldw	r18,8(sp)
  8088dc:	dc400117 	ldw	r17,4(sp)
  8088e0:	dc000017 	ldw	r16,0(sp)
  8088e4:	dec00404 	addi	sp,sp,16
  8088e8:	f800283a 	ret
  8088ec:	91000017 	ldw	r4,0(r18)
  8088f0:	880b883a 	mov	r5,r17
  8088f4:	800d883a 	mov	r6,r16
  8088f8:	dfc00317 	ldw	ra,12(sp)
  8088fc:	dc800217 	ldw	r18,8(sp)
  808900:	dc400117 	ldw	r17,4(sp)
  808904:	dc000017 	ldw	r16,0(sp)
  808908:	dec00404 	addi	sp,sp,16
  80890c:	080919c1 	jmpi	80919c <__swbuf_r>
  808910:	91000017 	ldw	r4,0(r18)
  808914:	180b883a 	mov	r5,r3
  808918:	003ff606 	br	8088f4 <putc+0xdc>

0080891c <_putc_r>:
  80891c:	defffc04 	addi	sp,sp,-16
  808920:	dc400215 	stw	r17,8(sp)
  808924:	dc000115 	stw	r16,4(sp)
  808928:	dfc00315 	stw	ra,12(sp)
  80892c:	2021883a 	mov	r16,r4
  808930:	2823883a 	mov	r17,r5
  808934:	20000226 	beq	r4,zero,808940 <_putc_r+0x24>
  808938:	20800e17 	ldw	r2,56(r4)
  80893c:	10001026 	beq	r2,zero,808980 <_putc_r+0x64>
  808940:	30800217 	ldw	r2,8(r6)
  808944:	10ffffc4 	addi	r3,r2,-1
  808948:	30c00215 	stw	r3,8(r6)
  80894c:	18001316 	blt	r3,zero,80899c <_putc_r+0x80>
  808950:	30800017 	ldw	r2,0(r6)
  808954:	14400005 	stb	r17,0(r2)
  808958:	30c00017 	ldw	r3,0(r6)
  80895c:	18800044 	addi	r2,r3,1
  808960:	18c00003 	ldbu	r3,0(r3)
  808964:	30800015 	stw	r2,0(r6)
  808968:	1805883a 	mov	r2,r3
  80896c:	dfc00317 	ldw	ra,12(sp)
  808970:	dc400217 	ldw	r17,8(sp)
  808974:	dc000117 	ldw	r16,4(sp)
  808978:	dec00404 	addi	sp,sp,16
  80897c:	f800283a 	ret
  808980:	d9800015 	stw	r6,0(sp)
  808984:	080147c0 	call	80147c <__sinit>
  808988:	d9800017 	ldw	r6,0(sp)
  80898c:	30800217 	ldw	r2,8(r6)
  808990:	10ffffc4 	addi	r3,r2,-1
  808994:	30c00215 	stw	r3,8(r6)
  808998:	183fed0e 	bge	r3,zero,808950 <_putc_r+0x34>
  80899c:	30800617 	ldw	r2,24(r6)
  8089a0:	18800e16 	blt	r3,r2,8089dc <_putc_r+0xc0>
  8089a4:	30800017 	ldw	r2,0(r6)
  8089a8:	14400005 	stb	r17,0(r2)
  8089ac:	31000017 	ldw	r4,0(r6)
  8089b0:	00800284 	movi	r2,10
  8089b4:	20c00003 	ldbu	r3,0(r4)
  8089b8:	18800f26 	beq	r3,r2,8089f8 <_putc_r+0xdc>
  8089bc:	20800044 	addi	r2,r4,1
  8089c0:	30800015 	stw	r2,0(r6)
  8089c4:	1805883a 	mov	r2,r3
  8089c8:	dfc00317 	ldw	ra,12(sp)
  8089cc:	dc400217 	ldw	r17,8(sp)
  8089d0:	dc000117 	ldw	r16,4(sp)
  8089d4:	dec00404 	addi	sp,sp,16
  8089d8:	f800283a 	ret
  8089dc:	8009883a 	mov	r4,r16
  8089e0:	880b883a 	mov	r5,r17
  8089e4:	dfc00317 	ldw	ra,12(sp)
  8089e8:	dc400217 	ldw	r17,8(sp)
  8089ec:	dc000117 	ldw	r16,4(sp)
  8089f0:	dec00404 	addi	sp,sp,16
  8089f4:	080919c1 	jmpi	80919c <__swbuf_r>
  8089f8:	8009883a 	mov	r4,r16
  8089fc:	180b883a 	mov	r5,r3
  808a00:	003ff806 	br	8089e4 <_putc_r+0xc8>

00808a04 <_read_r>:
  808a04:	defffd04 	addi	sp,sp,-12
  808a08:	dc000015 	stw	r16,0(sp)
  808a0c:	04002074 	movhi	r16,129
  808a10:	840f6604 	addi	r16,r16,15768
  808a14:	dc400115 	stw	r17,4(sp)
  808a18:	80000015 	stw	zero,0(r16)
  808a1c:	2023883a 	mov	r17,r4
  808a20:	2809883a 	mov	r4,r5
  808a24:	300b883a 	mov	r5,r6
  808a28:	380d883a 	mov	r6,r7
  808a2c:	dfc00215 	stw	ra,8(sp)
  808a30:	080c31c0 	call	80c31c <read>
  808a34:	1007883a 	mov	r3,r2
  808a38:	00bfffc4 	movi	r2,-1
  808a3c:	18800626 	beq	r3,r2,808a58 <_read_r+0x54>
  808a40:	1805883a 	mov	r2,r3
  808a44:	dfc00217 	ldw	ra,8(sp)
  808a48:	dc400117 	ldw	r17,4(sp)
  808a4c:	dc000017 	ldw	r16,0(sp)
  808a50:	dec00304 	addi	sp,sp,12
  808a54:	f800283a 	ret
  808a58:	80800017 	ldw	r2,0(r16)
  808a5c:	103ff826 	beq	r2,zero,808a40 <_read_r+0x3c>
  808a60:	88800015 	stw	r2,0(r17)
  808a64:	1805883a 	mov	r2,r3
  808a68:	dfc00217 	ldw	ra,8(sp)
  808a6c:	dc400117 	ldw	r17,4(sp)
  808a70:	dc000017 	ldw	r16,0(sp)
  808a74:	dec00304 	addi	sp,sp,12
  808a78:	f800283a 	ret

00808a7c <_realloc_r>:
  808a7c:	defff404 	addi	sp,sp,-48
  808a80:	dd800815 	stw	r22,32(sp)
  808a84:	dc800415 	stw	r18,16(sp)
  808a88:	dc400315 	stw	r17,12(sp)
  808a8c:	dfc00b15 	stw	ra,44(sp)
  808a90:	df000a15 	stw	fp,40(sp)
  808a94:	ddc00915 	stw	r23,36(sp)
  808a98:	dd400715 	stw	r21,28(sp)
  808a9c:	dd000615 	stw	r20,24(sp)
  808aa0:	dcc00515 	stw	r19,20(sp)
  808aa4:	dc000215 	stw	r16,8(sp)
  808aa8:	2825883a 	mov	r18,r5
  808aac:	3023883a 	mov	r17,r6
  808ab0:	202d883a 	mov	r22,r4
  808ab4:	2800c926 	beq	r5,zero,808ddc <_realloc_r+0x360>
  808ab8:	080c0180 	call	80c018 <__malloc_lock>
  808abc:	943ffe04 	addi	r16,r18,-8
  808ac0:	88c002c4 	addi	r3,r17,11
  808ac4:	00800584 	movi	r2,22
  808ac8:	82000117 	ldw	r8,4(r16)
  808acc:	10c01b2e 	bgeu	r2,r3,808b3c <_realloc_r+0xc0>
  808ad0:	00bffe04 	movi	r2,-8
  808ad4:	188e703a 	and	r7,r3,r2
  808ad8:	3839883a 	mov	fp,r7
  808adc:	38001a16 	blt	r7,zero,808b48 <_realloc_r+0xcc>
  808ae0:	e4401936 	bltu	fp,r17,808b48 <_realloc_r+0xcc>
  808ae4:	013fff04 	movi	r4,-4
  808ae8:	4126703a 	and	r19,r8,r4
  808aec:	99c02616 	blt	r19,r7,808b88 <_realloc_r+0x10c>
  808af0:	802b883a 	mov	r21,r16
  808af4:	9829883a 	mov	r20,r19
  808af8:	84000204 	addi	r16,r16,8
  808afc:	a80f883a 	mov	r7,r21
  808b00:	a70dc83a 	sub	r6,r20,fp
  808b04:	008003c4 	movi	r2,15
  808b08:	1180c136 	bltu	r2,r6,808e10 <_realloc_r+0x394>
  808b0c:	38800117 	ldw	r2,4(r7)
  808b10:	a549883a 	add	r4,r20,r21
  808b14:	1080004c 	andi	r2,r2,1
  808b18:	a084b03a 	or	r2,r20,r2
  808b1c:	38800115 	stw	r2,4(r7)
  808b20:	20c00117 	ldw	r3,4(r4)
  808b24:	18c00054 	ori	r3,r3,1
  808b28:	20c00115 	stw	r3,4(r4)
  808b2c:	b009883a 	mov	r4,r22
  808b30:	080c0380 	call	80c038 <__malloc_unlock>
  808b34:	8023883a 	mov	r17,r16
  808b38:	00000606 	br	808b54 <_realloc_r+0xd8>
  808b3c:	01c00404 	movi	r7,16
  808b40:	3839883a 	mov	fp,r7
  808b44:	e47fe72e 	bgeu	fp,r17,808ae4 <_realloc_r+0x68>
  808b48:	00800304 	movi	r2,12
  808b4c:	0023883a 	mov	r17,zero
  808b50:	b0800015 	stw	r2,0(r22)
  808b54:	8805883a 	mov	r2,r17
  808b58:	dfc00b17 	ldw	ra,44(sp)
  808b5c:	df000a17 	ldw	fp,40(sp)
  808b60:	ddc00917 	ldw	r23,36(sp)
  808b64:	dd800817 	ldw	r22,32(sp)
  808b68:	dd400717 	ldw	r21,28(sp)
  808b6c:	dd000617 	ldw	r20,24(sp)
  808b70:	dcc00517 	ldw	r19,20(sp)
  808b74:	dc800417 	ldw	r18,16(sp)
  808b78:	dc400317 	ldw	r17,12(sp)
  808b7c:	dc000217 	ldw	r16,8(sp)
  808b80:	dec00c04 	addi	sp,sp,48
  808b84:	f800283a 	ret
  808b88:	00802074 	movhi	r2,129
  808b8c:	10822304 	addi	r2,r2,2188
  808b90:	12400217 	ldw	r9,8(r2)
  808b94:	84cd883a 	add	r6,r16,r19
  808b98:	802b883a 	mov	r21,r16
  808b9c:	3240b926 	beq	r6,r9,808e84 <_realloc_r+0x408>
  808ba0:	31400117 	ldw	r5,4(r6)
  808ba4:	00bfff84 	movi	r2,-2
  808ba8:	2884703a 	and	r2,r5,r2
  808bac:	1185883a 	add	r2,r2,r6
  808bb0:	10c00117 	ldw	r3,4(r2)
  808bb4:	18c0004c 	andi	r3,r3,1
  808bb8:	1807003a 	cmpeq	r3,r3,zero
  808bbc:	1800a326 	beq	r3,zero,808e4c <_realloc_r+0x3d0>
  808bc0:	2908703a 	and	r4,r5,r4
  808bc4:	9929883a 	add	r20,r19,r4
  808bc8:	a1c0a30e 	bge	r20,r7,808e58 <_realloc_r+0x3dc>
  808bcc:	4080004c 	andi	r2,r8,1
  808bd0:	1000551e 	bne	r2,zero,808d28 <_realloc_r+0x2ac>
  808bd4:	80800017 	ldw	r2,0(r16)
  808bd8:	80afc83a 	sub	r23,r16,r2
  808bdc:	b8c00117 	ldw	r3,4(r23)
  808be0:	00bfff04 	movi	r2,-4
  808be4:	1884703a 	and	r2,r3,r2
  808be8:	30002e26 	beq	r6,zero,808ca4 <_realloc_r+0x228>
  808bec:	3240b926 	beq	r6,r9,808ed4 <_realloc_r+0x458>
  808bf0:	98a9883a 	add	r20,r19,r2
  808bf4:	2509883a 	add	r4,r4,r20
  808bf8:	d9000015 	stw	r4,0(sp)
  808bfc:	21c02a16 	blt	r4,r7,808ca8 <_realloc_r+0x22c>
  808c00:	30800317 	ldw	r2,12(r6)
  808c04:	30c00217 	ldw	r3,8(r6)
  808c08:	01400904 	movi	r5,36
  808c0c:	99bfff04 	addi	r6,r19,-4
  808c10:	18800315 	stw	r2,12(r3)
  808c14:	10c00215 	stw	r3,8(r2)
  808c18:	b9000317 	ldw	r4,12(r23)
  808c1c:	b8800217 	ldw	r2,8(r23)
  808c20:	b82b883a 	mov	r21,r23
  808c24:	bc000204 	addi	r16,r23,8
  808c28:	20800215 	stw	r2,8(r4)
  808c2c:	11000315 	stw	r4,12(r2)
  808c30:	2980e436 	bltu	r5,r6,808fc4 <_realloc_r+0x548>
  808c34:	008004c4 	movi	r2,19
  808c38:	9009883a 	mov	r4,r18
  808c3c:	8011883a 	mov	r8,r16
  808c40:	11800f2e 	bgeu	r2,r6,808c80 <_realloc_r+0x204>
  808c44:	90800017 	ldw	r2,0(r18)
  808c48:	ba000404 	addi	r8,r23,16
  808c4c:	91000204 	addi	r4,r18,8
  808c50:	b8800215 	stw	r2,8(r23)
  808c54:	90c00117 	ldw	r3,4(r18)
  808c58:	008006c4 	movi	r2,27
  808c5c:	b8c00315 	stw	r3,12(r23)
  808c60:	1180072e 	bgeu	r2,r6,808c80 <_realloc_r+0x204>
  808c64:	90c00217 	ldw	r3,8(r18)
  808c68:	ba000604 	addi	r8,r23,24
  808c6c:	91000404 	addi	r4,r18,16
  808c70:	b8c00415 	stw	r3,16(r23)
  808c74:	90800317 	ldw	r2,12(r18)
  808c78:	b8800515 	stw	r2,20(r23)
  808c7c:	3140e726 	beq	r6,r5,80901c <_realloc_r+0x5a0>
  808c80:	20800017 	ldw	r2,0(r4)
  808c84:	dd000017 	ldw	r20,0(sp)
  808c88:	b80f883a 	mov	r7,r23
  808c8c:	40800015 	stw	r2,0(r8)
  808c90:	20c00117 	ldw	r3,4(r4)
  808c94:	40c00115 	stw	r3,4(r8)
  808c98:	20800217 	ldw	r2,8(r4)
  808c9c:	40800215 	stw	r2,8(r8)
  808ca0:	003f9706 	br	808b00 <_realloc_r+0x84>
  808ca4:	98a9883a 	add	r20,r19,r2
  808ca8:	a1c01f16 	blt	r20,r7,808d28 <_realloc_r+0x2ac>
  808cac:	b8c00317 	ldw	r3,12(r23)
  808cb0:	b8800217 	ldw	r2,8(r23)
  808cb4:	99bfff04 	addi	r6,r19,-4
  808cb8:	01400904 	movi	r5,36
  808cbc:	b82b883a 	mov	r21,r23
  808cc0:	18800215 	stw	r2,8(r3)
  808cc4:	10c00315 	stw	r3,12(r2)
  808cc8:	bc000204 	addi	r16,r23,8
  808ccc:	2980c336 	bltu	r5,r6,808fdc <_realloc_r+0x560>
  808cd0:	008004c4 	movi	r2,19
  808cd4:	9009883a 	mov	r4,r18
  808cd8:	8011883a 	mov	r8,r16
  808cdc:	11800f2e 	bgeu	r2,r6,808d1c <_realloc_r+0x2a0>
  808ce0:	90800017 	ldw	r2,0(r18)
  808ce4:	ba000404 	addi	r8,r23,16
  808ce8:	91000204 	addi	r4,r18,8
  808cec:	b8800215 	stw	r2,8(r23)
  808cf0:	90c00117 	ldw	r3,4(r18)
  808cf4:	008006c4 	movi	r2,27
  808cf8:	b8c00315 	stw	r3,12(r23)
  808cfc:	1180072e 	bgeu	r2,r6,808d1c <_realloc_r+0x2a0>
  808d00:	90c00217 	ldw	r3,8(r18)
  808d04:	ba000604 	addi	r8,r23,24
  808d08:	91000404 	addi	r4,r18,16
  808d0c:	b8c00415 	stw	r3,16(r23)
  808d10:	90800317 	ldw	r2,12(r18)
  808d14:	b8800515 	stw	r2,20(r23)
  808d18:	3140c726 	beq	r6,r5,809038 <_realloc_r+0x5bc>
  808d1c:	20800017 	ldw	r2,0(r4)
  808d20:	b80f883a 	mov	r7,r23
  808d24:	003fd906 	br	808c8c <_realloc_r+0x210>
  808d28:	880b883a 	mov	r5,r17
  808d2c:	b009883a 	mov	r4,r22
  808d30:	08025480 	call	802548 <_malloc_r>
  808d34:	1023883a 	mov	r17,r2
  808d38:	10002526 	beq	r2,zero,808dd0 <_realloc_r+0x354>
  808d3c:	80800117 	ldw	r2,4(r16)
  808d40:	00ffff84 	movi	r3,-2
  808d44:	893ffe04 	addi	r4,r17,-8
  808d48:	10c4703a 	and	r2,r2,r3
  808d4c:	8085883a 	add	r2,r16,r2
  808d50:	20809526 	beq	r4,r2,808fa8 <_realloc_r+0x52c>
  808d54:	99bfff04 	addi	r6,r19,-4
  808d58:	01c00904 	movi	r7,36
  808d5c:	39804536 	bltu	r7,r6,808e74 <_realloc_r+0x3f8>
  808d60:	008004c4 	movi	r2,19
  808d64:	9009883a 	mov	r4,r18
  808d68:	880b883a 	mov	r5,r17
  808d6c:	11800f2e 	bgeu	r2,r6,808dac <_realloc_r+0x330>
  808d70:	90800017 	ldw	r2,0(r18)
  808d74:	89400204 	addi	r5,r17,8
  808d78:	91000204 	addi	r4,r18,8
  808d7c:	88800015 	stw	r2,0(r17)
  808d80:	90c00117 	ldw	r3,4(r18)
  808d84:	008006c4 	movi	r2,27
  808d88:	88c00115 	stw	r3,4(r17)
  808d8c:	1180072e 	bgeu	r2,r6,808dac <_realloc_r+0x330>
  808d90:	90c00217 	ldw	r3,8(r18)
  808d94:	89400404 	addi	r5,r17,16
  808d98:	91000404 	addi	r4,r18,16
  808d9c:	88c00215 	stw	r3,8(r17)
  808da0:	90800317 	ldw	r2,12(r18)
  808da4:	88800315 	stw	r2,12(r17)
  808da8:	31c09126 	beq	r6,r7,808ff0 <_realloc_r+0x574>
  808dac:	20800017 	ldw	r2,0(r4)
  808db0:	28800015 	stw	r2,0(r5)
  808db4:	20c00117 	ldw	r3,4(r4)
  808db8:	28c00115 	stw	r3,4(r5)
  808dbc:	20800217 	ldw	r2,8(r4)
  808dc0:	28800215 	stw	r2,8(r5)
  808dc4:	900b883a 	mov	r5,r18
  808dc8:	b009883a 	mov	r4,r22
  808dcc:	08019700 	call	801970 <_free_r>
  808dd0:	b009883a 	mov	r4,r22
  808dd4:	080c0380 	call	80c038 <__malloc_unlock>
  808dd8:	003f5e06 	br	808b54 <_realloc_r+0xd8>
  808ddc:	300b883a 	mov	r5,r6
  808de0:	dfc00b17 	ldw	ra,44(sp)
  808de4:	df000a17 	ldw	fp,40(sp)
  808de8:	ddc00917 	ldw	r23,36(sp)
  808dec:	dd800817 	ldw	r22,32(sp)
  808df0:	dd400717 	ldw	r21,28(sp)
  808df4:	dd000617 	ldw	r20,24(sp)
  808df8:	dcc00517 	ldw	r19,20(sp)
  808dfc:	dc800417 	ldw	r18,16(sp)
  808e00:	dc400317 	ldw	r17,12(sp)
  808e04:	dc000217 	ldw	r16,8(sp)
  808e08:	dec00c04 	addi	sp,sp,48
  808e0c:	08025481 	jmpi	802548 <_malloc_r>
  808e10:	38800117 	ldw	r2,4(r7)
  808e14:	e54b883a 	add	r5,fp,r21
  808e18:	31000054 	ori	r4,r6,1
  808e1c:	1080004c 	andi	r2,r2,1
  808e20:	1704b03a 	or	r2,r2,fp
  808e24:	38800115 	stw	r2,4(r7)
  808e28:	29000115 	stw	r4,4(r5)
  808e2c:	2987883a 	add	r3,r5,r6
  808e30:	18800117 	ldw	r2,4(r3)
  808e34:	29400204 	addi	r5,r5,8
  808e38:	b009883a 	mov	r4,r22
  808e3c:	10800054 	ori	r2,r2,1
  808e40:	18800115 	stw	r2,4(r3)
  808e44:	08019700 	call	801970 <_free_r>
  808e48:	003f3806 	br	808b2c <_realloc_r+0xb0>
  808e4c:	000d883a 	mov	r6,zero
  808e50:	0009883a 	mov	r4,zero
  808e54:	003f5d06 	br	808bcc <_realloc_r+0x150>
  808e58:	30c00217 	ldw	r3,8(r6)
  808e5c:	30800317 	ldw	r2,12(r6)
  808e60:	800f883a 	mov	r7,r16
  808e64:	84000204 	addi	r16,r16,8
  808e68:	10c00215 	stw	r3,8(r2)
  808e6c:	18800315 	stw	r2,12(r3)
  808e70:	003f2306 	br	808b00 <_realloc_r+0x84>
  808e74:	8809883a 	mov	r4,r17
  808e78:	900b883a 	mov	r5,r18
  808e7c:	08077440 	call	807744 <memmove>
  808e80:	003fd006 	br	808dc4 <_realloc_r+0x348>
  808e84:	30800117 	ldw	r2,4(r6)
  808e88:	e0c00404 	addi	r3,fp,16
  808e8c:	1108703a 	and	r4,r2,r4
  808e90:	9905883a 	add	r2,r19,r4
  808e94:	10ff4d16 	blt	r2,r3,808bcc <_realloc_r+0x150>
  808e98:	1705c83a 	sub	r2,r2,fp
  808e9c:	870b883a 	add	r5,r16,fp
  808ea0:	10800054 	ori	r2,r2,1
  808ea4:	28800115 	stw	r2,4(r5)
  808ea8:	80c00117 	ldw	r3,4(r16)
  808eac:	00802074 	movhi	r2,129
  808eb0:	10822304 	addi	r2,r2,2188
  808eb4:	b009883a 	mov	r4,r22
  808eb8:	18c0004c 	andi	r3,r3,1
  808ebc:	e0c6b03a 	or	r3,fp,r3
  808ec0:	11400215 	stw	r5,8(r2)
  808ec4:	80c00115 	stw	r3,4(r16)
  808ec8:	080c0380 	call	80c038 <__malloc_unlock>
  808ecc:	84400204 	addi	r17,r16,8
  808ed0:	003f2006 	br	808b54 <_realloc_r+0xd8>
  808ed4:	98a9883a 	add	r20,r19,r2
  808ed8:	2509883a 	add	r4,r4,r20
  808edc:	e0800404 	addi	r2,fp,16
  808ee0:	d9000115 	stw	r4,4(sp)
  808ee4:	20bf7016 	blt	r4,r2,808ca8 <_realloc_r+0x22c>
  808ee8:	b8c00317 	ldw	r3,12(r23)
  808eec:	b8800217 	ldw	r2,8(r23)
  808ef0:	99bfff04 	addi	r6,r19,-4
  808ef4:	01400904 	movi	r5,36
  808ef8:	18800215 	stw	r2,8(r3)
  808efc:	10c00315 	stw	r3,12(r2)
  808f00:	bc400204 	addi	r17,r23,8
  808f04:	29804136 	bltu	r5,r6,80900c <_realloc_r+0x590>
  808f08:	008004c4 	movi	r2,19
  808f0c:	9009883a 	mov	r4,r18
  808f10:	880f883a 	mov	r7,r17
  808f14:	11800f2e 	bgeu	r2,r6,808f54 <_realloc_r+0x4d8>
  808f18:	90800017 	ldw	r2,0(r18)
  808f1c:	b9c00404 	addi	r7,r23,16
  808f20:	91000204 	addi	r4,r18,8
  808f24:	b8800215 	stw	r2,8(r23)
  808f28:	90c00117 	ldw	r3,4(r18)
  808f2c:	008006c4 	movi	r2,27
  808f30:	b8c00315 	stw	r3,12(r23)
  808f34:	1180072e 	bgeu	r2,r6,808f54 <_realloc_r+0x4d8>
  808f38:	90c00217 	ldw	r3,8(r18)
  808f3c:	b9c00604 	addi	r7,r23,24
  808f40:	91000404 	addi	r4,r18,16
  808f44:	b8c00415 	stw	r3,16(r23)
  808f48:	90800317 	ldw	r2,12(r18)
  808f4c:	b8800515 	stw	r2,20(r23)
  808f50:	31404026 	beq	r6,r5,809054 <_realloc_r+0x5d8>
  808f54:	20800017 	ldw	r2,0(r4)
  808f58:	38800015 	stw	r2,0(r7)
  808f5c:	20c00117 	ldw	r3,4(r4)
  808f60:	38c00115 	stw	r3,4(r7)
  808f64:	20800217 	ldw	r2,8(r4)
  808f68:	38800215 	stw	r2,8(r7)
  808f6c:	d8c00117 	ldw	r3,4(sp)
  808f70:	bf0b883a 	add	r5,r23,fp
  808f74:	b009883a 	mov	r4,r22
  808f78:	1f05c83a 	sub	r2,r3,fp
  808f7c:	10800054 	ori	r2,r2,1
  808f80:	28800115 	stw	r2,4(r5)
  808f84:	b8c00117 	ldw	r3,4(r23)
  808f88:	00802074 	movhi	r2,129
  808f8c:	10822304 	addi	r2,r2,2188
  808f90:	11400215 	stw	r5,8(r2)
  808f94:	18c0004c 	andi	r3,r3,1
  808f98:	e0c6b03a 	or	r3,fp,r3
  808f9c:	b8c00115 	stw	r3,4(r23)
  808fa0:	080c0380 	call	80c038 <__malloc_unlock>
  808fa4:	003eeb06 	br	808b54 <_realloc_r+0xd8>
  808fa8:	20800117 	ldw	r2,4(r4)
  808fac:	00ffff04 	movi	r3,-4
  808fb0:	800f883a 	mov	r7,r16
  808fb4:	10c4703a 	and	r2,r2,r3
  808fb8:	98a9883a 	add	r20,r19,r2
  808fbc:	84000204 	addi	r16,r16,8
  808fc0:	003ecf06 	br	808b00 <_realloc_r+0x84>
  808fc4:	900b883a 	mov	r5,r18
  808fc8:	8009883a 	mov	r4,r16
  808fcc:	08077440 	call	807744 <memmove>
  808fd0:	dd000017 	ldw	r20,0(sp)
  808fd4:	b80f883a 	mov	r7,r23
  808fd8:	003ec906 	br	808b00 <_realloc_r+0x84>
  808fdc:	900b883a 	mov	r5,r18
  808fe0:	8009883a 	mov	r4,r16
  808fe4:	08077440 	call	807744 <memmove>
  808fe8:	b80f883a 	mov	r7,r23
  808fec:	003ec406 	br	808b00 <_realloc_r+0x84>
  808ff0:	90c00417 	ldw	r3,16(r18)
  808ff4:	89400604 	addi	r5,r17,24
  808ff8:	91000604 	addi	r4,r18,24
  808ffc:	88c00415 	stw	r3,16(r17)
  809000:	90800517 	ldw	r2,20(r18)
  809004:	88800515 	stw	r2,20(r17)
  809008:	003f6806 	br	808dac <_realloc_r+0x330>
  80900c:	900b883a 	mov	r5,r18
  809010:	8809883a 	mov	r4,r17
  809014:	08077440 	call	807744 <memmove>
  809018:	003fd406 	br	808f6c <_realloc_r+0x4f0>
  80901c:	90c00417 	ldw	r3,16(r18)
  809020:	91000604 	addi	r4,r18,24
  809024:	ba000804 	addi	r8,r23,32
  809028:	b8c00615 	stw	r3,24(r23)
  80902c:	90800517 	ldw	r2,20(r18)
  809030:	b8800715 	stw	r2,28(r23)
  809034:	003f1206 	br	808c80 <_realloc_r+0x204>
  809038:	90c00417 	ldw	r3,16(r18)
  80903c:	91000604 	addi	r4,r18,24
  809040:	ba000804 	addi	r8,r23,32
  809044:	b8c00615 	stw	r3,24(r23)
  809048:	90800517 	ldw	r2,20(r18)
  80904c:	b8800715 	stw	r2,28(r23)
  809050:	003f3206 	br	808d1c <_realloc_r+0x2a0>
  809054:	90c00417 	ldw	r3,16(r18)
  809058:	91000604 	addi	r4,r18,24
  80905c:	b9c00804 	addi	r7,r23,32
  809060:	b8c00615 	stw	r3,24(r23)
  809064:	90800517 	ldw	r2,20(r18)
  809068:	b8800715 	stw	r2,28(r23)
  80906c:	003fb906 	br	808f54 <_realloc_r+0x4d8>

00809070 <__isinfd>:
  809070:	200d883a 	mov	r6,r4
  809074:	0109c83a 	sub	r4,zero,r4
  809078:	2188b03a 	or	r4,r4,r6
  80907c:	2008d7fa 	srli	r4,r4,31
  809080:	00a00034 	movhi	r2,32768
  809084:	10bfffc4 	addi	r2,r2,-1
  809088:	1144703a 	and	r2,r2,r5
  80908c:	2088b03a 	or	r4,r4,r2
  809090:	009ffc34 	movhi	r2,32752
  809094:	1105c83a 	sub	r2,r2,r4
  809098:	0087c83a 	sub	r3,zero,r2
  80909c:	10c4b03a 	or	r2,r2,r3
  8090a0:	1004d7fa 	srli	r2,r2,31
  8090a4:	00c00044 	movi	r3,1
  8090a8:	1885c83a 	sub	r2,r3,r2
  8090ac:	f800283a 	ret

008090b0 <__isnand>:
  8090b0:	200d883a 	mov	r6,r4
  8090b4:	0109c83a 	sub	r4,zero,r4
  8090b8:	2188b03a 	or	r4,r4,r6
  8090bc:	2008d7fa 	srli	r4,r4,31
  8090c0:	00a00034 	movhi	r2,32768
  8090c4:	10bfffc4 	addi	r2,r2,-1
  8090c8:	1144703a 	and	r2,r2,r5
  8090cc:	2088b03a 	or	r4,r4,r2
  8090d0:	009ffc34 	movhi	r2,32752
  8090d4:	1105c83a 	sub	r2,r2,r4
  8090d8:	1004d7fa 	srli	r2,r2,31
  8090dc:	f800283a 	ret

008090e0 <strcmp>:
  8090e0:	2144b03a 	or	r2,r4,r5
  8090e4:	108000cc 	andi	r2,r2,3
  8090e8:	10001d1e 	bne	r2,zero,809160 <strcmp+0x80>
  8090ec:	200f883a 	mov	r7,r4
  8090f0:	28800017 	ldw	r2,0(r5)
  8090f4:	21000017 	ldw	r4,0(r4)
  8090f8:	280d883a 	mov	r6,r5
  8090fc:	2080161e 	bne	r4,r2,809158 <strcmp+0x78>
  809100:	023fbff4 	movhi	r8,65279
  809104:	423fbfc4 	addi	r8,r8,-257
  809108:	2207883a 	add	r3,r4,r8
  80910c:	01602074 	movhi	r5,32897
  809110:	29602004 	addi	r5,r5,-32640
  809114:	1946703a 	and	r3,r3,r5
  809118:	0104303a 	nor	r2,zero,r4
  80911c:	10c4703a 	and	r2,r2,r3
  809120:	10001c1e 	bne	r2,zero,809194 <strcmp+0xb4>
  809124:	4013883a 	mov	r9,r8
  809128:	2811883a 	mov	r8,r5
  80912c:	00000106 	br	809134 <strcmp+0x54>
  809130:	1800181e 	bne	r3,zero,809194 <strcmp+0xb4>
  809134:	39c00104 	addi	r7,r7,4
  809138:	39000017 	ldw	r4,0(r7)
  80913c:	31800104 	addi	r6,r6,4
  809140:	31400017 	ldw	r5,0(r6)
  809144:	2245883a 	add	r2,r4,r9
  809148:	1204703a 	and	r2,r2,r8
  80914c:	0106303a 	nor	r3,zero,r4
  809150:	1886703a 	and	r3,r3,r2
  809154:	217ff626 	beq	r4,r5,809130 <strcmp+0x50>
  809158:	3809883a 	mov	r4,r7
  80915c:	300b883a 	mov	r5,r6
  809160:	20c00007 	ldb	r3,0(r4)
  809164:	1800051e 	bne	r3,zero,80917c <strcmp+0x9c>
  809168:	00000606 	br	809184 <strcmp+0xa4>
  80916c:	21000044 	addi	r4,r4,1
  809170:	20c00007 	ldb	r3,0(r4)
  809174:	29400044 	addi	r5,r5,1
  809178:	18000226 	beq	r3,zero,809184 <strcmp+0xa4>
  80917c:	28800007 	ldb	r2,0(r5)
  809180:	18bffa26 	beq	r3,r2,80916c <strcmp+0x8c>
  809184:	20c00003 	ldbu	r3,0(r4)
  809188:	28800003 	ldbu	r2,0(r5)
  80918c:	1885c83a 	sub	r2,r3,r2
  809190:	f800283a 	ret
  809194:	0005883a 	mov	r2,zero
  809198:	f800283a 	ret

0080919c <__swbuf_r>:
  80919c:	defffc04 	addi	sp,sp,-16
  8091a0:	dc400215 	stw	r17,8(sp)
  8091a4:	dc000115 	stw	r16,4(sp)
  8091a8:	dfc00315 	stw	ra,12(sp)
  8091ac:	2023883a 	mov	r17,r4
  8091b0:	2821883a 	mov	r16,r5
  8091b4:	20000226 	beq	r4,zero,8091c0 <__swbuf_r+0x24>
  8091b8:	20800e17 	ldw	r2,56(r4)
  8091bc:	10002f26 	beq	r2,zero,80927c <__swbuf_r+0xe0>
  8091c0:	3080030b 	ldhu	r2,12(r6)
  8091c4:	30c00617 	ldw	r3,24(r6)
  8091c8:	1080020c 	andi	r2,r2,8
  8091cc:	30c00215 	stw	r3,8(r6)
  8091d0:	10002226 	beq	r2,zero,80925c <__swbuf_r+0xc0>
  8091d4:	30c00417 	ldw	r3,16(r6)
  8091d8:	18002026 	beq	r3,zero,80925c <__swbuf_r+0xc0>
  8091dc:	31000017 	ldw	r4,0(r6)
  8091e0:	30800517 	ldw	r2,20(r6)
  8091e4:	20c7c83a 	sub	r3,r4,r3
  8091e8:	18802f0e 	bge	r3,r2,8092a8 <__swbuf_r+0x10c>
  8091ec:	19400044 	addi	r5,r3,1
  8091f0:	30800217 	ldw	r2,8(r6)
  8091f4:	84003fcc 	andi	r16,r16,255
  8091f8:	20c00044 	addi	r3,r4,1
  8091fc:	10bfffc4 	addi	r2,r2,-1
  809200:	30800215 	stw	r2,8(r6)
  809204:	24000005 	stb	r16,0(r4)
  809208:	30800517 	ldw	r2,20(r6)
  80920c:	30c00015 	stw	r3,0(r6)
  809210:	11400c26 	beq	r2,r5,809244 <__swbuf_r+0xa8>
  809214:	3080030b 	ldhu	r2,12(r6)
  809218:	1080004c 	andi	r2,r2,1
  80921c:	1005003a 	cmpeq	r2,r2,zero
  809220:	10000626 	beq	r2,zero,80923c <__swbuf_r+0xa0>
  809224:	8005883a 	mov	r2,r16
  809228:	dfc00317 	ldw	ra,12(sp)
  80922c:	dc400217 	ldw	r17,8(sp)
  809230:	dc000117 	ldw	r16,4(sp)
  809234:	dec00404 	addi	sp,sp,16
  809238:	f800283a 	ret
  80923c:	00800284 	movi	r2,10
  809240:	80bff81e 	bne	r16,r2,809224 <__swbuf_r+0x88>
  809244:	8809883a 	mov	r4,r17
  809248:	300b883a 	mov	r5,r6
  80924c:	08010bc0 	call	8010bc <_fflush_r>
  809250:	103ff426 	beq	r2,zero,809224 <__swbuf_r+0x88>
  809254:	043fffc4 	movi	r16,-1
  809258:	003ff206 	br	809224 <__swbuf_r+0x88>
  80925c:	300b883a 	mov	r5,r6
  809260:	8809883a 	mov	r4,r17
  809264:	d9800015 	stw	r6,0(sp)
  809268:	08055600 	call	805560 <__swsetup_r>
  80926c:	d9800017 	ldw	r6,0(sp)
  809270:	1000061e 	bne	r2,zero,80928c <__swbuf_r+0xf0>
  809274:	30c00417 	ldw	r3,16(r6)
  809278:	003fd806 	br	8091dc <__swbuf_r+0x40>
  80927c:	d9800015 	stw	r6,0(sp)
  809280:	080147c0 	call	80147c <__sinit>
  809284:	d9800017 	ldw	r6,0(sp)
  809288:	003fcd06 	br	8091c0 <__swbuf_r+0x24>
  80928c:	3080030b 	ldhu	r2,12(r6)
  809290:	00c00244 	movi	r3,9
  809294:	043fffc4 	movi	r16,-1
  809298:	10801014 	ori	r2,r2,64
  80929c:	3080030d 	sth	r2,12(r6)
  8092a0:	88c00015 	stw	r3,0(r17)
  8092a4:	003fdf06 	br	809224 <__swbuf_r+0x88>
  8092a8:	300b883a 	mov	r5,r6
  8092ac:	8809883a 	mov	r4,r17
  8092b0:	d9800015 	stw	r6,0(sp)
  8092b4:	08010bc0 	call	8010bc <_fflush_r>
  8092b8:	d9800017 	ldw	r6,0(sp)
  8092bc:	103fe51e 	bne	r2,zero,809254 <__swbuf_r+0xb8>
  8092c0:	31000017 	ldw	r4,0(r6)
  8092c4:	01400044 	movi	r5,1
  8092c8:	003fc906 	br	8091f0 <__swbuf_r+0x54>

008092cc <__swbuf>:
  8092cc:	01802074 	movhi	r6,129
  8092d0:	31882504 	addi	r6,r6,8340
  8092d4:	2007883a 	mov	r3,r4
  8092d8:	31000017 	ldw	r4,0(r6)
  8092dc:	280d883a 	mov	r6,r5
  8092e0:	180b883a 	mov	r5,r3
  8092e4:	080919c1 	jmpi	80919c <__swbuf_r>

008092e8 <_calloc_r>:
  8092e8:	298b383a 	mul	r5,r5,r6
  8092ec:	defffe04 	addi	sp,sp,-8
  8092f0:	dc000015 	stw	r16,0(sp)
  8092f4:	dfc00115 	stw	ra,4(sp)
  8092f8:	08025480 	call	802548 <_malloc_r>
  8092fc:	1021883a 	mov	r16,r2
  809300:	01c00904 	movi	r7,36
  809304:	10000d26 	beq	r2,zero,80933c <_calloc_r+0x54>
  809308:	10ffff17 	ldw	r3,-4(r2)
  80930c:	1009883a 	mov	r4,r2
  809310:	00bfff04 	movi	r2,-4
  809314:	1886703a 	and	r3,r3,r2
  809318:	1887883a 	add	r3,r3,r2
  80931c:	180d883a 	mov	r6,r3
  809320:	000b883a 	mov	r5,zero
  809324:	38c01736 	bltu	r7,r3,809384 <_calloc_r+0x9c>
  809328:	008004c4 	movi	r2,19
  80932c:	10c00836 	bltu	r2,r3,809350 <_calloc_r+0x68>
  809330:	20000215 	stw	zero,8(r4)
  809334:	20000015 	stw	zero,0(r4)
  809338:	20000115 	stw	zero,4(r4)
  80933c:	8005883a 	mov	r2,r16
  809340:	dfc00117 	ldw	ra,4(sp)
  809344:	dc000017 	ldw	r16,0(sp)
  809348:	dec00204 	addi	sp,sp,8
  80934c:	f800283a 	ret
  809350:	008006c4 	movi	r2,27
  809354:	80000015 	stw	zero,0(r16)
  809358:	80000115 	stw	zero,4(r16)
  80935c:	81000204 	addi	r4,r16,8
  809360:	10fff32e 	bgeu	r2,r3,809330 <_calloc_r+0x48>
  809364:	80000215 	stw	zero,8(r16)
  809368:	80000315 	stw	zero,12(r16)
  80936c:	81000404 	addi	r4,r16,16
  809370:	19ffef1e 	bne	r3,r7,809330 <_calloc_r+0x48>
  809374:	81000604 	addi	r4,r16,24
  809378:	80000415 	stw	zero,16(r16)
  80937c:	80000515 	stw	zero,20(r16)
  809380:	003feb06 	br	809330 <_calloc_r+0x48>
  809384:	0802c880 	call	802c88 <memset>
  809388:	8005883a 	mov	r2,r16
  80938c:	dfc00117 	ldw	ra,4(sp)
  809390:	dc000017 	ldw	r16,0(sp)
  809394:	dec00204 	addi	sp,sp,8
  809398:	f800283a 	ret

0080939c <__udivdi3>:
  80939c:	defff004 	addi	sp,sp,-64
  8093a0:	2005883a 	mov	r2,r4
  8093a4:	3011883a 	mov	r8,r6
  8093a8:	df000e15 	stw	fp,56(sp)
  8093ac:	dd000a15 	stw	r20,40(sp)
  8093b0:	dc000615 	stw	r16,24(sp)
  8093b4:	dfc00f15 	stw	ra,60(sp)
  8093b8:	ddc00d15 	stw	r23,52(sp)
  8093bc:	dd800c15 	stw	r22,48(sp)
  8093c0:	dd400b15 	stw	r21,44(sp)
  8093c4:	dcc00915 	stw	r19,36(sp)
  8093c8:	dc800815 	stw	r18,32(sp)
  8093cc:	dc400715 	stw	r17,28(sp)
  8093d0:	4021883a 	mov	r16,r8
  8093d4:	1039883a 	mov	fp,r2
  8093d8:	2829883a 	mov	r20,r5
  8093dc:	38003b1e 	bne	r7,zero,8094cc <__udivdi3+0x130>
  8093e0:	2a005c36 	bltu	r5,r8,809554 <__udivdi3+0x1b8>
  8093e4:	4000a626 	beq	r8,zero,809680 <__udivdi3+0x2e4>
  8093e8:	00bfffd4 	movui	r2,65535
  8093ec:	14009e36 	bltu	r2,r16,809668 <__udivdi3+0x2cc>
  8093f0:	00803fc4 	movi	r2,255
  8093f4:	14013d36 	bltu	r2,r16,8098ec <__udivdi3+0x550>
  8093f8:	000b883a 	mov	r5,zero
  8093fc:	0005883a 	mov	r2,zero
  809400:	8084d83a 	srl	r2,r16,r2
  809404:	01002074 	movhi	r4,129
  809408:	2100c104 	addi	r4,r4,772
  80940c:	01800804 	movi	r6,32
  809410:	1105883a 	add	r2,r2,r4
  809414:	10c00003 	ldbu	r3,0(r2)
  809418:	28c7883a 	add	r3,r5,r3
  80941c:	30edc83a 	sub	r22,r6,r3
  809420:	b000ee1e 	bne	r22,zero,8097dc <__udivdi3+0x440>
  809424:	802ad43a 	srli	r21,r16,16
  809428:	00800044 	movi	r2,1
  80942c:	a423c83a 	sub	r17,r20,r16
  809430:	85ffffcc 	andi	r23,r16,65535
  809434:	d8800315 	stw	r2,12(sp)
  809438:	8809883a 	mov	r4,r17
  80943c:	a80b883a 	mov	r5,r21
  809440:	0800f700 	call	800f70 <__udivsi3>
  809444:	8809883a 	mov	r4,r17
  809448:	a80b883a 	mov	r5,r21
  80944c:	102d883a 	mov	r22,r2
  809450:	0800f780 	call	800f78 <__umodsi3>
  809454:	1004943a 	slli	r2,r2,16
  809458:	e006d43a 	srli	r3,fp,16
  80945c:	bda3383a 	mul	r17,r23,r22
  809460:	10c4b03a 	or	r2,r2,r3
  809464:	1440042e 	bgeu	r2,r17,809478 <__udivdi3+0xdc>
  809468:	1405883a 	add	r2,r2,r16
  80946c:	b5bfffc4 	addi	r22,r22,-1
  809470:	14000136 	bltu	r2,r16,809478 <__udivdi3+0xdc>
  809474:	14413d36 	bltu	r2,r17,80996c <__udivdi3+0x5d0>
  809478:	1463c83a 	sub	r17,r2,r17
  80947c:	8809883a 	mov	r4,r17
  809480:	a80b883a 	mov	r5,r21
  809484:	0800f700 	call	800f70 <__udivsi3>
  809488:	8809883a 	mov	r4,r17
  80948c:	a80b883a 	mov	r5,r21
  809490:	1029883a 	mov	r20,r2
  809494:	0800f780 	call	800f78 <__umodsi3>
  809498:	1004943a 	slli	r2,r2,16
  80949c:	bd09383a 	mul	r4,r23,r20
  8094a0:	e0ffffcc 	andi	r3,fp,65535
  8094a4:	10c4b03a 	or	r2,r2,r3
  8094a8:	1100042e 	bgeu	r2,r4,8094bc <__udivdi3+0x120>
  8094ac:	8085883a 	add	r2,r16,r2
  8094b0:	a53fffc4 	addi	r20,r20,-1
  8094b4:	14000136 	bltu	r2,r16,8094bc <__udivdi3+0x120>
  8094b8:	11012036 	bltu	r2,r4,80993c <__udivdi3+0x5a0>
  8094bc:	b004943a 	slli	r2,r22,16
  8094c0:	d9000317 	ldw	r4,12(sp)
  8094c4:	a084b03a 	or	r2,r20,r2
  8094c8:	00001506 	br	809520 <__udivdi3+0x184>
  8094cc:	380d883a 	mov	r6,r7
  8094d0:	29c06236 	bltu	r5,r7,80965c <__udivdi3+0x2c0>
  8094d4:	00bfffd4 	movui	r2,65535
  8094d8:	11c05a36 	bltu	r2,r7,809644 <__udivdi3+0x2a8>
  8094dc:	00803fc4 	movi	r2,255
  8094e0:	11c0fc36 	bltu	r2,r7,8098d4 <__udivdi3+0x538>
  8094e4:	000b883a 	mov	r5,zero
  8094e8:	0005883a 	mov	r2,zero
  8094ec:	3084d83a 	srl	r2,r6,r2
  8094f0:	01002074 	movhi	r4,129
  8094f4:	2100c104 	addi	r4,r4,772
  8094f8:	01c00804 	movi	r7,32
  8094fc:	1105883a 	add	r2,r2,r4
  809500:	10c00003 	ldbu	r3,0(r2)
  809504:	28c7883a 	add	r3,r5,r3
  809508:	38efc83a 	sub	r23,r7,r3
  80950c:	b800691e 	bne	r23,zero,8096b4 <__udivdi3+0x318>
  809510:	35000136 	bltu	r6,r20,809518 <__udivdi3+0x17c>
  809514:	e4005136 	bltu	fp,r16,80965c <__udivdi3+0x2c0>
  809518:	00800044 	movi	r2,1
  80951c:	0009883a 	mov	r4,zero
  809520:	2007883a 	mov	r3,r4
  809524:	dfc00f17 	ldw	ra,60(sp)
  809528:	df000e17 	ldw	fp,56(sp)
  80952c:	ddc00d17 	ldw	r23,52(sp)
  809530:	dd800c17 	ldw	r22,48(sp)
  809534:	dd400b17 	ldw	r21,44(sp)
  809538:	dd000a17 	ldw	r20,40(sp)
  80953c:	dcc00917 	ldw	r19,36(sp)
  809540:	dc800817 	ldw	r18,32(sp)
  809544:	dc400717 	ldw	r17,28(sp)
  809548:	dc000617 	ldw	r16,24(sp)
  80954c:	dec01004 	addi	sp,sp,64
  809550:	f800283a 	ret
  809554:	00bfffd4 	movui	r2,65535
  809558:	12005036 	bltu	r2,r8,80969c <__udivdi3+0x300>
  80955c:	00803fc4 	movi	r2,255
  809560:	1200e836 	bltu	r2,r8,809904 <__udivdi3+0x568>
  809564:	000b883a 	mov	r5,zero
  809568:	0005883a 	mov	r2,zero
  80956c:	8084d83a 	srl	r2,r16,r2
  809570:	01002074 	movhi	r4,129
  809574:	2100c104 	addi	r4,r4,772
  809578:	01800804 	movi	r6,32
  80957c:	1105883a 	add	r2,r2,r4
  809580:	10c00003 	ldbu	r3,0(r2)
  809584:	28c7883a 	add	r3,r5,r3
  809588:	30cbc83a 	sub	r5,r6,r3
  80958c:	28000626 	beq	r5,zero,8095a8 <__udivdi3+0x20c>
  809590:	3145c83a 	sub	r2,r6,r5
  809594:	e084d83a 	srl	r2,fp,r2
  809598:	a146983a 	sll	r3,r20,r5
  80959c:	e178983a 	sll	fp,fp,r5
  8095a0:	8160983a 	sll	r16,r16,r5
  8095a4:	18a8b03a 	or	r20,r3,r2
  8095a8:	802ad43a 	srli	r21,r16,16
  8095ac:	a009883a 	mov	r4,r20
  8095b0:	85ffffcc 	andi	r23,r16,65535
  8095b4:	a80b883a 	mov	r5,r21
  8095b8:	0800f700 	call	800f70 <__udivsi3>
  8095bc:	a009883a 	mov	r4,r20
  8095c0:	a80b883a 	mov	r5,r21
  8095c4:	102d883a 	mov	r22,r2
  8095c8:	0800f780 	call	800f78 <__umodsi3>
  8095cc:	1004943a 	slli	r2,r2,16
  8095d0:	e006d43a 	srli	r3,fp,16
  8095d4:	bda3383a 	mul	r17,r23,r22
  8095d8:	10c4b03a 	or	r2,r2,r3
  8095dc:	1440042e 	bgeu	r2,r17,8095f0 <__udivdi3+0x254>
  8095e0:	1405883a 	add	r2,r2,r16
  8095e4:	b5bfffc4 	addi	r22,r22,-1
  8095e8:	14000136 	bltu	r2,r16,8095f0 <__udivdi3+0x254>
  8095ec:	1440d536 	bltu	r2,r17,809944 <__udivdi3+0x5a8>
  8095f0:	1463c83a 	sub	r17,r2,r17
  8095f4:	8809883a 	mov	r4,r17
  8095f8:	a80b883a 	mov	r5,r21
  8095fc:	0800f700 	call	800f70 <__udivsi3>
  809600:	8809883a 	mov	r4,r17
  809604:	a80b883a 	mov	r5,r21
  809608:	1029883a 	mov	r20,r2
  80960c:	0800f780 	call	800f78 <__umodsi3>
  809610:	1004943a 	slli	r2,r2,16
  809614:	bd09383a 	mul	r4,r23,r20
  809618:	e0ffffcc 	andi	r3,fp,65535
  80961c:	10c4b03a 	or	r2,r2,r3
  809620:	1100042e 	bgeu	r2,r4,809634 <__udivdi3+0x298>
  809624:	8085883a 	add	r2,r16,r2
  809628:	a53fffc4 	addi	r20,r20,-1
  80962c:	14000136 	bltu	r2,r16,809634 <__udivdi3+0x298>
  809630:	1100c736 	bltu	r2,r4,809950 <__udivdi3+0x5b4>
  809634:	b004943a 	slli	r2,r22,16
  809638:	0009883a 	mov	r4,zero
  80963c:	a084b03a 	or	r2,r20,r2
  809640:	003fb706 	br	809520 <__udivdi3+0x184>
  809644:	00804034 	movhi	r2,256
  809648:	10bfffc4 	addi	r2,r2,-1
  80964c:	11c0a436 	bltu	r2,r7,8098e0 <__udivdi3+0x544>
  809650:	01400404 	movi	r5,16
  809654:	2805883a 	mov	r2,r5
  809658:	003fa406 	br	8094ec <__udivdi3+0x150>
  80965c:	0005883a 	mov	r2,zero
  809660:	0009883a 	mov	r4,zero
  809664:	003fae06 	br	809520 <__udivdi3+0x184>
  809668:	00804034 	movhi	r2,256
  80966c:	10bfffc4 	addi	r2,r2,-1
  809670:	1400a136 	bltu	r2,r16,8098f8 <__udivdi3+0x55c>
  809674:	01400404 	movi	r5,16
  809678:	2805883a 	mov	r2,r5
  80967c:	003f6006 	br	809400 <__udivdi3+0x64>
  809680:	01000044 	movi	r4,1
  809684:	000b883a 	mov	r5,zero
  809688:	0800f700 	call	800f70 <__udivsi3>
  80968c:	1021883a 	mov	r16,r2
  809690:	00bfffd4 	movui	r2,65535
  809694:	143ff436 	bltu	r2,r16,809668 <__udivdi3+0x2cc>
  809698:	003f5506 	br	8093f0 <__udivdi3+0x54>
  80969c:	00804034 	movhi	r2,256
  8096a0:	10bfffc4 	addi	r2,r2,-1
  8096a4:	12009a36 	bltu	r2,r8,809910 <__udivdi3+0x574>
  8096a8:	01400404 	movi	r5,16
  8096ac:	2805883a 	mov	r2,r5
  8096b0:	003fae06 	br	80956c <__udivdi3+0x1d0>
  8096b4:	3dc5c83a 	sub	r2,r7,r23
  8096b8:	35c8983a 	sll	r4,r6,r23
  8096bc:	8086d83a 	srl	r3,r16,r2
  8096c0:	a0a2d83a 	srl	r17,r20,r2
  8096c4:	e084d83a 	srl	r2,fp,r2
  8096c8:	20eab03a 	or	r21,r4,r3
  8096cc:	a82cd43a 	srli	r22,r21,16
  8096d0:	a5c6983a 	sll	r3,r20,r23
  8096d4:	8809883a 	mov	r4,r17
  8096d8:	b00b883a 	mov	r5,r22
  8096dc:	1886b03a 	or	r3,r3,r2
  8096e0:	d8c00215 	stw	r3,8(sp)
  8096e4:	0800f700 	call	800f70 <__udivsi3>
  8096e8:	8809883a 	mov	r4,r17
  8096ec:	b00b883a 	mov	r5,r22
  8096f0:	1029883a 	mov	r20,r2
  8096f4:	0800f780 	call	800f78 <__umodsi3>
  8096f8:	a8ffffcc 	andi	r3,r21,65535
  8096fc:	d8c00515 	stw	r3,20(sp)
  809700:	d9000217 	ldw	r4,8(sp)
  809704:	d9400517 	ldw	r5,20(sp)
  809708:	1004943a 	slli	r2,r2,16
  80970c:	2006d43a 	srli	r3,r4,16
  809710:	85e0983a 	sll	r16,r16,r23
  809714:	2d23383a 	mul	r17,r5,r20
  809718:	10c4b03a 	or	r2,r2,r3
  80971c:	dc000015 	stw	r16,0(sp)
  809720:	1440032e 	bgeu	r2,r17,809730 <__udivdi3+0x394>
  809724:	1545883a 	add	r2,r2,r21
  809728:	a53fffc4 	addi	r20,r20,-1
  80972c:	15407f2e 	bgeu	r2,r21,80992c <__udivdi3+0x590>
  809730:	1463c83a 	sub	r17,r2,r17
  809734:	8809883a 	mov	r4,r17
  809738:	b00b883a 	mov	r5,r22
  80973c:	0800f700 	call	800f70 <__udivsi3>
  809740:	8809883a 	mov	r4,r17
  809744:	b00b883a 	mov	r5,r22
  809748:	1021883a 	mov	r16,r2
  80974c:	0800f780 	call	800f78 <__umodsi3>
  809750:	d8c00517 	ldw	r3,20(sp)
  809754:	d9000217 	ldw	r4,8(sp)
  809758:	1004943a 	slli	r2,r2,16
  80975c:	1c0f383a 	mul	r7,r3,r16
  809760:	20ffffcc 	andi	r3,r4,65535
  809764:	10e2b03a 	or	r17,r2,r3
  809768:	89c0032e 	bgeu	r17,r7,809778 <__udivdi3+0x3dc>
  80976c:	8d63883a 	add	r17,r17,r21
  809770:	843fffc4 	addi	r16,r16,-1
  809774:	8d40692e 	bgeu	r17,r21,80991c <__udivdi3+0x580>
  809778:	a008943a 	slli	r4,r20,16
  80977c:	d9400017 	ldw	r5,0(sp)
  809780:	89e3c83a 	sub	r17,r17,r7
  809784:	8110b03a 	or	r8,r16,r4
  809788:	280cd43a 	srli	r6,r5,16
  80978c:	28ffffcc 	andi	r3,r5,65535
  809790:	40bfffcc 	andi	r2,r8,65535
  809794:	400ad43a 	srli	r5,r8,16
  809798:	10d3383a 	mul	r9,r2,r3
  80979c:	1185383a 	mul	r2,r2,r6
  8097a0:	28c7383a 	mul	r3,r5,r3
  8097a4:	4808d43a 	srli	r4,r9,16
  8097a8:	298b383a 	mul	r5,r5,r6
  8097ac:	10c5883a 	add	r2,r2,r3
  8097b0:	2089883a 	add	r4,r4,r2
  8097b4:	20c0022e 	bgeu	r4,r3,8097c0 <__udivdi3+0x424>
  8097b8:	00800074 	movhi	r2,1
  8097bc:	288b883a 	add	r5,r5,r2
  8097c0:	2004d43a 	srli	r2,r4,16
  8097c4:	288b883a 	add	r5,r5,r2
  8097c8:	89403f36 	bltu	r17,r5,8098c8 <__udivdi3+0x52c>
  8097cc:	89403926 	beq	r17,r5,8098b4 <__udivdi3+0x518>
  8097d0:	4005883a 	mov	r2,r8
  8097d4:	0009883a 	mov	r4,zero
  8097d8:	003f5106 	br	809520 <__udivdi3+0x184>
  8097dc:	85a0983a 	sll	r16,r16,r22
  8097e0:	3585c83a 	sub	r2,r6,r22
  8097e4:	a0a2d83a 	srl	r17,r20,r2
  8097e8:	802ad43a 	srli	r21,r16,16
  8097ec:	e084d83a 	srl	r2,fp,r2
  8097f0:	a586983a 	sll	r3,r20,r22
  8097f4:	8809883a 	mov	r4,r17
  8097f8:	a80b883a 	mov	r5,r21
  8097fc:	1886b03a 	or	r3,r3,r2
  809800:	d8c00115 	stw	r3,4(sp)
  809804:	0800f700 	call	800f70 <__udivsi3>
  809808:	8809883a 	mov	r4,r17
  80980c:	a80b883a 	mov	r5,r21
  809810:	d8800415 	stw	r2,16(sp)
  809814:	0800f780 	call	800f78 <__umodsi3>
  809818:	d9000117 	ldw	r4,4(sp)
  80981c:	d9400417 	ldw	r5,16(sp)
  809820:	1004943a 	slli	r2,r2,16
  809824:	85ffffcc 	andi	r23,r16,65535
  809828:	2006d43a 	srli	r3,r4,16
  80982c:	b963383a 	mul	r17,r23,r5
  809830:	10c4b03a 	or	r2,r2,r3
  809834:	1440042e 	bgeu	r2,r17,809848 <__udivdi3+0x4ac>
  809838:	297fffc4 	addi	r5,r5,-1
  80983c:	1405883a 	add	r2,r2,r16
  809840:	d9400415 	stw	r5,16(sp)
  809844:	1400442e 	bgeu	r2,r16,809958 <__udivdi3+0x5bc>
  809848:	1463c83a 	sub	r17,r2,r17
  80984c:	8809883a 	mov	r4,r17
  809850:	a80b883a 	mov	r5,r21
  809854:	0800f700 	call	800f70 <__udivsi3>
  809858:	8809883a 	mov	r4,r17
  80985c:	a80b883a 	mov	r5,r21
  809860:	1029883a 	mov	r20,r2
  809864:	0800f780 	call	800f78 <__umodsi3>
  809868:	d9400117 	ldw	r5,4(sp)
  80986c:	1004943a 	slli	r2,r2,16
  809870:	bd09383a 	mul	r4,r23,r20
  809874:	28ffffcc 	andi	r3,r5,65535
  809878:	10c6b03a 	or	r3,r2,r3
  80987c:	1900062e 	bgeu	r3,r4,809898 <__udivdi3+0x4fc>
  809880:	1c07883a 	add	r3,r3,r16
  809884:	a53fffc4 	addi	r20,r20,-1
  809888:	1c000336 	bltu	r3,r16,809898 <__udivdi3+0x4fc>
  80988c:	1900022e 	bgeu	r3,r4,809898 <__udivdi3+0x4fc>
  809890:	a53fffc4 	addi	r20,r20,-1
  809894:	1c07883a 	add	r3,r3,r16
  809898:	d9400417 	ldw	r5,16(sp)
  80989c:	e5b8983a 	sll	fp,fp,r22
  8098a0:	1923c83a 	sub	r17,r3,r4
  8098a4:	2804943a 	slli	r2,r5,16
  8098a8:	a0a8b03a 	or	r20,r20,r2
  8098ac:	dd000315 	stw	r20,12(sp)
  8098b0:	003ee106 	br	809438 <__udivdi3+0x9c>
  8098b4:	2004943a 	slli	r2,r4,16
  8098b8:	e5c8983a 	sll	r4,fp,r23
  8098bc:	48ffffcc 	andi	r3,r9,65535
  8098c0:	10c5883a 	add	r2,r2,r3
  8098c4:	20bfc22e 	bgeu	r4,r2,8097d0 <__udivdi3+0x434>
  8098c8:	40bfffc4 	addi	r2,r8,-1
  8098cc:	0009883a 	mov	r4,zero
  8098d0:	003f1306 	br	809520 <__udivdi3+0x184>
  8098d4:	01400204 	movi	r5,8
  8098d8:	2805883a 	mov	r2,r5
  8098dc:	003f0306 	br	8094ec <__udivdi3+0x150>
  8098e0:	01400604 	movi	r5,24
  8098e4:	2805883a 	mov	r2,r5
  8098e8:	003f0006 	br	8094ec <__udivdi3+0x150>
  8098ec:	01400204 	movi	r5,8
  8098f0:	2805883a 	mov	r2,r5
  8098f4:	003ec206 	br	809400 <__udivdi3+0x64>
  8098f8:	01400604 	movi	r5,24
  8098fc:	2805883a 	mov	r2,r5
  809900:	003ebf06 	br	809400 <__udivdi3+0x64>
  809904:	01400204 	movi	r5,8
  809908:	2805883a 	mov	r2,r5
  80990c:	003f1706 	br	80956c <__udivdi3+0x1d0>
  809910:	01400604 	movi	r5,24
  809914:	2805883a 	mov	r2,r5
  809918:	003f1406 	br	80956c <__udivdi3+0x1d0>
  80991c:	89ff962e 	bgeu	r17,r7,809778 <__udivdi3+0x3dc>
  809920:	8d63883a 	add	r17,r17,r21
  809924:	843fffc4 	addi	r16,r16,-1
  809928:	003f9306 	br	809778 <__udivdi3+0x3dc>
  80992c:	147f802e 	bgeu	r2,r17,809730 <__udivdi3+0x394>
  809930:	a53fffc4 	addi	r20,r20,-1
  809934:	1545883a 	add	r2,r2,r21
  809938:	003f7d06 	br	809730 <__udivdi3+0x394>
  80993c:	a53fffc4 	addi	r20,r20,-1
  809940:	003ede06 	br	8094bc <__udivdi3+0x120>
  809944:	b5bfffc4 	addi	r22,r22,-1
  809948:	1405883a 	add	r2,r2,r16
  80994c:	003f2806 	br	8095f0 <__udivdi3+0x254>
  809950:	a53fffc4 	addi	r20,r20,-1
  809954:	003f3706 	br	809634 <__udivdi3+0x298>
  809958:	147fbb2e 	bgeu	r2,r17,809848 <__udivdi3+0x4ac>
  80995c:	297fffc4 	addi	r5,r5,-1
  809960:	1405883a 	add	r2,r2,r16
  809964:	d9400415 	stw	r5,16(sp)
  809968:	003fb706 	br	809848 <__udivdi3+0x4ac>
  80996c:	b5bfffc4 	addi	r22,r22,-1
  809970:	1405883a 	add	r2,r2,r16
  809974:	003ec006 	br	809478 <__udivdi3+0xdc>

00809978 <__umoddi3>:
  809978:	defff104 	addi	sp,sp,-60
  80997c:	dd800b15 	stw	r22,44(sp)
  809980:	dd000915 	stw	r20,36(sp)
  809984:	dc000515 	stw	r16,20(sp)
  809988:	dfc00e15 	stw	ra,56(sp)
  80998c:	df000d15 	stw	fp,52(sp)
  809990:	ddc00c15 	stw	r23,48(sp)
  809994:	dd400a15 	stw	r21,40(sp)
  809998:	dcc00815 	stw	r19,32(sp)
  80999c:	dc800715 	stw	r18,28(sp)
  8099a0:	dc400615 	stw	r17,24(sp)
  8099a4:	3021883a 	mov	r16,r6
  8099a8:	202d883a 	mov	r22,r4
  8099ac:	2829883a 	mov	r20,r5
  8099b0:	38002b1e 	bne	r7,zero,809a60 <__umoddi3+0xe8>
  8099b4:	29805036 	bltu	r5,r6,809af8 <__umoddi3+0x180>
  8099b8:	30008a26 	beq	r6,zero,809be4 <__umoddi3+0x26c>
  8099bc:	00bfffd4 	movui	r2,65535
  8099c0:	14008236 	bltu	r2,r16,809bcc <__umoddi3+0x254>
  8099c4:	00803fc4 	movi	r2,255
  8099c8:	14013636 	bltu	r2,r16,809ea4 <__umoddi3+0x52c>
  8099cc:	000b883a 	mov	r5,zero
  8099d0:	0005883a 	mov	r2,zero
  8099d4:	8084d83a 	srl	r2,r16,r2
  8099d8:	01002074 	movhi	r4,129
  8099dc:	2100c104 	addi	r4,r4,772
  8099e0:	01800804 	movi	r6,32
  8099e4:	1105883a 	add	r2,r2,r4
  8099e8:	10c00003 	ldbu	r3,0(r2)
  8099ec:	28c7883a 	add	r3,r5,r3
  8099f0:	30efc83a 	sub	r23,r6,r3
  8099f4:	b800941e 	bne	r23,zero,809c48 <__umoddi3+0x2d0>
  8099f8:	802ad43a 	srli	r21,r16,16
  8099fc:	a423c83a 	sub	r17,r20,r16
  809a00:	0039883a 	mov	fp,zero
  809a04:	853fffcc 	andi	r20,r16,65535
  809a08:	8809883a 	mov	r4,r17
  809a0c:	a80b883a 	mov	r5,r21
  809a10:	0800f700 	call	800f70 <__udivsi3>
  809a14:	8809883a 	mov	r4,r17
  809a18:	a80b883a 	mov	r5,r21
  809a1c:	a0a3383a 	mul	r17,r20,r2
  809a20:	0800f780 	call	800f78 <__umodsi3>
  809a24:	1004943a 	slli	r2,r2,16
  809a28:	b006d43a 	srli	r3,r22,16
  809a2c:	10c4b03a 	or	r2,r2,r3
  809a30:	1440032e 	bgeu	r2,r17,809a40 <__umoddi3+0xc8>
  809a34:	1405883a 	add	r2,r2,r16
  809a38:	14000136 	bltu	r2,r16,809a40 <__umoddi3+0xc8>
  809a3c:	14413536 	bltu	r2,r17,809f14 <__umoddi3+0x59c>
  809a40:	1463c83a 	sub	r17,r2,r17
  809a44:	8809883a 	mov	r4,r17
  809a48:	a80b883a 	mov	r5,r21
  809a4c:	0800f700 	call	800f70 <__udivsi3>
  809a50:	8809883a 	mov	r4,r17
  809a54:	a0a3383a 	mul	r17,r20,r2
  809a58:	a80b883a 	mov	r5,r21
  809a5c:	00004d06 	br	809b94 <__umoddi3+0x21c>
  809a60:	380d883a 	mov	r6,r7
  809a64:	29c0102e 	bgeu	r5,r7,809aa8 <__umoddi3+0x130>
  809a68:	2011883a 	mov	r8,r4
  809a6c:	2813883a 	mov	r9,r5
  809a70:	4005883a 	mov	r2,r8
  809a74:	4807883a 	mov	r3,r9
  809a78:	dfc00e17 	ldw	ra,56(sp)
  809a7c:	df000d17 	ldw	fp,52(sp)
  809a80:	ddc00c17 	ldw	r23,48(sp)
  809a84:	dd800b17 	ldw	r22,44(sp)
  809a88:	dd400a17 	ldw	r21,40(sp)
  809a8c:	dd000917 	ldw	r20,36(sp)
  809a90:	dcc00817 	ldw	r19,32(sp)
  809a94:	dc800717 	ldw	r18,28(sp)
  809a98:	dc400617 	ldw	r17,24(sp)
  809a9c:	dc000517 	ldw	r16,20(sp)
  809aa0:	dec00f04 	addi	sp,sp,60
  809aa4:	f800283a 	ret
  809aa8:	00bfffd4 	movui	r2,65535
  809aac:	11c05a36 	bltu	r2,r7,809c18 <__umoddi3+0x2a0>
  809ab0:	00803fc4 	movi	r2,255
  809ab4:	11c0fe36 	bltu	r2,r7,809eb0 <__umoddi3+0x538>
  809ab8:	000b883a 	mov	r5,zero
  809abc:	0005883a 	mov	r2,zero
  809ac0:	3084d83a 	srl	r2,r6,r2
  809ac4:	01002074 	movhi	r4,129
  809ac8:	2100c104 	addi	r4,r4,772
  809acc:	01c00804 	movi	r7,32
  809ad0:	1105883a 	add	r2,r2,r4
  809ad4:	10c00003 	ldbu	r3,0(r2)
  809ad8:	28c7883a 	add	r3,r5,r3
  809adc:	38ebc83a 	sub	r21,r7,r3
  809ae0:	a800851e 	bne	r21,zero,809cf8 <__umoddi3+0x380>
  809ae4:	35005236 	bltu	r6,r20,809c30 <__umoddi3+0x2b8>
  809ae8:	b400512e 	bgeu	r22,r16,809c30 <__umoddi3+0x2b8>
  809aec:	b011883a 	mov	r8,r22
  809af0:	a013883a 	mov	r9,r20
  809af4:	003fde06 	br	809a70 <__umoddi3+0xf8>
  809af8:	00bfffd4 	movui	r2,65535
  809afc:	11804036 	bltu	r2,r6,809c00 <__umoddi3+0x288>
  809b00:	00803fc4 	movi	r2,255
  809b04:	1180ed36 	bltu	r2,r6,809ebc <__umoddi3+0x544>
  809b08:	000b883a 	mov	r5,zero
  809b0c:	0005883a 	mov	r2,zero
  809b10:	8084d83a 	srl	r2,r16,r2
  809b14:	01002074 	movhi	r4,129
  809b18:	2100c104 	addi	r4,r4,772
  809b1c:	01800804 	movi	r6,32
  809b20:	1105883a 	add	r2,r2,r4
  809b24:	10c00003 	ldbu	r3,0(r2)
  809b28:	28c7883a 	add	r3,r5,r3
  809b2c:	30c7c83a 	sub	r3,r6,r3
  809b30:	1800bf1e 	bne	r3,zero,809e30 <__umoddi3+0x4b8>
  809b34:	0039883a 	mov	fp,zero
  809b38:	802ad43a 	srli	r21,r16,16
  809b3c:	a009883a 	mov	r4,r20
  809b40:	85ffffcc 	andi	r23,r16,65535
  809b44:	a80b883a 	mov	r5,r21
  809b48:	0800f700 	call	800f70 <__udivsi3>
  809b4c:	a009883a 	mov	r4,r20
  809b50:	a80b883a 	mov	r5,r21
  809b54:	b8a3383a 	mul	r17,r23,r2
  809b58:	0800f780 	call	800f78 <__umodsi3>
  809b5c:	1004943a 	slli	r2,r2,16
  809b60:	b006d43a 	srli	r3,r22,16
  809b64:	10c4b03a 	or	r2,r2,r3
  809b68:	1440032e 	bgeu	r2,r17,809b78 <__umoddi3+0x200>
  809b6c:	1405883a 	add	r2,r2,r16
  809b70:	14000136 	bltu	r2,r16,809b78 <__umoddi3+0x200>
  809b74:	1440e536 	bltu	r2,r17,809f0c <__umoddi3+0x594>
  809b78:	1463c83a 	sub	r17,r2,r17
  809b7c:	8809883a 	mov	r4,r17
  809b80:	a80b883a 	mov	r5,r21
  809b84:	0800f700 	call	800f70 <__udivsi3>
  809b88:	8809883a 	mov	r4,r17
  809b8c:	b8a3383a 	mul	r17,r23,r2
  809b90:	a80b883a 	mov	r5,r21
  809b94:	0800f780 	call	800f78 <__umodsi3>
  809b98:	1004943a 	slli	r2,r2,16
  809b9c:	b0ffffcc 	andi	r3,r22,65535
  809ba0:	10c4b03a 	or	r2,r2,r3
  809ba4:	1440042e 	bgeu	r2,r17,809bb8 <__umoddi3+0x240>
  809ba8:	1405883a 	add	r2,r2,r16
  809bac:	14000236 	bltu	r2,r16,809bb8 <__umoddi3+0x240>
  809bb0:	1440012e 	bgeu	r2,r17,809bb8 <__umoddi3+0x240>
  809bb4:	1405883a 	add	r2,r2,r16
  809bb8:	1445c83a 	sub	r2,r2,r17
  809bbc:	1724d83a 	srl	r18,r2,fp
  809bc0:	0013883a 	mov	r9,zero
  809bc4:	9011883a 	mov	r8,r18
  809bc8:	003fa906 	br	809a70 <__umoddi3+0xf8>
  809bcc:	00804034 	movhi	r2,256
  809bd0:	10bfffc4 	addi	r2,r2,-1
  809bd4:	1400b036 	bltu	r2,r16,809e98 <__umoddi3+0x520>
  809bd8:	01400404 	movi	r5,16
  809bdc:	2805883a 	mov	r2,r5
  809be0:	003f7c06 	br	8099d4 <__umoddi3+0x5c>
  809be4:	01000044 	movi	r4,1
  809be8:	000b883a 	mov	r5,zero
  809bec:	0800f700 	call	800f70 <__udivsi3>
  809bf0:	1021883a 	mov	r16,r2
  809bf4:	00bfffd4 	movui	r2,65535
  809bf8:	143ff436 	bltu	r2,r16,809bcc <__umoddi3+0x254>
  809bfc:	003f7106 	br	8099c4 <__umoddi3+0x4c>
  809c00:	00804034 	movhi	r2,256
  809c04:	10bfffc4 	addi	r2,r2,-1
  809c08:	1180af36 	bltu	r2,r6,809ec8 <__umoddi3+0x550>
  809c0c:	01400404 	movi	r5,16
  809c10:	2805883a 	mov	r2,r5
  809c14:	003fbe06 	br	809b10 <__umoddi3+0x198>
  809c18:	00804034 	movhi	r2,256
  809c1c:	10bfffc4 	addi	r2,r2,-1
  809c20:	11c0ac36 	bltu	r2,r7,809ed4 <__umoddi3+0x55c>
  809c24:	01400404 	movi	r5,16
  809c28:	2805883a 	mov	r2,r5
  809c2c:	003fa406 	br	809ac0 <__umoddi3+0x148>
  809c30:	b409c83a 	sub	r4,r22,r16
  809c34:	b105803a 	cmpltu	r2,r22,r4
  809c38:	a187c83a 	sub	r3,r20,r6
  809c3c:	18a9c83a 	sub	r20,r3,r2
  809c40:	202d883a 	mov	r22,r4
  809c44:	003fa906 	br	809aec <__umoddi3+0x174>
  809c48:	85e0983a 	sll	r16,r16,r23
  809c4c:	35c5c83a 	sub	r2,r6,r23
  809c50:	a0a2d83a 	srl	r17,r20,r2
  809c54:	802ad43a 	srli	r21,r16,16
  809c58:	b084d83a 	srl	r2,r22,r2
  809c5c:	a5c6983a 	sll	r3,r20,r23
  809c60:	8809883a 	mov	r4,r17
  809c64:	a80b883a 	mov	r5,r21
  809c68:	1886b03a 	or	r3,r3,r2
  809c6c:	d8c00115 	stw	r3,4(sp)
  809c70:	853fffcc 	andi	r20,r16,65535
  809c74:	0800f700 	call	800f70 <__udivsi3>
  809c78:	8809883a 	mov	r4,r17
  809c7c:	a80b883a 	mov	r5,r21
  809c80:	a0a3383a 	mul	r17,r20,r2
  809c84:	0800f780 	call	800f78 <__umodsi3>
  809c88:	d9000117 	ldw	r4,4(sp)
  809c8c:	1004943a 	slli	r2,r2,16
  809c90:	b839883a 	mov	fp,r23
  809c94:	2006d43a 	srli	r3,r4,16
  809c98:	10c4b03a 	or	r2,r2,r3
  809c9c:	1440022e 	bgeu	r2,r17,809ca8 <__umoddi3+0x330>
  809ca0:	1405883a 	add	r2,r2,r16
  809ca4:	1400962e 	bgeu	r2,r16,809f00 <__umoddi3+0x588>
  809ca8:	1463c83a 	sub	r17,r2,r17
  809cac:	8809883a 	mov	r4,r17
  809cb0:	a80b883a 	mov	r5,r21
  809cb4:	0800f700 	call	800f70 <__udivsi3>
  809cb8:	8809883a 	mov	r4,r17
  809cbc:	a80b883a 	mov	r5,r21
  809cc0:	a0a3383a 	mul	r17,r20,r2
  809cc4:	0800f780 	call	800f78 <__umodsi3>
  809cc8:	d9400117 	ldw	r5,4(sp)
  809ccc:	1004943a 	slli	r2,r2,16
  809cd0:	28ffffcc 	andi	r3,r5,65535
  809cd4:	10c4b03a 	or	r2,r2,r3
  809cd8:	1440042e 	bgeu	r2,r17,809cec <__umoddi3+0x374>
  809cdc:	1405883a 	add	r2,r2,r16
  809ce0:	14000236 	bltu	r2,r16,809cec <__umoddi3+0x374>
  809ce4:	1440012e 	bgeu	r2,r17,809cec <__umoddi3+0x374>
  809ce8:	1405883a 	add	r2,r2,r16
  809cec:	b5ec983a 	sll	r22,r22,r23
  809cf0:	1463c83a 	sub	r17,r2,r17
  809cf4:	003f4406 	br	809a08 <__umoddi3+0x90>
  809cf8:	3d4fc83a 	sub	r7,r7,r21
  809cfc:	3546983a 	sll	r3,r6,r21
  809d00:	81c4d83a 	srl	r2,r16,r7
  809d04:	a1e2d83a 	srl	r17,r20,r7
  809d08:	a54c983a 	sll	r6,r20,r21
  809d0c:	18aeb03a 	or	r23,r3,r2
  809d10:	b828d43a 	srli	r20,r23,16
  809d14:	b1c4d83a 	srl	r2,r22,r7
  809d18:	8809883a 	mov	r4,r17
  809d1c:	a00b883a 	mov	r5,r20
  809d20:	308cb03a 	or	r6,r6,r2
  809d24:	d9c00315 	stw	r7,12(sp)
  809d28:	d9800215 	stw	r6,8(sp)
  809d2c:	0800f700 	call	800f70 <__udivsi3>
  809d30:	8809883a 	mov	r4,r17
  809d34:	a00b883a 	mov	r5,r20
  809d38:	1039883a 	mov	fp,r2
  809d3c:	0800f780 	call	800f78 <__umodsi3>
  809d40:	b8ffffcc 	andi	r3,r23,65535
  809d44:	d8c00415 	stw	r3,16(sp)
  809d48:	d9000217 	ldw	r4,8(sp)
  809d4c:	d9400417 	ldw	r5,16(sp)
  809d50:	1004943a 	slli	r2,r2,16
  809d54:	2006d43a 	srli	r3,r4,16
  809d58:	8560983a 	sll	r16,r16,r21
  809d5c:	2f23383a 	mul	r17,r5,fp
  809d60:	10c4b03a 	or	r2,r2,r3
  809d64:	dc000015 	stw	r16,0(sp)
  809d68:	b56c983a 	sll	r22,r22,r21
  809d6c:	1440032e 	bgeu	r2,r17,809d7c <__umoddi3+0x404>
  809d70:	15c5883a 	add	r2,r2,r23
  809d74:	e73fffc4 	addi	fp,fp,-1
  809d78:	15c05d2e 	bgeu	r2,r23,809ef0 <__umoddi3+0x578>
  809d7c:	1463c83a 	sub	r17,r2,r17
  809d80:	8809883a 	mov	r4,r17
  809d84:	a00b883a 	mov	r5,r20
  809d88:	0800f700 	call	800f70 <__udivsi3>
  809d8c:	8809883a 	mov	r4,r17
  809d90:	a00b883a 	mov	r5,r20
  809d94:	1021883a 	mov	r16,r2
  809d98:	0800f780 	call	800f78 <__umodsi3>
  809d9c:	d8c00417 	ldw	r3,16(sp)
  809da0:	d9000217 	ldw	r4,8(sp)
  809da4:	1004943a 	slli	r2,r2,16
  809da8:	1c23383a 	mul	r17,r3,r16
  809dac:	20ffffcc 	andi	r3,r4,65535
  809db0:	10ceb03a 	or	r7,r2,r3
  809db4:	3c40032e 	bgeu	r7,r17,809dc4 <__umoddi3+0x44c>
  809db8:	3dcf883a 	add	r7,r7,r23
  809dbc:	843fffc4 	addi	r16,r16,-1
  809dc0:	3dc0472e 	bgeu	r7,r23,809ee0 <__umoddi3+0x568>
  809dc4:	e004943a 	slli	r2,fp,16
  809dc8:	d9400017 	ldw	r5,0(sp)
  809dcc:	3c4fc83a 	sub	r7,r7,r17
  809dd0:	8084b03a 	or	r2,r16,r2
  809dd4:	28ffffcc 	andi	r3,r5,65535
  809dd8:	280cd43a 	srli	r6,r5,16
  809ddc:	100ad43a 	srli	r5,r2,16
  809de0:	10bfffcc 	andi	r2,r2,65535
  809de4:	10d1383a 	mul	r8,r2,r3
  809de8:	28c7383a 	mul	r3,r5,r3
  809dec:	1185383a 	mul	r2,r2,r6
  809df0:	4008d43a 	srli	r4,r8,16
  809df4:	298b383a 	mul	r5,r5,r6
  809df8:	10c5883a 	add	r2,r2,r3
  809dfc:	2089883a 	add	r4,r4,r2
  809e00:	20c0022e 	bgeu	r4,r3,809e0c <__umoddi3+0x494>
  809e04:	00800074 	movhi	r2,1
  809e08:	288b883a 	add	r5,r5,r2
  809e0c:	2004d43a 	srli	r2,r4,16
  809e10:	2008943a 	slli	r4,r4,16
  809e14:	40ffffcc 	andi	r3,r8,65535
  809e18:	288b883a 	add	r5,r5,r2
  809e1c:	20c9883a 	add	r4,r4,r3
  809e20:	39400b36 	bltu	r7,r5,809e50 <__umoddi3+0x4d8>
  809e24:	39403d26 	beq	r7,r5,809f1c <__umoddi3+0x5a4>
  809e28:	394bc83a 	sub	r5,r7,r5
  809e2c:	00000f06 	br	809e6c <__umoddi3+0x4f4>
  809e30:	30c5c83a 	sub	r2,r6,r3
  809e34:	1839883a 	mov	fp,r3
  809e38:	b084d83a 	srl	r2,r22,r2
  809e3c:	a0c6983a 	sll	r3,r20,r3
  809e40:	8720983a 	sll	r16,r16,fp
  809e44:	b72c983a 	sll	r22,r22,fp
  809e48:	18a8b03a 	or	r20,r3,r2
  809e4c:	003f3a06 	br	809b38 <__umoddi3+0x1c0>
  809e50:	d8c00017 	ldw	r3,0(sp)
  809e54:	20c5c83a 	sub	r2,r4,r3
  809e58:	2089803a 	cmpltu	r4,r4,r2
  809e5c:	2dc7c83a 	sub	r3,r5,r23
  809e60:	1907c83a 	sub	r3,r3,r4
  809e64:	38cbc83a 	sub	r5,r7,r3
  809e68:	1009883a 	mov	r4,r2
  809e6c:	b105c83a 	sub	r2,r22,r4
  809e70:	b087803a 	cmpltu	r3,r22,r2
  809e74:	28c7c83a 	sub	r3,r5,r3
  809e78:	d9400317 	ldw	r5,12(sp)
  809e7c:	1544d83a 	srl	r2,r2,r21
  809e80:	1948983a 	sll	r4,r3,r5
  809e84:	1d46d83a 	srl	r3,r3,r21
  809e88:	20a4b03a 	or	r18,r4,r2
  809e8c:	9011883a 	mov	r8,r18
  809e90:	1813883a 	mov	r9,r3
  809e94:	003ef606 	br	809a70 <__umoddi3+0xf8>
  809e98:	01400604 	movi	r5,24
  809e9c:	2805883a 	mov	r2,r5
  809ea0:	003ecc06 	br	8099d4 <__umoddi3+0x5c>
  809ea4:	01400204 	movi	r5,8
  809ea8:	2805883a 	mov	r2,r5
  809eac:	003ec906 	br	8099d4 <__umoddi3+0x5c>
  809eb0:	01400204 	movi	r5,8
  809eb4:	2805883a 	mov	r2,r5
  809eb8:	003f0106 	br	809ac0 <__umoddi3+0x148>
  809ebc:	01400204 	movi	r5,8
  809ec0:	2805883a 	mov	r2,r5
  809ec4:	003f1206 	br	809b10 <__umoddi3+0x198>
  809ec8:	01400604 	movi	r5,24
  809ecc:	2805883a 	mov	r2,r5
  809ed0:	003f0f06 	br	809b10 <__umoddi3+0x198>
  809ed4:	01400604 	movi	r5,24
  809ed8:	2805883a 	mov	r2,r5
  809edc:	003ef806 	br	809ac0 <__umoddi3+0x148>
  809ee0:	3c7fb82e 	bgeu	r7,r17,809dc4 <__umoddi3+0x44c>
  809ee4:	843fffc4 	addi	r16,r16,-1
  809ee8:	3dcf883a 	add	r7,r7,r23
  809eec:	003fb506 	br	809dc4 <__umoddi3+0x44c>
  809ef0:	147fa22e 	bgeu	r2,r17,809d7c <__umoddi3+0x404>
  809ef4:	e73fffc4 	addi	fp,fp,-1
  809ef8:	15c5883a 	add	r2,r2,r23
  809efc:	003f9f06 	br	809d7c <__umoddi3+0x404>
  809f00:	147f692e 	bgeu	r2,r17,809ca8 <__umoddi3+0x330>
  809f04:	1405883a 	add	r2,r2,r16
  809f08:	003f6706 	br	809ca8 <__umoddi3+0x330>
  809f0c:	1405883a 	add	r2,r2,r16
  809f10:	003f1906 	br	809b78 <__umoddi3+0x200>
  809f14:	1405883a 	add	r2,r2,r16
  809f18:	003ec906 	br	809a40 <__umoddi3+0xc8>
  809f1c:	b13fcc36 	bltu	r22,r4,809e50 <__umoddi3+0x4d8>
  809f20:	000b883a 	mov	r5,zero
  809f24:	003fd106 	br	809e6c <__umoddi3+0x4f4>

00809f28 <_fpadd_parts>:
  809f28:	defff804 	addi	sp,sp,-32
  809f2c:	dcc00315 	stw	r19,12(sp)
  809f30:	2027883a 	mov	r19,r4
  809f34:	21000017 	ldw	r4,0(r4)
  809f38:	00c00044 	movi	r3,1
  809f3c:	dd400515 	stw	r21,20(sp)
  809f40:	dd000415 	stw	r20,16(sp)
  809f44:	ddc00715 	stw	r23,28(sp)
  809f48:	dd800615 	stw	r22,24(sp)
  809f4c:	dc800215 	stw	r18,8(sp)
  809f50:	dc400115 	stw	r17,4(sp)
  809f54:	dc000015 	stw	r16,0(sp)
  809f58:	282b883a 	mov	r21,r5
  809f5c:	3029883a 	mov	r20,r6
  809f60:	1900632e 	bgeu	r3,r4,80a0f0 <_fpadd_parts+0x1c8>
  809f64:	28800017 	ldw	r2,0(r5)
  809f68:	1880812e 	bgeu	r3,r2,80a170 <_fpadd_parts+0x248>
  809f6c:	00c00104 	movi	r3,4
  809f70:	20c0dc26 	beq	r4,r3,80a2e4 <_fpadd_parts+0x3bc>
  809f74:	10c07e26 	beq	r2,r3,80a170 <_fpadd_parts+0x248>
  809f78:	00c00084 	movi	r3,2
  809f7c:	10c06726 	beq	r2,r3,80a11c <_fpadd_parts+0x1f4>
  809f80:	20c07b26 	beq	r4,r3,80a170 <_fpadd_parts+0x248>
  809f84:	9dc00217 	ldw	r23,8(r19)
  809f88:	28c00217 	ldw	r3,8(r5)
  809f8c:	9c400317 	ldw	r17,12(r19)
  809f90:	2bc00317 	ldw	r15,12(r5)
  809f94:	b8cdc83a 	sub	r6,r23,r3
  809f98:	9c800417 	ldw	r18,16(r19)
  809f9c:	2c000417 	ldw	r16,16(r5)
  809fa0:	3009883a 	mov	r4,r6
  809fa4:	30009716 	blt	r6,zero,80a204 <_fpadd_parts+0x2dc>
  809fa8:	00800fc4 	movi	r2,63
  809fac:	11806b16 	blt	r2,r6,80a15c <_fpadd_parts+0x234>
  809fb0:	0100a40e 	bge	zero,r4,80a244 <_fpadd_parts+0x31c>
  809fb4:	35bff804 	addi	r22,r6,-32
  809fb8:	b000bc16 	blt	r22,zero,80a2ac <_fpadd_parts+0x384>
  809fbc:	8596d83a 	srl	r11,r16,r22
  809fc0:	0019883a 	mov	r12,zero
  809fc4:	0013883a 	mov	r9,zero
  809fc8:	01000044 	movi	r4,1
  809fcc:	0015883a 	mov	r10,zero
  809fd0:	b000be16 	blt	r22,zero,80a2cc <_fpadd_parts+0x3a4>
  809fd4:	2590983a 	sll	r8,r4,r22
  809fd8:	000f883a 	mov	r7,zero
  809fdc:	00bfffc4 	movi	r2,-1
  809fe0:	3889883a 	add	r4,r7,r2
  809fe4:	408b883a 	add	r5,r8,r2
  809fe8:	21cd803a 	cmpltu	r6,r4,r7
  809fec:	314b883a 	add	r5,r6,r5
  809ff0:	7904703a 	and	r2,r15,r4
  809ff4:	8146703a 	and	r3,r16,r5
  809ff8:	10c4b03a 	or	r2,r2,r3
  809ffc:	10000226 	beq	r2,zero,80a008 <_fpadd_parts+0xe0>
  80a000:	02400044 	movi	r9,1
  80a004:	0015883a 	mov	r10,zero
  80a008:	5a5eb03a 	or	r15,r11,r9
  80a00c:	62a0b03a 	or	r16,r12,r10
  80a010:	99400117 	ldw	r5,4(r19)
  80a014:	a8800117 	ldw	r2,4(r21)
  80a018:	28806e26 	beq	r5,r2,80a1d4 <_fpadd_parts+0x2ac>
  80a01c:	28006626 	beq	r5,zero,80a1b8 <_fpadd_parts+0x290>
  80a020:	7c45c83a 	sub	r2,r15,r17
  80a024:	7889803a 	cmpltu	r4,r15,r2
  80a028:	8487c83a 	sub	r3,r16,r18
  80a02c:	1909c83a 	sub	r4,r3,r4
  80a030:	100d883a 	mov	r6,r2
  80a034:	200f883a 	mov	r7,r4
  80a038:	38007716 	blt	r7,zero,80a218 <_fpadd_parts+0x2f0>
  80a03c:	a5c00215 	stw	r23,8(r20)
  80a040:	a1c00415 	stw	r7,16(r20)
  80a044:	a0000115 	stw	zero,4(r20)
  80a048:	a1800315 	stw	r6,12(r20)
  80a04c:	a2000317 	ldw	r8,12(r20)
  80a050:	a2400417 	ldw	r9,16(r20)
  80a054:	00bfffc4 	movi	r2,-1
  80a058:	408b883a 	add	r5,r8,r2
  80a05c:	2a09803a 	cmpltu	r4,r5,r8
  80a060:	488d883a 	add	r6,r9,r2
  80a064:	01c40034 	movhi	r7,4096
  80a068:	39ffffc4 	addi	r7,r7,-1
  80a06c:	218d883a 	add	r6,r4,r6
  80a070:	39801736 	bltu	r7,r6,80a0d0 <_fpadd_parts+0x1a8>
  80a074:	31c06526 	beq	r6,r7,80a20c <_fpadd_parts+0x2e4>
  80a078:	a3000217 	ldw	r12,8(r20)
  80a07c:	4209883a 	add	r4,r8,r8
  80a080:	00bfffc4 	movi	r2,-1
  80a084:	220f803a 	cmpltu	r7,r4,r8
  80a088:	4a4b883a 	add	r5,r9,r9
  80a08c:	394f883a 	add	r7,r7,r5
  80a090:	2095883a 	add	r10,r4,r2
  80a094:	3897883a 	add	r11,r7,r2
  80a098:	510d803a 	cmpltu	r6,r10,r4
  80a09c:	6099883a 	add	r12,r12,r2
  80a0a0:	32d7883a 	add	r11,r6,r11
  80a0a4:	00840034 	movhi	r2,4096
  80a0a8:	10bfffc4 	addi	r2,r2,-1
  80a0ac:	2011883a 	mov	r8,r4
  80a0b0:	3813883a 	mov	r9,r7
  80a0b4:	a1000315 	stw	r4,12(r20)
  80a0b8:	a1c00415 	stw	r7,16(r20)
  80a0bc:	a3000215 	stw	r12,8(r20)
  80a0c0:	12c00336 	bltu	r2,r11,80a0d0 <_fpadd_parts+0x1a8>
  80a0c4:	58bfed1e 	bne	r11,r2,80a07c <_fpadd_parts+0x154>
  80a0c8:	00bfff84 	movi	r2,-2
  80a0cc:	12bfeb2e 	bgeu	r2,r10,80a07c <_fpadd_parts+0x154>
  80a0d0:	a2800417 	ldw	r10,16(r20)
  80a0d4:	008000c4 	movi	r2,3
  80a0d8:	00c80034 	movhi	r3,8192
  80a0dc:	18ffffc4 	addi	r3,r3,-1
  80a0e0:	a2400317 	ldw	r9,12(r20)
  80a0e4:	a0800015 	stw	r2,0(r20)
  80a0e8:	1a802336 	bltu	r3,r10,80a178 <_fpadd_parts+0x250>
  80a0ec:	a027883a 	mov	r19,r20
  80a0f0:	9805883a 	mov	r2,r19
  80a0f4:	ddc00717 	ldw	r23,28(sp)
  80a0f8:	dd800617 	ldw	r22,24(sp)
  80a0fc:	dd400517 	ldw	r21,20(sp)
  80a100:	dd000417 	ldw	r20,16(sp)
  80a104:	dcc00317 	ldw	r19,12(sp)
  80a108:	dc800217 	ldw	r18,8(sp)
  80a10c:	dc400117 	ldw	r17,4(sp)
  80a110:	dc000017 	ldw	r16,0(sp)
  80a114:	dec00804 	addi	sp,sp,32
  80a118:	f800283a 	ret
  80a11c:	20fff41e 	bne	r4,r3,80a0f0 <_fpadd_parts+0x1c8>
  80a120:	31000015 	stw	r4,0(r6)
  80a124:	98800117 	ldw	r2,4(r19)
  80a128:	30800115 	stw	r2,4(r6)
  80a12c:	98c00217 	ldw	r3,8(r19)
  80a130:	30c00215 	stw	r3,8(r6)
  80a134:	98800317 	ldw	r2,12(r19)
  80a138:	30800315 	stw	r2,12(r6)
  80a13c:	98c00417 	ldw	r3,16(r19)
  80a140:	30c00415 	stw	r3,16(r6)
  80a144:	98800117 	ldw	r2,4(r19)
  80a148:	28c00117 	ldw	r3,4(r5)
  80a14c:	3027883a 	mov	r19,r6
  80a150:	10c4703a 	and	r2,r2,r3
  80a154:	30800115 	stw	r2,4(r6)
  80a158:	003fe506 	br	80a0f0 <_fpadd_parts+0x1c8>
  80a15c:	1dc02616 	blt	r3,r23,80a1f8 <_fpadd_parts+0x2d0>
  80a160:	0023883a 	mov	r17,zero
  80a164:	182f883a 	mov	r23,r3
  80a168:	0025883a 	mov	r18,zero
  80a16c:	003fa806 	br	80a010 <_fpadd_parts+0xe8>
  80a170:	a827883a 	mov	r19,r21
  80a174:	003fde06 	br	80a0f0 <_fpadd_parts+0x1c8>
  80a178:	01800044 	movi	r6,1
  80a17c:	500497fa 	slli	r2,r10,31
  80a180:	4808d07a 	srli	r4,r9,1
  80a184:	518ad83a 	srl	r5,r10,r6
  80a188:	a2000217 	ldw	r8,8(r20)
  80a18c:	1108b03a 	or	r4,r2,r4
  80a190:	0007883a 	mov	r3,zero
  80a194:	4984703a 	and	r2,r9,r6
  80a198:	208cb03a 	or	r6,r4,r2
  80a19c:	28ceb03a 	or	r7,r5,r3
  80a1a0:	42000044 	addi	r8,r8,1
  80a1a4:	a027883a 	mov	r19,r20
  80a1a8:	a1c00415 	stw	r7,16(r20)
  80a1ac:	a2000215 	stw	r8,8(r20)
  80a1b0:	a1800315 	stw	r6,12(r20)
  80a1b4:	003fce06 	br	80a0f0 <_fpadd_parts+0x1c8>
  80a1b8:	8bc5c83a 	sub	r2,r17,r15
  80a1bc:	8889803a 	cmpltu	r4,r17,r2
  80a1c0:	9407c83a 	sub	r3,r18,r16
  80a1c4:	1909c83a 	sub	r4,r3,r4
  80a1c8:	100d883a 	mov	r6,r2
  80a1cc:	200f883a 	mov	r7,r4
  80a1d0:	003f9906 	br	80a038 <_fpadd_parts+0x110>
  80a1d4:	7c45883a 	add	r2,r15,r17
  80a1d8:	13c9803a 	cmpltu	r4,r2,r15
  80a1dc:	8487883a 	add	r3,r16,r18
  80a1e0:	20c9883a 	add	r4,r4,r3
  80a1e4:	a1400115 	stw	r5,4(r20)
  80a1e8:	a5c00215 	stw	r23,8(r20)
  80a1ec:	a0800315 	stw	r2,12(r20)
  80a1f0:	a1000415 	stw	r4,16(r20)
  80a1f4:	003fb606 	br	80a0d0 <_fpadd_parts+0x1a8>
  80a1f8:	001f883a 	mov	r15,zero
  80a1fc:	0021883a 	mov	r16,zero
  80a200:	003f8306 	br	80a010 <_fpadd_parts+0xe8>
  80a204:	018dc83a 	sub	r6,zero,r6
  80a208:	003f6706 	br	809fa8 <_fpadd_parts+0x80>
  80a20c:	00bfff84 	movi	r2,-2
  80a210:	117faf36 	bltu	r2,r5,80a0d0 <_fpadd_parts+0x1a8>
  80a214:	003f9806 	br	80a078 <_fpadd_parts+0x150>
  80a218:	0005883a 	mov	r2,zero
  80a21c:	1189c83a 	sub	r4,r2,r6
  80a220:	1105803a 	cmpltu	r2,r2,r4
  80a224:	01cbc83a 	sub	r5,zero,r7
  80a228:	2885c83a 	sub	r2,r5,r2
  80a22c:	01800044 	movi	r6,1
  80a230:	a1800115 	stw	r6,4(r20)
  80a234:	a5c00215 	stw	r23,8(r20)
  80a238:	a1000315 	stw	r4,12(r20)
  80a23c:	a0800415 	stw	r2,16(r20)
  80a240:	003f8206 	br	80a04c <_fpadd_parts+0x124>
  80a244:	203f7226 	beq	r4,zero,80a010 <_fpadd_parts+0xe8>
  80a248:	35bff804 	addi	r22,r6,-32
  80a24c:	b9af883a 	add	r23,r23,r6
  80a250:	b0003116 	blt	r22,zero,80a318 <_fpadd_parts+0x3f0>
  80a254:	959ad83a 	srl	r13,r18,r22
  80a258:	001d883a 	mov	r14,zero
  80a25c:	000f883a 	mov	r7,zero
  80a260:	01000044 	movi	r4,1
  80a264:	0011883a 	mov	r8,zero
  80a268:	b0002516 	blt	r22,zero,80a300 <_fpadd_parts+0x3d8>
  80a26c:	2594983a 	sll	r10,r4,r22
  80a270:	0013883a 	mov	r9,zero
  80a274:	00bfffc4 	movi	r2,-1
  80a278:	4889883a 	add	r4,r9,r2
  80a27c:	508b883a 	add	r5,r10,r2
  80a280:	224d803a 	cmpltu	r6,r4,r9
  80a284:	314b883a 	add	r5,r6,r5
  80a288:	8904703a 	and	r2,r17,r4
  80a28c:	9146703a 	and	r3,r18,r5
  80a290:	10c4b03a 	or	r2,r2,r3
  80a294:	10000226 	beq	r2,zero,80a2a0 <_fpadd_parts+0x378>
  80a298:	01c00044 	movi	r7,1
  80a29c:	0011883a 	mov	r8,zero
  80a2a0:	69e2b03a 	or	r17,r13,r7
  80a2a4:	7224b03a 	or	r18,r14,r8
  80a2a8:	003f5906 	br	80a010 <_fpadd_parts+0xe8>
  80a2ac:	8407883a 	add	r3,r16,r16
  80a2b0:	008007c4 	movi	r2,31
  80a2b4:	1185c83a 	sub	r2,r2,r6
  80a2b8:	1886983a 	sll	r3,r3,r2
  80a2bc:	7996d83a 	srl	r11,r15,r6
  80a2c0:	8198d83a 	srl	r12,r16,r6
  80a2c4:	1ad6b03a 	or	r11,r3,r11
  80a2c8:	003f3e06 	br	809fc4 <_fpadd_parts+0x9c>
  80a2cc:	2006d07a 	srli	r3,r4,1
  80a2d0:	008007c4 	movi	r2,31
  80a2d4:	1185c83a 	sub	r2,r2,r6
  80a2d8:	1890d83a 	srl	r8,r3,r2
  80a2dc:	218e983a 	sll	r7,r4,r6
  80a2e0:	003f3e06 	br	809fdc <_fpadd_parts+0xb4>
  80a2e4:	113f821e 	bne	r2,r4,80a0f0 <_fpadd_parts+0x1c8>
  80a2e8:	28c00117 	ldw	r3,4(r5)
  80a2ec:	98800117 	ldw	r2,4(r19)
  80a2f0:	10ff7f26 	beq	r2,r3,80a0f0 <_fpadd_parts+0x1c8>
  80a2f4:	04c02074 	movhi	r19,129
  80a2f8:	9cc0bc04 	addi	r19,r19,752
  80a2fc:	003f7c06 	br	80a0f0 <_fpadd_parts+0x1c8>
  80a300:	2006d07a 	srli	r3,r4,1
  80a304:	008007c4 	movi	r2,31
  80a308:	1185c83a 	sub	r2,r2,r6
  80a30c:	1894d83a 	srl	r10,r3,r2
  80a310:	2192983a 	sll	r9,r4,r6
  80a314:	003fd706 	br	80a274 <_fpadd_parts+0x34c>
  80a318:	9487883a 	add	r3,r18,r18
  80a31c:	008007c4 	movi	r2,31
  80a320:	1185c83a 	sub	r2,r2,r6
  80a324:	1886983a 	sll	r3,r3,r2
  80a328:	899ad83a 	srl	r13,r17,r6
  80a32c:	919cd83a 	srl	r14,r18,r6
  80a330:	1b5ab03a 	or	r13,r3,r13
  80a334:	003fc906 	br	80a25c <_fpadd_parts+0x334>

0080a338 <__subdf3>:
  80a338:	deffea04 	addi	sp,sp,-88
  80a33c:	dcc01415 	stw	r19,80(sp)
  80a340:	dcc00404 	addi	r19,sp,16
  80a344:	2011883a 	mov	r8,r4
  80a348:	2813883a 	mov	r9,r5
  80a34c:	dc401315 	stw	r17,76(sp)
  80a350:	d809883a 	mov	r4,sp
  80a354:	980b883a 	mov	r5,r19
  80a358:	dc400904 	addi	r17,sp,36
  80a35c:	dfc01515 	stw	ra,84(sp)
  80a360:	da400115 	stw	r9,4(sp)
  80a364:	d9c00315 	stw	r7,12(sp)
  80a368:	da000015 	stw	r8,0(sp)
  80a36c:	d9800215 	stw	r6,8(sp)
  80a370:	080b4800 	call	80b480 <__unpack_d>
  80a374:	d9000204 	addi	r4,sp,8
  80a378:	880b883a 	mov	r5,r17
  80a37c:	080b4800 	call	80b480 <__unpack_d>
  80a380:	d8800a17 	ldw	r2,40(sp)
  80a384:	880b883a 	mov	r5,r17
  80a388:	9809883a 	mov	r4,r19
  80a38c:	d9800e04 	addi	r6,sp,56
  80a390:	1080005c 	xori	r2,r2,1
  80a394:	d8800a15 	stw	r2,40(sp)
  80a398:	0809f280 	call	809f28 <_fpadd_parts>
  80a39c:	1009883a 	mov	r4,r2
  80a3a0:	080b16c0 	call	80b16c <__pack_d>
  80a3a4:	dfc01517 	ldw	ra,84(sp)
  80a3a8:	dcc01417 	ldw	r19,80(sp)
  80a3ac:	dc401317 	ldw	r17,76(sp)
  80a3b0:	dec01604 	addi	sp,sp,88
  80a3b4:	f800283a 	ret

0080a3b8 <__adddf3>:
  80a3b8:	deffea04 	addi	sp,sp,-88
  80a3bc:	dcc01415 	stw	r19,80(sp)
  80a3c0:	dcc00404 	addi	r19,sp,16
  80a3c4:	2011883a 	mov	r8,r4
  80a3c8:	2813883a 	mov	r9,r5
  80a3cc:	dc401315 	stw	r17,76(sp)
  80a3d0:	d809883a 	mov	r4,sp
  80a3d4:	980b883a 	mov	r5,r19
  80a3d8:	dc400904 	addi	r17,sp,36
  80a3dc:	dfc01515 	stw	ra,84(sp)
  80a3e0:	da400115 	stw	r9,4(sp)
  80a3e4:	d9c00315 	stw	r7,12(sp)
  80a3e8:	da000015 	stw	r8,0(sp)
  80a3ec:	d9800215 	stw	r6,8(sp)
  80a3f0:	080b4800 	call	80b480 <__unpack_d>
  80a3f4:	d9000204 	addi	r4,sp,8
  80a3f8:	880b883a 	mov	r5,r17
  80a3fc:	080b4800 	call	80b480 <__unpack_d>
  80a400:	d9800e04 	addi	r6,sp,56
  80a404:	9809883a 	mov	r4,r19
  80a408:	880b883a 	mov	r5,r17
  80a40c:	0809f280 	call	809f28 <_fpadd_parts>
  80a410:	1009883a 	mov	r4,r2
  80a414:	080b16c0 	call	80b16c <__pack_d>
  80a418:	dfc01517 	ldw	ra,84(sp)
  80a41c:	dcc01417 	ldw	r19,80(sp)
  80a420:	dc401317 	ldw	r17,76(sp)
  80a424:	dec01604 	addi	sp,sp,88
  80a428:	f800283a 	ret

0080a42c <__muldf3>:
  80a42c:	deffe004 	addi	sp,sp,-128
  80a430:	dc401815 	stw	r17,96(sp)
  80a434:	dc400404 	addi	r17,sp,16
  80a438:	2011883a 	mov	r8,r4
  80a43c:	2813883a 	mov	r9,r5
  80a440:	dc001715 	stw	r16,92(sp)
  80a444:	d809883a 	mov	r4,sp
  80a448:	880b883a 	mov	r5,r17
  80a44c:	dc000904 	addi	r16,sp,36
  80a450:	dfc01f15 	stw	ra,124(sp)
  80a454:	da400115 	stw	r9,4(sp)
  80a458:	d9c00315 	stw	r7,12(sp)
  80a45c:	da000015 	stw	r8,0(sp)
  80a460:	d9800215 	stw	r6,8(sp)
  80a464:	ddc01e15 	stw	r23,120(sp)
  80a468:	dd801d15 	stw	r22,116(sp)
  80a46c:	dd401c15 	stw	r21,112(sp)
  80a470:	dd001b15 	stw	r20,108(sp)
  80a474:	dcc01a15 	stw	r19,104(sp)
  80a478:	dc801915 	stw	r18,100(sp)
  80a47c:	080b4800 	call	80b480 <__unpack_d>
  80a480:	d9000204 	addi	r4,sp,8
  80a484:	800b883a 	mov	r5,r16
  80a488:	080b4800 	call	80b480 <__unpack_d>
  80a48c:	d9000417 	ldw	r4,16(sp)
  80a490:	00800044 	movi	r2,1
  80a494:	1100102e 	bgeu	r2,r4,80a4d8 <__muldf3+0xac>
  80a498:	d8c00917 	ldw	r3,36(sp)
  80a49c:	10c0062e 	bgeu	r2,r3,80a4b8 <__muldf3+0x8c>
  80a4a0:	00800104 	movi	r2,4
  80a4a4:	20800a26 	beq	r4,r2,80a4d0 <__muldf3+0xa4>
  80a4a8:	1880cc26 	beq	r3,r2,80a7dc <__muldf3+0x3b0>
  80a4ac:	00800084 	movi	r2,2
  80a4b0:	20800926 	beq	r4,r2,80a4d8 <__muldf3+0xac>
  80a4b4:	1880191e 	bne	r3,r2,80a51c <__muldf3+0xf0>
  80a4b8:	d8c00a17 	ldw	r3,40(sp)
  80a4bc:	d8800517 	ldw	r2,20(sp)
  80a4c0:	8009883a 	mov	r4,r16
  80a4c4:	10c4c03a 	cmpne	r2,r2,r3
  80a4c8:	d8800a15 	stw	r2,40(sp)
  80a4cc:	00000706 	br	80a4ec <__muldf3+0xc0>
  80a4d0:	00800084 	movi	r2,2
  80a4d4:	1880c326 	beq	r3,r2,80a7e4 <__muldf3+0x3b8>
  80a4d8:	d8800517 	ldw	r2,20(sp)
  80a4dc:	d8c00a17 	ldw	r3,40(sp)
  80a4e0:	8809883a 	mov	r4,r17
  80a4e4:	10c4c03a 	cmpne	r2,r2,r3
  80a4e8:	d8800515 	stw	r2,20(sp)
  80a4ec:	080b16c0 	call	80b16c <__pack_d>
  80a4f0:	dfc01f17 	ldw	ra,124(sp)
  80a4f4:	ddc01e17 	ldw	r23,120(sp)
  80a4f8:	dd801d17 	ldw	r22,116(sp)
  80a4fc:	dd401c17 	ldw	r21,112(sp)
  80a500:	dd001b17 	ldw	r20,108(sp)
  80a504:	dcc01a17 	ldw	r19,104(sp)
  80a508:	dc801917 	ldw	r18,100(sp)
  80a50c:	dc401817 	ldw	r17,96(sp)
  80a510:	dc001717 	ldw	r16,92(sp)
  80a514:	dec02004 	addi	sp,sp,128
  80a518:	f800283a 	ret
  80a51c:	dd800717 	ldw	r22,28(sp)
  80a520:	dc800c17 	ldw	r18,48(sp)
  80a524:	002b883a 	mov	r21,zero
  80a528:	0023883a 	mov	r17,zero
  80a52c:	a80b883a 	mov	r5,r21
  80a530:	b00d883a 	mov	r6,r22
  80a534:	880f883a 	mov	r7,r17
  80a538:	ddc00817 	ldw	r23,32(sp)
  80a53c:	dcc00d17 	ldw	r19,52(sp)
  80a540:	9009883a 	mov	r4,r18
  80a544:	080b0540 	call	80b054 <__muldi3>
  80a548:	001b883a 	mov	r13,zero
  80a54c:	680f883a 	mov	r7,r13
  80a550:	b009883a 	mov	r4,r22
  80a554:	000b883a 	mov	r5,zero
  80a558:	980d883a 	mov	r6,r19
  80a55c:	b82d883a 	mov	r22,r23
  80a560:	002f883a 	mov	r23,zero
  80a564:	db401615 	stw	r13,88(sp)
  80a568:	d8801315 	stw	r2,76(sp)
  80a56c:	d8c01415 	stw	r3,80(sp)
  80a570:	dcc01515 	stw	r19,84(sp)
  80a574:	080b0540 	call	80b054 <__muldi3>
  80a578:	b00d883a 	mov	r6,r22
  80a57c:	000b883a 	mov	r5,zero
  80a580:	9009883a 	mov	r4,r18
  80a584:	b80f883a 	mov	r7,r23
  80a588:	1021883a 	mov	r16,r2
  80a58c:	1823883a 	mov	r17,r3
  80a590:	080b0540 	call	80b054 <__muldi3>
  80a594:	8085883a 	add	r2,r16,r2
  80a598:	140d803a 	cmpltu	r6,r2,r16
  80a59c:	88c7883a 	add	r3,r17,r3
  80a5a0:	30cd883a 	add	r6,r6,r3
  80a5a4:	1029883a 	mov	r20,r2
  80a5a8:	302b883a 	mov	r21,r6
  80a5ac:	da801317 	ldw	r10,76(sp)
  80a5b0:	dac01417 	ldw	r11,80(sp)
  80a5b4:	db001517 	ldw	r12,84(sp)
  80a5b8:	db401617 	ldw	r13,88(sp)
  80a5bc:	3440612e 	bgeu	r6,r17,80a744 <__muldf3+0x318>
  80a5c0:	0009883a 	mov	r4,zero
  80a5c4:	5105883a 	add	r2,r10,r4
  80a5c8:	128d803a 	cmpltu	r6,r2,r10
  80a5cc:	5d07883a 	add	r3,r11,r20
  80a5d0:	30cd883a 	add	r6,r6,r3
  80a5d4:	0021883a 	mov	r16,zero
  80a5d8:	04400044 	movi	r17,1
  80a5dc:	1025883a 	mov	r18,r2
  80a5e0:	3027883a 	mov	r19,r6
  80a5e4:	32c06236 	bltu	r6,r11,80a770 <__muldf3+0x344>
  80a5e8:	59807a26 	beq	r11,r6,80a7d4 <__muldf3+0x3a8>
  80a5ec:	680b883a 	mov	r5,r13
  80a5f0:	b80f883a 	mov	r7,r23
  80a5f4:	6009883a 	mov	r4,r12
  80a5f8:	b00d883a 	mov	r6,r22
  80a5fc:	080b0540 	call	80b054 <__muldi3>
  80a600:	1009883a 	mov	r4,r2
  80a604:	000f883a 	mov	r7,zero
  80a608:	1545883a 	add	r2,r2,r21
  80a60c:	1111803a 	cmpltu	r8,r2,r4
  80a610:	19c7883a 	add	r3,r3,r7
  80a614:	40c7883a 	add	r3,r8,r3
  80a618:	88cb883a 	add	r5,r17,r3
  80a61c:	d8c00617 	ldw	r3,24(sp)
  80a620:	8089883a 	add	r4,r16,r2
  80a624:	d8800b17 	ldw	r2,44(sp)
  80a628:	18c00104 	addi	r3,r3,4
  80a62c:	240d803a 	cmpltu	r6,r4,r16
  80a630:	10c7883a 	add	r3,r2,r3
  80a634:	2013883a 	mov	r9,r4
  80a638:	d8800a17 	ldw	r2,40(sp)
  80a63c:	d9000517 	ldw	r4,20(sp)
  80a640:	314d883a 	add	r6,r6,r5
  80a644:	3015883a 	mov	r10,r6
  80a648:	2088c03a 	cmpne	r4,r4,r2
  80a64c:	00880034 	movhi	r2,8192
  80a650:	10bfffc4 	addi	r2,r2,-1
  80a654:	d9000f15 	stw	r4,60(sp)
  80a658:	d8c01015 	stw	r3,64(sp)
  80a65c:	1180162e 	bgeu	r2,r6,80a6b8 <__muldf3+0x28c>
  80a660:	1811883a 	mov	r8,r3
  80a664:	101f883a 	mov	r15,r2
  80a668:	980497fa 	slli	r2,r19,31
  80a66c:	9016d07a 	srli	r11,r18,1
  80a670:	500697fa 	slli	r3,r10,31
  80a674:	480cd07a 	srli	r6,r9,1
  80a678:	500ed07a 	srli	r7,r10,1
  80a67c:	12d6b03a 	or	r11,r2,r11
  80a680:	00800044 	movi	r2,1
  80a684:	198cb03a 	or	r6,r3,r6
  80a688:	4888703a 	and	r4,r9,r2
  80a68c:	9818d07a 	srli	r12,r19,1
  80a690:	001b883a 	mov	r13,zero
  80a694:	03a00034 	movhi	r14,32768
  80a698:	3013883a 	mov	r9,r6
  80a69c:	3815883a 	mov	r10,r7
  80a6a0:	4091883a 	add	r8,r8,r2
  80a6a4:	20000226 	beq	r4,zero,80a6b0 <__muldf3+0x284>
  80a6a8:	5b64b03a 	or	r18,r11,r13
  80a6ac:	63a6b03a 	or	r19,r12,r14
  80a6b0:	7abfed36 	bltu	r15,r10,80a668 <__muldf3+0x23c>
  80a6b4:	da001015 	stw	r8,64(sp)
  80a6b8:	00840034 	movhi	r2,4096
  80a6bc:	10bfffc4 	addi	r2,r2,-1
  80a6c0:	12801436 	bltu	r2,r10,80a714 <__muldf3+0x2e8>
  80a6c4:	da001017 	ldw	r8,64(sp)
  80a6c8:	101f883a 	mov	r15,r2
  80a6cc:	4a45883a 	add	r2,r9,r9
  80a6d0:	124d803a 	cmpltu	r6,r2,r9
  80a6d4:	5287883a 	add	r3,r10,r10
  80a6d8:	9497883a 	add	r11,r18,r18
  80a6dc:	5c8f803a 	cmpltu	r7,r11,r18
  80a6e0:	9cd9883a 	add	r12,r19,r19
  80a6e4:	01000044 	movi	r4,1
  80a6e8:	30cd883a 	add	r6,r6,r3
  80a6ec:	3b0f883a 	add	r7,r7,r12
  80a6f0:	423fffc4 	addi	r8,r8,-1
  80a6f4:	1013883a 	mov	r9,r2
  80a6f8:	3015883a 	mov	r10,r6
  80a6fc:	111ab03a 	or	r13,r2,r4
  80a700:	98003016 	blt	r19,zero,80a7c4 <__muldf3+0x398>
  80a704:	5825883a 	mov	r18,r11
  80a708:	3827883a 	mov	r19,r7
  80a70c:	7abfef2e 	bgeu	r15,r10,80a6cc <__muldf3+0x2a0>
  80a710:	da001015 	stw	r8,64(sp)
  80a714:	00803fc4 	movi	r2,255
  80a718:	488e703a 	and	r7,r9,r2
  80a71c:	00802004 	movi	r2,128
  80a720:	0007883a 	mov	r3,zero
  80a724:	0011883a 	mov	r8,zero
  80a728:	38801826 	beq	r7,r2,80a78c <__muldf3+0x360>
  80a72c:	008000c4 	movi	r2,3
  80a730:	d9000e04 	addi	r4,sp,56
  80a734:	da801215 	stw	r10,72(sp)
  80a738:	d8800e15 	stw	r2,56(sp)
  80a73c:	da401115 	stw	r9,68(sp)
  80a740:	003f6a06 	br	80a4ec <__muldf3+0xc0>
  80a744:	89802126 	beq	r17,r6,80a7cc <__muldf3+0x3a0>
  80a748:	0009883a 	mov	r4,zero
  80a74c:	5105883a 	add	r2,r10,r4
  80a750:	128d803a 	cmpltu	r6,r2,r10
  80a754:	5d07883a 	add	r3,r11,r20
  80a758:	30cd883a 	add	r6,r6,r3
  80a75c:	0021883a 	mov	r16,zero
  80a760:	0023883a 	mov	r17,zero
  80a764:	1025883a 	mov	r18,r2
  80a768:	3027883a 	mov	r19,r6
  80a76c:	32ff9e2e 	bgeu	r6,r11,80a5e8 <__muldf3+0x1bc>
  80a770:	00800044 	movi	r2,1
  80a774:	8089883a 	add	r4,r16,r2
  80a778:	240d803a 	cmpltu	r6,r4,r16
  80a77c:	344d883a 	add	r6,r6,r17
  80a780:	2021883a 	mov	r16,r4
  80a784:	3023883a 	mov	r17,r6
  80a788:	003f9806 	br	80a5ec <__muldf3+0x1c0>
  80a78c:	403fe71e 	bne	r8,zero,80a72c <__muldf3+0x300>
  80a790:	01004004 	movi	r4,256
  80a794:	4904703a 	and	r2,r9,r4
  80a798:	10c4b03a 	or	r2,r2,r3
  80a79c:	103fe31e 	bne	r2,zero,80a72c <__muldf3+0x300>
  80a7a0:	94c4b03a 	or	r2,r18,r19
  80a7a4:	103fe126 	beq	r2,zero,80a72c <__muldf3+0x300>
  80a7a8:	49c5883a 	add	r2,r9,r7
  80a7ac:	1251803a 	cmpltu	r8,r2,r9
  80a7b0:	4291883a 	add	r8,r8,r10
  80a7b4:	013fc004 	movi	r4,-256
  80a7b8:	1112703a 	and	r9,r2,r4
  80a7bc:	4015883a 	mov	r10,r8
  80a7c0:	003fda06 	br	80a72c <__muldf3+0x300>
  80a7c4:	6813883a 	mov	r9,r13
  80a7c8:	003fce06 	br	80a704 <__muldf3+0x2d8>
  80a7cc:	143f7c36 	bltu	r2,r16,80a5c0 <__muldf3+0x194>
  80a7d0:	003fdd06 	br	80a748 <__muldf3+0x31c>
  80a7d4:	12bf852e 	bgeu	r2,r10,80a5ec <__muldf3+0x1c0>
  80a7d8:	003fe506 	br	80a770 <__muldf3+0x344>
  80a7dc:	00800084 	movi	r2,2
  80a7e0:	20bf351e 	bne	r4,r2,80a4b8 <__muldf3+0x8c>
  80a7e4:	01002074 	movhi	r4,129
  80a7e8:	2100bc04 	addi	r4,r4,752
  80a7ec:	003f3f06 	br	80a4ec <__muldf3+0xc0>

0080a7f0 <__divdf3>:
  80a7f0:	deffed04 	addi	sp,sp,-76
  80a7f4:	dcc01115 	stw	r19,68(sp)
  80a7f8:	dcc00404 	addi	r19,sp,16
  80a7fc:	2011883a 	mov	r8,r4
  80a800:	2813883a 	mov	r9,r5
  80a804:	dc000e15 	stw	r16,56(sp)
  80a808:	d809883a 	mov	r4,sp
  80a80c:	980b883a 	mov	r5,r19
  80a810:	dc000904 	addi	r16,sp,36
  80a814:	dfc01215 	stw	ra,72(sp)
  80a818:	da400115 	stw	r9,4(sp)
  80a81c:	d9c00315 	stw	r7,12(sp)
  80a820:	da000015 	stw	r8,0(sp)
  80a824:	d9800215 	stw	r6,8(sp)
  80a828:	dc801015 	stw	r18,64(sp)
  80a82c:	dc400f15 	stw	r17,60(sp)
  80a830:	080b4800 	call	80b480 <__unpack_d>
  80a834:	d9000204 	addi	r4,sp,8
  80a838:	800b883a 	mov	r5,r16
  80a83c:	080b4800 	call	80b480 <__unpack_d>
  80a840:	d9000417 	ldw	r4,16(sp)
  80a844:	00800044 	movi	r2,1
  80a848:	11000b2e 	bgeu	r2,r4,80a878 <__divdf3+0x88>
  80a84c:	d9400917 	ldw	r5,36(sp)
  80a850:	1140762e 	bgeu	r2,r5,80aa2c <__divdf3+0x23c>
  80a854:	d8800517 	ldw	r2,20(sp)
  80a858:	d8c00a17 	ldw	r3,40(sp)
  80a85c:	01800104 	movi	r6,4
  80a860:	10c4f03a 	xor	r2,r2,r3
  80a864:	d8800515 	stw	r2,20(sp)
  80a868:	21800226 	beq	r4,r6,80a874 <__divdf3+0x84>
  80a86c:	00800084 	movi	r2,2
  80a870:	2080141e 	bne	r4,r2,80a8c4 <__divdf3+0xd4>
  80a874:	29000926 	beq	r5,r4,80a89c <__divdf3+0xac>
  80a878:	9809883a 	mov	r4,r19
  80a87c:	080b16c0 	call	80b16c <__pack_d>
  80a880:	dfc01217 	ldw	ra,72(sp)
  80a884:	dcc01117 	ldw	r19,68(sp)
  80a888:	dc801017 	ldw	r18,64(sp)
  80a88c:	dc400f17 	ldw	r17,60(sp)
  80a890:	dc000e17 	ldw	r16,56(sp)
  80a894:	dec01304 	addi	sp,sp,76
  80a898:	f800283a 	ret
  80a89c:	01002074 	movhi	r4,129
  80a8a0:	2100bc04 	addi	r4,r4,752
  80a8a4:	080b16c0 	call	80b16c <__pack_d>
  80a8a8:	dfc01217 	ldw	ra,72(sp)
  80a8ac:	dcc01117 	ldw	r19,68(sp)
  80a8b0:	dc801017 	ldw	r18,64(sp)
  80a8b4:	dc400f17 	ldw	r17,60(sp)
  80a8b8:	dc000e17 	ldw	r16,56(sp)
  80a8bc:	dec01304 	addi	sp,sp,76
  80a8c0:	f800283a 	ret
  80a8c4:	29805b26 	beq	r5,r6,80aa34 <__divdf3+0x244>
  80a8c8:	28802d26 	beq	r5,r2,80a980 <__divdf3+0x190>
  80a8cc:	d8c00617 	ldw	r3,24(sp)
  80a8d0:	d8800b17 	ldw	r2,44(sp)
  80a8d4:	d9c00817 	ldw	r7,32(sp)
  80a8d8:	dc400d17 	ldw	r17,52(sp)
  80a8dc:	188bc83a 	sub	r5,r3,r2
  80a8e0:	d9800717 	ldw	r6,28(sp)
  80a8e4:	dc000c17 	ldw	r16,48(sp)
  80a8e8:	d9400615 	stw	r5,24(sp)
  80a8ec:	3c403836 	bltu	r7,r17,80a9d0 <__divdf3+0x1e0>
  80a8f0:	89c03626 	beq	r17,r7,80a9cc <__divdf3+0x1dc>
  80a8f4:	0015883a 	mov	r10,zero
  80a8f8:	001d883a 	mov	r14,zero
  80a8fc:	02c40034 	movhi	r11,4096
  80a900:	001f883a 	mov	r15,zero
  80a904:	003f883a 	mov	ra,zero
  80a908:	04800f44 	movi	r18,61
  80a90c:	00000f06 	br	80a94c <__divdf3+0x15c>
  80a910:	601d883a 	mov	r14,r12
  80a914:	681f883a 	mov	r15,r13
  80a918:	400d883a 	mov	r6,r8
  80a91c:	100f883a 	mov	r7,r2
  80a920:	3191883a 	add	r8,r6,r6
  80a924:	5808d07a 	srli	r4,r11,1
  80a928:	4185803a 	cmpltu	r2,r8,r6
  80a92c:	39d3883a 	add	r9,r7,r7
  80a930:	28c6b03a 	or	r3,r5,r3
  80a934:	1245883a 	add	r2,r2,r9
  80a938:	1815883a 	mov	r10,r3
  80a93c:	2017883a 	mov	r11,r4
  80a940:	400d883a 	mov	r6,r8
  80a944:	100f883a 	mov	r7,r2
  80a948:	fc801726 	beq	ra,r18,80a9a8 <__divdf3+0x1b8>
  80a94c:	580a97fa 	slli	r5,r11,31
  80a950:	5006d07a 	srli	r3,r10,1
  80a954:	ffc00044 	addi	ra,ra,1
  80a958:	3c7ff136 	bltu	r7,r17,80a920 <__divdf3+0x130>
  80a95c:	3411c83a 	sub	r8,r6,r16
  80a960:	3205803a 	cmpltu	r2,r6,r8
  80a964:	3c53c83a 	sub	r9,r7,r17
  80a968:	7298b03a 	or	r12,r14,r10
  80a96c:	7adab03a 	or	r13,r15,r11
  80a970:	4885c83a 	sub	r2,r9,r2
  80a974:	89ffe61e 	bne	r17,r7,80a910 <__divdf3+0x120>
  80a978:	343fe936 	bltu	r6,r16,80a920 <__divdf3+0x130>
  80a97c:	003fe406 	br	80a910 <__divdf3+0x120>
  80a980:	9809883a 	mov	r4,r19
  80a984:	d9800415 	stw	r6,16(sp)
  80a988:	080b16c0 	call	80b16c <__pack_d>
  80a98c:	dfc01217 	ldw	ra,72(sp)
  80a990:	dcc01117 	ldw	r19,68(sp)
  80a994:	dc801017 	ldw	r18,64(sp)
  80a998:	dc400f17 	ldw	r17,60(sp)
  80a99c:	dc000e17 	ldw	r16,56(sp)
  80a9a0:	dec01304 	addi	sp,sp,76
  80a9a4:	f800283a 	ret
  80a9a8:	00803fc4 	movi	r2,255
  80a9ac:	7090703a 	and	r8,r14,r2
  80a9b0:	00802004 	movi	r2,128
  80a9b4:	0007883a 	mov	r3,zero
  80a9b8:	0013883a 	mov	r9,zero
  80a9bc:	40800d26 	beq	r8,r2,80a9f4 <__divdf3+0x204>
  80a9c0:	dbc00815 	stw	r15,32(sp)
  80a9c4:	db800715 	stw	r14,28(sp)
  80a9c8:	003fab06 	br	80a878 <__divdf3+0x88>
  80a9cc:	343fc92e 	bgeu	r6,r16,80a8f4 <__divdf3+0x104>
  80a9d0:	3185883a 	add	r2,r6,r6
  80a9d4:	1189803a 	cmpltu	r4,r2,r6
  80a9d8:	39c7883a 	add	r3,r7,r7
  80a9dc:	20c9883a 	add	r4,r4,r3
  80a9e0:	297fffc4 	addi	r5,r5,-1
  80a9e4:	100d883a 	mov	r6,r2
  80a9e8:	200f883a 	mov	r7,r4
  80a9ec:	d9400615 	stw	r5,24(sp)
  80a9f0:	003fc006 	br	80a8f4 <__divdf3+0x104>
  80a9f4:	483ff21e 	bne	r9,zero,80a9c0 <__divdf3+0x1d0>
  80a9f8:	01004004 	movi	r4,256
  80a9fc:	7104703a 	and	r2,r14,r4
  80aa00:	10c4b03a 	or	r2,r2,r3
  80aa04:	103fee1e 	bne	r2,zero,80a9c0 <__divdf3+0x1d0>
  80aa08:	31c4b03a 	or	r2,r6,r7
  80aa0c:	103fec26 	beq	r2,zero,80a9c0 <__divdf3+0x1d0>
  80aa10:	7205883a 	add	r2,r14,r8
  80aa14:	1391803a 	cmpltu	r8,r2,r14
  80aa18:	43d1883a 	add	r8,r8,r15
  80aa1c:	013fc004 	movi	r4,-256
  80aa20:	111c703a 	and	r14,r2,r4
  80aa24:	401f883a 	mov	r15,r8
  80aa28:	003fe506 	br	80a9c0 <__divdf3+0x1d0>
  80aa2c:	8009883a 	mov	r4,r16
  80aa30:	003f9206 	br	80a87c <__divdf3+0x8c>
  80aa34:	9809883a 	mov	r4,r19
  80aa38:	d8000715 	stw	zero,28(sp)
  80aa3c:	d8000815 	stw	zero,32(sp)
  80aa40:	d8000615 	stw	zero,24(sp)
  80aa44:	003f8d06 	br	80a87c <__divdf3+0x8c>

0080aa48 <__eqdf2>:
  80aa48:	deffef04 	addi	sp,sp,-68
  80aa4c:	dc400f15 	stw	r17,60(sp)
  80aa50:	dc400404 	addi	r17,sp,16
  80aa54:	2005883a 	mov	r2,r4
  80aa58:	2807883a 	mov	r3,r5
  80aa5c:	dc000e15 	stw	r16,56(sp)
  80aa60:	d809883a 	mov	r4,sp
  80aa64:	880b883a 	mov	r5,r17
  80aa68:	dc000904 	addi	r16,sp,36
  80aa6c:	d8c00115 	stw	r3,4(sp)
  80aa70:	d8800015 	stw	r2,0(sp)
  80aa74:	d9800215 	stw	r6,8(sp)
  80aa78:	dfc01015 	stw	ra,64(sp)
  80aa7c:	d9c00315 	stw	r7,12(sp)
  80aa80:	080b4800 	call	80b480 <__unpack_d>
  80aa84:	d9000204 	addi	r4,sp,8
  80aa88:	800b883a 	mov	r5,r16
  80aa8c:	080b4800 	call	80b480 <__unpack_d>
  80aa90:	d8800417 	ldw	r2,16(sp)
  80aa94:	00c00044 	movi	r3,1
  80aa98:	180d883a 	mov	r6,r3
  80aa9c:	1880062e 	bgeu	r3,r2,80aab8 <__eqdf2+0x70>
  80aaa0:	d8800917 	ldw	r2,36(sp)
  80aaa4:	8809883a 	mov	r4,r17
  80aaa8:	800b883a 	mov	r5,r16
  80aaac:	1880022e 	bgeu	r3,r2,80aab8 <__eqdf2+0x70>
  80aab0:	080b5b80 	call	80b5b8 <__fpcmp_parts_d>
  80aab4:	100d883a 	mov	r6,r2
  80aab8:	3005883a 	mov	r2,r6
  80aabc:	dfc01017 	ldw	ra,64(sp)
  80aac0:	dc400f17 	ldw	r17,60(sp)
  80aac4:	dc000e17 	ldw	r16,56(sp)
  80aac8:	dec01104 	addi	sp,sp,68
  80aacc:	f800283a 	ret

0080aad0 <__nedf2>:
  80aad0:	deffef04 	addi	sp,sp,-68
  80aad4:	dc400f15 	stw	r17,60(sp)
  80aad8:	dc400404 	addi	r17,sp,16
  80aadc:	2005883a 	mov	r2,r4
  80aae0:	2807883a 	mov	r3,r5
  80aae4:	dc000e15 	stw	r16,56(sp)
  80aae8:	d809883a 	mov	r4,sp
  80aaec:	880b883a 	mov	r5,r17
  80aaf0:	dc000904 	addi	r16,sp,36
  80aaf4:	d8c00115 	stw	r3,4(sp)
  80aaf8:	d8800015 	stw	r2,0(sp)
  80aafc:	d9800215 	stw	r6,8(sp)
  80ab00:	dfc01015 	stw	ra,64(sp)
  80ab04:	d9c00315 	stw	r7,12(sp)
  80ab08:	080b4800 	call	80b480 <__unpack_d>
  80ab0c:	d9000204 	addi	r4,sp,8
  80ab10:	800b883a 	mov	r5,r16
  80ab14:	080b4800 	call	80b480 <__unpack_d>
  80ab18:	d8800417 	ldw	r2,16(sp)
  80ab1c:	00c00044 	movi	r3,1
  80ab20:	180d883a 	mov	r6,r3
  80ab24:	1880062e 	bgeu	r3,r2,80ab40 <__nedf2+0x70>
  80ab28:	d8800917 	ldw	r2,36(sp)
  80ab2c:	8809883a 	mov	r4,r17
  80ab30:	800b883a 	mov	r5,r16
  80ab34:	1880022e 	bgeu	r3,r2,80ab40 <__nedf2+0x70>
  80ab38:	080b5b80 	call	80b5b8 <__fpcmp_parts_d>
  80ab3c:	100d883a 	mov	r6,r2
  80ab40:	3005883a 	mov	r2,r6
  80ab44:	dfc01017 	ldw	ra,64(sp)
  80ab48:	dc400f17 	ldw	r17,60(sp)
  80ab4c:	dc000e17 	ldw	r16,56(sp)
  80ab50:	dec01104 	addi	sp,sp,68
  80ab54:	f800283a 	ret

0080ab58 <__gtdf2>:
  80ab58:	deffef04 	addi	sp,sp,-68
  80ab5c:	dc400f15 	stw	r17,60(sp)
  80ab60:	dc400404 	addi	r17,sp,16
  80ab64:	2005883a 	mov	r2,r4
  80ab68:	2807883a 	mov	r3,r5
  80ab6c:	dc000e15 	stw	r16,56(sp)
  80ab70:	d809883a 	mov	r4,sp
  80ab74:	880b883a 	mov	r5,r17
  80ab78:	dc000904 	addi	r16,sp,36
  80ab7c:	d8c00115 	stw	r3,4(sp)
  80ab80:	d8800015 	stw	r2,0(sp)
  80ab84:	d9800215 	stw	r6,8(sp)
  80ab88:	dfc01015 	stw	ra,64(sp)
  80ab8c:	d9c00315 	stw	r7,12(sp)
  80ab90:	080b4800 	call	80b480 <__unpack_d>
  80ab94:	d9000204 	addi	r4,sp,8
  80ab98:	800b883a 	mov	r5,r16
  80ab9c:	080b4800 	call	80b480 <__unpack_d>
  80aba0:	d8800417 	ldw	r2,16(sp)
  80aba4:	00c00044 	movi	r3,1
  80aba8:	01bfffc4 	movi	r6,-1
  80abac:	1880062e 	bgeu	r3,r2,80abc8 <__gtdf2+0x70>
  80abb0:	d8800917 	ldw	r2,36(sp)
  80abb4:	8809883a 	mov	r4,r17
  80abb8:	800b883a 	mov	r5,r16
  80abbc:	1880022e 	bgeu	r3,r2,80abc8 <__gtdf2+0x70>
  80abc0:	080b5b80 	call	80b5b8 <__fpcmp_parts_d>
  80abc4:	100d883a 	mov	r6,r2
  80abc8:	3005883a 	mov	r2,r6
  80abcc:	dfc01017 	ldw	ra,64(sp)
  80abd0:	dc400f17 	ldw	r17,60(sp)
  80abd4:	dc000e17 	ldw	r16,56(sp)
  80abd8:	dec01104 	addi	sp,sp,68
  80abdc:	f800283a 	ret

0080abe0 <__gedf2>:
  80abe0:	deffef04 	addi	sp,sp,-68
  80abe4:	dc400f15 	stw	r17,60(sp)
  80abe8:	dc400404 	addi	r17,sp,16
  80abec:	2005883a 	mov	r2,r4
  80abf0:	2807883a 	mov	r3,r5
  80abf4:	dc000e15 	stw	r16,56(sp)
  80abf8:	d809883a 	mov	r4,sp
  80abfc:	880b883a 	mov	r5,r17
  80ac00:	dc000904 	addi	r16,sp,36
  80ac04:	d8c00115 	stw	r3,4(sp)
  80ac08:	d8800015 	stw	r2,0(sp)
  80ac0c:	d9800215 	stw	r6,8(sp)
  80ac10:	dfc01015 	stw	ra,64(sp)
  80ac14:	d9c00315 	stw	r7,12(sp)
  80ac18:	080b4800 	call	80b480 <__unpack_d>
  80ac1c:	d9000204 	addi	r4,sp,8
  80ac20:	800b883a 	mov	r5,r16
  80ac24:	080b4800 	call	80b480 <__unpack_d>
  80ac28:	d8800417 	ldw	r2,16(sp)
  80ac2c:	00c00044 	movi	r3,1
  80ac30:	01bfffc4 	movi	r6,-1
  80ac34:	1880062e 	bgeu	r3,r2,80ac50 <__gedf2+0x70>
  80ac38:	d8800917 	ldw	r2,36(sp)
  80ac3c:	8809883a 	mov	r4,r17
  80ac40:	800b883a 	mov	r5,r16
  80ac44:	1880022e 	bgeu	r3,r2,80ac50 <__gedf2+0x70>
  80ac48:	080b5b80 	call	80b5b8 <__fpcmp_parts_d>
  80ac4c:	100d883a 	mov	r6,r2
  80ac50:	3005883a 	mov	r2,r6
  80ac54:	dfc01017 	ldw	ra,64(sp)
  80ac58:	dc400f17 	ldw	r17,60(sp)
  80ac5c:	dc000e17 	ldw	r16,56(sp)
  80ac60:	dec01104 	addi	sp,sp,68
  80ac64:	f800283a 	ret

0080ac68 <__ltdf2>:
  80ac68:	deffef04 	addi	sp,sp,-68
  80ac6c:	dc400f15 	stw	r17,60(sp)
  80ac70:	dc400404 	addi	r17,sp,16
  80ac74:	2005883a 	mov	r2,r4
  80ac78:	2807883a 	mov	r3,r5
  80ac7c:	dc000e15 	stw	r16,56(sp)
  80ac80:	d809883a 	mov	r4,sp
  80ac84:	880b883a 	mov	r5,r17
  80ac88:	dc000904 	addi	r16,sp,36
  80ac8c:	d8c00115 	stw	r3,4(sp)
  80ac90:	d8800015 	stw	r2,0(sp)
  80ac94:	d9800215 	stw	r6,8(sp)
  80ac98:	dfc01015 	stw	ra,64(sp)
  80ac9c:	d9c00315 	stw	r7,12(sp)
  80aca0:	080b4800 	call	80b480 <__unpack_d>
  80aca4:	d9000204 	addi	r4,sp,8
  80aca8:	800b883a 	mov	r5,r16
  80acac:	080b4800 	call	80b480 <__unpack_d>
  80acb0:	d8800417 	ldw	r2,16(sp)
  80acb4:	00c00044 	movi	r3,1
  80acb8:	180d883a 	mov	r6,r3
  80acbc:	1880062e 	bgeu	r3,r2,80acd8 <__ltdf2+0x70>
  80acc0:	d8800917 	ldw	r2,36(sp)
  80acc4:	8809883a 	mov	r4,r17
  80acc8:	800b883a 	mov	r5,r16
  80accc:	1880022e 	bgeu	r3,r2,80acd8 <__ltdf2+0x70>
  80acd0:	080b5b80 	call	80b5b8 <__fpcmp_parts_d>
  80acd4:	100d883a 	mov	r6,r2
  80acd8:	3005883a 	mov	r2,r6
  80acdc:	dfc01017 	ldw	ra,64(sp)
  80ace0:	dc400f17 	ldw	r17,60(sp)
  80ace4:	dc000e17 	ldw	r16,56(sp)
  80ace8:	dec01104 	addi	sp,sp,68
  80acec:	f800283a 	ret

0080acf0 <__floatsidf>:
  80acf0:	2006d7fa 	srli	r3,r4,31
  80acf4:	defff604 	addi	sp,sp,-40
  80acf8:	008000c4 	movi	r2,3
  80acfc:	dfc00915 	stw	ra,36(sp)
  80ad00:	dcc00815 	stw	r19,32(sp)
  80ad04:	dc800715 	stw	r18,28(sp)
  80ad08:	dc400615 	stw	r17,24(sp)
  80ad0c:	dc000515 	stw	r16,20(sp)
  80ad10:	d8800015 	stw	r2,0(sp)
  80ad14:	d8c00115 	stw	r3,4(sp)
  80ad18:	20000f1e 	bne	r4,zero,80ad58 <__floatsidf+0x68>
  80ad1c:	00800084 	movi	r2,2
  80ad20:	d8800015 	stw	r2,0(sp)
  80ad24:	d809883a 	mov	r4,sp
  80ad28:	080b16c0 	call	80b16c <__pack_d>
  80ad2c:	1009883a 	mov	r4,r2
  80ad30:	180b883a 	mov	r5,r3
  80ad34:	2005883a 	mov	r2,r4
  80ad38:	2807883a 	mov	r3,r5
  80ad3c:	dfc00917 	ldw	ra,36(sp)
  80ad40:	dcc00817 	ldw	r19,32(sp)
  80ad44:	dc800717 	ldw	r18,28(sp)
  80ad48:	dc400617 	ldw	r17,24(sp)
  80ad4c:	dc000517 	ldw	r16,20(sp)
  80ad50:	dec00a04 	addi	sp,sp,40
  80ad54:	f800283a 	ret
  80ad58:	00800f04 	movi	r2,60
  80ad5c:	1807003a 	cmpeq	r3,r3,zero
  80ad60:	d8800215 	stw	r2,8(sp)
  80ad64:	18001126 	beq	r3,zero,80adac <__floatsidf+0xbc>
  80ad68:	0027883a 	mov	r19,zero
  80ad6c:	2025883a 	mov	r18,r4
  80ad70:	d9000315 	stw	r4,12(sp)
  80ad74:	dcc00415 	stw	r19,16(sp)
  80ad78:	080b0ec0 	call	80b0ec <__clzsi2>
  80ad7c:	11000744 	addi	r4,r2,29
  80ad80:	013fe80e 	bge	zero,r4,80ad24 <__floatsidf+0x34>
  80ad84:	10bfff44 	addi	r2,r2,-3
  80ad88:	10000c16 	blt	r2,zero,80adbc <__floatsidf+0xcc>
  80ad8c:	90a2983a 	sll	r17,r18,r2
  80ad90:	0021883a 	mov	r16,zero
  80ad94:	d8800217 	ldw	r2,8(sp)
  80ad98:	dc400415 	stw	r17,16(sp)
  80ad9c:	dc000315 	stw	r16,12(sp)
  80ada0:	1105c83a 	sub	r2,r2,r4
  80ada4:	d8800215 	stw	r2,8(sp)
  80ada8:	003fde06 	br	80ad24 <__floatsidf+0x34>
  80adac:	00a00034 	movhi	r2,32768
  80adb0:	20800a26 	beq	r4,r2,80addc <__floatsidf+0xec>
  80adb4:	0109c83a 	sub	r4,zero,r4
  80adb8:	003feb06 	br	80ad68 <__floatsidf+0x78>
  80adbc:	9006d07a 	srli	r3,r18,1
  80adc0:	008007c4 	movi	r2,31
  80adc4:	1105c83a 	sub	r2,r2,r4
  80adc8:	1886d83a 	srl	r3,r3,r2
  80adcc:	9922983a 	sll	r17,r19,r4
  80add0:	9120983a 	sll	r16,r18,r4
  80add4:	1c62b03a 	or	r17,r3,r17
  80add8:	003fee06 	br	80ad94 <__floatsidf+0xa4>
  80addc:	0009883a 	mov	r4,zero
  80ade0:	01707834 	movhi	r5,49632
  80ade4:	003fd306 	br	80ad34 <__floatsidf+0x44>

0080ade8 <__fixdfsi>:
  80ade8:	defff804 	addi	sp,sp,-32
  80adec:	2005883a 	mov	r2,r4
  80adf0:	2807883a 	mov	r3,r5
  80adf4:	d809883a 	mov	r4,sp
  80adf8:	d9400204 	addi	r5,sp,8
  80adfc:	d8c00115 	stw	r3,4(sp)
  80ae00:	d8800015 	stw	r2,0(sp)
  80ae04:	dfc00715 	stw	ra,28(sp)
  80ae08:	080b4800 	call	80b480 <__unpack_d>
  80ae0c:	d8c00217 	ldw	r3,8(sp)
  80ae10:	00800084 	movi	r2,2
  80ae14:	1880051e 	bne	r3,r2,80ae2c <__fixdfsi+0x44>
  80ae18:	0007883a 	mov	r3,zero
  80ae1c:	1805883a 	mov	r2,r3
  80ae20:	dfc00717 	ldw	ra,28(sp)
  80ae24:	dec00804 	addi	sp,sp,32
  80ae28:	f800283a 	ret
  80ae2c:	00800044 	movi	r2,1
  80ae30:	10fff92e 	bgeu	r2,r3,80ae18 <__fixdfsi+0x30>
  80ae34:	00800104 	movi	r2,4
  80ae38:	18800426 	beq	r3,r2,80ae4c <__fixdfsi+0x64>
  80ae3c:	d8c00417 	ldw	r3,16(sp)
  80ae40:	183ff516 	blt	r3,zero,80ae18 <__fixdfsi+0x30>
  80ae44:	00800784 	movi	r2,30
  80ae48:	10c0080e 	bge	r2,r3,80ae6c <__fixdfsi+0x84>
  80ae4c:	d8800317 	ldw	r2,12(sp)
  80ae50:	1000121e 	bne	r2,zero,80ae9c <__fixdfsi+0xb4>
  80ae54:	00e00034 	movhi	r3,32768
  80ae58:	18ffffc4 	addi	r3,r3,-1
  80ae5c:	1805883a 	mov	r2,r3
  80ae60:	dfc00717 	ldw	ra,28(sp)
  80ae64:	dec00804 	addi	sp,sp,32
  80ae68:	f800283a 	ret
  80ae6c:	00800f04 	movi	r2,60
  80ae70:	10d1c83a 	sub	r8,r2,r3
  80ae74:	40bff804 	addi	r2,r8,-32
  80ae78:	d9800517 	ldw	r6,20(sp)
  80ae7c:	d9c00617 	ldw	r7,24(sp)
  80ae80:	10000816 	blt	r2,zero,80aea4 <__fixdfsi+0xbc>
  80ae84:	3888d83a 	srl	r4,r7,r2
  80ae88:	d8800317 	ldw	r2,12(sp)
  80ae8c:	2007883a 	mov	r3,r4
  80ae90:	103fe226 	beq	r2,zero,80ae1c <__fixdfsi+0x34>
  80ae94:	0107c83a 	sub	r3,zero,r4
  80ae98:	003fe006 	br	80ae1c <__fixdfsi+0x34>
  80ae9c:	00e00034 	movhi	r3,32768
  80aea0:	003fde06 	br	80ae1c <__fixdfsi+0x34>
  80aea4:	39c7883a 	add	r3,r7,r7
  80aea8:	008007c4 	movi	r2,31
  80aeac:	1205c83a 	sub	r2,r2,r8
  80aeb0:	1886983a 	sll	r3,r3,r2
  80aeb4:	3208d83a 	srl	r4,r6,r8
  80aeb8:	1908b03a 	or	r4,r3,r4
  80aebc:	003ff206 	br	80ae88 <__fixdfsi+0xa0>

0080aec0 <__floatunsidf>:
  80aec0:	defff204 	addi	sp,sp,-56
  80aec4:	dfc00d15 	stw	ra,52(sp)
  80aec8:	ddc00c15 	stw	r23,48(sp)
  80aecc:	dd800b15 	stw	r22,44(sp)
  80aed0:	dd400a15 	stw	r21,40(sp)
  80aed4:	dd000915 	stw	r20,36(sp)
  80aed8:	dcc00815 	stw	r19,32(sp)
  80aedc:	dc800715 	stw	r18,28(sp)
  80aee0:	dc400615 	stw	r17,24(sp)
  80aee4:	dc000515 	stw	r16,20(sp)
  80aee8:	d8000115 	stw	zero,4(sp)
  80aeec:	20000f1e 	bne	r4,zero,80af2c <__floatunsidf+0x6c>
  80aef0:	00800084 	movi	r2,2
  80aef4:	d8800015 	stw	r2,0(sp)
  80aef8:	d809883a 	mov	r4,sp
  80aefc:	080b16c0 	call	80b16c <__pack_d>
  80af00:	dfc00d17 	ldw	ra,52(sp)
  80af04:	ddc00c17 	ldw	r23,48(sp)
  80af08:	dd800b17 	ldw	r22,44(sp)
  80af0c:	dd400a17 	ldw	r21,40(sp)
  80af10:	dd000917 	ldw	r20,36(sp)
  80af14:	dcc00817 	ldw	r19,32(sp)
  80af18:	dc800717 	ldw	r18,28(sp)
  80af1c:	dc400617 	ldw	r17,24(sp)
  80af20:	dc000517 	ldw	r16,20(sp)
  80af24:	dec00e04 	addi	sp,sp,56
  80af28:	f800283a 	ret
  80af2c:	008000c4 	movi	r2,3
  80af30:	00c00f04 	movi	r3,60
  80af34:	002f883a 	mov	r23,zero
  80af38:	202d883a 	mov	r22,r4
  80af3c:	d8800015 	stw	r2,0(sp)
  80af40:	d8c00215 	stw	r3,8(sp)
  80af44:	d9000315 	stw	r4,12(sp)
  80af48:	ddc00415 	stw	r23,16(sp)
  80af4c:	080b0ec0 	call	80b0ec <__clzsi2>
  80af50:	12400744 	addi	r9,r2,29
  80af54:	48000b16 	blt	r9,zero,80af84 <__floatunsidf+0xc4>
  80af58:	483fe726 	beq	r9,zero,80aef8 <__floatunsidf+0x38>
  80af5c:	10bfff44 	addi	r2,r2,-3
  80af60:	10002e16 	blt	r2,zero,80b01c <__floatunsidf+0x15c>
  80af64:	b0a2983a 	sll	r17,r22,r2
  80af68:	0021883a 	mov	r16,zero
  80af6c:	d8800217 	ldw	r2,8(sp)
  80af70:	dc400415 	stw	r17,16(sp)
  80af74:	dc000315 	stw	r16,12(sp)
  80af78:	1245c83a 	sub	r2,r2,r9
  80af7c:	d8800215 	stw	r2,8(sp)
  80af80:	003fdd06 	br	80aef8 <__floatunsidf+0x38>
  80af84:	0255c83a 	sub	r10,zero,r9
  80af88:	51bff804 	addi	r6,r10,-32
  80af8c:	30001b16 	blt	r6,zero,80affc <__floatunsidf+0x13c>
  80af90:	b9a8d83a 	srl	r20,r23,r6
  80af94:	002b883a 	mov	r21,zero
  80af98:	000f883a 	mov	r7,zero
  80af9c:	01000044 	movi	r4,1
  80afa0:	0011883a 	mov	r8,zero
  80afa4:	30002516 	blt	r6,zero,80b03c <__floatunsidf+0x17c>
  80afa8:	21a6983a 	sll	r19,r4,r6
  80afac:	0025883a 	mov	r18,zero
  80afb0:	00bfffc4 	movi	r2,-1
  80afb4:	9089883a 	add	r4,r18,r2
  80afb8:	988b883a 	add	r5,r19,r2
  80afbc:	248d803a 	cmpltu	r6,r4,r18
  80afc0:	314b883a 	add	r5,r6,r5
  80afc4:	b104703a 	and	r2,r22,r4
  80afc8:	b946703a 	and	r3,r23,r5
  80afcc:	10c4b03a 	or	r2,r2,r3
  80afd0:	10000226 	beq	r2,zero,80afdc <__floatunsidf+0x11c>
  80afd4:	01c00044 	movi	r7,1
  80afd8:	0011883a 	mov	r8,zero
  80afdc:	d9000217 	ldw	r4,8(sp)
  80afe0:	a1c4b03a 	or	r2,r20,r7
  80afe4:	aa06b03a 	or	r3,r21,r8
  80afe8:	2249c83a 	sub	r4,r4,r9
  80afec:	d8c00415 	stw	r3,16(sp)
  80aff0:	d9000215 	stw	r4,8(sp)
  80aff4:	d8800315 	stw	r2,12(sp)
  80aff8:	003fbf06 	br	80aef8 <__floatunsidf+0x38>
  80affc:	bdc7883a 	add	r3,r23,r23
  80b000:	008007c4 	movi	r2,31
  80b004:	1285c83a 	sub	r2,r2,r10
  80b008:	1886983a 	sll	r3,r3,r2
  80b00c:	b2a8d83a 	srl	r20,r22,r10
  80b010:	baaad83a 	srl	r21,r23,r10
  80b014:	1d28b03a 	or	r20,r3,r20
  80b018:	003fdf06 	br	80af98 <__floatunsidf+0xd8>
  80b01c:	b006d07a 	srli	r3,r22,1
  80b020:	008007c4 	movi	r2,31
  80b024:	1245c83a 	sub	r2,r2,r9
  80b028:	1886d83a 	srl	r3,r3,r2
  80b02c:	ba62983a 	sll	r17,r23,r9
  80b030:	b260983a 	sll	r16,r22,r9
  80b034:	1c62b03a 	or	r17,r3,r17
  80b038:	003fcc06 	br	80af6c <__floatunsidf+0xac>
  80b03c:	2006d07a 	srli	r3,r4,1
  80b040:	008007c4 	movi	r2,31
  80b044:	1285c83a 	sub	r2,r2,r10
  80b048:	18a6d83a 	srl	r19,r3,r2
  80b04c:	22a4983a 	sll	r18,r4,r10
  80b050:	003fd706 	br	80afb0 <__floatunsidf+0xf0>

0080b054 <__muldi3>:
  80b054:	2011883a 	mov	r8,r4
  80b058:	427fffcc 	andi	r9,r8,65535
  80b05c:	4018d43a 	srli	r12,r8,16
  80b060:	32bfffcc 	andi	r10,r6,65535
  80b064:	3016d43a 	srli	r11,r6,16
  80b068:	4a85383a 	mul	r2,r9,r10
  80b06c:	6295383a 	mul	r10,r12,r10
  80b070:	4ad3383a 	mul	r9,r9,r11
  80b074:	113fffcc 	andi	r4,r2,65535
  80b078:	1004d43a 	srli	r2,r2,16
  80b07c:	4a93883a 	add	r9,r9,r10
  80b080:	3807883a 	mov	r3,r7
  80b084:	1245883a 	add	r2,r2,r9
  80b088:	280f883a 	mov	r7,r5
  80b08c:	180b883a 	mov	r5,r3
  80b090:	1006943a 	slli	r3,r2,16
  80b094:	defffd04 	addi	sp,sp,-12
  80b098:	dc800215 	stw	r18,8(sp)
  80b09c:	1907883a 	add	r3,r3,r4
  80b0a0:	dc400115 	stw	r17,4(sp)
  80b0a4:	dc000015 	stw	r16,0(sp)
  80b0a8:	4165383a 	mul	r18,r8,r5
  80b0ac:	31e3383a 	mul	r17,r6,r7
  80b0b0:	1012d43a 	srli	r9,r2,16
  80b0b4:	62d9383a 	mul	r12,r12,r11
  80b0b8:	181f883a 	mov	r15,r3
  80b0bc:	1280022e 	bgeu	r2,r10,80b0c8 <__muldi3+0x74>
  80b0c0:	00800074 	movhi	r2,1
  80b0c4:	6099883a 	add	r12,r12,r2
  80b0c8:	624d883a 	add	r6,r12,r9
  80b0cc:	9187883a 	add	r3,r18,r6
  80b0d0:	88c7883a 	add	r3,r17,r3
  80b0d4:	7805883a 	mov	r2,r15
  80b0d8:	dc800217 	ldw	r18,8(sp)
  80b0dc:	dc400117 	ldw	r17,4(sp)
  80b0e0:	dc000017 	ldw	r16,0(sp)
  80b0e4:	dec00304 	addi	sp,sp,12
  80b0e8:	f800283a 	ret

0080b0ec <__clzsi2>:
  80b0ec:	00bfffd4 	movui	r2,65535
  80b0f0:	11000e36 	bltu	r2,r4,80b12c <__clzsi2+0x40>
  80b0f4:	00803fc4 	movi	r2,255
  80b0f8:	01400204 	movi	r5,8
  80b0fc:	0007883a 	mov	r3,zero
  80b100:	11001036 	bltu	r2,r4,80b144 <__clzsi2+0x58>
  80b104:	000b883a 	mov	r5,zero
  80b108:	20c6d83a 	srl	r3,r4,r3
  80b10c:	00802074 	movhi	r2,129
  80b110:	1080c104 	addi	r2,r2,772
  80b114:	1887883a 	add	r3,r3,r2
  80b118:	18800003 	ldbu	r2,0(r3)
  80b11c:	00c00804 	movi	r3,32
  80b120:	2885883a 	add	r2,r5,r2
  80b124:	1885c83a 	sub	r2,r3,r2
  80b128:	f800283a 	ret
  80b12c:	01400404 	movi	r5,16
  80b130:	00804034 	movhi	r2,256
  80b134:	10bfffc4 	addi	r2,r2,-1
  80b138:	2807883a 	mov	r3,r5
  80b13c:	113ff22e 	bgeu	r2,r4,80b108 <__clzsi2+0x1c>
  80b140:	01400604 	movi	r5,24
  80b144:	2807883a 	mov	r3,r5
  80b148:	20c6d83a 	srl	r3,r4,r3
  80b14c:	00802074 	movhi	r2,129
  80b150:	1080c104 	addi	r2,r2,772
  80b154:	1887883a 	add	r3,r3,r2
  80b158:	18800003 	ldbu	r2,0(r3)
  80b15c:	00c00804 	movi	r3,32
  80b160:	2885883a 	add	r2,r5,r2
  80b164:	1885c83a 	sub	r2,r3,r2
  80b168:	f800283a 	ret

0080b16c <__pack_d>:
  80b16c:	20c00017 	ldw	r3,0(r4)
  80b170:	defffd04 	addi	sp,sp,-12
  80b174:	dc000015 	stw	r16,0(sp)
  80b178:	dc800215 	stw	r18,8(sp)
  80b17c:	dc400115 	stw	r17,4(sp)
  80b180:	00800044 	movi	r2,1
  80b184:	22000317 	ldw	r8,12(r4)
  80b188:	001f883a 	mov	r15,zero
  80b18c:	22400417 	ldw	r9,16(r4)
  80b190:	24000117 	ldw	r16,4(r4)
  80b194:	10c0552e 	bgeu	r2,r3,80b2ec <__pack_d+0x180>
  80b198:	00800104 	movi	r2,4
  80b19c:	18804f26 	beq	r3,r2,80b2dc <__pack_d+0x170>
  80b1a0:	00800084 	movi	r2,2
  80b1a4:	18800226 	beq	r3,r2,80b1b0 <__pack_d+0x44>
  80b1a8:	4244b03a 	or	r2,r8,r9
  80b1ac:	10001a1e 	bne	r2,zero,80b218 <__pack_d+0xac>
  80b1b0:	000d883a 	mov	r6,zero
  80b1b4:	000f883a 	mov	r7,zero
  80b1b8:	0011883a 	mov	r8,zero
  80b1bc:	00800434 	movhi	r2,16
  80b1c0:	10bfffc4 	addi	r2,r2,-1
  80b1c4:	301d883a 	mov	r14,r6
  80b1c8:	3884703a 	and	r2,r7,r2
  80b1cc:	400a953a 	slli	r5,r8,20
  80b1d0:	79bffc2c 	andhi	r6,r15,65520
  80b1d4:	308cb03a 	or	r6,r6,r2
  80b1d8:	00e00434 	movhi	r3,32784
  80b1dc:	18ffffc4 	addi	r3,r3,-1
  80b1e0:	800497fa 	slli	r2,r16,31
  80b1e4:	30c6703a 	and	r3,r6,r3
  80b1e8:	1946b03a 	or	r3,r3,r5
  80b1ec:	01600034 	movhi	r5,32768
  80b1f0:	297fffc4 	addi	r5,r5,-1
  80b1f4:	194a703a 	and	r5,r3,r5
  80b1f8:	288ab03a 	or	r5,r5,r2
  80b1fc:	2807883a 	mov	r3,r5
  80b200:	7005883a 	mov	r2,r14
  80b204:	dc800217 	ldw	r18,8(sp)
  80b208:	dc400117 	ldw	r17,4(sp)
  80b20c:	dc000017 	ldw	r16,0(sp)
  80b210:	dec00304 	addi	sp,sp,12
  80b214:	f800283a 	ret
  80b218:	21000217 	ldw	r4,8(r4)
  80b21c:	00bf0084 	movi	r2,-1022
  80b220:	20803f16 	blt	r4,r2,80b320 <__pack_d+0x1b4>
  80b224:	0080ffc4 	movi	r2,1023
  80b228:	11002c16 	blt	r2,r4,80b2dc <__pack_d+0x170>
  80b22c:	00803fc4 	movi	r2,255
  80b230:	408c703a 	and	r6,r8,r2
  80b234:	00802004 	movi	r2,128
  80b238:	0007883a 	mov	r3,zero
  80b23c:	000f883a 	mov	r7,zero
  80b240:	2280ffc4 	addi	r10,r4,1023
  80b244:	30801e26 	beq	r6,r2,80b2c0 <__pack_d+0x154>
  80b248:	00801fc4 	movi	r2,127
  80b24c:	4089883a 	add	r4,r8,r2
  80b250:	220d803a 	cmpltu	r6,r4,r8
  80b254:	324d883a 	add	r6,r6,r9
  80b258:	2011883a 	mov	r8,r4
  80b25c:	3013883a 	mov	r9,r6
  80b260:	00880034 	movhi	r2,8192
  80b264:	10bfffc4 	addi	r2,r2,-1
  80b268:	12400d36 	bltu	r2,r9,80b2a0 <__pack_d+0x134>
  80b26c:	4804963a 	slli	r2,r9,24
  80b270:	400cd23a 	srli	r6,r8,8
  80b274:	480ed23a 	srli	r7,r9,8
  80b278:	013fffc4 	movi	r4,-1
  80b27c:	118cb03a 	or	r6,r2,r6
  80b280:	01400434 	movhi	r5,16
  80b284:	297fffc4 	addi	r5,r5,-1
  80b288:	3104703a 	and	r2,r6,r4
  80b28c:	3946703a 	and	r3,r7,r5
  80b290:	5201ffcc 	andi	r8,r10,2047
  80b294:	100d883a 	mov	r6,r2
  80b298:	180f883a 	mov	r7,r3
  80b29c:	003fc706 	br	80b1bc <__pack_d+0x50>
  80b2a0:	480897fa 	slli	r4,r9,31
  80b2a4:	4004d07a 	srli	r2,r8,1
  80b2a8:	4806d07a 	srli	r3,r9,1
  80b2ac:	52800044 	addi	r10,r10,1
  80b2b0:	2084b03a 	or	r2,r4,r2
  80b2b4:	1011883a 	mov	r8,r2
  80b2b8:	1813883a 	mov	r9,r3
  80b2bc:	003feb06 	br	80b26c <__pack_d+0x100>
  80b2c0:	383fe11e 	bne	r7,zero,80b248 <__pack_d+0xdc>
  80b2c4:	01004004 	movi	r4,256
  80b2c8:	4104703a 	and	r2,r8,r4
  80b2cc:	10c4b03a 	or	r2,r2,r3
  80b2d0:	103fe326 	beq	r2,zero,80b260 <__pack_d+0xf4>
  80b2d4:	3005883a 	mov	r2,r6
  80b2d8:	003fdc06 	br	80b24c <__pack_d+0xe0>
  80b2dc:	000d883a 	mov	r6,zero
  80b2e0:	000f883a 	mov	r7,zero
  80b2e4:	0201ffc4 	movi	r8,2047
  80b2e8:	003fb406 	br	80b1bc <__pack_d+0x50>
  80b2ec:	0005883a 	mov	r2,zero
  80b2f0:	00c00234 	movhi	r3,8
  80b2f4:	408cb03a 	or	r6,r8,r2
  80b2f8:	48ceb03a 	or	r7,r9,r3
  80b2fc:	013fffc4 	movi	r4,-1
  80b300:	01400434 	movhi	r5,16
  80b304:	297fffc4 	addi	r5,r5,-1
  80b308:	3104703a 	and	r2,r6,r4
  80b30c:	3946703a 	and	r3,r7,r5
  80b310:	100d883a 	mov	r6,r2
  80b314:	180f883a 	mov	r7,r3
  80b318:	0201ffc4 	movi	r8,2047
  80b31c:	003fa706 	br	80b1bc <__pack_d+0x50>
  80b320:	1109c83a 	sub	r4,r2,r4
  80b324:	00800e04 	movi	r2,56
  80b328:	11004316 	blt	r2,r4,80b438 <__pack_d+0x2cc>
  80b32c:	21fff804 	addi	r7,r4,-32
  80b330:	38004516 	blt	r7,zero,80b448 <__pack_d+0x2dc>
  80b334:	49d8d83a 	srl	r12,r9,r7
  80b338:	001b883a 	mov	r13,zero
  80b33c:	0023883a 	mov	r17,zero
  80b340:	01400044 	movi	r5,1
  80b344:	0025883a 	mov	r18,zero
  80b348:	38004716 	blt	r7,zero,80b468 <__pack_d+0x2fc>
  80b34c:	29d6983a 	sll	r11,r5,r7
  80b350:	0015883a 	mov	r10,zero
  80b354:	00bfffc4 	movi	r2,-1
  80b358:	5089883a 	add	r4,r10,r2
  80b35c:	588b883a 	add	r5,r11,r2
  80b360:	228d803a 	cmpltu	r6,r4,r10
  80b364:	314b883a 	add	r5,r6,r5
  80b368:	4104703a 	and	r2,r8,r4
  80b36c:	4946703a 	and	r3,r9,r5
  80b370:	10c4b03a 	or	r2,r2,r3
  80b374:	10000226 	beq	r2,zero,80b380 <__pack_d+0x214>
  80b378:	04400044 	movi	r17,1
  80b37c:	0025883a 	mov	r18,zero
  80b380:	00803fc4 	movi	r2,255
  80b384:	644eb03a 	or	r7,r12,r17
  80b388:	3892703a 	and	r9,r7,r2
  80b38c:	00802004 	movi	r2,128
  80b390:	6c90b03a 	or	r8,r13,r18
  80b394:	0015883a 	mov	r10,zero
  80b398:	48801626 	beq	r9,r2,80b3f4 <__pack_d+0x288>
  80b39c:	01001fc4 	movi	r4,127
  80b3a0:	3905883a 	add	r2,r7,r4
  80b3a4:	11cd803a 	cmpltu	r6,r2,r7
  80b3a8:	320d883a 	add	r6,r6,r8
  80b3ac:	100f883a 	mov	r7,r2
  80b3b0:	00840034 	movhi	r2,4096
  80b3b4:	10bfffc4 	addi	r2,r2,-1
  80b3b8:	3011883a 	mov	r8,r6
  80b3bc:	0007883a 	mov	r3,zero
  80b3c0:	11801b36 	bltu	r2,r6,80b430 <__pack_d+0x2c4>
  80b3c4:	4004963a 	slli	r2,r8,24
  80b3c8:	3808d23a 	srli	r4,r7,8
  80b3cc:	400ad23a 	srli	r5,r8,8
  80b3d0:	1813883a 	mov	r9,r3
  80b3d4:	1108b03a 	or	r4,r2,r4
  80b3d8:	00bfffc4 	movi	r2,-1
  80b3dc:	00c00434 	movhi	r3,16
  80b3e0:	18ffffc4 	addi	r3,r3,-1
  80b3e4:	208c703a 	and	r6,r4,r2
  80b3e8:	28ce703a 	and	r7,r5,r3
  80b3ec:	4a01ffcc 	andi	r8,r9,2047
  80b3f0:	003f7206 	br	80b1bc <__pack_d+0x50>
  80b3f4:	503fe91e 	bne	r10,zero,80b39c <__pack_d+0x230>
  80b3f8:	01004004 	movi	r4,256
  80b3fc:	3904703a 	and	r2,r7,r4
  80b400:	0007883a 	mov	r3,zero
  80b404:	10c4b03a 	or	r2,r2,r3
  80b408:	10000626 	beq	r2,zero,80b424 <__pack_d+0x2b8>
  80b40c:	3a45883a 	add	r2,r7,r9
  80b410:	11cd803a 	cmpltu	r6,r2,r7
  80b414:	320d883a 	add	r6,r6,r8
  80b418:	100f883a 	mov	r7,r2
  80b41c:	3011883a 	mov	r8,r6
  80b420:	0007883a 	mov	r3,zero
  80b424:	00840034 	movhi	r2,4096
  80b428:	10bfffc4 	addi	r2,r2,-1
  80b42c:	123fe52e 	bgeu	r2,r8,80b3c4 <__pack_d+0x258>
  80b430:	00c00044 	movi	r3,1
  80b434:	003fe306 	br	80b3c4 <__pack_d+0x258>
  80b438:	0009883a 	mov	r4,zero
  80b43c:	0013883a 	mov	r9,zero
  80b440:	000b883a 	mov	r5,zero
  80b444:	003fe406 	br	80b3d8 <__pack_d+0x26c>
  80b448:	4a47883a 	add	r3,r9,r9
  80b44c:	008007c4 	movi	r2,31
  80b450:	1105c83a 	sub	r2,r2,r4
  80b454:	1886983a 	sll	r3,r3,r2
  80b458:	4118d83a 	srl	r12,r8,r4
  80b45c:	491ad83a 	srl	r13,r9,r4
  80b460:	1b18b03a 	or	r12,r3,r12
  80b464:	003fb506 	br	80b33c <__pack_d+0x1d0>
  80b468:	2806d07a 	srli	r3,r5,1
  80b46c:	008007c4 	movi	r2,31
  80b470:	1105c83a 	sub	r2,r2,r4
  80b474:	1896d83a 	srl	r11,r3,r2
  80b478:	2914983a 	sll	r10,r5,r4
  80b47c:	003fb506 	br	80b354 <__pack_d+0x1e8>

0080b480 <__unpack_d>:
  80b480:	20c00117 	ldw	r3,4(r4)
  80b484:	22400017 	ldw	r9,0(r4)
  80b488:	00800434 	movhi	r2,16
  80b48c:	10bfffc4 	addi	r2,r2,-1
  80b490:	1808d53a 	srli	r4,r3,20
  80b494:	180cd7fa 	srli	r6,r3,31
  80b498:	1894703a 	and	r10,r3,r2
  80b49c:	2201ffcc 	andi	r8,r4,2047
  80b4a0:	281b883a 	mov	r13,r5
  80b4a4:	4817883a 	mov	r11,r9
  80b4a8:	29800115 	stw	r6,4(r5)
  80b4ac:	5019883a 	mov	r12,r10
  80b4b0:	40001e1e 	bne	r8,zero,80b52c <__unpack_d+0xac>
  80b4b4:	4a84b03a 	or	r2,r9,r10
  80b4b8:	10001926 	beq	r2,zero,80b520 <__unpack_d+0xa0>
  80b4bc:	4804d63a 	srli	r2,r9,24
  80b4c0:	500c923a 	slli	r6,r10,8
  80b4c4:	013f0084 	movi	r4,-1022
  80b4c8:	00c40034 	movhi	r3,4096
  80b4cc:	18ffffc4 	addi	r3,r3,-1
  80b4d0:	118cb03a 	or	r6,r2,r6
  80b4d4:	008000c4 	movi	r2,3
  80b4d8:	480a923a 	slli	r5,r9,8
  80b4dc:	68800015 	stw	r2,0(r13)
  80b4e0:	69000215 	stw	r4,8(r13)
  80b4e4:	19800b36 	bltu	r3,r6,80b514 <__unpack_d+0x94>
  80b4e8:	200f883a 	mov	r7,r4
  80b4ec:	1811883a 	mov	r8,r3
  80b4f0:	2945883a 	add	r2,r5,r5
  80b4f4:	1149803a 	cmpltu	r4,r2,r5
  80b4f8:	3187883a 	add	r3,r6,r6
  80b4fc:	20c9883a 	add	r4,r4,r3
  80b500:	100b883a 	mov	r5,r2
  80b504:	200d883a 	mov	r6,r4
  80b508:	39ffffc4 	addi	r7,r7,-1
  80b50c:	413ff82e 	bgeu	r8,r4,80b4f0 <__unpack_d+0x70>
  80b510:	69c00215 	stw	r7,8(r13)
  80b514:	69800415 	stw	r6,16(r13)
  80b518:	69400315 	stw	r5,12(r13)
  80b51c:	f800283a 	ret
  80b520:	00800084 	movi	r2,2
  80b524:	28800015 	stw	r2,0(r5)
  80b528:	f800283a 	ret
  80b52c:	0081ffc4 	movi	r2,2047
  80b530:	40800f26 	beq	r8,r2,80b570 <__unpack_d+0xf0>
  80b534:	480cd63a 	srli	r6,r9,24
  80b538:	5006923a 	slli	r3,r10,8
  80b53c:	4804923a 	slli	r2,r9,8
  80b540:	0009883a 	mov	r4,zero
  80b544:	30c6b03a 	or	r3,r6,r3
  80b548:	01440034 	movhi	r5,4096
  80b54c:	110cb03a 	or	r6,r2,r4
  80b550:	423f0044 	addi	r8,r8,-1023
  80b554:	194eb03a 	or	r7,r3,r5
  80b558:	008000c4 	movi	r2,3
  80b55c:	69c00415 	stw	r7,16(r13)
  80b560:	6a000215 	stw	r8,8(r13)
  80b564:	68800015 	stw	r2,0(r13)
  80b568:	69800315 	stw	r6,12(r13)
  80b56c:	f800283a 	ret
  80b570:	4a84b03a 	or	r2,r9,r10
  80b574:	1000031e 	bne	r2,zero,80b584 <__unpack_d+0x104>
  80b578:	00800104 	movi	r2,4
  80b57c:	28800015 	stw	r2,0(r5)
  80b580:	f800283a 	ret
  80b584:	0009883a 	mov	r4,zero
  80b588:	01400234 	movhi	r5,8
  80b58c:	4904703a 	and	r2,r9,r4
  80b590:	5146703a 	and	r3,r10,r5
  80b594:	10c4b03a 	or	r2,r2,r3
  80b598:	10000526 	beq	r2,zero,80b5b0 <__unpack_d+0x130>
  80b59c:	00800044 	movi	r2,1
  80b5a0:	68800015 	stw	r2,0(r13)
  80b5a4:	6b000415 	stw	r12,16(r13)
  80b5a8:	6ac00315 	stw	r11,12(r13)
  80b5ac:	f800283a 	ret
  80b5b0:	68000015 	stw	zero,0(r13)
  80b5b4:	003ffb06 	br	80b5a4 <__unpack_d+0x124>

0080b5b8 <__fpcmp_parts_d>:
  80b5b8:	21800017 	ldw	r6,0(r4)
  80b5bc:	00c00044 	movi	r3,1
  80b5c0:	19800a2e 	bgeu	r3,r6,80b5ec <__fpcmp_parts_d+0x34>
  80b5c4:	28800017 	ldw	r2,0(r5)
  80b5c8:	1880082e 	bgeu	r3,r2,80b5ec <__fpcmp_parts_d+0x34>
  80b5cc:	00c00104 	movi	r3,4
  80b5d0:	30c02626 	beq	r6,r3,80b66c <__fpcmp_parts_d+0xb4>
  80b5d4:	10c02226 	beq	r2,r3,80b660 <__fpcmp_parts_d+0xa8>
  80b5d8:	00c00084 	movi	r3,2
  80b5dc:	30c00526 	beq	r6,r3,80b5f4 <__fpcmp_parts_d+0x3c>
  80b5e0:	10c0071e 	bne	r2,r3,80b600 <__fpcmp_parts_d+0x48>
  80b5e4:	20800117 	ldw	r2,4(r4)
  80b5e8:	1000091e 	bne	r2,zero,80b610 <__fpcmp_parts_d+0x58>
  80b5ec:	00800044 	movi	r2,1
  80b5f0:	f800283a 	ret
  80b5f4:	10c01a1e 	bne	r2,r3,80b660 <__fpcmp_parts_d+0xa8>
  80b5f8:	0005883a 	mov	r2,zero
  80b5fc:	f800283a 	ret
  80b600:	22000117 	ldw	r8,4(r4)
  80b604:	28800117 	ldw	r2,4(r5)
  80b608:	40800326 	beq	r8,r2,80b618 <__fpcmp_parts_d+0x60>
  80b60c:	403ff726 	beq	r8,zero,80b5ec <__fpcmp_parts_d+0x34>
  80b610:	00bfffc4 	movi	r2,-1
  80b614:	f800283a 	ret
  80b618:	20c00217 	ldw	r3,8(r4)
  80b61c:	28800217 	ldw	r2,8(r5)
  80b620:	10fffa16 	blt	r2,r3,80b60c <__fpcmp_parts_d+0x54>
  80b624:	18800916 	blt	r3,r2,80b64c <__fpcmp_parts_d+0x94>
  80b628:	21c00417 	ldw	r7,16(r4)
  80b62c:	28c00417 	ldw	r3,16(r5)
  80b630:	21800317 	ldw	r6,12(r4)
  80b634:	28800317 	ldw	r2,12(r5)
  80b638:	19fff436 	bltu	r3,r7,80b60c <__fpcmp_parts_d+0x54>
  80b63c:	38c00526 	beq	r7,r3,80b654 <__fpcmp_parts_d+0x9c>
  80b640:	38c00236 	bltu	r7,r3,80b64c <__fpcmp_parts_d+0x94>
  80b644:	19ffec1e 	bne	r3,r7,80b5f8 <__fpcmp_parts_d+0x40>
  80b648:	30bfeb2e 	bgeu	r6,r2,80b5f8 <__fpcmp_parts_d+0x40>
  80b64c:	403fe71e 	bne	r8,zero,80b5ec <__fpcmp_parts_d+0x34>
  80b650:	003fef06 	br	80b610 <__fpcmp_parts_d+0x58>
  80b654:	11bffa2e 	bgeu	r2,r6,80b640 <__fpcmp_parts_d+0x88>
  80b658:	403fe426 	beq	r8,zero,80b5ec <__fpcmp_parts_d+0x34>
  80b65c:	003fec06 	br	80b610 <__fpcmp_parts_d+0x58>
  80b660:	28800117 	ldw	r2,4(r5)
  80b664:	103fe11e 	bne	r2,zero,80b5ec <__fpcmp_parts_d+0x34>
  80b668:	003fe906 	br	80b610 <__fpcmp_parts_d+0x58>
  80b66c:	11bfdd1e 	bne	r2,r6,80b5e4 <__fpcmp_parts_d+0x2c>
  80b670:	28c00117 	ldw	r3,4(r5)
  80b674:	20800117 	ldw	r2,4(r4)
  80b678:	1885c83a 	sub	r2,r3,r2
  80b67c:	f800283a 	ret

0080b680 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80b680:	defff404 	addi	sp,sp,-48
  80b684:	df000b15 	stw	fp,44(sp)
  80b688:	df000b04 	addi	fp,sp,44
  80b68c:	e13ffb15 	stw	r4,-20(fp)
  80b690:	e17ffc15 	stw	r5,-16(fp)
  80b694:	e1bffd15 	stw	r6,-12(fp)
  80b698:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80b69c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b6a0:	00802074 	movhi	r2,129
  80b6a4:	108f7104 	addi	r2,r2,15812
  80b6a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80b6ac:	1005003a 	cmpeq	r2,r2,zero
  80b6b0:	1000411e 	bne	r2,zero,80b7b8 <alt_alarm_start+0x138>
  {
    if (alarm)
  80b6b4:	e0bffb17 	ldw	r2,-20(fp)
  80b6b8:	1005003a 	cmpeq	r2,r2,zero
  80b6bc:	10003b1e 	bne	r2,zero,80b7ac <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80b6c0:	e0fffb17 	ldw	r3,-20(fp)
  80b6c4:	e0bffd17 	ldw	r2,-12(fp)
  80b6c8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80b6cc:	e0fffb17 	ldw	r3,-20(fp)
  80b6d0:	e0bffe17 	ldw	r2,-8(fp)
  80b6d4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6d8:	0005303a 	rdctl	r2,status
  80b6dc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b6e0:	e0fff817 	ldw	r3,-32(fp)
  80b6e4:	00bfff84 	movi	r2,-2
  80b6e8:	1884703a 	and	r2,r3,r2
  80b6ec:	1001703a 	wrctl	status,r2
  
  return context;
  80b6f0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80b6f4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80b6f8:	00802074 	movhi	r2,129
  80b6fc:	108f7204 	addi	r2,r2,15816
  80b700:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80b704:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80b708:	e0fffc17 	ldw	r3,-16(fp)
  80b70c:	e0bff917 	ldw	r2,-28(fp)
  80b710:	1885883a 	add	r2,r3,r2
  80b714:	10c00044 	addi	r3,r2,1
  80b718:	e0bffb17 	ldw	r2,-20(fp)
  80b71c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80b720:	e0bffb17 	ldw	r2,-20(fp)
  80b724:	10c00217 	ldw	r3,8(r2)
  80b728:	e0bff917 	ldw	r2,-28(fp)
  80b72c:	1880042e 	bgeu	r3,r2,80b740 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80b730:	e0fffb17 	ldw	r3,-20(fp)
  80b734:	00800044 	movi	r2,1
  80b738:	18800405 	stb	r2,16(r3)
  80b73c:	00000206 	br	80b748 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80b740:	e0bffb17 	ldw	r2,-20(fp)
  80b744:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80b748:	e0fffb17 	ldw	r3,-20(fp)
  80b74c:	00802074 	movhi	r2,129
  80b750:	10883404 	addi	r2,r2,8400
  80b754:	e0bff615 	stw	r2,-40(fp)
  80b758:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80b75c:	e0fff717 	ldw	r3,-36(fp)
  80b760:	e0bff617 	ldw	r2,-40(fp)
  80b764:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80b768:	e0bff617 	ldw	r2,-40(fp)
  80b76c:	10c00017 	ldw	r3,0(r2)
  80b770:	e0bff717 	ldw	r2,-36(fp)
  80b774:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80b778:	e0bff617 	ldw	r2,-40(fp)
  80b77c:	10c00017 	ldw	r3,0(r2)
  80b780:	e0bff717 	ldw	r2,-36(fp)
  80b784:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80b788:	e0fff617 	ldw	r3,-40(fp)
  80b78c:	e0bff717 	ldw	r2,-36(fp)
  80b790:	18800015 	stw	r2,0(r3)
  80b794:	e0bffa17 	ldw	r2,-24(fp)
  80b798:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b79c:	e0bff517 	ldw	r2,-44(fp)
  80b7a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80b7a4:	e03fff15 	stw	zero,-4(fp)
  80b7a8:	00000506 	br	80b7c0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80b7ac:	00bffa84 	movi	r2,-22
  80b7b0:	e0bfff15 	stw	r2,-4(fp)
  80b7b4:	00000206 	br	80b7c0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80b7b8:	00bfde84 	movi	r2,-134
  80b7bc:	e0bfff15 	stw	r2,-4(fp)
  80b7c0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80b7c4:	e037883a 	mov	sp,fp
  80b7c8:	df000017 	ldw	fp,0(sp)
  80b7cc:	dec00104 	addi	sp,sp,4
  80b7d0:	f800283a 	ret

0080b7d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80b7d4:	defff804 	addi	sp,sp,-32
  80b7d8:	dfc00715 	stw	ra,28(sp)
  80b7dc:	df000615 	stw	fp,24(sp)
  80b7e0:	df000604 	addi	fp,sp,24
  80b7e4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80b7e8:	e0bffc17 	ldw	r2,-16(fp)
  80b7ec:	1004803a 	cmplt	r2,r2,zero
  80b7f0:	1000081e 	bne	r2,zero,80b814 <close+0x40>
  80b7f4:	e0bffc17 	ldw	r2,-16(fp)
  80b7f8:	10800324 	muli	r2,r2,12
  80b7fc:	1007883a 	mov	r3,r2
  80b800:	00802074 	movhi	r2,129
  80b804:	10833204 	addi	r2,r2,3272
  80b808:	1887883a 	add	r3,r3,r2
  80b80c:	e0ffff15 	stw	r3,-4(fp)
  80b810:	00000106 	br	80b818 <close+0x44>
  80b814:	e03fff15 	stw	zero,-4(fp)
  80b818:	e0bfff17 	ldw	r2,-4(fp)
  80b81c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80b820:	e0bffb17 	ldw	r2,-20(fp)
  80b824:	1005003a 	cmpeq	r2,r2,zero
  80b828:	10001d1e 	bne	r2,zero,80b8a0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80b82c:	e0bffb17 	ldw	r2,-20(fp)
  80b830:	10800017 	ldw	r2,0(r2)
  80b834:	10800417 	ldw	r2,16(r2)
  80b838:	1005003a 	cmpeq	r2,r2,zero
  80b83c:	1000071e 	bne	r2,zero,80b85c <close+0x88>
  80b840:	e0bffb17 	ldw	r2,-20(fp)
  80b844:	10800017 	ldw	r2,0(r2)
  80b848:	10800417 	ldw	r2,16(r2)
  80b84c:	e13ffb17 	ldw	r4,-20(fp)
  80b850:	103ee83a 	callr	r2
  80b854:	e0bffe15 	stw	r2,-8(fp)
  80b858:	00000106 	br	80b860 <close+0x8c>
  80b85c:	e03ffe15 	stw	zero,-8(fp)
  80b860:	e0bffe17 	ldw	r2,-8(fp)
  80b864:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80b868:	e13ffc17 	ldw	r4,-16(fp)
  80b86c:	080c49c0 	call	80c49c <alt_release_fd>
    if (rval < 0)
  80b870:	e0bffa17 	ldw	r2,-24(fp)
  80b874:	1004403a 	cmpge	r2,r2,zero
  80b878:	1000071e 	bne	r2,zero,80b898 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80b87c:	080b8d00 	call	80b8d0 <alt_get_errno>
  80b880:	e0fffa17 	ldw	r3,-24(fp)
  80b884:	00c7c83a 	sub	r3,zero,r3
  80b888:	10c00015 	stw	r3,0(r2)
      return -1;
  80b88c:	00bfffc4 	movi	r2,-1
  80b890:	e0bffd15 	stw	r2,-12(fp)
  80b894:	00000806 	br	80b8b8 <close+0xe4>
    }
    return 0;
  80b898:	e03ffd15 	stw	zero,-12(fp)
  80b89c:	00000606 	br	80b8b8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b8a0:	080b8d00 	call	80b8d0 <alt_get_errno>
  80b8a4:	1007883a 	mov	r3,r2
  80b8a8:	00801444 	movi	r2,81
  80b8ac:	18800015 	stw	r2,0(r3)
    return -1;
  80b8b0:	00bfffc4 	movi	r2,-1
  80b8b4:	e0bffd15 	stw	r2,-12(fp)
  80b8b8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80b8bc:	e037883a 	mov	sp,fp
  80b8c0:	dfc00117 	ldw	ra,4(sp)
  80b8c4:	df000017 	ldw	fp,0(sp)
  80b8c8:	dec00204 	addi	sp,sp,8
  80b8cc:	f800283a 	ret

0080b8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b8d0:	defffd04 	addi	sp,sp,-12
  80b8d4:	dfc00215 	stw	ra,8(sp)
  80b8d8:	df000115 	stw	fp,4(sp)
  80b8dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b8e0:	00802074 	movhi	r2,129
  80b8e4:	10883104 	addi	r2,r2,8388
  80b8e8:	10800017 	ldw	r2,0(r2)
  80b8ec:	1005003a 	cmpeq	r2,r2,zero
  80b8f0:	1000061e 	bne	r2,zero,80b90c <alt_get_errno+0x3c>
  80b8f4:	00802074 	movhi	r2,129
  80b8f8:	10883104 	addi	r2,r2,8388
  80b8fc:	10800017 	ldw	r2,0(r2)
  80b900:	103ee83a 	callr	r2
  80b904:	e0bfff15 	stw	r2,-4(fp)
  80b908:	00000306 	br	80b918 <alt_get_errno+0x48>
  80b90c:	00802074 	movhi	r2,129
  80b910:	108f6604 	addi	r2,r2,15768
  80b914:	e0bfff15 	stw	r2,-4(fp)
  80b918:	e0bfff17 	ldw	r2,-4(fp)
}
  80b91c:	e037883a 	mov	sp,fp
  80b920:	dfc00117 	ldw	ra,4(sp)
  80b924:	df000017 	ldw	fp,0(sp)
  80b928:	dec00204 	addi	sp,sp,8
  80b92c:	f800283a 	ret

0080b930 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80b930:	defffc04 	addi	sp,sp,-16
  80b934:	df000315 	stw	fp,12(sp)
  80b938:	df000304 	addi	fp,sp,12
  80b93c:	e13ffd15 	stw	r4,-12(fp)
  80b940:	e17ffe15 	stw	r5,-8(fp)
  80b944:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80b948:	e0bfff17 	ldw	r2,-4(fp)
}
  80b94c:	e037883a 	mov	sp,fp
  80b950:	df000017 	ldw	fp,0(sp)
  80b954:	dec00104 	addi	sp,sp,4
  80b958:	f800283a 	ret

0080b95c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80b95c:	defff904 	addi	sp,sp,-28
  80b960:	dfc00615 	stw	ra,24(sp)
  80b964:	df000515 	stw	fp,20(sp)
  80b968:	df000504 	addi	fp,sp,20
  80b96c:	e13ffc15 	stw	r4,-16(fp)
  80b970:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b974:	e0bffc17 	ldw	r2,-16(fp)
  80b978:	1004803a 	cmplt	r2,r2,zero
  80b97c:	1000081e 	bne	r2,zero,80b9a0 <fstat+0x44>
  80b980:	e0bffc17 	ldw	r2,-16(fp)
  80b984:	10800324 	muli	r2,r2,12
  80b988:	1007883a 	mov	r3,r2
  80b98c:	00802074 	movhi	r2,129
  80b990:	10833204 	addi	r2,r2,3272
  80b994:	1887883a 	add	r3,r3,r2
  80b998:	e0ffff15 	stw	r3,-4(fp)
  80b99c:	00000106 	br	80b9a4 <fstat+0x48>
  80b9a0:	e03fff15 	stw	zero,-4(fp)
  80b9a4:	e0bfff17 	ldw	r2,-4(fp)
  80b9a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80b9ac:	e0bffb17 	ldw	r2,-20(fp)
  80b9b0:	1005003a 	cmpeq	r2,r2,zero
  80b9b4:	1000121e 	bne	r2,zero,80ba00 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80b9b8:	e0bffb17 	ldw	r2,-20(fp)
  80b9bc:	10800017 	ldw	r2,0(r2)
  80b9c0:	10800817 	ldw	r2,32(r2)
  80b9c4:	1005003a 	cmpeq	r2,r2,zero
  80b9c8:	1000081e 	bne	r2,zero,80b9ec <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80b9cc:	e0bffb17 	ldw	r2,-20(fp)
  80b9d0:	10800017 	ldw	r2,0(r2)
  80b9d4:	10800817 	ldw	r2,32(r2)
  80b9d8:	e13ffb17 	ldw	r4,-20(fp)
  80b9dc:	e17ffd17 	ldw	r5,-12(fp)
  80b9e0:	103ee83a 	callr	r2
  80b9e4:	e0bffe15 	stw	r2,-8(fp)
  80b9e8:	00000b06 	br	80ba18 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80b9ec:	e0fffd17 	ldw	r3,-12(fp)
  80b9f0:	00880004 	movi	r2,8192
  80b9f4:	18800115 	stw	r2,4(r3)
      return 0;
  80b9f8:	e03ffe15 	stw	zero,-8(fp)
  80b9fc:	00000606 	br	80ba18 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ba00:	080ba300 	call	80ba30 <alt_get_errno>
  80ba04:	1007883a 	mov	r3,r2
  80ba08:	00801444 	movi	r2,81
  80ba0c:	18800015 	stw	r2,0(r3)
    return -1;
  80ba10:	00bfffc4 	movi	r2,-1
  80ba14:	e0bffe15 	stw	r2,-8(fp)
  80ba18:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ba1c:	e037883a 	mov	sp,fp
  80ba20:	dfc00117 	ldw	ra,4(sp)
  80ba24:	df000017 	ldw	fp,0(sp)
  80ba28:	dec00204 	addi	sp,sp,8
  80ba2c:	f800283a 	ret

0080ba30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ba30:	defffd04 	addi	sp,sp,-12
  80ba34:	dfc00215 	stw	ra,8(sp)
  80ba38:	df000115 	stw	fp,4(sp)
  80ba3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ba40:	00802074 	movhi	r2,129
  80ba44:	10883104 	addi	r2,r2,8388
  80ba48:	10800017 	ldw	r2,0(r2)
  80ba4c:	1005003a 	cmpeq	r2,r2,zero
  80ba50:	1000061e 	bne	r2,zero,80ba6c <alt_get_errno+0x3c>
  80ba54:	00802074 	movhi	r2,129
  80ba58:	10883104 	addi	r2,r2,8388
  80ba5c:	10800017 	ldw	r2,0(r2)
  80ba60:	103ee83a 	callr	r2
  80ba64:	e0bfff15 	stw	r2,-4(fp)
  80ba68:	00000306 	br	80ba78 <alt_get_errno+0x48>
  80ba6c:	00802074 	movhi	r2,129
  80ba70:	108f6604 	addi	r2,r2,15768
  80ba74:	e0bfff15 	stw	r2,-4(fp)
  80ba78:	e0bfff17 	ldw	r2,-4(fp)
}
  80ba7c:	e037883a 	mov	sp,fp
  80ba80:	dfc00117 	ldw	ra,4(sp)
  80ba84:	df000017 	ldw	fp,0(sp)
  80ba88:	dec00204 	addi	sp,sp,8
  80ba8c:	f800283a 	ret

0080ba90 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80ba90:	deffef04 	addi	sp,sp,-68
  80ba94:	df001015 	stw	fp,64(sp)
  80ba98:	df001004 	addi	fp,sp,64
  80ba9c:	e13ffc15 	stw	r4,-16(fp)
  80baa0:	e17ffd15 	stw	r5,-12(fp)
  80baa4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  80baa8:	00bffa84 	movi	r2,-22
  80baac:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80bab0:	e0bffc17 	ldw	r2,-16(fp)
  80bab4:	10800828 	cmpgeui	r2,r2,32
  80bab8:	1000601e 	bne	r2,zero,80bc3c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80babc:	0005303a 	rdctl	r2,status
  80bac0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bac4:	e0fff917 	ldw	r3,-28(fp)
  80bac8:	00bfff84 	movi	r2,-2
  80bacc:	1884703a 	and	r2,r3,r2
  80bad0:	1001703a 	wrctl	status,r2
  
  return context;
  80bad4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80bad8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  80badc:	e0bffc17 	ldw	r2,-16(fp)
  80bae0:	00c02074 	movhi	r3,129
  80bae4:	18cf8904 	addi	r3,r3,15908
  80bae8:	100490fa 	slli	r2,r2,3
  80baec:	10c7883a 	add	r3,r2,r3
  80baf0:	e0bffe17 	ldw	r2,-8(fp)
  80baf4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80baf8:	e0bffc17 	ldw	r2,-16(fp)
  80bafc:	00c02074 	movhi	r3,129
  80bb00:	18cf8904 	addi	r3,r3,15908
  80bb04:	100490fa 	slli	r2,r2,3
  80bb08:	10c5883a 	add	r2,r2,r3
  80bb0c:	10c00104 	addi	r3,r2,4
  80bb10:	e0bffd17 	ldw	r2,-12(fp)
  80bb14:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80bb18:	e0bffe17 	ldw	r2,-8(fp)
  80bb1c:	1005003a 	cmpeq	r2,r2,zero
  80bb20:	1000201e 	bne	r2,zero,80bba4 <alt_irq_register+0x114>
  80bb24:	e0bffc17 	ldw	r2,-16(fp)
  80bb28:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bb2c:	0005303a 	rdctl	r2,status
  80bb30:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bb34:	e0fff617 	ldw	r3,-40(fp)
  80bb38:	00bfff84 	movi	r2,-2
  80bb3c:	1884703a 	and	r2,r3,r2
  80bb40:	1001703a 	wrctl	status,r2
  
  return context;
  80bb44:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bb48:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80bb4c:	e0fff717 	ldw	r3,-36(fp)
  80bb50:	00800044 	movi	r2,1
  80bb54:	10c4983a 	sll	r2,r2,r3
  80bb58:	1007883a 	mov	r3,r2
  80bb5c:	00802074 	movhi	r2,129
  80bb60:	108f6d04 	addi	r2,r2,15796
  80bb64:	10800017 	ldw	r2,0(r2)
  80bb68:	1886b03a 	or	r3,r3,r2
  80bb6c:	00802074 	movhi	r2,129
  80bb70:	108f6d04 	addi	r2,r2,15796
  80bb74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bb78:	00802074 	movhi	r2,129
  80bb7c:	108f6d04 	addi	r2,r2,15796
  80bb80:	10800017 	ldw	r2,0(r2)
  80bb84:	100170fa 	wrctl	ienable,r2
  80bb88:	e0bff817 	ldw	r2,-32(fp)
  80bb8c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bb90:	e0bff517 	ldw	r2,-44(fp)
  80bb94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bb98:	0005883a 	mov	r2,zero
  80bb9c:	e0bfff15 	stw	r2,-4(fp)
  80bba0:	00002006 	br	80bc24 <alt_irq_register+0x194>
  80bba4:	e0bffc17 	ldw	r2,-16(fp)
  80bba8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbac:	0005303a 	rdctl	r2,status
  80bbb0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbb4:	e0fff217 	ldw	r3,-56(fp)
  80bbb8:	00bfff84 	movi	r2,-2
  80bbbc:	1884703a 	and	r2,r3,r2
  80bbc0:	1001703a 	wrctl	status,r2
  
  return context;
  80bbc4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80bbc8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  80bbcc:	e0fff317 	ldw	r3,-52(fp)
  80bbd0:	00800044 	movi	r2,1
  80bbd4:	10c4983a 	sll	r2,r2,r3
  80bbd8:	0084303a 	nor	r2,zero,r2
  80bbdc:	1007883a 	mov	r3,r2
  80bbe0:	00802074 	movhi	r2,129
  80bbe4:	108f6d04 	addi	r2,r2,15796
  80bbe8:	10800017 	ldw	r2,0(r2)
  80bbec:	1886703a 	and	r3,r3,r2
  80bbf0:	00802074 	movhi	r2,129
  80bbf4:	108f6d04 	addi	r2,r2,15796
  80bbf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80bbfc:	00802074 	movhi	r2,129
  80bc00:	108f6d04 	addi	r2,r2,15796
  80bc04:	10800017 	ldw	r2,0(r2)
  80bc08:	100170fa 	wrctl	ienable,r2
  80bc0c:	e0bff417 	ldw	r2,-48(fp)
  80bc10:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc14:	e0bff117 	ldw	r2,-60(fp)
  80bc18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80bc1c:	0005883a 	mov	r2,zero
  80bc20:	e0bfff15 	stw	r2,-4(fp)
  80bc24:	e0bfff17 	ldw	r2,-4(fp)
  80bc28:	e0bffb15 	stw	r2,-20(fp)
  80bc2c:	e0bffa17 	ldw	r2,-24(fp)
  80bc30:	e0bff015 	stw	r2,-64(fp)
  80bc34:	e0bff017 	ldw	r2,-64(fp)
  80bc38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80bc3c:	e0bffb17 	ldw	r2,-20(fp)
}
  80bc40:	e037883a 	mov	sp,fp
  80bc44:	df000017 	ldw	fp,0(sp)
  80bc48:	dec00104 	addi	sp,sp,4
  80bc4c:	f800283a 	ret

0080bc50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80bc50:	deffeb04 	addi	sp,sp,-84
  80bc54:	dfc01415 	stw	ra,80(sp)
  80bc58:	df001315 	stw	fp,76(sp)
  80bc5c:	df001304 	addi	fp,sp,76
  80bc60:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80bc64:	e0bffd17 	ldw	r2,-12(fp)
  80bc68:	1004803a 	cmplt	r2,r2,zero
  80bc6c:	1000081e 	bne	r2,zero,80bc90 <isatty+0x40>
  80bc70:	e0bffd17 	ldw	r2,-12(fp)
  80bc74:	10800324 	muli	r2,r2,12
  80bc78:	1007883a 	mov	r3,r2
  80bc7c:	00802074 	movhi	r2,129
  80bc80:	10833204 	addi	r2,r2,3272
  80bc84:	1887883a 	add	r3,r3,r2
  80bc88:	e0ffff15 	stw	r3,-4(fp)
  80bc8c:	00000106 	br	80bc94 <isatty+0x44>
  80bc90:	e03fff15 	stw	zero,-4(fp)
  80bc94:	e0bfff17 	ldw	r2,-4(fp)
  80bc98:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80bc9c:	e0bfed17 	ldw	r2,-76(fp)
  80bca0:	1005003a 	cmpeq	r2,r2,zero
  80bca4:	10000f1e 	bne	r2,zero,80bce4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80bca8:	e0bfed17 	ldw	r2,-76(fp)
  80bcac:	10800017 	ldw	r2,0(r2)
  80bcb0:	10800817 	ldw	r2,32(r2)
  80bcb4:	1004c03a 	cmpne	r2,r2,zero
  80bcb8:	1000031e 	bne	r2,zero,80bcc8 <isatty+0x78>
    {
      return 1;
  80bcbc:	00800044 	movi	r2,1
  80bcc0:	e0bffe15 	stw	r2,-8(fp)
  80bcc4:	00000c06 	br	80bcf8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80bcc8:	e17fee04 	addi	r5,fp,-72
  80bccc:	e13ffd17 	ldw	r4,-12(fp)
  80bcd0:	080b95c0 	call	80b95c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80bcd4:	e0bfef17 	ldw	r2,-68(fp)
  80bcd8:	10880020 	cmpeqi	r2,r2,8192
  80bcdc:	e0bffe15 	stw	r2,-8(fp)
  80bce0:	00000506 	br	80bcf8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80bce4:	080bd100 	call	80bd10 <alt_get_errno>
  80bce8:	1007883a 	mov	r3,r2
  80bcec:	00801444 	movi	r2,81
  80bcf0:	18800015 	stw	r2,0(r3)
    return 0;
  80bcf4:	e03ffe15 	stw	zero,-8(fp)
  80bcf8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80bcfc:	e037883a 	mov	sp,fp
  80bd00:	dfc00117 	ldw	ra,4(sp)
  80bd04:	df000017 	ldw	fp,0(sp)
  80bd08:	dec00204 	addi	sp,sp,8
  80bd0c:	f800283a 	ret

0080bd10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bd10:	defffd04 	addi	sp,sp,-12
  80bd14:	dfc00215 	stw	ra,8(sp)
  80bd18:	df000115 	stw	fp,4(sp)
  80bd1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bd20:	00802074 	movhi	r2,129
  80bd24:	10883104 	addi	r2,r2,8388
  80bd28:	10800017 	ldw	r2,0(r2)
  80bd2c:	1005003a 	cmpeq	r2,r2,zero
  80bd30:	1000061e 	bne	r2,zero,80bd4c <alt_get_errno+0x3c>
  80bd34:	00802074 	movhi	r2,129
  80bd38:	10883104 	addi	r2,r2,8388
  80bd3c:	10800017 	ldw	r2,0(r2)
  80bd40:	103ee83a 	callr	r2
  80bd44:	e0bfff15 	stw	r2,-4(fp)
  80bd48:	00000306 	br	80bd58 <alt_get_errno+0x48>
  80bd4c:	00802074 	movhi	r2,129
  80bd50:	108f6604 	addi	r2,r2,15768
  80bd54:	e0bfff15 	stw	r2,-4(fp)
  80bd58:	e0bfff17 	ldw	r2,-4(fp)
}
  80bd5c:	e037883a 	mov	sp,fp
  80bd60:	dfc00117 	ldw	ra,4(sp)
  80bd64:	df000017 	ldw	fp,0(sp)
  80bd68:	dec00204 	addi	sp,sp,8
  80bd6c:	f800283a 	ret

0080bd70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80bd70:	defffe04 	addi	sp,sp,-8
  80bd74:	dfc00115 	stw	ra,4(sp)
  80bd78:	df000015 	stw	fp,0(sp)
  80bd7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80bd80:	01002074 	movhi	r4,129
  80bd84:	21083704 	addi	r4,r4,8412
  80bd88:	01402074 	movhi	r5,129
  80bd8c:	29411204 	addi	r5,r5,1096
  80bd90:	01802074 	movhi	r6,129
  80bd94:	31883704 	addi	r6,r6,8412
  80bd98:	080bdf00 	call	80bdf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80bd9c:	01002034 	movhi	r4,128
  80bda0:	21000804 	addi	r4,r4,32
  80bda4:	01402034 	movhi	r5,128
  80bda8:	29400804 	addi	r5,r5,32
  80bdac:	01802034 	movhi	r6,128
  80bdb0:	31806d04 	addi	r6,r6,436
  80bdb4:	080bdf00 	call	80bdf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80bdb8:	01002074 	movhi	r4,129
  80bdbc:	213f5d04 	addi	r4,r4,-652
  80bdc0:	01402074 	movhi	r5,129
  80bdc4:	297f5d04 	addi	r5,r5,-652
  80bdc8:	01802074 	movhi	r6,129
  80bdcc:	31811204 	addi	r6,r6,1096
  80bdd0:	080bdf00 	call	80bdf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80bdd4:	080ee780 	call	80ee78 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80bdd8:	080f3040 	call	80f304 <alt_icache_flush_all>
}
  80bddc:	e037883a 	mov	sp,fp
  80bde0:	dfc00117 	ldw	ra,4(sp)
  80bde4:	df000017 	ldw	fp,0(sp)
  80bde8:	dec00204 	addi	sp,sp,8
  80bdec:	f800283a 	ret

0080bdf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80bdf0:	defffc04 	addi	sp,sp,-16
  80bdf4:	df000315 	stw	fp,12(sp)
  80bdf8:	df000304 	addi	fp,sp,12
  80bdfc:	e13ffd15 	stw	r4,-12(fp)
  80be00:	e17ffe15 	stw	r5,-8(fp)
  80be04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80be08:	e0fffe17 	ldw	r3,-8(fp)
  80be0c:	e0bffd17 	ldw	r2,-12(fp)
  80be10:	18800e26 	beq	r3,r2,80be4c <alt_load_section+0x5c>
  {
    while( to != end )
  80be14:	00000a06 	br	80be40 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80be18:	e0bffd17 	ldw	r2,-12(fp)
  80be1c:	10c00017 	ldw	r3,0(r2)
  80be20:	e0bffe17 	ldw	r2,-8(fp)
  80be24:	10c00015 	stw	r3,0(r2)
  80be28:	e0bffe17 	ldw	r2,-8(fp)
  80be2c:	10800104 	addi	r2,r2,4
  80be30:	e0bffe15 	stw	r2,-8(fp)
  80be34:	e0bffd17 	ldw	r2,-12(fp)
  80be38:	10800104 	addi	r2,r2,4
  80be3c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80be40:	e0fffe17 	ldw	r3,-8(fp)
  80be44:	e0bfff17 	ldw	r2,-4(fp)
  80be48:	18bff31e 	bne	r3,r2,80be18 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80be4c:	e037883a 	mov	sp,fp
  80be50:	df000017 	ldw	fp,0(sp)
  80be54:	dec00104 	addi	sp,sp,4
  80be58:	f800283a 	ret

0080be5c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80be5c:	defff804 	addi	sp,sp,-32
  80be60:	dfc00715 	stw	ra,28(sp)
  80be64:	df000615 	stw	fp,24(sp)
  80be68:	df000604 	addi	fp,sp,24
  80be6c:	e13ffc15 	stw	r4,-16(fp)
  80be70:	e17ffd15 	stw	r5,-12(fp)
  80be74:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80be78:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80be7c:	e0bffc17 	ldw	r2,-16(fp)
  80be80:	1004803a 	cmplt	r2,r2,zero
  80be84:	1000081e 	bne	r2,zero,80bea8 <lseek+0x4c>
  80be88:	e0bffc17 	ldw	r2,-16(fp)
  80be8c:	10800324 	muli	r2,r2,12
  80be90:	1007883a 	mov	r3,r2
  80be94:	00802074 	movhi	r2,129
  80be98:	10833204 	addi	r2,r2,3272
  80be9c:	1887883a 	add	r3,r3,r2
  80bea0:	e0ffff15 	stw	r3,-4(fp)
  80bea4:	00000106 	br	80beac <lseek+0x50>
  80bea8:	e03fff15 	stw	zero,-4(fp)
  80beac:	e0bfff17 	ldw	r2,-4(fp)
  80beb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80beb4:	e0bffb17 	ldw	r2,-20(fp)
  80beb8:	1005003a 	cmpeq	r2,r2,zero
  80bebc:	1000111e 	bne	r2,zero,80bf04 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80bec0:	e0bffb17 	ldw	r2,-20(fp)
  80bec4:	10800017 	ldw	r2,0(r2)
  80bec8:	10800717 	ldw	r2,28(r2)
  80becc:	1005003a 	cmpeq	r2,r2,zero
  80bed0:	1000091e 	bne	r2,zero,80bef8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80bed4:	e0bffb17 	ldw	r2,-20(fp)
  80bed8:	10800017 	ldw	r2,0(r2)
  80bedc:	10800717 	ldw	r2,28(r2)
  80bee0:	e13ffb17 	ldw	r4,-20(fp)
  80bee4:	e17ffd17 	ldw	r5,-12(fp)
  80bee8:	e1bffe17 	ldw	r6,-8(fp)
  80beec:	103ee83a 	callr	r2
  80bef0:	e0bffa15 	stw	r2,-24(fp)
  80bef4:	00000506 	br	80bf0c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80bef8:	00bfde84 	movi	r2,-134
  80befc:	e0bffa15 	stw	r2,-24(fp)
  80bf00:	00000206 	br	80bf0c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80bf04:	00bfebc4 	movi	r2,-81
  80bf08:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80bf0c:	e0bffa17 	ldw	r2,-24(fp)
  80bf10:	1004403a 	cmpge	r2,r2,zero
  80bf14:	1000071e 	bne	r2,zero,80bf34 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80bf18:	080bf4c0 	call	80bf4c <alt_get_errno>
  80bf1c:	1007883a 	mov	r3,r2
  80bf20:	e0bffa17 	ldw	r2,-24(fp)
  80bf24:	0085c83a 	sub	r2,zero,r2
  80bf28:	18800015 	stw	r2,0(r3)
    rc = -1;
  80bf2c:	00bfffc4 	movi	r2,-1
  80bf30:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80bf34:	e0bffa17 	ldw	r2,-24(fp)
}
  80bf38:	e037883a 	mov	sp,fp
  80bf3c:	dfc00117 	ldw	ra,4(sp)
  80bf40:	df000017 	ldw	fp,0(sp)
  80bf44:	dec00204 	addi	sp,sp,8
  80bf48:	f800283a 	ret

0080bf4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bf4c:	defffd04 	addi	sp,sp,-12
  80bf50:	dfc00215 	stw	ra,8(sp)
  80bf54:	df000115 	stw	fp,4(sp)
  80bf58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bf5c:	00802074 	movhi	r2,129
  80bf60:	10883104 	addi	r2,r2,8388
  80bf64:	10800017 	ldw	r2,0(r2)
  80bf68:	1005003a 	cmpeq	r2,r2,zero
  80bf6c:	1000061e 	bne	r2,zero,80bf88 <alt_get_errno+0x3c>
  80bf70:	00802074 	movhi	r2,129
  80bf74:	10883104 	addi	r2,r2,8388
  80bf78:	10800017 	ldw	r2,0(r2)
  80bf7c:	103ee83a 	callr	r2
  80bf80:	e0bfff15 	stw	r2,-4(fp)
  80bf84:	00000306 	br	80bf94 <alt_get_errno+0x48>
  80bf88:	00802074 	movhi	r2,129
  80bf8c:	108f6604 	addi	r2,r2,15768
  80bf90:	e0bfff15 	stw	r2,-4(fp)
  80bf94:	e0bfff17 	ldw	r2,-4(fp)
}
  80bf98:	e037883a 	mov	sp,fp
  80bf9c:	dfc00117 	ldw	ra,4(sp)
  80bfa0:	df000017 	ldw	fp,0(sp)
  80bfa4:	dec00204 	addi	sp,sp,8
  80bfa8:	f800283a 	ret

0080bfac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80bfac:	defffd04 	addi	sp,sp,-12
  80bfb0:	dfc00215 	stw	ra,8(sp)
  80bfb4:	df000115 	stw	fp,4(sp)
  80bfb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80bfbc:	0009883a 	mov	r4,zero
  80bfc0:	080c8dc0 	call	80c8dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80bfc4:	080c9100 	call	80c910 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80bfc8:	01002074 	movhi	r4,129
  80bfcc:	21010404 	addi	r4,r4,1040
  80bfd0:	01402074 	movhi	r5,129
  80bfd4:	29410404 	addi	r5,r5,1040
  80bfd8:	01802074 	movhi	r6,129
  80bfdc:	31810404 	addi	r6,r6,1040
  80bfe0:	080f6c40 	call	80f6c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80bfe4:	080efd00 	call	80efd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80bfe8:	01002074 	movhi	r4,129
  80bfec:	213c0d04 	addi	r4,r4,-4044
  80bff0:	080f9680 	call	80f968 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80bff4:	d1274b17 	ldw	r4,-25300(gp)
  80bff8:	d1674c17 	ldw	r5,-25296(gp)
  80bffc:	d1a74d17 	ldw	r6,-25292(gp)
  80c000:	0800d480 	call	800d48 <main>
  80c004:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80c008:	01000044 	movi	r4,1
  80c00c:	080b7d40 	call	80b7d4 <close>
  exit (result);
  80c010:	e13fff17 	ldw	r4,-4(fp)
  80c014:	080f97c0 	call	80f97c <exit>

0080c018 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80c018:	defffe04 	addi	sp,sp,-8
  80c01c:	df000115 	stw	fp,4(sp)
  80c020:	df000104 	addi	fp,sp,4
  80c024:	e13fff15 	stw	r4,-4(fp)
}
  80c028:	e037883a 	mov	sp,fp
  80c02c:	df000017 	ldw	fp,0(sp)
  80c030:	dec00104 	addi	sp,sp,4
  80c034:	f800283a 	ret

0080c038 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80c038:	defffe04 	addi	sp,sp,-8
  80c03c:	df000115 	stw	fp,4(sp)
  80c040:	df000104 	addi	fp,sp,4
  80c044:	e13fff15 	stw	r4,-4(fp)
}
  80c048:	e037883a 	mov	sp,fp
  80c04c:	df000017 	ldw	fp,0(sp)
  80c050:	dec00104 	addi	sp,sp,4
  80c054:	f800283a 	ret

0080c058 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80c058:	defffc04 	addi	sp,sp,-16
  80c05c:	df000315 	stw	fp,12(sp)
  80c060:	df000304 	addi	fp,sp,12
  80c064:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80c068:	e0bffe17 	ldw	r2,-8(fp)
  80c06c:	10800217 	ldw	r2,8(r2)
  80c070:	10d00034 	orhi	r3,r2,16384
  80c074:	e0bffe17 	ldw	r2,-8(fp)
  80c078:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c07c:	e03ffd15 	stw	zero,-12(fp)
  80c080:	00002006 	br	80c104 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80c084:	e0bffd17 	ldw	r2,-12(fp)
  80c088:	00c02074 	movhi	r3,129
  80c08c:	18c33204 	addi	r3,r3,3272
  80c090:	10800324 	muli	r2,r2,12
  80c094:	10c5883a 	add	r2,r2,r3
  80c098:	10c00017 	ldw	r3,0(r2)
  80c09c:	e0bffe17 	ldw	r2,-8(fp)
  80c0a0:	10800017 	ldw	r2,0(r2)
  80c0a4:	1880141e 	bne	r3,r2,80c0f8 <alt_file_locked+0xa0>
  80c0a8:	e0bffd17 	ldw	r2,-12(fp)
  80c0ac:	00c02074 	movhi	r3,129
  80c0b0:	18c33204 	addi	r3,r3,3272
  80c0b4:	10800324 	muli	r2,r2,12
  80c0b8:	10c5883a 	add	r2,r2,r3
  80c0bc:	10800204 	addi	r2,r2,8
  80c0c0:	10800017 	ldw	r2,0(r2)
  80c0c4:	1004403a 	cmpge	r2,r2,zero
  80c0c8:	10000b1e 	bne	r2,zero,80c0f8 <alt_file_locked+0xa0>
  80c0cc:	e0bffd17 	ldw	r2,-12(fp)
  80c0d0:	10800324 	muli	r2,r2,12
  80c0d4:	1007883a 	mov	r3,r2
  80c0d8:	00802074 	movhi	r2,129
  80c0dc:	10833204 	addi	r2,r2,3272
  80c0e0:	1887883a 	add	r3,r3,r2
  80c0e4:	e0bffe17 	ldw	r2,-8(fp)
  80c0e8:	18800326 	beq	r3,r2,80c0f8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80c0ec:	00bffcc4 	movi	r2,-13
  80c0f0:	e0bfff15 	stw	r2,-4(fp)
  80c0f4:	00000a06 	br	80c120 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c0f8:	e0bffd17 	ldw	r2,-12(fp)
  80c0fc:	10800044 	addi	r2,r2,1
  80c100:	e0bffd15 	stw	r2,-12(fp)
  80c104:	00802074 	movhi	r2,129
  80c108:	10883004 	addi	r2,r2,8384
  80c10c:	10800017 	ldw	r2,0(r2)
  80c110:	1007883a 	mov	r3,r2
  80c114:	e0bffd17 	ldw	r2,-12(fp)
  80c118:	18bfda2e 	bgeu	r3,r2,80c084 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80c11c:	e03fff15 	stw	zero,-4(fp)
  80c120:	e0bfff17 	ldw	r2,-4(fp)
}
  80c124:	e037883a 	mov	sp,fp
  80c128:	df000017 	ldw	fp,0(sp)
  80c12c:	dec00104 	addi	sp,sp,4
  80c130:	f800283a 	ret

0080c134 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80c134:	defff404 	addi	sp,sp,-48
  80c138:	dfc00b15 	stw	ra,44(sp)
  80c13c:	df000a15 	stw	fp,40(sp)
  80c140:	df000a04 	addi	fp,sp,40
  80c144:	e13ffb15 	stw	r4,-20(fp)
  80c148:	e17ffc15 	stw	r5,-16(fp)
  80c14c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80c150:	00bfffc4 	movi	r2,-1
  80c154:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80c158:	00bffb44 	movi	r2,-19
  80c15c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80c160:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80c164:	e13ffb17 	ldw	r4,-20(fp)
  80c168:	01402074 	movhi	r5,129
  80c16c:	29482e04 	addi	r5,r5,8376
  80c170:	080f0980 	call	80f098 <alt_find_dev>
  80c174:	e0bffa15 	stw	r2,-24(fp)
  80c178:	e0bffa17 	ldw	r2,-24(fp)
  80c17c:	1004c03a 	cmpne	r2,r2,zero
  80c180:	1000051e 	bne	r2,zero,80c198 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80c184:	e13ffb17 	ldw	r4,-20(fp)
  80c188:	080f12c0 	call	80f12c <alt_find_file>
  80c18c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80c190:	00800044 	movi	r2,1
  80c194:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80c198:	e0bffa17 	ldw	r2,-24(fp)
  80c19c:	1005003a 	cmpeq	r2,r2,zero
  80c1a0:	1000301e 	bne	r2,zero,80c264 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80c1a4:	e13ffa17 	ldw	r4,-24(fp)
  80c1a8:	080f24c0 	call	80f24c <alt_get_fd>
  80c1ac:	e0bff815 	stw	r2,-32(fp)
  80c1b0:	e0bff817 	ldw	r2,-32(fp)
  80c1b4:	1004403a 	cmpge	r2,r2,zero
  80c1b8:	1000031e 	bne	r2,zero,80c1c8 <open+0x94>
    {
      status = index;
  80c1bc:	e0bff817 	ldw	r2,-32(fp)
  80c1c0:	e0bff715 	stw	r2,-36(fp)
  80c1c4:	00002906 	br	80c26c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80c1c8:	e0bff817 	ldw	r2,-32(fp)
  80c1cc:	10800324 	muli	r2,r2,12
  80c1d0:	1007883a 	mov	r3,r2
  80c1d4:	00802074 	movhi	r2,129
  80c1d8:	10833204 	addi	r2,r2,3272
  80c1dc:	1885883a 	add	r2,r3,r2
  80c1e0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80c1e4:	e0fffc17 	ldw	r3,-16(fp)
  80c1e8:	00900034 	movhi	r2,16384
  80c1ec:	10bfffc4 	addi	r2,r2,-1
  80c1f0:	1886703a 	and	r3,r3,r2
  80c1f4:	e0bff917 	ldw	r2,-28(fp)
  80c1f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80c1fc:	e0bff617 	ldw	r2,-40(fp)
  80c200:	1004c03a 	cmpne	r2,r2,zero
  80c204:	1000061e 	bne	r2,zero,80c220 <open+0xec>
  80c208:	e13ff917 	ldw	r4,-28(fp)
  80c20c:	080c0580 	call	80c058 <alt_file_locked>
  80c210:	e0bff715 	stw	r2,-36(fp)
  80c214:	e0bff717 	ldw	r2,-36(fp)
  80c218:	1004803a 	cmplt	r2,r2,zero
  80c21c:	1000131e 	bne	r2,zero,80c26c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80c220:	e0bffa17 	ldw	r2,-24(fp)
  80c224:	10800317 	ldw	r2,12(r2)
  80c228:	1005003a 	cmpeq	r2,r2,zero
  80c22c:	1000091e 	bne	r2,zero,80c254 <open+0x120>
  80c230:	e0bffa17 	ldw	r2,-24(fp)
  80c234:	10800317 	ldw	r2,12(r2)
  80c238:	e13ff917 	ldw	r4,-28(fp)
  80c23c:	e17ffb17 	ldw	r5,-20(fp)
  80c240:	e1bffc17 	ldw	r6,-16(fp)
  80c244:	e1fffd17 	ldw	r7,-12(fp)
  80c248:	103ee83a 	callr	r2
  80c24c:	e0bfff15 	stw	r2,-4(fp)
  80c250:	00000106 	br	80c258 <open+0x124>
  80c254:	e03fff15 	stw	zero,-4(fp)
  80c258:	e0bfff17 	ldw	r2,-4(fp)
  80c25c:	e0bff715 	stw	r2,-36(fp)
  80c260:	00000206 	br	80c26c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80c264:	00bffb44 	movi	r2,-19
  80c268:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80c26c:	e0bff717 	ldw	r2,-36(fp)
  80c270:	1004403a 	cmpge	r2,r2,zero
  80c274:	1000091e 	bne	r2,zero,80c29c <open+0x168>
  {
    alt_release_fd (index);  
  80c278:	e13ff817 	ldw	r4,-32(fp)
  80c27c:	080c49c0 	call	80c49c <alt_release_fd>
    ALT_ERRNO = -status;
  80c280:	080c2bc0 	call	80c2bc <alt_get_errno>
  80c284:	e0fff717 	ldw	r3,-36(fp)
  80c288:	00c7c83a 	sub	r3,zero,r3
  80c28c:	10c00015 	stw	r3,0(r2)
    return -1;
  80c290:	00bfffc4 	movi	r2,-1
  80c294:	e0bffe15 	stw	r2,-8(fp)
  80c298:	00000206 	br	80c2a4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80c29c:	e0bff817 	ldw	r2,-32(fp)
  80c2a0:	e0bffe15 	stw	r2,-8(fp)
  80c2a4:	e0bffe17 	ldw	r2,-8(fp)
}
  80c2a8:	e037883a 	mov	sp,fp
  80c2ac:	dfc00117 	ldw	ra,4(sp)
  80c2b0:	df000017 	ldw	fp,0(sp)
  80c2b4:	dec00204 	addi	sp,sp,8
  80c2b8:	f800283a 	ret

0080c2bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c2bc:	defffd04 	addi	sp,sp,-12
  80c2c0:	dfc00215 	stw	ra,8(sp)
  80c2c4:	df000115 	stw	fp,4(sp)
  80c2c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c2cc:	00802074 	movhi	r2,129
  80c2d0:	10883104 	addi	r2,r2,8388
  80c2d4:	10800017 	ldw	r2,0(r2)
  80c2d8:	1005003a 	cmpeq	r2,r2,zero
  80c2dc:	1000061e 	bne	r2,zero,80c2f8 <alt_get_errno+0x3c>
  80c2e0:	00802074 	movhi	r2,129
  80c2e4:	10883104 	addi	r2,r2,8388
  80c2e8:	10800017 	ldw	r2,0(r2)
  80c2ec:	103ee83a 	callr	r2
  80c2f0:	e0bfff15 	stw	r2,-4(fp)
  80c2f4:	00000306 	br	80c304 <alt_get_errno+0x48>
  80c2f8:	00802074 	movhi	r2,129
  80c2fc:	108f6604 	addi	r2,r2,15768
  80c300:	e0bfff15 	stw	r2,-4(fp)
  80c304:	e0bfff17 	ldw	r2,-4(fp)
}
  80c308:	e037883a 	mov	sp,fp
  80c30c:	dfc00117 	ldw	ra,4(sp)
  80c310:	df000017 	ldw	fp,0(sp)
  80c314:	dec00204 	addi	sp,sp,8
  80c318:	f800283a 	ret

0080c31c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80c31c:	defff704 	addi	sp,sp,-36
  80c320:	dfc00815 	stw	ra,32(sp)
  80c324:	df000715 	stw	fp,28(sp)
  80c328:	df000704 	addi	fp,sp,28
  80c32c:	e13ffb15 	stw	r4,-20(fp)
  80c330:	e17ffc15 	stw	r5,-16(fp)
  80c334:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c338:	e0bffb17 	ldw	r2,-20(fp)
  80c33c:	1004803a 	cmplt	r2,r2,zero
  80c340:	1000081e 	bne	r2,zero,80c364 <read+0x48>
  80c344:	e0bffb17 	ldw	r2,-20(fp)
  80c348:	10800324 	muli	r2,r2,12
  80c34c:	1007883a 	mov	r3,r2
  80c350:	00802074 	movhi	r2,129
  80c354:	10833204 	addi	r2,r2,3272
  80c358:	1887883a 	add	r3,r3,r2
  80c35c:	e0ffff15 	stw	r3,-4(fp)
  80c360:	00000106 	br	80c368 <read+0x4c>
  80c364:	e03fff15 	stw	zero,-4(fp)
  80c368:	e0bfff17 	ldw	r2,-4(fp)
  80c36c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c370:	e0bffa17 	ldw	r2,-24(fp)
  80c374:	1005003a 	cmpeq	r2,r2,zero
  80c378:	1000241e 	bne	r2,zero,80c40c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80c37c:	e0bffa17 	ldw	r2,-24(fp)
  80c380:	10800217 	ldw	r2,8(r2)
  80c384:	108000cc 	andi	r2,r2,3
  80c388:	10800060 	cmpeqi	r2,r2,1
  80c38c:	10001a1e 	bne	r2,zero,80c3f8 <read+0xdc>
  80c390:	e0bffa17 	ldw	r2,-24(fp)
  80c394:	10800017 	ldw	r2,0(r2)
  80c398:	10800517 	ldw	r2,20(r2)
  80c39c:	1005003a 	cmpeq	r2,r2,zero
  80c3a0:	1000151e 	bne	r2,zero,80c3f8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80c3a4:	e0bffa17 	ldw	r2,-24(fp)
  80c3a8:	10800017 	ldw	r2,0(r2)
  80c3ac:	10800517 	ldw	r2,20(r2)
  80c3b0:	e17ffc17 	ldw	r5,-16(fp)
  80c3b4:	e1bffd17 	ldw	r6,-12(fp)
  80c3b8:	e13ffa17 	ldw	r4,-24(fp)
  80c3bc:	103ee83a 	callr	r2
  80c3c0:	e0bff915 	stw	r2,-28(fp)
  80c3c4:	e0bff917 	ldw	r2,-28(fp)
  80c3c8:	1004403a 	cmpge	r2,r2,zero
  80c3cc:	1000071e 	bne	r2,zero,80c3ec <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80c3d0:	080c43c0 	call	80c43c <alt_get_errno>
  80c3d4:	e0fff917 	ldw	r3,-28(fp)
  80c3d8:	00c7c83a 	sub	r3,zero,r3
  80c3dc:	10c00015 	stw	r3,0(r2)
          return -1;
  80c3e0:	00bfffc4 	movi	r2,-1
  80c3e4:	e0bffe15 	stw	r2,-8(fp)
  80c3e8:	00000e06 	br	80c424 <read+0x108>
        }
        return rval;
  80c3ec:	e0bff917 	ldw	r2,-28(fp)
  80c3f0:	e0bffe15 	stw	r2,-8(fp)
  80c3f4:	00000b06 	br	80c424 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80c3f8:	080c43c0 	call	80c43c <alt_get_errno>
  80c3fc:	1007883a 	mov	r3,r2
  80c400:	00800344 	movi	r2,13
  80c404:	18800015 	stw	r2,0(r3)
  80c408:	00000406 	br	80c41c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80c40c:	080c43c0 	call	80c43c <alt_get_errno>
  80c410:	1007883a 	mov	r3,r2
  80c414:	00801444 	movi	r2,81
  80c418:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c41c:	00bfffc4 	movi	r2,-1
  80c420:	e0bffe15 	stw	r2,-8(fp)
  80c424:	e0bffe17 	ldw	r2,-8(fp)
}
  80c428:	e037883a 	mov	sp,fp
  80c42c:	dfc00117 	ldw	ra,4(sp)
  80c430:	df000017 	ldw	fp,0(sp)
  80c434:	dec00204 	addi	sp,sp,8
  80c438:	f800283a 	ret

0080c43c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c43c:	defffd04 	addi	sp,sp,-12
  80c440:	dfc00215 	stw	ra,8(sp)
  80c444:	df000115 	stw	fp,4(sp)
  80c448:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c44c:	00802074 	movhi	r2,129
  80c450:	10883104 	addi	r2,r2,8388
  80c454:	10800017 	ldw	r2,0(r2)
  80c458:	1005003a 	cmpeq	r2,r2,zero
  80c45c:	1000061e 	bne	r2,zero,80c478 <alt_get_errno+0x3c>
  80c460:	00802074 	movhi	r2,129
  80c464:	10883104 	addi	r2,r2,8388
  80c468:	10800017 	ldw	r2,0(r2)
  80c46c:	103ee83a 	callr	r2
  80c470:	e0bfff15 	stw	r2,-4(fp)
  80c474:	00000306 	br	80c484 <alt_get_errno+0x48>
  80c478:	00802074 	movhi	r2,129
  80c47c:	108f6604 	addi	r2,r2,15768
  80c480:	e0bfff15 	stw	r2,-4(fp)
  80c484:	e0bfff17 	ldw	r2,-4(fp)
}
  80c488:	e037883a 	mov	sp,fp
  80c48c:	dfc00117 	ldw	ra,4(sp)
  80c490:	df000017 	ldw	fp,0(sp)
  80c494:	dec00204 	addi	sp,sp,8
  80c498:	f800283a 	ret

0080c49c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80c49c:	defffe04 	addi	sp,sp,-8
  80c4a0:	df000115 	stw	fp,4(sp)
  80c4a4:	df000104 	addi	fp,sp,4
  80c4a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80c4ac:	e0bfff17 	ldw	r2,-4(fp)
  80c4b0:	108000d0 	cmplti	r2,r2,3
  80c4b4:	10000d1e 	bne	r2,zero,80c4ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80c4b8:	e0bfff17 	ldw	r2,-4(fp)
  80c4bc:	00c02074 	movhi	r3,129
  80c4c0:	18c33204 	addi	r3,r3,3272
  80c4c4:	10800324 	muli	r2,r2,12
  80c4c8:	10c5883a 	add	r2,r2,r3
  80c4cc:	10800204 	addi	r2,r2,8
  80c4d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80c4d4:	e0bfff17 	ldw	r2,-4(fp)
  80c4d8:	00c02074 	movhi	r3,129
  80c4dc:	18c33204 	addi	r3,r3,3272
  80c4e0:	10800324 	muli	r2,r2,12
  80c4e4:	10c5883a 	add	r2,r2,r3
  80c4e8:	10000015 	stw	zero,0(r2)
  }
}
  80c4ec:	e037883a 	mov	sp,fp
  80c4f0:	df000017 	ldw	fp,0(sp)
  80c4f4:	dec00104 	addi	sp,sp,4
  80c4f8:	f800283a 	ret

0080c4fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80c4fc:	defff804 	addi	sp,sp,-32
  80c500:	df000715 	stw	fp,28(sp)
  80c504:	df000704 	addi	fp,sp,28
  80c508:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c50c:	0005303a 	rdctl	r2,status
  80c510:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c514:	e0fffb17 	ldw	r3,-20(fp)
  80c518:	00bfff84 	movi	r2,-2
  80c51c:	1884703a 	and	r2,r3,r2
  80c520:	1001703a 	wrctl	status,r2
  
  return context;
  80c524:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80c528:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80c52c:	d0a01017 	ldw	r2,-32704(gp)
  80c530:	10c000c4 	addi	r3,r2,3
  80c534:	00bfff04 	movi	r2,-4
  80c538:	1884703a 	and	r2,r3,r2
  80c53c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80c540:	d0e01017 	ldw	r3,-32704(gp)
  80c544:	e0bffe17 	ldw	r2,-8(fp)
  80c548:	1887883a 	add	r3,r3,r2
  80c54c:	00804034 	movhi	r2,256
  80c550:	10800004 	addi	r2,r2,0
  80c554:	10c0072e 	bgeu	r2,r3,80c574 <sbrk+0x78>
  80c558:	e0bffd17 	ldw	r2,-12(fp)
  80c55c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c560:	e0bffa17 	ldw	r2,-24(fp)
  80c564:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80c568:	00bfffc4 	movi	r2,-1
  80c56c:	e0bfff15 	stw	r2,-4(fp)
  80c570:	00000c06 	br	80c5a4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80c574:	d0a01017 	ldw	r2,-32704(gp)
  80c578:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80c57c:	d0e01017 	ldw	r3,-32704(gp)
  80c580:	e0bffe17 	ldw	r2,-8(fp)
  80c584:	1885883a 	add	r2,r3,r2
  80c588:	d0a01015 	stw	r2,-32704(gp)
  80c58c:	e0bffd17 	ldw	r2,-12(fp)
  80c590:	e0bff915 	stw	r2,-28(fp)
  80c594:	e0bff917 	ldw	r2,-28(fp)
  80c598:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80c59c:	e0bffc17 	ldw	r2,-16(fp)
  80c5a0:	e0bfff15 	stw	r2,-4(fp)
  80c5a4:	e0bfff17 	ldw	r2,-4(fp)
} 
  80c5a8:	e037883a 	mov	sp,fp
  80c5ac:	df000017 	ldw	fp,0(sp)
  80c5b0:	dec00104 	addi	sp,sp,4
  80c5b4:	f800283a 	ret

0080c5b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c5b8:	defffa04 	addi	sp,sp,-24
  80c5bc:	df000515 	stw	fp,20(sp)
  80c5c0:	df000504 	addi	fp,sp,20
  80c5c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c5c8:	0005303a 	rdctl	r2,status
  80c5cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c5d0:	e0fffd17 	ldw	r3,-12(fp)
  80c5d4:	00bfff84 	movi	r2,-2
  80c5d8:	1884703a 	and	r2,r3,r2
  80c5dc:	1001703a 	wrctl	status,r2
  
  return context;
  80c5e0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c5e4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80c5e8:	e0bfff17 	ldw	r2,-4(fp)
  80c5ec:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80c5f0:	e0bffc17 	ldw	r2,-16(fp)
  80c5f4:	10c00017 	ldw	r3,0(r2)
  80c5f8:	e0bffc17 	ldw	r2,-16(fp)
  80c5fc:	10800117 	ldw	r2,4(r2)
  80c600:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80c604:	e0bffc17 	ldw	r2,-16(fp)
  80c608:	10c00117 	ldw	r3,4(r2)
  80c60c:	e0bffc17 	ldw	r2,-16(fp)
  80c610:	10800017 	ldw	r2,0(r2)
  80c614:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80c618:	e0fffc17 	ldw	r3,-16(fp)
  80c61c:	e0bffc17 	ldw	r2,-16(fp)
  80c620:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80c624:	e0fffc17 	ldw	r3,-16(fp)
  80c628:	e0bffc17 	ldw	r2,-16(fp)
  80c62c:	18800015 	stw	r2,0(r3)
  80c630:	e0bffe17 	ldw	r2,-8(fp)
  80c634:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c638:	e0bffb17 	ldw	r2,-20(fp)
  80c63c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80c640:	e037883a 	mov	sp,fp
  80c644:	df000017 	ldw	fp,0(sp)
  80c648:	dec00104 	addi	sp,sp,4
  80c64c:	f800283a 	ret

0080c650 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80c650:	defffb04 	addi	sp,sp,-20
  80c654:	dfc00415 	stw	ra,16(sp)
  80c658:	df000315 	stw	fp,12(sp)
  80c65c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80c660:	d0a01117 	ldw	r2,-32700(gp)
  80c664:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80c668:	d0a74f17 	ldw	r2,-25284(gp)
  80c66c:	10800044 	addi	r2,r2,1
  80c670:	d0a74f15 	stw	r2,-25284(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c674:	00003106 	br	80c73c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80c678:	e0bffe17 	ldw	r2,-8(fp)
  80c67c:	10800017 	ldw	r2,0(r2)
  80c680:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80c684:	e0bffe17 	ldw	r2,-8(fp)
  80c688:	10800403 	ldbu	r2,16(r2)
  80c68c:	10803fcc 	andi	r2,r2,255
  80c690:	1005003a 	cmpeq	r2,r2,zero
  80c694:	1000051e 	bne	r2,zero,80c6ac <alt_tick+0x5c>
  80c698:	d0a74f17 	ldw	r2,-25284(gp)
  80c69c:	1004c03a 	cmpne	r2,r2,zero
  80c6a0:	1000021e 	bne	r2,zero,80c6ac <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80c6a4:	e0bffe17 	ldw	r2,-8(fp)
  80c6a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80c6ac:	e0bffe17 	ldw	r2,-8(fp)
  80c6b0:	10c00217 	ldw	r3,8(r2)
  80c6b4:	d0a74f17 	ldw	r2,-25284(gp)
  80c6b8:	10c01e36 	bltu	r2,r3,80c734 <alt_tick+0xe4>
  80c6bc:	e0bffe17 	ldw	r2,-8(fp)
  80c6c0:	10800403 	ldbu	r2,16(r2)
  80c6c4:	10803fcc 	andi	r2,r2,255
  80c6c8:	1004c03a 	cmpne	r2,r2,zero
  80c6cc:	1000191e 	bne	r2,zero,80c734 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80c6d0:	e0bffe17 	ldw	r2,-8(fp)
  80c6d4:	10c00317 	ldw	r3,12(r2)
  80c6d8:	e0bffe17 	ldw	r2,-8(fp)
  80c6dc:	11000517 	ldw	r4,20(r2)
  80c6e0:	183ee83a 	callr	r3
  80c6e4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80c6e8:	e0bffd17 	ldw	r2,-12(fp)
  80c6ec:	1004c03a 	cmpne	r2,r2,zero
  80c6f0:	1000031e 	bne	r2,zero,80c700 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80c6f4:	e13ffe17 	ldw	r4,-8(fp)
  80c6f8:	080c5b80 	call	80c5b8 <alt_alarm_stop>
  80c6fc:	00000d06 	br	80c734 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80c700:	e0bffe17 	ldw	r2,-8(fp)
  80c704:	10c00217 	ldw	r3,8(r2)
  80c708:	e0bffd17 	ldw	r2,-12(fp)
  80c70c:	1887883a 	add	r3,r3,r2
  80c710:	e0bffe17 	ldw	r2,-8(fp)
  80c714:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80c718:	e0bffe17 	ldw	r2,-8(fp)
  80c71c:	10c00217 	ldw	r3,8(r2)
  80c720:	d0a74f17 	ldw	r2,-25284(gp)
  80c724:	1880032e 	bgeu	r3,r2,80c734 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80c728:	e0fffe17 	ldw	r3,-8(fp)
  80c72c:	00800044 	movi	r2,1
  80c730:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80c734:	e0bfff17 	ldw	r2,-4(fp)
  80c738:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80c73c:	d0e01104 	addi	r3,gp,-32700
  80c740:	e0bffe17 	ldw	r2,-8(fp)
  80c744:	10ffcc1e 	bne	r2,r3,80c678 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80c748:	e037883a 	mov	sp,fp
  80c74c:	dfc00117 	ldw	ra,4(sp)
  80c750:	df000017 	ldw	fp,0(sp)
  80c754:	dec00204 	addi	sp,sp,8
  80c758:	f800283a 	ret

0080c75c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80c75c:	defff704 	addi	sp,sp,-36
  80c760:	dfc00815 	stw	ra,32(sp)
  80c764:	df000715 	stw	fp,28(sp)
  80c768:	df000704 	addi	fp,sp,28
  80c76c:	e13ffb15 	stw	r4,-20(fp)
  80c770:	e17ffc15 	stw	r5,-16(fp)
  80c774:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c778:	e0bffb17 	ldw	r2,-20(fp)
  80c77c:	1004803a 	cmplt	r2,r2,zero
  80c780:	1000081e 	bne	r2,zero,80c7a4 <write+0x48>
  80c784:	e0bffb17 	ldw	r2,-20(fp)
  80c788:	10800324 	muli	r2,r2,12
  80c78c:	1007883a 	mov	r3,r2
  80c790:	00802074 	movhi	r2,129
  80c794:	10833204 	addi	r2,r2,3272
  80c798:	1887883a 	add	r3,r3,r2
  80c79c:	e0ffff15 	stw	r3,-4(fp)
  80c7a0:	00000106 	br	80c7a8 <write+0x4c>
  80c7a4:	e03fff15 	stw	zero,-4(fp)
  80c7a8:	e0bfff17 	ldw	r2,-4(fp)
  80c7ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80c7b0:	e0bffa17 	ldw	r2,-24(fp)
  80c7b4:	1005003a 	cmpeq	r2,r2,zero
  80c7b8:	1000241e 	bne	r2,zero,80c84c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80c7bc:	e0bffa17 	ldw	r2,-24(fp)
  80c7c0:	10800217 	ldw	r2,8(r2)
  80c7c4:	108000cc 	andi	r2,r2,3
  80c7c8:	1005003a 	cmpeq	r2,r2,zero
  80c7cc:	10001a1e 	bne	r2,zero,80c838 <write+0xdc>
  80c7d0:	e0bffa17 	ldw	r2,-24(fp)
  80c7d4:	10800017 	ldw	r2,0(r2)
  80c7d8:	10800617 	ldw	r2,24(r2)
  80c7dc:	1005003a 	cmpeq	r2,r2,zero
  80c7e0:	1000151e 	bne	r2,zero,80c838 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80c7e4:	e0bffa17 	ldw	r2,-24(fp)
  80c7e8:	10800017 	ldw	r2,0(r2)
  80c7ec:	10800617 	ldw	r2,24(r2)
  80c7f0:	e17ffc17 	ldw	r5,-16(fp)
  80c7f4:	e1bffd17 	ldw	r6,-12(fp)
  80c7f8:	e13ffa17 	ldw	r4,-24(fp)
  80c7fc:	103ee83a 	callr	r2
  80c800:	e0bff915 	stw	r2,-28(fp)
  80c804:	e0bff917 	ldw	r2,-28(fp)
  80c808:	1004403a 	cmpge	r2,r2,zero
  80c80c:	1000071e 	bne	r2,zero,80c82c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80c810:	080c87c0 	call	80c87c <alt_get_errno>
  80c814:	e0fff917 	ldw	r3,-28(fp)
  80c818:	00c7c83a 	sub	r3,zero,r3
  80c81c:	10c00015 	stw	r3,0(r2)
        return -1;
  80c820:	00bfffc4 	movi	r2,-1
  80c824:	e0bffe15 	stw	r2,-8(fp)
  80c828:	00000e06 	br	80c864 <write+0x108>
      }
      return rval;
  80c82c:	e0bff917 	ldw	r2,-28(fp)
  80c830:	e0bffe15 	stw	r2,-8(fp)
  80c834:	00000b06 	br	80c864 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80c838:	080c87c0 	call	80c87c <alt_get_errno>
  80c83c:	1007883a 	mov	r3,r2
  80c840:	00800344 	movi	r2,13
  80c844:	18800015 	stw	r2,0(r3)
  80c848:	00000406 	br	80c85c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80c84c:	080c87c0 	call	80c87c <alt_get_errno>
  80c850:	1007883a 	mov	r3,r2
  80c854:	00801444 	movi	r2,81
  80c858:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80c85c:	00bfffc4 	movi	r2,-1
  80c860:	e0bffe15 	stw	r2,-8(fp)
  80c864:	e0bffe17 	ldw	r2,-8(fp)
}
  80c868:	e037883a 	mov	sp,fp
  80c86c:	dfc00117 	ldw	ra,4(sp)
  80c870:	df000017 	ldw	fp,0(sp)
  80c874:	dec00204 	addi	sp,sp,8
  80c878:	f800283a 	ret

0080c87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c87c:	defffd04 	addi	sp,sp,-12
  80c880:	dfc00215 	stw	ra,8(sp)
  80c884:	df000115 	stw	fp,4(sp)
  80c888:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c88c:	00802074 	movhi	r2,129
  80c890:	10883104 	addi	r2,r2,8388
  80c894:	10800017 	ldw	r2,0(r2)
  80c898:	1005003a 	cmpeq	r2,r2,zero
  80c89c:	1000061e 	bne	r2,zero,80c8b8 <alt_get_errno+0x3c>
  80c8a0:	00802074 	movhi	r2,129
  80c8a4:	10883104 	addi	r2,r2,8388
  80c8a8:	10800017 	ldw	r2,0(r2)
  80c8ac:	103ee83a 	callr	r2
  80c8b0:	e0bfff15 	stw	r2,-4(fp)
  80c8b4:	00000306 	br	80c8c4 <alt_get_errno+0x48>
  80c8b8:	00802074 	movhi	r2,129
  80c8bc:	108f6604 	addi	r2,r2,15768
  80c8c0:	e0bfff15 	stw	r2,-4(fp)
  80c8c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c8c8:	e037883a 	mov	sp,fp
  80c8cc:	dfc00117 	ldw	ra,4(sp)
  80c8d0:	df000017 	ldw	fp,0(sp)
  80c8d4:	dec00204 	addi	sp,sp,8
  80c8d8:	f800283a 	ret

0080c8dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80c8dc:	defffd04 	addi	sp,sp,-12
  80c8e0:	dfc00215 	stw	ra,8(sp)
  80c8e4:	df000115 	stw	fp,4(sp)
  80c8e8:	df000104 	addi	fp,sp,4
  80c8ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80c8f0:	080f76c0 	call	80f76c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80c8f4:	00800044 	movi	r2,1
  80c8f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80c8fc:	e037883a 	mov	sp,fp
  80c900:	dfc00117 	ldw	ra,4(sp)
  80c904:	df000017 	ldw	fp,0(sp)
  80c908:	dec00204 	addi	sp,sp,8
  80c90c:	f800283a 	ret

0080c910 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80c910:	defffe04 	addi	sp,sp,-8
  80c914:	dfc00115 	stw	ra,4(sp)
  80c918:	df000015 	stw	fp,0(sp)
  80c91c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80c920:	01004074 	movhi	r4,257
  80c924:	21040804 	addi	r4,r4,4128
  80c928:	000b883a 	mov	r5,zero
  80c92c:	01800084 	movi	r6,2
  80c930:	01c0fa04 	movi	r7,1000
  80c934:	080e4380 	call	80e438 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80c938:	01002074 	movhi	r4,129
  80c93c:	21039c04 	addi	r4,r4,3696
  80c940:	000b883a 	mov	r5,zero
  80c944:	01800044 	movi	r6,1
  80c948:	080cb240 	call	80cb24 <altera_avalon_jtag_uart_init>
  80c94c:	01002074 	movhi	r4,129
  80c950:	21039204 	addi	r4,r4,3656
  80c954:	080c9a40 	call	80c9a4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80c958:	01002074 	movhi	r4,129
  80c95c:	2107b404 	addi	r4,r4,7888
  80c960:	080e2340 	call	80e234 <altera_avalon_lcd_16207_init>
  80c964:	01002074 	movhi	r4,129
  80c968:	2107aa04 	addi	r4,r4,7848
  80c96c:	080c9a40 	call	80c9a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80c970:	01002074 	movhi	r4,129
  80c974:	2107fc04 	addi	r4,r4,8176
  80c978:	000b883a 	mov	r5,zero
  80c97c:	000d883a 	mov	r6,zero
  80c980:	080e5c00 	call	80e5c0 <altera_avalon_uart_init>
  80c984:	01002074 	movhi	r4,129
  80c988:	2107f204 	addi	r4,r4,8136
  80c98c:	080c9a40 	call	80c9a4 <alt_dev_reg>
}
  80c990:	e037883a 	mov	sp,fp
  80c994:	dfc00117 	ldw	ra,4(sp)
  80c998:	df000017 	ldw	fp,0(sp)
  80c99c:	dec00204 	addi	sp,sp,8
  80c9a0:	f800283a 	ret

0080c9a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80c9a4:	defffd04 	addi	sp,sp,-12
  80c9a8:	dfc00215 	stw	ra,8(sp)
  80c9ac:	df000115 	stw	fp,4(sp)
  80c9b0:	df000104 	addi	fp,sp,4
  80c9b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80c9b8:	e13fff17 	ldw	r4,-4(fp)
  80c9bc:	01402074 	movhi	r5,129
  80c9c0:	29482e04 	addi	r5,r5,8376
  80c9c4:	080eebc0 	call	80eebc <alt_dev_llist_insert>
}
  80c9c8:	e037883a 	mov	sp,fp
  80c9cc:	dfc00117 	ldw	ra,4(sp)
  80c9d0:	df000017 	ldw	fp,0(sp)
  80c9d4:	dec00204 	addi	sp,sp,8
  80c9d8:	f800283a 	ret

0080c9dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80c9dc:	defffa04 	addi	sp,sp,-24
  80c9e0:	dfc00515 	stw	ra,20(sp)
  80c9e4:	df000415 	stw	fp,16(sp)
  80c9e8:	df000404 	addi	fp,sp,16
  80c9ec:	e13ffd15 	stw	r4,-12(fp)
  80c9f0:	e17ffe15 	stw	r5,-8(fp)
  80c9f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80c9f8:	e0bffd17 	ldw	r2,-12(fp)
  80c9fc:	10800017 	ldw	r2,0(r2)
  80ca00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80ca04:	e0bffc17 	ldw	r2,-16(fp)
  80ca08:	11000a04 	addi	r4,r2,40
  80ca0c:	e0bffd17 	ldw	r2,-12(fp)
  80ca10:	11c00217 	ldw	r7,8(r2)
  80ca14:	e17ffe17 	ldw	r5,-8(fp)
  80ca18:	e1bfff17 	ldw	r6,-4(fp)
  80ca1c:	080d0240 	call	80d024 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80ca20:	e037883a 	mov	sp,fp
  80ca24:	dfc00117 	ldw	ra,4(sp)
  80ca28:	df000017 	ldw	fp,0(sp)
  80ca2c:	dec00204 	addi	sp,sp,8
  80ca30:	f800283a 	ret

0080ca34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ca34:	defffa04 	addi	sp,sp,-24
  80ca38:	dfc00515 	stw	ra,20(sp)
  80ca3c:	df000415 	stw	fp,16(sp)
  80ca40:	df000404 	addi	fp,sp,16
  80ca44:	e13ffd15 	stw	r4,-12(fp)
  80ca48:	e17ffe15 	stw	r5,-8(fp)
  80ca4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80ca50:	e0bffd17 	ldw	r2,-12(fp)
  80ca54:	10800017 	ldw	r2,0(r2)
  80ca58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80ca5c:	e0bffc17 	ldw	r2,-16(fp)
  80ca60:	11000a04 	addi	r4,r2,40
  80ca64:	e0bffd17 	ldw	r2,-12(fp)
  80ca68:	11c00217 	ldw	r7,8(r2)
  80ca6c:	e17ffe17 	ldw	r5,-8(fp)
  80ca70:	e1bfff17 	ldw	r6,-4(fp)
  80ca74:	080d2480 	call	80d248 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80ca78:	e037883a 	mov	sp,fp
  80ca7c:	dfc00117 	ldw	ra,4(sp)
  80ca80:	df000017 	ldw	fp,0(sp)
  80ca84:	dec00204 	addi	sp,sp,8
  80ca88:	f800283a 	ret

0080ca8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80ca8c:	defffc04 	addi	sp,sp,-16
  80ca90:	dfc00315 	stw	ra,12(sp)
  80ca94:	df000215 	stw	fp,8(sp)
  80ca98:	df000204 	addi	fp,sp,8
  80ca9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80caa0:	e0bfff17 	ldw	r2,-4(fp)
  80caa4:	10800017 	ldw	r2,0(r2)
  80caa8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80caac:	e0bffe17 	ldw	r2,-8(fp)
  80cab0:	11000a04 	addi	r4,r2,40
  80cab4:	e0bfff17 	ldw	r2,-4(fp)
  80cab8:	11400217 	ldw	r5,8(r2)
  80cabc:	080cebc0 	call	80cebc <altera_avalon_jtag_uart_close>
}
  80cac0:	e037883a 	mov	sp,fp
  80cac4:	dfc00117 	ldw	ra,4(sp)
  80cac8:	df000017 	ldw	fp,0(sp)
  80cacc:	dec00204 	addi	sp,sp,8
  80cad0:	f800283a 	ret

0080cad4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80cad4:	defffa04 	addi	sp,sp,-24
  80cad8:	dfc00515 	stw	ra,20(sp)
  80cadc:	df000415 	stw	fp,16(sp)
  80cae0:	df000404 	addi	fp,sp,16
  80cae4:	e13ffd15 	stw	r4,-12(fp)
  80cae8:	e17ffe15 	stw	r5,-8(fp)
  80caec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80caf0:	e0bffd17 	ldw	r2,-12(fp)
  80caf4:	10800017 	ldw	r2,0(r2)
  80caf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80cafc:	e0bffc17 	ldw	r2,-16(fp)
  80cb00:	11000a04 	addi	r4,r2,40
  80cb04:	e17ffe17 	ldw	r5,-8(fp)
  80cb08:	e1bfff17 	ldw	r6,-4(fp)
  80cb0c:	080cf300 	call	80cf30 <altera_avalon_jtag_uart_ioctl>
}
  80cb10:	e037883a 	mov	sp,fp
  80cb14:	dfc00117 	ldw	ra,4(sp)
  80cb18:	df000017 	ldw	fp,0(sp)
  80cb1c:	dec00204 	addi	sp,sp,8
  80cb20:	f800283a 	ret

0080cb24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80cb24:	defffa04 	addi	sp,sp,-24
  80cb28:	dfc00515 	stw	ra,20(sp)
  80cb2c:	df000415 	stw	fp,16(sp)
  80cb30:	df000404 	addi	fp,sp,16
  80cb34:	e13ffd15 	stw	r4,-12(fp)
  80cb38:	e17ffe15 	stw	r5,-8(fp)
  80cb3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80cb40:	e0fffd17 	ldw	r3,-12(fp)
  80cb44:	00800044 	movi	r2,1
  80cb48:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80cb4c:	e0bffd17 	ldw	r2,-12(fp)
  80cb50:	10800017 	ldw	r2,0(r2)
  80cb54:	11000104 	addi	r4,r2,4
  80cb58:	e0bffd17 	ldw	r2,-12(fp)
  80cb5c:	10800817 	ldw	r2,32(r2)
  80cb60:	1007883a 	mov	r3,r2
  80cb64:	2005883a 	mov	r2,r4
  80cb68:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80cb6c:	e13ffe17 	ldw	r4,-8(fp)
  80cb70:	e17fff17 	ldw	r5,-4(fp)
  80cb74:	d8000015 	stw	zero,0(sp)
  80cb78:	01802074 	movhi	r6,129
  80cb7c:	31b2f904 	addi	r6,r6,-13340
  80cb80:	e1fffd17 	ldw	r7,-12(fp)
  80cb84:	080f3340 	call	80f334 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80cb88:	e0bffd17 	ldw	r2,-12(fp)
  80cb8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80cb90:	e0bffd17 	ldw	r2,-12(fp)
  80cb94:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80cb98:	00802074 	movhi	r2,129
  80cb9c:	108f7104 	addi	r2,r2,15812
  80cba0:	10800017 	ldw	r2,0(r2)
  80cba4:	100b883a 	mov	r5,r2
  80cba8:	01802074 	movhi	r6,129
  80cbac:	31b38304 	addi	r6,r6,-12788
  80cbb0:	e1fffd17 	ldw	r7,-12(fp)
  80cbb4:	080b6800 	call	80b680 <alt_alarm_start>
  80cbb8:	1004403a 	cmpge	r2,r2,zero
  80cbbc:	1000041e 	bne	r2,zero,80cbd0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80cbc0:	e0fffd17 	ldw	r3,-12(fp)
  80cbc4:	00a00034 	movhi	r2,32768
  80cbc8:	10bfffc4 	addi	r2,r2,-1
  80cbcc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80cbd0:	e037883a 	mov	sp,fp
  80cbd4:	dfc00117 	ldw	ra,4(sp)
  80cbd8:	df000017 	ldw	fp,0(sp)
  80cbdc:	dec00204 	addi	sp,sp,8
  80cbe0:	f800283a 	ret

0080cbe4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80cbe4:	defff804 	addi	sp,sp,-32
  80cbe8:	df000715 	stw	fp,28(sp)
  80cbec:	df000704 	addi	fp,sp,28
  80cbf0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80cbf4:	e0bfff17 	ldw	r2,-4(fp)
  80cbf8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80cbfc:	e0bffe17 	ldw	r2,-8(fp)
  80cc00:	10800017 	ldw	r2,0(r2)
  80cc04:	e0bffd15 	stw	r2,-12(fp)
  80cc08:	00000006 	br	80cc0c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cc0c:	e0bffd17 	ldw	r2,-12(fp)
  80cc10:	10800104 	addi	r2,r2,4
  80cc14:	10800037 	ldwio	r2,0(r2)
  80cc18:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80cc1c:	e0bffc17 	ldw	r2,-16(fp)
  80cc20:	1080c00c 	andi	r2,r2,768
  80cc24:	1005003a 	cmpeq	r2,r2,zero
  80cc28:	1000741e 	bne	r2,zero,80cdfc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80cc2c:	e0bffc17 	ldw	r2,-16(fp)
  80cc30:	1080400c 	andi	r2,r2,256
  80cc34:	1005003a 	cmpeq	r2,r2,zero
  80cc38:	1000351e 	bne	r2,zero,80cd10 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80cc3c:	00800074 	movhi	r2,1
  80cc40:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cc44:	e0bffe17 	ldw	r2,-8(fp)
  80cc48:	10800a17 	ldw	r2,40(r2)
  80cc4c:	10800044 	addi	r2,r2,1
  80cc50:	1081ffcc 	andi	r2,r2,2047
  80cc54:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80cc58:	e0bffe17 	ldw	r2,-8(fp)
  80cc5c:	10c00b17 	ldw	r3,44(r2)
  80cc60:	e0bffa17 	ldw	r2,-24(fp)
  80cc64:	18801626 	beq	r3,r2,80ccc0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80cc68:	e0bffd17 	ldw	r2,-12(fp)
  80cc6c:	10800037 	ldwio	r2,0(r2)
  80cc70:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80cc74:	e0bffb17 	ldw	r2,-20(fp)
  80cc78:	10a0000c 	andi	r2,r2,32768
  80cc7c:	1005003a 	cmpeq	r2,r2,zero
  80cc80:	10000f1e 	bne	r2,zero,80ccc0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80cc84:	e0bffe17 	ldw	r2,-8(fp)
  80cc88:	10c00a17 	ldw	r3,40(r2)
  80cc8c:	e0bffb17 	ldw	r2,-20(fp)
  80cc90:	1009883a 	mov	r4,r2
  80cc94:	e0bffe17 	ldw	r2,-8(fp)
  80cc98:	1885883a 	add	r2,r3,r2
  80cc9c:	10800e04 	addi	r2,r2,56
  80cca0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cca4:	e0bffe17 	ldw	r2,-8(fp)
  80cca8:	10800a17 	ldw	r2,40(r2)
  80ccac:	10800044 	addi	r2,r2,1
  80ccb0:	10c1ffcc 	andi	r3,r2,2047
  80ccb4:	e0bffe17 	ldw	r2,-8(fp)
  80ccb8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80ccbc:	003fe106 	br	80cc44 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80ccc0:	e0bffb17 	ldw	r2,-20(fp)
  80ccc4:	10bfffec 	andhi	r2,r2,65535
  80ccc8:	1005003a 	cmpeq	r2,r2,zero
  80cccc:	1000101e 	bne	r2,zero,80cd10 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ccd0:	e0bffe17 	ldw	r2,-8(fp)
  80ccd4:	10c00817 	ldw	r3,32(r2)
  80ccd8:	00bfff84 	movi	r2,-2
  80ccdc:	1886703a 	and	r3,r3,r2
  80cce0:	e0bffe17 	ldw	r2,-8(fp)
  80cce4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80cce8:	e0bffd17 	ldw	r2,-12(fp)
  80ccec:	11000104 	addi	r4,r2,4
  80ccf0:	e0bffe17 	ldw	r2,-8(fp)
  80ccf4:	10800817 	ldw	r2,32(r2)
  80ccf8:	1007883a 	mov	r3,r2
  80ccfc:	2005883a 	mov	r2,r4
  80cd00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cd04:	e0bffd17 	ldw	r2,-12(fp)
  80cd08:	10800104 	addi	r2,r2,4
  80cd0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80cd10:	e0bffc17 	ldw	r2,-16(fp)
  80cd14:	1080800c 	andi	r2,r2,512
  80cd18:	1005003a 	cmpeq	r2,r2,zero
  80cd1c:	103fbb1e 	bne	r2,zero,80cc0c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80cd20:	e0bffc17 	ldw	r2,-16(fp)
  80cd24:	10bfffec 	andhi	r2,r2,65535
  80cd28:	1004d43a 	srli	r2,r2,16
  80cd2c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cd30:	00001506 	br	80cd88 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80cd34:	e13ffd17 	ldw	r4,-12(fp)
  80cd38:	e0bffe17 	ldw	r2,-8(fp)
  80cd3c:	10c00d17 	ldw	r3,52(r2)
  80cd40:	e0bffe17 	ldw	r2,-8(fp)
  80cd44:	1885883a 	add	r2,r3,r2
  80cd48:	10820e04 	addi	r2,r2,2104
  80cd4c:	10800003 	ldbu	r2,0(r2)
  80cd50:	10c03fcc 	andi	r3,r2,255
  80cd54:	18c0201c 	xori	r3,r3,128
  80cd58:	18ffe004 	addi	r3,r3,-128
  80cd5c:	2005883a 	mov	r2,r4
  80cd60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80cd64:	e0bffe17 	ldw	r2,-8(fp)
  80cd68:	10800d17 	ldw	r2,52(r2)
  80cd6c:	10800044 	addi	r2,r2,1
  80cd70:	10c1ffcc 	andi	r3,r2,2047
  80cd74:	e0bffe17 	ldw	r2,-8(fp)
  80cd78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80cd7c:	e0bff917 	ldw	r2,-28(fp)
  80cd80:	10bfffc4 	addi	r2,r2,-1
  80cd84:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80cd88:	e0bff917 	ldw	r2,-28(fp)
  80cd8c:	1005003a 	cmpeq	r2,r2,zero
  80cd90:	1000051e 	bne	r2,zero,80cda8 <altera_avalon_jtag_uart_irq+0x1c4>
  80cd94:	e0bffe17 	ldw	r2,-8(fp)
  80cd98:	10c00d17 	ldw	r3,52(r2)
  80cd9c:	e0bffe17 	ldw	r2,-8(fp)
  80cda0:	10800c17 	ldw	r2,48(r2)
  80cda4:	18bfe31e 	bne	r3,r2,80cd34 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80cda8:	e0bff917 	ldw	r2,-28(fp)
  80cdac:	1005003a 	cmpeq	r2,r2,zero
  80cdb0:	103f961e 	bne	r2,zero,80cc0c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80cdb4:	e0bffe17 	ldw	r2,-8(fp)
  80cdb8:	10c00817 	ldw	r3,32(r2)
  80cdbc:	00bfff44 	movi	r2,-3
  80cdc0:	1886703a 	and	r3,r3,r2
  80cdc4:	e0bffe17 	ldw	r2,-8(fp)
  80cdc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80cdcc:	e0bffe17 	ldw	r2,-8(fp)
  80cdd0:	10800017 	ldw	r2,0(r2)
  80cdd4:	11000104 	addi	r4,r2,4
  80cdd8:	e0bffe17 	ldw	r2,-8(fp)
  80cddc:	10800817 	ldw	r2,32(r2)
  80cde0:	1007883a 	mov	r3,r2
  80cde4:	2005883a 	mov	r2,r4
  80cde8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80cdec:	e0bffd17 	ldw	r2,-12(fp)
  80cdf0:	10800104 	addi	r2,r2,4
  80cdf4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80cdf8:	003f8406 	br	80cc0c <altera_avalon_jtag_uart_irq+0x28>
}
  80cdfc:	e037883a 	mov	sp,fp
  80ce00:	df000017 	ldw	fp,0(sp)
  80ce04:	dec00104 	addi	sp,sp,4
  80ce08:	f800283a 	ret

0080ce0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ce0c:	defffc04 	addi	sp,sp,-16
  80ce10:	df000315 	stw	fp,12(sp)
  80ce14:	df000304 	addi	fp,sp,12
  80ce18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80ce1c:	e0bfff17 	ldw	r2,-4(fp)
  80ce20:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80ce24:	e0bffe17 	ldw	r2,-8(fp)
  80ce28:	10800017 	ldw	r2,0(r2)
  80ce2c:	10800104 	addi	r2,r2,4
  80ce30:	10800037 	ldwio	r2,0(r2)
  80ce34:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ce38:	e0bffd17 	ldw	r2,-12(fp)
  80ce3c:	1081000c 	andi	r2,r2,1024
  80ce40:	1005003a 	cmpeq	r2,r2,zero
  80ce44:	10000c1e 	bne	r2,zero,80ce78 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ce48:	e0bffe17 	ldw	r2,-8(fp)
  80ce4c:	10800017 	ldw	r2,0(r2)
  80ce50:	11000104 	addi	r4,r2,4
  80ce54:	e0bffe17 	ldw	r2,-8(fp)
  80ce58:	10800817 	ldw	r2,32(r2)
  80ce5c:	10810014 	ori	r2,r2,1024
  80ce60:	1007883a 	mov	r3,r2
  80ce64:	2005883a 	mov	r2,r4
  80ce68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80ce6c:	e0bffe17 	ldw	r2,-8(fp)
  80ce70:	10000915 	stw	zero,36(r2)
  80ce74:	00000a06 	br	80cea0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ce78:	e0bffe17 	ldw	r2,-8(fp)
  80ce7c:	10c00917 	ldw	r3,36(r2)
  80ce80:	00a00034 	movhi	r2,32768
  80ce84:	10bfff04 	addi	r2,r2,-4
  80ce88:	10c00536 	bltu	r2,r3,80cea0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80ce8c:	e0bffe17 	ldw	r2,-8(fp)
  80ce90:	10800917 	ldw	r2,36(r2)
  80ce94:	10c00044 	addi	r3,r2,1
  80ce98:	e0bffe17 	ldw	r2,-8(fp)
  80ce9c:	10c00915 	stw	r3,36(r2)
  80cea0:	00802074 	movhi	r2,129
  80cea4:	108f7104 	addi	r2,r2,15812
  80cea8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ceac:	e037883a 	mov	sp,fp
  80ceb0:	df000017 	ldw	fp,0(sp)
  80ceb4:	dec00104 	addi	sp,sp,4
  80ceb8:	f800283a 	ret

0080cebc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80cebc:	defffc04 	addi	sp,sp,-16
  80cec0:	df000315 	stw	fp,12(sp)
  80cec4:	df000304 	addi	fp,sp,12
  80cec8:	e13ffd15 	stw	r4,-12(fp)
  80cecc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ced0:	00000706 	br	80cef0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80ced4:	e0bffe17 	ldw	r2,-8(fp)
  80ced8:	1090000c 	andi	r2,r2,16384
  80cedc:	1005003a 	cmpeq	r2,r2,zero
  80cee0:	1000031e 	bne	r2,zero,80cef0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80cee4:	00bffd44 	movi	r2,-11
  80cee8:	e0bfff15 	stw	r2,-4(fp)
  80ceec:	00000b06 	br	80cf1c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80cef0:	e0bffd17 	ldw	r2,-12(fp)
  80cef4:	10c00d17 	ldw	r3,52(r2)
  80cef8:	e0bffd17 	ldw	r2,-12(fp)
  80cefc:	10800c17 	ldw	r2,48(r2)
  80cf00:	18800526 	beq	r3,r2,80cf18 <altera_avalon_jtag_uart_close+0x5c>
  80cf04:	e0bffd17 	ldw	r2,-12(fp)
  80cf08:	10c00917 	ldw	r3,36(r2)
  80cf0c:	e0bffd17 	ldw	r2,-12(fp)
  80cf10:	10800117 	ldw	r2,4(r2)
  80cf14:	18bfef36 	bltu	r3,r2,80ced4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80cf18:	e03fff15 	stw	zero,-4(fp)
  80cf1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80cf20:	e037883a 	mov	sp,fp
  80cf24:	df000017 	ldw	fp,0(sp)
  80cf28:	dec00104 	addi	sp,sp,4
  80cf2c:	f800283a 	ret

0080cf30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80cf30:	defff804 	addi	sp,sp,-32
  80cf34:	df000715 	stw	fp,28(sp)
  80cf38:	df000704 	addi	fp,sp,28
  80cf3c:	e13ffb15 	stw	r4,-20(fp)
  80cf40:	e17ffc15 	stw	r5,-16(fp)
  80cf44:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80cf48:	00bff9c4 	movi	r2,-25
  80cf4c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80cf50:	e0bffc17 	ldw	r2,-16(fp)
  80cf54:	e0bfff15 	stw	r2,-4(fp)
  80cf58:	e0ffff17 	ldw	r3,-4(fp)
  80cf5c:	189a8060 	cmpeqi	r2,r3,27137
  80cf60:	1000041e 	bne	r2,zero,80cf74 <altera_avalon_jtag_uart_ioctl+0x44>
  80cf64:	e0ffff17 	ldw	r3,-4(fp)
  80cf68:	189a80a0 	cmpeqi	r2,r3,27138
  80cf6c:	10001b1e 	bne	r2,zero,80cfdc <altera_avalon_jtag_uart_ioctl+0xac>
  80cf70:	00002706 	br	80d010 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80cf74:	e0bffb17 	ldw	r2,-20(fp)
  80cf78:	10c00117 	ldw	r3,4(r2)
  80cf7c:	00a00034 	movhi	r2,32768
  80cf80:	10bfffc4 	addi	r2,r2,-1
  80cf84:	18802226 	beq	r3,r2,80d010 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80cf88:	e0bffd17 	ldw	r2,-12(fp)
  80cf8c:	10800017 	ldw	r2,0(r2)
  80cf90:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80cf94:	e0bff917 	ldw	r2,-28(fp)
  80cf98:	10800090 	cmplti	r2,r2,2
  80cf9c:	1000071e 	bne	r2,zero,80cfbc <altera_avalon_jtag_uart_ioctl+0x8c>
  80cfa0:	e0fff917 	ldw	r3,-28(fp)
  80cfa4:	00a00034 	movhi	r2,32768
  80cfa8:	10bfffc4 	addi	r2,r2,-1
  80cfac:	18800326 	beq	r3,r2,80cfbc <altera_avalon_jtag_uart_ioctl+0x8c>
  80cfb0:	e0bff917 	ldw	r2,-28(fp)
  80cfb4:	e0bffe15 	stw	r2,-8(fp)
  80cfb8:	00000306 	br	80cfc8 <altera_avalon_jtag_uart_ioctl+0x98>
  80cfbc:	00e00034 	movhi	r3,32768
  80cfc0:	18ffff84 	addi	r3,r3,-2
  80cfc4:	e0fffe15 	stw	r3,-8(fp)
  80cfc8:	e0bffb17 	ldw	r2,-20(fp)
  80cfcc:	e0fffe17 	ldw	r3,-8(fp)
  80cfd0:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80cfd4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80cfd8:	00000d06 	br	80d010 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80cfdc:	e0bffb17 	ldw	r2,-20(fp)
  80cfe0:	10c00117 	ldw	r3,4(r2)
  80cfe4:	00a00034 	movhi	r2,32768
  80cfe8:	10bfffc4 	addi	r2,r2,-1
  80cfec:	18800826 	beq	r3,r2,80d010 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80cff0:	e13ffd17 	ldw	r4,-12(fp)
  80cff4:	e0bffb17 	ldw	r2,-20(fp)
  80cff8:	10c00917 	ldw	r3,36(r2)
  80cffc:	e0bffb17 	ldw	r2,-20(fp)
  80d000:	10800117 	ldw	r2,4(r2)
  80d004:	1885803a 	cmpltu	r2,r3,r2
  80d008:	20800015 	stw	r2,0(r4)
      rc = 0;
  80d00c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80d010:	e0bffa17 	ldw	r2,-24(fp)
}
  80d014:	e037883a 	mov	sp,fp
  80d018:	df000017 	ldw	fp,0(sp)
  80d01c:	dec00104 	addi	sp,sp,4
  80d020:	f800283a 	ret

0080d024 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80d024:	defff204 	addi	sp,sp,-56
  80d028:	dfc00d15 	stw	ra,52(sp)
  80d02c:	df000c15 	stw	fp,48(sp)
  80d030:	df000c04 	addi	fp,sp,48
  80d034:	e13ffb15 	stw	r4,-20(fp)
  80d038:	e17ffc15 	stw	r5,-16(fp)
  80d03c:	e1bffd15 	stw	r6,-12(fp)
  80d040:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80d044:	e0bffc17 	ldw	r2,-16(fp)
  80d048:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d04c:	00004806 	br	80d170 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80d050:	e0bffb17 	ldw	r2,-20(fp)
  80d054:	10800a17 	ldw	r2,40(r2)
  80d058:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80d05c:	e0bffb17 	ldw	r2,-20(fp)
  80d060:	10800b17 	ldw	r2,44(r2)
  80d064:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80d068:	e0fff717 	ldw	r3,-36(fp)
  80d06c:	e0bff617 	ldw	r2,-40(fp)
  80d070:	18800536 	bltu	r3,r2,80d088 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80d074:	e0bff717 	ldw	r2,-36(fp)
  80d078:	e0fff617 	ldw	r3,-40(fp)
  80d07c:	10c5c83a 	sub	r2,r2,r3
  80d080:	e0bff815 	stw	r2,-32(fp)
  80d084:	00000406 	br	80d098 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80d088:	00820004 	movi	r2,2048
  80d08c:	e0fff617 	ldw	r3,-40(fp)
  80d090:	10c5c83a 	sub	r2,r2,r3
  80d094:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80d098:	e0bff817 	ldw	r2,-32(fp)
  80d09c:	1005003a 	cmpeq	r2,r2,zero
  80d0a0:	10001f1e 	bne	r2,zero,80d120 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80d0a4:	e0fffd17 	ldw	r3,-12(fp)
  80d0a8:	e0bff817 	ldw	r2,-32(fp)
  80d0ac:	1880022e 	bgeu	r3,r2,80d0b8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80d0b0:	e0bffd17 	ldw	r2,-12(fp)
  80d0b4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80d0b8:	e0bffb17 	ldw	r2,-20(fp)
  80d0bc:	10c00e04 	addi	r3,r2,56
  80d0c0:	e0bff617 	ldw	r2,-40(fp)
  80d0c4:	1887883a 	add	r3,r3,r2
  80d0c8:	e0bffa17 	ldw	r2,-24(fp)
  80d0cc:	1009883a 	mov	r4,r2
  80d0d0:	180b883a 	mov	r5,r3
  80d0d4:	e1bff817 	ldw	r6,-32(fp)
  80d0d8:	08076a40 	call	8076a4 <memcpy>
      ptr   += n;
  80d0dc:	e0fff817 	ldw	r3,-32(fp)
  80d0e0:	e0bffa17 	ldw	r2,-24(fp)
  80d0e4:	10c5883a 	add	r2,r2,r3
  80d0e8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80d0ec:	e0fffd17 	ldw	r3,-12(fp)
  80d0f0:	e0bff817 	ldw	r2,-32(fp)
  80d0f4:	1885c83a 	sub	r2,r3,r2
  80d0f8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d0fc:	e0fff617 	ldw	r3,-40(fp)
  80d100:	e0bff817 	ldw	r2,-32(fp)
  80d104:	1885883a 	add	r2,r3,r2
  80d108:	10c1ffcc 	andi	r3,r2,2047
  80d10c:	e0bffb17 	ldw	r2,-20(fp)
  80d110:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80d114:	e0bffd17 	ldw	r2,-12(fp)
  80d118:	10800048 	cmpgei	r2,r2,1
  80d11c:	103fcc1e 	bne	r2,zero,80d050 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80d120:	e0fffa17 	ldw	r3,-24(fp)
  80d124:	e0bffc17 	ldw	r2,-16(fp)
  80d128:	1880141e 	bne	r3,r2,80d17c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80d12c:	e0bffe17 	ldw	r2,-8(fp)
  80d130:	1090000c 	andi	r2,r2,16384
  80d134:	1004c03a 	cmpne	r2,r2,zero
  80d138:	1000101e 	bne	r2,zero,80d17c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80d13c:	e0bffb17 	ldw	r2,-20(fp)
  80d140:	10c00a17 	ldw	r3,40(r2)
  80d144:	e0bff717 	ldw	r2,-36(fp)
  80d148:	1880051e 	bne	r3,r2,80d160 <altera_avalon_jtag_uart_read+0x13c>
  80d14c:	e0bffb17 	ldw	r2,-20(fp)
  80d150:	10c00917 	ldw	r3,36(r2)
  80d154:	e0bffb17 	ldw	r2,-20(fp)
  80d158:	10800117 	ldw	r2,4(r2)
  80d15c:	18bff736 	bltu	r3,r2,80d13c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80d160:	e0bffb17 	ldw	r2,-20(fp)
  80d164:	10c00a17 	ldw	r3,40(r2)
  80d168:	e0bff717 	ldw	r2,-36(fp)
  80d16c:	18800326 	beq	r3,r2,80d17c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80d170:	e0bffd17 	ldw	r2,-12(fp)
  80d174:	10800048 	cmpgei	r2,r2,1
  80d178:	103fb51e 	bne	r2,zero,80d050 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80d17c:	e0fffa17 	ldw	r3,-24(fp)
  80d180:	e0bffc17 	ldw	r2,-16(fp)
  80d184:	18801926 	beq	r3,r2,80d1ec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d188:	0005303a 	rdctl	r2,status
  80d18c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d190:	e0fff517 	ldw	r3,-44(fp)
  80d194:	00bfff84 	movi	r2,-2
  80d198:	1884703a 	and	r2,r3,r2
  80d19c:	1001703a 	wrctl	status,r2
  
  return context;
  80d1a0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80d1a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80d1a8:	e0bffb17 	ldw	r2,-20(fp)
  80d1ac:	10800817 	ldw	r2,32(r2)
  80d1b0:	10c00054 	ori	r3,r2,1
  80d1b4:	e0bffb17 	ldw	r2,-20(fp)
  80d1b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d1bc:	e0bffb17 	ldw	r2,-20(fp)
  80d1c0:	10800017 	ldw	r2,0(r2)
  80d1c4:	11000104 	addi	r4,r2,4
  80d1c8:	e0bffb17 	ldw	r2,-20(fp)
  80d1cc:	10800817 	ldw	r2,32(r2)
  80d1d0:	1007883a 	mov	r3,r2
  80d1d4:	2005883a 	mov	r2,r4
  80d1d8:	10c00035 	stwio	r3,0(r2)
  80d1dc:	e0bff917 	ldw	r2,-28(fp)
  80d1e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d1e4:	e0bff417 	ldw	r2,-48(fp)
  80d1e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80d1ec:	e0fffa17 	ldw	r3,-24(fp)
  80d1f0:	e0bffc17 	ldw	r2,-16(fp)
  80d1f4:	18800526 	beq	r3,r2,80d20c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80d1f8:	e0fffa17 	ldw	r3,-24(fp)
  80d1fc:	e0bffc17 	ldw	r2,-16(fp)
  80d200:	1887c83a 	sub	r3,r3,r2
  80d204:	e0ffff15 	stw	r3,-4(fp)
  80d208:	00000906 	br	80d230 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80d20c:	e0bffe17 	ldw	r2,-8(fp)
  80d210:	1090000c 	andi	r2,r2,16384
  80d214:	1005003a 	cmpeq	r2,r2,zero
  80d218:	1000031e 	bne	r2,zero,80d228 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80d21c:	00bffd44 	movi	r2,-11
  80d220:	e0bfff15 	stw	r2,-4(fp)
  80d224:	00000206 	br	80d230 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80d228:	00bffec4 	movi	r2,-5
  80d22c:	e0bfff15 	stw	r2,-4(fp)
  80d230:	e0bfff17 	ldw	r2,-4(fp)
}
  80d234:	e037883a 	mov	sp,fp
  80d238:	dfc00117 	ldw	ra,4(sp)
  80d23c:	df000017 	ldw	fp,0(sp)
  80d240:	dec00204 	addi	sp,sp,8
  80d244:	f800283a 	ret

0080d248 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80d248:	defff204 	addi	sp,sp,-56
  80d24c:	dfc00d15 	stw	ra,52(sp)
  80d250:	df000c15 	stw	fp,48(sp)
  80d254:	df000c04 	addi	fp,sp,48
  80d258:	e13ffb15 	stw	r4,-20(fp)
  80d25c:	e17ffc15 	stw	r5,-16(fp)
  80d260:	e1bffd15 	stw	r6,-12(fp)
  80d264:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80d268:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80d26c:	e0bffc17 	ldw	r2,-16(fp)
  80d270:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d274:	00003a06 	br	80d360 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80d278:	e0bffb17 	ldw	r2,-20(fp)
  80d27c:	10800c17 	ldw	r2,48(r2)
  80d280:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80d284:	e0bffb17 	ldw	r2,-20(fp)
  80d288:	10800d17 	ldw	r2,52(r2)
  80d28c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80d290:	e0fffa17 	ldw	r3,-24(fp)
  80d294:	e0bff917 	ldw	r2,-28(fp)
  80d298:	1880062e 	bgeu	r3,r2,80d2b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80d29c:	e0fff917 	ldw	r3,-28(fp)
  80d2a0:	e0bffa17 	ldw	r2,-24(fp)
  80d2a4:	1885c83a 	sub	r2,r3,r2
  80d2a8:	10bfffc4 	addi	r2,r2,-1
  80d2ac:	e0bff815 	stw	r2,-32(fp)
  80d2b0:	00000c06 	br	80d2e4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80d2b4:	e0bff917 	ldw	r2,-28(fp)
  80d2b8:	1005003a 	cmpeq	r2,r2,zero
  80d2bc:	1000051e 	bne	r2,zero,80d2d4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80d2c0:	00820004 	movi	r2,2048
  80d2c4:	e0fffa17 	ldw	r3,-24(fp)
  80d2c8:	10c5c83a 	sub	r2,r2,r3
  80d2cc:	e0bff815 	stw	r2,-32(fp)
  80d2d0:	00000406 	br	80d2e4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80d2d4:	0081ffc4 	movi	r2,2047
  80d2d8:	e0fffa17 	ldw	r3,-24(fp)
  80d2dc:	10c5c83a 	sub	r2,r2,r3
  80d2e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80d2e4:	e0bff817 	ldw	r2,-32(fp)
  80d2e8:	1005003a 	cmpeq	r2,r2,zero
  80d2ec:	10001f1e 	bne	r2,zero,80d36c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80d2f0:	e0fffd17 	ldw	r3,-12(fp)
  80d2f4:	e0bff817 	ldw	r2,-32(fp)
  80d2f8:	1880022e 	bgeu	r3,r2,80d304 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80d2fc:	e0bffd17 	ldw	r2,-12(fp)
  80d300:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80d304:	e0bffb17 	ldw	r2,-20(fp)
  80d308:	10c20e04 	addi	r3,r2,2104
  80d30c:	e0bffa17 	ldw	r2,-24(fp)
  80d310:	1885883a 	add	r2,r3,r2
  80d314:	e0fffc17 	ldw	r3,-16(fp)
  80d318:	1009883a 	mov	r4,r2
  80d31c:	180b883a 	mov	r5,r3
  80d320:	e1bff817 	ldw	r6,-32(fp)
  80d324:	08076a40 	call	8076a4 <memcpy>
      ptr   += n;
  80d328:	e0fff817 	ldw	r3,-32(fp)
  80d32c:	e0bffc17 	ldw	r2,-16(fp)
  80d330:	10c5883a 	add	r2,r2,r3
  80d334:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80d338:	e0fffd17 	ldw	r3,-12(fp)
  80d33c:	e0bff817 	ldw	r2,-32(fp)
  80d340:	1885c83a 	sub	r2,r3,r2
  80d344:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80d348:	e0fffa17 	ldw	r3,-24(fp)
  80d34c:	e0bff817 	ldw	r2,-32(fp)
  80d350:	1885883a 	add	r2,r3,r2
  80d354:	10c1ffcc 	andi	r3,r2,2047
  80d358:	e0bffb17 	ldw	r2,-20(fp)
  80d35c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80d360:	e0bffd17 	ldw	r2,-12(fp)
  80d364:	10800048 	cmpgei	r2,r2,1
  80d368:	103fc31e 	bne	r2,zero,80d278 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d36c:	0005303a 	rdctl	r2,status
  80d370:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d374:	e0fff517 	ldw	r3,-44(fp)
  80d378:	00bfff84 	movi	r2,-2
  80d37c:	1884703a 	and	r2,r3,r2
  80d380:	1001703a 	wrctl	status,r2
  
  return context;
  80d384:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80d388:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80d38c:	e0bffb17 	ldw	r2,-20(fp)
  80d390:	10800817 	ldw	r2,32(r2)
  80d394:	10c00094 	ori	r3,r2,2
  80d398:	e0bffb17 	ldw	r2,-20(fp)
  80d39c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80d3a0:	e0bffb17 	ldw	r2,-20(fp)
  80d3a4:	10800017 	ldw	r2,0(r2)
  80d3a8:	11000104 	addi	r4,r2,4
  80d3ac:	e0bffb17 	ldw	r2,-20(fp)
  80d3b0:	10800817 	ldw	r2,32(r2)
  80d3b4:	1007883a 	mov	r3,r2
  80d3b8:	2005883a 	mov	r2,r4
  80d3bc:	10c00035 	stwio	r3,0(r2)
  80d3c0:	e0bff717 	ldw	r2,-36(fp)
  80d3c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d3c8:	e0bff417 	ldw	r2,-48(fp)
  80d3cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80d3d0:	e0bffd17 	ldw	r2,-12(fp)
  80d3d4:	10800050 	cmplti	r2,r2,1
  80d3d8:	1000111e 	bne	r2,zero,80d420 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80d3dc:	e0bffe17 	ldw	r2,-8(fp)
  80d3e0:	1090000c 	andi	r2,r2,16384
  80d3e4:	1004c03a 	cmpne	r2,r2,zero
  80d3e8:	1000101e 	bne	r2,zero,80d42c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80d3ec:	e0bffb17 	ldw	r2,-20(fp)
  80d3f0:	10c00d17 	ldw	r3,52(r2)
  80d3f4:	e0bff917 	ldw	r2,-28(fp)
  80d3f8:	1880051e 	bne	r3,r2,80d410 <altera_avalon_jtag_uart_write+0x1c8>
  80d3fc:	e0bffb17 	ldw	r2,-20(fp)
  80d400:	10c00917 	ldw	r3,36(r2)
  80d404:	e0bffb17 	ldw	r2,-20(fp)
  80d408:	10800117 	ldw	r2,4(r2)
  80d40c:	18bff736 	bltu	r3,r2,80d3ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80d410:	e0bffb17 	ldw	r2,-20(fp)
  80d414:	10c00d17 	ldw	r3,52(r2)
  80d418:	e0bff917 	ldw	r2,-28(fp)
  80d41c:	18800326 	beq	r3,r2,80d42c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80d420:	e0bffd17 	ldw	r2,-12(fp)
  80d424:	10800048 	cmpgei	r2,r2,1
  80d428:	103fcd1e 	bne	r2,zero,80d360 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80d42c:	e0fffc17 	ldw	r3,-16(fp)
  80d430:	e0bff617 	ldw	r2,-40(fp)
  80d434:	18800526 	beq	r3,r2,80d44c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80d438:	e0fffc17 	ldw	r3,-16(fp)
  80d43c:	e0bff617 	ldw	r2,-40(fp)
  80d440:	1887c83a 	sub	r3,r3,r2
  80d444:	e0ffff15 	stw	r3,-4(fp)
  80d448:	00000906 	br	80d470 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80d44c:	e0bffe17 	ldw	r2,-8(fp)
  80d450:	1090000c 	andi	r2,r2,16384
  80d454:	1005003a 	cmpeq	r2,r2,zero
  80d458:	1000031e 	bne	r2,zero,80d468 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80d45c:	00bffd44 	movi	r2,-11
  80d460:	e0bfff15 	stw	r2,-4(fp)
  80d464:	00000206 	br	80d470 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80d468:	00bffec4 	movi	r2,-5
  80d46c:	e0bfff15 	stw	r2,-4(fp)
  80d470:	e0bfff17 	ldw	r2,-4(fp)
}
  80d474:	e037883a 	mov	sp,fp
  80d478:	dfc00117 	ldw	ra,4(sp)
  80d47c:	df000017 	ldw	fp,0(sp)
  80d480:	dec00204 	addi	sp,sp,8
  80d484:	f800283a 	ret

0080d488 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80d488:	defffa04 	addi	sp,sp,-24
  80d48c:	dfc00515 	stw	ra,20(sp)
  80d490:	df000415 	stw	fp,16(sp)
  80d494:	df000404 	addi	fp,sp,16
  80d498:	e13ffe15 	stw	r4,-8(fp)
  80d49c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80d4a0:	e0bffe17 	ldw	r2,-8(fp)
  80d4a4:	10800017 	ldw	r2,0(r2)
  80d4a8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80d4ac:	008003f4 	movhi	r2,15
  80d4b0:	10909004 	addi	r2,r2,16960
  80d4b4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80d4b8:	e0bffe17 	ldw	r2,-8(fp)
  80d4bc:	10800803 	ldbu	r2,32(r2)
  80d4c0:	10803fcc 	andi	r2,r2,255
  80d4c4:	1080201c 	xori	r2,r2,128
  80d4c8:	10bfe004 	addi	r2,r2,-128
  80d4cc:	1004c03a 	cmpne	r2,r2,zero
  80d4d0:	1000161e 	bne	r2,zero,80d52c <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d4d4:	00000a06 	br	80d500 <lcd_write_command+0x78>
    if (--i == 0)
  80d4d8:	e0bffc17 	ldw	r2,-16(fp)
  80d4dc:	10bfffc4 	addi	r2,r2,-1
  80d4e0:	e0bffc15 	stw	r2,-16(fp)
  80d4e4:	e0bffc17 	ldw	r2,-16(fp)
  80d4e8:	1004c03a 	cmpne	r2,r2,zero
  80d4ec:	1000041e 	bne	r2,zero,80d500 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80d4f0:	e0fffe17 	ldw	r3,-8(fp)
  80d4f4:	00800044 	movi	r2,1
  80d4f8:	18800805 	stb	r2,32(r3)
      return;
  80d4fc:	00000b06 	br	80d52c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d500:	e0bffd17 	ldw	r2,-12(fp)
  80d504:	10800104 	addi	r2,r2,4
  80d508:	10800037 	ldwio	r2,0(r2)
  80d50c:	1080200c 	andi	r2,r2,128
  80d510:	1004c03a 	cmpne	r2,r2,zero
  80d514:	103ff01e 	bne	r2,zero,80d4d8 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80d518:	01001904 	movi	r4,100
  80d51c:	080f73c0 	call	80f73c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80d520:	e0bffd17 	ldw	r2,-12(fp)
  80d524:	e0ffff03 	ldbu	r3,-4(fp)
  80d528:	10c00035 	stwio	r3,0(r2)
}
  80d52c:	e037883a 	mov	sp,fp
  80d530:	dfc00117 	ldw	ra,4(sp)
  80d534:	df000017 	ldw	fp,0(sp)
  80d538:	dec00204 	addi	sp,sp,8
  80d53c:	f800283a 	ret

0080d540 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80d540:	defffa04 	addi	sp,sp,-24
  80d544:	dfc00515 	stw	ra,20(sp)
  80d548:	df000415 	stw	fp,16(sp)
  80d54c:	df000404 	addi	fp,sp,16
  80d550:	e13ffe15 	stw	r4,-8(fp)
  80d554:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80d558:	e0bffe17 	ldw	r2,-8(fp)
  80d55c:	10800017 	ldw	r2,0(r2)
  80d560:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80d564:	008003f4 	movhi	r2,15
  80d568:	10909004 	addi	r2,r2,16960
  80d56c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80d570:	e0bffe17 	ldw	r2,-8(fp)
  80d574:	10800803 	ldbu	r2,32(r2)
  80d578:	10803fcc 	andi	r2,r2,255
  80d57c:	1080201c 	xori	r2,r2,128
  80d580:	10bfe004 	addi	r2,r2,-128
  80d584:	1004c03a 	cmpne	r2,r2,zero
  80d588:	10001d1e 	bne	r2,zero,80d600 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d58c:	00000a06 	br	80d5b8 <lcd_write_data+0x78>
    if (--i == 0)
  80d590:	e0bffc17 	ldw	r2,-16(fp)
  80d594:	10bfffc4 	addi	r2,r2,-1
  80d598:	e0bffc15 	stw	r2,-16(fp)
  80d59c:	e0bffc17 	ldw	r2,-16(fp)
  80d5a0:	1004c03a 	cmpne	r2,r2,zero
  80d5a4:	1000041e 	bne	r2,zero,80d5b8 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80d5a8:	e0fffe17 	ldw	r3,-8(fp)
  80d5ac:	00800044 	movi	r2,1
  80d5b0:	18800805 	stb	r2,32(r3)
      return;
  80d5b4:	00001206 	br	80d600 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80d5b8:	e0bffd17 	ldw	r2,-12(fp)
  80d5bc:	10800104 	addi	r2,r2,4
  80d5c0:	10800037 	ldwio	r2,0(r2)
  80d5c4:	1080200c 	andi	r2,r2,128
  80d5c8:	1004c03a 	cmpne	r2,r2,zero
  80d5cc:	103ff01e 	bne	r2,zero,80d590 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80d5d0:	01001904 	movi	r4,100
  80d5d4:	080f73c0 	call	80f73c <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80d5d8:	e0bffd17 	ldw	r2,-12(fp)
  80d5dc:	10800204 	addi	r2,r2,8
  80d5e0:	e0ffff03 	ldbu	r3,-4(fp)
  80d5e4:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80d5e8:	e0bffe17 	ldw	r2,-8(fp)
  80d5ec:	108008c3 	ldbu	r2,35(r2)
  80d5f0:	10800044 	addi	r2,r2,1
  80d5f4:	1007883a 	mov	r3,r2
  80d5f8:	e0bffe17 	ldw	r2,-8(fp)
  80d5fc:	10c008c5 	stb	r3,35(r2)
}
  80d600:	e037883a 	mov	sp,fp
  80d604:	dfc00117 	ldw	ra,4(sp)
  80d608:	df000017 	ldw	fp,0(sp)
  80d60c:	dec00204 	addi	sp,sp,8
  80d610:	f800283a 	ret

0080d614 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80d614:	defffc04 	addi	sp,sp,-16
  80d618:	dfc00315 	stw	ra,12(sp)
  80d61c:	df000215 	stw	fp,8(sp)
  80d620:	df000204 	addi	fp,sp,8
  80d624:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80d628:	e13fff17 	ldw	r4,-4(fp)
  80d62c:	01400044 	movi	r5,1
  80d630:	080d4880 	call	80d488 <lcd_write_command>

  sp->x = 0;
  80d634:	e0bfff17 	ldw	r2,-4(fp)
  80d638:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80d63c:	e0bfff17 	ldw	r2,-4(fp)
  80d640:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80d644:	e0bfff17 	ldw	r2,-4(fp)
  80d648:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d64c:	e03ffe15 	stw	zero,-8(fp)
  80d650:	00001906 	br	80d6b8 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80d654:	e0bffe17 	ldw	r2,-8(fp)
  80d658:	10801924 	muli	r2,r2,100
  80d65c:	10c01004 	addi	r3,r2,64
  80d660:	e0bfff17 	ldw	r2,-4(fp)
  80d664:	1889883a 	add	r4,r3,r2
  80d668:	01400804 	movi	r5,32
  80d66c:	01801444 	movi	r6,81
  80d670:	0802c880 	call	802c88 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80d674:	e0bffe17 	ldw	r2,-8(fp)
  80d678:	10801924 	muli	r2,r2,100
  80d67c:	10c00c04 	addi	r3,r2,48
  80d680:	e0bfff17 	ldw	r2,-4(fp)
  80d684:	1889883a 	add	r4,r3,r2
  80d688:	01400804 	movi	r5,32
  80d68c:	01800404 	movi	r6,16
  80d690:	0802c880 	call	802c88 <memset>
    sp->line[y].width = 0;
  80d694:	e0bffe17 	ldw	r2,-8(fp)
  80d698:	e0ffff17 	ldw	r3,-4(fp)
  80d69c:	10801924 	muli	r2,r2,100
  80d6a0:	10c5883a 	add	r2,r2,r3
  80d6a4:	10802404 	addi	r2,r2,144
  80d6a8:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d6ac:	e0bffe17 	ldw	r2,-8(fp)
  80d6b0:	10800044 	addi	r2,r2,1
  80d6b4:	e0bffe15 	stw	r2,-8(fp)
  80d6b8:	e0bffe17 	ldw	r2,-8(fp)
  80d6bc:	10800090 	cmplti	r2,r2,2
  80d6c0:	103fe41e 	bne	r2,zero,80d654 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80d6c4:	e037883a 	mov	sp,fp
  80d6c8:	dfc00117 	ldw	ra,4(sp)
  80d6cc:	df000017 	ldw	fp,0(sp)
  80d6d0:	dec00204 	addi	sp,sp,8
  80d6d4:	f800283a 	ret

0080d6d8 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80d6d8:	defff604 	addi	sp,sp,-40
  80d6dc:	dfc00915 	stw	ra,36(sp)
  80d6e0:	df000815 	stw	fp,32(sp)
  80d6e4:	dc000715 	stw	r16,28(sp)
  80d6e8:	df000704 	addi	fp,sp,28
  80d6ec:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80d6f0:	e0bfff17 	ldw	r2,-4(fp)
  80d6f4:	10800943 	ldbu	r2,37(r2)
  80d6f8:	10803fcc 	andi	r2,r2,255
  80d6fc:	1080201c 	xori	r2,r2,128
  80d700:	10bfe004 	addi	r2,r2,-128
  80d704:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d708:	e03ffe15 	stw	zero,-8(fp)
  80d70c:	00006406 	br	80d8a0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80d710:	e0bffe17 	ldw	r2,-8(fp)
  80d714:	e0ffff17 	ldw	r3,-4(fp)
  80d718:	10801924 	muli	r2,r2,100
  80d71c:	10c5883a 	add	r2,r2,r3
  80d720:	10802404 	addi	r2,r2,144
  80d724:	10800043 	ldbu	r2,1(r2)
  80d728:	10803fcc 	andi	r2,r2,255
  80d72c:	1080201c 	xori	r2,r2,128
  80d730:	10bfe004 	addi	r2,r2,-128
  80d734:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80d738:	e0bffe17 	ldw	r2,-8(fp)
  80d73c:	e0ffff17 	ldw	r3,-4(fp)
  80d740:	10801924 	muli	r2,r2,100
  80d744:	10c5883a 	add	r2,r2,r3
  80d748:	10802404 	addi	r2,r2,144
  80d74c:	10800083 	ldbu	r2,2(r2)
  80d750:	10c03fcc 	andi	r3,r2,255
  80d754:	e0bffc17 	ldw	r2,-16(fp)
  80d758:	1885383a 	mul	r2,r3,r2
  80d75c:	1005d23a 	srai	r2,r2,8
  80d760:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80d764:	e0fffa17 	ldw	r3,-24(fp)
  80d768:	e0bffb17 	ldw	r2,-20(fp)
  80d76c:	18800116 	blt	r3,r2,80d774 <lcd_repaint_screen+0x9c>
      offset = 0;
  80d770:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80d774:	e03ffd15 	stw	zero,-12(fp)
  80d778:	00004306 	br	80d888 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80d77c:	e43ffe17 	ldw	r16,-8(fp)
  80d780:	e0fffd17 	ldw	r3,-12(fp)
  80d784:	e0bffa17 	ldw	r2,-24(fp)
  80d788:	1889883a 	add	r4,r3,r2
  80d78c:	e17ffb17 	ldw	r5,-20(fp)
  80d790:	0800f100 	call	800f10 <__modsi3>
  80d794:	1009883a 	mov	r4,r2
  80d798:	e0ffff17 	ldw	r3,-4(fp)
  80d79c:	80801924 	muli	r2,r16,100
  80d7a0:	10c5883a 	add	r2,r2,r3
  80d7a4:	1105883a 	add	r2,r2,r4
  80d7a8:	10801004 	addi	r2,r2,64
  80d7ac:	10800003 	ldbu	r2,0(r2)
  80d7b0:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80d7b4:	e0bffe17 	ldw	r2,-8(fp)
  80d7b8:	e13ffd17 	ldw	r4,-12(fp)
  80d7bc:	e0ffff17 	ldw	r3,-4(fp)
  80d7c0:	10801924 	muli	r2,r2,100
  80d7c4:	10c5883a 	add	r2,r2,r3
  80d7c8:	1105883a 	add	r2,r2,r4
  80d7cc:	10800c04 	addi	r2,r2,48
  80d7d0:	10800003 	ldbu	r2,0(r2)
  80d7d4:	10c03fcc 	andi	r3,r2,255
  80d7d8:	18c0201c 	xori	r3,r3,128
  80d7dc:	18ffe004 	addi	r3,r3,-128
  80d7e0:	e0bff947 	ldb	r2,-27(fp)
  80d7e4:	18802526 	beq	r3,r2,80d87c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80d7e8:	e0fffe17 	ldw	r3,-8(fp)
  80d7ec:	d0a01304 	addi	r2,gp,-32692
  80d7f0:	1885883a 	add	r2,r3,r2
  80d7f4:	10800003 	ldbu	r2,0(r2)
  80d7f8:	1007883a 	mov	r3,r2
  80d7fc:	e0bffd17 	ldw	r2,-12(fp)
  80d800:	1885883a 	add	r2,r3,r2
  80d804:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80d808:	e0fff903 	ldbu	r3,-28(fp)
  80d80c:	e0bfff17 	ldw	r2,-4(fp)
  80d810:	108008c3 	ldbu	r2,35(r2)
  80d814:	10803fcc 	andi	r2,r2,255
  80d818:	1080201c 	xori	r2,r2,128
  80d81c:	10bfe004 	addi	r2,r2,-128
  80d820:	18800926 	beq	r3,r2,80d848 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80d824:	e0fff903 	ldbu	r3,-28(fp)
  80d828:	00bfe004 	movi	r2,-128
  80d82c:	1884b03a 	or	r2,r3,r2
  80d830:	11403fcc 	andi	r5,r2,255
  80d834:	e13fff17 	ldw	r4,-4(fp)
  80d838:	080d4880 	call	80d488 <lcd_write_command>
          sp->address = address;
  80d83c:	e0fff903 	ldbu	r3,-28(fp)
  80d840:	e0bfff17 	ldw	r2,-4(fp)
  80d844:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80d848:	e0bff943 	ldbu	r2,-27(fp)
  80d84c:	11403fcc 	andi	r5,r2,255
  80d850:	e13fff17 	ldw	r4,-4(fp)
  80d854:	080d5400 	call	80d540 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80d858:	e0bffe17 	ldw	r2,-8(fp)
  80d85c:	e13ffd17 	ldw	r4,-12(fp)
  80d860:	e0ffff17 	ldw	r3,-4(fp)
  80d864:	10801924 	muli	r2,r2,100
  80d868:	10c5883a 	add	r2,r2,r3
  80d86c:	1105883a 	add	r2,r2,r4
  80d870:	10c00c04 	addi	r3,r2,48
  80d874:	e0bff943 	ldbu	r2,-27(fp)
  80d878:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80d87c:	e0bffd17 	ldw	r2,-12(fp)
  80d880:	10800044 	addi	r2,r2,1
  80d884:	e0bffd15 	stw	r2,-12(fp)
  80d888:	e0bffd17 	ldw	r2,-12(fp)
  80d88c:	10800410 	cmplti	r2,r2,16
  80d890:	103fba1e 	bne	r2,zero,80d77c <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d894:	e0bffe17 	ldw	r2,-8(fp)
  80d898:	10800044 	addi	r2,r2,1
  80d89c:	e0bffe15 	stw	r2,-8(fp)
  80d8a0:	e0bffe17 	ldw	r2,-8(fp)
  80d8a4:	10800090 	cmplti	r2,r2,2
  80d8a8:	103f991e 	bne	r2,zero,80d710 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80d8ac:	e037883a 	mov	sp,fp
  80d8b0:	dfc00217 	ldw	ra,8(sp)
  80d8b4:	df000117 	ldw	fp,4(sp)
  80d8b8:	dc000017 	ldw	r16,0(sp)
  80d8bc:	dec00304 	addi	sp,sp,12
  80d8c0:	f800283a 	ret

0080d8c4 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80d8c4:	defffc04 	addi	sp,sp,-16
  80d8c8:	dfc00315 	stw	ra,12(sp)
  80d8cc:	df000215 	stw	fp,8(sp)
  80d8d0:	df000204 	addi	fp,sp,8
  80d8d4:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d8d8:	e03ffe15 	stw	zero,-8(fp)
  80d8dc:	00001d06 	br	80d954 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80d8e0:	e0bffe17 	ldw	r2,-8(fp)
  80d8e4:	10800048 	cmpgei	r2,r2,1
  80d8e8:	10000f1e 	bne	r2,zero,80d928 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80d8ec:	e0bffe17 	ldw	r2,-8(fp)
  80d8f0:	10801924 	muli	r2,r2,100
  80d8f4:	10c01004 	addi	r3,r2,64
  80d8f8:	e0bfff17 	ldw	r2,-4(fp)
  80d8fc:	1889883a 	add	r4,r3,r2
  80d900:	e0bffe17 	ldw	r2,-8(fp)
  80d904:	10800044 	addi	r2,r2,1
  80d908:	10801924 	muli	r2,r2,100
  80d90c:	10c01004 	addi	r3,r2,64
  80d910:	e0bfff17 	ldw	r2,-4(fp)
  80d914:	1885883a 	add	r2,r3,r2
  80d918:	100b883a 	mov	r5,r2
  80d91c:	01801404 	movi	r6,80
  80d920:	08076a40 	call	8076a4 <memcpy>
  80d924:	00000806 	br	80d948 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80d928:	e0bffe17 	ldw	r2,-8(fp)
  80d92c:	10801924 	muli	r2,r2,100
  80d930:	10c01004 	addi	r3,r2,64
  80d934:	e0bfff17 	ldw	r2,-4(fp)
  80d938:	1889883a 	add	r4,r3,r2
  80d93c:	01400804 	movi	r5,32
  80d940:	01801404 	movi	r6,80
  80d944:	0802c880 	call	802c88 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d948:	e0bffe17 	ldw	r2,-8(fp)
  80d94c:	10800044 	addi	r2,r2,1
  80d950:	e0bffe15 	stw	r2,-8(fp)
  80d954:	e0bffe17 	ldw	r2,-8(fp)
  80d958:	10800090 	cmplti	r2,r2,2
  80d95c:	103fe01e 	bne	r2,zero,80d8e0 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80d960:	e0bfff17 	ldw	r2,-4(fp)
  80d964:	10800883 	ldbu	r2,34(r2)
  80d968:	10bfffc4 	addi	r2,r2,-1
  80d96c:	1007883a 	mov	r3,r2
  80d970:	e0bfff17 	ldw	r2,-4(fp)
  80d974:	10c00885 	stb	r3,34(r2)
}
  80d978:	e037883a 	mov	sp,fp
  80d97c:	dfc00117 	ldw	ra,4(sp)
  80d980:	df000017 	ldw	fp,0(sp)
  80d984:	dec00204 	addi	sp,sp,8
  80d988:	f800283a 	ret

0080d98c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80d98c:	defff804 	addi	sp,sp,-32
  80d990:	dfc00715 	stw	ra,28(sp)
  80d994:	df000615 	stw	fp,24(sp)
  80d998:	df000604 	addi	fp,sp,24
  80d99c:	e13ffd15 	stw	r4,-12(fp)
  80d9a0:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80d9a4:	e03ffc15 	stw	zero,-16(fp)
  80d9a8:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  80d9ac:	e0bffd17 	ldw	r2,-12(fp)
  80d9b0:	10800a03 	ldbu	r2,40(r2)
  80d9b4:	10803fcc 	andi	r2,r2,255
  80d9b8:	1080201c 	xori	r2,r2,128
  80d9bc:	10bfe004 	addi	r2,r2,-128
  80d9c0:	108016d8 	cmpnei	r2,r2,91
  80d9c4:	1000491e 	bne	r2,zero,80daec <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  80d9c8:	e0bffd17 	ldw	r2,-12(fp)
  80d9cc:	10800a04 	addi	r2,r2,40
  80d9d0:	10800044 	addi	r2,r2,1
  80d9d4:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80d9d8:	00000d06 	br	80da10 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80d9dc:	e0bffc17 	ldw	r2,-16(fp)
  80d9e0:	10c002a4 	muli	r3,r2,10
  80d9e4:	e0bffa17 	ldw	r2,-24(fp)
  80d9e8:	10800003 	ldbu	r2,0(r2)
  80d9ec:	10803fcc 	andi	r2,r2,255
  80d9f0:	1080201c 	xori	r2,r2,128
  80d9f4:	10bfe004 	addi	r2,r2,-128
  80d9f8:	1885883a 	add	r2,r3,r2
  80d9fc:	10bff404 	addi	r2,r2,-48
  80da00:	e0bffc15 	stw	r2,-16(fp)
  80da04:	e0bffa17 	ldw	r2,-24(fp)
  80da08:	10800044 	addi	r2,r2,1
  80da0c:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80da10:	e0bffa17 	ldw	r2,-24(fp)
  80da14:	10800003 	ldbu	r2,0(r2)
  80da18:	10803fcc 	andi	r2,r2,255
  80da1c:	1080201c 	xori	r2,r2,128
  80da20:	10bfe004 	addi	r2,r2,-128
  80da24:	1007883a 	mov	r3,r2
  80da28:	00802074 	movhi	r2,129
  80da2c:	10882904 	addi	r2,r2,8356
  80da30:	10800017 	ldw	r2,0(r2)
  80da34:	1885883a 	add	r2,r3,r2
  80da38:	10800003 	ldbu	r2,0(r2)
  80da3c:	10803fcc 	andi	r2,r2,255
  80da40:	1080010c 	andi	r2,r2,4
  80da44:	1004c03a 	cmpne	r2,r2,zero
  80da48:	103fe41e 	bne	r2,zero,80d9dc <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80da4c:	e0bffa17 	ldw	r2,-24(fp)
  80da50:	10800003 	ldbu	r2,0(r2)
  80da54:	10803fcc 	andi	r2,r2,255
  80da58:	1080201c 	xori	r2,r2,128
  80da5c:	10bfe004 	addi	r2,r2,-128
  80da60:	10800ed8 	cmpnei	r2,r2,59
  80da64:	1000231e 	bne	r2,zero,80daf4 <lcd_handle_escape+0x168>
    {
      ptr++;
  80da68:	e0bffa17 	ldw	r2,-24(fp)
  80da6c:	10800044 	addi	r2,r2,1
  80da70:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80da74:	00000d06 	br	80daac <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80da78:	e0bffb17 	ldw	r2,-20(fp)
  80da7c:	10c002a4 	muli	r3,r2,10
  80da80:	e0bffa17 	ldw	r2,-24(fp)
  80da84:	10800003 	ldbu	r2,0(r2)
  80da88:	10803fcc 	andi	r2,r2,255
  80da8c:	1080201c 	xori	r2,r2,128
  80da90:	10bfe004 	addi	r2,r2,-128
  80da94:	1885883a 	add	r2,r3,r2
  80da98:	10bff404 	addi	r2,r2,-48
  80da9c:	e0bffb15 	stw	r2,-20(fp)
  80daa0:	e0bffa17 	ldw	r2,-24(fp)
  80daa4:	10800044 	addi	r2,r2,1
  80daa8:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80daac:	e0bffa17 	ldw	r2,-24(fp)
  80dab0:	10800003 	ldbu	r2,0(r2)
  80dab4:	10803fcc 	andi	r2,r2,255
  80dab8:	1080201c 	xori	r2,r2,128
  80dabc:	10bfe004 	addi	r2,r2,-128
  80dac0:	1007883a 	mov	r3,r2
  80dac4:	00802074 	movhi	r2,129
  80dac8:	10882904 	addi	r2,r2,8356
  80dacc:	10800017 	ldw	r2,0(r2)
  80dad0:	1885883a 	add	r2,r3,r2
  80dad4:	10800003 	ldbu	r2,0(r2)
  80dad8:	10803fcc 	andi	r2,r2,255
  80dadc:	1080010c 	andi	r2,r2,4
  80dae0:	1004c03a 	cmpne	r2,r2,zero
  80dae4:	103fe41e 	bne	r2,zero,80da78 <lcd_handle_escape+0xec>
  80dae8:	00000206 	br	80daf4 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80daec:	00bfffc4 	movi	r2,-1
  80daf0:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80daf4:	e0bffe07 	ldb	r2,-8(fp)
  80daf8:	e0bfff15 	stw	r2,-4(fp)
  80dafc:	e0ffff17 	ldw	r3,-4(fp)
  80db00:	188012a0 	cmpeqi	r2,r3,74
  80db04:	10002f1e 	bne	r2,zero,80dbc4 <lcd_handle_escape+0x238>
  80db08:	e0ffff17 	ldw	r3,-4(fp)
  80db0c:	188012c8 	cmpgei	r2,r3,75
  80db10:	1000041e 	bne	r2,zero,80db24 <lcd_handle_escape+0x198>
  80db14:	e0ffff17 	ldw	r3,-4(fp)
  80db18:	18801220 	cmpeqi	r2,r3,72
  80db1c:	1000081e 	bne	r2,zero,80db40 <lcd_handle_escape+0x1b4>
  80db20:	00004906 	br	80dc48 <lcd_handle_escape+0x2bc>
  80db24:	e0ffff17 	ldw	r3,-4(fp)
  80db28:	188012e0 	cmpeqi	r2,r3,75
  80db2c:	10002b1e 	bne	r2,zero,80dbdc <lcd_handle_escape+0x250>
  80db30:	e0ffff17 	ldw	r3,-4(fp)
  80db34:	188019a0 	cmpeqi	r2,r3,102
  80db38:	1000011e 	bne	r2,zero,80db40 <lcd_handle_escape+0x1b4>
  80db3c:	00004206 	br	80dc48 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80db40:	e0bffb17 	ldw	r2,-20(fp)
  80db44:	10800050 	cmplti	r2,r2,1
  80db48:	1000051e 	bne	r2,zero,80db60 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  80db4c:	e0bffb17 	ldw	r2,-20(fp)
  80db50:	10bfffc4 	addi	r2,r2,-1
  80db54:	1007883a 	mov	r3,r2
  80db58:	e0bffd17 	ldw	r2,-12(fp)
  80db5c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80db60:	e0bffc17 	ldw	r2,-16(fp)
  80db64:	10800050 	cmplti	r2,r2,1
  80db68:	1000371e 	bne	r2,zero,80dc48 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  80db6c:	e0bffc17 	ldw	r2,-16(fp)
  80db70:	10bfffc4 	addi	r2,r2,-1
  80db74:	1007883a 	mov	r3,r2
  80db78:	e0bffd17 	ldw	r2,-12(fp)
  80db7c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80db80:	e0bffd17 	ldw	r2,-12(fp)
  80db84:	10800883 	ldbu	r2,34(r2)
  80db88:	10803fcc 	andi	r2,r2,255
  80db8c:	10800170 	cmpltui	r2,r2,5
  80db90:	1000061e 	bne	r2,zero,80dbac <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  80db94:	e0fffd17 	ldw	r3,-12(fp)
  80db98:	00800104 	movi	r2,4
  80db9c:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  80dba0:	00000206 	br	80dbac <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  80dba4:	e13ffd17 	ldw	r4,-12(fp)
  80dba8:	080d8c40 	call	80d8c4 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80dbac:	e0bffd17 	ldw	r2,-12(fp)
  80dbb0:	10800883 	ldbu	r2,34(r2)
  80dbb4:	10803fcc 	andi	r2,r2,255
  80dbb8:	108000e8 	cmpgeui	r2,r2,3
  80dbbc:	103ff91e 	bne	r2,zero,80dba4 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  80dbc0:	00002106 	br	80dc48 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80dbc4:	e0bffc17 	ldw	r2,-16(fp)
  80dbc8:	10800098 	cmpnei	r2,r2,2
  80dbcc:	10001e1e 	bne	r2,zero,80dc48 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  80dbd0:	e13ffd17 	ldw	r4,-12(fp)
  80dbd4:	080d6140 	call	80d614 <lcd_clear_screen>
    break;
  80dbd8:	00001b06 	br	80dc48 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80dbdc:	e0bffc17 	ldw	r2,-16(fp)
  80dbe0:	10800048 	cmpgei	r2,r2,1
  80dbe4:	1000181e 	bne	r2,zero,80dc48 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80dbe8:	e0bffd17 	ldw	r2,-12(fp)
  80dbec:	10800843 	ldbu	r2,33(r2)
  80dbf0:	10803fcc 	andi	r2,r2,255
  80dbf4:	10801428 	cmpgeui	r2,r2,80
  80dbf8:	1000131e 	bne	r2,zero,80dc48 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80dbfc:	e0bffd17 	ldw	r2,-12(fp)
  80dc00:	10800883 	ldbu	r2,34(r2)
  80dc04:	10803fcc 	andi	r2,r2,255
  80dc08:	10801924 	muli	r2,r2,100
  80dc0c:	10c01004 	addi	r3,r2,64
  80dc10:	e0bffd17 	ldw	r2,-12(fp)
  80dc14:	1887883a 	add	r3,r3,r2
  80dc18:	e0bffd17 	ldw	r2,-12(fp)
  80dc1c:	10800843 	ldbu	r2,33(r2)
  80dc20:	10803fcc 	andi	r2,r2,255
  80dc24:	1889883a 	add	r4,r3,r2
  80dc28:	e0bffd17 	ldw	r2,-12(fp)
  80dc2c:	10800843 	ldbu	r2,33(r2)
  80dc30:	10c03fcc 	andi	r3,r2,255
  80dc34:	00801404 	movi	r2,80
  80dc38:	10c5c83a 	sub	r2,r2,r3
  80dc3c:	100d883a 	mov	r6,r2
  80dc40:	01400804 	movi	r5,32
  80dc44:	0802c880 	call	802c88 <memset>
    }
    break;
  }
}
  80dc48:	e037883a 	mov	sp,fp
  80dc4c:	dfc00117 	ldw	ra,4(sp)
  80dc50:	df000017 	ldw	fp,0(sp)
  80dc54:	dec00204 	addi	sp,sp,8
  80dc58:	f800283a 	ret

0080dc5c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80dc5c:	defff204 	addi	sp,sp,-56
  80dc60:	dfc00d15 	stw	ra,52(sp)
  80dc64:	df000c15 	stw	fp,48(sp)
  80dc68:	dc000b15 	stw	r16,44(sp)
  80dc6c:	df000b04 	addi	fp,sp,44
  80dc70:	e13ffc15 	stw	r4,-16(fp)
  80dc74:	e17ffd15 	stw	r5,-12(fp)
  80dc78:	e1bffe15 	stw	r6,-8(fp)
  80dc7c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80dc80:	e0bffe17 	ldw	r2,-8(fp)
  80dc84:	1007883a 	mov	r3,r2
  80dc88:	e0bffd17 	ldw	r2,-12(fp)
  80dc8c:	10c5883a 	add	r2,r2,r3
  80dc90:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80dc94:	e0fffc17 	ldw	r3,-16(fp)
  80dc98:	00800044 	movi	r2,1
  80dc9c:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  80dca0:	0000a206 	br	80df2c <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  80dca4:	e0bffd17 	ldw	r2,-12(fp)
  80dca8:	10800003 	ldbu	r2,0(r2)
  80dcac:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  80dcb0:	e0bffc17 	ldw	r2,-16(fp)
  80dcb4:	10800903 	ldbu	r2,36(r2)
  80dcb8:	10803fcc 	andi	r2,r2,255
  80dcbc:	1080201c 	xori	r2,r2,128
  80dcc0:	10bfe004 	addi	r2,r2,-128
  80dcc4:	1004803a 	cmplt	r2,r2,zero
  80dcc8:	10003b1e 	bne	r2,zero,80ddb8 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  80dccc:	e0bffc17 	ldw	r2,-16(fp)
  80dcd0:	10800903 	ldbu	r2,36(r2)
  80dcd4:	10803fcc 	andi	r2,r2,255
  80dcd8:	1080201c 	xori	r2,r2,128
  80dcdc:	10bfe004 	addi	r2,r2,-128
  80dce0:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80dce4:	e0bff717 	ldw	r2,-36(fp)
  80dce8:	1004c03a 	cmpne	r2,r2,zero
  80dcec:	1000031e 	bne	r2,zero,80dcfc <altera_avalon_lcd_16207_write+0xa0>
  80dcf0:	e0bff807 	ldb	r2,-32(fp)
  80dcf4:	108016d8 	cmpnei	r2,r2,91
  80dcf8:	1000111e 	bne	r2,zero,80dd40 <altera_avalon_lcd_16207_write+0xe4>
  80dcfc:	e0bff717 	ldw	r2,-36(fp)
  80dd00:	1005003a 	cmpeq	r2,r2,zero
  80dd04:	10001a1e 	bne	r2,zero,80dd70 <altera_avalon_lcd_16207_write+0x114>
  80dd08:	e0bff807 	ldb	r2,-32(fp)
  80dd0c:	1007883a 	mov	r3,r2
  80dd10:	00802074 	movhi	r2,129
  80dd14:	10882904 	addi	r2,r2,8356
  80dd18:	10800017 	ldw	r2,0(r2)
  80dd1c:	1885883a 	add	r2,r3,r2
  80dd20:	10800003 	ldbu	r2,0(r2)
  80dd24:	10803fcc 	andi	r2,r2,255
  80dd28:	1080010c 	andi	r2,r2,4
  80dd2c:	1004c03a 	cmpne	r2,r2,zero
  80dd30:	10000f1e 	bne	r2,zero,80dd70 <altera_avalon_lcd_16207_write+0x114>
  80dd34:	e0bff807 	ldb	r2,-32(fp)
  80dd38:	10800ee0 	cmpeqi	r2,r2,59
  80dd3c:	10000c1e 	bne	r2,zero,80dd70 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  80dd40:	e0fff717 	ldw	r3,-36(fp)
  80dd44:	e0bffc17 	ldw	r2,-16(fp)
  80dd48:	1885883a 	add	r2,r3,r2
  80dd4c:	10800a04 	addi	r2,r2,40
  80dd50:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80dd54:	e17ff807 	ldb	r5,-32(fp)
  80dd58:	e13ffc17 	ldw	r4,-16(fp)
  80dd5c:	080d98c0 	call	80d98c <lcd_handle_escape>

        sp->esccount = -1;
  80dd60:	e0fffc17 	ldw	r3,-16(fp)
  80dd64:	00bfffc4 	movi	r2,-1
  80dd68:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80dd6c:	00006c06 	br	80df20 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80dd70:	e0bffc17 	ldw	r2,-16(fp)
  80dd74:	10800903 	ldbu	r2,36(r2)
  80dd78:	10803fcc 	andi	r2,r2,255
  80dd7c:	108001e8 	cmpgeui	r2,r2,7
  80dd80:	1000671e 	bne	r2,zero,80df20 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  80dd84:	e0fff717 	ldw	r3,-36(fp)
  80dd88:	e0bffc17 	ldw	r2,-16(fp)
  80dd8c:	1885883a 	add	r2,r3,r2
  80dd90:	10c00a04 	addi	r3,r2,40
  80dd94:	e0bff803 	ldbu	r2,-32(fp)
  80dd98:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  80dd9c:	e0bffc17 	ldw	r2,-16(fp)
  80dda0:	10800903 	ldbu	r2,36(r2)
  80dda4:	10800044 	addi	r2,r2,1
  80dda8:	1007883a 	mov	r3,r2
  80ddac:	e0bffc17 	ldw	r2,-16(fp)
  80ddb0:	10c00905 	stb	r3,36(r2)
  80ddb4:	00005a06 	br	80df20 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  80ddb8:	e0bff807 	ldb	r2,-32(fp)
  80ddbc:	108006d8 	cmpnei	r2,r2,27
  80ddc0:	1000031e 	bne	r2,zero,80ddd0 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  80ddc4:	e0bffc17 	ldw	r2,-16(fp)
  80ddc8:	10000905 	stb	zero,36(r2)
  80ddcc:	00005406 	br	80df20 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  80ddd0:	e0bff807 	ldb	r2,-32(fp)
  80ddd4:	10800358 	cmpnei	r2,r2,13
  80ddd8:	1000031e 	bne	r2,zero,80dde8 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  80dddc:	e0bffc17 	ldw	r2,-16(fp)
  80dde0:	10000845 	stb	zero,33(r2)
  80dde4:	00004e06 	br	80df20 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  80dde8:	e0bff807 	ldb	r2,-32(fp)
  80ddec:	10800298 	cmpnei	r2,r2,10
  80ddf0:	1000101e 	bne	r2,zero,80de34 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  80ddf4:	e0bffc17 	ldw	r2,-16(fp)
  80ddf8:	10000845 	stb	zero,33(r2)
      sp->y++;
  80ddfc:	e0bffc17 	ldw	r2,-16(fp)
  80de00:	10800883 	ldbu	r2,34(r2)
  80de04:	10800044 	addi	r2,r2,1
  80de08:	1007883a 	mov	r3,r2
  80de0c:	e0bffc17 	ldw	r2,-16(fp)
  80de10:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80de14:	e0bffc17 	ldw	r2,-16(fp)
  80de18:	10800883 	ldbu	r2,34(r2)
  80de1c:	10803fcc 	andi	r2,r2,255
  80de20:	108000f0 	cmpltui	r2,r2,3
  80de24:	10003e1e 	bne	r2,zero,80df20 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  80de28:	e13ffc17 	ldw	r4,-16(fp)
  80de2c:	080d8c40 	call	80d8c4 <lcd_scroll_up>
  80de30:	00003b06 	br	80df20 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  80de34:	e0bff807 	ldb	r2,-32(fp)
  80de38:	10800218 	cmpnei	r2,r2,8
  80de3c:	10000c1e 	bne	r2,zero,80de70 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  80de40:	e0bffc17 	ldw	r2,-16(fp)
  80de44:	10800843 	ldbu	r2,33(r2)
  80de48:	10803fcc 	andi	r2,r2,255
  80de4c:	1005003a 	cmpeq	r2,r2,zero
  80de50:	1000331e 	bne	r2,zero,80df20 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  80de54:	e0bffc17 	ldw	r2,-16(fp)
  80de58:	10800843 	ldbu	r2,33(r2)
  80de5c:	10bfffc4 	addi	r2,r2,-1
  80de60:	1007883a 	mov	r3,r2
  80de64:	e0bffc17 	ldw	r2,-16(fp)
  80de68:	10c00845 	stb	r3,33(r2)
  80de6c:	00002c06 	br	80df20 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  80de70:	e0bff807 	ldb	r2,-32(fp)
  80de74:	1007883a 	mov	r3,r2
  80de78:	00802074 	movhi	r2,129
  80de7c:	10882904 	addi	r2,r2,8356
  80de80:	10800017 	ldw	r2,0(r2)
  80de84:	1885883a 	add	r2,r3,r2
  80de88:	10800003 	ldbu	r2,0(r2)
  80de8c:	10803fcc 	andi	r2,r2,255
  80de90:	1080201c 	xori	r2,r2,128
  80de94:	10bfe004 	addi	r2,r2,-128
  80de98:	108025cc 	andi	r2,r2,151
  80de9c:	1005003a 	cmpeq	r2,r2,zero
  80dea0:	10001f1e 	bne	r2,zero,80df20 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80dea4:	e0bffc17 	ldw	r2,-16(fp)
  80dea8:	10800883 	ldbu	r2,34(r2)
  80deac:	10803fcc 	andi	r2,r2,255
  80deb0:	108000b0 	cmpltui	r2,r2,2
  80deb4:	1000021e 	bne	r2,zero,80dec0 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  80deb8:	e13ffc17 	ldw	r4,-16(fp)
  80debc:	080d8c40 	call	80d8c4 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80dec0:	e0bffc17 	ldw	r2,-16(fp)
  80dec4:	10800843 	ldbu	r2,33(r2)
  80dec8:	10803fcc 	andi	r2,r2,255
  80decc:	10801428 	cmpgeui	r2,r2,80
  80ded0:	10000d1e 	bne	r2,zero,80df08 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  80ded4:	e0bffc17 	ldw	r2,-16(fp)
  80ded8:	10800883 	ldbu	r2,34(r2)
  80dedc:	11003fcc 	andi	r4,r2,255
  80dee0:	e0bffc17 	ldw	r2,-16(fp)
  80dee4:	10800843 	ldbu	r2,33(r2)
  80dee8:	11403fcc 	andi	r5,r2,255
  80deec:	e0fffc17 	ldw	r3,-16(fp)
  80def0:	20801924 	muli	r2,r4,100
  80def4:	10c5883a 	add	r2,r2,r3
  80def8:	1145883a 	add	r2,r2,r5
  80defc:	10c01004 	addi	r3,r2,64
  80df00:	e0bff803 	ldbu	r2,-32(fp)
  80df04:	18800005 	stb	r2,0(r3)

      sp->x++;
  80df08:	e0bffc17 	ldw	r2,-16(fp)
  80df0c:	10800843 	ldbu	r2,33(r2)
  80df10:	10800044 	addi	r2,r2,1
  80df14:	1007883a 	mov	r3,r2
  80df18:	e0bffc17 	ldw	r2,-16(fp)
  80df1c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80df20:	e0bffd17 	ldw	r2,-12(fp)
  80df24:	10800044 	addi	r2,r2,1
  80df28:	e0bffd15 	stw	r2,-12(fp)
  80df2c:	e0fffd17 	ldw	r3,-12(fp)
  80df30:	e0bffb17 	ldw	r2,-20(fp)
  80df34:	18bf5b36 	bltu	r3,r2,80dca4 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80df38:	00800404 	movi	r2,16
  80df3c:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80df40:	e03ffa15 	stw	zero,-24(fp)
  80df44:	00003606 	br	80e020 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80df48:	00801404 	movi	r2,80
  80df4c:	e0bff615 	stw	r2,-40(fp)
  80df50:	00001106 	br	80df98 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  80df54:	e13ffa17 	ldw	r4,-24(fp)
  80df58:	e0bff617 	ldw	r2,-40(fp)
  80df5c:	117fffc4 	addi	r5,r2,-1
  80df60:	e0fffc17 	ldw	r3,-16(fp)
  80df64:	20801924 	muli	r2,r4,100
  80df68:	10c5883a 	add	r2,r2,r3
  80df6c:	1145883a 	add	r2,r2,r5
  80df70:	10801004 	addi	r2,r2,64
  80df74:	10800003 	ldbu	r2,0(r2)
  80df78:	10803fcc 	andi	r2,r2,255
  80df7c:	1080201c 	xori	r2,r2,128
  80df80:	10bfe004 	addi	r2,r2,-128
  80df84:	10800818 	cmpnei	r2,r2,32
  80df88:	1000061e 	bne	r2,zero,80dfa4 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80df8c:	e0bff617 	ldw	r2,-40(fp)
  80df90:	10bfffc4 	addi	r2,r2,-1
  80df94:	e0bff615 	stw	r2,-40(fp)
  80df98:	e0bff617 	ldw	r2,-40(fp)
  80df9c:	10800048 	cmpgei	r2,r2,1
  80dfa0:	103fec1e 	bne	r2,zero,80df54 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80dfa4:	e0bff617 	ldw	r2,-40(fp)
  80dfa8:	10800448 	cmpgei	r2,r2,17
  80dfac:	1000031e 	bne	r2,zero,80dfbc <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  80dfb0:	00800404 	movi	r2,16
  80dfb4:	e0bff615 	stw	r2,-40(fp)
  80dfb8:	00000306 	br	80dfc8 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  80dfbc:	e0bff617 	ldw	r2,-40(fp)
  80dfc0:	10800044 	addi	r2,r2,1
  80dfc4:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  80dfc8:	e13ffa17 	ldw	r4,-24(fp)
  80dfcc:	e0bff617 	ldw	r2,-40(fp)
  80dfd0:	100b883a 	mov	r5,r2
  80dfd4:	e0fffc17 	ldw	r3,-16(fp)
  80dfd8:	20801924 	muli	r2,r4,100
  80dfdc:	10c5883a 	add	r2,r2,r3
  80dfe0:	10802404 	addi	r2,r2,144
  80dfe4:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  80dfe8:	e0fff917 	ldw	r3,-28(fp)
  80dfec:	e0bff617 	ldw	r2,-40(fp)
  80dff0:	1880020e 	bge	r3,r2,80dffc <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  80dff4:	e0bff617 	ldw	r2,-40(fp)
  80dff8:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80dffc:	e0bffa17 	ldw	r2,-24(fp)
  80e000:	e0fffc17 	ldw	r3,-16(fp)
  80e004:	10801924 	muli	r2,r2,100
  80e008:	10c5883a 	add	r2,r2,r3
  80e00c:	10802404 	addi	r2,r2,144
  80e010:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e014:	e0bffa17 	ldw	r2,-24(fp)
  80e018:	10800044 	addi	r2,r2,1
  80e01c:	e0bffa15 	stw	r2,-24(fp)
  80e020:	e0bffa17 	ldw	r2,-24(fp)
  80e024:	10800090 	cmplti	r2,r2,2
  80e028:	103fc71e 	bne	r2,zero,80df48 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80e02c:	e0bff917 	ldw	r2,-28(fp)
  80e030:	10800448 	cmpgei	r2,r2,17
  80e034:	1000031e 	bne	r2,zero,80e044 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  80e038:	e0bffc17 	ldw	r2,-16(fp)
  80e03c:	10000985 	stb	zero,38(r2)
  80e040:	00002d06 	br	80e0f8 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  80e044:	e0bff917 	ldw	r2,-28(fp)
  80e048:	1085883a 	add	r2,r2,r2
  80e04c:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  80e050:	e0bff917 	ldw	r2,-28(fp)
  80e054:	1007883a 	mov	r3,r2
  80e058:	e0bffc17 	ldw	r2,-16(fp)
  80e05c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e060:	e03ffa15 	stw	zero,-24(fp)
  80e064:	00002106 	br	80e0ec <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80e068:	e0bffa17 	ldw	r2,-24(fp)
  80e06c:	e0fffc17 	ldw	r3,-16(fp)
  80e070:	10801924 	muli	r2,r2,100
  80e074:	10c5883a 	add	r2,r2,r3
  80e078:	10802404 	addi	r2,r2,144
  80e07c:	10800043 	ldbu	r2,1(r2)
  80e080:	10803fcc 	andi	r2,r2,255
  80e084:	1080201c 	xori	r2,r2,128
  80e088:	10bfe004 	addi	r2,r2,-128
  80e08c:	10800450 	cmplti	r2,r2,17
  80e090:	1000131e 	bne	r2,zero,80e0e0 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80e094:	e43ffa17 	ldw	r16,-24(fp)
  80e098:	e0bffa17 	ldw	r2,-24(fp)
  80e09c:	e0fffc17 	ldw	r3,-16(fp)
  80e0a0:	10801924 	muli	r2,r2,100
  80e0a4:	10c5883a 	add	r2,r2,r3
  80e0a8:	10802404 	addi	r2,r2,144
  80e0ac:	10800043 	ldbu	r2,1(r2)
  80e0b0:	10803fcc 	andi	r2,r2,255
  80e0b4:	1080201c 	xori	r2,r2,128
  80e0b8:	10bfe004 	addi	r2,r2,-128
  80e0bc:	1008923a 	slli	r4,r2,8
  80e0c0:	e17ff917 	ldw	r5,-28(fp)
  80e0c4:	0800eb00 	call	800eb0 <__divsi3>
  80e0c8:	1009883a 	mov	r4,r2
  80e0cc:	e0fffc17 	ldw	r3,-16(fp)
  80e0d0:	80801924 	muli	r2,r16,100
  80e0d4:	10c5883a 	add	r2,r2,r3
  80e0d8:	10802404 	addi	r2,r2,144
  80e0dc:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e0e0:	e0bffa17 	ldw	r2,-24(fp)
  80e0e4:	10800044 	addi	r2,r2,1
  80e0e8:	e0bffa15 	stw	r2,-24(fp)
  80e0ec:	e0bffa17 	ldw	r2,-24(fp)
  80e0f0:	10800090 	cmplti	r2,r2,2
  80e0f4:	103fdc1e 	bne	r2,zero,80e068 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80e0f8:	e0bffc17 	ldw	r2,-16(fp)
  80e0fc:	10800943 	ldbu	r2,37(r2)
  80e100:	10803fcc 	andi	r2,r2,255
  80e104:	1080201c 	xori	r2,r2,128
  80e108:	10bfe004 	addi	r2,r2,-128
  80e10c:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  80e110:	e13ffc17 	ldw	r4,-16(fp)
  80e114:	080d6d80 	call	80d6d8 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80e118:	e0bffc17 	ldw	r2,-16(fp)
  80e11c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80e120:	e0bffc17 	ldw	r2,-16(fp)
  80e124:	10800943 	ldbu	r2,37(r2)
  80e128:	10c03fcc 	andi	r3,r2,255
  80e12c:	18c0201c 	xori	r3,r3,128
  80e130:	18ffe004 	addi	r3,r3,-128
  80e134:	e0bff517 	ldw	r2,-44(fp)
  80e138:	18800426 	beq	r3,r2,80e14c <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80e13c:	e0fffc17 	ldw	r3,-16(fp)
  80e140:	00800044 	movi	r2,1
  80e144:	188009c5 	stb	r2,39(r3)
  }
  80e148:	003feb06 	br	80e0f8 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80e14c:	e0bffe17 	ldw	r2,-8(fp)
}
  80e150:	e037883a 	mov	sp,fp
  80e154:	dfc00217 	ldw	ra,8(sp)
  80e158:	df000117 	ldw	fp,4(sp)
  80e15c:	dc000017 	ldw	r16,0(sp)
  80e160:	dec00304 	addi	sp,sp,12
  80e164:	f800283a 	ret

0080e168 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80e168:	defffc04 	addi	sp,sp,-16
  80e16c:	dfc00315 	stw	ra,12(sp)
  80e170:	df000215 	stw	fp,8(sp)
  80e174:	df000204 	addi	fp,sp,8
  80e178:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80e17c:	e0bfff17 	ldw	r2,-4(fp)
  80e180:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80e184:	e0bffe17 	ldw	r2,-8(fp)
  80e188:	10800943 	ldbu	r2,37(r2)
  80e18c:	10803fcc 	andi	r2,r2,255
  80e190:	1080201c 	xori	r2,r2,128
  80e194:	10bfe004 	addi	r2,r2,-128
  80e198:	10c00044 	addi	r3,r2,1
  80e19c:	e0bffe17 	ldw	r2,-8(fp)
  80e1a0:	10800983 	ldbu	r2,38(r2)
  80e1a4:	10803fcc 	andi	r2,r2,255
  80e1a8:	1080201c 	xori	r2,r2,128
  80e1ac:	10bfe004 	addi	r2,r2,-128
  80e1b0:	18800316 	blt	r3,r2,80e1c0 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  80e1b4:	e0bffe17 	ldw	r2,-8(fp)
  80e1b8:	10000945 	stb	zero,37(r2)
  80e1bc:	00000606 	br	80e1d8 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80e1c0:	e0bffe17 	ldw	r2,-8(fp)
  80e1c4:	10800943 	ldbu	r2,37(r2)
  80e1c8:	10800044 	addi	r2,r2,1
  80e1cc:	1007883a 	mov	r3,r2
  80e1d0:	e0bffe17 	ldw	r2,-8(fp)
  80e1d4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80e1d8:	e0bffe17 	ldw	r2,-8(fp)
  80e1dc:	10800983 	ldbu	r2,38(r2)
  80e1e0:	10803fcc 	andi	r2,r2,255
  80e1e4:	1080201c 	xori	r2,r2,128
  80e1e8:	10bfe004 	addi	r2,r2,-128
  80e1ec:	10800050 	cmplti	r2,r2,1
  80e1f0:	1000091e 	bne	r2,zero,80e218 <alt_lcd_16207_timeout+0xb0>
  80e1f4:	e0bffe17 	ldw	r2,-8(fp)
  80e1f8:	108009c3 	ldbu	r2,39(r2)
  80e1fc:	10803fcc 	andi	r2,r2,255
  80e200:	1080201c 	xori	r2,r2,128
  80e204:	10bfe004 	addi	r2,r2,-128
  80e208:	1004c03a 	cmpne	r2,r2,zero
  80e20c:	1000021e 	bne	r2,zero,80e218 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  80e210:	e13ffe17 	ldw	r4,-8(fp)
  80e214:	080d6d80 	call	80d6d8 <lcd_repaint_screen>

  return sp->period;
  80e218:	e0bffe17 	ldw	r2,-8(fp)
  80e21c:	10800717 	ldw	r2,28(r2)
}
  80e220:	e037883a 	mov	sp,fp
  80e224:	dfc00117 	ldw	ra,4(sp)
  80e228:	df000017 	ldw	fp,0(sp)
  80e22c:	dec00204 	addi	sp,sp,8
  80e230:	f800283a 	ret

0080e234 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80e234:	defffc04 	addi	sp,sp,-16
  80e238:	dfc00315 	stw	ra,12(sp)
  80e23c:	df000215 	stw	fp,8(sp)
  80e240:	df000204 	addi	fp,sp,8
  80e244:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80e248:	e0bfff17 	ldw	r2,-4(fp)
  80e24c:	10800017 	ldw	r2,0(r2)
  80e250:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80e254:	e0bfff17 	ldw	r2,-4(fp)
  80e258:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80e25c:	010ea604 	movi	r4,15000
  80e260:	080f73c0 	call	80f73c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e264:	e0bffe17 	ldw	r2,-8(fp)
  80e268:	1007883a 	mov	r3,r2
  80e26c:	00800c04 	movi	r2,48
  80e270:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80e274:	01040104 	movi	r4,4100
  80e278:	080f73c0 	call	80f73c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e27c:	e0bffe17 	ldw	r2,-8(fp)
  80e280:	1007883a 	mov	r3,r2
  80e284:	00800c04 	movi	r2,48
  80e288:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80e28c:	0100fa04 	movi	r4,1000
  80e290:	080f73c0 	call	80f73c <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e294:	e0bffe17 	ldw	r2,-8(fp)
  80e298:	1007883a 	mov	r3,r2
  80e29c:	00800c04 	movi	r2,48
  80e2a0:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80e2a4:	e13fff17 	ldw	r4,-4(fp)
  80e2a8:	01400e04 	movi	r5,56
  80e2ac:	080d4880 	call	80d488 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80e2b0:	e13fff17 	ldw	r4,-4(fp)
  80e2b4:	01400204 	movi	r5,8
  80e2b8:	080d4880 	call	80d488 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80e2bc:	e13fff17 	ldw	r4,-4(fp)
  80e2c0:	080d6140 	call	80d614 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80e2c4:	e13fff17 	ldw	r4,-4(fp)
  80e2c8:	01400184 	movi	r5,6
  80e2cc:	080d4880 	call	80d488 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80e2d0:	e13fff17 	ldw	r4,-4(fp)
  80e2d4:	01400304 	movi	r5,12
  80e2d8:	080d4880 	call	80d488 <lcd_write_command>

  sp->esccount = -1;
  80e2dc:	e0ffff17 	ldw	r3,-4(fp)
  80e2e0:	00bfffc4 	movi	r2,-1
  80e2e4:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  80e2e8:	e0bfff17 	ldw	r2,-4(fp)
  80e2ec:	11000a04 	addi	r4,r2,40
  80e2f0:	000b883a 	mov	r5,zero
  80e2f4:	01800204 	movi	r6,8
  80e2f8:	0802c880 	call	802c88 <memset>

  sp->scrollpos = 0;
  80e2fc:	e0bfff17 	ldw	r2,-4(fp)
  80e300:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80e304:	e0bfff17 	ldw	r2,-4(fp)
  80e308:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80e30c:	e0bfff17 	ldw	r2,-4(fp)
  80e310:	100009c5 	stb	zero,39(r2)
  80e314:	00802074 	movhi	r2,129
  80e318:	108f7104 	addi	r2,r2,15812
  80e31c:	10800017 	ldw	r2,0(r2)
  80e320:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80e324:	01400284 	movi	r5,10
  80e328:	0800f700 	call	800f70 <__udivsi3>
  80e32c:	1007883a 	mov	r3,r2
  80e330:	e0bfff17 	ldw	r2,-4(fp)
  80e334:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80e338:	e0bfff17 	ldw	r2,-4(fp)
  80e33c:	11000104 	addi	r4,r2,4
  80e340:	e0bfff17 	ldw	r2,-4(fp)
  80e344:	10800717 	ldw	r2,28(r2)
  80e348:	100b883a 	mov	r5,r2
  80e34c:	01802074 	movhi	r6,129
  80e350:	31b85a04 	addi	r6,r6,-7832
  80e354:	e1ffff17 	ldw	r7,-4(fp)
  80e358:	080b6800 	call	80b680 <alt_alarm_start>
}
  80e35c:	e037883a 	mov	sp,fp
  80e360:	dfc00117 	ldw	ra,4(sp)
  80e364:	df000017 	ldw	fp,0(sp)
  80e368:	dec00204 	addi	sp,sp,8
  80e36c:	f800283a 	ret

0080e370 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e370:	defffa04 	addi	sp,sp,-24
  80e374:	dfc00515 	stw	ra,20(sp)
  80e378:	df000415 	stw	fp,16(sp)
  80e37c:	df000404 	addi	fp,sp,16
  80e380:	e13ffd15 	stw	r4,-12(fp)
  80e384:	e17ffe15 	stw	r5,-8(fp)
  80e388:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80e38c:	e0bffd17 	ldw	r2,-12(fp)
  80e390:	10800017 	ldw	r2,0(r2)
  80e394:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80e398:	e0bffc17 	ldw	r2,-16(fp)
  80e39c:	11000a04 	addi	r4,r2,40
  80e3a0:	e0bffd17 	ldw	r2,-12(fp)
  80e3a4:	11c00217 	ldw	r7,8(r2)
  80e3a8:	e17ffe17 	ldw	r5,-8(fp)
  80e3ac:	e1bfff17 	ldw	r6,-4(fp)
  80e3b0:	080dc5c0 	call	80dc5c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80e3b4:	e037883a 	mov	sp,fp
  80e3b8:	dfc00117 	ldw	ra,4(sp)
  80e3bc:	df000017 	ldw	fp,0(sp)
  80e3c0:	dec00204 	addi	sp,sp,8
  80e3c4:	f800283a 	ret

0080e3c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80e3c8:	defffa04 	addi	sp,sp,-24
  80e3cc:	dfc00515 	stw	ra,20(sp)
  80e3d0:	df000415 	stw	fp,16(sp)
  80e3d4:	df000404 	addi	fp,sp,16
  80e3d8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80e3dc:	e0bfff17 	ldw	r2,-4(fp)
  80e3e0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80e3e4:	e0bfff17 	ldw	r2,-4(fp)
  80e3e8:	10800104 	addi	r2,r2,4
  80e3ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e3f0:	0005303a 	rdctl	r2,status
  80e3f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3f8:	e0fffd17 	ldw	r3,-12(fp)
  80e3fc:	00bfff84 	movi	r2,-2
  80e400:	1884703a 	and	r2,r3,r2
  80e404:	1001703a 	wrctl	status,r2
  
  return context;
  80e408:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80e40c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80e410:	080c6500 	call	80c650 <alt_tick>
  80e414:	e0bffe17 	ldw	r2,-8(fp)
  80e418:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e41c:	e0bffc17 	ldw	r2,-16(fp)
  80e420:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80e424:	e037883a 	mov	sp,fp
  80e428:	dfc00117 	ldw	ra,4(sp)
  80e42c:	df000017 	ldw	fp,0(sp)
  80e430:	dec00204 	addi	sp,sp,8
  80e434:	f800283a 	ret

0080e438 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80e438:	defff804 	addi	sp,sp,-32
  80e43c:	dfc00715 	stw	ra,28(sp)
  80e440:	df000615 	stw	fp,24(sp)
  80e444:	df000604 	addi	fp,sp,24
  80e448:	e13ffc15 	stw	r4,-16(fp)
  80e44c:	e17ffd15 	stw	r5,-12(fp)
  80e450:	e1bffe15 	stw	r6,-8(fp)
  80e454:	e1ffff15 	stw	r7,-4(fp)
  80e458:	e0bfff17 	ldw	r2,-4(fp)
  80e45c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80e460:	00802074 	movhi	r2,129
  80e464:	108f7104 	addi	r2,r2,15812
  80e468:	10800017 	ldw	r2,0(r2)
  80e46c:	1004c03a 	cmpne	r2,r2,zero
  80e470:	1000041e 	bne	r2,zero,80e484 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80e474:	00c02074 	movhi	r3,129
  80e478:	18cf7104 	addi	r3,r3,15812
  80e47c:	e0bffb17 	ldw	r2,-20(fp)
  80e480:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80e484:	e0bffc17 	ldw	r2,-16(fp)
  80e488:	10800104 	addi	r2,r2,4
  80e48c:	1007883a 	mov	r3,r2
  80e490:	008001c4 	movi	r2,7
  80e494:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80e498:	d8000015 	stw	zero,0(sp)
  80e49c:	e13ffd17 	ldw	r4,-12(fp)
  80e4a0:	e17ffe17 	ldw	r5,-8(fp)
  80e4a4:	01802074 	movhi	r6,129
  80e4a8:	31b8f204 	addi	r6,r6,-7224
  80e4ac:	e1fffc17 	ldw	r7,-16(fp)
  80e4b0:	080f3340 	call	80f334 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80e4b4:	e037883a 	mov	sp,fp
  80e4b8:	dfc00117 	ldw	ra,4(sp)
  80e4bc:	df000017 	ldw	fp,0(sp)
  80e4c0:	dec00204 	addi	sp,sp,8
  80e4c4:	f800283a 	ret

0080e4c8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e4c8:	defffa04 	addi	sp,sp,-24
  80e4cc:	dfc00515 	stw	ra,20(sp)
  80e4d0:	df000415 	stw	fp,16(sp)
  80e4d4:	df000404 	addi	fp,sp,16
  80e4d8:	e13ffd15 	stw	r4,-12(fp)
  80e4dc:	e17ffe15 	stw	r5,-8(fp)
  80e4e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80e4e4:	e0bffd17 	ldw	r2,-12(fp)
  80e4e8:	10800017 	ldw	r2,0(r2)
  80e4ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80e4f0:	e0bffc17 	ldw	r2,-16(fp)
  80e4f4:	11000a04 	addi	r4,r2,40
  80e4f8:	e0bffd17 	ldw	r2,-12(fp)
  80e4fc:	11c00217 	ldw	r7,8(r2)
  80e500:	e17ffe17 	ldw	r5,-8(fp)
  80e504:	e1bfff17 	ldw	r6,-4(fp)
  80e508:	080e9c00 	call	80e9c0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80e50c:	e037883a 	mov	sp,fp
  80e510:	dfc00117 	ldw	ra,4(sp)
  80e514:	df000017 	ldw	fp,0(sp)
  80e518:	dec00204 	addi	sp,sp,8
  80e51c:	f800283a 	ret

0080e520 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e520:	defffa04 	addi	sp,sp,-24
  80e524:	dfc00515 	stw	ra,20(sp)
  80e528:	df000415 	stw	fp,16(sp)
  80e52c:	df000404 	addi	fp,sp,16
  80e530:	e13ffd15 	stw	r4,-12(fp)
  80e534:	e17ffe15 	stw	r5,-8(fp)
  80e538:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80e53c:	e0bffd17 	ldw	r2,-12(fp)
  80e540:	10800017 	ldw	r2,0(r2)
  80e544:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80e548:	e0bffc17 	ldw	r2,-16(fp)
  80e54c:	11000a04 	addi	r4,r2,40
  80e550:	e0bffd17 	ldw	r2,-12(fp)
  80e554:	11c00217 	ldw	r7,8(r2)
  80e558:	e17ffe17 	ldw	r5,-8(fp)
  80e55c:	e1bfff17 	ldw	r6,-4(fp)
  80e560:	080ec500 	call	80ec50 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80e564:	e037883a 	mov	sp,fp
  80e568:	dfc00117 	ldw	ra,4(sp)
  80e56c:	df000017 	ldw	fp,0(sp)
  80e570:	dec00204 	addi	sp,sp,8
  80e574:	f800283a 	ret

0080e578 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80e578:	defffc04 	addi	sp,sp,-16
  80e57c:	dfc00315 	stw	ra,12(sp)
  80e580:	df000215 	stw	fp,8(sp)
  80e584:	df000204 	addi	fp,sp,8
  80e588:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80e58c:	e0bfff17 	ldw	r2,-4(fp)
  80e590:	10800017 	ldw	r2,0(r2)
  80e594:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80e598:	e0bffe17 	ldw	r2,-8(fp)
  80e59c:	11000a04 	addi	r4,r2,40
  80e5a0:	e0bfff17 	ldw	r2,-4(fp)
  80e5a4:	11400217 	ldw	r5,8(r2)
  80e5a8:	080e9600 	call	80e960 <altera_avalon_uart_close>
}
  80e5ac:	e037883a 	mov	sp,fp
  80e5b0:	dfc00117 	ldw	ra,4(sp)
  80e5b4:	df000017 	ldw	fp,0(sp)
  80e5b8:	dec00204 	addi	sp,sp,8
  80e5bc:	f800283a 	ret

0080e5c0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80e5c0:	defff704 	addi	sp,sp,-36
  80e5c4:	dfc00815 	stw	ra,32(sp)
  80e5c8:	df000715 	stw	fp,28(sp)
  80e5cc:	df000704 	addi	fp,sp,28
  80e5d0:	e13ffc15 	stw	r4,-16(fp)
  80e5d4:	e17ffd15 	stw	r5,-12(fp)
  80e5d8:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80e5dc:	e0bffc17 	ldw	r2,-16(fp)
  80e5e0:	10800017 	ldw	r2,0(r2)
  80e5e4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80e5e8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80e5ec:	1004c03a 	cmpne	r2,r2,zero
  80e5f0:	1000061e 	bne	r2,zero,80e60c <altera_avalon_uart_init+0x4c>
  80e5f4:	0005883a 	mov	r2,zero
  80e5f8:	1004c03a 	cmpne	r2,r2,zero
  80e5fc:	1000031e 	bne	r2,zero,80e60c <altera_avalon_uart_init+0x4c>
  80e600:	0005883a 	mov	r2,zero
  80e604:	1005003a 	cmpeq	r2,r2,zero
  80e608:	1000031e 	bne	r2,zero,80e618 <altera_avalon_uart_init+0x58>
  80e60c:	00800044 	movi	r2,1
  80e610:	e0bfff15 	stw	r2,-4(fp)
  80e614:	00000106 	br	80e61c <altera_avalon_uart_init+0x5c>
  80e618:	e03fff15 	stw	zero,-4(fp)
  80e61c:	e0bfff17 	ldw	r2,-4(fp)
  80e620:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80e624:	e0bffa17 	ldw	r2,-24(fp)
  80e628:	1004c03a 	cmpne	r2,r2,zero
  80e62c:	1000111e 	bne	r2,zero,80e674 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80e630:	e0fffc17 	ldw	r3,-16(fp)
  80e634:	00832004 	movi	r2,3200
  80e638:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80e63c:	e0bffb17 	ldw	r2,-20(fp)
  80e640:	11000304 	addi	r4,r2,12
  80e644:	e0bffc17 	ldw	r2,-16(fp)
  80e648:	10800117 	ldw	r2,4(r2)
  80e64c:	1007883a 	mov	r3,r2
  80e650:	2005883a 	mov	r2,r4
  80e654:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80e658:	d8000015 	stw	zero,0(sp)
  80e65c:	e13ffd17 	ldw	r4,-12(fp)
  80e660:	e17ffe17 	ldw	r5,-8(fp)
  80e664:	01802074 	movhi	r6,129
  80e668:	31b9a204 	addi	r6,r6,-6520
  80e66c:	e1fffc17 	ldw	r7,-16(fp)
  80e670:	080f3340 	call	80f334 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80e674:	e037883a 	mov	sp,fp
  80e678:	dfc00117 	ldw	ra,4(sp)
  80e67c:	df000017 	ldw	fp,0(sp)
  80e680:	dec00204 	addi	sp,sp,8
  80e684:	f800283a 	ret

0080e688 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80e688:	defffa04 	addi	sp,sp,-24
  80e68c:	dfc00515 	stw	ra,20(sp)
  80e690:	df000415 	stw	fp,16(sp)
  80e694:	df000404 	addi	fp,sp,16
  80e698:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80e69c:	e0bfff17 	ldw	r2,-4(fp)
  80e6a0:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80e6a4:	e0bffd17 	ldw	r2,-12(fp)
  80e6a8:	10800017 	ldw	r2,0(r2)
  80e6ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80e6b0:	e0bffc17 	ldw	r2,-16(fp)
  80e6b4:	10800204 	addi	r2,r2,8
  80e6b8:	10800037 	ldwio	r2,0(r2)
  80e6bc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80e6c0:	e0bffc17 	ldw	r2,-16(fp)
  80e6c4:	10800204 	addi	r2,r2,8
  80e6c8:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80e6cc:	e0bffc17 	ldw	r2,-16(fp)
  80e6d0:	10800204 	addi	r2,r2,8
  80e6d4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80e6d8:	e0bffe17 	ldw	r2,-8(fp)
  80e6dc:	1080200c 	andi	r2,r2,128
  80e6e0:	1005003a 	cmpeq	r2,r2,zero
  80e6e4:	1000031e 	bne	r2,zero,80e6f4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80e6e8:	e13ffd17 	ldw	r4,-12(fp)
  80e6ec:	e17ffe17 	ldw	r5,-8(fp)
  80e6f0:	080e7240 	call	80e724 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80e6f4:	e0bffe17 	ldw	r2,-8(fp)
  80e6f8:	1081100c 	andi	r2,r2,1088
  80e6fc:	1005003a 	cmpeq	r2,r2,zero
  80e700:	1000031e 	bne	r2,zero,80e710 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80e704:	e13ffd17 	ldw	r4,-12(fp)
  80e708:	e17ffe17 	ldw	r5,-8(fp)
  80e70c:	080e8040 	call	80e804 <altera_avalon_uart_txirq>
  }
  

}
  80e710:	e037883a 	mov	sp,fp
  80e714:	dfc00117 	ldw	ra,4(sp)
  80e718:	df000017 	ldw	fp,0(sp)
  80e71c:	dec00204 	addi	sp,sp,8
  80e720:	f800283a 	ret

0080e724 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80e724:	defffc04 	addi	sp,sp,-16
  80e728:	df000315 	stw	fp,12(sp)
  80e72c:	df000304 	addi	fp,sp,12
  80e730:	e13ffe15 	stw	r4,-8(fp)
  80e734:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80e738:	e0bfff17 	ldw	r2,-4(fp)
  80e73c:	108000cc 	andi	r2,r2,3
  80e740:	1004c03a 	cmpne	r2,r2,zero
  80e744:	10002b1e 	bne	r2,zero,80e7f4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80e748:	e0bffe17 	ldw	r2,-8(fp)
  80e74c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e750:	e0bffe17 	ldw	r2,-8(fp)
  80e754:	10800317 	ldw	r2,12(r2)
  80e758:	10800044 	addi	r2,r2,1
  80e75c:	10800fcc 	andi	r2,r2,63
  80e760:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80e764:	e0bffe17 	ldw	r2,-8(fp)
  80e768:	11000317 	ldw	r4,12(r2)
  80e76c:	e0bffe17 	ldw	r2,-8(fp)
  80e770:	10800017 	ldw	r2,0(r2)
  80e774:	10800037 	ldwio	r2,0(r2)
  80e778:	1007883a 	mov	r3,r2
  80e77c:	e0bffe17 	ldw	r2,-8(fp)
  80e780:	2085883a 	add	r2,r4,r2
  80e784:	10800704 	addi	r2,r2,28
  80e788:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  80e78c:	e0fffe17 	ldw	r3,-8(fp)
  80e790:	e0bffd17 	ldw	r2,-12(fp)
  80e794:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80e798:	e0bffe17 	ldw	r2,-8(fp)
  80e79c:	10800317 	ldw	r2,12(r2)
  80e7a0:	10800044 	addi	r2,r2,1
  80e7a4:	10800fcc 	andi	r2,r2,63
  80e7a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80e7ac:	e0bffe17 	ldw	r2,-8(fp)
  80e7b0:	10c00217 	ldw	r3,8(r2)
  80e7b4:	e0bffd17 	ldw	r2,-12(fp)
  80e7b8:	18800e1e 	bne	r3,r2,80e7f4 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80e7bc:	e0bffe17 	ldw	r2,-8(fp)
  80e7c0:	10c00117 	ldw	r3,4(r2)
  80e7c4:	00bfdfc4 	movi	r2,-129
  80e7c8:	1886703a 	and	r3,r3,r2
  80e7cc:	e0bffe17 	ldw	r2,-8(fp)
  80e7d0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80e7d4:	e0bffe17 	ldw	r2,-8(fp)
  80e7d8:	10800017 	ldw	r2,0(r2)
  80e7dc:	11000304 	addi	r4,r2,12
  80e7e0:	e0bffe17 	ldw	r2,-8(fp)
  80e7e4:	10800117 	ldw	r2,4(r2)
  80e7e8:	1007883a 	mov	r3,r2
  80e7ec:	2005883a 	mov	r2,r4
  80e7f0:	10c00035 	stwio	r3,0(r2)
  }   
}
  80e7f4:	e037883a 	mov	sp,fp
  80e7f8:	df000017 	ldw	fp,0(sp)
  80e7fc:	dec00104 	addi	sp,sp,4
  80e800:	f800283a 	ret

0080e804 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80e804:	defffd04 	addi	sp,sp,-12
  80e808:	df000215 	stw	fp,8(sp)
  80e80c:	df000204 	addi	fp,sp,8
  80e810:	e13ffe15 	stw	r4,-8(fp)
  80e814:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80e818:	e0bffe17 	ldw	r2,-8(fp)
  80e81c:	10c00417 	ldw	r3,16(r2)
  80e820:	e0bffe17 	ldw	r2,-8(fp)
  80e824:	10800517 	ldw	r2,20(r2)
  80e828:	18803626 	beq	r3,r2,80e904 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80e82c:	e0bffe17 	ldw	r2,-8(fp)
  80e830:	10800617 	ldw	r2,24(r2)
  80e834:	1080008c 	andi	r2,r2,2
  80e838:	1005003a 	cmpeq	r2,r2,zero
  80e83c:	1000041e 	bne	r2,zero,80e850 <altera_avalon_uart_txirq+0x4c>
  80e840:	e0bfff17 	ldw	r2,-4(fp)
  80e844:	1082000c 	andi	r2,r2,2048
  80e848:	1005003a 	cmpeq	r2,r2,zero
  80e84c:	10001e1e 	bne	r2,zero,80e8c8 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80e850:	e0bffe17 	ldw	r2,-8(fp)
  80e854:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80e858:	e0bffe17 	ldw	r2,-8(fp)
  80e85c:	10800017 	ldw	r2,0(r2)
  80e860:	11000104 	addi	r4,r2,4
  80e864:	e0bffe17 	ldw	r2,-8(fp)
  80e868:	10c00417 	ldw	r3,16(r2)
  80e86c:	e0bffe17 	ldw	r2,-8(fp)
  80e870:	1885883a 	add	r2,r3,r2
  80e874:	10801704 	addi	r2,r2,92
  80e878:	10800003 	ldbu	r2,0(r2)
  80e87c:	10c03fcc 	andi	r3,r2,255
  80e880:	2005883a 	mov	r2,r4
  80e884:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80e888:	e0bffe17 	ldw	r2,-8(fp)
  80e88c:	10800417 	ldw	r2,16(r2)
  80e890:	10c00044 	addi	r3,r2,1
  80e894:	e0bffe17 	ldw	r2,-8(fp)
  80e898:	10c00415 	stw	r3,16(r2)
  80e89c:	e0bffe17 	ldw	r2,-8(fp)
  80e8a0:	10800417 	ldw	r2,16(r2)
  80e8a4:	10c00fcc 	andi	r3,r2,63
  80e8a8:	e0bffe17 	ldw	r2,-8(fp)
  80e8ac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80e8b0:	e0bffe17 	ldw	r2,-8(fp)
  80e8b4:	10800117 	ldw	r2,4(r2)
  80e8b8:	10c01014 	ori	r3,r2,64
  80e8bc:	e0bffe17 	ldw	r2,-8(fp)
  80e8c0:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80e8c4:	00000f06 	br	80e904 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80e8c8:	e0bffe17 	ldw	r2,-8(fp)
  80e8cc:	10800017 	ldw	r2,0(r2)
  80e8d0:	10800204 	addi	r2,r2,8
  80e8d4:	10800037 	ldwio	r2,0(r2)
  80e8d8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80e8dc:	e0bfff17 	ldw	r2,-4(fp)
  80e8e0:	1082000c 	andi	r2,r2,2048
  80e8e4:	1004c03a 	cmpne	r2,r2,zero
  80e8e8:	1000061e 	bne	r2,zero,80e904 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80e8ec:	e0bffe17 	ldw	r2,-8(fp)
  80e8f0:	10c00117 	ldw	r3,4(r2)
  80e8f4:	00bfefc4 	movi	r2,-65
  80e8f8:	1886703a 	and	r3,r3,r2
  80e8fc:	e0bffe17 	ldw	r2,-8(fp)
  80e900:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80e904:	e0bffe17 	ldw	r2,-8(fp)
  80e908:	10c00417 	ldw	r3,16(r2)
  80e90c:	e0bffe17 	ldw	r2,-8(fp)
  80e910:	10800517 	ldw	r2,20(r2)
  80e914:	1880061e 	bne	r3,r2,80e930 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80e918:	e0bffe17 	ldw	r2,-8(fp)
  80e91c:	10c00117 	ldw	r3,4(r2)
  80e920:	00beefc4 	movi	r2,-1089
  80e924:	1886703a 	and	r3,r3,r2
  80e928:	e0bffe17 	ldw	r2,-8(fp)
  80e92c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80e930:	e0bffe17 	ldw	r2,-8(fp)
  80e934:	10800017 	ldw	r2,0(r2)
  80e938:	11000304 	addi	r4,r2,12
  80e93c:	e0bffe17 	ldw	r2,-8(fp)
  80e940:	10800117 	ldw	r2,4(r2)
  80e944:	1007883a 	mov	r3,r2
  80e948:	2005883a 	mov	r2,r4
  80e94c:	10c00035 	stwio	r3,0(r2)
}
  80e950:	e037883a 	mov	sp,fp
  80e954:	df000017 	ldw	fp,0(sp)
  80e958:	dec00104 	addi	sp,sp,4
  80e95c:	f800283a 	ret

0080e960 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80e960:	defffc04 	addi	sp,sp,-16
  80e964:	df000315 	stw	fp,12(sp)
  80e968:	df000304 	addi	fp,sp,12
  80e96c:	e13ffd15 	stw	r4,-12(fp)
  80e970:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80e974:	00000706 	br	80e994 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80e978:	e0bffe17 	ldw	r2,-8(fp)
  80e97c:	1090000c 	andi	r2,r2,16384
  80e980:	1005003a 	cmpeq	r2,r2,zero
  80e984:	1000031e 	bne	r2,zero,80e994 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80e988:	00bffd44 	movi	r2,-11
  80e98c:	e0bfff15 	stw	r2,-4(fp)
  80e990:	00000606 	br	80e9ac <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80e994:	e0bffd17 	ldw	r2,-12(fp)
  80e998:	10c00417 	ldw	r3,16(r2)
  80e99c:	e0bffd17 	ldw	r2,-12(fp)
  80e9a0:	10800517 	ldw	r2,20(r2)
  80e9a4:	18bff41e 	bne	r3,r2,80e978 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80e9a8:	e03fff15 	stw	zero,-4(fp)
  80e9ac:	e0bfff17 	ldw	r2,-4(fp)
}
  80e9b0:	e037883a 	mov	sp,fp
  80e9b4:	df000017 	ldw	fp,0(sp)
  80e9b8:	dec00104 	addi	sp,sp,4
  80e9bc:	f800283a 	ret

0080e9c0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80e9c0:	defff004 	addi	sp,sp,-64
  80e9c4:	dfc00f15 	stw	ra,60(sp)
  80e9c8:	df000e15 	stw	fp,56(sp)
  80e9cc:	df000e04 	addi	fp,sp,56
  80e9d0:	e13ffb15 	stw	r4,-20(fp)
  80e9d4:	e17ffc15 	stw	r5,-16(fp)
  80e9d8:	e1bffd15 	stw	r6,-12(fp)
  80e9dc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80e9e0:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80e9e4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80e9e8:	e0bffe17 	ldw	r2,-8(fp)
  80e9ec:	1090000c 	andi	r2,r2,16384
  80e9f0:	1005003a 	cmpeq	r2,r2,zero
  80e9f4:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80e9f8:	e0bffb17 	ldw	r2,-20(fp)
  80e9fc:	10800217 	ldw	r2,8(r2)
  80ea00:	10800044 	addi	r2,r2,1
  80ea04:	10800fcc 	andi	r2,r2,63
  80ea08:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80ea0c:	00001906 	br	80ea74 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80ea10:	e0bff617 	ldw	r2,-40(fp)
  80ea14:	10800044 	addi	r2,r2,1
  80ea18:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80ea1c:	e0bffb17 	ldw	r2,-20(fp)
  80ea20:	10c00217 	ldw	r3,8(r2)
  80ea24:	e0bffb17 	ldw	r2,-20(fp)
  80ea28:	1885883a 	add	r2,r3,r2
  80ea2c:	10800704 	addi	r2,r2,28
  80ea30:	10800003 	ldbu	r2,0(r2)
  80ea34:	1007883a 	mov	r3,r2
  80ea38:	e0bffc17 	ldw	r2,-16(fp)
  80ea3c:	10c00005 	stb	r3,0(r2)
  80ea40:	e0bffc17 	ldw	r2,-16(fp)
  80ea44:	10800044 	addi	r2,r2,1
  80ea48:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80ea4c:	e0bffb17 	ldw	r2,-20(fp)
  80ea50:	10800217 	ldw	r2,8(r2)
  80ea54:	10c00044 	addi	r3,r2,1
  80ea58:	e0bffb17 	ldw	r2,-20(fp)
  80ea5c:	10c00215 	stw	r3,8(r2)
  80ea60:	e0bffb17 	ldw	r2,-20(fp)
  80ea64:	10800217 	ldw	r2,8(r2)
  80ea68:	10c00fcc 	andi	r3,r2,63
  80ea6c:	e0bffb17 	ldw	r2,-20(fp)
  80ea70:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80ea74:	e0fff617 	ldw	r3,-40(fp)
  80ea78:	e0bffd17 	ldw	r2,-12(fp)
  80ea7c:	1880050e 	bge	r3,r2,80ea94 <altera_avalon_uart_read+0xd4>
  80ea80:	e0bffb17 	ldw	r2,-20(fp)
  80ea84:	10c00217 	ldw	r3,8(r2)
  80ea88:	e0bffb17 	ldw	r2,-20(fp)
  80ea8c:	10800317 	ldw	r2,12(r2)
  80ea90:	18bfdf1e 	bne	r3,r2,80ea10 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80ea94:	e0bff617 	ldw	r2,-40(fp)
  80ea98:	1004c03a 	cmpne	r2,r2,zero
  80ea9c:	1000271e 	bne	r2,zero,80eb3c <altera_avalon_uart_read+0x17c>
  80eaa0:	e0bffb17 	ldw	r2,-20(fp)
  80eaa4:	10c00217 	ldw	r3,8(r2)
  80eaa8:	e0bffb17 	ldw	r2,-20(fp)
  80eaac:	10800317 	ldw	r2,12(r2)
  80eab0:	1880221e 	bne	r3,r2,80eb3c <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80eab4:	e0bff917 	ldw	r2,-28(fp)
  80eab8:	1004c03a 	cmpne	r2,r2,zero
  80eabc:	1000061e 	bne	r2,zero,80ead8 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80eac0:	080ebf00 	call	80ebf0 <alt_get_errno>
  80eac4:	00c002c4 	movi	r3,11
  80eac8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80eacc:	00800044 	movi	r2,1
  80ead0:	e0bff705 	stb	r2,-36(fp)
        break;
  80ead4:	00001f06 	br	80eb54 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ead8:	0005303a 	rdctl	r2,status
  80eadc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eae0:	e0fff517 	ldw	r3,-44(fp)
  80eae4:	00bfff84 	movi	r2,-2
  80eae8:	1884703a 	and	r2,r3,r2
  80eaec:	1001703a 	wrctl	status,r2
  
  return context;
  80eaf0:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80eaf4:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80eaf8:	e0bffb17 	ldw	r2,-20(fp)
  80eafc:	10800117 	ldw	r2,4(r2)
  80eb00:	10c02014 	ori	r3,r2,128
  80eb04:	e0bffb17 	ldw	r2,-20(fp)
  80eb08:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80eb0c:	e0bffb17 	ldw	r2,-20(fp)
  80eb10:	10800017 	ldw	r2,0(r2)
  80eb14:	11000304 	addi	r4,r2,12
  80eb18:	e0bffb17 	ldw	r2,-20(fp)
  80eb1c:	10800117 	ldw	r2,4(r2)
  80eb20:	1007883a 	mov	r3,r2
  80eb24:	2005883a 	mov	r2,r4
  80eb28:	10c00035 	stwio	r3,0(r2)
  80eb2c:	e0bffa17 	ldw	r2,-24(fp)
  80eb30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb34:	e0bff417 	ldw	r2,-48(fp)
  80eb38:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80eb3c:	e0bff617 	ldw	r2,-40(fp)
  80eb40:	1004c03a 	cmpne	r2,r2,zero
  80eb44:	1000031e 	bne	r2,zero,80eb54 <altera_avalon_uart_read+0x194>
  80eb48:	e0bffd17 	ldw	r2,-12(fp)
  80eb4c:	1004c03a 	cmpne	r2,r2,zero
  80eb50:	103fc81e 	bne	r2,zero,80ea74 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb54:	0005303a 	rdctl	r2,status
  80eb58:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb5c:	e0fff317 	ldw	r3,-52(fp)
  80eb60:	00bfff84 	movi	r2,-2
  80eb64:	1884703a 	and	r2,r3,r2
  80eb68:	1001703a 	wrctl	status,r2
  
  return context;
  80eb6c:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80eb70:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80eb74:	e0bffb17 	ldw	r2,-20(fp)
  80eb78:	10800117 	ldw	r2,4(r2)
  80eb7c:	10c02014 	ori	r3,r2,128
  80eb80:	e0bffb17 	ldw	r2,-20(fp)
  80eb84:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80eb88:	e0bffb17 	ldw	r2,-20(fp)
  80eb8c:	10800017 	ldw	r2,0(r2)
  80eb90:	11000304 	addi	r4,r2,12
  80eb94:	e0bffb17 	ldw	r2,-20(fp)
  80eb98:	10800117 	ldw	r2,4(r2)
  80eb9c:	1007883a 	mov	r3,r2
  80eba0:	2005883a 	mov	r2,r4
  80eba4:	10c00035 	stwio	r3,0(r2)
  80eba8:	e0bffa17 	ldw	r2,-24(fp)
  80ebac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ebb0:	e0bff217 	ldw	r2,-56(fp)
  80ebb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80ebb8:	e0bff703 	ldbu	r2,-36(fp)
  80ebbc:	1005003a 	cmpeq	r2,r2,zero
  80ebc0:	1000031e 	bne	r2,zero,80ebd0 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80ebc4:	00bffd04 	movi	r2,-12
  80ebc8:	e0bfff15 	stw	r2,-4(fp)
  80ebcc:	00000206 	br	80ebd8 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80ebd0:	e0bff617 	ldw	r2,-40(fp)
  80ebd4:	e0bfff15 	stw	r2,-4(fp)
  80ebd8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80ebdc:	e037883a 	mov	sp,fp
  80ebe0:	dfc00117 	ldw	ra,4(sp)
  80ebe4:	df000017 	ldw	fp,0(sp)
  80ebe8:	dec00204 	addi	sp,sp,8
  80ebec:	f800283a 	ret

0080ebf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ebf0:	defffd04 	addi	sp,sp,-12
  80ebf4:	dfc00215 	stw	ra,8(sp)
  80ebf8:	df000115 	stw	fp,4(sp)
  80ebfc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ec00:	00802074 	movhi	r2,129
  80ec04:	10883104 	addi	r2,r2,8388
  80ec08:	10800017 	ldw	r2,0(r2)
  80ec0c:	1005003a 	cmpeq	r2,r2,zero
  80ec10:	1000061e 	bne	r2,zero,80ec2c <alt_get_errno+0x3c>
  80ec14:	00802074 	movhi	r2,129
  80ec18:	10883104 	addi	r2,r2,8388
  80ec1c:	10800017 	ldw	r2,0(r2)
  80ec20:	103ee83a 	callr	r2
  80ec24:	e0bfff15 	stw	r2,-4(fp)
  80ec28:	00000306 	br	80ec38 <alt_get_errno+0x48>
  80ec2c:	00802074 	movhi	r2,129
  80ec30:	108f6604 	addi	r2,r2,15768
  80ec34:	e0bfff15 	stw	r2,-4(fp)
  80ec38:	e0bfff17 	ldw	r2,-4(fp)
}
  80ec3c:	e037883a 	mov	sp,fp
  80ec40:	dfc00117 	ldw	ra,4(sp)
  80ec44:	df000017 	ldw	fp,0(sp)
  80ec48:	dec00204 	addi	sp,sp,8
  80ec4c:	f800283a 	ret

0080ec50 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80ec50:	defff204 	addi	sp,sp,-56
  80ec54:	dfc00d15 	stw	ra,52(sp)
  80ec58:	df000c15 	stw	fp,48(sp)
  80ec5c:	df000c04 	addi	fp,sp,48
  80ec60:	e13ffc15 	stw	r4,-16(fp)
  80ec64:	e17ffd15 	stw	r5,-12(fp)
  80ec68:	e1bffe15 	stw	r6,-8(fp)
  80ec6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80ec70:	e0bffe17 	ldw	r2,-8(fp)
  80ec74:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80ec78:	e0bfff17 	ldw	r2,-4(fp)
  80ec7c:	1090000c 	andi	r2,r2,16384
  80ec80:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80ec84:	00004006 	br	80ed88 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ec88:	e0bffc17 	ldw	r2,-16(fp)
  80ec8c:	10800517 	ldw	r2,20(r2)
  80ec90:	10800044 	addi	r2,r2,1
  80ec94:	10800fcc 	andi	r2,r2,63
  80ec98:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80ec9c:	e0bffc17 	ldw	r2,-16(fp)
  80eca0:	10c00417 	ldw	r3,16(r2)
  80eca4:	e0bff917 	ldw	r2,-28(fp)
  80eca8:	1880251e 	bne	r3,r2,80ed40 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80ecac:	e0bffa17 	ldw	r2,-24(fp)
  80ecb0:	1005003a 	cmpeq	r2,r2,zero
  80ecb4:	1000051e 	bne	r2,zero,80eccc <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80ecb8:	080ee180 	call	80ee18 <alt_get_errno>
  80ecbc:	1007883a 	mov	r3,r2
  80ecc0:	008002c4 	movi	r2,11
  80ecc4:	18800015 	stw	r2,0(r3)
        break;
  80ecc8:	00003206 	br	80ed94 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eccc:	0005303a 	rdctl	r2,status
  80ecd0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ecd4:	e0fff717 	ldw	r3,-36(fp)
  80ecd8:	00bfff84 	movi	r2,-2
  80ecdc:	1884703a 	and	r2,r3,r2
  80ece0:	1001703a 	wrctl	status,r2
  
  return context;
  80ece4:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80ece8:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80ecec:	e0bffc17 	ldw	r2,-16(fp)
  80ecf0:	10800117 	ldw	r2,4(r2)
  80ecf4:	10c11014 	ori	r3,r2,1088
  80ecf8:	e0bffc17 	ldw	r2,-16(fp)
  80ecfc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80ed00:	e0bffc17 	ldw	r2,-16(fp)
  80ed04:	10800017 	ldw	r2,0(r2)
  80ed08:	11000304 	addi	r4,r2,12
  80ed0c:	e0bffc17 	ldw	r2,-16(fp)
  80ed10:	10800117 	ldw	r2,4(r2)
  80ed14:	1007883a 	mov	r3,r2
  80ed18:	2005883a 	mov	r2,r4
  80ed1c:	10c00035 	stwio	r3,0(r2)
  80ed20:	e0bffb17 	ldw	r2,-20(fp)
  80ed24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ed28:	e0bff617 	ldw	r2,-40(fp)
  80ed2c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80ed30:	e0bffc17 	ldw	r2,-16(fp)
  80ed34:	10c00417 	ldw	r3,16(r2)
  80ed38:	e0bff917 	ldw	r2,-28(fp)
  80ed3c:	18bffc26 	beq	r3,r2,80ed30 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80ed40:	e0bff817 	ldw	r2,-32(fp)
  80ed44:	10bfffc4 	addi	r2,r2,-1
  80ed48:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80ed4c:	e0bffc17 	ldw	r2,-16(fp)
  80ed50:	10c00517 	ldw	r3,20(r2)
  80ed54:	e0bffd17 	ldw	r2,-12(fp)
  80ed58:	10800003 	ldbu	r2,0(r2)
  80ed5c:	1009883a 	mov	r4,r2
  80ed60:	e0bffc17 	ldw	r2,-16(fp)
  80ed64:	1885883a 	add	r2,r3,r2
  80ed68:	10801704 	addi	r2,r2,92
  80ed6c:	11000005 	stb	r4,0(r2)
  80ed70:	e0bffd17 	ldw	r2,-12(fp)
  80ed74:	10800044 	addi	r2,r2,1
  80ed78:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80ed7c:	e0fffc17 	ldw	r3,-16(fp)
  80ed80:	e0bff917 	ldw	r2,-28(fp)
  80ed84:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80ed88:	e0bff817 	ldw	r2,-32(fp)
  80ed8c:	1004c03a 	cmpne	r2,r2,zero
  80ed90:	103fbd1e 	bne	r2,zero,80ec88 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed94:	0005303a 	rdctl	r2,status
  80ed98:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed9c:	e0fff517 	ldw	r3,-44(fp)
  80eda0:	00bfff84 	movi	r2,-2
  80eda4:	1884703a 	and	r2,r3,r2
  80eda8:	1001703a 	wrctl	status,r2
  
  return context;
  80edac:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80edb0:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80edb4:	e0bffc17 	ldw	r2,-16(fp)
  80edb8:	10800117 	ldw	r2,4(r2)
  80edbc:	10c11014 	ori	r3,r2,1088
  80edc0:	e0bffc17 	ldw	r2,-16(fp)
  80edc4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80edc8:	e0bffc17 	ldw	r2,-16(fp)
  80edcc:	10800017 	ldw	r2,0(r2)
  80edd0:	11000304 	addi	r4,r2,12
  80edd4:	e0bffc17 	ldw	r2,-16(fp)
  80edd8:	10800117 	ldw	r2,4(r2)
  80eddc:	1007883a 	mov	r3,r2
  80ede0:	2005883a 	mov	r2,r4
  80ede4:	10c00035 	stwio	r3,0(r2)
  80ede8:	e0bffb17 	ldw	r2,-20(fp)
  80edec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80edf0:	e0bff417 	ldw	r2,-48(fp)
  80edf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80edf8:	e0fffe17 	ldw	r3,-8(fp)
  80edfc:	e0bff817 	ldw	r2,-32(fp)
  80ee00:	1885c83a 	sub	r2,r3,r2
}
  80ee04:	e037883a 	mov	sp,fp
  80ee08:	dfc00117 	ldw	ra,4(sp)
  80ee0c:	df000017 	ldw	fp,0(sp)
  80ee10:	dec00204 	addi	sp,sp,8
  80ee14:	f800283a 	ret

0080ee18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee18:	defffd04 	addi	sp,sp,-12
  80ee1c:	dfc00215 	stw	ra,8(sp)
  80ee20:	df000115 	stw	fp,4(sp)
  80ee24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ee28:	00802074 	movhi	r2,129
  80ee2c:	10883104 	addi	r2,r2,8388
  80ee30:	10800017 	ldw	r2,0(r2)
  80ee34:	1005003a 	cmpeq	r2,r2,zero
  80ee38:	1000061e 	bne	r2,zero,80ee54 <alt_get_errno+0x3c>
  80ee3c:	00802074 	movhi	r2,129
  80ee40:	10883104 	addi	r2,r2,8388
  80ee44:	10800017 	ldw	r2,0(r2)
  80ee48:	103ee83a 	callr	r2
  80ee4c:	e0bfff15 	stw	r2,-4(fp)
  80ee50:	00000306 	br	80ee60 <alt_get_errno+0x48>
  80ee54:	00802074 	movhi	r2,129
  80ee58:	108f6604 	addi	r2,r2,15768
  80ee5c:	e0bfff15 	stw	r2,-4(fp)
  80ee60:	e0bfff17 	ldw	r2,-4(fp)
}
  80ee64:	e037883a 	mov	sp,fp
  80ee68:	dfc00117 	ldw	ra,4(sp)
  80ee6c:	df000017 	ldw	fp,0(sp)
  80ee70:	dec00204 	addi	sp,sp,8
  80ee74:	f800283a 	ret

0080ee78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80ee78:	defffe04 	addi	sp,sp,-8
  80ee7c:	df000115 	stw	fp,4(sp)
  80ee80:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ee84:	e03fff15 	stw	zero,-4(fp)
  80ee88:	00000506 	br	80eea0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80ee8c:	e0bfff17 	ldw	r2,-4(fp)
  80ee90:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ee94:	e0bfff17 	ldw	r2,-4(fp)
  80ee98:	10800804 	addi	r2,r2,32
  80ee9c:	e0bfff15 	stw	r2,-4(fp)
  80eea0:	e0bfff17 	ldw	r2,-4(fp)
  80eea4:	10820030 	cmpltui	r2,r2,2048
  80eea8:	103ff81e 	bne	r2,zero,80ee8c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80eeac:	e037883a 	mov	sp,fp
  80eeb0:	df000017 	ldw	fp,0(sp)
  80eeb4:	dec00104 	addi	sp,sp,4
  80eeb8:	f800283a 	ret

0080eebc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80eebc:	defff904 	addi	sp,sp,-28
  80eec0:	dfc00615 	stw	ra,24(sp)
  80eec4:	df000515 	stw	fp,20(sp)
  80eec8:	df000504 	addi	fp,sp,20
  80eecc:	e13ffd15 	stw	r4,-12(fp)
  80eed0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80eed4:	e0bffd17 	ldw	r2,-12(fp)
  80eed8:	1005003a 	cmpeq	r2,r2,zero
  80eedc:	1000041e 	bne	r2,zero,80eef0 <alt_dev_llist_insert+0x34>
  80eee0:	e0bffd17 	ldw	r2,-12(fp)
  80eee4:	10800217 	ldw	r2,8(r2)
  80eee8:	1004c03a 	cmpne	r2,r2,zero
  80eeec:	1000071e 	bne	r2,zero,80ef0c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80eef0:	080ef700 	call	80ef70 <alt_get_errno>
  80eef4:	1007883a 	mov	r3,r2
  80eef8:	00800584 	movi	r2,22
  80eefc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80ef00:	00bffa84 	movi	r2,-22
  80ef04:	e0bfff15 	stw	r2,-4(fp)
  80ef08:	00001306 	br	80ef58 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80ef0c:	e0fffd17 	ldw	r3,-12(fp)
  80ef10:	e0bffe17 	ldw	r2,-8(fp)
  80ef14:	e0bffb15 	stw	r2,-20(fp)
  80ef18:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ef1c:	e0fffc17 	ldw	r3,-16(fp)
  80ef20:	e0bffb17 	ldw	r2,-20(fp)
  80ef24:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ef28:	e0bffb17 	ldw	r2,-20(fp)
  80ef2c:	10c00017 	ldw	r3,0(r2)
  80ef30:	e0bffc17 	ldw	r2,-16(fp)
  80ef34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ef38:	e0bffb17 	ldw	r2,-20(fp)
  80ef3c:	10c00017 	ldw	r3,0(r2)
  80ef40:	e0bffc17 	ldw	r2,-16(fp)
  80ef44:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ef48:	e0fffb17 	ldw	r3,-20(fp)
  80ef4c:	e0bffc17 	ldw	r2,-16(fp)
  80ef50:	18800015 	stw	r2,0(r3)

  return 0;  
  80ef54:	e03fff15 	stw	zero,-4(fp)
  80ef58:	e0bfff17 	ldw	r2,-4(fp)
}
  80ef5c:	e037883a 	mov	sp,fp
  80ef60:	dfc00117 	ldw	ra,4(sp)
  80ef64:	df000017 	ldw	fp,0(sp)
  80ef68:	dec00204 	addi	sp,sp,8
  80ef6c:	f800283a 	ret

0080ef70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ef70:	defffd04 	addi	sp,sp,-12
  80ef74:	dfc00215 	stw	ra,8(sp)
  80ef78:	df000115 	stw	fp,4(sp)
  80ef7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ef80:	00802074 	movhi	r2,129
  80ef84:	10883104 	addi	r2,r2,8388
  80ef88:	10800017 	ldw	r2,0(r2)
  80ef8c:	1005003a 	cmpeq	r2,r2,zero
  80ef90:	1000061e 	bne	r2,zero,80efac <alt_get_errno+0x3c>
  80ef94:	00802074 	movhi	r2,129
  80ef98:	10883104 	addi	r2,r2,8388
  80ef9c:	10800017 	ldw	r2,0(r2)
  80efa0:	103ee83a 	callr	r2
  80efa4:	e0bfff15 	stw	r2,-4(fp)
  80efa8:	00000306 	br	80efb8 <alt_get_errno+0x48>
  80efac:	00802074 	movhi	r2,129
  80efb0:	108f6604 	addi	r2,r2,15768
  80efb4:	e0bfff15 	stw	r2,-4(fp)
  80efb8:	e0bfff17 	ldw	r2,-4(fp)
}
  80efbc:	e037883a 	mov	sp,fp
  80efc0:	dfc00117 	ldw	ra,4(sp)
  80efc4:	df000017 	ldw	fp,0(sp)
  80efc8:	dec00204 	addi	sp,sp,8
  80efcc:	f800283a 	ret

0080efd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80efd0:	defffd04 	addi	sp,sp,-12
  80efd4:	dfc00215 	stw	ra,8(sp)
  80efd8:	df000115 	stw	fp,4(sp)
  80efdc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80efe0:	00bfff04 	movi	r2,-4
  80efe4:	00c02074 	movhi	r3,129
  80efe8:	18ff5d04 	addi	r3,r3,-652
  80efec:	1885883a 	add	r2,r3,r2
  80eff0:	e0bfff15 	stw	r2,-4(fp)
  80eff4:	00000606 	br	80f010 <_do_ctors+0x40>
        (*ctor) (); 
  80eff8:	e0bfff17 	ldw	r2,-4(fp)
  80effc:	10800017 	ldw	r2,0(r2)
  80f000:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f004:	e0bfff17 	ldw	r2,-4(fp)
  80f008:	10bfff04 	addi	r2,r2,-4
  80f00c:	e0bfff15 	stw	r2,-4(fp)
  80f010:	e0ffff17 	ldw	r3,-4(fp)
  80f014:	00802074 	movhi	r2,129
  80f018:	10bf5c04 	addi	r2,r2,-656
  80f01c:	18bff62e 	bgeu	r3,r2,80eff8 <_do_ctors+0x28>
        (*ctor) (); 
}
  80f020:	e037883a 	mov	sp,fp
  80f024:	dfc00117 	ldw	ra,4(sp)
  80f028:	df000017 	ldw	fp,0(sp)
  80f02c:	dec00204 	addi	sp,sp,8
  80f030:	f800283a 	ret

0080f034 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f034:	defffd04 	addi	sp,sp,-12
  80f038:	dfc00215 	stw	ra,8(sp)
  80f03c:	df000115 	stw	fp,4(sp)
  80f040:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f044:	00bfff04 	movi	r2,-4
  80f048:	00c02074 	movhi	r3,129
  80f04c:	18ff5d04 	addi	r3,r3,-652
  80f050:	1885883a 	add	r2,r3,r2
  80f054:	e0bfff15 	stw	r2,-4(fp)
  80f058:	00000606 	br	80f074 <_do_dtors+0x40>
        (*dtor) (); 
  80f05c:	e0bfff17 	ldw	r2,-4(fp)
  80f060:	10800017 	ldw	r2,0(r2)
  80f064:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f068:	e0bfff17 	ldw	r2,-4(fp)
  80f06c:	10bfff04 	addi	r2,r2,-4
  80f070:	e0bfff15 	stw	r2,-4(fp)
  80f074:	e0ffff17 	ldw	r3,-4(fp)
  80f078:	00802074 	movhi	r2,129
  80f07c:	10bf5d04 	addi	r2,r2,-652
  80f080:	18bff62e 	bgeu	r3,r2,80f05c <_do_dtors+0x28>
        (*dtor) (); 
}
  80f084:	e037883a 	mov	sp,fp
  80f088:	dfc00117 	ldw	ra,4(sp)
  80f08c:	df000017 	ldw	fp,0(sp)
  80f090:	dec00204 	addi	sp,sp,8
  80f094:	f800283a 	ret

0080f098 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80f098:	defff904 	addi	sp,sp,-28
  80f09c:	dfc00615 	stw	ra,24(sp)
  80f0a0:	df000515 	stw	fp,20(sp)
  80f0a4:	df000504 	addi	fp,sp,20
  80f0a8:	e13ffd15 	stw	r4,-12(fp)
  80f0ac:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80f0b0:	e0bffe17 	ldw	r2,-8(fp)
  80f0b4:	10800017 	ldw	r2,0(r2)
  80f0b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80f0bc:	e13ffd17 	ldw	r4,-12(fp)
  80f0c0:	08032e40 	call	8032e4 <strlen>
  80f0c4:	10800044 	addi	r2,r2,1
  80f0c8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f0cc:	00000d06 	br	80f104 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80f0d0:	e0bffc17 	ldw	r2,-16(fp)
  80f0d4:	11000217 	ldw	r4,8(r2)
  80f0d8:	e1bffb17 	ldw	r6,-20(fp)
  80f0dc:	e17ffd17 	ldw	r5,-12(fp)
  80f0e0:	080f9b40 	call	80f9b4 <memcmp>
  80f0e4:	1004c03a 	cmpne	r2,r2,zero
  80f0e8:	1000031e 	bne	r2,zero,80f0f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80f0ec:	e0bffc17 	ldw	r2,-16(fp)
  80f0f0:	e0bfff15 	stw	r2,-4(fp)
  80f0f4:	00000706 	br	80f114 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80f0f8:	e0bffc17 	ldw	r2,-16(fp)
  80f0fc:	10800017 	ldw	r2,0(r2)
  80f100:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f104:	e0fffe17 	ldw	r3,-8(fp)
  80f108:	e0bffc17 	ldw	r2,-16(fp)
  80f10c:	10fff01e 	bne	r2,r3,80f0d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80f110:	e03fff15 	stw	zero,-4(fp)
  80f114:	e0bfff17 	ldw	r2,-4(fp)
}
  80f118:	e037883a 	mov	sp,fp
  80f11c:	dfc00117 	ldw	ra,4(sp)
  80f120:	df000017 	ldw	fp,0(sp)
  80f124:	dec00204 	addi	sp,sp,8
  80f128:	f800283a 	ret

0080f12c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80f12c:	defffa04 	addi	sp,sp,-24
  80f130:	dfc00515 	stw	ra,20(sp)
  80f134:	df000415 	stw	fp,16(sp)
  80f138:	df000404 	addi	fp,sp,16
  80f13c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80f140:	00802074 	movhi	r2,129
  80f144:	10882c04 	addi	r2,r2,8368
  80f148:	10800017 	ldw	r2,0(r2)
  80f14c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f150:	00003306 	br	80f220 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80f154:	e0bffd17 	ldw	r2,-12(fp)
  80f158:	11000217 	ldw	r4,8(r2)
  80f15c:	08032e40 	call	8032e4 <strlen>
  80f160:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80f164:	e0bffd17 	ldw	r2,-12(fp)
  80f168:	10c00217 	ldw	r3,8(r2)
  80f16c:	e0bffc17 	ldw	r2,-16(fp)
  80f170:	1885883a 	add	r2,r3,r2
  80f174:	10bfffc4 	addi	r2,r2,-1
  80f178:	10800003 	ldbu	r2,0(r2)
  80f17c:	10803fcc 	andi	r2,r2,255
  80f180:	1080201c 	xori	r2,r2,128
  80f184:	10bfe004 	addi	r2,r2,-128
  80f188:	10800bd8 	cmpnei	r2,r2,47
  80f18c:	1000031e 	bne	r2,zero,80f19c <alt_find_file+0x70>
    {
      len -= 1;
  80f190:	e0bffc17 	ldw	r2,-16(fp)
  80f194:	10bfffc4 	addi	r2,r2,-1
  80f198:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80f19c:	e0bffc17 	ldw	r2,-16(fp)
  80f1a0:	1007883a 	mov	r3,r2
  80f1a4:	e0bffe17 	ldw	r2,-8(fp)
  80f1a8:	1885883a 	add	r2,r3,r2
  80f1ac:	10800003 	ldbu	r2,0(r2)
  80f1b0:	10803fcc 	andi	r2,r2,255
  80f1b4:	1080201c 	xori	r2,r2,128
  80f1b8:	10bfe004 	addi	r2,r2,-128
  80f1bc:	10800be0 	cmpeqi	r2,r2,47
  80f1c0:	10000a1e 	bne	r2,zero,80f1ec <alt_find_file+0xc0>
  80f1c4:	e0bffc17 	ldw	r2,-16(fp)
  80f1c8:	1007883a 	mov	r3,r2
  80f1cc:	e0bffe17 	ldw	r2,-8(fp)
  80f1d0:	1885883a 	add	r2,r3,r2
  80f1d4:	10800003 	ldbu	r2,0(r2)
  80f1d8:	10803fcc 	andi	r2,r2,255
  80f1dc:	1080201c 	xori	r2,r2,128
  80f1e0:	10bfe004 	addi	r2,r2,-128
  80f1e4:	1004c03a 	cmpne	r2,r2,zero
  80f1e8:	10000a1e 	bne	r2,zero,80f214 <alt_find_file+0xe8>
  80f1ec:	e0bffd17 	ldw	r2,-12(fp)
  80f1f0:	11000217 	ldw	r4,8(r2)
  80f1f4:	e1bffc17 	ldw	r6,-16(fp)
  80f1f8:	e17ffe17 	ldw	r5,-8(fp)
  80f1fc:	080f9b40 	call	80f9b4 <memcmp>
  80f200:	1004c03a 	cmpne	r2,r2,zero
  80f204:	1000031e 	bne	r2,zero,80f214 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80f208:	e0bffd17 	ldw	r2,-12(fp)
  80f20c:	e0bfff15 	stw	r2,-4(fp)
  80f210:	00000806 	br	80f234 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80f214:	e0bffd17 	ldw	r2,-12(fp)
  80f218:	10800017 	ldw	r2,0(r2)
  80f21c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80f220:	00c02074 	movhi	r3,129
  80f224:	18c82c04 	addi	r3,r3,8368
  80f228:	e0bffd17 	ldw	r2,-12(fp)
  80f22c:	10ffc91e 	bne	r2,r3,80f154 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80f230:	e03fff15 	stw	zero,-4(fp)
  80f234:	e0bfff17 	ldw	r2,-4(fp)
}
  80f238:	e037883a 	mov	sp,fp
  80f23c:	dfc00117 	ldw	ra,4(sp)
  80f240:	df000017 	ldw	fp,0(sp)
  80f244:	dec00204 	addi	sp,sp,8
  80f248:	f800283a 	ret

0080f24c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80f24c:	defffc04 	addi	sp,sp,-16
  80f250:	df000315 	stw	fp,12(sp)
  80f254:	df000304 	addi	fp,sp,12
  80f258:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80f25c:	00bffa04 	movi	r2,-24
  80f260:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f264:	e03ffe15 	stw	zero,-8(fp)
  80f268:	00001e06 	br	80f2e4 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80f26c:	e0bffe17 	ldw	r2,-8(fp)
  80f270:	00c02074 	movhi	r3,129
  80f274:	18c33204 	addi	r3,r3,3272
  80f278:	10800324 	muli	r2,r2,12
  80f27c:	10c5883a 	add	r2,r2,r3
  80f280:	10800017 	ldw	r2,0(r2)
  80f284:	1004c03a 	cmpne	r2,r2,zero
  80f288:	1000131e 	bne	r2,zero,80f2d8 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80f28c:	e0bffe17 	ldw	r2,-8(fp)
  80f290:	00c02074 	movhi	r3,129
  80f294:	18c33204 	addi	r3,r3,3272
  80f298:	10800324 	muli	r2,r2,12
  80f29c:	10c7883a 	add	r3,r2,r3
  80f2a0:	e0bfff17 	ldw	r2,-4(fp)
  80f2a4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80f2a8:	00802074 	movhi	r2,129
  80f2ac:	10883004 	addi	r2,r2,8384
  80f2b0:	10c00017 	ldw	r3,0(r2)
  80f2b4:	e0bffe17 	ldw	r2,-8(fp)
  80f2b8:	1880040e 	bge	r3,r2,80f2cc <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80f2bc:	00c02074 	movhi	r3,129
  80f2c0:	18c83004 	addi	r3,r3,8384
  80f2c4:	e0bffe17 	ldw	r2,-8(fp)
  80f2c8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80f2cc:	e0bffe17 	ldw	r2,-8(fp)
  80f2d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80f2d4:	00000606 	br	80f2f0 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80f2d8:	e0bffe17 	ldw	r2,-8(fp)
  80f2dc:	10800044 	addi	r2,r2,1
  80f2e0:	e0bffe15 	stw	r2,-8(fp)
  80f2e4:	e0bffe17 	ldw	r2,-8(fp)
  80f2e8:	10800810 	cmplti	r2,r2,32
  80f2ec:	103fdf1e 	bne	r2,zero,80f26c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80f2f0:	e0bffd17 	ldw	r2,-12(fp)
}
  80f2f4:	e037883a 	mov	sp,fp
  80f2f8:	df000017 	ldw	fp,0(sp)
  80f2fc:	dec00104 	addi	sp,sp,4
  80f300:	f800283a 	ret

0080f304 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f304:	defffe04 	addi	sp,sp,-8
  80f308:	dfc00115 	stw	ra,4(sp)
  80f30c:	df000015 	stw	fp,0(sp)
  80f310:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f314:	0009883a 	mov	r4,zero
  80f318:	01440004 	movi	r5,4096
  80f31c:	080f8d80 	call	80f8d8 <alt_icache_flush>
#endif
}
  80f320:	e037883a 	mov	sp,fp
  80f324:	dfc00117 	ldw	ra,4(sp)
  80f328:	df000017 	ldw	fp,0(sp)
  80f32c:	dec00204 	addi	sp,sp,8
  80f330:	f800283a 	ret

0080f334 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80f334:	defff904 	addi	sp,sp,-28
  80f338:	dfc00615 	stw	ra,24(sp)
  80f33c:	df000515 	stw	fp,20(sp)
  80f340:	df000504 	addi	fp,sp,20
  80f344:	e13ffc15 	stw	r4,-16(fp)
  80f348:	e17ffd15 	stw	r5,-12(fp)
  80f34c:	e1bffe15 	stw	r6,-8(fp)
  80f350:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80f354:	e0800217 	ldw	r2,8(fp)
  80f358:	d8800015 	stw	r2,0(sp)
  80f35c:	e13ffc17 	ldw	r4,-16(fp)
  80f360:	e17ffd17 	ldw	r5,-12(fp)
  80f364:	e1bffe17 	ldw	r6,-8(fp)
  80f368:	e1ffff17 	ldw	r7,-4(fp)
  80f36c:	080f5080 	call	80f508 <alt_iic_isr_register>
}  
  80f370:	e037883a 	mov	sp,fp
  80f374:	dfc00117 	ldw	ra,4(sp)
  80f378:	df000017 	ldw	fp,0(sp)
  80f37c:	dec00204 	addi	sp,sp,8
  80f380:	f800283a 	ret

0080f384 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80f384:	defff904 	addi	sp,sp,-28
  80f388:	df000615 	stw	fp,24(sp)
  80f38c:	df000604 	addi	fp,sp,24
  80f390:	e13ffe15 	stw	r4,-8(fp)
  80f394:	e17fff15 	stw	r5,-4(fp)
  80f398:	e0bfff17 	ldw	r2,-4(fp)
  80f39c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3a0:	0005303a 	rdctl	r2,status
  80f3a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3a8:	e0fffb17 	ldw	r3,-20(fp)
  80f3ac:	00bfff84 	movi	r2,-2
  80f3b0:	1884703a 	and	r2,r3,r2
  80f3b4:	1001703a 	wrctl	status,r2
  
  return context;
  80f3b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f3bc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80f3c0:	e0fffc17 	ldw	r3,-16(fp)
  80f3c4:	00800044 	movi	r2,1
  80f3c8:	10c4983a 	sll	r2,r2,r3
  80f3cc:	1007883a 	mov	r3,r2
  80f3d0:	00802074 	movhi	r2,129
  80f3d4:	108f6d04 	addi	r2,r2,15796
  80f3d8:	10800017 	ldw	r2,0(r2)
  80f3dc:	1886b03a 	or	r3,r3,r2
  80f3e0:	00802074 	movhi	r2,129
  80f3e4:	108f6d04 	addi	r2,r2,15796
  80f3e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f3ec:	00802074 	movhi	r2,129
  80f3f0:	108f6d04 	addi	r2,r2,15796
  80f3f4:	10800017 	ldw	r2,0(r2)
  80f3f8:	100170fa 	wrctl	ienable,r2
  80f3fc:	e0bffd17 	ldw	r2,-12(fp)
  80f400:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f404:	e0bffa17 	ldw	r2,-24(fp)
  80f408:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f40c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80f410:	e037883a 	mov	sp,fp
  80f414:	df000017 	ldw	fp,0(sp)
  80f418:	dec00104 	addi	sp,sp,4
  80f41c:	f800283a 	ret

0080f420 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80f420:	defff904 	addi	sp,sp,-28
  80f424:	df000615 	stw	fp,24(sp)
  80f428:	df000604 	addi	fp,sp,24
  80f42c:	e13ffe15 	stw	r4,-8(fp)
  80f430:	e17fff15 	stw	r5,-4(fp)
  80f434:	e0bfff17 	ldw	r2,-4(fp)
  80f438:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f43c:	0005303a 	rdctl	r2,status
  80f440:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f444:	e0fffb17 	ldw	r3,-20(fp)
  80f448:	00bfff84 	movi	r2,-2
  80f44c:	1884703a 	and	r2,r3,r2
  80f450:	1001703a 	wrctl	status,r2
  
  return context;
  80f454:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80f458:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80f45c:	e0fffc17 	ldw	r3,-16(fp)
  80f460:	00800044 	movi	r2,1
  80f464:	10c4983a 	sll	r2,r2,r3
  80f468:	0084303a 	nor	r2,zero,r2
  80f46c:	1007883a 	mov	r3,r2
  80f470:	00802074 	movhi	r2,129
  80f474:	108f6d04 	addi	r2,r2,15796
  80f478:	10800017 	ldw	r2,0(r2)
  80f47c:	1886703a 	and	r3,r3,r2
  80f480:	00802074 	movhi	r2,129
  80f484:	108f6d04 	addi	r2,r2,15796
  80f488:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80f48c:	00802074 	movhi	r2,129
  80f490:	108f6d04 	addi	r2,r2,15796
  80f494:	10800017 	ldw	r2,0(r2)
  80f498:	100170fa 	wrctl	ienable,r2
  80f49c:	e0bffd17 	ldw	r2,-12(fp)
  80f4a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4a4:	e0bffa17 	ldw	r2,-24(fp)
  80f4a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80f4ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80f4b0:	e037883a 	mov	sp,fp
  80f4b4:	df000017 	ldw	fp,0(sp)
  80f4b8:	dec00104 	addi	sp,sp,4
  80f4bc:	f800283a 	ret

0080f4c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80f4c0:	defffc04 	addi	sp,sp,-16
  80f4c4:	df000315 	stw	fp,12(sp)
  80f4c8:	df000304 	addi	fp,sp,12
  80f4cc:	e13ffe15 	stw	r4,-8(fp)
  80f4d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80f4d4:	000530fa 	rdctl	r2,ienable
  80f4d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80f4dc:	e0ffff17 	ldw	r3,-4(fp)
  80f4e0:	00800044 	movi	r2,1
  80f4e4:	10c4983a 	sll	r2,r2,r3
  80f4e8:	1007883a 	mov	r3,r2
  80f4ec:	e0bffd17 	ldw	r2,-12(fp)
  80f4f0:	1884703a 	and	r2,r3,r2
  80f4f4:	1004c03a 	cmpne	r2,r2,zero
}
  80f4f8:	e037883a 	mov	sp,fp
  80f4fc:	df000017 	ldw	fp,0(sp)
  80f500:	dec00104 	addi	sp,sp,4
  80f504:	f800283a 	ret

0080f508 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80f508:	defff404 	addi	sp,sp,-48
  80f50c:	dfc00b15 	stw	ra,44(sp)
  80f510:	df000a15 	stw	fp,40(sp)
  80f514:	df000a04 	addi	fp,sp,40
  80f518:	e13ffb15 	stw	r4,-20(fp)
  80f51c:	e17ffc15 	stw	r5,-16(fp)
  80f520:	e1bffd15 	stw	r6,-12(fp)
  80f524:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80f528:	00bffa84 	movi	r2,-22
  80f52c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80f530:	e0bffc17 	ldw	r2,-16(fp)
  80f534:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80f538:	e0bff917 	ldw	r2,-28(fp)
  80f53c:	10800808 	cmpgei	r2,r2,32
  80f540:	1000291e 	bne	r2,zero,80f5e8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f544:	0005303a 	rdctl	r2,status
  80f548:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f54c:	e0fff717 	ldw	r3,-36(fp)
  80f550:	00bfff84 	movi	r2,-2
  80f554:	1884703a 	and	r2,r3,r2
  80f558:	1001703a 	wrctl	status,r2
  
  return context;
  80f55c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80f560:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80f564:	e0bff917 	ldw	r2,-28(fp)
  80f568:	00c02074 	movhi	r3,129
  80f56c:	18cf8904 	addi	r3,r3,15908
  80f570:	100490fa 	slli	r2,r2,3
  80f574:	10c7883a 	add	r3,r2,r3
  80f578:	e0bffd17 	ldw	r2,-12(fp)
  80f57c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80f580:	e0bff917 	ldw	r2,-28(fp)
  80f584:	00c02074 	movhi	r3,129
  80f588:	18cf8904 	addi	r3,r3,15908
  80f58c:	100490fa 	slli	r2,r2,3
  80f590:	10c5883a 	add	r2,r2,r3
  80f594:	10c00104 	addi	r3,r2,4
  80f598:	e0bffe17 	ldw	r2,-8(fp)
  80f59c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80f5a0:	e0bffd17 	ldw	r2,-12(fp)
  80f5a4:	1005003a 	cmpeq	r2,r2,zero
  80f5a8:	1000051e 	bne	r2,zero,80f5c0 <alt_iic_isr_register+0xb8>
  80f5ac:	e17ff917 	ldw	r5,-28(fp)
  80f5b0:	e13ffb17 	ldw	r4,-20(fp)
  80f5b4:	080f3840 	call	80f384 <alt_ic_irq_enable>
  80f5b8:	e0bfff15 	stw	r2,-4(fp)
  80f5bc:	00000406 	br	80f5d0 <alt_iic_isr_register+0xc8>
  80f5c0:	e17ff917 	ldw	r5,-28(fp)
  80f5c4:	e13ffb17 	ldw	r4,-20(fp)
  80f5c8:	080f4200 	call	80f420 <alt_ic_irq_disable>
  80f5cc:	e0bfff15 	stw	r2,-4(fp)
  80f5d0:	e0bfff17 	ldw	r2,-4(fp)
  80f5d4:	e0bffa15 	stw	r2,-24(fp)
  80f5d8:	e0bff817 	ldw	r2,-32(fp)
  80f5dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5e0:	e0bff617 	ldw	r2,-40(fp)
  80f5e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80f5e8:	e0bffa17 	ldw	r2,-24(fp)
}
  80f5ec:	e037883a 	mov	sp,fp
  80f5f0:	dfc00117 	ldw	ra,4(sp)
  80f5f4:	df000017 	ldw	fp,0(sp)
  80f5f8:	dec00204 	addi	sp,sp,8
  80f5fc:	f800283a 	ret

0080f600 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f600:	defff904 	addi	sp,sp,-28
  80f604:	dfc00615 	stw	ra,24(sp)
  80f608:	df000515 	stw	fp,20(sp)
  80f60c:	df000504 	addi	fp,sp,20
  80f610:	e13ffc15 	stw	r4,-16(fp)
  80f614:	e17ffd15 	stw	r5,-12(fp)
  80f618:	e1bffe15 	stw	r6,-8(fp)
  80f61c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f620:	e13ffd17 	ldw	r4,-12(fp)
  80f624:	e17ffe17 	ldw	r5,-8(fp)
  80f628:	e1bfff17 	ldw	r6,-4(fp)
  80f62c:	080c1340 	call	80c134 <open>
  80f630:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f634:	e0bffb17 	ldw	r2,-20(fp)
  80f638:	1004803a 	cmplt	r2,r2,zero
  80f63c:	10001c1e 	bne	r2,zero,80f6b0 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f640:	e0bffb17 	ldw	r2,-20(fp)
  80f644:	00c02074 	movhi	r3,129
  80f648:	18c33204 	addi	r3,r3,3272
  80f64c:	10800324 	muli	r2,r2,12
  80f650:	10c5883a 	add	r2,r2,r3
  80f654:	10c00017 	ldw	r3,0(r2)
  80f658:	e0bffc17 	ldw	r2,-16(fp)
  80f65c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f660:	e0bffb17 	ldw	r2,-20(fp)
  80f664:	00c02074 	movhi	r3,129
  80f668:	18c33204 	addi	r3,r3,3272
  80f66c:	10800324 	muli	r2,r2,12
  80f670:	10c5883a 	add	r2,r2,r3
  80f674:	10800104 	addi	r2,r2,4
  80f678:	10c00017 	ldw	r3,0(r2)
  80f67c:	e0bffc17 	ldw	r2,-16(fp)
  80f680:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f684:	e0bffb17 	ldw	r2,-20(fp)
  80f688:	00c02074 	movhi	r3,129
  80f68c:	18c33204 	addi	r3,r3,3272
  80f690:	10800324 	muli	r2,r2,12
  80f694:	10c5883a 	add	r2,r2,r3
  80f698:	10800204 	addi	r2,r2,8
  80f69c:	10c00017 	ldw	r3,0(r2)
  80f6a0:	e0bffc17 	ldw	r2,-16(fp)
  80f6a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80f6a8:	e13ffb17 	ldw	r4,-20(fp)
  80f6ac:	080c49c0 	call	80c49c <alt_release_fd>
  }
} 
  80f6b0:	e037883a 	mov	sp,fp
  80f6b4:	dfc00117 	ldw	ra,4(sp)
  80f6b8:	df000017 	ldw	fp,0(sp)
  80f6bc:	dec00204 	addi	sp,sp,8
  80f6c0:	f800283a 	ret

0080f6c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f6c4:	defffb04 	addi	sp,sp,-20
  80f6c8:	dfc00415 	stw	ra,16(sp)
  80f6cc:	df000315 	stw	fp,12(sp)
  80f6d0:	df000304 	addi	fp,sp,12
  80f6d4:	e13ffd15 	stw	r4,-12(fp)
  80f6d8:	e17ffe15 	stw	r5,-8(fp)
  80f6dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f6e0:	01002074 	movhi	r4,129
  80f6e4:	21033504 	addi	r4,r4,3284
  80f6e8:	e17ffd17 	ldw	r5,-12(fp)
  80f6ec:	01800044 	movi	r6,1
  80f6f0:	01c07fc4 	movi	r7,511
  80f6f4:	080f6000 	call	80f600 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f6f8:	01002074 	movhi	r4,129
  80f6fc:	21033204 	addi	r4,r4,3272
  80f700:	e17ffe17 	ldw	r5,-8(fp)
  80f704:	000d883a 	mov	r6,zero
  80f708:	01c07fc4 	movi	r7,511
  80f70c:	080f6000 	call	80f600 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f710:	01002074 	movhi	r4,129
  80f714:	21033804 	addi	r4,r4,3296
  80f718:	e17fff17 	ldw	r5,-4(fp)
  80f71c:	01800044 	movi	r6,1
  80f720:	01c07fc4 	movi	r7,511
  80f724:	080f6000 	call	80f600 <alt_open_fd>
}  
  80f728:	e037883a 	mov	sp,fp
  80f72c:	dfc00117 	ldw	ra,4(sp)
  80f730:	df000017 	ldw	fp,0(sp)
  80f734:	dec00204 	addi	sp,sp,8
  80f738:	f800283a 	ret

0080f73c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80f73c:	defffd04 	addi	sp,sp,-12
  80f740:	dfc00215 	stw	ra,8(sp)
  80f744:	df000115 	stw	fp,4(sp)
  80f748:	df000104 	addi	fp,sp,4
  80f74c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80f750:	e13fff17 	ldw	r4,-4(fp)
  80f754:	080f78c0 	call	80f78c <alt_busy_sleep>
}
  80f758:	e037883a 	mov	sp,fp
  80f75c:	dfc00117 	ldw	ra,4(sp)
  80f760:	df000017 	ldw	fp,0(sp)
  80f764:	dec00204 	addi	sp,sp,8
  80f768:	f800283a 	ret

0080f76c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80f76c:	deffff04 	addi	sp,sp,-4
  80f770:	df000015 	stw	fp,0(sp)
  80f774:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80f778:	000170fa 	wrctl	ienable,zero
}
  80f77c:	e037883a 	mov	sp,fp
  80f780:	df000017 	ldw	fp,0(sp)
  80f784:	dec00104 	addi	sp,sp,4
  80f788:	f800283a 	ret

0080f78c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80f78c:	defffa04 	addi	sp,sp,-24
  80f790:	dfc00515 	stw	ra,20(sp)
  80f794:	df000415 	stw	fp,16(sp)
  80f798:	df000404 	addi	fp,sp,16
  80f79c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80f7a0:	008000c4 	movi	r2,3
  80f7a4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80f7a8:	e0fffc17 	ldw	r3,-16(fp)
  80f7ac:	008003f4 	movhi	r2,15
  80f7b0:	10909004 	addi	r2,r2,16960
  80f7b4:	188b383a 	mul	r5,r3,r2
  80f7b8:	0100bef4 	movhi	r4,763
  80f7bc:	213c2004 	addi	r4,r4,-3968
  80f7c0:	0800f700 	call	800f70 <__udivsi3>
  80f7c4:	100b883a 	mov	r5,r2
  80f7c8:	01200034 	movhi	r4,32768
  80f7cc:	213fffc4 	addi	r4,r4,-1
  80f7d0:	0800f700 	call	800f70 <__udivsi3>
  80f7d4:	100b883a 	mov	r5,r2
  80f7d8:	e13fff17 	ldw	r4,-4(fp)
  80f7dc:	0800f700 	call	800f70 <__udivsi3>
  80f7e0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80f7e4:	e0bffd17 	ldw	r2,-12(fp)
  80f7e8:	1005003a 	cmpeq	r2,r2,zero
  80f7ec:	1000281e 	bne	r2,zero,80f890 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80f7f0:	e03ffe15 	stw	zero,-8(fp)
  80f7f4:	00001606 	br	80f850 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80f7f8:	00a00034 	movhi	r2,32768
  80f7fc:	10bfffc4 	addi	r2,r2,-1
  80f800:	10bfffc4 	addi	r2,r2,-1
  80f804:	103ffe1e 	bne	r2,zero,80f800 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80f808:	e0fffc17 	ldw	r3,-16(fp)
  80f80c:	008003f4 	movhi	r2,15
  80f810:	10909004 	addi	r2,r2,16960
  80f814:	188b383a 	mul	r5,r3,r2
  80f818:	0100bef4 	movhi	r4,763
  80f81c:	213c2004 	addi	r4,r4,-3968
  80f820:	0800f700 	call	800f70 <__udivsi3>
  80f824:	100b883a 	mov	r5,r2
  80f828:	01200034 	movhi	r4,32768
  80f82c:	213fffc4 	addi	r4,r4,-1
  80f830:	0800f700 	call	800f70 <__udivsi3>
  80f834:	1007883a 	mov	r3,r2
  80f838:	e0bfff17 	ldw	r2,-4(fp)
  80f83c:	10c5c83a 	sub	r2,r2,r3
  80f840:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80f844:	e0bffe17 	ldw	r2,-8(fp)
  80f848:	10800044 	addi	r2,r2,1
  80f84c:	e0bffe15 	stw	r2,-8(fp)
  80f850:	e0fffe17 	ldw	r3,-8(fp)
  80f854:	e0bffd17 	ldw	r2,-12(fp)
  80f858:	18bfe716 	blt	r3,r2,80f7f8 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80f85c:	e0fffc17 	ldw	r3,-16(fp)
  80f860:	008003f4 	movhi	r2,15
  80f864:	10909004 	addi	r2,r2,16960
  80f868:	188b383a 	mul	r5,r3,r2
  80f86c:	0100bef4 	movhi	r4,763
  80f870:	213c2004 	addi	r4,r4,-3968
  80f874:	0800f700 	call	800f70 <__udivsi3>
  80f878:	1007883a 	mov	r3,r2
  80f87c:	e0bfff17 	ldw	r2,-4(fp)
  80f880:	1885383a 	mul	r2,r3,r2
  80f884:	10bfffc4 	addi	r2,r2,-1
  80f888:	103ffe1e 	bne	r2,zero,80f884 <alt_busy_sleep+0xf8>
  80f88c:	00000c06 	br	80f8c0 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80f890:	e0fffc17 	ldw	r3,-16(fp)
  80f894:	008003f4 	movhi	r2,15
  80f898:	10909004 	addi	r2,r2,16960
  80f89c:	188b383a 	mul	r5,r3,r2
  80f8a0:	0100bef4 	movhi	r4,763
  80f8a4:	213c2004 	addi	r4,r4,-3968
  80f8a8:	0800f700 	call	800f70 <__udivsi3>
  80f8ac:	1007883a 	mov	r3,r2
  80f8b0:	e0bfff17 	ldw	r2,-4(fp)
  80f8b4:	1885383a 	mul	r2,r3,r2
  80f8b8:	10bfffc4 	addi	r2,r2,-1
  80f8bc:	00bffe16 	blt	zero,r2,80f8b8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80f8c0:	0005883a 	mov	r2,zero
}
  80f8c4:	e037883a 	mov	sp,fp
  80f8c8:	dfc00117 	ldw	ra,4(sp)
  80f8cc:	df000017 	ldw	fp,0(sp)
  80f8d0:	dec00204 	addi	sp,sp,8
  80f8d4:	f800283a 	ret

0080f8d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80f8d8:	defffb04 	addi	sp,sp,-20
  80f8dc:	df000415 	stw	fp,16(sp)
  80f8e0:	df000404 	addi	fp,sp,16
  80f8e4:	e13ffe15 	stw	r4,-8(fp)
  80f8e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80f8ec:	e0bfff17 	ldw	r2,-4(fp)
  80f8f0:	10840070 	cmpltui	r2,r2,4097
  80f8f4:	1000021e 	bne	r2,zero,80f900 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80f8f8:	00840004 	movi	r2,4096
  80f8fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80f900:	e0fffe17 	ldw	r3,-8(fp)
  80f904:	e0bfff17 	ldw	r2,-4(fp)
  80f908:	1885883a 	add	r2,r3,r2
  80f90c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f910:	e0bffe17 	ldw	r2,-8(fp)
  80f914:	e0bffd15 	stw	r2,-12(fp)
  80f918:	00000506 	br	80f930 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80f91c:	e0bffd17 	ldw	r2,-12(fp)
  80f920:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80f924:	e0bffd17 	ldw	r2,-12(fp)
  80f928:	10800804 	addi	r2,r2,32
  80f92c:	e0bffd15 	stw	r2,-12(fp)
  80f930:	e0fffd17 	ldw	r3,-12(fp)
  80f934:	e0bffc17 	ldw	r2,-16(fp)
  80f938:	18bff836 	bltu	r3,r2,80f91c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80f93c:	e0bffe17 	ldw	r2,-8(fp)
  80f940:	108007cc 	andi	r2,r2,31
  80f944:	1005003a 	cmpeq	r2,r2,zero
  80f948:	1000021e 	bne	r2,zero,80f954 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80f94c:	e0bffd17 	ldw	r2,-12(fp)
  80f950:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80f954:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80f958:	e037883a 	mov	sp,fp
  80f95c:	df000017 	ldw	fp,0(sp)
  80f960:	dec00104 	addi	sp,sp,4
  80f964:	f800283a 	ret

0080f968 <atexit>:
  80f968:	200b883a 	mov	r5,r4
  80f96c:	000d883a 	mov	r6,zero
  80f970:	0009883a 	mov	r4,zero
  80f974:	000f883a 	mov	r7,zero
  80f978:	080fa281 	jmpi	80fa28 <__register_exitproc>

0080f97c <exit>:
  80f97c:	defffe04 	addi	sp,sp,-8
  80f980:	000b883a 	mov	r5,zero
  80f984:	dc000015 	stw	r16,0(sp)
  80f988:	dfc00115 	stw	ra,4(sp)
  80f98c:	2021883a 	mov	r16,r4
  80f990:	080fb600 	call	80fb60 <__call_exitprocs>
  80f994:	00802074 	movhi	r2,129
  80f998:	10882604 	addi	r2,r2,8344
  80f99c:	11000017 	ldw	r4,0(r2)
  80f9a0:	20800f17 	ldw	r2,60(r4)
  80f9a4:	10000126 	beq	r2,zero,80f9ac <exit+0x30>
  80f9a8:	103ee83a 	callr	r2
  80f9ac:	8009883a 	mov	r4,r16
  80f9b0:	080fd500 	call	80fd50 <_exit>

0080f9b4 <memcmp>:
  80f9b4:	00c000c4 	movi	r3,3
  80f9b8:	1980032e 	bgeu	r3,r6,80f9c8 <memcmp+0x14>
  80f9bc:	2144b03a 	or	r2,r4,r5
  80f9c0:	10c4703a 	and	r2,r2,r3
  80f9c4:	10000f26 	beq	r2,zero,80fa04 <memcmp+0x50>
  80f9c8:	31ffffc4 	addi	r7,r6,-1
  80f9cc:	3000061e 	bne	r6,zero,80f9e8 <memcmp+0x34>
  80f9d0:	00000a06 	br	80f9fc <memcmp+0x48>
  80f9d4:	39ffffc4 	addi	r7,r7,-1
  80f9d8:	00bfffc4 	movi	r2,-1
  80f9dc:	21000044 	addi	r4,r4,1
  80f9e0:	29400044 	addi	r5,r5,1
  80f9e4:	38800526 	beq	r7,r2,80f9fc <memcmp+0x48>
  80f9e8:	20c00003 	ldbu	r3,0(r4)
  80f9ec:	28800003 	ldbu	r2,0(r5)
  80f9f0:	18bff826 	beq	r3,r2,80f9d4 <memcmp+0x20>
  80f9f4:	1885c83a 	sub	r2,r3,r2
  80f9f8:	f800283a 	ret
  80f9fc:	0005883a 	mov	r2,zero
  80fa00:	f800283a 	ret
  80fa04:	180f883a 	mov	r7,r3
  80fa08:	20c00017 	ldw	r3,0(r4)
  80fa0c:	28800017 	ldw	r2,0(r5)
  80fa10:	18bfed1e 	bne	r3,r2,80f9c8 <memcmp+0x14>
  80fa14:	31bfff04 	addi	r6,r6,-4
  80fa18:	21000104 	addi	r4,r4,4
  80fa1c:	29400104 	addi	r5,r5,4
  80fa20:	39bff936 	bltu	r7,r6,80fa08 <memcmp+0x54>
  80fa24:	003fe806 	br	80f9c8 <memcmp+0x14>

0080fa28 <__register_exitproc>:
  80fa28:	defffa04 	addi	sp,sp,-24
  80fa2c:	00802074 	movhi	r2,129
  80fa30:	10882604 	addi	r2,r2,8344
  80fa34:	dc000015 	stw	r16,0(sp)
  80fa38:	14000017 	ldw	r16,0(r2)
  80fa3c:	dd000415 	stw	r20,16(sp)
  80fa40:	2829883a 	mov	r20,r5
  80fa44:	81405217 	ldw	r5,328(r16)
  80fa48:	dcc00315 	stw	r19,12(sp)
  80fa4c:	dc800215 	stw	r18,8(sp)
  80fa50:	dc400115 	stw	r17,4(sp)
  80fa54:	dfc00515 	stw	ra,20(sp)
  80fa58:	2023883a 	mov	r17,r4
  80fa5c:	3027883a 	mov	r19,r6
  80fa60:	3825883a 	mov	r18,r7
  80fa64:	28002526 	beq	r5,zero,80fafc <__register_exitproc+0xd4>
  80fa68:	29000117 	ldw	r4,4(r5)
  80fa6c:	008007c4 	movi	r2,31
  80fa70:	11002716 	blt	r2,r4,80fb10 <__register_exitproc+0xe8>
  80fa74:	8800101e 	bne	r17,zero,80fab8 <__register_exitproc+0x90>
  80fa78:	2105883a 	add	r2,r4,r4
  80fa7c:	1085883a 	add	r2,r2,r2
  80fa80:	20c00044 	addi	r3,r4,1
  80fa84:	1145883a 	add	r2,r2,r5
  80fa88:	0009883a 	mov	r4,zero
  80fa8c:	15000215 	stw	r20,8(r2)
  80fa90:	28c00115 	stw	r3,4(r5)
  80fa94:	2005883a 	mov	r2,r4
  80fa98:	dfc00517 	ldw	ra,20(sp)
  80fa9c:	dd000417 	ldw	r20,16(sp)
  80faa0:	dcc00317 	ldw	r19,12(sp)
  80faa4:	dc800217 	ldw	r18,8(sp)
  80faa8:	dc400117 	ldw	r17,4(sp)
  80faac:	dc000017 	ldw	r16,0(sp)
  80fab0:	dec00604 	addi	sp,sp,24
  80fab4:	f800283a 	ret
  80fab8:	29802204 	addi	r6,r5,136
  80fabc:	00800044 	movi	r2,1
  80fac0:	110e983a 	sll	r7,r2,r4
  80fac4:	30c04017 	ldw	r3,256(r6)
  80fac8:	2105883a 	add	r2,r4,r4
  80facc:	1085883a 	add	r2,r2,r2
  80fad0:	1185883a 	add	r2,r2,r6
  80fad4:	19c6b03a 	or	r3,r3,r7
  80fad8:	14802015 	stw	r18,128(r2)
  80fadc:	14c00015 	stw	r19,0(r2)
  80fae0:	00800084 	movi	r2,2
  80fae4:	30c04015 	stw	r3,256(r6)
  80fae8:	88bfe31e 	bne	r17,r2,80fa78 <__register_exitproc+0x50>
  80faec:	30804117 	ldw	r2,260(r6)
  80faf0:	11c4b03a 	or	r2,r2,r7
  80faf4:	30804115 	stw	r2,260(r6)
  80faf8:	003fdf06 	br	80fa78 <__register_exitproc+0x50>
  80fafc:	00802074 	movhi	r2,129
  80fb00:	108fc904 	addi	r2,r2,16164
  80fb04:	100b883a 	mov	r5,r2
  80fb08:	80805215 	stw	r2,328(r16)
  80fb0c:	003fd606 	br	80fa68 <__register_exitproc+0x40>
  80fb10:	00800034 	movhi	r2,0
  80fb14:	10800004 	addi	r2,r2,0
  80fb18:	1000021e 	bne	r2,zero,80fb24 <__register_exitproc+0xfc>
  80fb1c:	013fffc4 	movi	r4,-1
  80fb20:	003fdc06 	br	80fa94 <__register_exitproc+0x6c>
  80fb24:	01006404 	movi	r4,400
  80fb28:	103ee83a 	callr	r2
  80fb2c:	1007883a 	mov	r3,r2
  80fb30:	103ffa26 	beq	r2,zero,80fb1c <__register_exitproc+0xf4>
  80fb34:	80805217 	ldw	r2,328(r16)
  80fb38:	180b883a 	mov	r5,r3
  80fb3c:	18000115 	stw	zero,4(r3)
  80fb40:	18800015 	stw	r2,0(r3)
  80fb44:	80c05215 	stw	r3,328(r16)
  80fb48:	18006215 	stw	zero,392(r3)
  80fb4c:	18006315 	stw	zero,396(r3)
  80fb50:	0009883a 	mov	r4,zero
  80fb54:	883fc826 	beq	r17,zero,80fa78 <__register_exitproc+0x50>
  80fb58:	003fd706 	br	80fab8 <__register_exitproc+0x90>

0080fb5c <register_fini>:
  80fb5c:	f800283a 	ret

0080fb60 <__call_exitprocs>:
  80fb60:	00802074 	movhi	r2,129
  80fb64:	10882604 	addi	r2,r2,8344
  80fb68:	10800017 	ldw	r2,0(r2)
  80fb6c:	defff304 	addi	sp,sp,-52
  80fb70:	df000b15 	stw	fp,44(sp)
  80fb74:	d8800115 	stw	r2,4(sp)
  80fb78:	00800034 	movhi	r2,0
  80fb7c:	10800004 	addi	r2,r2,0
  80fb80:	1005003a 	cmpeq	r2,r2,zero
  80fb84:	d8800215 	stw	r2,8(sp)
  80fb88:	d8800117 	ldw	r2,4(sp)
  80fb8c:	dd400815 	stw	r21,32(sp)
  80fb90:	dd000715 	stw	r20,28(sp)
  80fb94:	10805204 	addi	r2,r2,328
  80fb98:	dfc00c15 	stw	ra,48(sp)
  80fb9c:	ddc00a15 	stw	r23,40(sp)
  80fba0:	dd800915 	stw	r22,36(sp)
  80fba4:	dcc00615 	stw	r19,24(sp)
  80fba8:	dc800515 	stw	r18,20(sp)
  80fbac:	dc400415 	stw	r17,16(sp)
  80fbb0:	dc000315 	stw	r16,12(sp)
  80fbb4:	282b883a 	mov	r21,r5
  80fbb8:	2039883a 	mov	fp,r4
  80fbbc:	d8800015 	stw	r2,0(sp)
  80fbc0:	2829003a 	cmpeq	r20,r5,zero
  80fbc4:	d8800117 	ldw	r2,4(sp)
  80fbc8:	14405217 	ldw	r17,328(r2)
  80fbcc:	88001026 	beq	r17,zero,80fc10 <__call_exitprocs+0xb0>
  80fbd0:	ddc00017 	ldw	r23,0(sp)
  80fbd4:	88800117 	ldw	r2,4(r17)
  80fbd8:	8c802204 	addi	r18,r17,136
  80fbdc:	143fffc4 	addi	r16,r2,-1
  80fbe0:	80000916 	blt	r16,zero,80fc08 <__call_exitprocs+0xa8>
  80fbe4:	05bfffc4 	movi	r22,-1
  80fbe8:	a000151e 	bne	r20,zero,80fc40 <__call_exitprocs+0xe0>
  80fbec:	8409883a 	add	r4,r16,r16
  80fbf0:	2105883a 	add	r2,r4,r4
  80fbf4:	1485883a 	add	r2,r2,r18
  80fbf8:	10c02017 	ldw	r3,128(r2)
  80fbfc:	a8c01126 	beq	r21,r3,80fc44 <__call_exitprocs+0xe4>
  80fc00:	843fffc4 	addi	r16,r16,-1
  80fc04:	85bff81e 	bne	r16,r22,80fbe8 <__call_exitprocs+0x88>
  80fc08:	d8800217 	ldw	r2,8(sp)
  80fc0c:	10003126 	beq	r2,zero,80fcd4 <__call_exitprocs+0x174>
  80fc10:	dfc00c17 	ldw	ra,48(sp)
  80fc14:	df000b17 	ldw	fp,44(sp)
  80fc18:	ddc00a17 	ldw	r23,40(sp)
  80fc1c:	dd800917 	ldw	r22,36(sp)
  80fc20:	dd400817 	ldw	r21,32(sp)
  80fc24:	dd000717 	ldw	r20,28(sp)
  80fc28:	dcc00617 	ldw	r19,24(sp)
  80fc2c:	dc800517 	ldw	r18,20(sp)
  80fc30:	dc400417 	ldw	r17,16(sp)
  80fc34:	dc000317 	ldw	r16,12(sp)
  80fc38:	dec00d04 	addi	sp,sp,52
  80fc3c:	f800283a 	ret
  80fc40:	8409883a 	add	r4,r16,r16
  80fc44:	88c00117 	ldw	r3,4(r17)
  80fc48:	2105883a 	add	r2,r4,r4
  80fc4c:	1445883a 	add	r2,r2,r17
  80fc50:	18ffffc4 	addi	r3,r3,-1
  80fc54:	11800217 	ldw	r6,8(r2)
  80fc58:	1c001526 	beq	r3,r16,80fcb0 <__call_exitprocs+0x150>
  80fc5c:	10000215 	stw	zero,8(r2)
  80fc60:	303fe726 	beq	r6,zero,80fc00 <__call_exitprocs+0xa0>
  80fc64:	00c00044 	movi	r3,1
  80fc68:	1c06983a 	sll	r3,r3,r16
  80fc6c:	90804017 	ldw	r2,256(r18)
  80fc70:	8cc00117 	ldw	r19,4(r17)
  80fc74:	1884703a 	and	r2,r3,r2
  80fc78:	10001426 	beq	r2,zero,80fccc <__call_exitprocs+0x16c>
  80fc7c:	90804117 	ldw	r2,260(r18)
  80fc80:	1884703a 	and	r2,r3,r2
  80fc84:	10000c1e 	bne	r2,zero,80fcb8 <__call_exitprocs+0x158>
  80fc88:	2105883a 	add	r2,r4,r4
  80fc8c:	1485883a 	add	r2,r2,r18
  80fc90:	11400017 	ldw	r5,0(r2)
  80fc94:	e009883a 	mov	r4,fp
  80fc98:	303ee83a 	callr	r6
  80fc9c:	88800117 	ldw	r2,4(r17)
  80fca0:	98bfc81e 	bne	r19,r2,80fbc4 <__call_exitprocs+0x64>
  80fca4:	b8800017 	ldw	r2,0(r23)
  80fca8:	147fd526 	beq	r2,r17,80fc00 <__call_exitprocs+0xa0>
  80fcac:	003fc506 	br	80fbc4 <__call_exitprocs+0x64>
  80fcb0:	8c000115 	stw	r16,4(r17)
  80fcb4:	003fea06 	br	80fc60 <__call_exitprocs+0x100>
  80fcb8:	2105883a 	add	r2,r4,r4
  80fcbc:	1485883a 	add	r2,r2,r18
  80fcc0:	11000017 	ldw	r4,0(r2)
  80fcc4:	303ee83a 	callr	r6
  80fcc8:	003ff406 	br	80fc9c <__call_exitprocs+0x13c>
  80fccc:	303ee83a 	callr	r6
  80fcd0:	003ff206 	br	80fc9c <__call_exitprocs+0x13c>
  80fcd4:	88800117 	ldw	r2,4(r17)
  80fcd8:	1000081e 	bne	r2,zero,80fcfc <__call_exitprocs+0x19c>
  80fcdc:	89000017 	ldw	r4,0(r17)
  80fce0:	20000726 	beq	r4,zero,80fd00 <__call_exitprocs+0x1a0>
  80fce4:	b9000015 	stw	r4,0(r23)
  80fce8:	8809883a 	mov	r4,r17
  80fcec:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  80fcf0:	bc400017 	ldw	r17,0(r23)
  80fcf4:	883fb71e 	bne	r17,zero,80fbd4 <__call_exitprocs+0x74>
  80fcf8:	003fc506 	br	80fc10 <__call_exitprocs+0xb0>
  80fcfc:	89000017 	ldw	r4,0(r17)
  80fd00:	882f883a 	mov	r23,r17
  80fd04:	2023883a 	mov	r17,r4
  80fd08:	883fb21e 	bne	r17,zero,80fbd4 <__call_exitprocs+0x74>
  80fd0c:	003fc006 	br	80fc10 <__call_exitprocs+0xb0>

0080fd10 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80fd10:	defffd04 	addi	sp,sp,-12
  80fd14:	df000215 	stw	fp,8(sp)
  80fd18:	df000204 	addi	fp,sp,8
  80fd1c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80fd20:	e0bfff17 	ldw	r2,-4(fp)
  80fd24:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80fd28:	e0bffe17 	ldw	r2,-8(fp)
  80fd2c:	1005003a 	cmpeq	r2,r2,zero
  80fd30:	1000021e 	bne	r2,zero,80fd3c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80fd34:	002af070 	cmpltui	zero,zero,43969
  80fd38:	00000106 	br	80fd40 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80fd3c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80fd40:	e037883a 	mov	sp,fp
  80fd44:	df000017 	ldw	fp,0(sp)
  80fd48:	dec00104 	addi	sp,sp,4
  80fd4c:	f800283a 	ret

0080fd50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80fd50:	defffd04 	addi	sp,sp,-12
  80fd54:	dfc00215 	stw	ra,8(sp)
  80fd58:	df000115 	stw	fp,4(sp)
  80fd5c:	df000104 	addi	fp,sp,4
  80fd60:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80fd64:	e13fff17 	ldw	r4,-4(fp)
  80fd68:	080fd100 	call	80fd10 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80fd6c:	003fff06 	br	80fd6c <_exit+0x1c>
  80fd70:	0080fb5c 	xori	r2,zero,1005
