
cs303_a1.elf:     file format elf32-littlenios2
cs303_a1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000f2b0 memsz 0x0000f2b0 flags r-x
    LOAD off    0x000102d0 vaddr 0x0080f2d0 paddr 0x00810f64 align 2**12
         filesz 0x00001c94 memsz 0x00001c94 flags rw-
    LOAD off    0x00012bf8 vaddr 0x00812bf8 paddr 0x00812bf8 align 2**12
         filesz 0x00000000 memsz 0x00000344 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eb04  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000618  0080ecb8  0080ecb8  0000fcb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c94  0080f2d0  00810f64  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000344  00812bf8  00812bf8  00012bf8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00011f64  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  00011f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000017af  00000000  00000000  00012da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000293de  00000000  00000000  0001454f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008c5e  00000000  00000000  0003d92d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000164a0  00000000  00000000  0004658b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001e90  00000000  00000000  0005ca2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002487  00000000  00000000  0005e8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cc3b  00000000  00000000  00060d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006d980  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  0006d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00071d08  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00071d0b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00071d0e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00071d0f  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00071d10  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00071d14  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00071d18  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00071d1c  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00071d25  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00071d2e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00071d37  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000000d  00000000  00000000  00071d3d  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00062390  00000000  00000000  00071d4a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080ecb8 l    d  .rodata	00000000 .rodata
0080f2d0 l    d  .rwdata	00000000 .rwdata
00812bf8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tlc.c
00812bf8 l     O .bss	00000004 tlc_timer_event
00812bfc l     O .bss	00000004 camera_timer_event
00812c00 l     O .bss	00000004 pedestrianNS
00812c04 l     O .bss	00000004 pedestrianEW
00812c08 l     O .bss	00000004 vehicle_detected
0080f2d0 l     O .rwdata	00000018 timeout
0080f2e8 l     O .rwdata	0000001c timeout_buf
00810f14 l     O .rwdata	00000006 traffic_lights
00812c0c l     O .bss	00000004 mode
0080f304 l     O .rwdata	00000010 proc_state
00812c54 l     O .bss	00000018 tlc_timer
00812c10 l     O .bss	00000004 state.2918
00812c14 l     O .bss	00000004 state.2967
00812c6c l     O .bss	00000018 camera_timer
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080082c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00800ccc l     F .text	00000058 std
00800dd8 l     F .text	00000008 __fp_lock
00800de0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080f314 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
008027b0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802988 l     F .text	00000058 __sprint_r
0080ed70 l     O .rodata	00000010 blanks.3452
0080ed60 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00804ad4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00810f30 l     O .rwdata	00000004 charset
0080eda0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0080eee8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080902c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a9d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080aa34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ab34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080ac54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ad34 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ae90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080af9c l     F .text	000000dc alt_file_locked
0080b200 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080b380 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00810f4c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080b7c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080fcd0 l     O .rwdata	00001060 jtag_uart
00810d30 l     O .rwdata	00000120 lcd
00810e50 l     O .rwdata	000000c4 uart
0080b8e8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080bb28 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080bd50 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00810f58 l     O .rwdata	00000004 colstart
0080c3cc l     F .text	000000b8 lcd_write_command
0080c484 l     F .text	000000d4 lcd_write_data
0080c558 l     F .text	000000c4 lcd_clear_screen
0080c61c l     F .text	000001ec lcd_repaint_screen
0080c808 l     F .text	000000c8 lcd_scroll_up
0080c8d0 l     F .text	000002d0 lcd_handle_escape
0080d0ac l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080d30c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080d5cc l     F .text	0000009c altera_avalon_uart_irq
0080d668 l     F .text	000000e0 altera_avalon_uart_rxirq
0080d748 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080db34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080dd5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080deb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080e544 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0080f150 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080eaa0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080ec54 l     F .text	00000040 alt_sim_halt
00806ff8 g     F .text	00000094 _mprec_log10
00800288 g     F .text	00000060 lcd_set_mode
008070e4 g     F .text	00000088 __any_on
008067dc g     F .text	00000070 _isatty_r
0080eec0 g     O .rodata	00000028 __mprec_tinytens
0080aef0 g     F .text	0000006c alt_main
00812cac g     O .bss	00000100 alt_irq
00806910 g     F .text	00000078 _lseek_r
008005f4 g     F .text	0000001c clear_vehicle_detected
00810f64 g       *ABS*	00000000 __flash_rwdata_start
008062a0 g     F .text	000000a0 __sflags
00809b4c g     F .text	00000088 __eqdf2
00812f3c g       *ABS*	00000000 __alt_heap_start
00802574 g     F .text	00000044 printf
00802844 g     F .text	00000068 __sseek
00800d34 g     F .text	000000a4 __sinit
00806870 g     F .text	00000084 _setlocale_r
00800e34 g     F .text	00000068 __sfmoreglue
0080af7c g     F .text	00000020 __malloc_unlock
00806b0c g     F .text	000000e0 memmove
0080062c g     F .text	0000001c is_vehicle_detected
00800e24 g     F .text	00000010 _cleanup
0080716c g     F .text	000000bc _Balloc
00800524 g     F .text	00000020 buffer_timeout
00809c5c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080199c g     F .text	00000074 _fstat_r
00812c20 g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
00812c40 g     O .bss	00000004 alt_argv
00818f14 g       *ABS*	00000000 _gp
0080e680 g     F .text	00000030 usleep
008003d8 g     F .text	00000038 tlc_timer_isr
0080fb50 g     O .rwdata	00000180 alt_fd_list
0080dfdc g     F .text	00000094 alt_find_dev
00806a6c g     F .text	000000a0 memcpy
00800560 g     F .text	00000038 camera_timer_isr
00800e18 g     F .text	0000000c _cleanup_r
00809df4 g     F .text	000000f8 __floatsidf
0080e608 g     F .text	00000078 alt_io_redirect
00809d6c g     F .text	00000088 __ltdf2
0080ecb8 g       *ABS*	00000000 __DTOR_END__
00806f48 g     F .text	000000b0 __ratio
0080042c g     F .text	00000050 pedestrian_tlc
0080bf68 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008025b8 g     F .text	00000034 _printf_r
00800968 g     F .text	00000008 __udivsi3
0080ab94 g     F .text	000000c0 isatty
0080edd0 g     O .rodata	000000c8 __mprec_tens
0080684c g     F .text	00000008 __locale_charset
00800648 g     F .text	0000001c is_vehicle_left
0080e81c g     F .text	00000090 alt_icache_flush
00812c24 g     O .bss	00000004 __malloc_top_pad
00810f2c g     O .rwdata	00000004 __mb_cur_max
00806854 g     F .text	0000000c _localeconv_r
00807864 g     F .text	0000003c __i2b
00806340 g     F .text	0000049c __sfvwrite_r
008027cc g     F .text	00000070 _sbrk_r
008004a0 g     F .text	00000020 configurable_tlc
00807be0 g     F .text	00000078 _read_r
0080fb1c g     O .rwdata	0000000c __lc_ctype
00810f44 g     O .rwdata	00000004 alt_max_fd
0080a584 g     F .text	00000138 __unpack_d
00800978 g     F .text	00000110 _fclose_r
00800c98 g     F .text	00000034 fflush
008005d8 g     F .text	0000001c handle_vehicle_button
00812c28 g     O .bss	00000004 __malloc_max_sbrked_mem
008094bc g     F .text	00000074 __adddf3
00806e28 g     F .text	00000120 __b2d
00808a7c g     F .text	000005b0 __umoddi3
0080ada0 g     F .text	000000f0 lseek
00810f20 g     O .rwdata	00000004 _global_impure_ptr
00807c58 g     F .text	000005f4 _realloc_r
00812f3c g       *ABS*	00000000 __bss_end
0080e44c g     F .text	000000f8 alt_iic_isr_register
0080b594 g     F .text	0000010c alt_tick
008084a0 g     F .text	000005dc __udivdi3
0080ee98 g     O .rodata	00000028 __mprec_bigtens
00807ac0 g     F .text	00000120 __s2b
00809fc4 g     F .text	00000194 __floatunsidf
00806d48 g     F .text	00000060 __mcmp
0080d504 g     F .text	000000c8 altera_avalon_uart_init
00810f60 g     O .rwdata	00000004 __ctype_ptr
00800e00 g     F .text	00000018 __fp_lock_all
0080e404 g     F .text	00000048 alt_ic_irq_enabled
0080b4fc g     F .text	00000098 alt_alarm_stop
00800598 g     F .text	00000040 camera_tlc
00812c50 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080fb28 g     O .rwdata	00000028 alt_dev_null
0080ddbc g     F .text	00000044 alt_dcache_flush_all
00806c14 g     F .text	00000070 __hi0bits
00809eec g     F .text	000000d8 __fixdfsi
00810f64 g       *ABS*	00000000 __ram_rwdata_end
00810f3c g     O .rwdata	00000008 alt_dev_list
0080b6a0 g     F .text	00000120 write
0080f2d0 g       *ABS*	00000000 __ram_rodata_end
0080aa60 g     F .text	000000d4 fstat
0080109c g     F .text	0000002c fprintf
008079a0 g     F .text	00000120 __pow5mult
00812c30 g     O .bss	00000004 __nlocale_changed
00800970 g     F .text	00000008 __umodsi3
00812f3c g       *ABS*	00000000 end
0080cba0 g     F .text	0000050c altera_avalon_lcd_16207_write
0080db94 g     F .text	000001c8 altera_avalon_uart_write
00801978 g     F .text	00000024 fseek
0080ba68 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080ecb4 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080d37c g     F .text	00000090 alt_avalon_timer_sc_init
0080d464 g     F .text	00000058 altera_avalon_uart_write_fd
0080a1f0 g     F .text	00000080 __clzsi2
0080d4bc g     F .text	00000048 altera_avalon_uart_close_fd
0080c18c g     F .text	00000240 altera_avalon_jtag_uart_write
00800d24 g     F .text	00000004 __sfp_lock_acquire
00806988 g     F .text	000000e4 memchr
008029e0 g     F .text	00001eac ___vfprintf_internal_r
00801228 g     F .text	00000314 _free_r
0080eaa4 g     F .text	000001b0 __call_exitprocs
00812c34 g     O .bss	00000004 __mlocale_changed
00810f28 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
00812c48 g     O .bss	00000004 _alt_tick_rate
00807530 g     F .text	0000014c __lshift
00812c4c g     O .bss	00000004 _alt_nticks
0080b260 g     F .text	00000120 read
0080b854 g     F .text	00000094 alt_sys_init
008024fc g     F .text	00000078 _open_r
0080e96c g     F .text	00000134 __register_exitproc
00812c18 g     O .bss	00000004 uart_fp
0080767c g     F .text	000001e8 __multiply
0080be00 g     F .text	00000074 altera_avalon_jtag_uart_close
0080f2d0 g       *ABS*	00000000 __ram_rwdata_start
0080ecb8 g       *ABS*	00000000 __ram_rodata_start
00812c84 g     O .bss	00000028 __malloc_current_mallinfo
00807228 g     F .text	0000017c __d2b
0080b920 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080e190 g     F .text	000000b8 alt_get_fd
0080e6d0 g     F .text	0000014c alt_busy_sleep
0080a6bc g     F .text	000000c8 __fpcmp_parts_d
00804a64 g     F .text	00000070 _close_r
0080e8f8 g     F .text	00000074 memcmp
0080b9d0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00812f3c g       *ABS*	00000000 __alt_stack_base
0080ba18 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804928 g     F .text	0000013c __swsetup_r
008098f4 g     F .text	00000258 __divdf3
00800e9c g     F .text	000000f0 __sfp
0080708c g     F .text	00000058 __copybits
0080f714 g     O .rwdata	00000408 __malloc_av_
00800d30 g     F .text	00000004 __sinit_lock_release
00809530 g     F .text	000003c4 __muldf3
00802928 g     F .text	00000060 __sread
0080e070 g     F .text	00000120 alt_find_file
0080de00 g     F .text	000000b4 alt_dev_llist_insert
0080af5c g     F .text	00000020 __malloc_lock
008010c8 g     F .text	00000034 _fprintf_r
0080b440 g     F .text	000000bc sbrk
00800a9c g     F .text	000001fc _fflush_r
008083ec g     F .text	000000b4 _calloc_r
00801080 g     F .text	0000001c fopen
00812bf8 g       *ABS*	00000000 __bss_start
00802464 g     F .text	00000098 memset
00800748 g     F .text	000000e4 main
00812c44 g     O .bss	00000004 alt_envp
00812c2c g     O .bss	00000004 __malloc_max_total_mem
0080b978 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080d178 g     F .text	0000013c altera_avalon_lcd_16207_init
008004c0 g     F .text	00000048 config_tlc
0080283c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00800a88 g     F .text	00000014 fclose
00812dac g     O .bss	00000190 _atexit0
008002e8 g     F .text	00000028 buttons_driver
00804cec g     F .text	000015b4 _dtoa_r
00801d24 g     F .text	00000740 _malloc_r
00810f48 g     O .rwdata	00000004 alt_errno
0080047c g     F .text	00000024 NSEW_ped_isr
00801ad8 g     F .text	000000b8 _fwalk
008008a8 g     F .text	00000060 __divsi3
0080eef4 g     O .rodata	00000014 __thenan_df
008010fc g     F .text	0000012c _malloc_trim_r
00800544 g     F .text	0000001c update_timeout
0080ecb8 g       *ABS*	00000000 __CTOR_END__
008082bc g     F .text	000000bc strcmp
0080ecb8 g       *ABS*	00000000 __flash_rodata_start
0080ecb8 g       *ABS*	00000000 __DTOR_LIST__
00809bd4 g     F .text	00000088 __nedf2
0080b820 g     F .text	00000034 alt_irq_init
0080b3e0 g     F .text	00000060 alt_release_fd
0080ef08 g     O .rodata	00000100 __clz_tab
00812c38 g     O .bss	00000004 _PathLocale
00800664 g     F .text	000000e4 update_traffic_lights
0080e8ac g     F .text	00000014 atexit
008048b0 g     F .text	00000078 _write_r
008068f4 g     F .text	0000001c setlocale
00810f1c g     O .rwdata	00000004 _impure_ptr
00812c1c g     O .bss	00000004 lcd_fp
00812c3c g     O .bss	00000004 alt_argc
0080df78 g     F .text	00000064 _do_dtors
0080153c g     F .text	0000043c _fseek_r
00800508 g     F .text	0000001c timeout_data_handler
008025ec g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00806da8 g     F .text	00000080 __ulp
0080824c g     F .text	00000040 __isinfd
00800de8 g     F .text	00000018 __fp_unlock_all
0080d2b4 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
00810f34 g     O .rwdata	00000008 alt_fs_list
00800610 g     F .text	0000001c vehicle_checked
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806860 g     F .text	00000010 localeconv
0080e278 g     F .text	00000050 alt_ic_isr_register
00810f64 g       *ABS*	00000000 _edata
0080d40c g     F .text	00000058 altera_avalon_uart_read_fd
00812f3c g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080be74 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080e364 g     F .text	000000a0 alt_ic_irq_disable
008028ac g     F .text	0000007c __swrite
00810f24 g     O .rwdata	00000004 __malloc_trim_threshold
0080e6b0 g     F .text	00000020 altera_nios2_qsys_irq_init
0080e8c0 g     F .text	00000038 exit
00801a10 g     F .text	000000c8 _fwalk_reent
008073a4 g     F .text	0000018c __mdiff
00800310 g     F .text	000000c8 simple_tlc
00800908 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00800d28 g     F .text	00000004 __sfp_lock_release
00800200 g     F .text	00000088 init_tlc
0080f04c g     O .rodata	00000101 _ctype_
0080d8a4 g     F .text	00000060 altera_avalon_uart_close
00800f8c g     F .text	000000f4 _fopen_r
0080ec94 g     F .text	00000020 _exit
0080828c g     F .text	00000030 __isnand
0080a784 g     F .text	00000154 alt_alarm_start
0080a158 g     F .text	00000098 __muldi3
00801b90 g     F .text	00000194 __smakebuf_r
00808378 g     F .text	00000074 strlen
0080b078 g     F .text	00000188 open
00809ce4 g     F .text	00000088 __gedf2
0080e248 g     F .text	00000030 alt_icache_flush_all
00810f5c g     O .rwdata	00000004 alt_priority_mask
0080e2c8 g     F .text	0000009c alt_ic_irq_enable
0080488c g     F .text	00000024 __vfprintf_internal
0080d904 g     F .text	00000230 altera_avalon_uart_read
0080943c g     F .text	00000080 __subdf3
00806c84 g     F .text	000000c4 __lo0bits
00810f50 g     O .rwdata	00000008 alt_alarm_list
0080df14 g     F .text	00000064 _do_ctors
0080a8d8 g     F .text	000000fc close
00800410 g     F .text	0000001c init_buttons_pio
0080acb4 g     F .text	00000080 alt_load
0080a270 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00800d2c g     F .text	00000004 __sinit_lock_acquire
008078a0 g     F .text	00000100 __multadd
00806bec g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18cb2b04 	addi	r3,r3,11436
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18cb2b04 	addi	r3,r3,11436
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d6a3c514 	ori	gp,gp,36628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001d8:	108afe14 	ori	r2,r2,11256

    movhi r3, %hi(__bss_end)
  8001dc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001e0:	18cbcf14 	ori	r3,r3,12092

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	080acb40 	call	80acb4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	080aef00 	call	80aef0 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <init_tlc>:
static int proc_state[OPERATION_MODES + 1] = {-1, -1, -1, -1};

// Initialize the traffic light controller
// for any / all modes
void init_tlc(void)
{
  800200:	defffe04 	addi	sp,sp,-8
  800204:	dfc00115 	stw	ra,4(sp)
  800208:	df000015 	stw	fp,0(sp)
  80020c:	d839883a 	mov	fp,sp
	printf("Initializing TLC...");
  800210:	01002074 	movhi	r4,129
  800214:	213b2e04 	addi	r4,r4,-4936
  800218:	08025740 	call	802574 <printf>
	//start the TLC timer
	alt_alarm_start(&tlc_timer, timeout[proc_state[mode]], tlc_timer_isr, &tlc_timer_event);
  80021c:	d0a73e17 	ldw	r2,-25352(gp)
  800220:	00c02074 	movhi	r3,129
  800224:	18fcc104 	addi	r3,r3,-3324
  800228:	1085883a 	add	r2,r2,r2
  80022c:	1085883a 	add	r2,r2,r2
  800230:	10c5883a 	add	r2,r2,r3
  800234:	10800017 	ldw	r2,0(r2)
  800238:	00c02074 	movhi	r3,129
  80023c:	18fcb404 	addi	r3,r3,-3376
  800240:	1085883a 	add	r2,r2,r2
  800244:	1085883a 	add	r2,r2,r2
  800248:	10c5883a 	add	r2,r2,r3
  80024c:	11400017 	ldw	r5,0(r2)
  800250:	01002074 	movhi	r4,129
  800254:	210b1504 	addi	r4,r4,11348
  800258:	01802034 	movhi	r6,128
  80025c:	3180f604 	addi	r6,r6,984
  800260:	d1e73904 	addi	r7,gp,-25372
  800264:	080a7840 	call	80a784 <alt_alarm_start>
	//get the initial mode from the switcehes
	mode = 0;
  800268:	d0273e15 	stw	zero,-25352(gp)
	lcd_set_mode(mode);
  80026c:	d1273e17 	ldw	r4,-25352(gp)
  800270:	08002880 	call	800288 <lcd_set_mode>
}
  800274:	e037883a 	mov	sp,fp
  800278:	dfc00117 	ldw	ra,4(sp)
  80027c:	df000017 	ldw	fp,0(sp)
  800280:	dec00204 	addi	sp,sp,8
  800284:	f800283a 	ret

00800288 <lcd_set_mode>:
/* DESCRIPTION: Writes the mode to the LCD screen
 * PARAMETER:   mode - the current mode
 * RETURNS:     none
 */
void lcd_set_mode(unsigned int mode)
{
  800288:	defffd04 	addi	sp,sp,-12
  80028c:	dfc00215 	stw	ra,8(sp)
  800290:	df000115 	stw	fp,4(sp)
  800294:	df000104 	addi	fp,sp,4
  800298:	e13fff15 	stw	r4,-4(fp)

	lcd_fp = fopen(LCD_NAME, "w");
  80029c:	01002074 	movhi	r4,129
  8002a0:	213b3304 	addi	r4,r4,-4916
  8002a4:	01402074 	movhi	r5,129
  8002a8:	297b3604 	addi	r5,r5,-4904
  8002ac:	08010800 	call	801080 <fopen>
  8002b0:	d0a74215 	stw	r2,-25336(gp)
	fprintf(lcd_fp, "\x1B[2JTLC Mode: %d", mode+1);
  8002b4:	d1274217 	ldw	r4,-25336(gp)
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	11800044 	addi	r6,r2,1
  8002c0:	01402074 	movhi	r5,129
  8002c4:	297b3704 	addi	r5,r5,-4900
  8002c8:	080109c0 	call	80109c <fprintf>
	fclose(lcd_fp);
  8002cc:	d1274217 	ldw	r4,-25336(gp)
  8002d0:	0800a880 	call	800a88 <fclose>
}
  8002d4:	e037883a 	mov	sp,fp
  8002d8:	dfc00117 	ldw	ra,4(sp)
  8002dc:	df000017 	ldw	fp,0(sp)
  8002e0:	dec00204 	addi	sp,sp,8
  8002e4:	f800283a 	ret

008002e8 <buttons_driver>:
/* DESCRIPTION: Performs button-press detection and debouncing
 * PARAMETER:   button - referenced argument to indicate the state of the button
 * RETURNS:     none
 */
void buttons_driver(int* button)
{
  8002e8:	defffe04 	addi	sp,sp,-8
  8002ec:	df000115 	stw	fp,4(sp)
  8002f0:	df000104 	addi	fp,sp,4
  8002f4:	e13fff15 	stw	r4,-4(fp)
	// Persistant state of 'buttons_driver'
	static int state = 0;

	*button = 0;	// no assumption is made on intial value of *button
  8002f8:	e0bfff17 	ldw	r2,-4(fp)
  8002fc:	10000015 	stw	zero,0(r2)
	// Debounce state machine
		// call handle_mode_button()
}
  800300:	e037883a 	mov	sp,fp
  800304:	df000017 	ldw	fp,0(sp)
  800308:	dec00104 	addi	sp,sp,4
  80030c:	f800283a 	ret

00800310 <simple_tlc>:
/* DESCRIPTION: Simple traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void simple_tlc(int* state)
{
  800310:	defffd04 	addi	sp,sp,-12
  800314:	dfc00215 	stw	ra,8(sp)
  800318:	df000115 	stw	fp,4(sp)
  80031c:	df000104 	addi	fp,sp,4
  800320:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800324:	e0bfff17 	ldw	r2,-4(fp)
  800328:	10800017 	ldw	r2,0(r2)
  80032c:	10bfffd8 	cmpnei	r2,r2,-1
  800330:	1000071e 	bne	r2,zero,800350 <simple_tlc+0x40>
		// Process initialization state
		init_tlc();
  800334:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800338:	e0bfff17 	ldw	r2,-4(fp)
  80033c:	10800017 	ldw	r2,0(r2)
  800340:	10c00044 	addi	r3,r2,1
  800344:	e0bfff17 	ldw	r2,-4(fp)
  800348:	10c00015 	stw	r3,0(r2)
		return;
  80034c:	00001d06 	br	8003c4 <simple_tlc+0xb4>
	}

	// If the timeout has occured
	if (tlc_timer_event) {
  800350:	d0a73917 	ldw	r2,-25372(gp)
  800354:	1005003a 	cmpeq	r2,r2,zero
  800358:	10001a1e 	bne	r2,zero,8003c4 <simple_tlc+0xb4>
		alt_alarm_stop(&tlc_timer);
  80035c:	01002074 	movhi	r4,129
  800360:	210b1504 	addi	r4,r4,11348
  800364:	080b4fc0 	call	80b4fc <alt_alarm_stop>
		tlc_timer_event = 0;
  800368:	d0273915 	stw	zero,-25372(gp)
		*state = (*state+1)%6;
  80036c:	e0bfff17 	ldw	r2,-4(fp)
  800370:	10800017 	ldw	r2,0(r2)
  800374:	11000044 	addi	r4,r2,1
  800378:	01400184 	movi	r5,6
  80037c:	08009080 	call	800908 <__modsi3>
  800380:	1007883a 	mov	r3,r2
  800384:	e0bfff17 	ldw	r2,-4(fp)
  800388:	10c00015 	stw	r3,0(r2)
		alt_alarm_start(&tlc_timer, timeout[*state], tlc_timer_isr, &tlc_timer_event);
  80038c:	e0bfff17 	ldw	r2,-4(fp)
  800390:	10800017 	ldw	r2,0(r2)
  800394:	00c02074 	movhi	r3,129
  800398:	18fcb404 	addi	r3,r3,-3376
  80039c:	1085883a 	add	r2,r2,r2
  8003a0:	1085883a 	add	r2,r2,r2
  8003a4:	10c5883a 	add	r2,r2,r3
  8003a8:	11400017 	ldw	r5,0(r2)
  8003ac:	01002074 	movhi	r4,129
  8003b0:	210b1504 	addi	r4,r4,11348
  8003b4:	01802034 	movhi	r6,128
  8003b8:	3180f604 	addi	r6,r6,984
  8003bc:	d1e73904 	addi	r7,gp,-25372
  8003c0:	080a7840 	call	80a784 <alt_alarm_start>
	}
	/*
		// Increase state number (within bounds)
		// Restart timer with new timeout value
	*/
}
  8003c4:	e037883a 	mov	sp,fp
  8003c8:	dfc00117 	ldw	ra,4(sp)
  8003cc:	df000017 	ldw	fp,0(sp)
  8003d0:	dec00204 	addi	sp,sp,8
  8003d4:	f800283a 	ret

008003d8 <tlc_timer_isr>:
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 tlc_timer_isr(void* context)
{
  8003d8:	defffd04 	addi	sp,sp,-12
  8003dc:	df000215 	stw	fp,8(sp)
  8003e0:	df000204 	addi	fp,sp,8
  8003e4:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  8003e8:	e0bfff17 	ldw	r2,-4(fp)
  8003ec:	e0bffe15 	stw	r2,-8(fp)
	*trigger = 1;
  8003f0:	e0fffe17 	ldw	r3,-8(fp)
  8003f4:	00800044 	movi	r2,1
  8003f8:	18800015 	stw	r2,0(r3)
	return 0;
  8003fc:	0005883a 	mov	r2,zero
}
  800400:	e037883a 	mov	sp,fp
  800404:	df000017 	ldw	fp,0(sp)
  800408:	dec00104 	addi	sp,sp,4
  80040c:	f800283a 	ret

00800410 <init_buttons_pio>:
/* DESCRIPTION: Initialize the interrupts for all buttons
 * PARAMETER:   none
 * RETURNS:     none
 */
void init_buttons_pio(void)
{
  800410:	deffff04 	addi	sp,sp,-4
  800414:	df000015 	stw	fp,0(sp)
  800418:	d839883a 	mov	fp,sp
	// Initialize NS/EW pedestrian button
	// Reset the edge capture register

}
  80041c:	e037883a 	mov	sp,fp
  800420:	df000017 	ldw	fp,0(sp)
  800424:	dec00104 	addi	sp,sp,4
  800428:	f800283a 	ret

0080042c <pedestrian_tlc>:
/* DESCRIPTION: Pedestrian traffic light controller
 * PARAMETER:   state - state of the controller
 * RETURNS:     none
 */
void pedestrian_tlc(int* state)
{
  80042c:	defffd04 	addi	sp,sp,-12
  800430:	dfc00215 	stw	ra,8(sp)
  800434:	df000115 	stw	fp,4(sp)
  800438:	df000104 	addi	fp,sp,4
  80043c:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  800440:	e0bfff17 	ldw	r2,-4(fp)
  800444:	10800017 	ldw	r2,0(r2)
  800448:	10bfffd8 	cmpnei	r2,r2,-1
  80044c:	1000061e 	bne	r2,zero,800468 <pedestrian_tlc+0x3c>
		// Process initialization state
		init_tlc();
  800450:	08002000 	call	800200 <init_tlc>
		(*state)++;
  800454:	e0bfff17 	ldw	r2,-4(fp)
  800458:	10800017 	ldw	r2,0(r2)
  80045c:	10c00044 	addi	r3,r2,1
  800460:	e0bfff17 	ldw	r2,-4(fp)
  800464:	10c00015 	stw	r3,0(r2)

	// Same as simple TLC
	// with additional states / signals for Pedestrian crossings


}
  800468:	e037883a 	mov	sp,fp
  80046c:	dfc00117 	ldw	ra,4(sp)
  800470:	df000017 	ldw	fp,0(sp)
  800474:	dec00204 	addi	sp,sp,8
  800478:	f800283a 	ret

0080047c <NSEW_ped_isr>:
 * PARAMETER:   context - opaque reference to user data
 *              id - hardware interrupt number for the device
 * RETURNS:     none
 */
void NSEW_ped_isr(void* context, alt_u32 id)
{
  80047c:	defffd04 	addi	sp,sp,-12
  800480:	df000215 	stw	fp,8(sp)
  800484:	df000204 	addi	fp,sp,8
  800488:	e13ffe15 	stw	r4,-8(fp)
  80048c:	e17fff15 	stw	r5,-4(fp)
	// NOTE:
	// Cast context to volatile to avoid unwanted compiler optimization.
	// Store the value in the Button's edge capture register in *context


}
  800490:	e037883a 	mov	sp,fp
  800494:	df000017 	ldw	fp,0(sp)
  800498:	dec00104 	addi	sp,sp,4
  80049c:	f800283a 	ret

008004a0 <configurable_tlc>:
/*
If there is new configuration data... Load it.
Else run pedestrian_tlc();
*/
void configurable_tlc(int* state)
{
  8004a0:	defffe04 	addi	sp,sp,-8
  8004a4:	df000115 	stw	fp,4(sp)
  8004a8:	df000104 	addi	fp,sp,4
  8004ac:	e13fff15 	stw	r4,-4(fp)
		// Process initialization state
		return;
	}


}
  8004b0:	e037883a 	mov	sp,fp
  8004b4:	df000017 	ldw	fp,0(sp)
  8004b8:	dec00104 	addi	sp,sp,4
  8004bc:	f800283a 	ret

008004c0 <config_tlc>:
 */
/*
Puts the TLC in a 'safe' state... then begins update
*/
int config_tlc(int* tl_state)
{
  8004c0:	defffd04 	addi	sp,sp,-12
  8004c4:	df000215 	stw	fp,8(sp)
  8004c8:	df000204 	addi	fp,sp,8
  8004cc:	e13ffe15 	stw	r4,-8(fp)
	// State of configuration
	static int state = 0;

	if (*tl_state == -1) {
  8004d0:	e0bffe17 	ldw	r2,-8(fp)
  8004d4:	10800017 	ldw	r2,0(r2)
  8004d8:	10bfffd8 	cmpnei	r2,r2,-1
  8004dc:	1000031e 	bne	r2,zero,8004ec <config_tlc+0x2c>
		// Process initialization state
		state = 0;
  8004e0:	d0274015 	stw	zero,-25344(gp)
		return 0;
  8004e4:	e03fff15 	stw	zero,-4(fp)
  8004e8:	00000206 	br	8004f4 <config_tlc+0x34>
	}

	return state;
  8004ec:	d0a74017 	ldw	r2,-25344(gp)
  8004f0:	e0bfff15 	stw	r2,-4(fp)
  8004f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8004f8:	e037883a 	mov	sp,fp
  8004fc:	df000017 	ldw	fp,0(sp)
  800500:	dec00104 	addi	sp,sp,4
  800504:	f800283a 	ret

00800508 <timeout_data_handler>:
 */
/*
 buffer_timeout() must be used 'for atomic transfer to the main timeout buffer'
*/
void timeout_data_handler(void)
{
  800508:	deffff04 	addi	sp,sp,-4
  80050c:	df000015 	stw	fp,0(sp)
  800510:	d839883a 	mov	fp,sp

}
  800514:	e037883a 	mov	sp,fp
  800518:	df000017 	ldw	fp,0(sp)
  80051c:	dec00104 	addi	sp,sp,4
  800520:	f800283a 	ret

00800524 <buffer_timeout>:
 *              transfer to the main timeout buffer at a later stage
 * PARAMETER:   value - value to store in the buffer
 * RETURNS:     none
 */
void buffer_timeout(unsigned int value)
{
  800524:	defffe04 	addi	sp,sp,-8
  800528:	df000115 	stw	fp,4(sp)
  80052c:	df000104 	addi	fp,sp,4
  800530:	e13fff15 	stw	r4,-4(fp)

}
  800534:	e037883a 	mov	sp,fp
  800538:	df000017 	ldw	fp,0(sp)
  80053c:	dec00104 	addi	sp,sp,4
  800540:	f800283a 	ret

00800544 <update_timeout>:
 *              allowing the update
 * PARAMETER:   none
 * RETURNS:     1 if update is completed; 0 otherwise
 */
int update_timeout(void)
{
  800544:	deffff04 	addi	sp,sp,-4
  800548:	df000015 	stw	fp,0(sp)
  80054c:	d839883a 	mov	fp,sp

}
  800550:	e037883a 	mov	sp,fp
  800554:	df000017 	ldw	fp,0(sp)
  800558:	dec00104 	addi	sp,sp,4
  80055c:	f800283a 	ret

00800560 <camera_timer_isr>:
 * PARAMETER:   context - opaque reference to user data
 * RETURNS:     Number of 'ticks' until the next timer interrupt. A return value
 *              of zero stops the timer.
 */
alt_u32 camera_timer_isr(void* context)
{
  800560:	defffd04 	addi	sp,sp,-12
  800564:	df000215 	stw	fp,8(sp)
  800568:	df000204 	addi	fp,sp,8
  80056c:	e13fff15 	stw	r4,-4(fp)
	volatile int* trigger = (volatile int*)context;
  800570:	e0bfff17 	ldw	r2,-4(fp)
  800574:	e0bffe15 	stw	r2,-8(fp)
	*trigger = 1;
  800578:	e0fffe17 	ldw	r3,-8(fp)
  80057c:	00800044 	movi	r2,1
  800580:	18800015 	stw	r2,0(r3)
	return 0;
  800584:	0005883a 	mov	r2,zero
}
  800588:	e037883a 	mov	sp,fp
  80058c:	df000017 	ldw	fp,0(sp)
  800590:	dec00104 	addi	sp,sp,4
  800594:	f800283a 	ret

00800598 <camera_tlc>:
 /*
 Same functionality as configurable_tlc
 But also handles Red-light camera
 */
void camera_tlc(int* state)
{
  800598:	defffd04 	addi	sp,sp,-12
  80059c:	dfc00215 	stw	ra,8(sp)
  8005a0:	df000115 	stw	fp,4(sp)
  8005a4:	df000104 	addi	fp,sp,4
  8005a8:	e13fff15 	stw	r4,-4(fp)
	if (*state == -1) {
  8005ac:	e0bfff17 	ldw	r2,-4(fp)
  8005b0:	10800017 	ldw	r2,0(r2)
  8005b4:	10bfffd8 	cmpnei	r2,r2,-1
  8005b8:	1000021e 	bne	r2,zero,8005c4 <camera_tlc+0x2c>
		configurable_tlc(state);
  8005bc:	e13fff17 	ldw	r4,-4(fp)
  8005c0:	08004a00 	call	8004a0 <configurable_tlc>
		return;
	}

}
  8005c4:	e037883a 	mov	sp,fp
  8005c8:	dfc00117 	ldw	ra,4(sp)
  8005cc:	df000017 	ldw	fp,0(sp)
  8005d0:	dec00204 	addi	sp,sp,8
  8005d4:	f800283a 	ret

008005d8 <handle_vehicle_button>:
/* DESCRIPTION: Simulates the entry and exit of vehicles at the intersection
 * PARAMETER:   none
 * RETURNS:     none
 */
void handle_vehicle_button(void)
{
  8005d8:	deffff04 	addi	sp,sp,-4
  8005dc:	df000015 	stw	fp,0(sp)
  8005e0:	d839883a 	mov	fp,sp

}
  8005e4:	e037883a 	mov	sp,fp
  8005e8:	df000017 	ldw	fp,0(sp)
  8005ec:	dec00104 	addi	sp,sp,4
  8005f0:	f800283a 	ret

008005f4 <clear_vehicle_detected>:

// set vehicle_detected to 'no vehicle' state
void clear_vehicle_detected(void)
{
  8005f4:	deffff04 	addi	sp,sp,-4
  8005f8:	df000015 	stw	fp,0(sp)
  8005fc:	d839883a 	mov	fp,sp
}
  800600:	e037883a 	mov	sp,fp
  800604:	df000017 	ldw	fp,0(sp)
  800608:	dec00104 	addi	sp,sp,4
  80060c:	f800283a 	ret

00800610 <vehicle_checked>:
// set vehicle_detected to 'checking' state
void vehicle_checked(void)
{
  800610:	deffff04 	addi	sp,sp,-4
  800614:	df000015 	stw	fp,0(sp)
  800618:	d839883a 	mov	fp,sp
}
  80061c:	e037883a 	mov	sp,fp
  800620:	df000017 	ldw	fp,0(sp)
  800624:	dec00104 	addi	sp,sp,4
  800628:	f800283a 	ret

0080062c <is_vehicle_detected>:
// return true or false if a vehicle has been detected
int is_vehicle_detected(void)
{
  80062c:	deffff04 	addi	sp,sp,-4
  800630:	df000015 	stw	fp,0(sp)
  800634:	d839883a 	mov	fp,sp
}
  800638:	e037883a 	mov	sp,fp
  80063c:	df000017 	ldw	fp,0(sp)
  800640:	dec00104 	addi	sp,sp,4
  800644:	f800283a 	ret

00800648 <is_vehicle_left>:
// return true or false if the vehicle has left the intersection yet
int is_vehicle_left(void)
{
  800648:	deffff04 	addi	sp,sp,-4
  80064c:	df000015 	stw	fp,0(sp)
  800650:	d839883a 	mov	fp,sp
}
  800654:	e037883a 	mov	sp,fp
  800658:	df000017 	ldw	fp,0(sp)
  80065c:	dec00104 	addi	sp,sp,4
  800660:	f800283a 	ret

00800664 <update_traffic_lights>:

void update_traffic_lights(void) {
  800664:	defffe04 	addi	sp,sp,-8
  800668:	df000115 	stw	fp,4(sp)
  80066c:	df000104 	addi	fp,sp,4
	switch (proc_state[mode]) {
  800670:	d0a73e17 	ldw	r2,-25352(gp)
  800674:	00c02074 	movhi	r3,129
  800678:	18fcc104 	addi	r3,r3,-3324
  80067c:	1085883a 	add	r2,r2,r2
  800680:	1085883a 	add	r2,r2,r2
  800684:	10c5883a 	add	r2,r2,r3
  800688:	10800017 	ldw	r2,0(r2)
  80068c:	e0bfff15 	stw	r2,-4(fp)
  800690:	e0ffff17 	ldw	r3,-4(fp)
  800694:	188001a8 	cmpgeui	r2,r3,6
  800698:	1000271e 	bne	r2,zero,800738 <update_traffic_lights+0xd4>
  80069c:	e13fff17 	ldw	r4,-4(fp)
  8006a0:	e13fff17 	ldw	r4,-4(fp)
  8006a4:	2105883a 	add	r2,r4,r4
  8006a8:	1087883a 	add	r3,r2,r2
  8006ac:	00802034 	movhi	r2,128
  8006b0:	1081b004 	addi	r2,r2,1728
  8006b4:	1885883a 	add	r2,r3,r2
  8006b8:	10800017 	ldw	r2,0(r2)
  8006bc:	1000683a 	jmp	r2
  8006c0:	008006d8 	cmpnei	r2,zero,27
  8006c4:	00800714 	movui	r2,28
  8006c8:	00800728 	cmpgeui	r2,zero,28
  8006cc:	008006d8 	cmpnei	r2,zero,27
  8006d0:	008006ec 	andhi	r2,zero,27
  8006d4:	00800700 	call	80070 <__reset-0x77ff90>
	case RR0:
	case RR1:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x24);
  8006d8:	00c04074 	movhi	r3,257
  8006dc:	18c41804 	addi	r3,r3,4192
  8006e0:	00800904 	movi	r2,36
  8006e4:	18800035 	stwio	r2,0(r3)
		break;
  8006e8:	00001306 	br	800738 <update_traffic_lights+0xd4>
	case RG:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x21);
  8006ec:	00c04074 	movhi	r3,257
  8006f0:	18c41804 	addi	r3,r3,4192
  8006f4:	00800844 	movi	r2,33
  8006f8:	18800035 	stwio	r2,0(r3)
		break;
  8006fc:	00000e06 	br	800738 <update_traffic_lights+0xd4>
	case RY:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x22);
  800700:	00c04074 	movhi	r3,257
  800704:	18c41804 	addi	r3,r3,4192
  800708:	00800884 	movi	r2,34
  80070c:	18800035 	stwio	r2,0(r3)
		break;
  800710:	00000906 	br	800738 <update_traffic_lights+0xd4>
	case GR:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x0C);
  800714:	00c04074 	movhi	r3,257
  800718:	18c41804 	addi	r3,r3,4192
  80071c:	00800304 	movi	r2,12
  800720:	18800035 	stwio	r2,0(r3)
		break;
  800724:	00000406 	br	800738 <update_traffic_lights+0xd4>
	case YR:
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,0x14);
  800728:	00c04074 	movhi	r3,257
  80072c:	18c41804 	addi	r3,r3,4192
  800730:	00800504 	movi	r2,20
  800734:	18800035 	stwio	r2,0(r3)
		break;
	//default:
		//printf("TLC state invalid: %d  mode: %d\n", proc_state[mode], mode+1);
	}
}
  800738:	e037883a 	mov	sp,fp
  80073c:	df000017 	ldw	fp,0(sp)
  800740:	dec00104 	addi	sp,sp,4
  800744:	f800283a 	ret

00800748 <main>:


int main(void)
{
  800748:	defffc04 	addi	sp,sp,-16
  80074c:	dfc00315 	stw	ra,12(sp)
  800750:	df000215 	stw	fp,8(sp)
  800754:	df000204 	addi	fp,sp,8
	int buttons = 0;			// status of mode button
  800758:	e03ffe15 	stw	zero,-8(fp)

	lcd_set_mode(0);		// initialize lcd
  80075c:	0009883a 	mov	r4,zero
  800760:	08002880 	call	800288 <lcd_set_mode>
	init_buttons_pio();			// initialize buttons
  800764:	08004100 	call	800410 <init_buttons_pio>
	while (1) {
		// Button detection & debouncing

		// if Mode switches change:
		if (mode != (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3)) {
  800768:	00804074 	movhi	r2,257
  80076c:	10842404 	addi	r2,r2,4240
  800770:	10800037 	ldwio	r2,0(r2)
  800774:	10c000cc 	andi	r3,r2,3
  800778:	d0a73e17 	ldw	r2,-25352(gp)
  80077c:	18800b26 	beq	r3,r2,8007ac <main+0x64>
			mode = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3;
  800780:	00804074 	movhi	r2,257
  800784:	10842404 	addi	r2,r2,4240
  800788:	10800037 	ldwio	r2,0(r2)
  80078c:	108000cc 	andi	r2,r2,3
  800790:	d0a73e15 	stw	r2,-25352(gp)
			printf("mode: %08x\n", mode);
  800794:	d1673e17 	ldw	r5,-25352(gp)
  800798:	01002074 	movhi	r4,129
  80079c:	213b3c04 	addi	r4,r4,-4880
  8007a0:	08025740 	call	802574 <printf>
			lcd_set_mode(mode);
  8007a4:	d1273e17 	ldw	r4,-25352(gp)
  8007a8:	08002880 	call	800288 <lcd_set_mode>
		}
		// if Car button pushed...
			// handle_vehicle_button

		// Execute the correct TLC
    	switch (mode) {
  8007ac:	d0a73e17 	ldw	r2,-25352(gp)
  8007b0:	e0bfff15 	stw	r2,-4(fp)
  8007b4:	e0ffff17 	ldw	r3,-4(fp)
  8007b8:	18800060 	cmpeqi	r2,r3,1
  8007bc:	10000e1e 	bne	r2,zero,8007f8 <main+0xb0>
  8007c0:	e0ffff17 	ldw	r3,-4(fp)
  8007c4:	18800070 	cmpltui	r2,r3,1
  8007c8:	1000071e 	bne	r2,zero,8007e8 <main+0xa0>
  8007cc:	e0ffff17 	ldw	r3,-4(fp)
  8007d0:	188000a0 	cmpeqi	r2,r3,2
  8007d4:	10000c1e 	bne	r2,zero,800808 <main+0xc0>
  8007d8:	e0ffff17 	ldw	r3,-4(fp)
  8007dc:	188000e0 	cmpeqi	r2,r3,3
  8007e0:	10000d1e 	bne	r2,zero,800818 <main+0xd0>
  8007e4:	00000f06 	br	800824 <main+0xdc>
			case 0:
				simple_tlc(&proc_state[0]);
  8007e8:	01002074 	movhi	r4,129
  8007ec:	213cc104 	addi	r4,r4,-3324
  8007f0:	08003100 	call	800310 <simple_tlc>
				break;
  8007f4:	00000b06 	br	800824 <main+0xdc>
			case 1:
				pedestrian_tlc(&proc_state[1]);
  8007f8:	01002074 	movhi	r4,129
  8007fc:	213cc204 	addi	r4,r4,-3320
  800800:	080042c0 	call	80042c <pedestrian_tlc>
				break;
  800804:	00000706 	br	800824 <main+0xdc>
			case 2:
				configurable_tlc(&proc_state[2]);
  800808:	01002074 	movhi	r4,129
  80080c:	213cc304 	addi	r4,r4,-3316
  800810:	08004a00 	call	8004a0 <configurable_tlc>
				break;
  800814:	00000306 	br	800824 <main+0xdc>
			case 3:
				camera_tlc(&proc_state[3]);
  800818:	01002074 	movhi	r4,129
  80081c:	213cc404 	addi	r4,r4,-3312
  800820:	08005980 	call	800598 <camera_tlc>
				break;
		}
		// Update Displays
    	// Update LED display:
    	update_traffic_lights();
  800824:	08006640 	call	800664 <update_traffic_lights>

	}
  800828:	003fcf06 	br	800768 <main+0x20>

0080082c <udivmodsi4>:
  80082c:	29001b2e 	bgeu	r5,r4,80089c <udivmodsi4+0x70>
  800830:	28001a16 	blt	r5,zero,80089c <udivmodsi4+0x70>
  800834:	00800044 	movi	r2,1
  800838:	0007883a 	mov	r3,zero
  80083c:	01c007c4 	movi	r7,31
  800840:	00000306 	br	800850 <udivmodsi4+0x24>
  800844:	19c01326 	beq	r3,r7,800894 <udivmodsi4+0x68>
  800848:	18c00044 	addi	r3,r3,1
  80084c:	28000416 	blt	r5,zero,800860 <udivmodsi4+0x34>
  800850:	294b883a 	add	r5,r5,r5
  800854:	1085883a 	add	r2,r2,r2
  800858:	293ffa36 	bltu	r5,r4,800844 <udivmodsi4+0x18>
  80085c:	10000d26 	beq	r2,zero,800894 <udivmodsi4+0x68>
  800860:	0007883a 	mov	r3,zero
  800864:	21400236 	bltu	r4,r5,800870 <udivmodsi4+0x44>
  800868:	2149c83a 	sub	r4,r4,r5
  80086c:	1886b03a 	or	r3,r3,r2
  800870:	1004d07a 	srli	r2,r2,1
  800874:	280ad07a 	srli	r5,r5,1
  800878:	103ffa1e 	bne	r2,zero,800864 <udivmodsi4+0x38>
  80087c:	30000226 	beq	r6,zero,800888 <udivmodsi4+0x5c>
  800880:	2005883a 	mov	r2,r4
  800884:	f800283a 	ret
  800888:	1809883a 	mov	r4,r3
  80088c:	2005883a 	mov	r2,r4
  800890:	f800283a 	ret
  800894:	0007883a 	mov	r3,zero
  800898:	003ff806 	br	80087c <udivmodsi4+0x50>
  80089c:	00800044 	movi	r2,1
  8008a0:	0007883a 	mov	r3,zero
  8008a4:	003fef06 	br	800864 <udivmodsi4+0x38>

008008a8 <__divsi3>:
  8008a8:	defffe04 	addi	sp,sp,-8
  8008ac:	dc000015 	stw	r16,0(sp)
  8008b0:	dfc00115 	stw	ra,4(sp)
  8008b4:	0021883a 	mov	r16,zero
  8008b8:	20000c16 	blt	r4,zero,8008ec <__divsi3+0x44>
  8008bc:	000d883a 	mov	r6,zero
  8008c0:	28000e16 	blt	r5,zero,8008fc <__divsi3+0x54>
  8008c4:	080082c0 	call	80082c <udivmodsi4>
  8008c8:	1007883a 	mov	r3,r2
  8008cc:	8005003a 	cmpeq	r2,r16,zero
  8008d0:	1000011e 	bne	r2,zero,8008d8 <__divsi3+0x30>
  8008d4:	00c7c83a 	sub	r3,zero,r3
  8008d8:	1805883a 	mov	r2,r3
  8008dc:	dfc00117 	ldw	ra,4(sp)
  8008e0:	dc000017 	ldw	r16,0(sp)
  8008e4:	dec00204 	addi	sp,sp,8
  8008e8:	f800283a 	ret
  8008ec:	0109c83a 	sub	r4,zero,r4
  8008f0:	04000044 	movi	r16,1
  8008f4:	000d883a 	mov	r6,zero
  8008f8:	283ff20e 	bge	r5,zero,8008c4 <__divsi3+0x1c>
  8008fc:	014bc83a 	sub	r5,zero,r5
  800900:	8021003a 	cmpeq	r16,r16,zero
  800904:	003fef06 	br	8008c4 <__divsi3+0x1c>

00800908 <__modsi3>:
  800908:	deffff04 	addi	sp,sp,-4
  80090c:	dfc00015 	stw	ra,0(sp)
  800910:	01800044 	movi	r6,1
  800914:	2807883a 	mov	r3,r5
  800918:	20000416 	blt	r4,zero,80092c <__modsi3+0x24>
  80091c:	28000c16 	blt	r5,zero,800950 <__modsi3+0x48>
  800920:	dfc00017 	ldw	ra,0(sp)
  800924:	dec00104 	addi	sp,sp,4
  800928:	080082c1 	jmpi	80082c <udivmodsi4>
  80092c:	0109c83a 	sub	r4,zero,r4
  800930:	28000b16 	blt	r5,zero,800960 <__modsi3+0x58>
  800934:	180b883a 	mov	r5,r3
  800938:	01800044 	movi	r6,1
  80093c:	080082c0 	call	80082c <udivmodsi4>
  800940:	0085c83a 	sub	r2,zero,r2
  800944:	dfc00017 	ldw	ra,0(sp)
  800948:	dec00104 	addi	sp,sp,4
  80094c:	f800283a 	ret
  800950:	014bc83a 	sub	r5,zero,r5
  800954:	dfc00017 	ldw	ra,0(sp)
  800958:	dec00104 	addi	sp,sp,4
  80095c:	080082c1 	jmpi	80082c <udivmodsi4>
  800960:	0147c83a 	sub	r3,zero,r5
  800964:	003ff306 	br	800934 <__modsi3+0x2c>

00800968 <__udivsi3>:
  800968:	000d883a 	mov	r6,zero
  80096c:	080082c1 	jmpi	80082c <udivmodsi4>

00800970 <__umodsi3>:
  800970:	01800044 	movi	r6,1
  800974:	080082c1 	jmpi	80082c <udivmodsi4>

00800978 <_fclose_r>:
  800978:	defffc04 	addi	sp,sp,-16
  80097c:	dc400115 	stw	r17,4(sp)
  800980:	dc000015 	stw	r16,0(sp)
  800984:	dfc00315 	stw	ra,12(sp)
  800988:	dc800215 	stw	r18,8(sp)
  80098c:	2821883a 	mov	r16,r5
  800990:	2023883a 	mov	r17,r4
  800994:	28002926 	beq	r5,zero,800a3c <_fclose_r+0xc4>
  800998:	0800d240 	call	800d24 <__sfp_lock_acquire>
  80099c:	88000226 	beq	r17,zero,8009a8 <_fclose_r+0x30>
  8009a0:	88800e17 	ldw	r2,56(r17)
  8009a4:	10002d26 	beq	r2,zero,800a5c <_fclose_r+0xe4>
  8009a8:	8080030f 	ldh	r2,12(r16)
  8009ac:	10002226 	beq	r2,zero,800a38 <_fclose_r+0xc0>
  8009b0:	8809883a 	mov	r4,r17
  8009b4:	800b883a 	mov	r5,r16
  8009b8:	0800a9c0 	call	800a9c <_fflush_r>
  8009bc:	1025883a 	mov	r18,r2
  8009c0:	80800b17 	ldw	r2,44(r16)
  8009c4:	10000426 	beq	r2,zero,8009d8 <_fclose_r+0x60>
  8009c8:	81400717 	ldw	r5,28(r16)
  8009cc:	8809883a 	mov	r4,r17
  8009d0:	103ee83a 	callr	r2
  8009d4:	10002a16 	blt	r2,zero,800a80 <_fclose_r+0x108>
  8009d8:	8080030b 	ldhu	r2,12(r16)
  8009dc:	1080200c 	andi	r2,r2,128
  8009e0:	1000231e 	bne	r2,zero,800a70 <_fclose_r+0xf8>
  8009e4:	81400c17 	ldw	r5,48(r16)
  8009e8:	28000526 	beq	r5,zero,800a00 <_fclose_r+0x88>
  8009ec:	80801004 	addi	r2,r16,64
  8009f0:	28800226 	beq	r5,r2,8009fc <_fclose_r+0x84>
  8009f4:	8809883a 	mov	r4,r17
  8009f8:	08012280 	call	801228 <_free_r>
  8009fc:	80000c15 	stw	zero,48(r16)
  800a00:	81401117 	ldw	r5,68(r16)
  800a04:	28000326 	beq	r5,zero,800a14 <_fclose_r+0x9c>
  800a08:	8809883a 	mov	r4,r17
  800a0c:	08012280 	call	801228 <_free_r>
  800a10:	80001115 	stw	zero,68(r16)
  800a14:	8000030d 	sth	zero,12(r16)
  800a18:	0800d280 	call	800d28 <__sfp_lock_release>
  800a1c:	9005883a 	mov	r2,r18
  800a20:	dfc00317 	ldw	ra,12(sp)
  800a24:	dc800217 	ldw	r18,8(sp)
  800a28:	dc400117 	ldw	r17,4(sp)
  800a2c:	dc000017 	ldw	r16,0(sp)
  800a30:	dec00404 	addi	sp,sp,16
  800a34:	f800283a 	ret
  800a38:	0800d280 	call	800d28 <__sfp_lock_release>
  800a3c:	0025883a 	mov	r18,zero
  800a40:	9005883a 	mov	r2,r18
  800a44:	dfc00317 	ldw	ra,12(sp)
  800a48:	dc800217 	ldw	r18,8(sp)
  800a4c:	dc400117 	ldw	r17,4(sp)
  800a50:	dc000017 	ldw	r16,0(sp)
  800a54:	dec00404 	addi	sp,sp,16
  800a58:	f800283a 	ret
  800a5c:	8809883a 	mov	r4,r17
  800a60:	0800d340 	call	800d34 <__sinit>
  800a64:	8080030f 	ldh	r2,12(r16)
  800a68:	103fd11e 	bne	r2,zero,8009b0 <_fclose_r+0x38>
  800a6c:	003ff206 	br	800a38 <_fclose_r+0xc0>
  800a70:	81400417 	ldw	r5,16(r16)
  800a74:	8809883a 	mov	r4,r17
  800a78:	08012280 	call	801228 <_free_r>
  800a7c:	003fd906 	br	8009e4 <_fclose_r+0x6c>
  800a80:	04bfffc4 	movi	r18,-1
  800a84:	003fd406 	br	8009d8 <_fclose_r+0x60>

00800a88 <fclose>:
  800a88:	00802074 	movhi	r2,129
  800a8c:	1083c704 	addi	r2,r2,3868
  800a90:	200b883a 	mov	r5,r4
  800a94:	11000017 	ldw	r4,0(r2)
  800a98:	08009781 	jmpi	800978 <_fclose_r>

00800a9c <_fflush_r>:
  800a9c:	defffb04 	addi	sp,sp,-20
  800aa0:	dcc00315 	stw	r19,12(sp)
  800aa4:	dc800215 	stw	r18,8(sp)
  800aa8:	dfc00415 	stw	ra,16(sp)
  800aac:	dc400115 	stw	r17,4(sp)
  800ab0:	dc000015 	stw	r16,0(sp)
  800ab4:	2027883a 	mov	r19,r4
  800ab8:	2825883a 	mov	r18,r5
  800abc:	20000226 	beq	r4,zero,800ac8 <_fflush_r+0x2c>
  800ac0:	20800e17 	ldw	r2,56(r4)
  800ac4:	10005626 	beq	r2,zero,800c20 <_fflush_r+0x184>
  800ac8:	9100030b 	ldhu	r4,12(r18)
  800acc:	20ffffcc 	andi	r3,r4,65535
  800ad0:	18e0001c 	xori	r3,r3,32768
  800ad4:	18e00004 	addi	r3,r3,-32768
  800ad8:	1880020c 	andi	r2,r3,8
  800adc:	1000261e 	bne	r2,zero,800b78 <_fflush_r+0xdc>
  800ae0:	90c00117 	ldw	r3,4(r18)
  800ae4:	20820014 	ori	r2,r4,2048
  800ae8:	9080030d 	sth	r2,12(r18)
  800aec:	1009883a 	mov	r4,r2
  800af0:	00c0400e 	bge	zero,r3,800bf4 <_fflush_r+0x158>
  800af4:	92000a17 	ldw	r8,40(r18)
  800af8:	40004026 	beq	r8,zero,800bfc <_fflush_r+0x160>
  800afc:	2084000c 	andi	r2,r4,4096
  800b00:	10005326 	beq	r2,zero,800c50 <_fflush_r+0x1b4>
  800b04:	94001417 	ldw	r16,80(r18)
  800b08:	9080030b 	ldhu	r2,12(r18)
  800b0c:	1080010c 	andi	r2,r2,4
  800b10:	1000481e 	bne	r2,zero,800c34 <_fflush_r+0x198>
  800b14:	91400717 	ldw	r5,28(r18)
  800b18:	9809883a 	mov	r4,r19
  800b1c:	800d883a 	mov	r6,r16
  800b20:	000f883a 	mov	r7,zero
  800b24:	403ee83a 	callr	r8
  800b28:	8080261e 	bne	r16,r2,800bc4 <_fflush_r+0x128>
  800b2c:	9080030b 	ldhu	r2,12(r18)
  800b30:	91000417 	ldw	r4,16(r18)
  800b34:	90000115 	stw	zero,4(r18)
  800b38:	10bdffcc 	andi	r2,r2,63487
  800b3c:	10ffffcc 	andi	r3,r2,65535
  800b40:	18c4000c 	andi	r3,r3,4096
  800b44:	9080030d 	sth	r2,12(r18)
  800b48:	91000015 	stw	r4,0(r18)
  800b4c:	18002b26 	beq	r3,zero,800bfc <_fflush_r+0x160>
  800b50:	0007883a 	mov	r3,zero
  800b54:	1805883a 	mov	r2,r3
  800b58:	94001415 	stw	r16,80(r18)
  800b5c:	dfc00417 	ldw	ra,16(sp)
  800b60:	dcc00317 	ldw	r19,12(sp)
  800b64:	dc800217 	ldw	r18,8(sp)
  800b68:	dc400117 	ldw	r17,4(sp)
  800b6c:	dc000017 	ldw	r16,0(sp)
  800b70:	dec00504 	addi	sp,sp,20
  800b74:	f800283a 	ret
  800b78:	94400417 	ldw	r17,16(r18)
  800b7c:	88001f26 	beq	r17,zero,800bfc <_fflush_r+0x160>
  800b80:	90800017 	ldw	r2,0(r18)
  800b84:	18c000cc 	andi	r3,r3,3
  800b88:	94400015 	stw	r17,0(r18)
  800b8c:	1461c83a 	sub	r16,r2,r17
  800b90:	18002526 	beq	r3,zero,800c28 <_fflush_r+0x18c>
  800b94:	0005883a 	mov	r2,zero
  800b98:	90800215 	stw	r2,8(r18)
  800b9c:	0400170e 	bge	zero,r16,800bfc <_fflush_r+0x160>
  800ba0:	90c00917 	ldw	r3,36(r18)
  800ba4:	91400717 	ldw	r5,28(r18)
  800ba8:	880d883a 	mov	r6,r17
  800bac:	800f883a 	mov	r7,r16
  800bb0:	9809883a 	mov	r4,r19
  800bb4:	183ee83a 	callr	r3
  800bb8:	88a3883a 	add	r17,r17,r2
  800bbc:	80a1c83a 	sub	r16,r16,r2
  800bc0:	00bff616 	blt	zero,r2,800b9c <_fflush_r+0x100>
  800bc4:	9080030b 	ldhu	r2,12(r18)
  800bc8:	00ffffc4 	movi	r3,-1
  800bcc:	10801014 	ori	r2,r2,64
  800bd0:	9080030d 	sth	r2,12(r18)
  800bd4:	1805883a 	mov	r2,r3
  800bd8:	dfc00417 	ldw	ra,16(sp)
  800bdc:	dcc00317 	ldw	r19,12(sp)
  800be0:	dc800217 	ldw	r18,8(sp)
  800be4:	dc400117 	ldw	r17,4(sp)
  800be8:	dc000017 	ldw	r16,0(sp)
  800bec:	dec00504 	addi	sp,sp,20
  800bf0:	f800283a 	ret
  800bf4:	90800f17 	ldw	r2,60(r18)
  800bf8:	00bfbe16 	blt	zero,r2,800af4 <_fflush_r+0x58>
  800bfc:	0007883a 	mov	r3,zero
  800c00:	1805883a 	mov	r2,r3
  800c04:	dfc00417 	ldw	ra,16(sp)
  800c08:	dcc00317 	ldw	r19,12(sp)
  800c0c:	dc800217 	ldw	r18,8(sp)
  800c10:	dc400117 	ldw	r17,4(sp)
  800c14:	dc000017 	ldw	r16,0(sp)
  800c18:	dec00504 	addi	sp,sp,20
  800c1c:	f800283a 	ret
  800c20:	0800d340 	call	800d34 <__sinit>
  800c24:	003fa806 	br	800ac8 <_fflush_r+0x2c>
  800c28:	90800517 	ldw	r2,20(r18)
  800c2c:	90800215 	stw	r2,8(r18)
  800c30:	003fda06 	br	800b9c <_fflush_r+0x100>
  800c34:	90800117 	ldw	r2,4(r18)
  800c38:	90c00c17 	ldw	r3,48(r18)
  800c3c:	80a1c83a 	sub	r16,r16,r2
  800c40:	183fb426 	beq	r3,zero,800b14 <_fflush_r+0x78>
  800c44:	90800f17 	ldw	r2,60(r18)
  800c48:	80a1c83a 	sub	r16,r16,r2
  800c4c:	003fb106 	br	800b14 <_fflush_r+0x78>
  800c50:	91400717 	ldw	r5,28(r18)
  800c54:	9809883a 	mov	r4,r19
  800c58:	000d883a 	mov	r6,zero
  800c5c:	01c00044 	movi	r7,1
  800c60:	403ee83a 	callr	r8
  800c64:	1021883a 	mov	r16,r2
  800c68:	00bfffc4 	movi	r2,-1
  800c6c:	80800226 	beq	r16,r2,800c78 <_fflush_r+0x1dc>
  800c70:	92000a17 	ldw	r8,40(r18)
  800c74:	003fa406 	br	800b08 <_fflush_r+0x6c>
  800c78:	98c00017 	ldw	r3,0(r19)
  800c7c:	00800744 	movi	r2,29
  800c80:	18bfde26 	beq	r3,r2,800bfc <_fflush_r+0x160>
  800c84:	9080030b 	ldhu	r2,12(r18)
  800c88:	8007883a 	mov	r3,r16
  800c8c:	10801014 	ori	r2,r2,64
  800c90:	9080030d 	sth	r2,12(r18)
  800c94:	003fcf06 	br	800bd4 <_fflush_r+0x138>

00800c98 <fflush>:
  800c98:	01402034 	movhi	r5,128
  800c9c:	2942a704 	addi	r5,r5,2716
  800ca0:	2007883a 	mov	r3,r4
  800ca4:	20000526 	beq	r4,zero,800cbc <fflush+0x24>
  800ca8:	00802074 	movhi	r2,129
  800cac:	1083c704 	addi	r2,r2,3868
  800cb0:	11000017 	ldw	r4,0(r2)
  800cb4:	180b883a 	mov	r5,r3
  800cb8:	0800a9c1 	jmpi	800a9c <_fflush_r>
  800cbc:	00802074 	movhi	r2,129
  800cc0:	1083c804 	addi	r2,r2,3872
  800cc4:	11000017 	ldw	r4,0(r2)
  800cc8:	0801a101 	jmpi	801a10 <_fwalk_reent>

00800ccc <std>:
  800ccc:	00802034 	movhi	r2,128
  800cd0:	108a0f04 	addi	r2,r2,10300
  800cd4:	20800b15 	stw	r2,44(r4)
  800cd8:	00802034 	movhi	r2,128
  800cdc:	108a4a04 	addi	r2,r2,10536
  800ce0:	20800815 	stw	r2,32(r4)
  800ce4:	00c02034 	movhi	r3,128
  800ce8:	18ca2b04 	addi	r3,r3,10412
  800cec:	00802034 	movhi	r2,128
  800cf0:	108a1104 	addi	r2,r2,10308
  800cf4:	2140030d 	sth	r5,12(r4)
  800cf8:	2180038d 	sth	r6,14(r4)
  800cfc:	20c00915 	stw	r3,36(r4)
  800d00:	20800a15 	stw	r2,40(r4)
  800d04:	20000015 	stw	zero,0(r4)
  800d08:	20000115 	stw	zero,4(r4)
  800d0c:	20000215 	stw	zero,8(r4)
  800d10:	20000415 	stw	zero,16(r4)
  800d14:	20000515 	stw	zero,20(r4)
  800d18:	20000615 	stw	zero,24(r4)
  800d1c:	21000715 	stw	r4,28(r4)
  800d20:	f800283a 	ret

00800d24 <__sfp_lock_acquire>:
  800d24:	f800283a 	ret

00800d28 <__sfp_lock_release>:
  800d28:	f800283a 	ret

00800d2c <__sinit_lock_acquire>:
  800d2c:	f800283a 	ret

00800d30 <__sinit_lock_release>:
  800d30:	f800283a 	ret

00800d34 <__sinit>:
  800d34:	20800e17 	ldw	r2,56(r4)
  800d38:	defffd04 	addi	sp,sp,-12
  800d3c:	dc400115 	stw	r17,4(sp)
  800d40:	dc000015 	stw	r16,0(sp)
  800d44:	dfc00215 	stw	ra,8(sp)
  800d48:	04400044 	movi	r17,1
  800d4c:	01400104 	movi	r5,4
  800d50:	000d883a 	mov	r6,zero
  800d54:	2021883a 	mov	r16,r4
  800d58:	2200bb04 	addi	r8,r4,748
  800d5c:	200f883a 	mov	r7,r4
  800d60:	10000526 	beq	r2,zero,800d78 <__sinit+0x44>
  800d64:	dfc00217 	ldw	ra,8(sp)
  800d68:	dc400117 	ldw	r17,4(sp)
  800d6c:	dc000017 	ldw	r16,0(sp)
  800d70:	dec00304 	addi	sp,sp,12
  800d74:	f800283a 	ret
  800d78:	21000117 	ldw	r4,4(r4)
  800d7c:	00802034 	movhi	r2,128
  800d80:	10838604 	addi	r2,r2,3608
  800d84:	00c000c4 	movi	r3,3
  800d88:	80800f15 	stw	r2,60(r16)
  800d8c:	80c0b915 	stw	r3,740(r16)
  800d90:	8200ba15 	stw	r8,744(r16)
  800d94:	84400e15 	stw	r17,56(r16)
  800d98:	8000b815 	stw	zero,736(r16)
  800d9c:	0800ccc0 	call	800ccc <std>
  800da0:	81000217 	ldw	r4,8(r16)
  800da4:	880d883a 	mov	r6,r17
  800da8:	800f883a 	mov	r7,r16
  800dac:	01400284 	movi	r5,10
  800db0:	0800ccc0 	call	800ccc <std>
  800db4:	81000317 	ldw	r4,12(r16)
  800db8:	800f883a 	mov	r7,r16
  800dbc:	01400484 	movi	r5,18
  800dc0:	01800084 	movi	r6,2
  800dc4:	dfc00217 	ldw	ra,8(sp)
  800dc8:	dc400117 	ldw	r17,4(sp)
  800dcc:	dc000017 	ldw	r16,0(sp)
  800dd0:	dec00304 	addi	sp,sp,12
  800dd4:	0800ccc1 	jmpi	800ccc <std>

00800dd8 <__fp_lock>:
  800dd8:	0005883a 	mov	r2,zero
  800ddc:	f800283a 	ret

00800de0 <__fp_unlock>:
  800de0:	0005883a 	mov	r2,zero
  800de4:	f800283a 	ret

00800de8 <__fp_unlock_all>:
  800de8:	00802074 	movhi	r2,129
  800dec:	1083c704 	addi	r2,r2,3868
  800df0:	11000017 	ldw	r4,0(r2)
  800df4:	01402034 	movhi	r5,128
  800df8:	29437804 	addi	r5,r5,3552
  800dfc:	0801ad81 	jmpi	801ad8 <_fwalk>

00800e00 <__fp_lock_all>:
  800e00:	00802074 	movhi	r2,129
  800e04:	1083c704 	addi	r2,r2,3868
  800e08:	11000017 	ldw	r4,0(r2)
  800e0c:	01402034 	movhi	r5,128
  800e10:	29437604 	addi	r5,r5,3544
  800e14:	0801ad81 	jmpi	801ad8 <_fwalk>

00800e18 <_cleanup_r>:
  800e18:	01402034 	movhi	r5,128
  800e1c:	2942a204 	addi	r5,r5,2696
  800e20:	0801ad81 	jmpi	801ad8 <_fwalk>

00800e24 <_cleanup>:
  800e24:	00802074 	movhi	r2,129
  800e28:	1083c804 	addi	r2,r2,3872
  800e2c:	11000017 	ldw	r4,0(r2)
  800e30:	0800e181 	jmpi	800e18 <_cleanup_r>

00800e34 <__sfmoreglue>:
  800e34:	defffc04 	addi	sp,sp,-16
  800e38:	dc400115 	stw	r17,4(sp)
  800e3c:	2c401724 	muli	r17,r5,92
  800e40:	dc800215 	stw	r18,8(sp)
  800e44:	2825883a 	mov	r18,r5
  800e48:	89400304 	addi	r5,r17,12
  800e4c:	dc000015 	stw	r16,0(sp)
  800e50:	dfc00315 	stw	ra,12(sp)
  800e54:	0801d240 	call	801d24 <_malloc_r>
  800e58:	0021883a 	mov	r16,zero
  800e5c:	880d883a 	mov	r6,r17
  800e60:	000b883a 	mov	r5,zero
  800e64:	10000626 	beq	r2,zero,800e80 <__sfmoreglue+0x4c>
  800e68:	11000304 	addi	r4,r2,12
  800e6c:	14800115 	stw	r18,4(r2)
  800e70:	10000015 	stw	zero,0(r2)
  800e74:	11000215 	stw	r4,8(r2)
  800e78:	1021883a 	mov	r16,r2
  800e7c:	08024640 	call	802464 <memset>
  800e80:	8005883a 	mov	r2,r16
  800e84:	dfc00317 	ldw	ra,12(sp)
  800e88:	dc800217 	ldw	r18,8(sp)
  800e8c:	dc400117 	ldw	r17,4(sp)
  800e90:	dc000017 	ldw	r16,0(sp)
  800e94:	dec00404 	addi	sp,sp,16
  800e98:	f800283a 	ret

00800e9c <__sfp>:
  800e9c:	defffd04 	addi	sp,sp,-12
  800ea0:	00802074 	movhi	r2,129
  800ea4:	1083c804 	addi	r2,r2,3872
  800ea8:	dc000015 	stw	r16,0(sp)
  800eac:	14000017 	ldw	r16,0(r2)
  800eb0:	dc400115 	stw	r17,4(sp)
  800eb4:	dfc00215 	stw	ra,8(sp)
  800eb8:	80800e17 	ldw	r2,56(r16)
  800ebc:	2023883a 	mov	r17,r4
  800ec0:	10002626 	beq	r2,zero,800f5c <__sfp+0xc0>
  800ec4:	8400b804 	addi	r16,r16,736
  800ec8:	80800117 	ldw	r2,4(r16)
  800ecc:	81000217 	ldw	r4,8(r16)
  800ed0:	10ffffc4 	addi	r3,r2,-1
  800ed4:	18000916 	blt	r3,zero,800efc <__sfp+0x60>
  800ed8:	2080030f 	ldh	r2,12(r4)
  800edc:	10000b26 	beq	r2,zero,800f0c <__sfp+0x70>
  800ee0:	017fffc4 	movi	r5,-1
  800ee4:	00000206 	br	800ef0 <__sfp+0x54>
  800ee8:	2080030f 	ldh	r2,12(r4)
  800eec:	10000726 	beq	r2,zero,800f0c <__sfp+0x70>
  800ef0:	18ffffc4 	addi	r3,r3,-1
  800ef4:	21001704 	addi	r4,r4,92
  800ef8:	197ffb1e 	bne	r3,r5,800ee8 <__sfp+0x4c>
  800efc:	80800017 	ldw	r2,0(r16)
  800f00:	10001926 	beq	r2,zero,800f68 <__sfp+0xcc>
  800f04:	1021883a 	mov	r16,r2
  800f08:	003fef06 	br	800ec8 <__sfp+0x2c>
  800f0c:	00bfffc4 	movi	r2,-1
  800f10:	00c00044 	movi	r3,1
  800f14:	2080038d 	sth	r2,14(r4)
  800f18:	20c0030d 	sth	r3,12(r4)
  800f1c:	20000015 	stw	zero,0(r4)
  800f20:	20000215 	stw	zero,8(r4)
  800f24:	20000115 	stw	zero,4(r4)
  800f28:	20000415 	stw	zero,16(r4)
  800f2c:	20000515 	stw	zero,20(r4)
  800f30:	20000615 	stw	zero,24(r4)
  800f34:	20000c15 	stw	zero,48(r4)
  800f38:	20000d15 	stw	zero,52(r4)
  800f3c:	20001115 	stw	zero,68(r4)
  800f40:	20001215 	stw	zero,72(r4)
  800f44:	2005883a 	mov	r2,r4
  800f48:	dfc00217 	ldw	ra,8(sp)
  800f4c:	dc400117 	ldw	r17,4(sp)
  800f50:	dc000017 	ldw	r16,0(sp)
  800f54:	dec00304 	addi	sp,sp,12
  800f58:	f800283a 	ret
  800f5c:	8009883a 	mov	r4,r16
  800f60:	0800d340 	call	800d34 <__sinit>
  800f64:	003fd706 	br	800ec4 <__sfp+0x28>
  800f68:	8809883a 	mov	r4,r17
  800f6c:	01400104 	movi	r5,4
  800f70:	0800e340 	call	800e34 <__sfmoreglue>
  800f74:	80800015 	stw	r2,0(r16)
  800f78:	103fe21e 	bne	r2,zero,800f04 <__sfp+0x68>
  800f7c:	00800304 	movi	r2,12
  800f80:	0009883a 	mov	r4,zero
  800f84:	88800015 	stw	r2,0(r17)
  800f88:	003fee06 	br	800f44 <__sfp+0xa8>

00800f8c <_fopen_r>:
  800f8c:	defffa04 	addi	sp,sp,-24
  800f90:	dcc00415 	stw	r19,16(sp)
  800f94:	2827883a 	mov	r19,r5
  800f98:	300b883a 	mov	r5,r6
  800f9c:	d80d883a 	mov	r6,sp
  800fa0:	dc800315 	stw	r18,12(sp)
  800fa4:	dc400215 	stw	r17,8(sp)
  800fa8:	dc000115 	stw	r16,4(sp)
  800fac:	dfc00515 	stw	ra,20(sp)
  800fb0:	2021883a 	mov	r16,r4
  800fb4:	08062a00 	call	8062a0 <__sflags>
  800fb8:	1025883a 	mov	r18,r2
  800fbc:	8009883a 	mov	r4,r16
  800fc0:	0023883a 	mov	r17,zero
  800fc4:	1000081e 	bne	r2,zero,800fe8 <_fopen_r+0x5c>
  800fc8:	8805883a 	mov	r2,r17
  800fcc:	dfc00517 	ldw	ra,20(sp)
  800fd0:	dcc00417 	ldw	r19,16(sp)
  800fd4:	dc800317 	ldw	r18,12(sp)
  800fd8:	dc400217 	ldw	r17,8(sp)
  800fdc:	dc000117 	ldw	r16,4(sp)
  800fe0:	dec00604 	addi	sp,sp,24
  800fe4:	f800283a 	ret
  800fe8:	0800e9c0 	call	800e9c <__sfp>
  800fec:	1023883a 	mov	r17,r2
  800ff0:	980b883a 	mov	r5,r19
  800ff4:	8009883a 	mov	r4,r16
  800ff8:	01c06d84 	movi	r7,438
  800ffc:	103ff226 	beq	r2,zero,800fc8 <_fopen_r+0x3c>
  801000:	d9800017 	ldw	r6,0(sp)
  801004:	08024fc0 	call	8024fc <_open_r>
  801008:	10001816 	blt	r2,zero,80106c <_fopen_r+0xe0>
  80100c:	00c02034 	movhi	r3,128
  801010:	18ca2b04 	addi	r3,r3,10412
  801014:	923fffcc 	andi	r8,r18,65535
  801018:	8880038d 	sth	r2,14(r17)
  80101c:	00802034 	movhi	r2,128
  801020:	108a4a04 	addi	r2,r2,10536
  801024:	88800815 	stw	r2,32(r17)
  801028:	88c00915 	stw	r3,36(r17)
  80102c:	00802034 	movhi	r2,128
  801030:	108a1104 	addi	r2,r2,10308
  801034:	00c02034 	movhi	r3,128
  801038:	18ca0f04 	addi	r3,r3,10300
  80103c:	4200400c 	andi	r8,r8,256
  801040:	8c80030d 	sth	r18,12(r17)
  801044:	8009883a 	mov	r4,r16
  801048:	880b883a 	mov	r5,r17
  80104c:	000d883a 	mov	r6,zero
  801050:	01c00084 	movi	r7,2
  801054:	88800a15 	stw	r2,40(r17)
  801058:	88c00b15 	stw	r3,44(r17)
  80105c:	8c400715 	stw	r17,28(r17)
  801060:	403fd926 	beq	r8,zero,800fc8 <_fopen_r+0x3c>
  801064:	080153c0 	call	80153c <_fseek_r>
  801068:	003fd706 	br	800fc8 <_fopen_r+0x3c>
  80106c:	0800d240 	call	800d24 <__sfp_lock_acquire>
  801070:	8800030d 	sth	zero,12(r17)
  801074:	0800d280 	call	800d28 <__sfp_lock_release>
  801078:	0023883a 	mov	r17,zero
  80107c:	003fd206 	br	800fc8 <_fopen_r+0x3c>

00801080 <fopen>:
  801080:	01802074 	movhi	r6,129
  801084:	3183c704 	addi	r6,r6,3868
  801088:	2007883a 	mov	r3,r4
  80108c:	31000017 	ldw	r4,0(r6)
  801090:	280d883a 	mov	r6,r5
  801094:	180b883a 	mov	r5,r3
  801098:	0800f8c1 	jmpi	800f8c <_fopen_r>

0080109c <fprintf>:
  80109c:	defffc04 	addi	sp,sp,-16
  8010a0:	dfc00115 	stw	ra,4(sp)
  8010a4:	d9800215 	stw	r6,8(sp)
  8010a8:	d9c00315 	stw	r7,12(sp)
  8010ac:	d8800204 	addi	r2,sp,8
  8010b0:	100d883a 	mov	r6,r2
  8010b4:	d8800015 	stw	r2,0(sp)
  8010b8:	080488c0 	call	80488c <__vfprintf_internal>
  8010bc:	dfc00117 	ldw	ra,4(sp)
  8010c0:	dec00404 	addi	sp,sp,16
  8010c4:	f800283a 	ret

008010c8 <_fprintf_r>:
  8010c8:	defffd04 	addi	sp,sp,-12
  8010cc:	2807883a 	mov	r3,r5
  8010d0:	dfc00115 	stw	ra,4(sp)
  8010d4:	d9c00215 	stw	r7,8(sp)
  8010d8:	d8800204 	addi	r2,sp,8
  8010dc:	300b883a 	mov	r5,r6
  8010e0:	1809883a 	mov	r4,r3
  8010e4:	100d883a 	mov	r6,r2
  8010e8:	d8800015 	stw	r2,0(sp)
  8010ec:	080488c0 	call	80488c <__vfprintf_internal>
  8010f0:	dfc00117 	ldw	ra,4(sp)
  8010f4:	dec00304 	addi	sp,sp,12
  8010f8:	f800283a 	ret

008010fc <_malloc_trim_r>:
  8010fc:	defffb04 	addi	sp,sp,-20
  801100:	dcc00315 	stw	r19,12(sp)
  801104:	04c02074 	movhi	r19,129
  801108:	9cfdc504 	addi	r19,r19,-2284
  80110c:	dc800215 	stw	r18,8(sp)
  801110:	dc400115 	stw	r17,4(sp)
  801114:	dc000015 	stw	r16,0(sp)
  801118:	2823883a 	mov	r17,r5
  80111c:	2025883a 	mov	r18,r4
  801120:	dfc00415 	stw	ra,16(sp)
  801124:	080af5c0 	call	80af5c <__malloc_lock>
  801128:	98800217 	ldw	r2,8(r19)
  80112c:	9009883a 	mov	r4,r18
  801130:	000b883a 	mov	r5,zero
  801134:	10c00117 	ldw	r3,4(r2)
  801138:	00bfff04 	movi	r2,-4
  80113c:	18a0703a 	and	r16,r3,r2
  801140:	8463c83a 	sub	r17,r16,r17
  801144:	8c43fbc4 	addi	r17,r17,4079
  801148:	8822d33a 	srli	r17,r17,12
  80114c:	0083ffc4 	movi	r2,4095
  801150:	8c7fffc4 	addi	r17,r17,-1
  801154:	8822933a 	slli	r17,r17,12
  801158:	1440060e 	bge	r2,r17,801174 <_malloc_trim_r+0x78>
  80115c:	08027cc0 	call	8027cc <_sbrk_r>
  801160:	98c00217 	ldw	r3,8(r19)
  801164:	9009883a 	mov	r4,r18
  801168:	044bc83a 	sub	r5,zero,r17
  80116c:	80c7883a 	add	r3,r16,r3
  801170:	10c00926 	beq	r2,r3,801198 <_malloc_trim_r+0x9c>
  801174:	080af7c0 	call	80af7c <__malloc_unlock>
  801178:	0005883a 	mov	r2,zero
  80117c:	dfc00417 	ldw	ra,16(sp)
  801180:	dcc00317 	ldw	r19,12(sp)
  801184:	dc800217 	ldw	r18,8(sp)
  801188:	dc400117 	ldw	r17,4(sp)
  80118c:	dc000017 	ldw	r16,0(sp)
  801190:	dec00504 	addi	sp,sp,20
  801194:	f800283a 	ret
  801198:	9009883a 	mov	r4,r18
  80119c:	08027cc0 	call	8027cc <_sbrk_r>
  8011a0:	844dc83a 	sub	r6,r16,r17
  8011a4:	00ffffc4 	movi	r3,-1
  8011a8:	9009883a 	mov	r4,r18
  8011ac:	000b883a 	mov	r5,zero
  8011b0:	01c02074 	movhi	r7,129
  8011b4:	39cb2104 	addi	r7,r7,11396
  8011b8:	31800054 	ori	r6,r6,1
  8011bc:	10c00926 	beq	r2,r3,8011e4 <_malloc_trim_r+0xe8>
  8011c0:	38800017 	ldw	r2,0(r7)
  8011c4:	98c00217 	ldw	r3,8(r19)
  8011c8:	9009883a 	mov	r4,r18
  8011cc:	1445c83a 	sub	r2,r2,r17
  8011d0:	38800015 	stw	r2,0(r7)
  8011d4:	19800115 	stw	r6,4(r3)
  8011d8:	080af7c0 	call	80af7c <__malloc_unlock>
  8011dc:	00800044 	movi	r2,1
  8011e0:	003fe606 	br	80117c <_malloc_trim_r+0x80>
  8011e4:	08027cc0 	call	8027cc <_sbrk_r>
  8011e8:	99800217 	ldw	r6,8(r19)
  8011ec:	100f883a 	mov	r7,r2
  8011f0:	9009883a 	mov	r4,r18
  8011f4:	1187c83a 	sub	r3,r2,r6
  8011f8:	008003c4 	movi	r2,15
  8011fc:	19400054 	ori	r5,r3,1
  801200:	10ffdc0e 	bge	r2,r3,801174 <_malloc_trim_r+0x78>
  801204:	00802074 	movhi	r2,129
  801208:	1083ca04 	addi	r2,r2,3880
  80120c:	10c00017 	ldw	r3,0(r2)
  801210:	00802074 	movhi	r2,129
  801214:	108b2104 	addi	r2,r2,11396
  801218:	31400115 	stw	r5,4(r6)
  80121c:	38c7c83a 	sub	r3,r7,r3
  801220:	10c00015 	stw	r3,0(r2)
  801224:	003fd306 	br	801174 <_malloc_trim_r+0x78>

00801228 <_free_r>:
  801228:	defffd04 	addi	sp,sp,-12
  80122c:	dc400115 	stw	r17,4(sp)
  801230:	dc000015 	stw	r16,0(sp)
  801234:	dfc00215 	stw	ra,8(sp)
  801238:	2821883a 	mov	r16,r5
  80123c:	2023883a 	mov	r17,r4
  801240:	28005a26 	beq	r5,zero,8013ac <_free_r+0x184>
  801244:	080af5c0 	call	80af5c <__malloc_lock>
  801248:	823ffe04 	addi	r8,r16,-8
  80124c:	41400117 	ldw	r5,4(r8)
  801250:	00bfff84 	movi	r2,-2
  801254:	02802074 	movhi	r10,129
  801258:	52bdc504 	addi	r10,r10,-2284
  80125c:	288e703a 	and	r7,r5,r2
  801260:	41cd883a 	add	r6,r8,r7
  801264:	30c00117 	ldw	r3,4(r6)
  801268:	51000217 	ldw	r4,8(r10)
  80126c:	00bfff04 	movi	r2,-4
  801270:	1892703a 	and	r9,r3,r2
  801274:	5017883a 	mov	r11,r10
  801278:	31006726 	beq	r6,r4,801418 <_free_r+0x1f0>
  80127c:	2880004c 	andi	r2,r5,1
  801280:	1005003a 	cmpeq	r2,r2,zero
  801284:	32400115 	stw	r9,4(r6)
  801288:	10001a1e 	bne	r2,zero,8012f4 <_free_r+0xcc>
  80128c:	000b883a 	mov	r5,zero
  801290:	3247883a 	add	r3,r6,r9
  801294:	18800117 	ldw	r2,4(r3)
  801298:	1080004c 	andi	r2,r2,1
  80129c:	1000231e 	bne	r2,zero,80132c <_free_r+0x104>
  8012a0:	280ac03a 	cmpne	r5,r5,zero
  8012a4:	3a4f883a 	add	r7,r7,r9
  8012a8:	2800451e 	bne	r5,zero,8013c0 <_free_r+0x198>
  8012ac:	31000217 	ldw	r4,8(r6)
  8012b0:	00802074 	movhi	r2,129
  8012b4:	10bdc704 	addi	r2,r2,-2276
  8012b8:	20807b26 	beq	r4,r2,8014a8 <_free_r+0x280>
  8012bc:	30800317 	ldw	r2,12(r6)
  8012c0:	3a07883a 	add	r3,r7,r8
  8012c4:	19c00015 	stw	r7,0(r3)
  8012c8:	11000215 	stw	r4,8(r2)
  8012cc:	20800315 	stw	r2,12(r4)
  8012d0:	38800054 	ori	r2,r7,1
  8012d4:	40800115 	stw	r2,4(r8)
  8012d8:	28001a26 	beq	r5,zero,801344 <_free_r+0x11c>
  8012dc:	8809883a 	mov	r4,r17
  8012e0:	dfc00217 	ldw	ra,8(sp)
  8012e4:	dc400117 	ldw	r17,4(sp)
  8012e8:	dc000017 	ldw	r16,0(sp)
  8012ec:	dec00304 	addi	sp,sp,12
  8012f0:	080af7c1 	jmpi	80af7c <__malloc_unlock>
  8012f4:	80bffe17 	ldw	r2,-8(r16)
  8012f8:	50c00204 	addi	r3,r10,8
  8012fc:	4091c83a 	sub	r8,r8,r2
  801300:	41000217 	ldw	r4,8(r8)
  801304:	388f883a 	add	r7,r7,r2
  801308:	20c06126 	beq	r4,r3,801490 <_free_r+0x268>
  80130c:	40800317 	ldw	r2,12(r8)
  801310:	3247883a 	add	r3,r6,r9
  801314:	000b883a 	mov	r5,zero
  801318:	11000215 	stw	r4,8(r2)
  80131c:	20800315 	stw	r2,12(r4)
  801320:	18800117 	ldw	r2,4(r3)
  801324:	1080004c 	andi	r2,r2,1
  801328:	103fdd26 	beq	r2,zero,8012a0 <_free_r+0x78>
  80132c:	38800054 	ori	r2,r7,1
  801330:	3a07883a 	add	r3,r7,r8
  801334:	280ac03a 	cmpne	r5,r5,zero
  801338:	40800115 	stw	r2,4(r8)
  80133c:	19c00015 	stw	r7,0(r3)
  801340:	283fe61e 	bne	r5,zero,8012dc <_free_r+0xb4>
  801344:	00807fc4 	movi	r2,511
  801348:	11c01f2e 	bgeu	r2,r7,8013c8 <_free_r+0x1a0>
  80134c:	3806d27a 	srli	r3,r7,9
  801350:	1800481e 	bne	r3,zero,801474 <_free_r+0x24c>
  801354:	3804d0fa 	srli	r2,r7,3
  801358:	100690fa 	slli	r3,r2,3
  80135c:	1acd883a 	add	r6,r3,r11
  801360:	31400217 	ldw	r5,8(r6)
  801364:	31405926 	beq	r6,r5,8014cc <_free_r+0x2a4>
  801368:	28800117 	ldw	r2,4(r5)
  80136c:	00ffff04 	movi	r3,-4
  801370:	10c4703a 	and	r2,r2,r3
  801374:	3880022e 	bgeu	r7,r2,801380 <_free_r+0x158>
  801378:	29400217 	ldw	r5,8(r5)
  80137c:	317ffa1e 	bne	r6,r5,801368 <_free_r+0x140>
  801380:	29800317 	ldw	r6,12(r5)
  801384:	41800315 	stw	r6,12(r8)
  801388:	41400215 	stw	r5,8(r8)
  80138c:	8809883a 	mov	r4,r17
  801390:	2a000315 	stw	r8,12(r5)
  801394:	32000215 	stw	r8,8(r6)
  801398:	dfc00217 	ldw	ra,8(sp)
  80139c:	dc400117 	ldw	r17,4(sp)
  8013a0:	dc000017 	ldw	r16,0(sp)
  8013a4:	dec00304 	addi	sp,sp,12
  8013a8:	080af7c1 	jmpi	80af7c <__malloc_unlock>
  8013ac:	dfc00217 	ldw	ra,8(sp)
  8013b0:	dc400117 	ldw	r17,4(sp)
  8013b4:	dc000017 	ldw	r16,0(sp)
  8013b8:	dec00304 	addi	sp,sp,12
  8013bc:	f800283a 	ret
  8013c0:	31000217 	ldw	r4,8(r6)
  8013c4:	003fbd06 	br	8012bc <_free_r+0x94>
  8013c8:	3806d0fa 	srli	r3,r7,3
  8013cc:	00800044 	movi	r2,1
  8013d0:	51400117 	ldw	r5,4(r10)
  8013d4:	180890fa 	slli	r4,r3,3
  8013d8:	1807d0ba 	srai	r3,r3,2
  8013dc:	22c9883a 	add	r4,r4,r11
  8013e0:	21800217 	ldw	r6,8(r4)
  8013e4:	10c4983a 	sll	r2,r2,r3
  8013e8:	41000315 	stw	r4,12(r8)
  8013ec:	41800215 	stw	r6,8(r8)
  8013f0:	288ab03a 	or	r5,r5,r2
  8013f4:	22000215 	stw	r8,8(r4)
  8013f8:	8809883a 	mov	r4,r17
  8013fc:	51400115 	stw	r5,4(r10)
  801400:	32000315 	stw	r8,12(r6)
  801404:	dfc00217 	ldw	ra,8(sp)
  801408:	dc400117 	ldw	r17,4(sp)
  80140c:	dc000017 	ldw	r16,0(sp)
  801410:	dec00304 	addi	sp,sp,12
  801414:	080af7c1 	jmpi	80af7c <__malloc_unlock>
  801418:	2880004c 	andi	r2,r5,1
  80141c:	3a4d883a 	add	r6,r7,r9
  801420:	1000071e 	bne	r2,zero,801440 <_free_r+0x218>
  801424:	80bffe17 	ldw	r2,-8(r16)
  801428:	4091c83a 	sub	r8,r8,r2
  80142c:	41000317 	ldw	r4,12(r8)
  801430:	40c00217 	ldw	r3,8(r8)
  801434:	308d883a 	add	r6,r6,r2
  801438:	20c00215 	stw	r3,8(r4)
  80143c:	19000315 	stw	r4,12(r3)
  801440:	00802074 	movhi	r2,129
  801444:	1083c904 	addi	r2,r2,3876
  801448:	11000017 	ldw	r4,0(r2)
  80144c:	30c00054 	ori	r3,r6,1
  801450:	52000215 	stw	r8,8(r10)
  801454:	40c00115 	stw	r3,4(r8)
  801458:	313fa036 	bltu	r6,r4,8012dc <_free_r+0xb4>
  80145c:	00802074 	movhi	r2,129
  801460:	108b0904 	addi	r2,r2,11300
  801464:	11400017 	ldw	r5,0(r2)
  801468:	8809883a 	mov	r4,r17
  80146c:	08010fc0 	call	8010fc <_malloc_trim_r>
  801470:	003f9a06 	br	8012dc <_free_r+0xb4>
  801474:	00800104 	movi	r2,4
  801478:	10c0072e 	bgeu	r2,r3,801498 <_free_r+0x270>
  80147c:	00800504 	movi	r2,20
  801480:	10c01936 	bltu	r2,r3,8014e8 <_free_r+0x2c0>
  801484:	188016c4 	addi	r2,r3,91
  801488:	100690fa 	slli	r3,r2,3
  80148c:	003fb306 	br	80135c <_free_r+0x134>
  801490:	01400044 	movi	r5,1
  801494:	003f7e06 	br	801290 <_free_r+0x68>
  801498:	3804d1ba 	srli	r2,r7,6
  80149c:	10800e04 	addi	r2,r2,56
  8014a0:	100690fa 	slli	r3,r2,3
  8014a4:	003fad06 	br	80135c <_free_r+0x134>
  8014a8:	22000315 	stw	r8,12(r4)
  8014ac:	22000215 	stw	r8,8(r4)
  8014b0:	3a05883a 	add	r2,r7,r8
  8014b4:	38c00054 	ori	r3,r7,1
  8014b8:	11c00015 	stw	r7,0(r2)
  8014bc:	41000215 	stw	r4,8(r8)
  8014c0:	40c00115 	stw	r3,4(r8)
  8014c4:	41000315 	stw	r4,12(r8)
  8014c8:	003f8406 	br	8012dc <_free_r+0xb4>
  8014cc:	1005d0ba 	srai	r2,r2,2
  8014d0:	00c00044 	movi	r3,1
  8014d4:	51000117 	ldw	r4,4(r10)
  8014d8:	1886983a 	sll	r3,r3,r2
  8014dc:	20c8b03a 	or	r4,r4,r3
  8014e0:	51000115 	stw	r4,4(r10)
  8014e4:	003fa706 	br	801384 <_free_r+0x15c>
  8014e8:	00801504 	movi	r2,84
  8014ec:	10c00436 	bltu	r2,r3,801500 <_free_r+0x2d8>
  8014f0:	3804d33a 	srli	r2,r7,12
  8014f4:	10801b84 	addi	r2,r2,110
  8014f8:	100690fa 	slli	r3,r2,3
  8014fc:	003f9706 	br	80135c <_free_r+0x134>
  801500:	00805504 	movi	r2,340
  801504:	10c00436 	bltu	r2,r3,801518 <_free_r+0x2f0>
  801508:	3804d3fa 	srli	r2,r7,15
  80150c:	10801dc4 	addi	r2,r2,119
  801510:	100690fa 	slli	r3,r2,3
  801514:	003f9106 	br	80135c <_free_r+0x134>
  801518:	00815504 	movi	r2,1364
  80151c:	10c0032e 	bgeu	r2,r3,80152c <_free_r+0x304>
  801520:	00801f84 	movi	r2,126
  801524:	00c0fc04 	movi	r3,1008
  801528:	003f8c06 	br	80135c <_free_r+0x134>
  80152c:	3804d4ba 	srli	r2,r7,18
  801530:	10801f04 	addi	r2,r2,124
  801534:	100690fa 	slli	r3,r2,3
  801538:	003f8806 	br	80135c <_free_r+0x134>

0080153c <_fseek_r>:
  80153c:	deffe804 	addi	sp,sp,-96
  801540:	dd801515 	stw	r22,84(sp)
  801544:	dcc01215 	stw	r19,72(sp)
  801548:	dc801115 	stw	r18,68(sp)
  80154c:	dc000f15 	stw	r16,60(sp)
  801550:	dfc01715 	stw	ra,92(sp)
  801554:	ddc01615 	stw	r23,88(sp)
  801558:	dd401415 	stw	r21,80(sp)
  80155c:	dd001315 	stw	r20,76(sp)
  801560:	dc401015 	stw	r17,64(sp)
  801564:	2025883a 	mov	r18,r4
  801568:	2821883a 	mov	r16,r5
  80156c:	302d883a 	mov	r22,r6
  801570:	3827883a 	mov	r19,r7
  801574:	20000226 	beq	r4,zero,801580 <_fseek_r+0x44>
  801578:	20800e17 	ldw	r2,56(r4)
  80157c:	10007826 	beq	r2,zero,801760 <_fseek_r+0x224>
  801580:	8080030b 	ldhu	r2,12(r16)
  801584:	00c04204 	movi	r3,264
  801588:	1080420c 	andi	r2,r2,264
  80158c:	10c07926 	beq	r2,r3,801774 <_fseek_r+0x238>
  801590:	85400a17 	ldw	r21,40(r16)
  801594:	a800ea26 	beq	r21,zero,801940 <_fseek_r+0x404>
  801598:	00800044 	movi	r2,1
  80159c:	98805f26 	beq	r19,r2,80171c <_fseek_r+0x1e0>
  8015a0:	00800084 	movi	r2,2
  8015a4:	98801026 	beq	r19,r2,8015e8 <_fseek_r+0xac>
  8015a8:	98000f26 	beq	r19,zero,8015e8 <_fseek_r+0xac>
  8015ac:	00800584 	movi	r2,22
  8015b0:	013fffc4 	movi	r4,-1
  8015b4:	90800015 	stw	r2,0(r18)
  8015b8:	2005883a 	mov	r2,r4
  8015bc:	dfc01717 	ldw	ra,92(sp)
  8015c0:	ddc01617 	ldw	r23,88(sp)
  8015c4:	dd801517 	ldw	r22,84(sp)
  8015c8:	dd401417 	ldw	r21,80(sp)
  8015cc:	dd001317 	ldw	r20,76(sp)
  8015d0:	dcc01217 	ldw	r19,72(sp)
  8015d4:	dc801117 	ldw	r18,68(sp)
  8015d8:	dc401017 	ldw	r17,64(sp)
  8015dc:	dc000f17 	ldw	r16,60(sp)
  8015e0:	dec01804 	addi	sp,sp,96
  8015e4:	f800283a 	ret
  8015e8:	81800417 	ldw	r6,16(r16)
  8015ec:	0023883a 	mov	r17,zero
  8015f0:	002f883a 	mov	r23,zero
  8015f4:	3000a626 	beq	r6,zero,801890 <_fseek_r+0x354>
  8015f8:	8100030b 	ldhu	r4,12(r16)
  8015fc:	2082068c 	andi	r2,r4,2074
  801600:	1000081e 	bne	r2,zero,801624 <_fseek_r+0xe8>
  801604:	2081000c 	andi	r2,r4,1024
  801608:	10001b1e 	bne	r2,zero,801678 <_fseek_r+0x13c>
  80160c:	00802034 	movhi	r2,128
  801610:	108a1104 	addi	r2,r2,10308
  801614:	a8800926 	beq	r21,r2,80163c <_fseek_r+0x100>
  801618:	8080030b 	ldhu	r2,12(r16)
  80161c:	10820014 	ori	r2,r2,2048
  801620:	8080030d 	sth	r2,12(r16)
  801624:	9009883a 	mov	r4,r18
  801628:	800b883a 	mov	r5,r16
  80162c:	0800a9c0 	call	800a9c <_fflush_r>
  801630:	1000a326 	beq	r2,zero,8018c0 <_fseek_r+0x384>
  801634:	013fffc4 	movi	r4,-1
  801638:	003fdf06 	br	8015b8 <_fseek_r+0x7c>
  80163c:	8140038f 	ldh	r5,14(r16)
  801640:	283ff516 	blt	r5,zero,801618 <_fseek_r+0xdc>
  801644:	9009883a 	mov	r4,r18
  801648:	d80d883a 	mov	r6,sp
  80164c:	080199c0 	call	80199c <_fstat_r>
  801650:	103ff11e 	bne	r2,zero,801618 <_fseek_r+0xdc>
  801654:	d8800117 	ldw	r2,4(sp)
  801658:	00e00014 	movui	r3,32768
  80165c:	10bc000c 	andi	r2,r2,61440
  801660:	10ffed1e 	bne	r2,r3,801618 <_fseek_r+0xdc>
  801664:	80c0030b 	ldhu	r3,12(r16)
  801668:	00810004 	movi	r2,1024
  80166c:	80801315 	stw	r2,76(r16)
  801670:	1886b03a 	or	r3,r3,r2
  801674:	80c0030d 	sth	r3,12(r16)
  801678:	9800701e 	bne	r19,zero,80183c <_fseek_r+0x300>
  80167c:	b029883a 	mov	r20,r22
  801680:	b804c03a 	cmpne	r2,r23,zero
  801684:	10003f1e 	bne	r2,zero,801784 <_fseek_r+0x248>
  801688:	8100030b 	ldhu	r4,12(r16)
  80168c:	2084000c 	andi	r2,r4,4096
  801690:	1000a126 	beq	r2,zero,801918 <_fseek_r+0x3dc>
  801694:	81801417 	ldw	r6,80(r16)
  801698:	80c00117 	ldw	r3,4(r16)
  80169c:	81400c17 	ldw	r5,48(r16)
  8016a0:	30e3c83a 	sub	r17,r6,r3
  8016a4:	28008026 	beq	r5,zero,8018a8 <_fseek_r+0x36c>
  8016a8:	81c00f17 	ldw	r7,60(r16)
  8016ac:	89e3c83a 	sub	r17,r17,r7
  8016b0:	80800e17 	ldw	r2,56(r16)
  8016b4:	81800417 	ldw	r6,16(r16)
  8016b8:	88c7883a 	add	r3,r17,r3
  8016bc:	1185c83a 	sub	r2,r2,r6
  8016c0:	11cf883a 	add	r7,r2,r7
  8016c4:	1887c83a 	sub	r3,r3,r2
  8016c8:	2088000c 	andi	r2,r4,8192
  8016cc:	10003e1e 	bne	r2,zero,8017c8 <_fseek_r+0x28c>
  8016d0:	a0c03d16 	blt	r20,r3,8017c8 <_fseek_r+0x28c>
  8016d4:	38c5883a 	add	r2,r7,r3
  8016d8:	a0803b2e 	bgeu	r20,r2,8017c8 <_fseek_r+0x28c>
  8016dc:	a0c5c83a 	sub	r2,r20,r3
  8016e0:	3887c83a 	sub	r3,r7,r2
  8016e4:	3085883a 	add	r2,r6,r2
  8016e8:	80800015 	stw	r2,0(r16)
  8016ec:	80c00115 	stw	r3,4(r16)
  8016f0:	28000526 	beq	r5,zero,801708 <_fseek_r+0x1cc>
  8016f4:	80801004 	addi	r2,r16,64
  8016f8:	28800226 	beq	r5,r2,801704 <_fseek_r+0x1c8>
  8016fc:	9009883a 	mov	r4,r18
  801700:	08012280 	call	801228 <_free_r>
  801704:	80000c15 	stw	zero,48(r16)
  801708:	8080030b 	ldhu	r2,12(r16)
  80170c:	0009883a 	mov	r4,zero
  801710:	10bff7cc 	andi	r2,r2,65503
  801714:	8080030d 	sth	r2,12(r16)
  801718:	003fa706 	br	8015b8 <_fseek_r+0x7c>
  80171c:	9009883a 	mov	r4,r18
  801720:	800b883a 	mov	r5,r16
  801724:	0800a9c0 	call	800a9c <_fflush_r>
  801728:	8100030b 	ldhu	r4,12(r16)
  80172c:	2084000c 	andi	r2,r4,4096
  801730:	10008726 	beq	r2,zero,801950 <_fseek_r+0x414>
  801734:	84401417 	ldw	r17,80(r16)
  801738:	2080010c 	andi	r2,r4,4
  80173c:	1000171e 	bne	r2,zero,80179c <_fseek_r+0x260>
  801740:	2080020c 	andi	r2,r4,8
  801744:	10003b26 	beq	r2,zero,801834 <_fseek_r+0x2f8>
  801748:	80800017 	ldw	r2,0(r16)
  80174c:	10003926 	beq	r2,zero,801834 <_fseek_r+0x2f8>
  801750:	81800417 	ldw	r6,16(r16)
  801754:	1185c83a 	sub	r2,r2,r6
  801758:	88a3883a 	add	r17,r17,r2
  80175c:	00001606 	br	8017b8 <_fseek_r+0x27c>
  801760:	0800d340 	call	800d34 <__sinit>
  801764:	8080030b 	ldhu	r2,12(r16)
  801768:	00c04204 	movi	r3,264
  80176c:	1080420c 	andi	r2,r2,264
  801770:	10ff871e 	bne	r2,r3,801590 <_fseek_r+0x54>
  801774:	9009883a 	mov	r4,r18
  801778:	800b883a 	mov	r5,r16
  80177c:	0800a9c0 	call	800a9c <_fflush_r>
  801780:	003f8306 	br	801590 <_fseek_r+0x54>
  801784:	81400c17 	ldw	r5,48(r16)
  801788:	28004526 	beq	r5,zero,8018a0 <_fseek_r+0x364>
  80178c:	8100030b 	ldhu	r4,12(r16)
  801790:	80c00117 	ldw	r3,4(r16)
  801794:	81c00f17 	ldw	r7,60(r16)
  801798:	003fc506 	br	8016b0 <_fseek_r+0x174>
  80179c:	80c00117 	ldw	r3,4(r16)
  8017a0:	80800c17 	ldw	r2,48(r16)
  8017a4:	88e3c83a 	sub	r17,r17,r3
  8017a8:	10002226 	beq	r2,zero,801834 <_fseek_r+0x2f8>
  8017ac:	81c00f17 	ldw	r7,60(r16)
  8017b0:	81800417 	ldw	r6,16(r16)
  8017b4:	89e3c83a 	sub	r17,r17,r7
  8017b8:	b46d883a 	add	r22,r22,r17
  8017bc:	0027883a 	mov	r19,zero
  8017c0:	05c00044 	movi	r23,1
  8017c4:	003f8b06 	br	8015f4 <_fseek_r+0xb8>
  8017c8:	80801317 	ldw	r2,76(r16)
  8017cc:	81400717 	ldw	r5,28(r16)
  8017d0:	9009883a 	mov	r4,r18
  8017d4:	0085c83a 	sub	r2,zero,r2
  8017d8:	a0a2703a 	and	r17,r20,r2
  8017dc:	880d883a 	mov	r6,r17
  8017e0:	000f883a 	mov	r7,zero
  8017e4:	a83ee83a 	callr	r21
  8017e8:	00ffffc4 	movi	r3,-1
  8017ec:	10ff8d26 	beq	r2,r3,801624 <_fseek_r+0xe8>
  8017f0:	80800417 	ldw	r2,16(r16)
  8017f4:	81400c17 	ldw	r5,48(r16)
  8017f8:	80000115 	stw	zero,4(r16)
  8017fc:	80800015 	stw	r2,0(r16)
  801800:	28000526 	beq	r5,zero,801818 <_fseek_r+0x2dc>
  801804:	80801004 	addi	r2,r16,64
  801808:	28800226 	beq	r5,r2,801814 <_fseek_r+0x2d8>
  80180c:	9009883a 	mov	r4,r18
  801810:	08012280 	call	801228 <_free_r>
  801814:	80000c15 	stw	zero,48(r16)
  801818:	8080030b 	ldhu	r2,12(r16)
  80181c:	a463c83a 	sub	r17,r20,r17
  801820:	10bff7cc 	andi	r2,r2,65503
  801824:	8080030d 	sth	r2,12(r16)
  801828:	88000c1e 	bne	r17,zero,80185c <_fseek_r+0x320>
  80182c:	0009883a 	mov	r4,zero
  801830:	003f6106 	br	8015b8 <_fseek_r+0x7c>
  801834:	81800417 	ldw	r6,16(r16)
  801838:	003fdf06 	br	8017b8 <_fseek_r+0x27c>
  80183c:	8140038f 	ldh	r5,14(r16)
  801840:	9009883a 	mov	r4,r18
  801844:	d80d883a 	mov	r6,sp
  801848:	080199c0 	call	80199c <_fstat_r>
  80184c:	103f751e 	bne	r2,zero,801624 <_fseek_r+0xe8>
  801850:	d8800417 	ldw	r2,16(sp)
  801854:	b0a9883a 	add	r20,r22,r2
  801858:	003f8906 	br	801680 <_fseek_r+0x144>
  80185c:	9009883a 	mov	r4,r18
  801860:	800b883a 	mov	r5,r16
  801864:	08025ec0 	call	8025ec <__srefill_r>
  801868:	103f6e1e 	bne	r2,zero,801624 <_fseek_r+0xe8>
  80186c:	80c00117 	ldw	r3,4(r16)
  801870:	1c7f6c36 	bltu	r3,r17,801624 <_fseek_r+0xe8>
  801874:	80800017 	ldw	r2,0(r16)
  801878:	1c47c83a 	sub	r3,r3,r17
  80187c:	0009883a 	mov	r4,zero
  801880:	1445883a 	add	r2,r2,r17
  801884:	80c00115 	stw	r3,4(r16)
  801888:	80800015 	stw	r2,0(r16)
  80188c:	003f4a06 	br	8015b8 <_fseek_r+0x7c>
  801890:	9009883a 	mov	r4,r18
  801894:	800b883a 	mov	r5,r16
  801898:	0801b900 	call	801b90 <__smakebuf_r>
  80189c:	003f5606 	br	8015f8 <_fseek_r+0xbc>
  8018a0:	8100030b 	ldhu	r4,12(r16)
  8018a4:	80c00117 	ldw	r3,4(r16)
  8018a8:	80800017 	ldw	r2,0(r16)
  8018ac:	81800417 	ldw	r6,16(r16)
  8018b0:	1185c83a 	sub	r2,r2,r6
  8018b4:	10cf883a 	add	r7,r2,r3
  8018b8:	8887c83a 	sub	r3,r17,r2
  8018bc:	003f8206 	br	8016c8 <_fseek_r+0x18c>
  8018c0:	81400717 	ldw	r5,28(r16)
  8018c4:	b00d883a 	mov	r6,r22
  8018c8:	980f883a 	mov	r7,r19
  8018cc:	9009883a 	mov	r4,r18
  8018d0:	a83ee83a 	callr	r21
  8018d4:	00ffffc4 	movi	r3,-1
  8018d8:	10ff5626 	beq	r2,r3,801634 <_fseek_r+0xf8>
  8018dc:	81400c17 	ldw	r5,48(r16)
  8018e0:	28000526 	beq	r5,zero,8018f8 <_fseek_r+0x3bc>
  8018e4:	80801004 	addi	r2,r16,64
  8018e8:	28800226 	beq	r5,r2,8018f4 <_fseek_r+0x3b8>
  8018ec:	9009883a 	mov	r4,r18
  8018f0:	08012280 	call	801228 <_free_r>
  8018f4:	80000c15 	stw	zero,48(r16)
  8018f8:	8080030b 	ldhu	r2,12(r16)
  8018fc:	80c00417 	ldw	r3,16(r16)
  801900:	0009883a 	mov	r4,zero
  801904:	10bdf7cc 	andi	r2,r2,63455
  801908:	8080030d 	sth	r2,12(r16)
  80190c:	80c00015 	stw	r3,0(r16)
  801910:	80000115 	stw	zero,4(r16)
  801914:	003f2806 	br	8015b8 <_fseek_r+0x7c>
  801918:	81400717 	ldw	r5,28(r16)
  80191c:	000d883a 	mov	r6,zero
  801920:	9009883a 	mov	r4,r18
  801924:	01c00044 	movi	r7,1
  801928:	a83ee83a 	callr	r21
  80192c:	100d883a 	mov	r6,r2
  801930:	00bfffc4 	movi	r2,-1
  801934:	30bf3b26 	beq	r6,r2,801624 <_fseek_r+0xe8>
  801938:	8100030b 	ldhu	r4,12(r16)
  80193c:	003f5606 	br	801698 <_fseek_r+0x15c>
  801940:	00800744 	movi	r2,29
  801944:	013fffc4 	movi	r4,-1
  801948:	90800015 	stw	r2,0(r18)
  80194c:	003f1a06 	br	8015b8 <_fseek_r+0x7c>
  801950:	81400717 	ldw	r5,28(r16)
  801954:	980f883a 	mov	r7,r19
  801958:	9009883a 	mov	r4,r18
  80195c:	000d883a 	mov	r6,zero
  801960:	a83ee83a 	callr	r21
  801964:	1023883a 	mov	r17,r2
  801968:	00bfffc4 	movi	r2,-1
  80196c:	88bf3126 	beq	r17,r2,801634 <_fseek_r+0xf8>
  801970:	8100030b 	ldhu	r4,12(r16)
  801974:	003f7006 	br	801738 <_fseek_r+0x1fc>

00801978 <fseek>:
  801978:	00802074 	movhi	r2,129
  80197c:	1083c704 	addi	r2,r2,3868
  801980:	2013883a 	mov	r9,r4
  801984:	11000017 	ldw	r4,0(r2)
  801988:	2805883a 	mov	r2,r5
  80198c:	300f883a 	mov	r7,r6
  801990:	480b883a 	mov	r5,r9
  801994:	100d883a 	mov	r6,r2
  801998:	080153c1 	jmpi	80153c <_fseek_r>

0080199c <_fstat_r>:
  80199c:	defffd04 	addi	sp,sp,-12
  8019a0:	dc000015 	stw	r16,0(sp)
  8019a4:	04002074 	movhi	r16,129
  8019a8:	840b0804 	addi	r16,r16,11296
  8019ac:	dc400115 	stw	r17,4(sp)
  8019b0:	80000015 	stw	zero,0(r16)
  8019b4:	2023883a 	mov	r17,r4
  8019b8:	2809883a 	mov	r4,r5
  8019bc:	300b883a 	mov	r5,r6
  8019c0:	dfc00215 	stw	ra,8(sp)
  8019c4:	080aa600 	call	80aa60 <fstat>
  8019c8:	1007883a 	mov	r3,r2
  8019cc:	00bfffc4 	movi	r2,-1
  8019d0:	18800626 	beq	r3,r2,8019ec <_fstat_r+0x50>
  8019d4:	1805883a 	mov	r2,r3
  8019d8:	dfc00217 	ldw	ra,8(sp)
  8019dc:	dc400117 	ldw	r17,4(sp)
  8019e0:	dc000017 	ldw	r16,0(sp)
  8019e4:	dec00304 	addi	sp,sp,12
  8019e8:	f800283a 	ret
  8019ec:	80800017 	ldw	r2,0(r16)
  8019f0:	103ff826 	beq	r2,zero,8019d4 <_fstat_r+0x38>
  8019f4:	88800015 	stw	r2,0(r17)
  8019f8:	1805883a 	mov	r2,r3
  8019fc:	dfc00217 	ldw	ra,8(sp)
  801a00:	dc400117 	ldw	r17,4(sp)
  801a04:	dc000017 	ldw	r16,0(sp)
  801a08:	dec00304 	addi	sp,sp,12
  801a0c:	f800283a 	ret

00801a10 <_fwalk_reent>:
  801a10:	defff704 	addi	sp,sp,-36
  801a14:	dcc00315 	stw	r19,12(sp)
  801a18:	24c0b804 	addi	r19,r4,736
  801a1c:	dd800615 	stw	r22,24(sp)
  801a20:	dd400515 	stw	r21,20(sp)
  801a24:	dfc00815 	stw	ra,32(sp)
  801a28:	ddc00715 	stw	r23,28(sp)
  801a2c:	dd000415 	stw	r20,16(sp)
  801a30:	dc800215 	stw	r18,8(sp)
  801a34:	dc400115 	stw	r17,4(sp)
  801a38:	dc000015 	stw	r16,0(sp)
  801a3c:	202b883a 	mov	r21,r4
  801a40:	282d883a 	mov	r22,r5
  801a44:	0800d240 	call	800d24 <__sfp_lock_acquire>
  801a48:	98002126 	beq	r19,zero,801ad0 <_fwalk_reent+0xc0>
  801a4c:	002f883a 	mov	r23,zero
  801a50:	9c800117 	ldw	r18,4(r19)
  801a54:	9c000217 	ldw	r16,8(r19)
  801a58:	90bfffc4 	addi	r2,r18,-1
  801a5c:	10000d16 	blt	r2,zero,801a94 <_fwalk_reent+0x84>
  801a60:	0023883a 	mov	r17,zero
  801a64:	053fffc4 	movi	r20,-1
  801a68:	8080030f 	ldh	r2,12(r16)
  801a6c:	8c400044 	addi	r17,r17,1
  801a70:	10000626 	beq	r2,zero,801a8c <_fwalk_reent+0x7c>
  801a74:	8080038f 	ldh	r2,14(r16)
  801a78:	800b883a 	mov	r5,r16
  801a7c:	a809883a 	mov	r4,r21
  801a80:	15000226 	beq	r2,r20,801a8c <_fwalk_reent+0x7c>
  801a84:	b03ee83a 	callr	r22
  801a88:	b8aeb03a 	or	r23,r23,r2
  801a8c:	84001704 	addi	r16,r16,92
  801a90:	947ff51e 	bne	r18,r17,801a68 <_fwalk_reent+0x58>
  801a94:	9cc00017 	ldw	r19,0(r19)
  801a98:	983fed1e 	bne	r19,zero,801a50 <_fwalk_reent+0x40>
  801a9c:	0800d280 	call	800d28 <__sfp_lock_release>
  801aa0:	b805883a 	mov	r2,r23
  801aa4:	dfc00817 	ldw	ra,32(sp)
  801aa8:	ddc00717 	ldw	r23,28(sp)
  801aac:	dd800617 	ldw	r22,24(sp)
  801ab0:	dd400517 	ldw	r21,20(sp)
  801ab4:	dd000417 	ldw	r20,16(sp)
  801ab8:	dcc00317 	ldw	r19,12(sp)
  801abc:	dc800217 	ldw	r18,8(sp)
  801ac0:	dc400117 	ldw	r17,4(sp)
  801ac4:	dc000017 	ldw	r16,0(sp)
  801ac8:	dec00904 	addi	sp,sp,36
  801acc:	f800283a 	ret
  801ad0:	002f883a 	mov	r23,zero
  801ad4:	003ff106 	br	801a9c <_fwalk_reent+0x8c>

00801ad8 <_fwalk>:
  801ad8:	defff804 	addi	sp,sp,-32
  801adc:	dcc00315 	stw	r19,12(sp)
  801ae0:	24c0b804 	addi	r19,r4,736
  801ae4:	dd400515 	stw	r21,20(sp)
  801ae8:	dfc00715 	stw	ra,28(sp)
  801aec:	dd800615 	stw	r22,24(sp)
  801af0:	dd000415 	stw	r20,16(sp)
  801af4:	dc800215 	stw	r18,8(sp)
  801af8:	dc400115 	stw	r17,4(sp)
  801afc:	dc000015 	stw	r16,0(sp)
  801b00:	282b883a 	mov	r21,r5
  801b04:	0800d240 	call	800d24 <__sfp_lock_acquire>
  801b08:	98001f26 	beq	r19,zero,801b88 <_fwalk+0xb0>
  801b0c:	002d883a 	mov	r22,zero
  801b10:	9c800117 	ldw	r18,4(r19)
  801b14:	9c000217 	ldw	r16,8(r19)
  801b18:	90bfffc4 	addi	r2,r18,-1
  801b1c:	10000c16 	blt	r2,zero,801b50 <_fwalk+0x78>
  801b20:	0023883a 	mov	r17,zero
  801b24:	053fffc4 	movi	r20,-1
  801b28:	8080030f 	ldh	r2,12(r16)
  801b2c:	8c400044 	addi	r17,r17,1
  801b30:	10000526 	beq	r2,zero,801b48 <_fwalk+0x70>
  801b34:	8080038f 	ldh	r2,14(r16)
  801b38:	8009883a 	mov	r4,r16
  801b3c:	15000226 	beq	r2,r20,801b48 <_fwalk+0x70>
  801b40:	a83ee83a 	callr	r21
  801b44:	b0acb03a 	or	r22,r22,r2
  801b48:	84001704 	addi	r16,r16,92
  801b4c:	947ff61e 	bne	r18,r17,801b28 <_fwalk+0x50>
  801b50:	9cc00017 	ldw	r19,0(r19)
  801b54:	983fee1e 	bne	r19,zero,801b10 <_fwalk+0x38>
  801b58:	0800d280 	call	800d28 <__sfp_lock_release>
  801b5c:	b005883a 	mov	r2,r22
  801b60:	dfc00717 	ldw	ra,28(sp)
  801b64:	dd800617 	ldw	r22,24(sp)
  801b68:	dd400517 	ldw	r21,20(sp)
  801b6c:	dd000417 	ldw	r20,16(sp)
  801b70:	dcc00317 	ldw	r19,12(sp)
  801b74:	dc800217 	ldw	r18,8(sp)
  801b78:	dc400117 	ldw	r17,4(sp)
  801b7c:	dc000017 	ldw	r16,0(sp)
  801b80:	dec00804 	addi	sp,sp,32
  801b84:	f800283a 	ret
  801b88:	002d883a 	mov	r22,zero
  801b8c:	003ff206 	br	801b58 <_fwalk+0x80>

00801b90 <__smakebuf_r>:
  801b90:	2880030b 	ldhu	r2,12(r5)
  801b94:	deffed04 	addi	sp,sp,-76
  801b98:	dc401015 	stw	r17,64(sp)
  801b9c:	1080008c 	andi	r2,r2,2
  801ba0:	dc000f15 	stw	r16,60(sp)
  801ba4:	dfc01215 	stw	ra,72(sp)
  801ba8:	dc801115 	stw	r18,68(sp)
  801bac:	2821883a 	mov	r16,r5
  801bb0:	2023883a 	mov	r17,r4
  801bb4:	10000b26 	beq	r2,zero,801be4 <__smakebuf_r+0x54>
  801bb8:	28c010c4 	addi	r3,r5,67
  801bbc:	00800044 	movi	r2,1
  801bc0:	28800515 	stw	r2,20(r5)
  801bc4:	28c00415 	stw	r3,16(r5)
  801bc8:	28c00015 	stw	r3,0(r5)
  801bcc:	dfc01217 	ldw	ra,72(sp)
  801bd0:	dc801117 	ldw	r18,68(sp)
  801bd4:	dc401017 	ldw	r17,64(sp)
  801bd8:	dc000f17 	ldw	r16,60(sp)
  801bdc:	dec01304 	addi	sp,sp,76
  801be0:	f800283a 	ret
  801be4:	2940038f 	ldh	r5,14(r5)
  801be8:	28002116 	blt	r5,zero,801c70 <__smakebuf_r+0xe0>
  801bec:	d80d883a 	mov	r6,sp
  801bf0:	080199c0 	call	80199c <_fstat_r>
  801bf4:	10001e16 	blt	r2,zero,801c70 <__smakebuf_r+0xe0>
  801bf8:	d8800117 	ldw	r2,4(sp)
  801bfc:	00e00014 	movui	r3,32768
  801c00:	113c000c 	andi	r4,r2,61440
  801c04:	20c03126 	beq	r4,r3,801ccc <__smakebuf_r+0x13c>
  801c08:	8080030b 	ldhu	r2,12(r16)
  801c0c:	00c80004 	movi	r3,8192
  801c10:	10820014 	ori	r2,r2,2048
  801c14:	8080030d 	sth	r2,12(r16)
  801c18:	20c01e26 	beq	r4,r3,801c94 <__smakebuf_r+0x104>
  801c1c:	04810004 	movi	r18,1024
  801c20:	8809883a 	mov	r4,r17
  801c24:	900b883a 	mov	r5,r18
  801c28:	0801d240 	call	801d24 <_malloc_r>
  801c2c:	1009883a 	mov	r4,r2
  801c30:	10003126 	beq	r2,zero,801cf8 <__smakebuf_r+0x168>
  801c34:	80c0030b 	ldhu	r3,12(r16)
  801c38:	00802034 	movhi	r2,128
  801c3c:	10838604 	addi	r2,r2,3608
  801c40:	88800f15 	stw	r2,60(r17)
  801c44:	18c02014 	ori	r3,r3,128
  801c48:	84800515 	stw	r18,20(r16)
  801c4c:	80c0030d 	sth	r3,12(r16)
  801c50:	81000415 	stw	r4,16(r16)
  801c54:	81000015 	stw	r4,0(r16)
  801c58:	dfc01217 	ldw	ra,72(sp)
  801c5c:	dc801117 	ldw	r18,68(sp)
  801c60:	dc401017 	ldw	r17,64(sp)
  801c64:	dc000f17 	ldw	r16,60(sp)
  801c68:	dec01304 	addi	sp,sp,76
  801c6c:	f800283a 	ret
  801c70:	80c0030b 	ldhu	r3,12(r16)
  801c74:	1880200c 	andi	r2,r3,128
  801c78:	10000426 	beq	r2,zero,801c8c <__smakebuf_r+0xfc>
  801c7c:	04801004 	movi	r18,64
  801c80:	18820014 	ori	r2,r3,2048
  801c84:	8080030d 	sth	r2,12(r16)
  801c88:	003fe506 	br	801c20 <__smakebuf_r+0x90>
  801c8c:	04810004 	movi	r18,1024
  801c90:	003ffb06 	br	801c80 <__smakebuf_r+0xf0>
  801c94:	8140038f 	ldh	r5,14(r16)
  801c98:	8809883a 	mov	r4,r17
  801c9c:	08067dc0 	call	8067dc <_isatty_r>
  801ca0:	103fde26 	beq	r2,zero,801c1c <__smakebuf_r+0x8c>
  801ca4:	8080030b 	ldhu	r2,12(r16)
  801ca8:	80c010c4 	addi	r3,r16,67
  801cac:	04810004 	movi	r18,1024
  801cb0:	10800054 	ori	r2,r2,1
  801cb4:	8080030d 	sth	r2,12(r16)
  801cb8:	00800044 	movi	r2,1
  801cbc:	80c00415 	stw	r3,16(r16)
  801cc0:	80800515 	stw	r2,20(r16)
  801cc4:	80c00015 	stw	r3,0(r16)
  801cc8:	003fd506 	br	801c20 <__smakebuf_r+0x90>
  801ccc:	80c00a17 	ldw	r3,40(r16)
  801cd0:	00802034 	movhi	r2,128
  801cd4:	108a1104 	addi	r2,r2,10308
  801cd8:	18bfcb1e 	bne	r3,r2,801c08 <__smakebuf_r+0x78>
  801cdc:	8080030b 	ldhu	r2,12(r16)
  801ce0:	00c10004 	movi	r3,1024
  801ce4:	1825883a 	mov	r18,r3
  801ce8:	10c4b03a 	or	r2,r2,r3
  801cec:	8080030d 	sth	r2,12(r16)
  801cf0:	80c01315 	stw	r3,76(r16)
  801cf4:	003fca06 	br	801c20 <__smakebuf_r+0x90>
  801cf8:	8100030b 	ldhu	r4,12(r16)
  801cfc:	2080800c 	andi	r2,r4,512
  801d00:	103fb21e 	bne	r2,zero,801bcc <__smakebuf_r+0x3c>
  801d04:	80c010c4 	addi	r3,r16,67
  801d08:	21000094 	ori	r4,r4,2
  801d0c:	00800044 	movi	r2,1
  801d10:	80800515 	stw	r2,20(r16)
  801d14:	8100030d 	sth	r4,12(r16)
  801d18:	80c00415 	stw	r3,16(r16)
  801d1c:	80c00015 	stw	r3,0(r16)
  801d20:	003faa06 	br	801bcc <__smakebuf_r+0x3c>

00801d24 <_malloc_r>:
  801d24:	defff604 	addi	sp,sp,-40
  801d28:	28c002c4 	addi	r3,r5,11
  801d2c:	00800584 	movi	r2,22
  801d30:	dc800215 	stw	r18,8(sp)
  801d34:	dfc00915 	stw	ra,36(sp)
  801d38:	df000815 	stw	fp,32(sp)
  801d3c:	ddc00715 	stw	r23,28(sp)
  801d40:	dd800615 	stw	r22,24(sp)
  801d44:	dd400515 	stw	r21,20(sp)
  801d48:	dd000415 	stw	r20,16(sp)
  801d4c:	dcc00315 	stw	r19,12(sp)
  801d50:	dc400115 	stw	r17,4(sp)
  801d54:	dc000015 	stw	r16,0(sp)
  801d58:	2025883a 	mov	r18,r4
  801d5c:	10c01236 	bltu	r2,r3,801da8 <_malloc_r+0x84>
  801d60:	04400404 	movi	r17,16
  801d64:	8940142e 	bgeu	r17,r5,801db8 <_malloc_r+0x94>
  801d68:	00800304 	movi	r2,12
  801d6c:	0007883a 	mov	r3,zero
  801d70:	90800015 	stw	r2,0(r18)
  801d74:	1805883a 	mov	r2,r3
  801d78:	dfc00917 	ldw	ra,36(sp)
  801d7c:	df000817 	ldw	fp,32(sp)
  801d80:	ddc00717 	ldw	r23,28(sp)
  801d84:	dd800617 	ldw	r22,24(sp)
  801d88:	dd400517 	ldw	r21,20(sp)
  801d8c:	dd000417 	ldw	r20,16(sp)
  801d90:	dcc00317 	ldw	r19,12(sp)
  801d94:	dc800217 	ldw	r18,8(sp)
  801d98:	dc400117 	ldw	r17,4(sp)
  801d9c:	dc000017 	ldw	r16,0(sp)
  801da0:	dec00a04 	addi	sp,sp,40
  801da4:	f800283a 	ret
  801da8:	00bffe04 	movi	r2,-8
  801dac:	18a2703a 	and	r17,r3,r2
  801db0:	883fed16 	blt	r17,zero,801d68 <_malloc_r+0x44>
  801db4:	897fec36 	bltu	r17,r5,801d68 <_malloc_r+0x44>
  801db8:	9009883a 	mov	r4,r18
  801dbc:	080af5c0 	call	80af5c <__malloc_lock>
  801dc0:	00807dc4 	movi	r2,503
  801dc4:	14402b2e 	bgeu	r2,r17,801e74 <_malloc_r+0x150>
  801dc8:	8806d27a 	srli	r3,r17,9
  801dcc:	18003f1e 	bne	r3,zero,801ecc <_malloc_r+0x1a8>
  801dd0:	880cd0fa 	srli	r6,r17,3
  801dd4:	300490fa 	slli	r2,r6,3
  801dd8:	02c02074 	movhi	r11,129
  801ddc:	5afdc504 	addi	r11,r11,-2284
  801de0:	12cb883a 	add	r5,r2,r11
  801de4:	2c000317 	ldw	r16,12(r5)
  801de8:	580f883a 	mov	r7,r11
  801dec:	2c00041e 	bne	r5,r16,801e00 <_malloc_r+0xdc>
  801df0:	00000a06 	br	801e1c <_malloc_r+0xf8>
  801df4:	1800860e 	bge	r3,zero,802010 <_malloc_r+0x2ec>
  801df8:	84000317 	ldw	r16,12(r16)
  801dfc:	2c000726 	beq	r5,r16,801e1c <_malloc_r+0xf8>
  801e00:	80800117 	ldw	r2,4(r16)
  801e04:	00ffff04 	movi	r3,-4
  801e08:	10c8703a 	and	r4,r2,r3
  801e0c:	2447c83a 	sub	r3,r4,r17
  801e10:	008003c4 	movi	r2,15
  801e14:	10fff70e 	bge	r2,r3,801df4 <_malloc_r+0xd0>
  801e18:	31bfffc4 	addi	r6,r6,-1
  801e1c:	32400044 	addi	r9,r6,1
  801e20:	02802074 	movhi	r10,129
  801e24:	52bdc704 	addi	r10,r10,-2276
  801e28:	54000217 	ldw	r16,8(r10)
  801e2c:	8280a026 	beq	r16,r10,8020b0 <_malloc_r+0x38c>
  801e30:	80800117 	ldw	r2,4(r16)
  801e34:	00ffff04 	movi	r3,-4
  801e38:	10ca703a 	and	r5,r2,r3
  801e3c:	2c4dc83a 	sub	r6,r5,r17
  801e40:	008003c4 	movi	r2,15
  801e44:	11808316 	blt	r2,r6,802054 <_malloc_r+0x330>
  801e48:	52800315 	stw	r10,12(r10)
  801e4c:	52800215 	stw	r10,8(r10)
  801e50:	30002916 	blt	r6,zero,801ef8 <_malloc_r+0x1d4>
  801e54:	8147883a 	add	r3,r16,r5
  801e58:	18800117 	ldw	r2,4(r3)
  801e5c:	9009883a 	mov	r4,r18
  801e60:	10800054 	ori	r2,r2,1
  801e64:	18800115 	stw	r2,4(r3)
  801e68:	080af7c0 	call	80af7c <__malloc_unlock>
  801e6c:	80c00204 	addi	r3,r16,8
  801e70:	003fc006 	br	801d74 <_malloc_r+0x50>
  801e74:	02c02074 	movhi	r11,129
  801e78:	5afdc504 	addi	r11,r11,-2284
  801e7c:	8ac5883a 	add	r2,r17,r11
  801e80:	14000317 	ldw	r16,12(r2)
  801e84:	580f883a 	mov	r7,r11
  801e88:	8806d0fa 	srli	r3,r17,3
  801e8c:	14006c26 	beq	r2,r16,802040 <_malloc_r+0x31c>
  801e90:	80c00117 	ldw	r3,4(r16)
  801e94:	00bfff04 	movi	r2,-4
  801e98:	81800317 	ldw	r6,12(r16)
  801e9c:	1886703a 	and	r3,r3,r2
  801ea0:	80c7883a 	add	r3,r16,r3
  801ea4:	18800117 	ldw	r2,4(r3)
  801ea8:	81400217 	ldw	r5,8(r16)
  801eac:	9009883a 	mov	r4,r18
  801eb0:	10800054 	ori	r2,r2,1
  801eb4:	18800115 	stw	r2,4(r3)
  801eb8:	31400215 	stw	r5,8(r6)
  801ebc:	29800315 	stw	r6,12(r5)
  801ec0:	080af7c0 	call	80af7c <__malloc_unlock>
  801ec4:	80c00204 	addi	r3,r16,8
  801ec8:	003faa06 	br	801d74 <_malloc_r+0x50>
  801ecc:	00800104 	movi	r2,4
  801ed0:	10c0052e 	bgeu	r2,r3,801ee8 <_malloc_r+0x1c4>
  801ed4:	00800504 	movi	r2,20
  801ed8:	10c07836 	bltu	r2,r3,8020bc <_malloc_r+0x398>
  801edc:	198016c4 	addi	r6,r3,91
  801ee0:	300490fa 	slli	r2,r6,3
  801ee4:	003fbc06 	br	801dd8 <_malloc_r+0xb4>
  801ee8:	8804d1ba 	srli	r2,r17,6
  801eec:	11800e04 	addi	r6,r2,56
  801ef0:	300490fa 	slli	r2,r6,3
  801ef4:	003fb806 	br	801dd8 <_malloc_r+0xb4>
  801ef8:	00807fc4 	movi	r2,511
  801efc:	1140bb36 	bltu	r2,r5,8021ec <_malloc_r+0x4c8>
  801f00:	2806d0fa 	srli	r3,r5,3
  801f04:	573ffe04 	addi	fp,r10,-8
  801f08:	00800044 	movi	r2,1
  801f0c:	180890fa 	slli	r4,r3,3
  801f10:	1807d0ba 	srai	r3,r3,2
  801f14:	e1c00117 	ldw	r7,4(fp)
  801f18:	5909883a 	add	r4,r11,r4
  801f1c:	21400217 	ldw	r5,8(r4)
  801f20:	10c4983a 	sll	r2,r2,r3
  801f24:	81000315 	stw	r4,12(r16)
  801f28:	81400215 	stw	r5,8(r16)
  801f2c:	388eb03a 	or	r7,r7,r2
  801f30:	2c000315 	stw	r16,12(r5)
  801f34:	24000215 	stw	r16,8(r4)
  801f38:	e1c00115 	stw	r7,4(fp)
  801f3c:	4807883a 	mov	r3,r9
  801f40:	4800cd16 	blt	r9,zero,802278 <_malloc_r+0x554>
  801f44:	1807d0ba 	srai	r3,r3,2
  801f48:	00800044 	movi	r2,1
  801f4c:	10c8983a 	sll	r4,r2,r3
  801f50:	39004436 	bltu	r7,r4,802064 <_malloc_r+0x340>
  801f54:	21c4703a 	and	r2,r4,r7
  801f58:	10000a1e 	bne	r2,zero,801f84 <_malloc_r+0x260>
  801f5c:	2109883a 	add	r4,r4,r4
  801f60:	00bfff04 	movi	r2,-4
  801f64:	4884703a 	and	r2,r9,r2
  801f68:	3906703a 	and	r3,r7,r4
  801f6c:	12400104 	addi	r9,r2,4
  801f70:	1800041e 	bne	r3,zero,801f84 <_malloc_r+0x260>
  801f74:	2109883a 	add	r4,r4,r4
  801f78:	3904703a 	and	r2,r7,r4
  801f7c:	4a400104 	addi	r9,r9,4
  801f80:	103ffc26 	beq	r2,zero,801f74 <_malloc_r+0x250>
  801f84:	480490fa 	slli	r2,r9,3
  801f88:	4819883a 	mov	r12,r9
  801f8c:	023fff04 	movi	r8,-4
  801f90:	589b883a 	add	r13,r11,r2
  801f94:	6807883a 	mov	r3,r13
  801f98:	014003c4 	movi	r5,15
  801f9c:	1c000317 	ldw	r16,12(r3)
  801fa0:	1c00041e 	bne	r3,r16,801fb4 <_malloc_r+0x290>
  801fa4:	0000a706 	br	802244 <_malloc_r+0x520>
  801fa8:	3000ab0e 	bge	r6,zero,802258 <_malloc_r+0x534>
  801fac:	84000317 	ldw	r16,12(r16)
  801fb0:	1c00a426 	beq	r3,r16,802244 <_malloc_r+0x520>
  801fb4:	80800117 	ldw	r2,4(r16)
  801fb8:	1204703a 	and	r2,r2,r8
  801fbc:	144dc83a 	sub	r6,r2,r17
  801fc0:	29bff90e 	bge	r5,r6,801fa8 <_malloc_r+0x284>
  801fc4:	81000317 	ldw	r4,12(r16)
  801fc8:	80c00217 	ldw	r3,8(r16)
  801fcc:	89400054 	ori	r5,r17,1
  801fd0:	8445883a 	add	r2,r16,r17
  801fd4:	20c00215 	stw	r3,8(r4)
  801fd8:	19000315 	stw	r4,12(r3)
  801fdc:	81400115 	stw	r5,4(r16)
  801fe0:	1187883a 	add	r3,r2,r6
  801fe4:	31000054 	ori	r4,r6,1
  801fe8:	50800315 	stw	r2,12(r10)
  801fec:	50800215 	stw	r2,8(r10)
  801ff0:	19800015 	stw	r6,0(r3)
  801ff4:	11000115 	stw	r4,4(r2)
  801ff8:	12800215 	stw	r10,8(r2)
  801ffc:	12800315 	stw	r10,12(r2)
  802000:	9009883a 	mov	r4,r18
  802004:	080af7c0 	call	80af7c <__malloc_unlock>
  802008:	80c00204 	addi	r3,r16,8
  80200c:	003f5906 	br	801d74 <_malloc_r+0x50>
  802010:	8109883a 	add	r4,r16,r4
  802014:	20800117 	ldw	r2,4(r4)
  802018:	80c00217 	ldw	r3,8(r16)
  80201c:	81400317 	ldw	r5,12(r16)
  802020:	10800054 	ori	r2,r2,1
  802024:	20800115 	stw	r2,4(r4)
  802028:	28c00215 	stw	r3,8(r5)
  80202c:	19400315 	stw	r5,12(r3)
  802030:	9009883a 	mov	r4,r18
  802034:	080af7c0 	call	80af7c <__malloc_unlock>
  802038:	80c00204 	addi	r3,r16,8
  80203c:	003f4d06 	br	801d74 <_malloc_r+0x50>
  802040:	80800204 	addi	r2,r16,8
  802044:	14000317 	ldw	r16,12(r2)
  802048:	143f911e 	bne	r2,r16,801e90 <_malloc_r+0x16c>
  80204c:	1a400084 	addi	r9,r3,2
  802050:	003f7306 	br	801e20 <_malloc_r+0xfc>
  802054:	88c00054 	ori	r3,r17,1
  802058:	8445883a 	add	r2,r16,r17
  80205c:	80c00115 	stw	r3,4(r16)
  802060:	003fdf06 	br	801fe0 <_malloc_r+0x2bc>
  802064:	e4000217 	ldw	r16,8(fp)
  802068:	00bfff04 	movi	r2,-4
  80206c:	80c00117 	ldw	r3,4(r16)
  802070:	802d883a 	mov	r22,r16
  802074:	18aa703a 	and	r21,r3,r2
  802078:	ac401636 	bltu	r21,r17,8020d4 <_malloc_r+0x3b0>
  80207c:	ac49c83a 	sub	r4,r21,r17
  802080:	008003c4 	movi	r2,15
  802084:	1100130e 	bge	r2,r4,8020d4 <_malloc_r+0x3b0>
  802088:	88800054 	ori	r2,r17,1
  80208c:	8447883a 	add	r3,r16,r17
  802090:	80800115 	stw	r2,4(r16)
  802094:	20800054 	ori	r2,r4,1
  802098:	18800115 	stw	r2,4(r3)
  80209c:	e0c00215 	stw	r3,8(fp)
  8020a0:	9009883a 	mov	r4,r18
  8020a4:	080af7c0 	call	80af7c <__malloc_unlock>
  8020a8:	80c00204 	addi	r3,r16,8
  8020ac:	003f3106 	br	801d74 <_malloc_r+0x50>
  8020b0:	39c00117 	ldw	r7,4(r7)
  8020b4:	573ffe04 	addi	fp,r10,-8
  8020b8:	003fa006 	br	801f3c <_malloc_r+0x218>
  8020bc:	00801504 	movi	r2,84
  8020c0:	10c06736 	bltu	r2,r3,802260 <_malloc_r+0x53c>
  8020c4:	8804d33a 	srli	r2,r17,12
  8020c8:	11801b84 	addi	r6,r2,110
  8020cc:	300490fa 	slli	r2,r6,3
  8020d0:	003f4106 	br	801dd8 <_malloc_r+0xb4>
  8020d4:	d0a74417 	ldw	r2,-25328(gp)
  8020d8:	d0e00517 	ldw	r3,-32748(gp)
  8020dc:	053fffc4 	movi	r20,-1
  8020e0:	10800404 	addi	r2,r2,16
  8020e4:	88a7883a 	add	r19,r17,r2
  8020e8:	1d000326 	beq	r3,r20,8020f8 <_malloc_r+0x3d4>
  8020ec:	98c3ffc4 	addi	r3,r19,4095
  8020f0:	00bc0004 	movi	r2,-4096
  8020f4:	18a6703a 	and	r19,r3,r2
  8020f8:	9009883a 	mov	r4,r18
  8020fc:	980b883a 	mov	r5,r19
  802100:	08027cc0 	call	8027cc <_sbrk_r>
  802104:	1009883a 	mov	r4,r2
  802108:	15000426 	beq	r2,r20,80211c <_malloc_r+0x3f8>
  80210c:	854b883a 	add	r5,r16,r21
  802110:	1029883a 	mov	r20,r2
  802114:	11405a2e 	bgeu	r2,r5,802280 <_malloc_r+0x55c>
  802118:	87000c26 	beq	r16,fp,80214c <_malloc_r+0x428>
  80211c:	e4000217 	ldw	r16,8(fp)
  802120:	80c00117 	ldw	r3,4(r16)
  802124:	00bfff04 	movi	r2,-4
  802128:	1884703a 	and	r2,r3,r2
  80212c:	14400336 	bltu	r2,r17,80213c <_malloc_r+0x418>
  802130:	1449c83a 	sub	r4,r2,r17
  802134:	008003c4 	movi	r2,15
  802138:	113fd316 	blt	r2,r4,802088 <_malloc_r+0x364>
  80213c:	9009883a 	mov	r4,r18
  802140:	080af7c0 	call	80af7c <__malloc_unlock>
  802144:	0007883a 	mov	r3,zero
  802148:	003f0a06 	br	801d74 <_malloc_r+0x50>
  80214c:	05c02074 	movhi	r23,129
  802150:	bdcb2104 	addi	r23,r23,11396
  802154:	b8800017 	ldw	r2,0(r23)
  802158:	988d883a 	add	r6,r19,r2
  80215c:	b9800015 	stw	r6,0(r23)
  802160:	d0e00517 	ldw	r3,-32748(gp)
  802164:	00bfffc4 	movi	r2,-1
  802168:	18808e26 	beq	r3,r2,8023a4 <_malloc_r+0x680>
  80216c:	2145c83a 	sub	r2,r4,r5
  802170:	3085883a 	add	r2,r6,r2
  802174:	b8800015 	stw	r2,0(r23)
  802178:	20c001cc 	andi	r3,r4,7
  80217c:	18005f1e 	bne	r3,zero,8022fc <_malloc_r+0x5d8>
  802180:	000b883a 	mov	r5,zero
  802184:	a4c5883a 	add	r2,r20,r19
  802188:	1083ffcc 	andi	r2,r2,4095
  80218c:	00c40004 	movi	r3,4096
  802190:	1887c83a 	sub	r3,r3,r2
  802194:	28e7883a 	add	r19,r5,r3
  802198:	9009883a 	mov	r4,r18
  80219c:	980b883a 	mov	r5,r19
  8021a0:	08027cc0 	call	8027cc <_sbrk_r>
  8021a4:	1007883a 	mov	r3,r2
  8021a8:	00bfffc4 	movi	r2,-1
  8021ac:	18807a26 	beq	r3,r2,802398 <_malloc_r+0x674>
  8021b0:	1d05c83a 	sub	r2,r3,r20
  8021b4:	9885883a 	add	r2,r19,r2
  8021b8:	10c00054 	ori	r3,r2,1
  8021bc:	b8800017 	ldw	r2,0(r23)
  8021c0:	a021883a 	mov	r16,r20
  8021c4:	a0c00115 	stw	r3,4(r20)
  8021c8:	9885883a 	add	r2,r19,r2
  8021cc:	b8800015 	stw	r2,0(r23)
  8021d0:	e5000215 	stw	r20,8(fp)
  8021d4:	b7003626 	beq	r22,fp,8022b0 <_malloc_r+0x58c>
  8021d8:	018003c4 	movi	r6,15
  8021dc:	35404b36 	bltu	r6,r21,80230c <_malloc_r+0x5e8>
  8021e0:	00800044 	movi	r2,1
  8021e4:	a0800115 	stw	r2,4(r20)
  8021e8:	003fcd06 	br	802120 <_malloc_r+0x3fc>
  8021ec:	2808d27a 	srli	r4,r5,9
  8021f0:	2000371e 	bne	r4,zero,8022d0 <_malloc_r+0x5ac>
  8021f4:	2808d0fa 	srli	r4,r5,3
  8021f8:	200690fa 	slli	r3,r4,3
  8021fc:	1ad1883a 	add	r8,r3,r11
  802200:	41800217 	ldw	r6,8(r8)
  802204:	41805b26 	beq	r8,r6,802374 <_malloc_r+0x650>
  802208:	30800117 	ldw	r2,4(r6)
  80220c:	00ffff04 	movi	r3,-4
  802210:	10c4703a 	and	r2,r2,r3
  802214:	2880022e 	bgeu	r5,r2,802220 <_malloc_r+0x4fc>
  802218:	31800217 	ldw	r6,8(r6)
  80221c:	41bffa1e 	bne	r8,r6,802208 <_malloc_r+0x4e4>
  802220:	32000317 	ldw	r8,12(r6)
  802224:	39c00117 	ldw	r7,4(r7)
  802228:	82000315 	stw	r8,12(r16)
  80222c:	81800215 	stw	r6,8(r16)
  802230:	07002074 	movhi	fp,129
  802234:	e73dc504 	addi	fp,fp,-2284
  802238:	34000315 	stw	r16,12(r6)
  80223c:	44000215 	stw	r16,8(r8)
  802240:	003f3e06 	br	801f3c <_malloc_r+0x218>
  802244:	63000044 	addi	r12,r12,1
  802248:	608000cc 	andi	r2,r12,3
  80224c:	10005d26 	beq	r2,zero,8023c4 <_malloc_r+0x6a0>
  802250:	18c00204 	addi	r3,r3,8
  802254:	003f5106 	br	801f9c <_malloc_r+0x278>
  802258:	8089883a 	add	r4,r16,r2
  80225c:	003f6d06 	br	802014 <_malloc_r+0x2f0>
  802260:	00805504 	movi	r2,340
  802264:	10c02036 	bltu	r2,r3,8022e8 <_malloc_r+0x5c4>
  802268:	8804d3fa 	srli	r2,r17,15
  80226c:	11801dc4 	addi	r6,r2,119
  802270:	300490fa 	slli	r2,r6,3
  802274:	003ed806 	br	801dd8 <_malloc_r+0xb4>
  802278:	48c000c4 	addi	r3,r9,3
  80227c:	003f3106 	br	801f44 <_malloc_r+0x220>
  802280:	05c02074 	movhi	r23,129
  802284:	bdcb2104 	addi	r23,r23,11396
  802288:	b8800017 	ldw	r2,0(r23)
  80228c:	988d883a 	add	r6,r19,r2
  802290:	b9800015 	stw	r6,0(r23)
  802294:	293fb21e 	bne	r5,r4,802160 <_malloc_r+0x43c>
  802298:	2083ffcc 	andi	r2,r4,4095
  80229c:	103fb01e 	bne	r2,zero,802160 <_malloc_r+0x43c>
  8022a0:	e4000217 	ldw	r16,8(fp)
  8022a4:	9d45883a 	add	r2,r19,r21
  8022a8:	10800054 	ori	r2,r2,1
  8022ac:	80800115 	stw	r2,4(r16)
  8022b0:	b8c00017 	ldw	r3,0(r23)
  8022b4:	d0a74517 	ldw	r2,-25324(gp)
  8022b8:	10c0012e 	bgeu	r2,r3,8022c0 <_malloc_r+0x59c>
  8022bc:	d0e74515 	stw	r3,-25324(gp)
  8022c0:	d0a74617 	ldw	r2,-25320(gp)
  8022c4:	10ff962e 	bgeu	r2,r3,802120 <_malloc_r+0x3fc>
  8022c8:	d0e74615 	stw	r3,-25320(gp)
  8022cc:	003f9406 	br	802120 <_malloc_r+0x3fc>
  8022d0:	00800104 	movi	r2,4
  8022d4:	11001e36 	bltu	r2,r4,802350 <_malloc_r+0x62c>
  8022d8:	2804d1ba 	srli	r2,r5,6
  8022dc:	11000e04 	addi	r4,r2,56
  8022e0:	200690fa 	slli	r3,r4,3
  8022e4:	003fc506 	br	8021fc <_malloc_r+0x4d8>
  8022e8:	00815504 	movi	r2,1364
  8022ec:	10c01d2e 	bgeu	r2,r3,802364 <_malloc_r+0x640>
  8022f0:	01801f84 	movi	r6,126
  8022f4:	0080fc04 	movi	r2,1008
  8022f8:	003eb706 	br	801dd8 <_malloc_r+0xb4>
  8022fc:	00800204 	movi	r2,8
  802300:	10cbc83a 	sub	r5,r2,r3
  802304:	2169883a 	add	r20,r4,r5
  802308:	003f9e06 	br	802184 <_malloc_r+0x460>
  80230c:	00bffe04 	movi	r2,-8
  802310:	a93ffd04 	addi	r4,r21,-12
  802314:	2088703a 	and	r4,r4,r2
  802318:	b10b883a 	add	r5,r22,r4
  80231c:	00c00144 	movi	r3,5
  802320:	28c00215 	stw	r3,8(r5)
  802324:	28c00115 	stw	r3,4(r5)
  802328:	b0800117 	ldw	r2,4(r22)
  80232c:	1080004c 	andi	r2,r2,1
  802330:	2084b03a 	or	r2,r4,r2
  802334:	b0800115 	stw	r2,4(r22)
  802338:	313fdd2e 	bgeu	r6,r4,8022b0 <_malloc_r+0x58c>
  80233c:	b1400204 	addi	r5,r22,8
  802340:	9009883a 	mov	r4,r18
  802344:	08012280 	call	801228 <_free_r>
  802348:	e4000217 	ldw	r16,8(fp)
  80234c:	003fd806 	br	8022b0 <_malloc_r+0x58c>
  802350:	00800504 	movi	r2,20
  802354:	11001536 	bltu	r2,r4,8023ac <_malloc_r+0x688>
  802358:	210016c4 	addi	r4,r4,91
  80235c:	200690fa 	slli	r3,r4,3
  802360:	003fa606 	br	8021fc <_malloc_r+0x4d8>
  802364:	8804d4ba 	srli	r2,r17,18
  802368:	11801f04 	addi	r6,r2,124
  80236c:	300490fa 	slli	r2,r6,3
  802370:	003e9906 	br	801dd8 <_malloc_r+0xb4>
  802374:	2009d0ba 	srai	r4,r4,2
  802378:	01402074 	movhi	r5,129
  80237c:	297dc504 	addi	r5,r5,-2284
  802380:	00c00044 	movi	r3,1
  802384:	28800117 	ldw	r2,4(r5)
  802388:	1906983a 	sll	r3,r3,r4
  80238c:	10c4b03a 	or	r2,r2,r3
  802390:	28800115 	stw	r2,4(r5)
  802394:	003fa306 	br	802224 <_malloc_r+0x500>
  802398:	0027883a 	mov	r19,zero
  80239c:	00c00044 	movi	r3,1
  8023a0:	003f8606 	br	8021bc <_malloc_r+0x498>
  8023a4:	d1200515 	stw	r4,-32748(gp)
  8023a8:	003f7306 	br	802178 <_malloc_r+0x454>
  8023ac:	00801504 	movi	r2,84
  8023b0:	11001936 	bltu	r2,r4,802418 <_malloc_r+0x6f4>
  8023b4:	2804d33a 	srli	r2,r5,12
  8023b8:	11001b84 	addi	r4,r2,110
  8023bc:	200690fa 	slli	r3,r4,3
  8023c0:	003f8e06 	br	8021fc <_malloc_r+0x4d8>
  8023c4:	480b883a 	mov	r5,r9
  8023c8:	6807883a 	mov	r3,r13
  8023cc:	288000cc 	andi	r2,r5,3
  8023d0:	18fffe04 	addi	r3,r3,-8
  8023d4:	297fffc4 	addi	r5,r5,-1
  8023d8:	10001526 	beq	r2,zero,802430 <_malloc_r+0x70c>
  8023dc:	18800217 	ldw	r2,8(r3)
  8023e0:	10fffa26 	beq	r2,r3,8023cc <_malloc_r+0x6a8>
  8023e4:	2109883a 	add	r4,r4,r4
  8023e8:	393f1e36 	bltu	r7,r4,802064 <_malloc_r+0x340>
  8023ec:	203f1d26 	beq	r4,zero,802064 <_malloc_r+0x340>
  8023f0:	21c4703a 	and	r2,r4,r7
  8023f4:	10000226 	beq	r2,zero,802400 <_malloc_r+0x6dc>
  8023f8:	6013883a 	mov	r9,r12
  8023fc:	003ee106 	br	801f84 <_malloc_r+0x260>
  802400:	2109883a 	add	r4,r4,r4
  802404:	3904703a 	and	r2,r7,r4
  802408:	63000104 	addi	r12,r12,4
  80240c:	103ffc26 	beq	r2,zero,802400 <_malloc_r+0x6dc>
  802410:	6013883a 	mov	r9,r12
  802414:	003edb06 	br	801f84 <_malloc_r+0x260>
  802418:	00805504 	movi	r2,340
  80241c:	11000836 	bltu	r2,r4,802440 <_malloc_r+0x71c>
  802420:	2804d3fa 	srli	r2,r5,15
  802424:	11001dc4 	addi	r4,r2,119
  802428:	200690fa 	slli	r3,r4,3
  80242c:	003f7306 	br	8021fc <_malloc_r+0x4d8>
  802430:	0104303a 	nor	r2,zero,r4
  802434:	388e703a 	and	r7,r7,r2
  802438:	e1c00115 	stw	r7,4(fp)
  80243c:	003fe906 	br	8023e4 <_malloc_r+0x6c0>
  802440:	00815504 	movi	r2,1364
  802444:	1100032e 	bgeu	r2,r4,802454 <_malloc_r+0x730>
  802448:	01001f84 	movi	r4,126
  80244c:	00c0fc04 	movi	r3,1008
  802450:	003f6a06 	br	8021fc <_malloc_r+0x4d8>
  802454:	2804d4ba 	srli	r2,r5,18
  802458:	11001f04 	addi	r4,r2,124
  80245c:	200690fa 	slli	r3,r4,3
  802460:	003f6606 	br	8021fc <_malloc_r+0x4d8>

00802464 <memset>:
  802464:	008000c4 	movi	r2,3
  802468:	29403fcc 	andi	r5,r5,255
  80246c:	2007883a 	mov	r3,r4
  802470:	1180022e 	bgeu	r2,r6,80247c <memset+0x18>
  802474:	2084703a 	and	r2,r4,r2
  802478:	10000826 	beq	r2,zero,80249c <memset+0x38>
  80247c:	30000526 	beq	r6,zero,802494 <memset+0x30>
  802480:	2805883a 	mov	r2,r5
  802484:	30cd883a 	add	r6,r6,r3
  802488:	18800005 	stb	r2,0(r3)
  80248c:	18c00044 	addi	r3,r3,1
  802490:	19bffd1e 	bne	r3,r6,802488 <memset+0x24>
  802494:	2005883a 	mov	r2,r4
  802498:	f800283a 	ret
  80249c:	2804923a 	slli	r2,r5,8
  8024a0:	020003c4 	movi	r8,15
  8024a4:	200f883a 	mov	r7,r4
  8024a8:	2884b03a 	or	r2,r5,r2
  8024ac:	1006943a 	slli	r3,r2,16
  8024b0:	10c6b03a 	or	r3,r2,r3
  8024b4:	41800a2e 	bgeu	r8,r6,8024e0 <memset+0x7c>
  8024b8:	4005883a 	mov	r2,r8
  8024bc:	31bffc04 	addi	r6,r6,-16
  8024c0:	38c00015 	stw	r3,0(r7)
  8024c4:	38c00115 	stw	r3,4(r7)
  8024c8:	38c00215 	stw	r3,8(r7)
  8024cc:	38c00315 	stw	r3,12(r7)
  8024d0:	39c00404 	addi	r7,r7,16
  8024d4:	11bff936 	bltu	r2,r6,8024bc <memset+0x58>
  8024d8:	008000c4 	movi	r2,3
  8024dc:	1180052e 	bgeu	r2,r6,8024f4 <memset+0x90>
  8024e0:	31bfff04 	addi	r6,r6,-4
  8024e4:	008000c4 	movi	r2,3
  8024e8:	38c00015 	stw	r3,0(r7)
  8024ec:	39c00104 	addi	r7,r7,4
  8024f0:	11bffb36 	bltu	r2,r6,8024e0 <memset+0x7c>
  8024f4:	3807883a 	mov	r3,r7
  8024f8:	003fe006 	br	80247c <memset+0x18>

008024fc <_open_r>:
  8024fc:	defffd04 	addi	sp,sp,-12
  802500:	dc000015 	stw	r16,0(sp)
  802504:	04002074 	movhi	r16,129
  802508:	840b0804 	addi	r16,r16,11296
  80250c:	dc400115 	stw	r17,4(sp)
  802510:	80000015 	stw	zero,0(r16)
  802514:	2023883a 	mov	r17,r4
  802518:	2809883a 	mov	r4,r5
  80251c:	300b883a 	mov	r5,r6
  802520:	380d883a 	mov	r6,r7
  802524:	dfc00215 	stw	ra,8(sp)
  802528:	080b0780 	call	80b078 <open>
  80252c:	1007883a 	mov	r3,r2
  802530:	00bfffc4 	movi	r2,-1
  802534:	18800626 	beq	r3,r2,802550 <_open_r+0x54>
  802538:	1805883a 	mov	r2,r3
  80253c:	dfc00217 	ldw	ra,8(sp)
  802540:	dc400117 	ldw	r17,4(sp)
  802544:	dc000017 	ldw	r16,0(sp)
  802548:	dec00304 	addi	sp,sp,12
  80254c:	f800283a 	ret
  802550:	80800017 	ldw	r2,0(r16)
  802554:	103ff826 	beq	r2,zero,802538 <_open_r+0x3c>
  802558:	88800015 	stw	r2,0(r17)
  80255c:	1805883a 	mov	r2,r3
  802560:	dfc00217 	ldw	ra,8(sp)
  802564:	dc400117 	ldw	r17,4(sp)
  802568:	dc000017 	ldw	r16,0(sp)
  80256c:	dec00304 	addi	sp,sp,12
  802570:	f800283a 	ret

00802574 <printf>:
  802574:	defffb04 	addi	sp,sp,-20
  802578:	dfc00115 	stw	ra,4(sp)
  80257c:	d9400215 	stw	r5,8(sp)
  802580:	d9800315 	stw	r6,12(sp)
  802584:	d9c00415 	stw	r7,16(sp)
  802588:	00802074 	movhi	r2,129
  80258c:	1083c704 	addi	r2,r2,3868
  802590:	10c00017 	ldw	r3,0(r2)
  802594:	200b883a 	mov	r5,r4
  802598:	d8800204 	addi	r2,sp,8
  80259c:	19000217 	ldw	r4,8(r3)
  8025a0:	100d883a 	mov	r6,r2
  8025a4:	d8800015 	stw	r2,0(sp)
  8025a8:	080488c0 	call	80488c <__vfprintf_internal>
  8025ac:	dfc00117 	ldw	ra,4(sp)
  8025b0:	dec00504 	addi	sp,sp,20
  8025b4:	f800283a 	ret

008025b8 <_printf_r>:
  8025b8:	defffc04 	addi	sp,sp,-16
  8025bc:	dfc00115 	stw	ra,4(sp)
  8025c0:	d9800215 	stw	r6,8(sp)
  8025c4:	d9c00315 	stw	r7,12(sp)
  8025c8:	280d883a 	mov	r6,r5
  8025cc:	21400217 	ldw	r5,8(r4)
  8025d0:	d8c00204 	addi	r3,sp,8
  8025d4:	180f883a 	mov	r7,r3
  8025d8:	d8c00015 	stw	r3,0(sp)
  8025dc:	08029e00 	call	8029e0 <___vfprintf_internal_r>
  8025e0:	dfc00117 	ldw	ra,4(sp)
  8025e4:	dec00404 	addi	sp,sp,16
  8025e8:	f800283a 	ret

008025ec <__srefill_r>:
  8025ec:	defffd04 	addi	sp,sp,-12
  8025f0:	dc400115 	stw	r17,4(sp)
  8025f4:	dc000015 	stw	r16,0(sp)
  8025f8:	dfc00215 	stw	ra,8(sp)
  8025fc:	2023883a 	mov	r17,r4
  802600:	2821883a 	mov	r16,r5
  802604:	20000226 	beq	r4,zero,802610 <__srefill_r+0x24>
  802608:	20800e17 	ldw	r2,56(r4)
  80260c:	10004126 	beq	r2,zero,802714 <__srefill_r+0x128>
  802610:	80c0030b 	ldhu	r3,12(r16)
  802614:	80000115 	stw	zero,4(r16)
  802618:	1880080c 	andi	r2,r3,32
  80261c:	1000361e 	bne	r2,zero,8026f8 <__srefill_r+0x10c>
  802620:	1880010c 	andi	r2,r3,4
  802624:	1000211e 	bne	r2,zero,8026ac <__srefill_r+0xc0>
  802628:	1880040c 	andi	r2,r3,16
  80262c:	10005026 	beq	r2,zero,802770 <__srefill_r+0x184>
  802630:	1880020c 	andi	r2,r3,8
  802634:	1000541e 	bne	r2,zero,802788 <__srefill_r+0x19c>
  802638:	8080030b 	ldhu	r2,12(r16)
  80263c:	10800114 	ori	r2,r2,4
  802640:	8080030d 	sth	r2,12(r16)
  802644:	80800417 	ldw	r2,16(r16)
  802648:	10004526 	beq	r2,zero,802760 <__srefill_r+0x174>
  80264c:	8080030b 	ldhu	r2,12(r16)
  802650:	108000cc 	andi	r2,r2,3
  802654:	1000361e 	bne	r2,zero,802730 <__srefill_r+0x144>
  802658:	81800417 	ldw	r6,16(r16)
  80265c:	80c00817 	ldw	r3,32(r16)
  802660:	81400717 	ldw	r5,28(r16)
  802664:	81c00517 	ldw	r7,20(r16)
  802668:	8809883a 	mov	r4,r17
  80266c:	81800015 	stw	r6,0(r16)
  802670:	183ee83a 	callr	r3
  802674:	80c0030b 	ldhu	r3,12(r16)
  802678:	1009883a 	mov	r4,r2
  80267c:	80800115 	stw	r2,4(r16)
  802680:	00b7ffc4 	movi	r2,-8193
  802684:	1884703a 	and	r2,r3,r2
  802688:	8080030d 	sth	r2,12(r16)
  80268c:	0100230e 	bge	zero,r4,80271c <__srefill_r+0x130>
  802690:	0009883a 	mov	r4,zero
  802694:	2005883a 	mov	r2,r4
  802698:	dfc00217 	ldw	ra,8(sp)
  80269c:	dc400117 	ldw	r17,4(sp)
  8026a0:	dc000017 	ldw	r16,0(sp)
  8026a4:	dec00304 	addi	sp,sp,12
  8026a8:	f800283a 	ret
  8026ac:	81400c17 	ldw	r5,48(r16)
  8026b0:	283fe426 	beq	r5,zero,802644 <__srefill_r+0x58>
  8026b4:	80801004 	addi	r2,r16,64
  8026b8:	28800226 	beq	r5,r2,8026c4 <__srefill_r+0xd8>
  8026bc:	8809883a 	mov	r4,r17
  8026c0:	08012280 	call	801228 <_free_r>
  8026c4:	80800f17 	ldw	r2,60(r16)
  8026c8:	80000c15 	stw	zero,48(r16)
  8026cc:	80800115 	stw	r2,4(r16)
  8026d0:	103fdc26 	beq	r2,zero,802644 <__srefill_r+0x58>
  8026d4:	80800e17 	ldw	r2,56(r16)
  8026d8:	0009883a 	mov	r4,zero
  8026dc:	80800015 	stw	r2,0(r16)
  8026e0:	2005883a 	mov	r2,r4
  8026e4:	dfc00217 	ldw	ra,8(sp)
  8026e8:	dc400117 	ldw	r17,4(sp)
  8026ec:	dc000017 	ldw	r16,0(sp)
  8026f0:	dec00304 	addi	sp,sp,12
  8026f4:	f800283a 	ret
  8026f8:	013fffc4 	movi	r4,-1
  8026fc:	2005883a 	mov	r2,r4
  802700:	dfc00217 	ldw	ra,8(sp)
  802704:	dc400117 	ldw	r17,4(sp)
  802708:	dc000017 	ldw	r16,0(sp)
  80270c:	dec00304 	addi	sp,sp,12
  802710:	f800283a 	ret
  802714:	0800d340 	call	800d34 <__sinit>
  802718:	003fbd06 	br	802610 <__srefill_r+0x24>
  80271c:	20000b1e 	bne	r4,zero,80274c <__srefill_r+0x160>
  802720:	10800814 	ori	r2,r2,32
  802724:	013fffc4 	movi	r4,-1
  802728:	8080030d 	sth	r2,12(r16)
  80272c:	003fd906 	br	802694 <__srefill_r+0xa8>
  802730:	00802074 	movhi	r2,129
  802734:	1083c804 	addi	r2,r2,3872
  802738:	11000017 	ldw	r4,0(r2)
  80273c:	01402034 	movhi	r5,128
  802740:	2949ec04 	addi	r5,r5,10160
  802744:	0801ad80 	call	801ad8 <_fwalk>
  802748:	003fc306 	br	802658 <__srefill_r+0x6c>
  80274c:	10801014 	ori	r2,r2,64
  802750:	013fffc4 	movi	r4,-1
  802754:	8080030d 	sth	r2,12(r16)
  802758:	80000115 	stw	zero,4(r16)
  80275c:	003fcd06 	br	802694 <__srefill_r+0xa8>
  802760:	8809883a 	mov	r4,r17
  802764:	800b883a 	mov	r5,r16
  802768:	0801b900 	call	801b90 <__smakebuf_r>
  80276c:	003fb706 	br	80264c <__srefill_r+0x60>
  802770:	18c01014 	ori	r3,r3,64
  802774:	00800244 	movi	r2,9
  802778:	013fffc4 	movi	r4,-1
  80277c:	88800015 	stw	r2,0(r17)
  802780:	80c0030d 	sth	r3,12(r16)
  802784:	003fc306 	br	802694 <__srefill_r+0xa8>
  802788:	8809883a 	mov	r4,r17
  80278c:	800b883a 	mov	r5,r16
  802790:	0800a9c0 	call	800a9c <_fflush_r>
  802794:	103fd81e 	bne	r2,zero,8026f8 <__srefill_r+0x10c>
  802798:	8080030b 	ldhu	r2,12(r16)
  80279c:	80000215 	stw	zero,8(r16)
  8027a0:	80000615 	stw	zero,24(r16)
  8027a4:	10bffdcc 	andi	r2,r2,65527
  8027a8:	8080030d 	sth	r2,12(r16)
  8027ac:	003fa206 	br	802638 <__srefill_r+0x4c>

008027b0 <lflush>:
  8027b0:	20c0030b 	ldhu	r3,12(r4)
  8027b4:	01400244 	movi	r5,9
  8027b8:	0005883a 	mov	r2,zero
  8027bc:	18c0024c 	andi	r3,r3,9
  8027c0:	19400126 	beq	r3,r5,8027c8 <lflush+0x18>
  8027c4:	f800283a 	ret
  8027c8:	0800c981 	jmpi	800c98 <fflush>

008027cc <_sbrk_r>:
  8027cc:	defffd04 	addi	sp,sp,-12
  8027d0:	dc000015 	stw	r16,0(sp)
  8027d4:	04002074 	movhi	r16,129
  8027d8:	840b0804 	addi	r16,r16,11296
  8027dc:	dc400115 	stw	r17,4(sp)
  8027e0:	80000015 	stw	zero,0(r16)
  8027e4:	2023883a 	mov	r17,r4
  8027e8:	2809883a 	mov	r4,r5
  8027ec:	dfc00215 	stw	ra,8(sp)
  8027f0:	080b4400 	call	80b440 <sbrk>
  8027f4:	1007883a 	mov	r3,r2
  8027f8:	00bfffc4 	movi	r2,-1
  8027fc:	18800626 	beq	r3,r2,802818 <_sbrk_r+0x4c>
  802800:	1805883a 	mov	r2,r3
  802804:	dfc00217 	ldw	ra,8(sp)
  802808:	dc400117 	ldw	r17,4(sp)
  80280c:	dc000017 	ldw	r16,0(sp)
  802810:	dec00304 	addi	sp,sp,12
  802814:	f800283a 	ret
  802818:	80800017 	ldw	r2,0(r16)
  80281c:	103ff826 	beq	r2,zero,802800 <_sbrk_r+0x34>
  802820:	88800015 	stw	r2,0(r17)
  802824:	1805883a 	mov	r2,r3
  802828:	dfc00217 	ldw	ra,8(sp)
  80282c:	dc400117 	ldw	r17,4(sp)
  802830:	dc000017 	ldw	r16,0(sp)
  802834:	dec00304 	addi	sp,sp,12
  802838:	f800283a 	ret

0080283c <__sclose>:
  80283c:	2940038f 	ldh	r5,14(r5)
  802840:	0804a641 	jmpi	804a64 <_close_r>

00802844 <__sseek>:
  802844:	defffe04 	addi	sp,sp,-8
  802848:	dc000015 	stw	r16,0(sp)
  80284c:	2821883a 	mov	r16,r5
  802850:	2940038f 	ldh	r5,14(r5)
  802854:	dfc00115 	stw	ra,4(sp)
  802858:	08069100 	call	806910 <_lseek_r>
  80285c:	1007883a 	mov	r3,r2
  802860:	00bfffc4 	movi	r2,-1
  802864:	18800926 	beq	r3,r2,80288c <__sseek+0x48>
  802868:	8080030b 	ldhu	r2,12(r16)
  80286c:	80c01415 	stw	r3,80(r16)
  802870:	10840014 	ori	r2,r2,4096
  802874:	8080030d 	sth	r2,12(r16)
  802878:	1805883a 	mov	r2,r3
  80287c:	dfc00117 	ldw	ra,4(sp)
  802880:	dc000017 	ldw	r16,0(sp)
  802884:	dec00204 	addi	sp,sp,8
  802888:	f800283a 	ret
  80288c:	8080030b 	ldhu	r2,12(r16)
  802890:	10bbffcc 	andi	r2,r2,61439
  802894:	8080030d 	sth	r2,12(r16)
  802898:	1805883a 	mov	r2,r3
  80289c:	dfc00117 	ldw	ra,4(sp)
  8028a0:	dc000017 	ldw	r16,0(sp)
  8028a4:	dec00204 	addi	sp,sp,8
  8028a8:	f800283a 	ret

008028ac <__swrite>:
  8028ac:	2880030b 	ldhu	r2,12(r5)
  8028b0:	defffb04 	addi	sp,sp,-20
  8028b4:	dcc00315 	stw	r19,12(sp)
  8028b8:	1080400c 	andi	r2,r2,256
  8028bc:	dc800215 	stw	r18,8(sp)
  8028c0:	dc400115 	stw	r17,4(sp)
  8028c4:	dc000015 	stw	r16,0(sp)
  8028c8:	3027883a 	mov	r19,r6
  8028cc:	3825883a 	mov	r18,r7
  8028d0:	dfc00415 	stw	ra,16(sp)
  8028d4:	2821883a 	mov	r16,r5
  8028d8:	000d883a 	mov	r6,zero
  8028dc:	01c00084 	movi	r7,2
  8028e0:	2023883a 	mov	r17,r4
  8028e4:	10000226 	beq	r2,zero,8028f0 <__swrite+0x44>
  8028e8:	2940038f 	ldh	r5,14(r5)
  8028ec:	08069100 	call	806910 <_lseek_r>
  8028f0:	8080030b 	ldhu	r2,12(r16)
  8028f4:	8140038f 	ldh	r5,14(r16)
  8028f8:	8809883a 	mov	r4,r17
  8028fc:	10bbffcc 	andi	r2,r2,61439
  802900:	980d883a 	mov	r6,r19
  802904:	900f883a 	mov	r7,r18
  802908:	8080030d 	sth	r2,12(r16)
  80290c:	dfc00417 	ldw	ra,16(sp)
  802910:	dcc00317 	ldw	r19,12(sp)
  802914:	dc800217 	ldw	r18,8(sp)
  802918:	dc400117 	ldw	r17,4(sp)
  80291c:	dc000017 	ldw	r16,0(sp)
  802920:	dec00504 	addi	sp,sp,20
  802924:	08048b01 	jmpi	8048b0 <_write_r>

00802928 <__sread>:
  802928:	defffe04 	addi	sp,sp,-8
  80292c:	dc000015 	stw	r16,0(sp)
  802930:	2821883a 	mov	r16,r5
  802934:	2940038f 	ldh	r5,14(r5)
  802938:	dfc00115 	stw	ra,4(sp)
  80293c:	0807be00 	call	807be0 <_read_r>
  802940:	1007883a 	mov	r3,r2
  802944:	10000816 	blt	r2,zero,802968 <__sread+0x40>
  802948:	80801417 	ldw	r2,80(r16)
  80294c:	10c5883a 	add	r2,r2,r3
  802950:	80801415 	stw	r2,80(r16)
  802954:	1805883a 	mov	r2,r3
  802958:	dfc00117 	ldw	ra,4(sp)
  80295c:	dc000017 	ldw	r16,0(sp)
  802960:	dec00204 	addi	sp,sp,8
  802964:	f800283a 	ret
  802968:	8080030b 	ldhu	r2,12(r16)
  80296c:	10bbffcc 	andi	r2,r2,61439
  802970:	8080030d 	sth	r2,12(r16)
  802974:	1805883a 	mov	r2,r3
  802978:	dfc00117 	ldw	ra,4(sp)
  80297c:	dc000017 	ldw	r16,0(sp)
  802980:	dec00204 	addi	sp,sp,8
  802984:	f800283a 	ret

00802988 <__sprint_r>:
  802988:	30800217 	ldw	r2,8(r6)
  80298c:	defffe04 	addi	sp,sp,-8
  802990:	dc000015 	stw	r16,0(sp)
  802994:	dfc00115 	stw	ra,4(sp)
  802998:	3021883a 	mov	r16,r6
  80299c:	0007883a 	mov	r3,zero
  8029a0:	1000061e 	bne	r2,zero,8029bc <__sprint_r+0x34>
  8029a4:	1805883a 	mov	r2,r3
  8029a8:	30000115 	stw	zero,4(r6)
  8029ac:	dfc00117 	ldw	ra,4(sp)
  8029b0:	dc000017 	ldw	r16,0(sp)
  8029b4:	dec00204 	addi	sp,sp,8
  8029b8:	f800283a 	ret
  8029bc:	08063400 	call	806340 <__sfvwrite_r>
  8029c0:	1007883a 	mov	r3,r2
  8029c4:	1805883a 	mov	r2,r3
  8029c8:	80000115 	stw	zero,4(r16)
  8029cc:	80000215 	stw	zero,8(r16)
  8029d0:	dfc00117 	ldw	ra,4(sp)
  8029d4:	dc000017 	ldw	r16,0(sp)
  8029d8:	dec00204 	addi	sp,sp,8
  8029dc:	f800283a 	ret

008029e0 <___vfprintf_internal_r>:
  8029e0:	defea304 	addi	sp,sp,-1396
  8029e4:	dd815915 	stw	r22,1380(sp)
  8029e8:	dc015315 	stw	r16,1356(sp)
  8029ec:	d9c15215 	stw	r7,1352(sp)
  8029f0:	dfc15c15 	stw	ra,1392(sp)
  8029f4:	df015b15 	stw	fp,1388(sp)
  8029f8:	ddc15a15 	stw	r23,1384(sp)
  8029fc:	dd415815 	stw	r21,1376(sp)
  802a00:	dd015715 	stw	r20,1372(sp)
  802a04:	dcc15615 	stw	r19,1368(sp)
  802a08:	dc815515 	stw	r18,1364(sp)
  802a0c:	dc415415 	stw	r17,1360(sp)
  802a10:	282d883a 	mov	r22,r5
  802a14:	3021883a 	mov	r16,r6
  802a18:	d9015015 	stw	r4,1344(sp)
  802a1c:	08068540 	call	806854 <_localeconv_r>
  802a20:	10800017 	ldw	r2,0(r2)
  802a24:	d9c15217 	ldw	r7,1352(sp)
  802a28:	d8814a15 	stw	r2,1320(sp)
  802a2c:	d8815017 	ldw	r2,1344(sp)
  802a30:	10000226 	beq	r2,zero,802a3c <___vfprintf_internal_r+0x5c>
  802a34:	10800e17 	ldw	r2,56(r2)
  802a38:	10020d26 	beq	r2,zero,803270 <___vfprintf_internal_r+0x890>
  802a3c:	b080030b 	ldhu	r2,12(r22)
  802a40:	1080020c 	andi	r2,r2,8
  802a44:	10020e26 	beq	r2,zero,803280 <___vfprintf_internal_r+0x8a0>
  802a48:	b0800417 	ldw	r2,16(r22)
  802a4c:	10020c26 	beq	r2,zero,803280 <___vfprintf_internal_r+0x8a0>
  802a50:	b200030b 	ldhu	r8,12(r22)
  802a54:	00800284 	movi	r2,10
  802a58:	40c0068c 	andi	r3,r8,26
  802a5c:	18802f1e 	bne	r3,r2,802b1c <___vfprintf_internal_r+0x13c>
  802a60:	b080038f 	ldh	r2,14(r22)
  802a64:	10002d16 	blt	r2,zero,802b1c <___vfprintf_internal_r+0x13c>
  802a68:	b240038b 	ldhu	r9,14(r22)
  802a6c:	b2800717 	ldw	r10,28(r22)
  802a70:	b2c00917 	ldw	r11,36(r22)
  802a74:	d9015017 	ldw	r4,1344(sp)
  802a78:	dc402a04 	addi	r17,sp,168
  802a7c:	d8804104 	addi	r2,sp,260
  802a80:	00c10004 	movi	r3,1024
  802a84:	423fff4c 	andi	r8,r8,65533
  802a88:	800d883a 	mov	r6,r16
  802a8c:	880b883a 	mov	r5,r17
  802a90:	da002d0d 	sth	r8,180(sp)
  802a94:	da402d8d 	sth	r9,182(sp)
  802a98:	da803115 	stw	r10,196(sp)
  802a9c:	dac03315 	stw	r11,204(sp)
  802aa0:	d8802e15 	stw	r2,184(sp)
  802aa4:	d8c02f15 	stw	r3,188(sp)
  802aa8:	d8802a15 	stw	r2,168(sp)
  802aac:	d8c02c15 	stw	r3,176(sp)
  802ab0:	d8003015 	stw	zero,192(sp)
  802ab4:	08029e00 	call	8029e0 <___vfprintf_internal_r>
  802ab8:	d8814c15 	stw	r2,1328(sp)
  802abc:	10000416 	blt	r2,zero,802ad0 <___vfprintf_internal_r+0xf0>
  802ac0:	d9015017 	ldw	r4,1344(sp)
  802ac4:	880b883a 	mov	r5,r17
  802ac8:	0800a9c0 	call	800a9c <_fflush_r>
  802acc:	1002321e 	bne	r2,zero,803398 <___vfprintf_internal_r+0x9b8>
  802ad0:	d8802d0b 	ldhu	r2,180(sp)
  802ad4:	1080100c 	andi	r2,r2,64
  802ad8:	10000326 	beq	r2,zero,802ae8 <___vfprintf_internal_r+0x108>
  802adc:	b080030b 	ldhu	r2,12(r22)
  802ae0:	10801014 	ori	r2,r2,64
  802ae4:	b080030d 	sth	r2,12(r22)
  802ae8:	d8814c17 	ldw	r2,1328(sp)
  802aec:	dfc15c17 	ldw	ra,1392(sp)
  802af0:	df015b17 	ldw	fp,1388(sp)
  802af4:	ddc15a17 	ldw	r23,1384(sp)
  802af8:	dd815917 	ldw	r22,1380(sp)
  802afc:	dd415817 	ldw	r21,1376(sp)
  802b00:	dd015717 	ldw	r20,1372(sp)
  802b04:	dcc15617 	ldw	r19,1368(sp)
  802b08:	dc815517 	ldw	r18,1364(sp)
  802b0c:	dc415417 	ldw	r17,1360(sp)
  802b10:	dc015317 	ldw	r16,1356(sp)
  802b14:	dec15d04 	addi	sp,sp,1396
  802b18:	f800283a 	ret
  802b1c:	0005883a 	mov	r2,zero
  802b20:	0007883a 	mov	r3,zero
  802b24:	dd401a04 	addi	r21,sp,104
  802b28:	d8814315 	stw	r2,1292(sp)
  802b2c:	802f883a 	mov	r23,r16
  802b30:	d8c14415 	stw	r3,1296(sp)
  802b34:	d8014c15 	stw	zero,1328(sp)
  802b38:	d8014915 	stw	zero,1316(sp)
  802b3c:	d8014515 	stw	zero,1300(sp)
  802b40:	d8014815 	stw	zero,1312(sp)
  802b44:	dd400d15 	stw	r21,52(sp)
  802b48:	d8000f15 	stw	zero,60(sp)
  802b4c:	d8000e15 	stw	zero,56(sp)
  802b50:	b8800007 	ldb	r2,0(r23)
  802b54:	10001926 	beq	r2,zero,802bbc <___vfprintf_internal_r+0x1dc>
  802b58:	00c00944 	movi	r3,37
  802b5c:	10c01726 	beq	r2,r3,802bbc <___vfprintf_internal_r+0x1dc>
  802b60:	b821883a 	mov	r16,r23
  802b64:	00000106 	br	802b6c <___vfprintf_internal_r+0x18c>
  802b68:	10c00326 	beq	r2,r3,802b78 <___vfprintf_internal_r+0x198>
  802b6c:	84000044 	addi	r16,r16,1
  802b70:	80800007 	ldb	r2,0(r16)
  802b74:	103ffc1e 	bne	r2,zero,802b68 <___vfprintf_internal_r+0x188>
  802b78:	85e7c83a 	sub	r19,r16,r23
  802b7c:	98000e26 	beq	r19,zero,802bb8 <___vfprintf_internal_r+0x1d8>
  802b80:	dc800f17 	ldw	r18,60(sp)
  802b84:	dc400e17 	ldw	r17,56(sp)
  802b88:	008001c4 	movi	r2,7
  802b8c:	94e5883a 	add	r18,r18,r19
  802b90:	8c400044 	addi	r17,r17,1
  802b94:	adc00015 	stw	r23,0(r21)
  802b98:	dc800f15 	stw	r18,60(sp)
  802b9c:	acc00115 	stw	r19,4(r21)
  802ba0:	dc400e15 	stw	r17,56(sp)
  802ba4:	14428b16 	blt	r2,r17,8035d4 <___vfprintf_internal_r+0xbf4>
  802ba8:	ad400204 	addi	r21,r21,8
  802bac:	d9014c17 	ldw	r4,1328(sp)
  802bb0:	24c9883a 	add	r4,r4,r19
  802bb4:	d9014c15 	stw	r4,1328(sp)
  802bb8:	802f883a 	mov	r23,r16
  802bbc:	b8800007 	ldb	r2,0(r23)
  802bc0:	10013c26 	beq	r2,zero,8030b4 <___vfprintf_internal_r+0x6d4>
  802bc4:	bdc00044 	addi	r23,r23,1
  802bc8:	d8000405 	stb	zero,16(sp)
  802bcc:	b8c00007 	ldb	r3,0(r23)
  802bd0:	04ffffc4 	movi	r19,-1
  802bd4:	d8014d15 	stw	zero,1332(sp)
  802bd8:	d8014b15 	stw	zero,1324(sp)
  802bdc:	d8c14e15 	stw	r3,1336(sp)
  802be0:	bdc00044 	addi	r23,r23,1
  802be4:	d9414e17 	ldw	r5,1336(sp)
  802be8:	00801604 	movi	r2,88
  802bec:	28fff804 	addi	r3,r5,-32
  802bf0:	10c06036 	bltu	r2,r3,802d74 <___vfprintf_internal_r+0x394>
  802bf4:	18c5883a 	add	r2,r3,r3
  802bf8:	1085883a 	add	r2,r2,r2
  802bfc:	00c02034 	movhi	r3,128
  802c00:	18cb0404 	addi	r3,r3,11280
  802c04:	10c5883a 	add	r2,r2,r3
  802c08:	11000017 	ldw	r4,0(r2)
  802c0c:	2000683a 	jmp	r4
  802c10:	00803b84 	movi	r2,238
  802c14:	00802d74 	movhi	r2,181
  802c18:	00802d74 	movhi	r2,181
  802c1c:	00803b70 	cmpltui	r2,zero,237
  802c20:	00802d74 	movhi	r2,181
  802c24:	00802d74 	movhi	r2,181
  802c28:	00802d74 	movhi	r2,181
  802c2c:	00802d74 	movhi	r2,181
  802c30:	00802d74 	movhi	r2,181
  802c34:	00802d74 	movhi	r2,181
  802c38:	00803950 	cmplti	r2,zero,229
  802c3c:	00803b60 	cmpeqi	r2,zero,237
  802c40:	00802d74 	movhi	r2,181
  802c44:	00803968 	cmpgeui	r2,zero,229
  802c48:	00803bfc 	xorhi	r2,zero,239
  802c4c:	00802d74 	movhi	r2,181
  802c50:	00803be8 	cmpgeui	r2,zero,239
  802c54:	00803bb0 	cmpltui	r2,zero,238
  802c58:	00803bb0 	cmpltui	r2,zero,238
  802c5c:	00803bb0 	cmpltui	r2,zero,238
  802c60:	00803bb0 	cmpltui	r2,zero,238
  802c64:	00803bb0 	cmpltui	r2,zero,238
  802c68:	00803bb0 	cmpltui	r2,zero,238
  802c6c:	00803bb0 	cmpltui	r2,zero,238
  802c70:	00803bb0 	cmpltui	r2,zero,238
  802c74:	00803bb0 	cmpltui	r2,zero,238
  802c78:	00802d74 	movhi	r2,181
  802c7c:	00802d74 	movhi	r2,181
  802c80:	00802d74 	movhi	r2,181
  802c84:	00802d74 	movhi	r2,181
  802c88:	00802d74 	movhi	r2,181
  802c8c:	00802d74 	movhi	r2,181
  802c90:	00802d74 	movhi	r2,181
  802c94:	00802d74 	movhi	r2,181
  802c98:	00802d74 	movhi	r2,181
  802c9c:	00802d74 	movhi	r2,181
  802ca0:	008033cc 	andi	r2,zero,207
  802ca4:	00803a38 	rdprs	r2,zero,232
  802ca8:	00802d74 	movhi	r2,181
  802cac:	00803a38 	rdprs	r2,zero,232
  802cb0:	00802d74 	movhi	r2,181
  802cb4:	00802d74 	movhi	r2,181
  802cb8:	00802d74 	movhi	r2,181
  802cbc:	00802d74 	movhi	r2,181
  802cc0:	00803b9c 	xori	r2,zero,238
  802cc4:	00802d74 	movhi	r2,181
  802cc8:	00802d74 	movhi	r2,181
  802ccc:	00803480 	call	80348 <__reset-0x77fcb8>
  802cd0:	00802d74 	movhi	r2,181
  802cd4:	00802d74 	movhi	r2,181
  802cd8:	00802d74 	movhi	r2,181
  802cdc:	00802d74 	movhi	r2,181
  802ce0:	00802d74 	movhi	r2,181
  802ce4:	008034cc 	andi	r2,zero,211
  802ce8:	00802d74 	movhi	r2,181
  802cec:	00802d74 	movhi	r2,181
  802cf0:	00803aec 	andhi	r2,zero,235
  802cf4:	00802d74 	movhi	r2,181
  802cf8:	00802d74 	movhi	r2,181
  802cfc:	00802d74 	movhi	r2,181
  802d00:	00802d74 	movhi	r2,181
  802d04:	00802d74 	movhi	r2,181
  802d08:	00802d74 	movhi	r2,181
  802d0c:	00802d74 	movhi	r2,181
  802d10:	00802d74 	movhi	r2,181
  802d14:	00802d74 	movhi	r2,181
  802d18:	00802d74 	movhi	r2,181
  802d1c:	00803ac0 	call	803ac <__reset-0x77fc54>
  802d20:	008033d8 	cmpnei	r2,zero,207
  802d24:	00803a38 	rdprs	r2,zero,232
  802d28:	00803a38 	rdprs	r2,zero,232
  802d2c:	00803a38 	rdprs	r2,zero,232
  802d30:	00803a24 	muli	r2,zero,232
  802d34:	008033d8 	cmpnei	r2,zero,207
  802d38:	00802d74 	movhi	r2,181
  802d3c:	00802d74 	movhi	r2,181
  802d40:	008039ac 	andhi	r2,zero,230
  802d44:	00802d74 	movhi	r2,181
  802d48:	0080397c 	xorhi	r2,zero,229
  802d4c:	0080348c 	andi	r2,zero,210
  802d50:	008039dc 	xori	r2,zero,231
  802d54:	008039c8 	cmpgei	r2,zero,231
  802d58:	00802d74 	movhi	r2,181
  802d5c:	00803c58 	cmpnei	r2,zero,241
  802d60:	00802d74 	movhi	r2,181
  802d64:	008034d8 	cmpnei	r2,zero,211
  802d68:	00802d74 	movhi	r2,181
  802d6c:	00802d74 	movhi	r2,181
  802d70:	00803b50 	cmplti	r2,zero,237
  802d74:	d9014e17 	ldw	r4,1336(sp)
  802d78:	2000ce26 	beq	r4,zero,8030b4 <___vfprintf_internal_r+0x6d4>
  802d7c:	01400044 	movi	r5,1
  802d80:	d9801004 	addi	r6,sp,64
  802d84:	d9c14115 	stw	r7,1284(sp)
  802d88:	d9414615 	stw	r5,1304(sp)
  802d8c:	d9814215 	stw	r6,1288(sp)
  802d90:	280f883a 	mov	r7,r5
  802d94:	d9001005 	stb	r4,64(sp)
  802d98:	d8000405 	stb	zero,16(sp)
  802d9c:	d8014715 	stw	zero,1308(sp)
  802da0:	d8c14d17 	ldw	r3,1332(sp)
  802da4:	1880008c 	andi	r2,r3,2
  802da8:	1005003a 	cmpeq	r2,r2,zero
  802dac:	d8815115 	stw	r2,1348(sp)
  802db0:	1000031e 	bne	r2,zero,802dc0 <___vfprintf_internal_r+0x3e0>
  802db4:	d9014617 	ldw	r4,1304(sp)
  802db8:	21000084 	addi	r4,r4,2
  802dbc:	d9014615 	stw	r4,1304(sp)
  802dc0:	d9414d17 	ldw	r5,1332(sp)
  802dc4:	2940210c 	andi	r5,r5,132
  802dc8:	d9414f15 	stw	r5,1340(sp)
  802dcc:	28002d1e 	bne	r5,zero,802e84 <___vfprintf_internal_r+0x4a4>
  802dd0:	d9814b17 	ldw	r6,1324(sp)
  802dd4:	d8814617 	ldw	r2,1304(sp)
  802dd8:	30a1c83a 	sub	r16,r6,r2
  802ddc:	0400290e 	bge	zero,r16,802e84 <___vfprintf_internal_r+0x4a4>
  802de0:	00800404 	movi	r2,16
  802de4:	1404580e 	bge	r2,r16,803f48 <___vfprintf_internal_r+0x1568>
  802de8:	dc800f17 	ldw	r18,60(sp)
  802dec:	dc400e17 	ldw	r17,56(sp)
  802df0:	1027883a 	mov	r19,r2
  802df4:	07002074 	movhi	fp,129
  802df8:	e73b5c04 	addi	fp,fp,-4752
  802dfc:	050001c4 	movi	r20,7
  802e00:	00000306 	br	802e10 <___vfprintf_internal_r+0x430>
  802e04:	843ffc04 	addi	r16,r16,-16
  802e08:	ad400204 	addi	r21,r21,8
  802e0c:	9c00130e 	bge	r19,r16,802e5c <___vfprintf_internal_r+0x47c>
  802e10:	94800404 	addi	r18,r18,16
  802e14:	8c400044 	addi	r17,r17,1
  802e18:	af000015 	stw	fp,0(r21)
  802e1c:	acc00115 	stw	r19,4(r21)
  802e20:	dc800f15 	stw	r18,60(sp)
  802e24:	dc400e15 	stw	r17,56(sp)
  802e28:	a47ff60e 	bge	r20,r17,802e04 <___vfprintf_internal_r+0x424>
  802e2c:	d9015017 	ldw	r4,1344(sp)
  802e30:	b00b883a 	mov	r5,r22
  802e34:	d9800d04 	addi	r6,sp,52
  802e38:	d9c15215 	stw	r7,1352(sp)
  802e3c:	08029880 	call	802988 <__sprint_r>
  802e40:	d9c15217 	ldw	r7,1352(sp)
  802e44:	10009e1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  802e48:	843ffc04 	addi	r16,r16,-16
  802e4c:	dc800f17 	ldw	r18,60(sp)
  802e50:	dc400e17 	ldw	r17,56(sp)
  802e54:	dd401a04 	addi	r21,sp,104
  802e58:	9c3fed16 	blt	r19,r16,802e10 <___vfprintf_internal_r+0x430>
  802e5c:	9425883a 	add	r18,r18,r16
  802e60:	8c400044 	addi	r17,r17,1
  802e64:	008001c4 	movi	r2,7
  802e68:	af000015 	stw	fp,0(r21)
  802e6c:	ac000115 	stw	r16,4(r21)
  802e70:	dc800f15 	stw	r18,60(sp)
  802e74:	dc400e15 	stw	r17,56(sp)
  802e78:	1441f516 	blt	r2,r17,803650 <___vfprintf_internal_r+0xc70>
  802e7c:	ad400204 	addi	r21,r21,8
  802e80:	00000206 	br	802e8c <___vfprintf_internal_r+0x4ac>
  802e84:	dc800f17 	ldw	r18,60(sp)
  802e88:	dc400e17 	ldw	r17,56(sp)
  802e8c:	d8800407 	ldb	r2,16(sp)
  802e90:	10000b26 	beq	r2,zero,802ec0 <___vfprintf_internal_r+0x4e0>
  802e94:	00800044 	movi	r2,1
  802e98:	94800044 	addi	r18,r18,1
  802e9c:	8c400044 	addi	r17,r17,1
  802ea0:	a8800115 	stw	r2,4(r21)
  802ea4:	d8c00404 	addi	r3,sp,16
  802ea8:	008001c4 	movi	r2,7
  802eac:	a8c00015 	stw	r3,0(r21)
  802eb0:	dc800f15 	stw	r18,60(sp)
  802eb4:	dc400e15 	stw	r17,56(sp)
  802eb8:	1441da16 	blt	r2,r17,803624 <___vfprintf_internal_r+0xc44>
  802ebc:	ad400204 	addi	r21,r21,8
  802ec0:	d9015117 	ldw	r4,1348(sp)
  802ec4:	20000b1e 	bne	r4,zero,802ef4 <___vfprintf_internal_r+0x514>
  802ec8:	d8800504 	addi	r2,sp,20
  802ecc:	94800084 	addi	r18,r18,2
  802ed0:	8c400044 	addi	r17,r17,1
  802ed4:	a8800015 	stw	r2,0(r21)
  802ed8:	00c00084 	movi	r3,2
  802edc:	008001c4 	movi	r2,7
  802ee0:	a8c00115 	stw	r3,4(r21)
  802ee4:	dc800f15 	stw	r18,60(sp)
  802ee8:	dc400e15 	stw	r17,56(sp)
  802eec:	1441c216 	blt	r2,r17,8035f8 <___vfprintf_internal_r+0xc18>
  802ef0:	ad400204 	addi	r21,r21,8
  802ef4:	d9414f17 	ldw	r5,1340(sp)
  802ef8:	00802004 	movi	r2,128
  802efc:	2880b126 	beq	r5,r2,8031c4 <___vfprintf_internal_r+0x7e4>
  802f00:	d8c14717 	ldw	r3,1308(sp)
  802f04:	19e1c83a 	sub	r16,r3,r7
  802f08:	0400260e 	bge	zero,r16,802fa4 <___vfprintf_internal_r+0x5c4>
  802f0c:	00800404 	movi	r2,16
  802f10:	1403c90e 	bge	r2,r16,803e38 <___vfprintf_internal_r+0x1458>
  802f14:	1027883a 	mov	r19,r2
  802f18:	07002074 	movhi	fp,129
  802f1c:	e73b5804 	addi	fp,fp,-4768
  802f20:	050001c4 	movi	r20,7
  802f24:	00000306 	br	802f34 <___vfprintf_internal_r+0x554>
  802f28:	843ffc04 	addi	r16,r16,-16
  802f2c:	ad400204 	addi	r21,r21,8
  802f30:	9c00130e 	bge	r19,r16,802f80 <___vfprintf_internal_r+0x5a0>
  802f34:	94800404 	addi	r18,r18,16
  802f38:	8c400044 	addi	r17,r17,1
  802f3c:	af000015 	stw	fp,0(r21)
  802f40:	acc00115 	stw	r19,4(r21)
  802f44:	dc800f15 	stw	r18,60(sp)
  802f48:	dc400e15 	stw	r17,56(sp)
  802f4c:	a47ff60e 	bge	r20,r17,802f28 <___vfprintf_internal_r+0x548>
  802f50:	d9015017 	ldw	r4,1344(sp)
  802f54:	b00b883a 	mov	r5,r22
  802f58:	d9800d04 	addi	r6,sp,52
  802f5c:	d9c15215 	stw	r7,1352(sp)
  802f60:	08029880 	call	802988 <__sprint_r>
  802f64:	d9c15217 	ldw	r7,1352(sp)
  802f68:	1000551e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  802f6c:	843ffc04 	addi	r16,r16,-16
  802f70:	dc800f17 	ldw	r18,60(sp)
  802f74:	dc400e17 	ldw	r17,56(sp)
  802f78:	dd401a04 	addi	r21,sp,104
  802f7c:	9c3fed16 	blt	r19,r16,802f34 <___vfprintf_internal_r+0x554>
  802f80:	9425883a 	add	r18,r18,r16
  802f84:	8c400044 	addi	r17,r17,1
  802f88:	008001c4 	movi	r2,7
  802f8c:	af000015 	stw	fp,0(r21)
  802f90:	ac000115 	stw	r16,4(r21)
  802f94:	dc800f15 	stw	r18,60(sp)
  802f98:	dc400e15 	stw	r17,56(sp)
  802f9c:	14418216 	blt	r2,r17,8035a8 <___vfprintf_internal_r+0xbc8>
  802fa0:	ad400204 	addi	r21,r21,8
  802fa4:	d9014d17 	ldw	r4,1332(sp)
  802fa8:	2080400c 	andi	r2,r4,256
  802fac:	10004a1e 	bne	r2,zero,8030d8 <___vfprintf_internal_r+0x6f8>
  802fb0:	d9414217 	ldw	r5,1288(sp)
  802fb4:	91e5883a 	add	r18,r18,r7
  802fb8:	8c400044 	addi	r17,r17,1
  802fbc:	008001c4 	movi	r2,7
  802fc0:	a9400015 	stw	r5,0(r21)
  802fc4:	a9c00115 	stw	r7,4(r21)
  802fc8:	dc800f15 	stw	r18,60(sp)
  802fcc:	dc400e15 	stw	r17,56(sp)
  802fd0:	14416716 	blt	r2,r17,803570 <___vfprintf_internal_r+0xb90>
  802fd4:	a8c00204 	addi	r3,r21,8
  802fd8:	d9814d17 	ldw	r6,1332(sp)
  802fdc:	3080010c 	andi	r2,r6,4
  802fe0:	10002826 	beq	r2,zero,803084 <___vfprintf_internal_r+0x6a4>
  802fe4:	d8814b17 	ldw	r2,1324(sp)
  802fe8:	d9014617 	ldw	r4,1304(sp)
  802fec:	1121c83a 	sub	r16,r2,r4
  802ff0:	0400240e 	bge	zero,r16,803084 <___vfprintf_internal_r+0x6a4>
  802ff4:	00800404 	movi	r2,16
  802ff8:	14044f0e 	bge	r2,r16,804138 <___vfprintf_internal_r+0x1758>
  802ffc:	dc400e17 	ldw	r17,56(sp)
  803000:	1027883a 	mov	r19,r2
  803004:	07002074 	movhi	fp,129
  803008:	e73b5c04 	addi	fp,fp,-4752
  80300c:	050001c4 	movi	r20,7
  803010:	00000306 	br	803020 <___vfprintf_internal_r+0x640>
  803014:	843ffc04 	addi	r16,r16,-16
  803018:	18c00204 	addi	r3,r3,8
  80301c:	9c00110e 	bge	r19,r16,803064 <___vfprintf_internal_r+0x684>
  803020:	94800404 	addi	r18,r18,16
  803024:	8c400044 	addi	r17,r17,1
  803028:	1f000015 	stw	fp,0(r3)
  80302c:	1cc00115 	stw	r19,4(r3)
  803030:	dc800f15 	stw	r18,60(sp)
  803034:	dc400e15 	stw	r17,56(sp)
  803038:	a47ff60e 	bge	r20,r17,803014 <___vfprintf_internal_r+0x634>
  80303c:	d9015017 	ldw	r4,1344(sp)
  803040:	b00b883a 	mov	r5,r22
  803044:	d9800d04 	addi	r6,sp,52
  803048:	08029880 	call	802988 <__sprint_r>
  80304c:	10001c1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803050:	843ffc04 	addi	r16,r16,-16
  803054:	dc800f17 	ldw	r18,60(sp)
  803058:	dc400e17 	ldw	r17,56(sp)
  80305c:	d8c01a04 	addi	r3,sp,104
  803060:	9c3fef16 	blt	r19,r16,803020 <___vfprintf_internal_r+0x640>
  803064:	9425883a 	add	r18,r18,r16
  803068:	8c400044 	addi	r17,r17,1
  80306c:	008001c4 	movi	r2,7
  803070:	1f000015 	stw	fp,0(r3)
  803074:	1c000115 	stw	r16,4(r3)
  803078:	dc800f15 	stw	r18,60(sp)
  80307c:	dc400e15 	stw	r17,56(sp)
  803080:	1440cb16 	blt	r2,r17,8033b0 <___vfprintf_internal_r+0x9d0>
  803084:	d8814b17 	ldw	r2,1324(sp)
  803088:	d9414617 	ldw	r5,1304(sp)
  80308c:	1140010e 	bge	r2,r5,803094 <___vfprintf_internal_r+0x6b4>
  803090:	2805883a 	mov	r2,r5
  803094:	d9814c17 	ldw	r6,1328(sp)
  803098:	308d883a 	add	r6,r6,r2
  80309c:	d9814c15 	stw	r6,1328(sp)
  8030a0:	90013b1e 	bne	r18,zero,803590 <___vfprintf_internal_r+0xbb0>
  8030a4:	d9c14117 	ldw	r7,1284(sp)
  8030a8:	dd401a04 	addi	r21,sp,104
  8030ac:	d8000e15 	stw	zero,56(sp)
  8030b0:	003ea706 	br	802b50 <___vfprintf_internal_r+0x170>
  8030b4:	d8800f17 	ldw	r2,60(sp)
  8030b8:	10053f1e 	bne	r2,zero,8045b8 <___vfprintf_internal_r+0x1bd8>
  8030bc:	d8000e15 	stw	zero,56(sp)
  8030c0:	b080030b 	ldhu	r2,12(r22)
  8030c4:	1080100c 	andi	r2,r2,64
  8030c8:	103e8726 	beq	r2,zero,802ae8 <___vfprintf_internal_r+0x108>
  8030cc:	00bfffc4 	movi	r2,-1
  8030d0:	d8814c15 	stw	r2,1328(sp)
  8030d4:	003e8406 	br	802ae8 <___vfprintf_internal_r+0x108>
  8030d8:	d9814e17 	ldw	r6,1336(sp)
  8030dc:	00801944 	movi	r2,101
  8030e0:	11806e16 	blt	r2,r6,80329c <___vfprintf_internal_r+0x8bc>
  8030e4:	d9414817 	ldw	r5,1312(sp)
  8030e8:	00c00044 	movi	r3,1
  8030ec:	1943430e 	bge	r3,r5,803dfc <___vfprintf_internal_r+0x141c>
  8030f0:	d8814217 	ldw	r2,1288(sp)
  8030f4:	94800044 	addi	r18,r18,1
  8030f8:	8c400044 	addi	r17,r17,1
  8030fc:	a8800015 	stw	r2,0(r21)
  803100:	008001c4 	movi	r2,7
  803104:	a8c00115 	stw	r3,4(r21)
  803108:	dc800f15 	stw	r18,60(sp)
  80310c:	dc400e15 	stw	r17,56(sp)
  803110:	1441ca16 	blt	r2,r17,80383c <___vfprintf_internal_r+0xe5c>
  803114:	a8c00204 	addi	r3,r21,8
  803118:	d9014a17 	ldw	r4,1320(sp)
  80311c:	00800044 	movi	r2,1
  803120:	94800044 	addi	r18,r18,1
  803124:	8c400044 	addi	r17,r17,1
  803128:	18800115 	stw	r2,4(r3)
  80312c:	008001c4 	movi	r2,7
  803130:	19000015 	stw	r4,0(r3)
  803134:	dc800f15 	stw	r18,60(sp)
  803138:	dc400e15 	stw	r17,56(sp)
  80313c:	1441b616 	blt	r2,r17,803818 <___vfprintf_internal_r+0xe38>
  803140:	1cc00204 	addi	r19,r3,8
  803144:	d9014317 	ldw	r4,1292(sp)
  803148:	d9414417 	ldw	r5,1296(sp)
  80314c:	000d883a 	mov	r6,zero
  803150:	000f883a 	mov	r7,zero
  803154:	0809bd40 	call	809bd4 <__nedf2>
  803158:	10017426 	beq	r2,zero,80372c <___vfprintf_internal_r+0xd4c>
  80315c:	d9414817 	ldw	r5,1312(sp)
  803160:	d9814217 	ldw	r6,1288(sp)
  803164:	8c400044 	addi	r17,r17,1
  803168:	2c85883a 	add	r2,r5,r18
  80316c:	14bfffc4 	addi	r18,r2,-1
  803170:	28bfffc4 	addi	r2,r5,-1
  803174:	30c00044 	addi	r3,r6,1
  803178:	98800115 	stw	r2,4(r19)
  80317c:	008001c4 	movi	r2,7
  803180:	98c00015 	stw	r3,0(r19)
  803184:	dc800f15 	stw	r18,60(sp)
  803188:	dc400e15 	stw	r17,56(sp)
  80318c:	14418e16 	blt	r2,r17,8037c8 <___vfprintf_internal_r+0xde8>
  803190:	9cc00204 	addi	r19,r19,8
  803194:	d9414917 	ldw	r5,1316(sp)
  803198:	d8800904 	addi	r2,sp,36
  80319c:	8c400044 	addi	r17,r17,1
  8031a0:	9165883a 	add	r18,r18,r5
  8031a4:	98800015 	stw	r2,0(r19)
  8031a8:	008001c4 	movi	r2,7
  8031ac:	99400115 	stw	r5,4(r19)
  8031b0:	dc800f15 	stw	r18,60(sp)
  8031b4:	dc400e15 	stw	r17,56(sp)
  8031b8:	1440ed16 	blt	r2,r17,803570 <___vfprintf_internal_r+0xb90>
  8031bc:	98c00204 	addi	r3,r19,8
  8031c0:	003f8506 	br	802fd8 <___vfprintf_internal_r+0x5f8>
  8031c4:	d9814b17 	ldw	r6,1324(sp)
  8031c8:	d8814617 	ldw	r2,1304(sp)
  8031cc:	30a1c83a 	sub	r16,r6,r2
  8031d0:	043f4b0e 	bge	zero,r16,802f00 <___vfprintf_internal_r+0x520>
  8031d4:	00800404 	movi	r2,16
  8031d8:	1404340e 	bge	r2,r16,8042ac <___vfprintf_internal_r+0x18cc>
  8031dc:	1027883a 	mov	r19,r2
  8031e0:	07002074 	movhi	fp,129
  8031e4:	e73b5804 	addi	fp,fp,-4768
  8031e8:	050001c4 	movi	r20,7
  8031ec:	00000306 	br	8031fc <___vfprintf_internal_r+0x81c>
  8031f0:	843ffc04 	addi	r16,r16,-16
  8031f4:	ad400204 	addi	r21,r21,8
  8031f8:	9c00130e 	bge	r19,r16,803248 <___vfprintf_internal_r+0x868>
  8031fc:	94800404 	addi	r18,r18,16
  803200:	8c400044 	addi	r17,r17,1
  803204:	af000015 	stw	fp,0(r21)
  803208:	acc00115 	stw	r19,4(r21)
  80320c:	dc800f15 	stw	r18,60(sp)
  803210:	dc400e15 	stw	r17,56(sp)
  803214:	a47ff60e 	bge	r20,r17,8031f0 <___vfprintf_internal_r+0x810>
  803218:	d9015017 	ldw	r4,1344(sp)
  80321c:	b00b883a 	mov	r5,r22
  803220:	d9800d04 	addi	r6,sp,52
  803224:	d9c15215 	stw	r7,1352(sp)
  803228:	08029880 	call	802988 <__sprint_r>
  80322c:	d9c15217 	ldw	r7,1352(sp)
  803230:	103fa31e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803234:	843ffc04 	addi	r16,r16,-16
  803238:	dc800f17 	ldw	r18,60(sp)
  80323c:	dc400e17 	ldw	r17,56(sp)
  803240:	dd401a04 	addi	r21,sp,104
  803244:	9c3fed16 	blt	r19,r16,8031fc <___vfprintf_internal_r+0x81c>
  803248:	9425883a 	add	r18,r18,r16
  80324c:	8c400044 	addi	r17,r17,1
  803250:	008001c4 	movi	r2,7
  803254:	af000015 	stw	fp,0(r21)
  803258:	ac000115 	stw	r16,4(r21)
  80325c:	dc800f15 	stw	r18,60(sp)
  803260:	dc400e15 	stw	r17,56(sp)
  803264:	14416116 	blt	r2,r17,8037ec <___vfprintf_internal_r+0xe0c>
  803268:	ad400204 	addi	r21,r21,8
  80326c:	003f2406 	br	802f00 <___vfprintf_internal_r+0x520>
  803270:	d9015017 	ldw	r4,1344(sp)
  803274:	0800d340 	call	800d34 <__sinit>
  803278:	d9c15217 	ldw	r7,1352(sp)
  80327c:	003def06 	br	802a3c <___vfprintf_internal_r+0x5c>
  803280:	d9015017 	ldw	r4,1344(sp)
  803284:	b00b883a 	mov	r5,r22
  803288:	d9c15215 	stw	r7,1352(sp)
  80328c:	08049280 	call	804928 <__swsetup_r>
  803290:	d9c15217 	ldw	r7,1352(sp)
  803294:	103dee26 	beq	r2,zero,802a50 <___vfprintf_internal_r+0x70>
  803298:	003f8c06 	br	8030cc <___vfprintf_internal_r+0x6ec>
  80329c:	d9014317 	ldw	r4,1292(sp)
  8032a0:	d9414417 	ldw	r5,1296(sp)
  8032a4:	000d883a 	mov	r6,zero
  8032a8:	000f883a 	mov	r7,zero
  8032ac:	0809b4c0 	call	809b4c <__eqdf2>
  8032b0:	1000f21e 	bne	r2,zero,80367c <___vfprintf_internal_r+0xc9c>
  8032b4:	00802074 	movhi	r2,129
  8032b8:	10bb5704 	addi	r2,r2,-4772
  8032bc:	94800044 	addi	r18,r18,1
  8032c0:	8c400044 	addi	r17,r17,1
  8032c4:	a8800015 	stw	r2,0(r21)
  8032c8:	00c00044 	movi	r3,1
  8032cc:	008001c4 	movi	r2,7
  8032d0:	a8c00115 	stw	r3,4(r21)
  8032d4:	dc800f15 	stw	r18,60(sp)
  8032d8:	dc400e15 	stw	r17,56(sp)
  8032dc:	1442fa16 	blt	r2,r17,803ec8 <___vfprintf_internal_r+0x14e8>
  8032e0:	a8c00204 	addi	r3,r21,8
  8032e4:	d8800617 	ldw	r2,24(sp)
  8032e8:	d9014817 	ldw	r4,1312(sp)
  8032ec:	11015c0e 	bge	r2,r4,803860 <___vfprintf_internal_r+0xe80>
  8032f0:	dc400e17 	ldw	r17,56(sp)
  8032f4:	d9814a17 	ldw	r6,1320(sp)
  8032f8:	00800044 	movi	r2,1
  8032fc:	94800044 	addi	r18,r18,1
  803300:	8c400044 	addi	r17,r17,1
  803304:	18800115 	stw	r2,4(r3)
  803308:	008001c4 	movi	r2,7
  80330c:	19800015 	stw	r6,0(r3)
  803310:	dc800f15 	stw	r18,60(sp)
  803314:	dc400e15 	stw	r17,56(sp)
  803318:	14431016 	blt	r2,r17,803f5c <___vfprintf_internal_r+0x157c>
  80331c:	18c00204 	addi	r3,r3,8
  803320:	d8814817 	ldw	r2,1312(sp)
  803324:	143fffc4 	addi	r16,r2,-1
  803328:	043f2b0e 	bge	zero,r16,802fd8 <___vfprintf_internal_r+0x5f8>
  80332c:	00800404 	movi	r2,16
  803330:	1402a20e 	bge	r2,r16,803dbc <___vfprintf_internal_r+0x13dc>
  803334:	dc400e17 	ldw	r17,56(sp)
  803338:	1027883a 	mov	r19,r2
  80333c:	07002074 	movhi	fp,129
  803340:	e73b5804 	addi	fp,fp,-4768
  803344:	050001c4 	movi	r20,7
  803348:	00000306 	br	803358 <___vfprintf_internal_r+0x978>
  80334c:	18c00204 	addi	r3,r3,8
  803350:	843ffc04 	addi	r16,r16,-16
  803354:	9c029c0e 	bge	r19,r16,803dc8 <___vfprintf_internal_r+0x13e8>
  803358:	94800404 	addi	r18,r18,16
  80335c:	8c400044 	addi	r17,r17,1
  803360:	1f000015 	stw	fp,0(r3)
  803364:	1cc00115 	stw	r19,4(r3)
  803368:	dc800f15 	stw	r18,60(sp)
  80336c:	dc400e15 	stw	r17,56(sp)
  803370:	a47ff60e 	bge	r20,r17,80334c <___vfprintf_internal_r+0x96c>
  803374:	d9015017 	ldw	r4,1344(sp)
  803378:	b00b883a 	mov	r5,r22
  80337c:	d9800d04 	addi	r6,sp,52
  803380:	08029880 	call	802988 <__sprint_r>
  803384:	103f4e1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803388:	dc800f17 	ldw	r18,60(sp)
  80338c:	dc400e17 	ldw	r17,56(sp)
  803390:	d8c01a04 	addi	r3,sp,104
  803394:	003fee06 	br	803350 <___vfprintf_internal_r+0x970>
  803398:	d8802d0b 	ldhu	r2,180(sp)
  80339c:	00ffffc4 	movi	r3,-1
  8033a0:	d8c14c15 	stw	r3,1328(sp)
  8033a4:	1080100c 	andi	r2,r2,64
  8033a8:	103dcc1e 	bne	r2,zero,802adc <___vfprintf_internal_r+0xfc>
  8033ac:	003dce06 	br	802ae8 <___vfprintf_internal_r+0x108>
  8033b0:	d9015017 	ldw	r4,1344(sp)
  8033b4:	b00b883a 	mov	r5,r22
  8033b8:	d9800d04 	addi	r6,sp,52
  8033bc:	08029880 	call	802988 <__sprint_r>
  8033c0:	103f3f1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  8033c4:	dc800f17 	ldw	r18,60(sp)
  8033c8:	003f2e06 	br	803084 <___vfprintf_internal_r+0x6a4>
  8033cc:	d9414d17 	ldw	r5,1332(sp)
  8033d0:	29400414 	ori	r5,r5,16
  8033d4:	d9414d15 	stw	r5,1332(sp)
  8033d8:	d9814d17 	ldw	r6,1332(sp)
  8033dc:	3080080c 	andi	r2,r6,32
  8033e0:	10014f1e 	bne	r2,zero,803920 <___vfprintf_internal_r+0xf40>
  8033e4:	d8c14d17 	ldw	r3,1332(sp)
  8033e8:	1880040c 	andi	r2,r3,16
  8033ec:	1002ea1e 	bne	r2,zero,803f98 <___vfprintf_internal_r+0x15b8>
  8033f0:	d9014d17 	ldw	r4,1332(sp)
  8033f4:	2080100c 	andi	r2,r4,64
  8033f8:	1002e726 	beq	r2,zero,803f98 <___vfprintf_internal_r+0x15b8>
  8033fc:	3880000f 	ldh	r2,0(r7)
  803400:	39c00104 	addi	r7,r7,4
  803404:	d9c14115 	stw	r7,1284(sp)
  803408:	1023d7fa 	srai	r17,r2,31
  80340c:	1021883a 	mov	r16,r2
  803410:	88037216 	blt	r17,zero,8041dc <___vfprintf_internal_r+0x17fc>
  803414:	01000044 	movi	r4,1
  803418:	98000416 	blt	r19,zero,80342c <___vfprintf_internal_r+0xa4c>
  80341c:	d8c14d17 	ldw	r3,1332(sp)
  803420:	00bfdfc4 	movi	r2,-129
  803424:	1886703a 	and	r3,r3,r2
  803428:	d8c14d15 	stw	r3,1332(sp)
  80342c:	8444b03a 	or	r2,r16,r17
  803430:	1002261e 	bne	r2,zero,803ccc <___vfprintf_internal_r+0x12ec>
  803434:	9802251e 	bne	r19,zero,803ccc <___vfprintf_internal_r+0x12ec>
  803438:	20803fcc 	andi	r2,r4,255
  80343c:	10029b26 	beq	r2,zero,803eac <___vfprintf_internal_r+0x14cc>
  803440:	d8c01a04 	addi	r3,sp,104
  803444:	dd001004 	addi	r20,sp,64
  803448:	d8c14215 	stw	r3,1288(sp)
  80344c:	d8c14217 	ldw	r3,1288(sp)
  803450:	dcc14615 	stw	r19,1304(sp)
  803454:	a0c5c83a 	sub	r2,r20,r3
  803458:	11c00a04 	addi	r7,r2,40
  80345c:	99c0010e 	bge	r19,r7,803464 <___vfprintf_internal_r+0xa84>
  803460:	d9c14615 	stw	r7,1304(sp)
  803464:	dcc14715 	stw	r19,1308(sp)
  803468:	d8800407 	ldb	r2,16(sp)
  80346c:	103e4c26 	beq	r2,zero,802da0 <___vfprintf_internal_r+0x3c0>
  803470:	d8814617 	ldw	r2,1304(sp)
  803474:	10800044 	addi	r2,r2,1
  803478:	d8814615 	stw	r2,1304(sp)
  80347c:	003e4806 	br	802da0 <___vfprintf_internal_r+0x3c0>
  803480:	d9814d17 	ldw	r6,1332(sp)
  803484:	31800414 	ori	r6,r6,16
  803488:	d9814d15 	stw	r6,1332(sp)
  80348c:	d8c14d17 	ldw	r3,1332(sp)
  803490:	1880080c 	andi	r2,r3,32
  803494:	1001271e 	bne	r2,zero,803934 <___vfprintf_internal_r+0xf54>
  803498:	d9414d17 	ldw	r5,1332(sp)
  80349c:	2880040c 	andi	r2,r5,16
  8034a0:	1002b61e 	bne	r2,zero,803f7c <___vfprintf_internal_r+0x159c>
  8034a4:	d9814d17 	ldw	r6,1332(sp)
  8034a8:	3080100c 	andi	r2,r6,64
  8034ac:	1002b326 	beq	r2,zero,803f7c <___vfprintf_internal_r+0x159c>
  8034b0:	3c00000b 	ldhu	r16,0(r7)
  8034b4:	0009883a 	mov	r4,zero
  8034b8:	39c00104 	addi	r7,r7,4
  8034bc:	0023883a 	mov	r17,zero
  8034c0:	d9c14115 	stw	r7,1284(sp)
  8034c4:	d8000405 	stb	zero,16(sp)
  8034c8:	003fd306 	br	803418 <___vfprintf_internal_r+0xa38>
  8034cc:	d9014d17 	ldw	r4,1332(sp)
  8034d0:	21000414 	ori	r4,r4,16
  8034d4:	d9014d15 	stw	r4,1332(sp)
  8034d8:	d9414d17 	ldw	r5,1332(sp)
  8034dc:	2880080c 	andi	r2,r5,32
  8034e0:	1001081e 	bne	r2,zero,803904 <___vfprintf_internal_r+0xf24>
  8034e4:	d8c14d17 	ldw	r3,1332(sp)
  8034e8:	1880040c 	andi	r2,r3,16
  8034ec:	1002b01e 	bne	r2,zero,803fb0 <___vfprintf_internal_r+0x15d0>
  8034f0:	d9014d17 	ldw	r4,1332(sp)
  8034f4:	2080100c 	andi	r2,r4,64
  8034f8:	1002ad26 	beq	r2,zero,803fb0 <___vfprintf_internal_r+0x15d0>
  8034fc:	3c00000b 	ldhu	r16,0(r7)
  803500:	01000044 	movi	r4,1
  803504:	39c00104 	addi	r7,r7,4
  803508:	0023883a 	mov	r17,zero
  80350c:	d9c14115 	stw	r7,1284(sp)
  803510:	d8000405 	stb	zero,16(sp)
  803514:	003fc006 	br	803418 <___vfprintf_internal_r+0xa38>
  803518:	d9015017 	ldw	r4,1344(sp)
  80351c:	b00b883a 	mov	r5,r22
  803520:	d9800d04 	addi	r6,sp,52
  803524:	08029880 	call	802988 <__sprint_r>
  803528:	103ee51e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  80352c:	dc800f17 	ldw	r18,60(sp)
  803530:	d8c01a04 	addi	r3,sp,104
  803534:	d9814d17 	ldw	r6,1332(sp)
  803538:	3080004c 	andi	r2,r6,1
  80353c:	1005003a 	cmpeq	r2,r2,zero
  803540:	103ea51e 	bne	r2,zero,802fd8 <___vfprintf_internal_r+0x5f8>
  803544:	00800044 	movi	r2,1
  803548:	dc400e17 	ldw	r17,56(sp)
  80354c:	18800115 	stw	r2,4(r3)
  803550:	d8814a17 	ldw	r2,1320(sp)
  803554:	94800044 	addi	r18,r18,1
  803558:	8c400044 	addi	r17,r17,1
  80355c:	18800015 	stw	r2,0(r3)
  803560:	008001c4 	movi	r2,7
  803564:	dc800f15 	stw	r18,60(sp)
  803568:	dc400e15 	stw	r17,56(sp)
  80356c:	14421e0e 	bge	r2,r17,803de8 <___vfprintf_internal_r+0x1408>
  803570:	d9015017 	ldw	r4,1344(sp)
  803574:	b00b883a 	mov	r5,r22
  803578:	d9800d04 	addi	r6,sp,52
  80357c:	08029880 	call	802988 <__sprint_r>
  803580:	103ecf1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803584:	dc800f17 	ldw	r18,60(sp)
  803588:	d8c01a04 	addi	r3,sp,104
  80358c:	003e9206 	br	802fd8 <___vfprintf_internal_r+0x5f8>
  803590:	d9015017 	ldw	r4,1344(sp)
  803594:	b00b883a 	mov	r5,r22
  803598:	d9800d04 	addi	r6,sp,52
  80359c:	08029880 	call	802988 <__sprint_r>
  8035a0:	103ec026 	beq	r2,zero,8030a4 <___vfprintf_internal_r+0x6c4>
  8035a4:	003ec606 	br	8030c0 <___vfprintf_internal_r+0x6e0>
  8035a8:	d9015017 	ldw	r4,1344(sp)
  8035ac:	b00b883a 	mov	r5,r22
  8035b0:	d9800d04 	addi	r6,sp,52
  8035b4:	d9c15215 	stw	r7,1352(sp)
  8035b8:	08029880 	call	802988 <__sprint_r>
  8035bc:	d9c15217 	ldw	r7,1352(sp)
  8035c0:	103ebf1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  8035c4:	dc800f17 	ldw	r18,60(sp)
  8035c8:	dc400e17 	ldw	r17,56(sp)
  8035cc:	dd401a04 	addi	r21,sp,104
  8035d0:	003e7406 	br	802fa4 <___vfprintf_internal_r+0x5c4>
  8035d4:	d9015017 	ldw	r4,1344(sp)
  8035d8:	b00b883a 	mov	r5,r22
  8035dc:	d9800d04 	addi	r6,sp,52
  8035e0:	d9c15215 	stw	r7,1352(sp)
  8035e4:	08029880 	call	802988 <__sprint_r>
  8035e8:	d9c15217 	ldw	r7,1352(sp)
  8035ec:	103eb41e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  8035f0:	dd401a04 	addi	r21,sp,104
  8035f4:	003d6d06 	br	802bac <___vfprintf_internal_r+0x1cc>
  8035f8:	d9015017 	ldw	r4,1344(sp)
  8035fc:	b00b883a 	mov	r5,r22
  803600:	d9800d04 	addi	r6,sp,52
  803604:	d9c15215 	stw	r7,1352(sp)
  803608:	08029880 	call	802988 <__sprint_r>
  80360c:	d9c15217 	ldw	r7,1352(sp)
  803610:	103eab1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803614:	dc800f17 	ldw	r18,60(sp)
  803618:	dc400e17 	ldw	r17,56(sp)
  80361c:	dd401a04 	addi	r21,sp,104
  803620:	003e3406 	br	802ef4 <___vfprintf_internal_r+0x514>
  803624:	d9015017 	ldw	r4,1344(sp)
  803628:	b00b883a 	mov	r5,r22
  80362c:	d9800d04 	addi	r6,sp,52
  803630:	d9c15215 	stw	r7,1352(sp)
  803634:	08029880 	call	802988 <__sprint_r>
  803638:	d9c15217 	ldw	r7,1352(sp)
  80363c:	103ea01e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803640:	dc800f17 	ldw	r18,60(sp)
  803644:	dc400e17 	ldw	r17,56(sp)
  803648:	dd401a04 	addi	r21,sp,104
  80364c:	003e1c06 	br	802ec0 <___vfprintf_internal_r+0x4e0>
  803650:	d9015017 	ldw	r4,1344(sp)
  803654:	b00b883a 	mov	r5,r22
  803658:	d9800d04 	addi	r6,sp,52
  80365c:	d9c15215 	stw	r7,1352(sp)
  803660:	08029880 	call	802988 <__sprint_r>
  803664:	d9c15217 	ldw	r7,1352(sp)
  803668:	103e951e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  80366c:	dc800f17 	ldw	r18,60(sp)
  803670:	dc400e17 	ldw	r17,56(sp)
  803674:	dd401a04 	addi	r21,sp,104
  803678:	003e0406 	br	802e8c <___vfprintf_internal_r+0x4ac>
  80367c:	d9000617 	ldw	r4,24(sp)
  803680:	0102520e 	bge	zero,r4,803fcc <___vfprintf_internal_r+0x15ec>
  803684:	d9814817 	ldw	r6,1312(sp)
  803688:	21807a16 	blt	r4,r6,803874 <___vfprintf_internal_r+0xe94>
  80368c:	d8814217 	ldw	r2,1288(sp)
  803690:	91a5883a 	add	r18,r18,r6
  803694:	8c400044 	addi	r17,r17,1
  803698:	a8800015 	stw	r2,0(r21)
  80369c:	008001c4 	movi	r2,7
  8036a0:	a9800115 	stw	r6,4(r21)
  8036a4:	dc800f15 	stw	r18,60(sp)
  8036a8:	dc400e15 	stw	r17,56(sp)
  8036ac:	1442f616 	blt	r2,r17,804288 <___vfprintf_internal_r+0x18a8>
  8036b0:	a8c00204 	addi	r3,r21,8
  8036b4:	d9414817 	ldw	r5,1312(sp)
  8036b8:	2161c83a 	sub	r16,r4,r5
  8036bc:	043f9d0e 	bge	zero,r16,803534 <___vfprintf_internal_r+0xb54>
  8036c0:	00800404 	movi	r2,16
  8036c4:	1402130e 	bge	r2,r16,803f14 <___vfprintf_internal_r+0x1534>
  8036c8:	dc400e17 	ldw	r17,56(sp)
  8036cc:	1027883a 	mov	r19,r2
  8036d0:	07002074 	movhi	fp,129
  8036d4:	e73b5804 	addi	fp,fp,-4768
  8036d8:	050001c4 	movi	r20,7
  8036dc:	00000306 	br	8036ec <___vfprintf_internal_r+0xd0c>
  8036e0:	18c00204 	addi	r3,r3,8
  8036e4:	843ffc04 	addi	r16,r16,-16
  8036e8:	9c020d0e 	bge	r19,r16,803f20 <___vfprintf_internal_r+0x1540>
  8036ec:	94800404 	addi	r18,r18,16
  8036f0:	8c400044 	addi	r17,r17,1
  8036f4:	1f000015 	stw	fp,0(r3)
  8036f8:	1cc00115 	stw	r19,4(r3)
  8036fc:	dc800f15 	stw	r18,60(sp)
  803700:	dc400e15 	stw	r17,56(sp)
  803704:	a47ff60e 	bge	r20,r17,8036e0 <___vfprintf_internal_r+0xd00>
  803708:	d9015017 	ldw	r4,1344(sp)
  80370c:	b00b883a 	mov	r5,r22
  803710:	d9800d04 	addi	r6,sp,52
  803714:	08029880 	call	802988 <__sprint_r>
  803718:	103e691e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  80371c:	dc800f17 	ldw	r18,60(sp)
  803720:	dc400e17 	ldw	r17,56(sp)
  803724:	d8c01a04 	addi	r3,sp,104
  803728:	003fee06 	br	8036e4 <___vfprintf_internal_r+0xd04>
  80372c:	d8814817 	ldw	r2,1312(sp)
  803730:	143fffc4 	addi	r16,r2,-1
  803734:	043e970e 	bge	zero,r16,803194 <___vfprintf_internal_r+0x7b4>
  803738:	00800404 	movi	r2,16
  80373c:	1400180e 	bge	r2,r16,8037a0 <___vfprintf_internal_r+0xdc0>
  803740:	1029883a 	mov	r20,r2
  803744:	07002074 	movhi	fp,129
  803748:	e73b5804 	addi	fp,fp,-4768
  80374c:	054001c4 	movi	r21,7
  803750:	00000306 	br	803760 <___vfprintf_internal_r+0xd80>
  803754:	9cc00204 	addi	r19,r19,8
  803758:	843ffc04 	addi	r16,r16,-16
  80375c:	a400120e 	bge	r20,r16,8037a8 <___vfprintf_internal_r+0xdc8>
  803760:	94800404 	addi	r18,r18,16
  803764:	8c400044 	addi	r17,r17,1
  803768:	9f000015 	stw	fp,0(r19)
  80376c:	9d000115 	stw	r20,4(r19)
  803770:	dc800f15 	stw	r18,60(sp)
  803774:	dc400e15 	stw	r17,56(sp)
  803778:	ac7ff60e 	bge	r21,r17,803754 <___vfprintf_internal_r+0xd74>
  80377c:	d9015017 	ldw	r4,1344(sp)
  803780:	b00b883a 	mov	r5,r22
  803784:	d9800d04 	addi	r6,sp,52
  803788:	08029880 	call	802988 <__sprint_r>
  80378c:	103e4c1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803790:	dc800f17 	ldw	r18,60(sp)
  803794:	dc400e17 	ldw	r17,56(sp)
  803798:	dcc01a04 	addi	r19,sp,104
  80379c:	003fee06 	br	803758 <___vfprintf_internal_r+0xd78>
  8037a0:	07002074 	movhi	fp,129
  8037a4:	e73b5804 	addi	fp,fp,-4768
  8037a8:	9425883a 	add	r18,r18,r16
  8037ac:	8c400044 	addi	r17,r17,1
  8037b0:	008001c4 	movi	r2,7
  8037b4:	9f000015 	stw	fp,0(r19)
  8037b8:	9c000115 	stw	r16,4(r19)
  8037bc:	dc800f15 	stw	r18,60(sp)
  8037c0:	dc400e15 	stw	r17,56(sp)
  8037c4:	147e720e 	bge	r2,r17,803190 <___vfprintf_internal_r+0x7b0>
  8037c8:	d9015017 	ldw	r4,1344(sp)
  8037cc:	b00b883a 	mov	r5,r22
  8037d0:	d9800d04 	addi	r6,sp,52
  8037d4:	08029880 	call	802988 <__sprint_r>
  8037d8:	103e391e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  8037dc:	dc800f17 	ldw	r18,60(sp)
  8037e0:	dc400e17 	ldw	r17,56(sp)
  8037e4:	dcc01a04 	addi	r19,sp,104
  8037e8:	003e6a06 	br	803194 <___vfprintf_internal_r+0x7b4>
  8037ec:	d9015017 	ldw	r4,1344(sp)
  8037f0:	b00b883a 	mov	r5,r22
  8037f4:	d9800d04 	addi	r6,sp,52
  8037f8:	d9c15215 	stw	r7,1352(sp)
  8037fc:	08029880 	call	802988 <__sprint_r>
  803800:	d9c15217 	ldw	r7,1352(sp)
  803804:	103e2e1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803808:	dc800f17 	ldw	r18,60(sp)
  80380c:	dc400e17 	ldw	r17,56(sp)
  803810:	dd401a04 	addi	r21,sp,104
  803814:	003dba06 	br	802f00 <___vfprintf_internal_r+0x520>
  803818:	d9015017 	ldw	r4,1344(sp)
  80381c:	b00b883a 	mov	r5,r22
  803820:	d9800d04 	addi	r6,sp,52
  803824:	08029880 	call	802988 <__sprint_r>
  803828:	103e251e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  80382c:	dc800f17 	ldw	r18,60(sp)
  803830:	dc400e17 	ldw	r17,56(sp)
  803834:	dcc01a04 	addi	r19,sp,104
  803838:	003e4206 	br	803144 <___vfprintf_internal_r+0x764>
  80383c:	d9015017 	ldw	r4,1344(sp)
  803840:	b00b883a 	mov	r5,r22
  803844:	d9800d04 	addi	r6,sp,52
  803848:	08029880 	call	802988 <__sprint_r>
  80384c:	103e1c1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803850:	dc800f17 	ldw	r18,60(sp)
  803854:	dc400e17 	ldw	r17,56(sp)
  803858:	d8c01a04 	addi	r3,sp,104
  80385c:	003e2e06 	br	803118 <___vfprintf_internal_r+0x738>
  803860:	d9414d17 	ldw	r5,1332(sp)
  803864:	2880004c 	andi	r2,r5,1
  803868:	1005003a 	cmpeq	r2,r2,zero
  80386c:	103dda1e 	bne	r2,zero,802fd8 <___vfprintf_internal_r+0x5f8>
  803870:	003e9f06 	br	8032f0 <___vfprintf_internal_r+0x910>
  803874:	d8c14217 	ldw	r3,1288(sp)
  803878:	9125883a 	add	r18,r18,r4
  80387c:	8c400044 	addi	r17,r17,1
  803880:	008001c4 	movi	r2,7
  803884:	a8c00015 	stw	r3,0(r21)
  803888:	a9000115 	stw	r4,4(r21)
  80388c:	dc800f15 	stw	r18,60(sp)
  803890:	dc400e15 	stw	r17,56(sp)
  803894:	14426616 	blt	r2,r17,804230 <___vfprintf_internal_r+0x1850>
  803898:	a8c00204 	addi	r3,r21,8
  80389c:	d9414a17 	ldw	r5,1320(sp)
  8038a0:	00800044 	movi	r2,1
  8038a4:	94800044 	addi	r18,r18,1
  8038a8:	8c400044 	addi	r17,r17,1
  8038ac:	18800115 	stw	r2,4(r3)
  8038b0:	008001c4 	movi	r2,7
  8038b4:	19400015 	stw	r5,0(r3)
  8038b8:	dc800f15 	stw	r18,60(sp)
  8038bc:	dc400e15 	stw	r17,56(sp)
  8038c0:	2021883a 	mov	r16,r4
  8038c4:	14425016 	blt	r2,r17,804208 <___vfprintf_internal_r+0x1828>
  8038c8:	19400204 	addi	r5,r3,8
  8038cc:	d9814817 	ldw	r6,1312(sp)
  8038d0:	8c400044 	addi	r17,r17,1
  8038d4:	dc400e15 	stw	r17,56(sp)
  8038d8:	3107c83a 	sub	r3,r6,r4
  8038dc:	d9014217 	ldw	r4,1288(sp)
  8038e0:	90e5883a 	add	r18,r18,r3
  8038e4:	28c00115 	stw	r3,4(r5)
  8038e8:	8105883a 	add	r2,r16,r4
  8038ec:	28800015 	stw	r2,0(r5)
  8038f0:	008001c4 	movi	r2,7
  8038f4:	dc800f15 	stw	r18,60(sp)
  8038f8:	147f1d16 	blt	r2,r17,803570 <___vfprintf_internal_r+0xb90>
  8038fc:	28c00204 	addi	r3,r5,8
  803900:	003db506 	br	802fd8 <___vfprintf_internal_r+0x5f8>
  803904:	3c000017 	ldw	r16,0(r7)
  803908:	3c400117 	ldw	r17,4(r7)
  80390c:	39800204 	addi	r6,r7,8
  803910:	01000044 	movi	r4,1
  803914:	d9814115 	stw	r6,1284(sp)
  803918:	d8000405 	stb	zero,16(sp)
  80391c:	003ebe06 	br	803418 <___vfprintf_internal_r+0xa38>
  803920:	3c000017 	ldw	r16,0(r7)
  803924:	3c400117 	ldw	r17,4(r7)
  803928:	38800204 	addi	r2,r7,8
  80392c:	d8814115 	stw	r2,1284(sp)
  803930:	003eb706 	br	803410 <___vfprintf_internal_r+0xa30>
  803934:	3c000017 	ldw	r16,0(r7)
  803938:	3c400117 	ldw	r17,4(r7)
  80393c:	39000204 	addi	r4,r7,8
  803940:	d9014115 	stw	r4,1284(sp)
  803944:	0009883a 	mov	r4,zero
  803948:	d8000405 	stb	zero,16(sp)
  80394c:	003eb206 	br	803418 <___vfprintf_internal_r+0xa38>
  803950:	38c00017 	ldw	r3,0(r7)
  803954:	39c00104 	addi	r7,r7,4
  803958:	d8c14b15 	stw	r3,1324(sp)
  80395c:	1800d10e 	bge	r3,zero,803ca4 <___vfprintf_internal_r+0x12c4>
  803960:	00c7c83a 	sub	r3,zero,r3
  803964:	d8c14b15 	stw	r3,1324(sp)
  803968:	d9014d17 	ldw	r4,1332(sp)
  80396c:	b8c00007 	ldb	r3,0(r23)
  803970:	21000114 	ori	r4,r4,4
  803974:	d9014d15 	stw	r4,1332(sp)
  803978:	003c9806 	br	802bdc <___vfprintf_internal_r+0x1fc>
  80397c:	d9814d17 	ldw	r6,1332(sp)
  803980:	3080080c 	andi	r2,r6,32
  803984:	1001f026 	beq	r2,zero,804148 <___vfprintf_internal_r+0x1768>
  803988:	d9014c17 	ldw	r4,1328(sp)
  80398c:	38800017 	ldw	r2,0(r7)
  803990:	39c00104 	addi	r7,r7,4
  803994:	d9c14115 	stw	r7,1284(sp)
  803998:	2007d7fa 	srai	r3,r4,31
  80399c:	d9c14117 	ldw	r7,1284(sp)
  8039a0:	11000015 	stw	r4,0(r2)
  8039a4:	10c00115 	stw	r3,4(r2)
  8039a8:	003c6906 	br	802b50 <___vfprintf_internal_r+0x170>
  8039ac:	b8c00007 	ldb	r3,0(r23)
  8039b0:	00801b04 	movi	r2,108
  8039b4:	18824f26 	beq	r3,r2,8042f4 <___vfprintf_internal_r+0x1914>
  8039b8:	d9414d17 	ldw	r5,1332(sp)
  8039bc:	29400414 	ori	r5,r5,16
  8039c0:	d9414d15 	stw	r5,1332(sp)
  8039c4:	003c8506 	br	802bdc <___vfprintf_internal_r+0x1fc>
  8039c8:	d9814d17 	ldw	r6,1332(sp)
  8039cc:	b8c00007 	ldb	r3,0(r23)
  8039d0:	31800814 	ori	r6,r6,32
  8039d4:	d9814d15 	stw	r6,1332(sp)
  8039d8:	003c8006 	br	802bdc <___vfprintf_internal_r+0x1fc>
  8039dc:	d8814d17 	ldw	r2,1332(sp)
  8039e0:	3c000017 	ldw	r16,0(r7)
  8039e4:	00c01e04 	movi	r3,120
  8039e8:	10800094 	ori	r2,r2,2
  8039ec:	d8814d15 	stw	r2,1332(sp)
  8039f0:	39c00104 	addi	r7,r7,4
  8039f4:	01402074 	movhi	r5,129
  8039f8:	297b4004 	addi	r5,r5,-4864
  8039fc:	00800c04 	movi	r2,48
  803a00:	0023883a 	mov	r17,zero
  803a04:	01000084 	movi	r4,2
  803a08:	d9c14115 	stw	r7,1284(sp)
  803a0c:	d8c14e15 	stw	r3,1336(sp)
  803a10:	d9414515 	stw	r5,1300(sp)
  803a14:	d8800505 	stb	r2,20(sp)
  803a18:	d8c00545 	stb	r3,21(sp)
  803a1c:	d8000405 	stb	zero,16(sp)
  803a20:	003e7d06 	br	803418 <___vfprintf_internal_r+0xa38>
  803a24:	d8814d17 	ldw	r2,1332(sp)
  803a28:	b8c00007 	ldb	r3,0(r23)
  803a2c:	10801014 	ori	r2,r2,64
  803a30:	d8814d15 	stw	r2,1332(sp)
  803a34:	003c6906 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803a38:	d9414d17 	ldw	r5,1332(sp)
  803a3c:	2880020c 	andi	r2,r5,8
  803a40:	1001df26 	beq	r2,zero,8041c0 <___vfprintf_internal_r+0x17e0>
  803a44:	39800017 	ldw	r6,0(r7)
  803a48:	38800204 	addi	r2,r7,8
  803a4c:	d8814115 	stw	r2,1284(sp)
  803a50:	d9814315 	stw	r6,1292(sp)
  803a54:	39c00117 	ldw	r7,4(r7)
  803a58:	d9c14415 	stw	r7,1296(sp)
  803a5c:	d9014317 	ldw	r4,1292(sp)
  803a60:	d9414417 	ldw	r5,1296(sp)
  803a64:	080824c0 	call	80824c <__isinfd>
  803a68:	10021726 	beq	r2,zero,8042c8 <___vfprintf_internal_r+0x18e8>
  803a6c:	d9014317 	ldw	r4,1292(sp)
  803a70:	d9414417 	ldw	r5,1296(sp)
  803a74:	000d883a 	mov	r6,zero
  803a78:	000f883a 	mov	r7,zero
  803a7c:	0809d6c0 	call	809d6c <__ltdf2>
  803a80:	1002ca16 	blt	r2,zero,8045ac <___vfprintf_internal_r+0x1bcc>
  803a84:	d9414e17 	ldw	r5,1336(sp)
  803a88:	008011c4 	movi	r2,71
  803a8c:	11420a16 	blt	r2,r5,8042b8 <___vfprintf_internal_r+0x18d8>
  803a90:	01802074 	movhi	r6,129
  803a94:	31bb4504 	addi	r6,r6,-4844
  803a98:	d9814215 	stw	r6,1288(sp)
  803a9c:	d9014d17 	ldw	r4,1332(sp)
  803aa0:	00c000c4 	movi	r3,3
  803aa4:	00bfdfc4 	movi	r2,-129
  803aa8:	2088703a 	and	r4,r4,r2
  803aac:	180f883a 	mov	r7,r3
  803ab0:	d8c14615 	stw	r3,1304(sp)
  803ab4:	d9014d15 	stw	r4,1332(sp)
  803ab8:	d8014715 	stw	zero,1308(sp)
  803abc:	003e6a06 	br	803468 <___vfprintf_internal_r+0xa88>
  803ac0:	38800017 	ldw	r2,0(r7)
  803ac4:	00c00044 	movi	r3,1
  803ac8:	39c00104 	addi	r7,r7,4
  803acc:	d9c14115 	stw	r7,1284(sp)
  803ad0:	d9001004 	addi	r4,sp,64
  803ad4:	180f883a 	mov	r7,r3
  803ad8:	d8c14615 	stw	r3,1304(sp)
  803adc:	d9014215 	stw	r4,1288(sp)
  803ae0:	d8801005 	stb	r2,64(sp)
  803ae4:	d8000405 	stb	zero,16(sp)
  803ae8:	003cac06 	br	802d9c <___vfprintf_internal_r+0x3bc>
  803aec:	01402074 	movhi	r5,129
  803af0:	297b4b04 	addi	r5,r5,-4820
  803af4:	d9414515 	stw	r5,1300(sp)
  803af8:	d9814d17 	ldw	r6,1332(sp)
  803afc:	3080080c 	andi	r2,r6,32
  803b00:	1000f926 	beq	r2,zero,803ee8 <___vfprintf_internal_r+0x1508>
  803b04:	3c000017 	ldw	r16,0(r7)
  803b08:	3c400117 	ldw	r17,4(r7)
  803b0c:	38800204 	addi	r2,r7,8
  803b10:	d8814115 	stw	r2,1284(sp)
  803b14:	d9414d17 	ldw	r5,1332(sp)
  803b18:	2880004c 	andi	r2,r5,1
  803b1c:	1005003a 	cmpeq	r2,r2,zero
  803b20:	1000b31e 	bne	r2,zero,803df0 <___vfprintf_internal_r+0x1410>
  803b24:	8444b03a 	or	r2,r16,r17
  803b28:	1000b126 	beq	r2,zero,803df0 <___vfprintf_internal_r+0x1410>
  803b2c:	d9814e17 	ldw	r6,1336(sp)
  803b30:	29400094 	ori	r5,r5,2
  803b34:	00800c04 	movi	r2,48
  803b38:	01000084 	movi	r4,2
  803b3c:	d9414d15 	stw	r5,1332(sp)
  803b40:	d8800505 	stb	r2,20(sp)
  803b44:	d9800545 	stb	r6,21(sp)
  803b48:	d8000405 	stb	zero,16(sp)
  803b4c:	003e3206 	br	803418 <___vfprintf_internal_r+0xa38>
  803b50:	01802074 	movhi	r6,129
  803b54:	31bb4004 	addi	r6,r6,-4864
  803b58:	d9814515 	stw	r6,1300(sp)
  803b5c:	003fe606 	br	803af8 <___vfprintf_internal_r+0x1118>
  803b60:	00800ac4 	movi	r2,43
  803b64:	d8800405 	stb	r2,16(sp)
  803b68:	b8c00007 	ldb	r3,0(r23)
  803b6c:	003c1b06 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803b70:	d8814d17 	ldw	r2,1332(sp)
  803b74:	b8c00007 	ldb	r3,0(r23)
  803b78:	10800054 	ori	r2,r2,1
  803b7c:	d8814d15 	stw	r2,1332(sp)
  803b80:	003c1606 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803b84:	d8800407 	ldb	r2,16(sp)
  803b88:	1000461e 	bne	r2,zero,803ca4 <___vfprintf_internal_r+0x12c4>
  803b8c:	00800804 	movi	r2,32
  803b90:	d8800405 	stb	r2,16(sp)
  803b94:	b8c00007 	ldb	r3,0(r23)
  803b98:	003c1006 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803b9c:	d9814d17 	ldw	r6,1332(sp)
  803ba0:	b8c00007 	ldb	r3,0(r23)
  803ba4:	31800214 	ori	r6,r6,8
  803ba8:	d9814d15 	stw	r6,1332(sp)
  803bac:	003c0b06 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803bb0:	0007883a 	mov	r3,zero
  803bb4:	01000244 	movi	r4,9
  803bb8:	188002a4 	muli	r2,r3,10
  803bbc:	b8c00007 	ldb	r3,0(r23)
  803bc0:	d9814e17 	ldw	r6,1336(sp)
  803bc4:	bdc00044 	addi	r23,r23,1
  803bc8:	d8c14e15 	stw	r3,1336(sp)
  803bcc:	d9414e17 	ldw	r5,1336(sp)
  803bd0:	3085883a 	add	r2,r6,r2
  803bd4:	10fff404 	addi	r3,r2,-48
  803bd8:	28bff404 	addi	r2,r5,-48
  803bdc:	20bff62e 	bgeu	r4,r2,803bb8 <___vfprintf_internal_r+0x11d8>
  803be0:	d8c14b15 	stw	r3,1324(sp)
  803be4:	003bff06 	br	802be4 <___vfprintf_internal_r+0x204>
  803be8:	d9414d17 	ldw	r5,1332(sp)
  803bec:	b8c00007 	ldb	r3,0(r23)
  803bf0:	29402014 	ori	r5,r5,128
  803bf4:	d9414d15 	stw	r5,1332(sp)
  803bf8:	003bf806 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803bfc:	b8c00007 	ldb	r3,0(r23)
  803c00:	00800a84 	movi	r2,42
  803c04:	bdc00044 	addi	r23,r23,1
  803c08:	18831526 	beq	r3,r2,804860 <___vfprintf_internal_r+0x1e80>
  803c0c:	d8c14e15 	stw	r3,1336(sp)
  803c10:	18bff404 	addi	r2,r3,-48
  803c14:	00c00244 	movi	r3,9
  803c18:	18827836 	bltu	r3,r2,8045fc <___vfprintf_internal_r+0x1c1c>
  803c1c:	000d883a 	mov	r6,zero
  803c20:	308002a4 	muli	r2,r6,10
  803c24:	b9800007 	ldb	r6,0(r23)
  803c28:	d9414e17 	ldw	r5,1336(sp)
  803c2c:	bdc00044 	addi	r23,r23,1
  803c30:	d9814e15 	stw	r6,1336(sp)
  803c34:	d9014e17 	ldw	r4,1336(sp)
  803c38:	1145883a 	add	r2,r2,r5
  803c3c:	11bff404 	addi	r6,r2,-48
  803c40:	20bff404 	addi	r2,r4,-48
  803c44:	18bff62e 	bgeu	r3,r2,803c20 <___vfprintf_internal_r+0x1240>
  803c48:	3027883a 	mov	r19,r6
  803c4c:	303be50e 	bge	r6,zero,802be4 <___vfprintf_internal_r+0x204>
  803c50:	04ffffc4 	movi	r19,-1
  803c54:	003be306 	br	802be4 <___vfprintf_internal_r+0x204>
  803c58:	d8000405 	stb	zero,16(sp)
  803c5c:	39800017 	ldw	r6,0(r7)
  803c60:	39c00104 	addi	r7,r7,4
  803c64:	d9c14115 	stw	r7,1284(sp)
  803c68:	d9814215 	stw	r6,1288(sp)
  803c6c:	3001c926 	beq	r6,zero,804394 <___vfprintf_internal_r+0x19b4>
  803c70:	98000e16 	blt	r19,zero,803cac <___vfprintf_internal_r+0x12cc>
  803c74:	d9014217 	ldw	r4,1288(sp)
  803c78:	000b883a 	mov	r5,zero
  803c7c:	980d883a 	mov	r6,r19
  803c80:	08069880 	call	806988 <memchr>
  803c84:	10025926 	beq	r2,zero,8045ec <___vfprintf_internal_r+0x1c0c>
  803c88:	d8c14217 	ldw	r3,1288(sp)
  803c8c:	10cfc83a 	sub	r7,r2,r3
  803c90:	99c19e16 	blt	r19,r7,80430c <___vfprintf_internal_r+0x192c>
  803c94:	d9c14615 	stw	r7,1304(sp)
  803c98:	38000916 	blt	r7,zero,803cc0 <___vfprintf_internal_r+0x12e0>
  803c9c:	d8014715 	stw	zero,1308(sp)
  803ca0:	003df106 	br	803468 <___vfprintf_internal_r+0xa88>
  803ca4:	b8c00007 	ldb	r3,0(r23)
  803ca8:	003bcc06 	br	802bdc <___vfprintf_internal_r+0x1fc>
  803cac:	d9014217 	ldw	r4,1288(sp)
  803cb0:	08083780 	call	808378 <strlen>
  803cb4:	d8814615 	stw	r2,1304(sp)
  803cb8:	100f883a 	mov	r7,r2
  803cbc:	103ff70e 	bge	r2,zero,803c9c <___vfprintf_internal_r+0x12bc>
  803cc0:	d8014615 	stw	zero,1304(sp)
  803cc4:	d8014715 	stw	zero,1308(sp)
  803cc8:	003de706 	br	803468 <___vfprintf_internal_r+0xa88>
  803ccc:	20c03fcc 	andi	r3,r4,255
  803cd0:	00800044 	movi	r2,1
  803cd4:	18802d26 	beq	r3,r2,803d8c <___vfprintf_internal_r+0x13ac>
  803cd8:	18800e36 	bltu	r3,r2,803d14 <___vfprintf_internal_r+0x1334>
  803cdc:	00800084 	movi	r2,2
  803ce0:	1880fa26 	beq	r3,r2,8040cc <___vfprintf_internal_r+0x16ec>
  803ce4:	01002074 	movhi	r4,129
  803ce8:	213b5004 	addi	r4,r4,-4800
  803cec:	08083780 	call	808378 <strlen>
  803cf0:	100f883a 	mov	r7,r2
  803cf4:	dcc14615 	stw	r19,1304(sp)
  803cf8:	9880010e 	bge	r19,r2,803d00 <___vfprintf_internal_r+0x1320>
  803cfc:	d8814615 	stw	r2,1304(sp)
  803d00:	00802074 	movhi	r2,129
  803d04:	10bb5004 	addi	r2,r2,-4800
  803d08:	dcc14715 	stw	r19,1308(sp)
  803d0c:	d8814215 	stw	r2,1288(sp)
  803d10:	003dd506 	br	803468 <___vfprintf_internal_r+0xa88>
  803d14:	d9401a04 	addi	r5,sp,104
  803d18:	dd001004 	addi	r20,sp,64
  803d1c:	d9414215 	stw	r5,1288(sp)
  803d20:	880a977a 	slli	r5,r17,29
  803d24:	d9814217 	ldw	r6,1288(sp)
  803d28:	8004d0fa 	srli	r2,r16,3
  803d2c:	8806d0fa 	srli	r3,r17,3
  803d30:	810001cc 	andi	r4,r16,7
  803d34:	2884b03a 	or	r2,r5,r2
  803d38:	31bfffc4 	addi	r6,r6,-1
  803d3c:	21000c04 	addi	r4,r4,48
  803d40:	d9814215 	stw	r6,1288(sp)
  803d44:	10cab03a 	or	r5,r2,r3
  803d48:	31000005 	stb	r4,0(r6)
  803d4c:	1021883a 	mov	r16,r2
  803d50:	1823883a 	mov	r17,r3
  803d54:	283ff21e 	bne	r5,zero,803d20 <___vfprintf_internal_r+0x1340>
  803d58:	d8c14d17 	ldw	r3,1332(sp)
  803d5c:	1880004c 	andi	r2,r3,1
  803d60:	1005003a 	cmpeq	r2,r2,zero
  803d64:	103db91e 	bne	r2,zero,80344c <___vfprintf_internal_r+0xa6c>
  803d68:	20803fcc 	andi	r2,r4,255
  803d6c:	1080201c 	xori	r2,r2,128
  803d70:	10bfe004 	addi	r2,r2,-128
  803d74:	00c00c04 	movi	r3,48
  803d78:	10fdb426 	beq	r2,r3,80344c <___vfprintf_internal_r+0xa6c>
  803d7c:	31bfffc4 	addi	r6,r6,-1
  803d80:	d9814215 	stw	r6,1288(sp)
  803d84:	30c00005 	stb	r3,0(r6)
  803d88:	003db006 	br	80344c <___vfprintf_internal_r+0xa6c>
  803d8c:	88800068 	cmpgeui	r2,r17,1
  803d90:	10002c1e 	bne	r2,zero,803e44 <___vfprintf_internal_r+0x1464>
  803d94:	8800021e 	bne	r17,zero,803da0 <___vfprintf_internal_r+0x13c0>
  803d98:	00800244 	movi	r2,9
  803d9c:	14002936 	bltu	r2,r16,803e44 <___vfprintf_internal_r+0x1464>
  803da0:	d90019c4 	addi	r4,sp,103
  803da4:	dd001004 	addi	r20,sp,64
  803da8:	d9014215 	stw	r4,1288(sp)
  803dac:	d9014217 	ldw	r4,1288(sp)
  803db0:	80800c04 	addi	r2,r16,48
  803db4:	20800005 	stb	r2,0(r4)
  803db8:	003da406 	br	80344c <___vfprintf_internal_r+0xa6c>
  803dbc:	dc400e17 	ldw	r17,56(sp)
  803dc0:	07002074 	movhi	fp,129
  803dc4:	e73b5804 	addi	fp,fp,-4768
  803dc8:	9425883a 	add	r18,r18,r16
  803dcc:	8c400044 	addi	r17,r17,1
  803dd0:	008001c4 	movi	r2,7
  803dd4:	1f000015 	stw	fp,0(r3)
  803dd8:	1c000115 	stw	r16,4(r3)
  803ddc:	dc800f15 	stw	r18,60(sp)
  803de0:	dc400e15 	stw	r17,56(sp)
  803de4:	147de216 	blt	r2,r17,803570 <___vfprintf_internal_r+0xb90>
  803de8:	18c00204 	addi	r3,r3,8
  803dec:	003c7a06 	br	802fd8 <___vfprintf_internal_r+0x5f8>
  803df0:	01000084 	movi	r4,2
  803df4:	d8000405 	stb	zero,16(sp)
  803df8:	003d8706 	br	803418 <___vfprintf_internal_r+0xa38>
  803dfc:	d9814d17 	ldw	r6,1332(sp)
  803e00:	30c4703a 	and	r2,r6,r3
  803e04:	1005003a 	cmpeq	r2,r2,zero
  803e08:	103cb926 	beq	r2,zero,8030f0 <___vfprintf_internal_r+0x710>
  803e0c:	d9014217 	ldw	r4,1288(sp)
  803e10:	94800044 	addi	r18,r18,1
  803e14:	8c400044 	addi	r17,r17,1
  803e18:	008001c4 	movi	r2,7
  803e1c:	a9000015 	stw	r4,0(r21)
  803e20:	a8c00115 	stw	r3,4(r21)
  803e24:	dc800f15 	stw	r18,60(sp)
  803e28:	dc400e15 	stw	r17,56(sp)
  803e2c:	147e6616 	blt	r2,r17,8037c8 <___vfprintf_internal_r+0xde8>
  803e30:	acc00204 	addi	r19,r21,8
  803e34:	003cd706 	br	803194 <___vfprintf_internal_r+0x7b4>
  803e38:	07002074 	movhi	fp,129
  803e3c:	e73b5804 	addi	fp,fp,-4768
  803e40:	003c4f06 	br	802f80 <___vfprintf_internal_r+0x5a0>
  803e44:	dd001004 	addi	r20,sp,64
  803e48:	dc801a04 	addi	r18,sp,104
  803e4c:	8009883a 	mov	r4,r16
  803e50:	880b883a 	mov	r5,r17
  803e54:	01800284 	movi	r6,10
  803e58:	000f883a 	mov	r7,zero
  803e5c:	0808a7c0 	call	808a7c <__umoddi3>
  803e60:	12000c04 	addi	r8,r2,48
  803e64:	94bfffc4 	addi	r18,r18,-1
  803e68:	8009883a 	mov	r4,r16
  803e6c:	880b883a 	mov	r5,r17
  803e70:	01800284 	movi	r6,10
  803e74:	000f883a 	mov	r7,zero
  803e78:	92000005 	stb	r8,0(r18)
  803e7c:	08084a00 	call	8084a0 <__udivdi3>
  803e80:	1009883a 	mov	r4,r2
  803e84:	1021883a 	mov	r16,r2
  803e88:	18800068 	cmpgeui	r2,r3,1
  803e8c:	1823883a 	mov	r17,r3
  803e90:	103fee1e 	bne	r2,zero,803e4c <___vfprintf_internal_r+0x146c>
  803e94:	1800021e 	bne	r3,zero,803ea0 <___vfprintf_internal_r+0x14c0>
  803e98:	00800244 	movi	r2,9
  803e9c:	113feb36 	bltu	r2,r4,803e4c <___vfprintf_internal_r+0x146c>
  803ea0:	94bfffc4 	addi	r18,r18,-1
  803ea4:	dc814215 	stw	r18,1288(sp)
  803ea8:	003fc006 	br	803dac <___vfprintf_internal_r+0x13cc>
  803eac:	d9014d17 	ldw	r4,1332(sp)
  803eb0:	2080004c 	andi	r2,r4,1
  803eb4:	10009a1e 	bne	r2,zero,804120 <___vfprintf_internal_r+0x1740>
  803eb8:	d9401a04 	addi	r5,sp,104
  803ebc:	dd001004 	addi	r20,sp,64
  803ec0:	d9414215 	stw	r5,1288(sp)
  803ec4:	003d6106 	br	80344c <___vfprintf_internal_r+0xa6c>
  803ec8:	d9015017 	ldw	r4,1344(sp)
  803ecc:	b00b883a 	mov	r5,r22
  803ed0:	d9800d04 	addi	r6,sp,52
  803ed4:	08029880 	call	802988 <__sprint_r>
  803ed8:	103c791e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803edc:	dc800f17 	ldw	r18,60(sp)
  803ee0:	d8c01a04 	addi	r3,sp,104
  803ee4:	003cff06 	br	8032e4 <___vfprintf_internal_r+0x904>
  803ee8:	d8c14d17 	ldw	r3,1332(sp)
  803eec:	1880040c 	andi	r2,r3,16
  803ef0:	1000711e 	bne	r2,zero,8040b8 <___vfprintf_internal_r+0x16d8>
  803ef4:	d9014d17 	ldw	r4,1332(sp)
  803ef8:	2080100c 	andi	r2,r4,64
  803efc:	10006e26 	beq	r2,zero,8040b8 <___vfprintf_internal_r+0x16d8>
  803f00:	3c00000b 	ldhu	r16,0(r7)
  803f04:	0023883a 	mov	r17,zero
  803f08:	39c00104 	addi	r7,r7,4
  803f0c:	d9c14115 	stw	r7,1284(sp)
  803f10:	003f0006 	br	803b14 <___vfprintf_internal_r+0x1134>
  803f14:	dc400e17 	ldw	r17,56(sp)
  803f18:	07002074 	movhi	fp,129
  803f1c:	e73b5804 	addi	fp,fp,-4768
  803f20:	9425883a 	add	r18,r18,r16
  803f24:	8c400044 	addi	r17,r17,1
  803f28:	008001c4 	movi	r2,7
  803f2c:	1f000015 	stw	fp,0(r3)
  803f30:	1c000115 	stw	r16,4(r3)
  803f34:	dc800f15 	stw	r18,60(sp)
  803f38:	dc400e15 	stw	r17,56(sp)
  803f3c:	147d7616 	blt	r2,r17,803518 <___vfprintf_internal_r+0xb38>
  803f40:	18c00204 	addi	r3,r3,8
  803f44:	003d7b06 	br	803534 <___vfprintf_internal_r+0xb54>
  803f48:	dc800f17 	ldw	r18,60(sp)
  803f4c:	dc400e17 	ldw	r17,56(sp)
  803f50:	07002074 	movhi	fp,129
  803f54:	e73b5c04 	addi	fp,fp,-4752
  803f58:	003bc006 	br	802e5c <___vfprintf_internal_r+0x47c>
  803f5c:	d9015017 	ldw	r4,1344(sp)
  803f60:	b00b883a 	mov	r5,r22
  803f64:	d9800d04 	addi	r6,sp,52
  803f68:	08029880 	call	802988 <__sprint_r>
  803f6c:	103c541e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  803f70:	dc800f17 	ldw	r18,60(sp)
  803f74:	d8c01a04 	addi	r3,sp,104
  803f78:	003ce906 	br	803320 <___vfprintf_internal_r+0x940>
  803f7c:	3c000017 	ldw	r16,0(r7)
  803f80:	0009883a 	mov	r4,zero
  803f84:	39c00104 	addi	r7,r7,4
  803f88:	0023883a 	mov	r17,zero
  803f8c:	d9c14115 	stw	r7,1284(sp)
  803f90:	d8000405 	stb	zero,16(sp)
  803f94:	003d2006 	br	803418 <___vfprintf_internal_r+0xa38>
  803f98:	38800017 	ldw	r2,0(r7)
  803f9c:	39c00104 	addi	r7,r7,4
  803fa0:	d9c14115 	stw	r7,1284(sp)
  803fa4:	1023d7fa 	srai	r17,r2,31
  803fa8:	1021883a 	mov	r16,r2
  803fac:	003d1806 	br	803410 <___vfprintf_internal_r+0xa30>
  803fb0:	3c000017 	ldw	r16,0(r7)
  803fb4:	01000044 	movi	r4,1
  803fb8:	39c00104 	addi	r7,r7,4
  803fbc:	0023883a 	mov	r17,zero
  803fc0:	d9c14115 	stw	r7,1284(sp)
  803fc4:	d8000405 	stb	zero,16(sp)
  803fc8:	003d1306 	br	803418 <___vfprintf_internal_r+0xa38>
  803fcc:	00802074 	movhi	r2,129
  803fd0:	10bb5704 	addi	r2,r2,-4772
  803fd4:	94800044 	addi	r18,r18,1
  803fd8:	8c400044 	addi	r17,r17,1
  803fdc:	a8800015 	stw	r2,0(r21)
  803fe0:	00c00044 	movi	r3,1
  803fe4:	008001c4 	movi	r2,7
  803fe8:	a8c00115 	stw	r3,4(r21)
  803fec:	dc800f15 	stw	r18,60(sp)
  803ff0:	dc400e15 	stw	r17,56(sp)
  803ff4:	1440ca16 	blt	r2,r17,804320 <___vfprintf_internal_r+0x1940>
  803ff8:	a8c00204 	addi	r3,r21,8
  803ffc:	2000061e 	bne	r4,zero,804018 <___vfprintf_internal_r+0x1638>
  804000:	d9414817 	ldw	r5,1312(sp)
  804004:	2800041e 	bne	r5,zero,804018 <___vfprintf_internal_r+0x1638>
  804008:	d9814d17 	ldw	r6,1332(sp)
  80400c:	3080004c 	andi	r2,r6,1
  804010:	1005003a 	cmpeq	r2,r2,zero
  804014:	103bf01e 	bne	r2,zero,802fd8 <___vfprintf_internal_r+0x5f8>
  804018:	00800044 	movi	r2,1
  80401c:	dc400e17 	ldw	r17,56(sp)
  804020:	18800115 	stw	r2,4(r3)
  804024:	d8814a17 	ldw	r2,1320(sp)
  804028:	94800044 	addi	r18,r18,1
  80402c:	8c400044 	addi	r17,r17,1
  804030:	18800015 	stw	r2,0(r3)
  804034:	008001c4 	movi	r2,7
  804038:	dc800f15 	stw	r18,60(sp)
  80403c:	dc400e15 	stw	r17,56(sp)
  804040:	1440ca16 	blt	r2,r17,80436c <___vfprintf_internal_r+0x198c>
  804044:	18c00204 	addi	r3,r3,8
  804048:	0121c83a 	sub	r16,zero,r4
  80404c:	0400500e 	bge	zero,r16,804190 <___vfprintf_internal_r+0x17b0>
  804050:	00800404 	movi	r2,16
  804054:	1400800e 	bge	r2,r16,804258 <___vfprintf_internal_r+0x1878>
  804058:	1027883a 	mov	r19,r2
  80405c:	07002074 	movhi	fp,129
  804060:	e73b5804 	addi	fp,fp,-4768
  804064:	050001c4 	movi	r20,7
  804068:	00000306 	br	804078 <___vfprintf_internal_r+0x1698>
  80406c:	18c00204 	addi	r3,r3,8
  804070:	843ffc04 	addi	r16,r16,-16
  804074:	9c007a0e 	bge	r19,r16,804260 <___vfprintf_internal_r+0x1880>
  804078:	94800404 	addi	r18,r18,16
  80407c:	8c400044 	addi	r17,r17,1
  804080:	1f000015 	stw	fp,0(r3)
  804084:	1cc00115 	stw	r19,4(r3)
  804088:	dc800f15 	stw	r18,60(sp)
  80408c:	dc400e15 	stw	r17,56(sp)
  804090:	a47ff60e 	bge	r20,r17,80406c <___vfprintf_internal_r+0x168c>
  804094:	d9015017 	ldw	r4,1344(sp)
  804098:	b00b883a 	mov	r5,r22
  80409c:	d9800d04 	addi	r6,sp,52
  8040a0:	08029880 	call	802988 <__sprint_r>
  8040a4:	103c061e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  8040a8:	dc800f17 	ldw	r18,60(sp)
  8040ac:	dc400e17 	ldw	r17,56(sp)
  8040b0:	d8c01a04 	addi	r3,sp,104
  8040b4:	003fee06 	br	804070 <___vfprintf_internal_r+0x1690>
  8040b8:	3c000017 	ldw	r16,0(r7)
  8040bc:	0023883a 	mov	r17,zero
  8040c0:	39c00104 	addi	r7,r7,4
  8040c4:	d9c14115 	stw	r7,1284(sp)
  8040c8:	003e9206 	br	803b14 <___vfprintf_internal_r+0x1134>
  8040cc:	d9401a04 	addi	r5,sp,104
  8040d0:	dd001004 	addi	r20,sp,64
  8040d4:	d9414215 	stw	r5,1288(sp)
  8040d8:	d9814517 	ldw	r6,1300(sp)
  8040dc:	880a973a 	slli	r5,r17,28
  8040e0:	8004d13a 	srli	r2,r16,4
  8040e4:	810003cc 	andi	r4,r16,15
  8040e8:	3109883a 	add	r4,r6,r4
  8040ec:	2884b03a 	or	r2,r5,r2
  8040f0:	21400003 	ldbu	r5,0(r4)
  8040f4:	d9014217 	ldw	r4,1288(sp)
  8040f8:	8806d13a 	srli	r3,r17,4
  8040fc:	1021883a 	mov	r16,r2
  804100:	213fffc4 	addi	r4,r4,-1
  804104:	d9014215 	stw	r4,1288(sp)
  804108:	d9814217 	ldw	r6,1288(sp)
  80410c:	10c8b03a 	or	r4,r2,r3
  804110:	1823883a 	mov	r17,r3
  804114:	31400005 	stb	r5,0(r6)
  804118:	203fef1e 	bne	r4,zero,8040d8 <___vfprintf_internal_r+0x16f8>
  80411c:	003ccb06 	br	80344c <___vfprintf_internal_r+0xa6c>
  804120:	00800c04 	movi	r2,48
  804124:	d98019c4 	addi	r6,sp,103
  804128:	dd001004 	addi	r20,sp,64
  80412c:	d88019c5 	stb	r2,103(sp)
  804130:	d9814215 	stw	r6,1288(sp)
  804134:	003cc506 	br	80344c <___vfprintf_internal_r+0xa6c>
  804138:	dc400e17 	ldw	r17,56(sp)
  80413c:	07002074 	movhi	fp,129
  804140:	e73b5c04 	addi	fp,fp,-4752
  804144:	003bc706 	br	803064 <___vfprintf_internal_r+0x684>
  804148:	d9414d17 	ldw	r5,1332(sp)
  80414c:	2880040c 	andi	r2,r5,16
  804150:	10007c26 	beq	r2,zero,804344 <___vfprintf_internal_r+0x1964>
  804154:	38800017 	ldw	r2,0(r7)
  804158:	39c00104 	addi	r7,r7,4
  80415c:	d9c14115 	stw	r7,1284(sp)
  804160:	d9814c17 	ldw	r6,1328(sp)
  804164:	d9c14117 	ldw	r7,1284(sp)
  804168:	11800015 	stw	r6,0(r2)
  80416c:	003a7806 	br	802b50 <___vfprintf_internal_r+0x170>
  804170:	d9015017 	ldw	r4,1344(sp)
  804174:	b00b883a 	mov	r5,r22
  804178:	d9800d04 	addi	r6,sp,52
  80417c:	08029880 	call	802988 <__sprint_r>
  804180:	103bcf1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  804184:	dc800f17 	ldw	r18,60(sp)
  804188:	dc400e17 	ldw	r17,56(sp)
  80418c:	d8c01a04 	addi	r3,sp,104
  804190:	d9014817 	ldw	r4,1312(sp)
  804194:	d9414217 	ldw	r5,1288(sp)
  804198:	8c400044 	addi	r17,r17,1
  80419c:	9125883a 	add	r18,r18,r4
  8041a0:	008001c4 	movi	r2,7
  8041a4:	19400015 	stw	r5,0(r3)
  8041a8:	19000115 	stw	r4,4(r3)
  8041ac:	dc800f15 	stw	r18,60(sp)
  8041b0:	dc400e15 	stw	r17,56(sp)
  8041b4:	147cee16 	blt	r2,r17,803570 <___vfprintf_internal_r+0xb90>
  8041b8:	18c00204 	addi	r3,r3,8
  8041bc:	003b8606 	br	802fd8 <___vfprintf_internal_r+0x5f8>
  8041c0:	38c00017 	ldw	r3,0(r7)
  8041c4:	39000204 	addi	r4,r7,8
  8041c8:	d9014115 	stw	r4,1284(sp)
  8041cc:	d8c14315 	stw	r3,1292(sp)
  8041d0:	39c00117 	ldw	r7,4(r7)
  8041d4:	d9c14415 	stw	r7,1296(sp)
  8041d8:	003e2006 	br	803a5c <___vfprintf_internal_r+0x107c>
  8041dc:	0005883a 	mov	r2,zero
  8041e0:	1409c83a 	sub	r4,r2,r16
  8041e4:	1105803a 	cmpltu	r2,r2,r4
  8041e8:	044bc83a 	sub	r5,zero,r17
  8041ec:	2885c83a 	sub	r2,r5,r2
  8041f0:	2021883a 	mov	r16,r4
  8041f4:	1023883a 	mov	r17,r2
  8041f8:	01000044 	movi	r4,1
  8041fc:	00800b44 	movi	r2,45
  804200:	d8800405 	stb	r2,16(sp)
  804204:	003c8406 	br	803418 <___vfprintf_internal_r+0xa38>
  804208:	d9015017 	ldw	r4,1344(sp)
  80420c:	b00b883a 	mov	r5,r22
  804210:	d9800d04 	addi	r6,sp,52
  804214:	08029880 	call	802988 <__sprint_r>
  804218:	103ba91e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  80421c:	dc800f17 	ldw	r18,60(sp)
  804220:	dc400e17 	ldw	r17,56(sp)
  804224:	d9000617 	ldw	r4,24(sp)
  804228:	d9401a04 	addi	r5,sp,104
  80422c:	003da706 	br	8038cc <___vfprintf_internal_r+0xeec>
  804230:	d9015017 	ldw	r4,1344(sp)
  804234:	b00b883a 	mov	r5,r22
  804238:	d9800d04 	addi	r6,sp,52
  80423c:	08029880 	call	802988 <__sprint_r>
  804240:	103b9f1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  804244:	dc800f17 	ldw	r18,60(sp)
  804248:	dc400e17 	ldw	r17,56(sp)
  80424c:	d9000617 	ldw	r4,24(sp)
  804250:	d8c01a04 	addi	r3,sp,104
  804254:	003d9106 	br	80389c <___vfprintf_internal_r+0xebc>
  804258:	07002074 	movhi	fp,129
  80425c:	e73b5804 	addi	fp,fp,-4768
  804260:	9425883a 	add	r18,r18,r16
  804264:	8c400044 	addi	r17,r17,1
  804268:	008001c4 	movi	r2,7
  80426c:	1f000015 	stw	fp,0(r3)
  804270:	1c000115 	stw	r16,4(r3)
  804274:	dc800f15 	stw	r18,60(sp)
  804278:	dc400e15 	stw	r17,56(sp)
  80427c:	147fbc16 	blt	r2,r17,804170 <___vfprintf_internal_r+0x1790>
  804280:	18c00204 	addi	r3,r3,8
  804284:	003fc206 	br	804190 <___vfprintf_internal_r+0x17b0>
  804288:	d9015017 	ldw	r4,1344(sp)
  80428c:	b00b883a 	mov	r5,r22
  804290:	d9800d04 	addi	r6,sp,52
  804294:	08029880 	call	802988 <__sprint_r>
  804298:	103b891e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  80429c:	dc800f17 	ldw	r18,60(sp)
  8042a0:	d9000617 	ldw	r4,24(sp)
  8042a4:	d8c01a04 	addi	r3,sp,104
  8042a8:	003d0206 	br	8036b4 <___vfprintf_internal_r+0xcd4>
  8042ac:	07002074 	movhi	fp,129
  8042b0:	e73b5804 	addi	fp,fp,-4768
  8042b4:	003be406 	br	803248 <___vfprintf_internal_r+0x868>
  8042b8:	00802074 	movhi	r2,129
  8042bc:	10bb4604 	addi	r2,r2,-4840
  8042c0:	d8814215 	stw	r2,1288(sp)
  8042c4:	003df506 	br	803a9c <___vfprintf_internal_r+0x10bc>
  8042c8:	d9014317 	ldw	r4,1292(sp)
  8042cc:	d9414417 	ldw	r5,1296(sp)
  8042d0:	080828c0 	call	80828c <__isnand>
  8042d4:	10003926 	beq	r2,zero,8043bc <___vfprintf_internal_r+0x19dc>
  8042d8:	d9414e17 	ldw	r5,1336(sp)
  8042dc:	008011c4 	movi	r2,71
  8042e0:	1140ce16 	blt	r2,r5,80461c <___vfprintf_internal_r+0x1c3c>
  8042e4:	01802074 	movhi	r6,129
  8042e8:	31bb4704 	addi	r6,r6,-4836
  8042ec:	d9814215 	stw	r6,1288(sp)
  8042f0:	003dea06 	br	803a9c <___vfprintf_internal_r+0x10bc>
  8042f4:	d9014d17 	ldw	r4,1332(sp)
  8042f8:	bdc00044 	addi	r23,r23,1
  8042fc:	b8c00007 	ldb	r3,0(r23)
  804300:	21000814 	ori	r4,r4,32
  804304:	d9014d15 	stw	r4,1332(sp)
  804308:	003a3406 	br	802bdc <___vfprintf_internal_r+0x1fc>
  80430c:	dcc14615 	stw	r19,1304(sp)
  804310:	98011016 	blt	r19,zero,804754 <___vfprintf_internal_r+0x1d74>
  804314:	980f883a 	mov	r7,r19
  804318:	d8014715 	stw	zero,1308(sp)
  80431c:	003c5206 	br	803468 <___vfprintf_internal_r+0xa88>
  804320:	d9015017 	ldw	r4,1344(sp)
  804324:	b00b883a 	mov	r5,r22
  804328:	d9800d04 	addi	r6,sp,52
  80432c:	08029880 	call	802988 <__sprint_r>
  804330:	103b631e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  804334:	dc800f17 	ldw	r18,60(sp)
  804338:	d9000617 	ldw	r4,24(sp)
  80433c:	d8c01a04 	addi	r3,sp,104
  804340:	003f2e06 	br	803ffc <___vfprintf_internal_r+0x161c>
  804344:	d8c14d17 	ldw	r3,1332(sp)
  804348:	1880100c 	andi	r2,r3,64
  80434c:	1000a026 	beq	r2,zero,8045d0 <___vfprintf_internal_r+0x1bf0>
  804350:	38800017 	ldw	r2,0(r7)
  804354:	39c00104 	addi	r7,r7,4
  804358:	d9c14115 	stw	r7,1284(sp)
  80435c:	d9014c17 	ldw	r4,1328(sp)
  804360:	d9c14117 	ldw	r7,1284(sp)
  804364:	1100000d 	sth	r4,0(r2)
  804368:	0039f906 	br	802b50 <___vfprintf_internal_r+0x170>
  80436c:	d9015017 	ldw	r4,1344(sp)
  804370:	b00b883a 	mov	r5,r22
  804374:	d9800d04 	addi	r6,sp,52
  804378:	08029880 	call	802988 <__sprint_r>
  80437c:	103b501e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  804380:	dc800f17 	ldw	r18,60(sp)
  804384:	dc400e17 	ldw	r17,56(sp)
  804388:	d9000617 	ldw	r4,24(sp)
  80438c:	d8c01a04 	addi	r3,sp,104
  804390:	003f2d06 	br	804048 <___vfprintf_internal_r+0x1668>
  804394:	00800184 	movi	r2,6
  804398:	14c09a36 	bltu	r2,r19,804604 <___vfprintf_internal_r+0x1c24>
  80439c:	dcc14615 	stw	r19,1304(sp)
  8043a0:	9800010e 	bge	r19,zero,8043a8 <___vfprintf_internal_r+0x19c8>
  8043a4:	d8014615 	stw	zero,1304(sp)
  8043a8:	00802074 	movhi	r2,129
  8043ac:	10bb4904 	addi	r2,r2,-4828
  8043b0:	980f883a 	mov	r7,r19
  8043b4:	d8814215 	stw	r2,1288(sp)
  8043b8:	003a7806 	br	802d9c <___vfprintf_internal_r+0x3bc>
  8043bc:	00bfffc4 	movi	r2,-1
  8043c0:	9880e226 	beq	r19,r2,80474c <___vfprintf_internal_r+0x1d6c>
  8043c4:	d9414e17 	ldw	r5,1336(sp)
  8043c8:	008019c4 	movi	r2,103
  8043cc:	2880dc26 	beq	r5,r2,804740 <___vfprintf_internal_r+0x1d60>
  8043d0:	008011c4 	movi	r2,71
  8043d4:	2880da26 	beq	r5,r2,804740 <___vfprintf_internal_r+0x1d60>
  8043d8:	d9414d17 	ldw	r5,1332(sp)
  8043dc:	d9014417 	ldw	r4,1296(sp)
  8043e0:	d9814317 	ldw	r6,1292(sp)
  8043e4:	29404014 	ori	r5,r5,256
  8043e8:	d9414d15 	stw	r5,1332(sp)
  8043ec:	2000cc16 	blt	r4,zero,804720 <___vfprintf_internal_r+0x1d40>
  8043f0:	3021883a 	mov	r16,r6
  8043f4:	2023883a 	mov	r17,r4
  8043f8:	0039883a 	mov	fp,zero
  8043fc:	d9414e17 	ldw	r5,1336(sp)
  804400:	00801984 	movi	r2,102
  804404:	2880b726 	beq	r5,r2,8046e4 <___vfprintf_internal_r+0x1d04>
  804408:	00801184 	movi	r2,70
  80440c:	2880b526 	beq	r5,r2,8046e4 <___vfprintf_internal_r+0x1d04>
  804410:	00801944 	movi	r2,101
  804414:	2880c826 	beq	r5,r2,804738 <___vfprintf_internal_r+0x1d58>
  804418:	00801144 	movi	r2,69
  80441c:	2880c626 	beq	r5,r2,804738 <___vfprintf_internal_r+0x1d58>
  804420:	9829883a 	mov	r20,r19
  804424:	d9015017 	ldw	r4,1344(sp)
  804428:	d8800604 	addi	r2,sp,24
  80442c:	880d883a 	mov	r6,r17
  804430:	d8800115 	stw	r2,4(sp)
  804434:	d8c00704 	addi	r3,sp,28
  804438:	d8800804 	addi	r2,sp,32
  80443c:	800b883a 	mov	r5,r16
  804440:	01c00084 	movi	r7,2
  804444:	d8c00215 	stw	r3,8(sp)
  804448:	d8800315 	stw	r2,12(sp)
  80444c:	dd000015 	stw	r20,0(sp)
  804450:	0804cec0 	call	804cec <_dtoa_r>
  804454:	d9814e17 	ldw	r6,1336(sp)
  804458:	d8814215 	stw	r2,1288(sp)
  80445c:	008019c4 	movi	r2,103
  804460:	30809526 	beq	r6,r2,8046b8 <___vfprintf_internal_r+0x1cd8>
  804464:	d8c14e17 	ldw	r3,1336(sp)
  804468:	008011c4 	movi	r2,71
  80446c:	18809226 	beq	r3,r2,8046b8 <___vfprintf_internal_r+0x1cd8>
  804470:	d9414217 	ldw	r5,1288(sp)
  804474:	d9814e17 	ldw	r6,1336(sp)
  804478:	00801984 	movi	r2,102
  80447c:	2d25883a 	add	r18,r5,r20
  804480:	30808626 	beq	r6,r2,80469c <___vfprintf_internal_r+0x1cbc>
  804484:	00801184 	movi	r2,70
  804488:	30808426 	beq	r6,r2,80469c <___vfprintf_internal_r+0x1cbc>
  80448c:	000d883a 	mov	r6,zero
  804490:	000f883a 	mov	r7,zero
  804494:	880b883a 	mov	r5,r17
  804498:	8009883a 	mov	r4,r16
  80449c:	0809b4c0 	call	809b4c <__eqdf2>
  8044a0:	1000751e 	bne	r2,zero,804678 <___vfprintf_internal_r+0x1c98>
  8044a4:	9005883a 	mov	r2,r18
  8044a8:	dc800815 	stw	r18,32(sp)
  8044ac:	d9014217 	ldw	r4,1288(sp)
  8044b0:	d9414e17 	ldw	r5,1336(sp)
  8044b4:	00c019c4 	movi	r3,103
  8044b8:	1125c83a 	sub	r18,r2,r4
  8044bc:	28c06826 	beq	r5,r3,804660 <___vfprintf_internal_r+0x1c80>
  8044c0:	008011c4 	movi	r2,71
  8044c4:	28806626 	beq	r5,r2,804660 <___vfprintf_internal_r+0x1c80>
  8044c8:	d9000617 	ldw	r4,24(sp)
  8044cc:	d8c14e17 	ldw	r3,1336(sp)
  8044d0:	00801944 	movi	r2,101
  8044d4:	10c05516 	blt	r2,r3,80462c <___vfprintf_internal_r+0x1c4c>
  8044d8:	213fffc4 	addi	r4,r4,-1
  8044dc:	d9000615 	stw	r4,24(sp)
  8044e0:	d8c00905 	stb	r3,36(sp)
  8044e4:	2021883a 	mov	r16,r4
  8044e8:	2000c116 	blt	r4,zero,8047f0 <___vfprintf_internal_r+0x1e10>
  8044ec:	00800ac4 	movi	r2,43
  8044f0:	d8800945 	stb	r2,37(sp)
  8044f4:	00800244 	movi	r2,9
  8044f8:	1400af0e 	bge	r2,r16,8047b8 <___vfprintf_internal_r+0x1dd8>
  8044fc:	1027883a 	mov	r19,r2
  804500:	dc400cc4 	addi	r17,sp,51
  804504:	8009883a 	mov	r4,r16
  804508:	01400284 	movi	r5,10
  80450c:	08009080 	call	800908 <__modsi3>
  804510:	10800c04 	addi	r2,r2,48
  804514:	8c7fffc4 	addi	r17,r17,-1
  804518:	8009883a 	mov	r4,r16
  80451c:	01400284 	movi	r5,10
  804520:	88800005 	stb	r2,0(r17)
  804524:	08008a80 	call	8008a8 <__divsi3>
  804528:	1021883a 	mov	r16,r2
  80452c:	98bff516 	blt	r19,r2,804504 <___vfprintf_internal_r+0x1b24>
  804530:	10c00c04 	addi	r3,r2,48
  804534:	d8800b04 	addi	r2,sp,44
  804538:	108001c4 	addi	r2,r2,7
  80453c:	897fffc4 	addi	r5,r17,-1
  804540:	88ffffc5 	stb	r3,-1(r17)
  804544:	2880a72e 	bgeu	r5,r2,8047e4 <___vfprintf_internal_r+0x1e04>
  804548:	1009883a 	mov	r4,r2
  80454c:	d9800904 	addi	r6,sp,36
  804550:	d8c00984 	addi	r3,sp,38
  804554:	28800003 	ldbu	r2,0(r5)
  804558:	29400044 	addi	r5,r5,1
  80455c:	18800005 	stb	r2,0(r3)
  804560:	18c00044 	addi	r3,r3,1
  804564:	293ffb36 	bltu	r5,r4,804554 <___vfprintf_internal_r+0x1b74>
  804568:	1987c83a 	sub	r3,r3,r6
  80456c:	00800044 	movi	r2,1
  804570:	d8c14915 	stw	r3,1316(sp)
  804574:	90cf883a 	add	r7,r18,r3
  804578:	1480960e 	bge	r2,r18,8047d4 <___vfprintf_internal_r+0x1df4>
  80457c:	39c00044 	addi	r7,r7,1
  804580:	d9c14615 	stw	r7,1304(sp)
  804584:	38003416 	blt	r7,zero,804658 <___vfprintf_internal_r+0x1c78>
  804588:	e0803fcc 	andi	r2,fp,255
  80458c:	1080201c 	xori	r2,r2,128
  804590:	10bfe004 	addi	r2,r2,-128
  804594:	10004e26 	beq	r2,zero,8046d0 <___vfprintf_internal_r+0x1cf0>
  804598:	00800b44 	movi	r2,45
  80459c:	dc814815 	stw	r18,1312(sp)
  8045a0:	d8014715 	stw	zero,1308(sp)
  8045a4:	d8800405 	stb	r2,16(sp)
  8045a8:	003bb106 	br	803470 <___vfprintf_internal_r+0xa90>
  8045ac:	00800b44 	movi	r2,45
  8045b0:	d8800405 	stb	r2,16(sp)
  8045b4:	003d3306 	br	803a84 <___vfprintf_internal_r+0x10a4>
  8045b8:	d9015017 	ldw	r4,1344(sp)
  8045bc:	b00b883a 	mov	r5,r22
  8045c0:	d9800d04 	addi	r6,sp,52
  8045c4:	08029880 	call	802988 <__sprint_r>
  8045c8:	103abd1e 	bne	r2,zero,8030c0 <___vfprintf_internal_r+0x6e0>
  8045cc:	003abb06 	br	8030bc <___vfprintf_internal_r+0x6dc>
  8045d0:	38800017 	ldw	r2,0(r7)
  8045d4:	39c00104 	addi	r7,r7,4
  8045d8:	d9c14115 	stw	r7,1284(sp)
  8045dc:	d9414c17 	ldw	r5,1328(sp)
  8045e0:	d9c14117 	ldw	r7,1284(sp)
  8045e4:	11400015 	stw	r5,0(r2)
  8045e8:	00395906 	br	802b50 <___vfprintf_internal_r+0x170>
  8045ec:	980f883a 	mov	r7,r19
  8045f0:	dcc14615 	stw	r19,1304(sp)
  8045f4:	d8014715 	stw	zero,1308(sp)
  8045f8:	003b9b06 	br	803468 <___vfprintf_internal_r+0xa88>
  8045fc:	0027883a 	mov	r19,zero
  804600:	00397806 	br	802be4 <___vfprintf_internal_r+0x204>
  804604:	00c02074 	movhi	r3,129
  804608:	18fb4904 	addi	r3,r3,-4828
  80460c:	100f883a 	mov	r7,r2
  804610:	d8814615 	stw	r2,1304(sp)
  804614:	d8c14215 	stw	r3,1288(sp)
  804618:	0039e006 	br	802d9c <___vfprintf_internal_r+0x3bc>
  80461c:	00802074 	movhi	r2,129
  804620:	10bb4804 	addi	r2,r2,-4832
  804624:	d8814215 	stw	r2,1288(sp)
  804628:	003d1c06 	br	803a9c <___vfprintf_internal_r+0x10bc>
  80462c:	d9414e17 	ldw	r5,1336(sp)
  804630:	00801984 	movi	r2,102
  804634:	28804926 	beq	r5,r2,80475c <___vfprintf_internal_r+0x1d7c>
  804638:	200f883a 	mov	r7,r4
  80463c:	24805716 	blt	r4,r18,80479c <___vfprintf_internal_r+0x1dbc>
  804640:	d9414d17 	ldw	r5,1332(sp)
  804644:	2880004c 	andi	r2,r5,1
  804648:	10000126 	beq	r2,zero,804650 <___vfprintf_internal_r+0x1c70>
  80464c:	21c00044 	addi	r7,r4,1
  804650:	d9c14615 	stw	r7,1304(sp)
  804654:	383fcc0e 	bge	r7,zero,804588 <___vfprintf_internal_r+0x1ba8>
  804658:	d8014615 	stw	zero,1304(sp)
  80465c:	003fca06 	br	804588 <___vfprintf_internal_r+0x1ba8>
  804660:	d9000617 	ldw	r4,24(sp)
  804664:	00bfff04 	movi	r2,-4
  804668:	1100480e 	bge	r2,r4,80478c <___vfprintf_internal_r+0x1dac>
  80466c:	99004716 	blt	r19,r4,80478c <___vfprintf_internal_r+0x1dac>
  804670:	d8c14e15 	stw	r3,1336(sp)
  804674:	003ff006 	br	804638 <___vfprintf_internal_r+0x1c58>
  804678:	d8800817 	ldw	r2,32(sp)
  80467c:	14bf8b2e 	bgeu	r2,r18,8044ac <___vfprintf_internal_r+0x1acc>
  804680:	9007883a 	mov	r3,r18
  804684:	01000c04 	movi	r4,48
  804688:	11000005 	stb	r4,0(r2)
  80468c:	10800044 	addi	r2,r2,1
  804690:	d8800815 	stw	r2,32(sp)
  804694:	18bffc1e 	bne	r3,r2,804688 <___vfprintf_internal_r+0x1ca8>
  804698:	003f8406 	br	8044ac <___vfprintf_internal_r+0x1acc>
  80469c:	d8814217 	ldw	r2,1288(sp)
  8046a0:	10c00007 	ldb	r3,0(r2)
  8046a4:	00800c04 	movi	r2,48
  8046a8:	18805b26 	beq	r3,r2,804818 <___vfprintf_internal_r+0x1e38>
  8046ac:	d9000617 	ldw	r4,24(sp)
  8046b0:	9125883a 	add	r18,r18,r4
  8046b4:	003f7506 	br	80448c <___vfprintf_internal_r+0x1aac>
  8046b8:	d9014d17 	ldw	r4,1332(sp)
  8046bc:	2080004c 	andi	r2,r4,1
  8046c0:	1005003a 	cmpeq	r2,r2,zero
  8046c4:	103f6a26 	beq	r2,zero,804470 <___vfprintf_internal_r+0x1a90>
  8046c8:	d8800817 	ldw	r2,32(sp)
  8046cc:	003f7706 	br	8044ac <___vfprintf_internal_r+0x1acc>
  8046d0:	d9c14615 	stw	r7,1304(sp)
  8046d4:	38004d16 	blt	r7,zero,80480c <___vfprintf_internal_r+0x1e2c>
  8046d8:	dc814815 	stw	r18,1312(sp)
  8046dc:	d8014715 	stw	zero,1308(sp)
  8046e0:	003b6106 	br	803468 <___vfprintf_internal_r+0xa88>
  8046e4:	d9015017 	ldw	r4,1344(sp)
  8046e8:	d8800604 	addi	r2,sp,24
  8046ec:	d8800115 	stw	r2,4(sp)
  8046f0:	d8c00704 	addi	r3,sp,28
  8046f4:	d8800804 	addi	r2,sp,32
  8046f8:	800b883a 	mov	r5,r16
  8046fc:	880d883a 	mov	r6,r17
  804700:	01c000c4 	movi	r7,3
  804704:	d8c00215 	stw	r3,8(sp)
  804708:	d8800315 	stw	r2,12(sp)
  80470c:	dcc00015 	stw	r19,0(sp)
  804710:	9829883a 	mov	r20,r19
  804714:	0804cec0 	call	804cec <_dtoa_r>
  804718:	d8814215 	stw	r2,1288(sp)
  80471c:	003f5106 	br	804464 <___vfprintf_internal_r+0x1a84>
  804720:	d8c14317 	ldw	r3,1292(sp)
  804724:	d9014417 	ldw	r4,1296(sp)
  804728:	07000b44 	movi	fp,45
  80472c:	1821883a 	mov	r16,r3
  804730:	2460003c 	xorhi	r17,r4,32768
  804734:	003f3106 	br	8043fc <___vfprintf_internal_r+0x1a1c>
  804738:	9d000044 	addi	r20,r19,1
  80473c:	003f3906 	br	804424 <___vfprintf_internal_r+0x1a44>
  804740:	983f251e 	bne	r19,zero,8043d8 <___vfprintf_internal_r+0x19f8>
  804744:	04c00044 	movi	r19,1
  804748:	003f2306 	br	8043d8 <___vfprintf_internal_r+0x19f8>
  80474c:	04c00184 	movi	r19,6
  804750:	003f2106 	br	8043d8 <___vfprintf_internal_r+0x19f8>
  804754:	d8014615 	stw	zero,1304(sp)
  804758:	003eee06 	br	804314 <___vfprintf_internal_r+0x1934>
  80475c:	200f883a 	mov	r7,r4
  804760:	0100370e 	bge	zero,r4,804840 <___vfprintf_internal_r+0x1e60>
  804764:	9800031e 	bne	r19,zero,804774 <___vfprintf_internal_r+0x1d94>
  804768:	d9814d17 	ldw	r6,1332(sp)
  80476c:	3080004c 	andi	r2,r6,1
  804770:	103fb726 	beq	r2,zero,804650 <___vfprintf_internal_r+0x1c70>
  804774:	20800044 	addi	r2,r4,1
  804778:	98a7883a 	add	r19,r19,r2
  80477c:	dcc14615 	stw	r19,1304(sp)
  804780:	980f883a 	mov	r7,r19
  804784:	983f800e 	bge	r19,zero,804588 <___vfprintf_internal_r+0x1ba8>
  804788:	003fb306 	br	804658 <___vfprintf_internal_r+0x1c78>
  80478c:	d9814e17 	ldw	r6,1336(sp)
  804790:	31bfff84 	addi	r6,r6,-2
  804794:	d9814e15 	stw	r6,1336(sp)
  804798:	003f4c06 	br	8044cc <___vfprintf_internal_r+0x1aec>
  80479c:	0100180e 	bge	zero,r4,804800 <___vfprintf_internal_r+0x1e20>
  8047a0:	00800044 	movi	r2,1
  8047a4:	1485883a 	add	r2,r2,r18
  8047a8:	d8814615 	stw	r2,1304(sp)
  8047ac:	100f883a 	mov	r7,r2
  8047b0:	103f750e 	bge	r2,zero,804588 <___vfprintf_internal_r+0x1ba8>
  8047b4:	003fa806 	br	804658 <___vfprintf_internal_r+0x1c78>
  8047b8:	80c00c04 	addi	r3,r16,48
  8047bc:	00800c04 	movi	r2,48
  8047c0:	d8c009c5 	stb	r3,39(sp)
  8047c4:	d9800904 	addi	r6,sp,36
  8047c8:	d8c00a04 	addi	r3,sp,40
  8047cc:	d8800985 	stb	r2,38(sp)
  8047d0:	003f6506 	br	804568 <___vfprintf_internal_r+0x1b88>
  8047d4:	d9014d17 	ldw	r4,1332(sp)
  8047d8:	2084703a 	and	r2,r4,r2
  8047dc:	103f9c26 	beq	r2,zero,804650 <___vfprintf_internal_r+0x1c70>
  8047e0:	003f6606 	br	80457c <___vfprintf_internal_r+0x1b9c>
  8047e4:	d9800904 	addi	r6,sp,36
  8047e8:	d8c00984 	addi	r3,sp,38
  8047ec:	003f5e06 	br	804568 <___vfprintf_internal_r+0x1b88>
  8047f0:	00800b44 	movi	r2,45
  8047f4:	0121c83a 	sub	r16,zero,r4
  8047f8:	d8800945 	stb	r2,37(sp)
  8047fc:	003f3d06 	br	8044f4 <___vfprintf_internal_r+0x1b14>
  804800:	00800084 	movi	r2,2
  804804:	1105c83a 	sub	r2,r2,r4
  804808:	003fe606 	br	8047a4 <___vfprintf_internal_r+0x1dc4>
  80480c:	d8014615 	stw	zero,1304(sp)
  804810:	dc814815 	stw	r18,1312(sp)
  804814:	003fb106 	br	8046dc <___vfprintf_internal_r+0x1cfc>
  804818:	000d883a 	mov	r6,zero
  80481c:	000f883a 	mov	r7,zero
  804820:	8009883a 	mov	r4,r16
  804824:	880b883a 	mov	r5,r17
  804828:	0809bd40 	call	809bd4 <__nedf2>
  80482c:	103f9f26 	beq	r2,zero,8046ac <___vfprintf_internal_r+0x1ccc>
  804830:	00800044 	movi	r2,1
  804834:	1509c83a 	sub	r4,r2,r20
  804838:	d9000615 	stw	r4,24(sp)
  80483c:	003f9b06 	br	8046ac <___vfprintf_internal_r+0x1ccc>
  804840:	98000d1e 	bne	r19,zero,804878 <___vfprintf_internal_r+0x1e98>
  804844:	d8c14d17 	ldw	r3,1332(sp)
  804848:	1880004c 	andi	r2,r3,1
  80484c:	10000a1e 	bne	r2,zero,804878 <___vfprintf_internal_r+0x1e98>
  804850:	01000044 	movi	r4,1
  804854:	200f883a 	mov	r7,r4
  804858:	d9014615 	stw	r4,1304(sp)
  80485c:	003f4a06 	br	804588 <___vfprintf_internal_r+0x1ba8>
  804860:	3cc00017 	ldw	r19,0(r7)
  804864:	39c00104 	addi	r7,r7,4
  804868:	983d0e0e 	bge	r19,zero,803ca4 <___vfprintf_internal_r+0x12c4>
  80486c:	b8c00007 	ldb	r3,0(r23)
  804870:	04ffffc4 	movi	r19,-1
  804874:	0038d906 	br	802bdc <___vfprintf_internal_r+0x1fc>
  804878:	9cc00084 	addi	r19,r19,2
  80487c:	dcc14615 	stw	r19,1304(sp)
  804880:	980f883a 	mov	r7,r19
  804884:	983f400e 	bge	r19,zero,804588 <___vfprintf_internal_r+0x1ba8>
  804888:	003f7306 	br	804658 <___vfprintf_internal_r+0x1c78>

0080488c <__vfprintf_internal>:
  80488c:	00802074 	movhi	r2,129
  804890:	1083c704 	addi	r2,r2,3868
  804894:	2013883a 	mov	r9,r4
  804898:	11000017 	ldw	r4,0(r2)
  80489c:	2805883a 	mov	r2,r5
  8048a0:	300f883a 	mov	r7,r6
  8048a4:	480b883a 	mov	r5,r9
  8048a8:	100d883a 	mov	r6,r2
  8048ac:	08029e01 	jmpi	8029e0 <___vfprintf_internal_r>

008048b0 <_write_r>:
  8048b0:	defffd04 	addi	sp,sp,-12
  8048b4:	dc000015 	stw	r16,0(sp)
  8048b8:	04002074 	movhi	r16,129
  8048bc:	840b0804 	addi	r16,r16,11296
  8048c0:	dc400115 	stw	r17,4(sp)
  8048c4:	80000015 	stw	zero,0(r16)
  8048c8:	2023883a 	mov	r17,r4
  8048cc:	2809883a 	mov	r4,r5
  8048d0:	300b883a 	mov	r5,r6
  8048d4:	380d883a 	mov	r6,r7
  8048d8:	dfc00215 	stw	ra,8(sp)
  8048dc:	080b6a00 	call	80b6a0 <write>
  8048e0:	1007883a 	mov	r3,r2
  8048e4:	00bfffc4 	movi	r2,-1
  8048e8:	18800626 	beq	r3,r2,804904 <_write_r+0x54>
  8048ec:	1805883a 	mov	r2,r3
  8048f0:	dfc00217 	ldw	ra,8(sp)
  8048f4:	dc400117 	ldw	r17,4(sp)
  8048f8:	dc000017 	ldw	r16,0(sp)
  8048fc:	dec00304 	addi	sp,sp,12
  804900:	f800283a 	ret
  804904:	80800017 	ldw	r2,0(r16)
  804908:	103ff826 	beq	r2,zero,8048ec <_write_r+0x3c>
  80490c:	88800015 	stw	r2,0(r17)
  804910:	1805883a 	mov	r2,r3
  804914:	dfc00217 	ldw	ra,8(sp)
  804918:	dc400117 	ldw	r17,4(sp)
  80491c:	dc000017 	ldw	r16,0(sp)
  804920:	dec00304 	addi	sp,sp,12
  804924:	f800283a 	ret

00804928 <__swsetup_r>:
  804928:	00802074 	movhi	r2,129
  80492c:	1083c704 	addi	r2,r2,3868
  804930:	10c00017 	ldw	r3,0(r2)
  804934:	defffd04 	addi	sp,sp,-12
  804938:	dc400115 	stw	r17,4(sp)
  80493c:	dc000015 	stw	r16,0(sp)
  804940:	dfc00215 	stw	ra,8(sp)
  804944:	2023883a 	mov	r17,r4
  804948:	2821883a 	mov	r16,r5
  80494c:	18000226 	beq	r3,zero,804958 <__swsetup_r+0x30>
  804950:	18800e17 	ldw	r2,56(r3)
  804954:	10001f26 	beq	r2,zero,8049d4 <__swsetup_r+0xac>
  804958:	8100030b 	ldhu	r4,12(r16)
  80495c:	2080020c 	andi	r2,r4,8
  804960:	10002826 	beq	r2,zero,804a04 <__swsetup_r+0xdc>
  804964:	81400417 	ldw	r5,16(r16)
  804968:	28001d26 	beq	r5,zero,8049e0 <__swsetup_r+0xb8>
  80496c:	2080004c 	andi	r2,r4,1
  804970:	1005003a 	cmpeq	r2,r2,zero
  804974:	10000b26 	beq	r2,zero,8049a4 <__swsetup_r+0x7c>
  804978:	2080008c 	andi	r2,r4,2
  80497c:	10001226 	beq	r2,zero,8049c8 <__swsetup_r+0xa0>
  804980:	0005883a 	mov	r2,zero
  804984:	80800215 	stw	r2,8(r16)
  804988:	28000b26 	beq	r5,zero,8049b8 <__swsetup_r+0x90>
  80498c:	0005883a 	mov	r2,zero
  804990:	dfc00217 	ldw	ra,8(sp)
  804994:	dc400117 	ldw	r17,4(sp)
  804998:	dc000017 	ldw	r16,0(sp)
  80499c:	dec00304 	addi	sp,sp,12
  8049a0:	f800283a 	ret
  8049a4:	80800517 	ldw	r2,20(r16)
  8049a8:	80000215 	stw	zero,8(r16)
  8049ac:	0085c83a 	sub	r2,zero,r2
  8049b0:	80800615 	stw	r2,24(r16)
  8049b4:	283ff51e 	bne	r5,zero,80498c <__swsetup_r+0x64>
  8049b8:	2080200c 	andi	r2,r4,128
  8049bc:	103ff326 	beq	r2,zero,80498c <__swsetup_r+0x64>
  8049c0:	00bfffc4 	movi	r2,-1
  8049c4:	003ff206 	br	804990 <__swsetup_r+0x68>
  8049c8:	80800517 	ldw	r2,20(r16)
  8049cc:	80800215 	stw	r2,8(r16)
  8049d0:	003fed06 	br	804988 <__swsetup_r+0x60>
  8049d4:	1809883a 	mov	r4,r3
  8049d8:	0800d340 	call	800d34 <__sinit>
  8049dc:	003fde06 	br	804958 <__swsetup_r+0x30>
  8049e0:	20c0a00c 	andi	r3,r4,640
  8049e4:	00808004 	movi	r2,512
  8049e8:	18bfe026 	beq	r3,r2,80496c <__swsetup_r+0x44>
  8049ec:	8809883a 	mov	r4,r17
  8049f0:	800b883a 	mov	r5,r16
  8049f4:	0801b900 	call	801b90 <__smakebuf_r>
  8049f8:	8100030b 	ldhu	r4,12(r16)
  8049fc:	81400417 	ldw	r5,16(r16)
  804a00:	003fda06 	br	80496c <__swsetup_r+0x44>
  804a04:	2080040c 	andi	r2,r4,16
  804a08:	103fed26 	beq	r2,zero,8049c0 <__swsetup_r+0x98>
  804a0c:	2080010c 	andi	r2,r4,4
  804a10:	10001226 	beq	r2,zero,804a5c <__swsetup_r+0x134>
  804a14:	81400c17 	ldw	r5,48(r16)
  804a18:	28000526 	beq	r5,zero,804a30 <__swsetup_r+0x108>
  804a1c:	80801004 	addi	r2,r16,64
  804a20:	28800226 	beq	r5,r2,804a2c <__swsetup_r+0x104>
  804a24:	8809883a 	mov	r4,r17
  804a28:	08012280 	call	801228 <_free_r>
  804a2c:	80000c15 	stw	zero,48(r16)
  804a30:	8080030b 	ldhu	r2,12(r16)
  804a34:	81400417 	ldw	r5,16(r16)
  804a38:	80000115 	stw	zero,4(r16)
  804a3c:	10bff6cc 	andi	r2,r2,65499
  804a40:	8080030d 	sth	r2,12(r16)
  804a44:	81400015 	stw	r5,0(r16)
  804a48:	8080030b 	ldhu	r2,12(r16)
  804a4c:	10800214 	ori	r2,r2,8
  804a50:	113fffcc 	andi	r4,r2,65535
  804a54:	8080030d 	sth	r2,12(r16)
  804a58:	003fc306 	br	804968 <__swsetup_r+0x40>
  804a5c:	81400417 	ldw	r5,16(r16)
  804a60:	003ff906 	br	804a48 <__swsetup_r+0x120>

00804a64 <_close_r>:
  804a64:	defffd04 	addi	sp,sp,-12
  804a68:	dc000015 	stw	r16,0(sp)
  804a6c:	04002074 	movhi	r16,129
  804a70:	840b0804 	addi	r16,r16,11296
  804a74:	dc400115 	stw	r17,4(sp)
  804a78:	80000015 	stw	zero,0(r16)
  804a7c:	2023883a 	mov	r17,r4
  804a80:	2809883a 	mov	r4,r5
  804a84:	dfc00215 	stw	ra,8(sp)
  804a88:	080a8d80 	call	80a8d8 <close>
  804a8c:	1007883a 	mov	r3,r2
  804a90:	00bfffc4 	movi	r2,-1
  804a94:	18800626 	beq	r3,r2,804ab0 <_close_r+0x4c>
  804a98:	1805883a 	mov	r2,r3
  804a9c:	dfc00217 	ldw	ra,8(sp)
  804aa0:	dc400117 	ldw	r17,4(sp)
  804aa4:	dc000017 	ldw	r16,0(sp)
  804aa8:	dec00304 	addi	sp,sp,12
  804aac:	f800283a 	ret
  804ab0:	80800017 	ldw	r2,0(r16)
  804ab4:	103ff826 	beq	r2,zero,804a98 <_close_r+0x34>
  804ab8:	88800015 	stw	r2,0(r17)
  804abc:	1805883a 	mov	r2,r3
  804ac0:	dfc00217 	ldw	ra,8(sp)
  804ac4:	dc400117 	ldw	r17,4(sp)
  804ac8:	dc000017 	ldw	r16,0(sp)
  804acc:	dec00304 	addi	sp,sp,12
  804ad0:	f800283a 	ret

00804ad4 <quorem>:
  804ad4:	28c00417 	ldw	r3,16(r5)
  804ad8:	20800417 	ldw	r2,16(r4)
  804adc:	defff604 	addi	sp,sp,-40
  804ae0:	ddc00715 	stw	r23,28(sp)
  804ae4:	dd400515 	stw	r21,20(sp)
  804ae8:	dfc00915 	stw	ra,36(sp)
  804aec:	df000815 	stw	fp,32(sp)
  804af0:	dd800615 	stw	r22,24(sp)
  804af4:	dd000415 	stw	r20,16(sp)
  804af8:	dcc00315 	stw	r19,12(sp)
  804afc:	dc800215 	stw	r18,8(sp)
  804b00:	dc400115 	stw	r17,4(sp)
  804b04:	dc000015 	stw	r16,0(sp)
  804b08:	202f883a 	mov	r23,r4
  804b0c:	282b883a 	mov	r21,r5
  804b10:	10c07416 	blt	r2,r3,804ce4 <quorem+0x210>
  804b14:	1c7fffc4 	addi	r17,r3,-1
  804b18:	8c45883a 	add	r2,r17,r17
  804b1c:	1085883a 	add	r2,r2,r2
  804b20:	2c000504 	addi	r16,r5,20
  804b24:	24c00504 	addi	r19,r4,20
  804b28:	14ed883a 	add	r22,r2,r19
  804b2c:	80a5883a 	add	r18,r16,r2
  804b30:	b7000017 	ldw	fp,0(r22)
  804b34:	91400017 	ldw	r5,0(r18)
  804b38:	e009883a 	mov	r4,fp
  804b3c:	29400044 	addi	r5,r5,1
  804b40:	08009680 	call	800968 <__udivsi3>
  804b44:	1029883a 	mov	r20,r2
  804b48:	10003c1e 	bne	r2,zero,804c3c <quorem+0x168>
  804b4c:	a80b883a 	mov	r5,r21
  804b50:	b809883a 	mov	r4,r23
  804b54:	0806d480 	call	806d48 <__mcmp>
  804b58:	10002b16 	blt	r2,zero,804c08 <quorem+0x134>
  804b5c:	a5000044 	addi	r20,r20,1
  804b60:	980f883a 	mov	r7,r19
  804b64:	0011883a 	mov	r8,zero
  804b68:	0009883a 	mov	r4,zero
  804b6c:	81400017 	ldw	r5,0(r16)
  804b70:	38c00017 	ldw	r3,0(r7)
  804b74:	84000104 	addi	r16,r16,4
  804b78:	28bfffcc 	andi	r2,r5,65535
  804b7c:	2085883a 	add	r2,r4,r2
  804b80:	11bfffcc 	andi	r6,r2,65535
  804b84:	193fffcc 	andi	r4,r3,65535
  804b88:	1004d43a 	srli	r2,r2,16
  804b8c:	280ad43a 	srli	r5,r5,16
  804b90:	2189c83a 	sub	r4,r4,r6
  804b94:	2209883a 	add	r4,r4,r8
  804b98:	1806d43a 	srli	r3,r3,16
  804b9c:	288b883a 	add	r5,r5,r2
  804ba0:	200dd43a 	srai	r6,r4,16
  804ba4:	28bfffcc 	andi	r2,r5,65535
  804ba8:	1887c83a 	sub	r3,r3,r2
  804bac:	1987883a 	add	r3,r3,r6
  804bb0:	3900000d 	sth	r4,0(r7)
  804bb4:	38c0008d 	sth	r3,2(r7)
  804bb8:	2808d43a 	srli	r4,r5,16
  804bbc:	39c00104 	addi	r7,r7,4
  804bc0:	1811d43a 	srai	r8,r3,16
  804bc4:	943fe92e 	bgeu	r18,r16,804b6c <quorem+0x98>
  804bc8:	8c45883a 	add	r2,r17,r17
  804bcc:	1085883a 	add	r2,r2,r2
  804bd0:	9885883a 	add	r2,r19,r2
  804bd4:	10c00017 	ldw	r3,0(r2)
  804bd8:	18000b1e 	bne	r3,zero,804c08 <quorem+0x134>
  804bdc:	113fff04 	addi	r4,r2,-4
  804be0:	9900082e 	bgeu	r19,r4,804c04 <quorem+0x130>
  804be4:	10bfff17 	ldw	r2,-4(r2)
  804be8:	10000326 	beq	r2,zero,804bf8 <quorem+0x124>
  804bec:	00000506 	br	804c04 <quorem+0x130>
  804bf0:	20800017 	ldw	r2,0(r4)
  804bf4:	1000031e 	bne	r2,zero,804c04 <quorem+0x130>
  804bf8:	213fff04 	addi	r4,r4,-4
  804bfc:	8c7fffc4 	addi	r17,r17,-1
  804c00:	993ffb36 	bltu	r19,r4,804bf0 <quorem+0x11c>
  804c04:	bc400415 	stw	r17,16(r23)
  804c08:	a005883a 	mov	r2,r20
  804c0c:	dfc00917 	ldw	ra,36(sp)
  804c10:	df000817 	ldw	fp,32(sp)
  804c14:	ddc00717 	ldw	r23,28(sp)
  804c18:	dd800617 	ldw	r22,24(sp)
  804c1c:	dd400517 	ldw	r21,20(sp)
  804c20:	dd000417 	ldw	r20,16(sp)
  804c24:	dcc00317 	ldw	r19,12(sp)
  804c28:	dc800217 	ldw	r18,8(sp)
  804c2c:	dc400117 	ldw	r17,4(sp)
  804c30:	dc000017 	ldw	r16,0(sp)
  804c34:	dec00a04 	addi	sp,sp,40
  804c38:	f800283a 	ret
  804c3c:	980f883a 	mov	r7,r19
  804c40:	8011883a 	mov	r8,r16
  804c44:	0013883a 	mov	r9,zero
  804c48:	000d883a 	mov	r6,zero
  804c4c:	40c00017 	ldw	r3,0(r8)
  804c50:	39000017 	ldw	r4,0(r7)
  804c54:	42000104 	addi	r8,r8,4
  804c58:	18bfffcc 	andi	r2,r3,65535
  804c5c:	a085383a 	mul	r2,r20,r2
  804c60:	1806d43a 	srli	r3,r3,16
  804c64:	217fffcc 	andi	r5,r4,65535
  804c68:	3085883a 	add	r2,r6,r2
  804c6c:	11bfffcc 	andi	r6,r2,65535
  804c70:	a0c7383a 	mul	r3,r20,r3
  804c74:	1004d43a 	srli	r2,r2,16
  804c78:	298bc83a 	sub	r5,r5,r6
  804c7c:	2a4b883a 	add	r5,r5,r9
  804c80:	2008d43a 	srli	r4,r4,16
  804c84:	1887883a 	add	r3,r3,r2
  804c88:	280dd43a 	srai	r6,r5,16
  804c8c:	18bfffcc 	andi	r2,r3,65535
  804c90:	2089c83a 	sub	r4,r4,r2
  804c94:	2189883a 	add	r4,r4,r6
  804c98:	3900008d 	sth	r4,2(r7)
  804c9c:	3940000d 	sth	r5,0(r7)
  804ca0:	180cd43a 	srli	r6,r3,16
  804ca4:	39c00104 	addi	r7,r7,4
  804ca8:	2013d43a 	srai	r9,r4,16
  804cac:	923fe72e 	bgeu	r18,r8,804c4c <quorem+0x178>
  804cb0:	e03fa61e 	bne	fp,zero,804b4c <quorem+0x78>
  804cb4:	b0ffff04 	addi	r3,r22,-4
  804cb8:	98c0082e 	bgeu	r19,r3,804cdc <quorem+0x208>
  804cbc:	b0bfff17 	ldw	r2,-4(r22)
  804cc0:	10000326 	beq	r2,zero,804cd0 <quorem+0x1fc>
  804cc4:	00000506 	br	804cdc <quorem+0x208>
  804cc8:	18800017 	ldw	r2,0(r3)
  804ccc:	1000031e 	bne	r2,zero,804cdc <quorem+0x208>
  804cd0:	18ffff04 	addi	r3,r3,-4
  804cd4:	8c7fffc4 	addi	r17,r17,-1
  804cd8:	98fffb36 	bltu	r19,r3,804cc8 <quorem+0x1f4>
  804cdc:	bc400415 	stw	r17,16(r23)
  804ce0:	003f9a06 	br	804b4c <quorem+0x78>
  804ce4:	0005883a 	mov	r2,zero
  804ce8:	003fc806 	br	804c0c <quorem+0x138>

00804cec <_dtoa_r>:
  804cec:	22001017 	ldw	r8,64(r4)
  804cf0:	deffda04 	addi	sp,sp,-152
  804cf4:	dd402115 	stw	r21,132(sp)
  804cf8:	dd002015 	stw	r20,128(sp)
  804cfc:	dc801e15 	stw	r18,120(sp)
  804d00:	dc401d15 	stw	r17,116(sp)
  804d04:	dfc02515 	stw	ra,148(sp)
  804d08:	df002415 	stw	fp,144(sp)
  804d0c:	ddc02315 	stw	r23,140(sp)
  804d10:	dd802215 	stw	r22,136(sp)
  804d14:	dcc01f15 	stw	r19,124(sp)
  804d18:	dc001c15 	stw	r16,112(sp)
  804d1c:	d9001615 	stw	r4,88(sp)
  804d20:	3023883a 	mov	r17,r6
  804d24:	2829883a 	mov	r20,r5
  804d28:	d9c01715 	stw	r7,92(sp)
  804d2c:	dc802817 	ldw	r18,160(sp)
  804d30:	302b883a 	mov	r21,r6
  804d34:	40000a26 	beq	r8,zero,804d60 <_dtoa_r+0x74>
  804d38:	20801117 	ldw	r2,68(r4)
  804d3c:	400b883a 	mov	r5,r8
  804d40:	40800115 	stw	r2,4(r8)
  804d44:	20c01117 	ldw	r3,68(r4)
  804d48:	00800044 	movi	r2,1
  804d4c:	10c4983a 	sll	r2,r2,r3
  804d50:	40800215 	stw	r2,8(r8)
  804d54:	0806bec0 	call	806bec <_Bfree>
  804d58:	d8c01617 	ldw	r3,88(sp)
  804d5c:	18001015 	stw	zero,64(r3)
  804d60:	8800a316 	blt	r17,zero,804ff0 <_dtoa_r+0x304>
  804d64:	90000015 	stw	zero,0(r18)
  804d68:	a8dffc2c 	andhi	r3,r21,32752
  804d6c:	009ffc34 	movhi	r2,32752
  804d70:	18809126 	beq	r3,r2,804fb8 <_dtoa_r+0x2cc>
  804d74:	000d883a 	mov	r6,zero
  804d78:	000f883a 	mov	r7,zero
  804d7c:	a009883a 	mov	r4,r20
  804d80:	a80b883a 	mov	r5,r21
  804d84:	dd001215 	stw	r20,72(sp)
  804d88:	dd401315 	stw	r21,76(sp)
  804d8c:	0809bd40 	call	809bd4 <__nedf2>
  804d90:	1000171e 	bne	r2,zero,804df0 <_dtoa_r+0x104>
  804d94:	d9802717 	ldw	r6,156(sp)
  804d98:	00800044 	movi	r2,1
  804d9c:	30800015 	stw	r2,0(r6)
  804da0:	d8802917 	ldw	r2,164(sp)
  804da4:	10029b26 	beq	r2,zero,805814 <_dtoa_r+0xb28>
  804da8:	d9002917 	ldw	r4,164(sp)
  804dac:	00802074 	movhi	r2,129
  804db0:	10bb5744 	addi	r2,r2,-4771
  804db4:	10ffffc4 	addi	r3,r2,-1
  804db8:	20800015 	stw	r2,0(r4)
  804dbc:	1805883a 	mov	r2,r3
  804dc0:	dfc02517 	ldw	ra,148(sp)
  804dc4:	df002417 	ldw	fp,144(sp)
  804dc8:	ddc02317 	ldw	r23,140(sp)
  804dcc:	dd802217 	ldw	r22,136(sp)
  804dd0:	dd402117 	ldw	r21,132(sp)
  804dd4:	dd002017 	ldw	r20,128(sp)
  804dd8:	dcc01f17 	ldw	r19,124(sp)
  804ddc:	dc801e17 	ldw	r18,120(sp)
  804de0:	dc401d17 	ldw	r17,116(sp)
  804de4:	dc001c17 	ldw	r16,112(sp)
  804de8:	dec02604 	addi	sp,sp,152
  804dec:	f800283a 	ret
  804df0:	d9001617 	ldw	r4,88(sp)
  804df4:	d9401217 	ldw	r5,72(sp)
  804df8:	d8800104 	addi	r2,sp,4
  804dfc:	a80d883a 	mov	r6,r21
  804e00:	d9c00204 	addi	r7,sp,8
  804e04:	d8800015 	stw	r2,0(sp)
  804e08:	08072280 	call	807228 <__d2b>
  804e0c:	d8800715 	stw	r2,28(sp)
  804e10:	a804d53a 	srli	r2,r21,20
  804e14:	1101ffcc 	andi	r4,r2,2047
  804e18:	20008626 	beq	r4,zero,805034 <_dtoa_r+0x348>
  804e1c:	d8c01217 	ldw	r3,72(sp)
  804e20:	00800434 	movhi	r2,16
  804e24:	10bfffc4 	addi	r2,r2,-1
  804e28:	ddc00117 	ldw	r23,4(sp)
  804e2c:	a884703a 	and	r2,r21,r2
  804e30:	1811883a 	mov	r8,r3
  804e34:	124ffc34 	orhi	r9,r2,16368
  804e38:	25bf0044 	addi	r22,r4,-1023
  804e3c:	d8000815 	stw	zero,32(sp)
  804e40:	0005883a 	mov	r2,zero
  804e44:	00cffe34 	movhi	r3,16376
  804e48:	480b883a 	mov	r5,r9
  804e4c:	4009883a 	mov	r4,r8
  804e50:	180f883a 	mov	r7,r3
  804e54:	100d883a 	mov	r6,r2
  804e58:	080943c0 	call	80943c <__subdf3>
  804e5c:	0218dbf4 	movhi	r8,25455
  804e60:	4210d844 	addi	r8,r8,17249
  804e64:	024ff4f4 	movhi	r9,16339
  804e68:	4a61e9c4 	addi	r9,r9,-30809
  804e6c:	480f883a 	mov	r7,r9
  804e70:	400d883a 	mov	r6,r8
  804e74:	180b883a 	mov	r5,r3
  804e78:	1009883a 	mov	r4,r2
  804e7c:	08095300 	call	809530 <__muldf3>
  804e80:	0222d874 	movhi	r8,35681
  804e84:	42322cc4 	addi	r8,r8,-14157
  804e88:	024ff1f4 	movhi	r9,16327
  804e8c:	4a628a04 	addi	r9,r9,-30168
  804e90:	480f883a 	mov	r7,r9
  804e94:	400d883a 	mov	r6,r8
  804e98:	180b883a 	mov	r5,r3
  804e9c:	1009883a 	mov	r4,r2
  804ea0:	08094bc0 	call	8094bc <__adddf3>
  804ea4:	b009883a 	mov	r4,r22
  804ea8:	1021883a 	mov	r16,r2
  804eac:	1823883a 	mov	r17,r3
  804eb0:	0809df40 	call	809df4 <__floatsidf>
  804eb4:	021427f4 	movhi	r8,20639
  804eb8:	421e7ec4 	addi	r8,r8,31227
  804ebc:	024ff4f4 	movhi	r9,16339
  804ec0:	4a5104c4 	addi	r9,r9,17427
  804ec4:	480f883a 	mov	r7,r9
  804ec8:	400d883a 	mov	r6,r8
  804ecc:	180b883a 	mov	r5,r3
  804ed0:	1009883a 	mov	r4,r2
  804ed4:	08095300 	call	809530 <__muldf3>
  804ed8:	180f883a 	mov	r7,r3
  804edc:	880b883a 	mov	r5,r17
  804ee0:	100d883a 	mov	r6,r2
  804ee4:	8009883a 	mov	r4,r16
  804ee8:	08094bc0 	call	8094bc <__adddf3>
  804eec:	1009883a 	mov	r4,r2
  804ef0:	180b883a 	mov	r5,r3
  804ef4:	1021883a 	mov	r16,r2
  804ef8:	1823883a 	mov	r17,r3
  804efc:	0809eec0 	call	809eec <__fixdfsi>
  804f00:	000d883a 	mov	r6,zero
  804f04:	000f883a 	mov	r7,zero
  804f08:	8009883a 	mov	r4,r16
  804f0c:	880b883a 	mov	r5,r17
  804f10:	d8800d15 	stw	r2,52(sp)
  804f14:	0809d6c0 	call	809d6c <__ltdf2>
  804f18:	10031716 	blt	r2,zero,805b78 <_dtoa_r+0xe8c>
  804f1c:	d8c00d17 	ldw	r3,52(sp)
  804f20:	00800584 	movi	r2,22
  804f24:	10c1482e 	bgeu	r2,r3,805448 <_dtoa_r+0x75c>
  804f28:	01000044 	movi	r4,1
  804f2c:	d9000c15 	stw	r4,48(sp)
  804f30:	bd85c83a 	sub	r2,r23,r22
  804f34:	11bfffc4 	addi	r6,r2,-1
  804f38:	30030b16 	blt	r6,zero,805b68 <_dtoa_r+0xe7c>
  804f3c:	d9800a15 	stw	r6,40(sp)
  804f40:	d8001115 	stw	zero,68(sp)
  804f44:	d8c00d17 	ldw	r3,52(sp)
  804f48:	1802ff16 	blt	r3,zero,805b48 <_dtoa_r+0xe5c>
  804f4c:	d9000a17 	ldw	r4,40(sp)
  804f50:	d8c00915 	stw	r3,36(sp)
  804f54:	d8001015 	stw	zero,64(sp)
  804f58:	20c9883a 	add	r4,r4,r3
  804f5c:	d9000a15 	stw	r4,40(sp)
  804f60:	d9001717 	ldw	r4,92(sp)
  804f64:	00800244 	movi	r2,9
  804f68:	11004636 	bltu	r2,r4,805084 <_dtoa_r+0x398>
  804f6c:	00800144 	movi	r2,5
  804f70:	11020416 	blt	r2,r4,805784 <_dtoa_r+0xa98>
  804f74:	04400044 	movi	r17,1
  804f78:	d8c01717 	ldw	r3,92(sp)
  804f7c:	00800144 	movi	r2,5
  804f80:	10c1ed36 	bltu	r2,r3,805738 <_dtoa_r+0xa4c>
  804f84:	18c5883a 	add	r2,r3,r3
  804f88:	1085883a 	add	r2,r2,r2
  804f8c:	00c02034 	movhi	r3,128
  804f90:	18d3e804 	addi	r3,r3,20384
  804f94:	10c5883a 	add	r2,r2,r3
  804f98:	11000017 	ldw	r4,0(r2)
  804f9c:	2000683a 	jmp	r4
  804fa0:	0080508c 	andi	r2,zero,322
  804fa4:	0080508c 	andi	r2,zero,322
  804fa8:	00805a8c 	andi	r2,zero,362
  804fac:	00805a64 	muli	r2,zero,361
  804fb0:	00805aa8 	cmpgeui	r2,zero,362
  804fb4:	00805ab4 	movhi	r2,362
  804fb8:	d9002717 	ldw	r4,156(sp)
  804fbc:	0089c3c4 	movi	r2,9999
  804fc0:	20800015 	stw	r2,0(r4)
  804fc4:	a0001026 	beq	r20,zero,805008 <_dtoa_r+0x31c>
  804fc8:	00c02074 	movhi	r3,129
  804fcc:	18fb6304 	addi	r3,r3,-4724
  804fd0:	d9802917 	ldw	r6,164(sp)
  804fd4:	303f7926 	beq	r6,zero,804dbc <_dtoa_r+0xd0>
  804fd8:	188000c7 	ldb	r2,3(r3)
  804fdc:	190000c4 	addi	r4,r3,3
  804fe0:	1000101e 	bne	r2,zero,805024 <_dtoa_r+0x338>
  804fe4:	d8802917 	ldw	r2,164(sp)
  804fe8:	11000015 	stw	r4,0(r2)
  804fec:	003f7306 	br	804dbc <_dtoa_r+0xd0>
  804ff0:	00a00034 	movhi	r2,32768
  804ff4:	10bfffc4 	addi	r2,r2,-1
  804ff8:	00c00044 	movi	r3,1
  804ffc:	88aa703a 	and	r21,r17,r2
  805000:	90c00015 	stw	r3,0(r18)
  805004:	003f5806 	br	804d68 <_dtoa_r+0x7c>
  805008:	00800434 	movhi	r2,16
  80500c:	10bfffc4 	addi	r2,r2,-1
  805010:	a884703a 	and	r2,r21,r2
  805014:	103fec1e 	bne	r2,zero,804fc8 <_dtoa_r+0x2dc>
  805018:	00c02074 	movhi	r3,129
  80501c:	18fb6004 	addi	r3,r3,-4736
  805020:	003feb06 	br	804fd0 <_dtoa_r+0x2e4>
  805024:	d8802917 	ldw	r2,164(sp)
  805028:	19000204 	addi	r4,r3,8
  80502c:	11000015 	stw	r4,0(r2)
  805030:	003f6206 	br	804dbc <_dtoa_r+0xd0>
  805034:	ddc00117 	ldw	r23,4(sp)
  805038:	d8800217 	ldw	r2,8(sp)
  80503c:	01000804 	movi	r4,32
  805040:	b8c10c84 	addi	r3,r23,1074
  805044:	18a3883a 	add	r17,r3,r2
  805048:	2441b80e 	bge	r4,r17,80572c <_dtoa_r+0xa40>
  80504c:	00c01004 	movi	r3,64
  805050:	1c47c83a 	sub	r3,r3,r17
  805054:	88bff804 	addi	r2,r17,-32
  805058:	a8c6983a 	sll	r3,r21,r3
  80505c:	a084d83a 	srl	r2,r20,r2
  805060:	1888b03a 	or	r4,r3,r2
  805064:	0809fc40 	call	809fc4 <__floatunsidf>
  805068:	1011883a 	mov	r8,r2
  80506c:	00bf8434 	movhi	r2,65040
  805070:	01000044 	movi	r4,1
  805074:	10d3883a 	add	r9,r2,r3
  805078:	8dbef344 	addi	r22,r17,-1075
  80507c:	d9000815 	stw	r4,32(sp)
  805080:	003f6f06 	br	804e40 <_dtoa_r+0x154>
  805084:	d8001715 	stw	zero,92(sp)
  805088:	04400044 	movi	r17,1
  80508c:	00bfffc4 	movi	r2,-1
  805090:	00c00044 	movi	r3,1
  805094:	d8800e15 	stw	r2,56(sp)
  805098:	d8002615 	stw	zero,152(sp)
  80509c:	d8800f15 	stw	r2,60(sp)
  8050a0:	d8c00b15 	stw	r3,44(sp)
  8050a4:	1021883a 	mov	r16,r2
  8050a8:	d8801617 	ldw	r2,88(sp)
  8050ac:	10001115 	stw	zero,68(r2)
  8050b0:	d8801617 	ldw	r2,88(sp)
  8050b4:	11401117 	ldw	r5,68(r2)
  8050b8:	1009883a 	mov	r4,r2
  8050bc:	080716c0 	call	80716c <_Balloc>
  8050c0:	d8c01617 	ldw	r3,88(sp)
  8050c4:	d8800515 	stw	r2,20(sp)
  8050c8:	18801015 	stw	r2,64(r3)
  8050cc:	00800384 	movi	r2,14
  8050d0:	14006836 	bltu	r2,r16,805274 <_dtoa_r+0x588>
  8050d4:	8805003a 	cmpeq	r2,r17,zero
  8050d8:	1000661e 	bne	r2,zero,805274 <_dtoa_r+0x588>
  8050dc:	d9000d17 	ldw	r4,52(sp)
  8050e0:	0102300e 	bge	zero,r4,8059a4 <_dtoa_r+0xcb8>
  8050e4:	208003cc 	andi	r2,r4,15
  8050e8:	100490fa 	slli	r2,r2,3
  8050ec:	2025d13a 	srai	r18,r4,4
  8050f0:	00c02074 	movhi	r3,129
  8050f4:	18fb7404 	addi	r3,r3,-4656
  8050f8:	10c5883a 	add	r2,r2,r3
  8050fc:	90c0040c 	andi	r3,r18,16
  805100:	14000017 	ldw	r16,0(r2)
  805104:	14400117 	ldw	r17,4(r2)
  805108:	18036a1e 	bne	r3,zero,805eb4 <_dtoa_r+0x11c8>
  80510c:	05800084 	movi	r22,2
  805110:	90001026 	beq	r18,zero,805154 <_dtoa_r+0x468>
  805114:	04c02074 	movhi	r19,129
  805118:	9cfba604 	addi	r19,r19,-4456
  80511c:	9080004c 	andi	r2,r18,1
  805120:	1005003a 	cmpeq	r2,r2,zero
  805124:	1000081e 	bne	r2,zero,805148 <_dtoa_r+0x45c>
  805128:	99800017 	ldw	r6,0(r19)
  80512c:	99c00117 	ldw	r7,4(r19)
  805130:	880b883a 	mov	r5,r17
  805134:	8009883a 	mov	r4,r16
  805138:	08095300 	call	809530 <__muldf3>
  80513c:	1021883a 	mov	r16,r2
  805140:	b5800044 	addi	r22,r22,1
  805144:	1823883a 	mov	r17,r3
  805148:	9025d07a 	srai	r18,r18,1
  80514c:	9cc00204 	addi	r19,r19,8
  805150:	903ff21e 	bne	r18,zero,80511c <_dtoa_r+0x430>
  805154:	a80b883a 	mov	r5,r21
  805158:	a009883a 	mov	r4,r20
  80515c:	880f883a 	mov	r7,r17
  805160:	800d883a 	mov	r6,r16
  805164:	08098f40 	call	8098f4 <__divdf3>
  805168:	1029883a 	mov	r20,r2
  80516c:	182b883a 	mov	r21,r3
  805170:	d8c00c17 	ldw	r3,48(sp)
  805174:	1805003a 	cmpeq	r2,r3,zero
  805178:	1000081e 	bne	r2,zero,80519c <_dtoa_r+0x4b0>
  80517c:	0005883a 	mov	r2,zero
  805180:	00cffc34 	movhi	r3,16368
  805184:	180f883a 	mov	r7,r3
  805188:	a009883a 	mov	r4,r20
  80518c:	a80b883a 	mov	r5,r21
  805190:	100d883a 	mov	r6,r2
  805194:	0809d6c0 	call	809d6c <__ltdf2>
  805198:	1003fe16 	blt	r2,zero,806194 <_dtoa_r+0x14a8>
  80519c:	b009883a 	mov	r4,r22
  8051a0:	0809df40 	call	809df4 <__floatsidf>
  8051a4:	180b883a 	mov	r5,r3
  8051a8:	1009883a 	mov	r4,r2
  8051ac:	a00d883a 	mov	r6,r20
  8051b0:	a80f883a 	mov	r7,r21
  8051b4:	08095300 	call	809530 <__muldf3>
  8051b8:	0011883a 	mov	r8,zero
  8051bc:	02500734 	movhi	r9,16412
  8051c0:	1009883a 	mov	r4,r2
  8051c4:	180b883a 	mov	r5,r3
  8051c8:	480f883a 	mov	r7,r9
  8051cc:	400d883a 	mov	r6,r8
  8051d0:	08094bc0 	call	8094bc <__adddf3>
  8051d4:	d9000f17 	ldw	r4,60(sp)
  8051d8:	102d883a 	mov	r22,r2
  8051dc:	00bf3034 	movhi	r2,64704
  8051e0:	18b9883a 	add	fp,r3,r2
  8051e4:	e02f883a 	mov	r23,fp
  8051e8:	20028f1e 	bne	r4,zero,805c28 <_dtoa_r+0xf3c>
  8051ec:	0005883a 	mov	r2,zero
  8051f0:	00d00534 	movhi	r3,16404
  8051f4:	a009883a 	mov	r4,r20
  8051f8:	a80b883a 	mov	r5,r21
  8051fc:	180f883a 	mov	r7,r3
  805200:	100d883a 	mov	r6,r2
  805204:	080943c0 	call	80943c <__subdf3>
  805208:	1009883a 	mov	r4,r2
  80520c:	e00f883a 	mov	r7,fp
  805210:	180b883a 	mov	r5,r3
  805214:	b00d883a 	mov	r6,r22
  805218:	1025883a 	mov	r18,r2
  80521c:	1827883a 	mov	r19,r3
  805220:	0809c5c0 	call	809c5c <__gtdf2>
  805224:	00834f16 	blt	zero,r2,805f64 <_dtoa_r+0x1278>
  805228:	e0e0003c 	xorhi	r3,fp,32768
  80522c:	9009883a 	mov	r4,r18
  805230:	980b883a 	mov	r5,r19
  805234:	180f883a 	mov	r7,r3
  805238:	b00d883a 	mov	r6,r22
  80523c:	0809d6c0 	call	809d6c <__ltdf2>
  805240:	1000080e 	bge	r2,zero,805264 <_dtoa_r+0x578>
  805244:	0027883a 	mov	r19,zero
  805248:	0025883a 	mov	r18,zero
  80524c:	d8802617 	ldw	r2,152(sp)
  805250:	df000517 	ldw	fp,20(sp)
  805254:	d8000615 	stw	zero,24(sp)
  805258:	0084303a 	nor	r2,zero,r2
  80525c:	d8800d15 	stw	r2,52(sp)
  805260:	00019b06 	br	8058d0 <_dtoa_r+0xbe4>
  805264:	d9801217 	ldw	r6,72(sp)
  805268:	d8801317 	ldw	r2,76(sp)
  80526c:	3029883a 	mov	r20,r6
  805270:	102b883a 	mov	r21,r2
  805274:	d8c00217 	ldw	r3,8(sp)
  805278:	18008516 	blt	r3,zero,805490 <_dtoa_r+0x7a4>
  80527c:	d9000d17 	ldw	r4,52(sp)
  805280:	00800384 	movi	r2,14
  805284:	11008216 	blt	r2,r4,805490 <_dtoa_r+0x7a4>
  805288:	200490fa 	slli	r2,r4,3
  80528c:	d9802617 	ldw	r6,152(sp)
  805290:	00c02074 	movhi	r3,129
  805294:	18fb7404 	addi	r3,r3,-4656
  805298:	10c5883a 	add	r2,r2,r3
  80529c:	14800017 	ldw	r18,0(r2)
  8052a0:	14c00117 	ldw	r19,4(r2)
  8052a4:	30031e16 	blt	r6,zero,805f20 <_dtoa_r+0x1234>
  8052a8:	d9000517 	ldw	r4,20(sp)
  8052ac:	d8c00f17 	ldw	r3,60(sp)
  8052b0:	a823883a 	mov	r17,r21
  8052b4:	a021883a 	mov	r16,r20
  8052b8:	192b883a 	add	r21,r3,r4
  8052bc:	2039883a 	mov	fp,r4
  8052c0:	00000f06 	br	805300 <_dtoa_r+0x614>
  8052c4:	0005883a 	mov	r2,zero
  8052c8:	00d00934 	movhi	r3,16420
  8052cc:	5009883a 	mov	r4,r10
  8052d0:	580b883a 	mov	r5,r11
  8052d4:	180f883a 	mov	r7,r3
  8052d8:	100d883a 	mov	r6,r2
  8052dc:	08095300 	call	809530 <__muldf3>
  8052e0:	180b883a 	mov	r5,r3
  8052e4:	000d883a 	mov	r6,zero
  8052e8:	000f883a 	mov	r7,zero
  8052ec:	1009883a 	mov	r4,r2
  8052f0:	1021883a 	mov	r16,r2
  8052f4:	1823883a 	mov	r17,r3
  8052f8:	0809bd40 	call	809bd4 <__nedf2>
  8052fc:	10004526 	beq	r2,zero,805414 <_dtoa_r+0x728>
  805300:	900d883a 	mov	r6,r18
  805304:	980f883a 	mov	r7,r19
  805308:	8009883a 	mov	r4,r16
  80530c:	880b883a 	mov	r5,r17
  805310:	08098f40 	call	8098f4 <__divdf3>
  805314:	180b883a 	mov	r5,r3
  805318:	1009883a 	mov	r4,r2
  80531c:	0809eec0 	call	809eec <__fixdfsi>
  805320:	1009883a 	mov	r4,r2
  805324:	1029883a 	mov	r20,r2
  805328:	0809df40 	call	809df4 <__floatsidf>
  80532c:	180f883a 	mov	r7,r3
  805330:	9009883a 	mov	r4,r18
  805334:	980b883a 	mov	r5,r19
  805338:	100d883a 	mov	r6,r2
  80533c:	08095300 	call	809530 <__muldf3>
  805340:	180f883a 	mov	r7,r3
  805344:	880b883a 	mov	r5,r17
  805348:	8009883a 	mov	r4,r16
  80534c:	100d883a 	mov	r6,r2
  805350:	080943c0 	call	80943c <__subdf3>
  805354:	1015883a 	mov	r10,r2
  805358:	a0800c04 	addi	r2,r20,48
  80535c:	e0800005 	stb	r2,0(fp)
  805360:	e7000044 	addi	fp,fp,1
  805364:	1817883a 	mov	r11,r3
  805368:	e57fd61e 	bne	fp,r21,8052c4 <_dtoa_r+0x5d8>
  80536c:	500d883a 	mov	r6,r10
  805370:	180f883a 	mov	r7,r3
  805374:	5009883a 	mov	r4,r10
  805378:	180b883a 	mov	r5,r3
  80537c:	08094bc0 	call	8094bc <__adddf3>
  805380:	100d883a 	mov	r6,r2
  805384:	9009883a 	mov	r4,r18
  805388:	980b883a 	mov	r5,r19
  80538c:	180f883a 	mov	r7,r3
  805390:	1021883a 	mov	r16,r2
  805394:	1823883a 	mov	r17,r3
  805398:	0809d6c0 	call	809d6c <__ltdf2>
  80539c:	10000816 	blt	r2,zero,8053c0 <_dtoa_r+0x6d4>
  8053a0:	980b883a 	mov	r5,r19
  8053a4:	800d883a 	mov	r6,r16
  8053a8:	880f883a 	mov	r7,r17
  8053ac:	9009883a 	mov	r4,r18
  8053b0:	0809b4c0 	call	809b4c <__eqdf2>
  8053b4:	1000171e 	bne	r2,zero,805414 <_dtoa_r+0x728>
  8053b8:	a080004c 	andi	r2,r20,1
  8053bc:	10001526 	beq	r2,zero,805414 <_dtoa_r+0x728>
  8053c0:	d8800d17 	ldw	r2,52(sp)
  8053c4:	d8800415 	stw	r2,16(sp)
  8053c8:	e009883a 	mov	r4,fp
  8053cc:	213fffc4 	addi	r4,r4,-1
  8053d0:	20c00007 	ldb	r3,0(r4)
  8053d4:	00800e44 	movi	r2,57
  8053d8:	1880081e 	bne	r3,r2,8053fc <_dtoa_r+0x710>
  8053dc:	d8800517 	ldw	r2,20(sp)
  8053e0:	113ffa1e 	bne	r2,r4,8053cc <_dtoa_r+0x6e0>
  8053e4:	d8c00417 	ldw	r3,16(sp)
  8053e8:	d9800517 	ldw	r6,20(sp)
  8053ec:	00800c04 	movi	r2,48
  8053f0:	18c00044 	addi	r3,r3,1
  8053f4:	d8c00415 	stw	r3,16(sp)
  8053f8:	30800005 	stb	r2,0(r6)
  8053fc:	20800003 	ldbu	r2,0(r4)
  805400:	d8c00417 	ldw	r3,16(sp)
  805404:	27000044 	addi	fp,r4,1
  805408:	10800044 	addi	r2,r2,1
  80540c:	d8c00d15 	stw	r3,52(sp)
  805410:	20800005 	stb	r2,0(r4)
  805414:	d9001617 	ldw	r4,88(sp)
  805418:	d9400717 	ldw	r5,28(sp)
  80541c:	0806bec0 	call	806bec <_Bfree>
  805420:	e0000005 	stb	zero,0(fp)
  805424:	d9800d17 	ldw	r6,52(sp)
  805428:	d8c02717 	ldw	r3,156(sp)
  80542c:	d9002917 	ldw	r4,164(sp)
  805430:	30800044 	addi	r2,r6,1
  805434:	18800015 	stw	r2,0(r3)
  805438:	20029c26 	beq	r4,zero,805eac <_dtoa_r+0x11c0>
  80543c:	d8c00517 	ldw	r3,20(sp)
  805440:	27000015 	stw	fp,0(r4)
  805444:	003e5d06 	br	804dbc <_dtoa_r+0xd0>
  805448:	d9800d17 	ldw	r6,52(sp)
  80544c:	00c02074 	movhi	r3,129
  805450:	18fb7404 	addi	r3,r3,-4656
  805454:	d9001217 	ldw	r4,72(sp)
  805458:	300490fa 	slli	r2,r6,3
  80545c:	d9401317 	ldw	r5,76(sp)
  805460:	10c5883a 	add	r2,r2,r3
  805464:	12000017 	ldw	r8,0(r2)
  805468:	12400117 	ldw	r9,4(r2)
  80546c:	400d883a 	mov	r6,r8
  805470:	480f883a 	mov	r7,r9
  805474:	0809d6c0 	call	809d6c <__ltdf2>
  805478:	1000030e 	bge	r2,zero,805488 <_dtoa_r+0x79c>
  80547c:	d8800d17 	ldw	r2,52(sp)
  805480:	10bfffc4 	addi	r2,r2,-1
  805484:	d8800d15 	stw	r2,52(sp)
  805488:	d8000c15 	stw	zero,48(sp)
  80548c:	003ea806 	br	804f30 <_dtoa_r+0x244>
  805490:	d9000b17 	ldw	r4,44(sp)
  805494:	202cc03a 	cmpne	r22,r4,zero
  805498:	b000c71e 	bne	r22,zero,8057b8 <_dtoa_r+0xacc>
  80549c:	dc001117 	ldw	r16,68(sp)
  8054a0:	dc801017 	ldw	r18,64(sp)
  8054a4:	0027883a 	mov	r19,zero
  8054a8:	04000b0e 	bge	zero,r16,8054d8 <_dtoa_r+0x7ec>
  8054ac:	d8c00a17 	ldw	r3,40(sp)
  8054b0:	00c0090e 	bge	zero,r3,8054d8 <_dtoa_r+0x7ec>
  8054b4:	8005883a 	mov	r2,r16
  8054b8:	1c011316 	blt	r3,r16,805908 <_dtoa_r+0xc1c>
  8054bc:	d9000a17 	ldw	r4,40(sp)
  8054c0:	d9801117 	ldw	r6,68(sp)
  8054c4:	80a1c83a 	sub	r16,r16,r2
  8054c8:	2089c83a 	sub	r4,r4,r2
  8054cc:	308dc83a 	sub	r6,r6,r2
  8054d0:	d9000a15 	stw	r4,40(sp)
  8054d4:	d9801115 	stw	r6,68(sp)
  8054d8:	d8801017 	ldw	r2,64(sp)
  8054dc:	0080150e 	bge	zero,r2,805534 <_dtoa_r+0x848>
  8054e0:	d8c00b17 	ldw	r3,44(sp)
  8054e4:	1805003a 	cmpeq	r2,r3,zero
  8054e8:	1001c91e 	bne	r2,zero,805c10 <_dtoa_r+0xf24>
  8054ec:	04800e0e 	bge	zero,r18,805528 <_dtoa_r+0x83c>
  8054f0:	d9001617 	ldw	r4,88(sp)
  8054f4:	980b883a 	mov	r5,r19
  8054f8:	900d883a 	mov	r6,r18
  8054fc:	08079a00 	call	8079a0 <__pow5mult>
  805500:	d9001617 	ldw	r4,88(sp)
  805504:	d9800717 	ldw	r6,28(sp)
  805508:	100b883a 	mov	r5,r2
  80550c:	1027883a 	mov	r19,r2
  805510:	080767c0 	call	80767c <__multiply>
  805514:	d9001617 	ldw	r4,88(sp)
  805518:	d9400717 	ldw	r5,28(sp)
  80551c:	1023883a 	mov	r17,r2
  805520:	0806bec0 	call	806bec <_Bfree>
  805524:	dc400715 	stw	r17,28(sp)
  805528:	d9001017 	ldw	r4,64(sp)
  80552c:	248dc83a 	sub	r6,r4,r18
  805530:	30010e1e 	bne	r6,zero,80596c <_dtoa_r+0xc80>
  805534:	d9001617 	ldw	r4,88(sp)
  805538:	04400044 	movi	r17,1
  80553c:	880b883a 	mov	r5,r17
  805540:	08078640 	call	807864 <__i2b>
  805544:	d9800917 	ldw	r6,36(sp)
  805548:	1025883a 	mov	r18,r2
  80554c:	0180040e 	bge	zero,r6,805560 <_dtoa_r+0x874>
  805550:	d9001617 	ldw	r4,88(sp)
  805554:	100b883a 	mov	r5,r2
  805558:	08079a00 	call	8079a0 <__pow5mult>
  80555c:	1025883a 	mov	r18,r2
  805560:	d8801717 	ldw	r2,92(sp)
  805564:	8880f30e 	bge	r17,r2,805934 <_dtoa_r+0xc48>
  805568:	0023883a 	mov	r17,zero
  80556c:	d9800917 	ldw	r6,36(sp)
  805570:	30019e1e 	bne	r6,zero,805bec <_dtoa_r+0xf00>
  805574:	00c00044 	movi	r3,1
  805578:	d9000a17 	ldw	r4,40(sp)
  80557c:	20c5883a 	add	r2,r4,r3
  805580:	10c007cc 	andi	r3,r2,31
  805584:	1800841e 	bne	r3,zero,805798 <_dtoa_r+0xaac>
  805588:	00800704 	movi	r2,28
  80558c:	d9000a17 	ldw	r4,40(sp)
  805590:	d9801117 	ldw	r6,68(sp)
  805594:	80a1883a 	add	r16,r16,r2
  805598:	2089883a 	add	r4,r4,r2
  80559c:	308d883a 	add	r6,r6,r2
  8055a0:	d9000a15 	stw	r4,40(sp)
  8055a4:	d9801115 	stw	r6,68(sp)
  8055a8:	d8801117 	ldw	r2,68(sp)
  8055ac:	0080050e 	bge	zero,r2,8055c4 <_dtoa_r+0x8d8>
  8055b0:	d9400717 	ldw	r5,28(sp)
  8055b4:	d9001617 	ldw	r4,88(sp)
  8055b8:	100d883a 	mov	r6,r2
  8055bc:	08075300 	call	807530 <__lshift>
  8055c0:	d8800715 	stw	r2,28(sp)
  8055c4:	d8c00a17 	ldw	r3,40(sp)
  8055c8:	00c0050e 	bge	zero,r3,8055e0 <_dtoa_r+0x8f4>
  8055cc:	d9001617 	ldw	r4,88(sp)
  8055d0:	900b883a 	mov	r5,r18
  8055d4:	180d883a 	mov	r6,r3
  8055d8:	08075300 	call	807530 <__lshift>
  8055dc:	1025883a 	mov	r18,r2
  8055e0:	d9000c17 	ldw	r4,48(sp)
  8055e4:	2005003a 	cmpeq	r2,r4,zero
  8055e8:	10016f26 	beq	r2,zero,805ba8 <_dtoa_r+0xebc>
  8055ec:	d9000f17 	ldw	r4,60(sp)
  8055f0:	0102170e 	bge	zero,r4,805e50 <_dtoa_r+0x1164>
  8055f4:	d9800b17 	ldw	r6,44(sp)
  8055f8:	3005003a 	cmpeq	r2,r6,zero
  8055fc:	1000881e 	bne	r2,zero,805820 <_dtoa_r+0xb34>
  805600:	0400050e 	bge	zero,r16,805618 <_dtoa_r+0x92c>
  805604:	d9001617 	ldw	r4,88(sp)
  805608:	980b883a 	mov	r5,r19
  80560c:	800d883a 	mov	r6,r16
  805610:	08075300 	call	807530 <__lshift>
  805614:	1027883a 	mov	r19,r2
  805618:	8804c03a 	cmpne	r2,r17,zero
  80561c:	1002541e 	bne	r2,zero,805f70 <_dtoa_r+0x1284>
  805620:	980b883a 	mov	r5,r19
  805624:	dd800517 	ldw	r22,20(sp)
  805628:	dcc00615 	stw	r19,24(sp)
  80562c:	a700004c 	andi	fp,r20,1
  805630:	2827883a 	mov	r19,r5
  805634:	d9000717 	ldw	r4,28(sp)
  805638:	900b883a 	mov	r5,r18
  80563c:	0804ad40 	call	804ad4 <quorem>
  805640:	d9000717 	ldw	r4,28(sp)
  805644:	d9400617 	ldw	r5,24(sp)
  805648:	1023883a 	mov	r17,r2
  80564c:	8dc00c04 	addi	r23,r17,48
  805650:	0806d480 	call	806d48 <__mcmp>
  805654:	d9001617 	ldw	r4,88(sp)
  805658:	900b883a 	mov	r5,r18
  80565c:	980d883a 	mov	r6,r19
  805660:	1029883a 	mov	r20,r2
  805664:	08073a40 	call	8073a4 <__mdiff>
  805668:	102b883a 	mov	r21,r2
  80566c:	10800317 	ldw	r2,12(r2)
  805670:	1001281e 	bne	r2,zero,805b14 <_dtoa_r+0xe28>
  805674:	d9000717 	ldw	r4,28(sp)
  805678:	a80b883a 	mov	r5,r21
  80567c:	0806d480 	call	806d48 <__mcmp>
  805680:	d9001617 	ldw	r4,88(sp)
  805684:	1021883a 	mov	r16,r2
  805688:	a80b883a 	mov	r5,r21
  80568c:	0806bec0 	call	806bec <_Bfree>
  805690:	8000041e 	bne	r16,zero,8056a4 <_dtoa_r+0x9b8>
  805694:	d8801717 	ldw	r2,92(sp)
  805698:	1000021e 	bne	r2,zero,8056a4 <_dtoa_r+0x9b8>
  80569c:	e004c03a 	cmpne	r2,fp,zero
  8056a0:	10011726 	beq	r2,zero,805b00 <_dtoa_r+0xe14>
  8056a4:	a0010616 	blt	r20,zero,805ac0 <_dtoa_r+0xdd4>
  8056a8:	a000041e 	bne	r20,zero,8056bc <_dtoa_r+0x9d0>
  8056ac:	d8c01717 	ldw	r3,92(sp)
  8056b0:	1800021e 	bne	r3,zero,8056bc <_dtoa_r+0x9d0>
  8056b4:	e004c03a 	cmpne	r2,fp,zero
  8056b8:	10010126 	beq	r2,zero,805ac0 <_dtoa_r+0xdd4>
  8056bc:	04023d16 	blt	zero,r16,805fb4 <_dtoa_r+0x12c8>
  8056c0:	b5c00005 	stb	r23,0(r22)
  8056c4:	d9800517 	ldw	r6,20(sp)
  8056c8:	d9000f17 	ldw	r4,60(sp)
  8056cc:	b5800044 	addi	r22,r22,1
  8056d0:	3105883a 	add	r2,r6,r4
  8056d4:	b0806526 	beq	r22,r2,80586c <_dtoa_r+0xb80>
  8056d8:	d9400717 	ldw	r5,28(sp)
  8056dc:	d9001617 	ldw	r4,88(sp)
  8056e0:	01800284 	movi	r6,10
  8056e4:	000f883a 	mov	r7,zero
  8056e8:	08078a00 	call	8078a0 <__multadd>
  8056ec:	d8800715 	stw	r2,28(sp)
  8056f0:	d8800617 	ldw	r2,24(sp)
  8056f4:	14c10c26 	beq	r2,r19,805b28 <_dtoa_r+0xe3c>
  8056f8:	d9400617 	ldw	r5,24(sp)
  8056fc:	d9001617 	ldw	r4,88(sp)
  805700:	01800284 	movi	r6,10
  805704:	000f883a 	mov	r7,zero
  805708:	08078a00 	call	8078a0 <__multadd>
  80570c:	d9001617 	ldw	r4,88(sp)
  805710:	980b883a 	mov	r5,r19
  805714:	01800284 	movi	r6,10
  805718:	000f883a 	mov	r7,zero
  80571c:	d8800615 	stw	r2,24(sp)
  805720:	08078a00 	call	8078a0 <__multadd>
  805724:	1027883a 	mov	r19,r2
  805728:	003fc206 	br	805634 <_dtoa_r+0x948>
  80572c:	2445c83a 	sub	r2,r4,r17
  805730:	a088983a 	sll	r4,r20,r2
  805734:	003e4b06 	br	805064 <_dtoa_r+0x378>
  805738:	01bfffc4 	movi	r6,-1
  80573c:	00800044 	movi	r2,1
  805740:	d9800e15 	stw	r6,56(sp)
  805744:	d9800f15 	stw	r6,60(sp)
  805748:	d8800b15 	stw	r2,44(sp)
  80574c:	d8c01617 	ldw	r3,88(sp)
  805750:	008005c4 	movi	r2,23
  805754:	18001115 	stw	zero,68(r3)
  805758:	1580082e 	bgeu	r2,r22,80577c <_dtoa_r+0xa90>
  80575c:	00c00104 	movi	r3,4
  805760:	0009883a 	mov	r4,zero
  805764:	18c7883a 	add	r3,r3,r3
  805768:	18800504 	addi	r2,r3,20
  80576c:	21000044 	addi	r4,r4,1
  805770:	b0bffc2e 	bgeu	r22,r2,805764 <_dtoa_r+0xa78>
  805774:	d9801617 	ldw	r6,88(sp)
  805778:	31001115 	stw	r4,68(r6)
  80577c:	dc000f17 	ldw	r16,60(sp)
  805780:	003e4b06 	br	8050b0 <_dtoa_r+0x3c4>
  805784:	d9801717 	ldw	r6,92(sp)
  805788:	0023883a 	mov	r17,zero
  80578c:	31bfff04 	addi	r6,r6,-4
  805790:	d9801715 	stw	r6,92(sp)
  805794:	003df806 	br	804f78 <_dtoa_r+0x28c>
  805798:	00800804 	movi	r2,32
  80579c:	10c9c83a 	sub	r4,r2,r3
  8057a0:	00c00104 	movi	r3,4
  8057a4:	19005a16 	blt	r3,r4,805910 <_dtoa_r+0xc24>
  8057a8:	008000c4 	movi	r2,3
  8057ac:	113f7e16 	blt	r2,r4,8055a8 <_dtoa_r+0x8bc>
  8057b0:	20800704 	addi	r2,r4,28
  8057b4:	003f7506 	br	80558c <_dtoa_r+0x8a0>
  8057b8:	d9801717 	ldw	r6,92(sp)
  8057bc:	00800044 	movi	r2,1
  8057c0:	1180a10e 	bge	r2,r6,805a48 <_dtoa_r+0xd5c>
  8057c4:	d9800f17 	ldw	r6,60(sp)
  8057c8:	d8c01017 	ldw	r3,64(sp)
  8057cc:	30bfffc4 	addi	r2,r6,-1
  8057d0:	1881c616 	blt	r3,r2,805eec <_dtoa_r+0x1200>
  8057d4:	18a5c83a 	sub	r18,r3,r2
  8057d8:	d8800f17 	ldw	r2,60(sp)
  8057dc:	10026216 	blt	r2,zero,806168 <_dtoa_r+0x147c>
  8057e0:	dc001117 	ldw	r16,68(sp)
  8057e4:	1007883a 	mov	r3,r2
  8057e8:	d9800a17 	ldw	r6,40(sp)
  8057ec:	d8801117 	ldw	r2,68(sp)
  8057f0:	d9001617 	ldw	r4,88(sp)
  8057f4:	30cd883a 	add	r6,r6,r3
  8057f8:	10c5883a 	add	r2,r2,r3
  8057fc:	01400044 	movi	r5,1
  805800:	d9800a15 	stw	r6,40(sp)
  805804:	d8801115 	stw	r2,68(sp)
  805808:	08078640 	call	807864 <__i2b>
  80580c:	1027883a 	mov	r19,r2
  805810:	003f2506 	br	8054a8 <_dtoa_r+0x7bc>
  805814:	00c02074 	movhi	r3,129
  805818:	18fb5704 	addi	r3,r3,-4772
  80581c:	003d6706 	br	804dbc <_dtoa_r+0xd0>
  805820:	dd800517 	ldw	r22,20(sp)
  805824:	04000044 	movi	r16,1
  805828:	00000706 	br	805848 <_dtoa_r+0xb5c>
  80582c:	d9400717 	ldw	r5,28(sp)
  805830:	d9001617 	ldw	r4,88(sp)
  805834:	01800284 	movi	r6,10
  805838:	000f883a 	mov	r7,zero
  80583c:	08078a00 	call	8078a0 <__multadd>
  805840:	d8800715 	stw	r2,28(sp)
  805844:	84000044 	addi	r16,r16,1
  805848:	d9000717 	ldw	r4,28(sp)
  80584c:	900b883a 	mov	r5,r18
  805850:	0804ad40 	call	804ad4 <quorem>
  805854:	15c00c04 	addi	r23,r2,48
  805858:	b5c00005 	stb	r23,0(r22)
  80585c:	d8c00f17 	ldw	r3,60(sp)
  805860:	b5800044 	addi	r22,r22,1
  805864:	80fff116 	blt	r16,r3,80582c <_dtoa_r+0xb40>
  805868:	d8000615 	stw	zero,24(sp)
  80586c:	d9400717 	ldw	r5,28(sp)
  805870:	d9001617 	ldw	r4,88(sp)
  805874:	01800044 	movi	r6,1
  805878:	08075300 	call	807530 <__lshift>
  80587c:	1009883a 	mov	r4,r2
  805880:	900b883a 	mov	r5,r18
  805884:	d8800715 	stw	r2,28(sp)
  805888:	0806d480 	call	806d48 <__mcmp>
  80588c:	00803c0e 	bge	zero,r2,805980 <_dtoa_r+0xc94>
  805890:	b009883a 	mov	r4,r22
  805894:	213fffc4 	addi	r4,r4,-1
  805898:	21400003 	ldbu	r5,0(r4)
  80589c:	00800e44 	movi	r2,57
  8058a0:	28c03fcc 	andi	r3,r5,255
  8058a4:	18c0201c 	xori	r3,r3,128
  8058a8:	18ffe004 	addi	r3,r3,-128
  8058ac:	1881981e 	bne	r3,r2,805f10 <_dtoa_r+0x1224>
  8058b0:	d9800517 	ldw	r6,20(sp)
  8058b4:	21bff71e 	bne	r4,r6,805894 <_dtoa_r+0xba8>
  8058b8:	d8800d17 	ldw	r2,52(sp)
  8058bc:	37000044 	addi	fp,r6,1
  8058c0:	10800044 	addi	r2,r2,1
  8058c4:	d8800d15 	stw	r2,52(sp)
  8058c8:	00800c44 	movi	r2,49
  8058cc:	30800005 	stb	r2,0(r6)
  8058d0:	d9001617 	ldw	r4,88(sp)
  8058d4:	900b883a 	mov	r5,r18
  8058d8:	0806bec0 	call	806bec <_Bfree>
  8058dc:	983ecd26 	beq	r19,zero,805414 <_dtoa_r+0x728>
  8058e0:	d8c00617 	ldw	r3,24(sp)
  8058e4:	18000426 	beq	r3,zero,8058f8 <_dtoa_r+0xc0c>
  8058e8:	1cc00326 	beq	r3,r19,8058f8 <_dtoa_r+0xc0c>
  8058ec:	d9001617 	ldw	r4,88(sp)
  8058f0:	180b883a 	mov	r5,r3
  8058f4:	0806bec0 	call	806bec <_Bfree>
  8058f8:	d9001617 	ldw	r4,88(sp)
  8058fc:	980b883a 	mov	r5,r19
  805900:	0806bec0 	call	806bec <_Bfree>
  805904:	003ec306 	br	805414 <_dtoa_r+0x728>
  805908:	1805883a 	mov	r2,r3
  80590c:	003eeb06 	br	8054bc <_dtoa_r+0x7d0>
  805910:	d9800a17 	ldw	r6,40(sp)
  805914:	d8c01117 	ldw	r3,68(sp)
  805918:	20bfff04 	addi	r2,r4,-4
  80591c:	308d883a 	add	r6,r6,r2
  805920:	1887883a 	add	r3,r3,r2
  805924:	80a1883a 	add	r16,r16,r2
  805928:	d9800a15 	stw	r6,40(sp)
  80592c:	d8c01115 	stw	r3,68(sp)
  805930:	003f1d06 	br	8055a8 <_dtoa_r+0x8bc>
  805934:	a03f0c1e 	bne	r20,zero,805568 <_dtoa_r+0x87c>
  805938:	00800434 	movhi	r2,16
  80593c:	10bfffc4 	addi	r2,r2,-1
  805940:	a884703a 	and	r2,r21,r2
  805944:	103f081e 	bne	r2,zero,805568 <_dtoa_r+0x87c>
  805948:	a89ffc2c 	andhi	r2,r21,32752
  80594c:	103f0626 	beq	r2,zero,805568 <_dtoa_r+0x87c>
  805950:	d8c01117 	ldw	r3,68(sp)
  805954:	d9000a17 	ldw	r4,40(sp)
  805958:	18c00044 	addi	r3,r3,1
  80595c:	21000044 	addi	r4,r4,1
  805960:	d8c01115 	stw	r3,68(sp)
  805964:	d9000a15 	stw	r4,40(sp)
  805968:	003f0006 	br	80556c <_dtoa_r+0x880>
  80596c:	d9400717 	ldw	r5,28(sp)
  805970:	d9001617 	ldw	r4,88(sp)
  805974:	08079a00 	call	8079a0 <__pow5mult>
  805978:	d8800715 	stw	r2,28(sp)
  80597c:	003eed06 	br	805534 <_dtoa_r+0x848>
  805980:	1000021e 	bne	r2,zero,80598c <_dtoa_r+0xca0>
  805984:	b880004c 	andi	r2,r23,1
  805988:	103fc11e 	bne	r2,zero,805890 <_dtoa_r+0xba4>
  80598c:	b5bfffc4 	addi	r22,r22,-1
  805990:	b0c00007 	ldb	r3,0(r22)
  805994:	00800c04 	movi	r2,48
  805998:	18bffc26 	beq	r3,r2,80598c <_dtoa_r+0xca0>
  80599c:	b7000044 	addi	fp,r22,1
  8059a0:	003fcb06 	br	8058d0 <_dtoa_r+0xbe4>
  8059a4:	d9800d17 	ldw	r6,52(sp)
  8059a8:	018fc83a 	sub	r7,zero,r6
  8059ac:	3801f726 	beq	r7,zero,80618c <_dtoa_r+0x14a0>
  8059b0:	398003cc 	andi	r6,r7,15
  8059b4:	300c90fa 	slli	r6,r6,3
  8059b8:	01402074 	movhi	r5,129
  8059bc:	297b7404 	addi	r5,r5,-4656
  8059c0:	d9001217 	ldw	r4,72(sp)
  8059c4:	314d883a 	add	r6,r6,r5
  8059c8:	30c00117 	ldw	r3,4(r6)
  8059cc:	30800017 	ldw	r2,0(r6)
  8059d0:	d9401317 	ldw	r5,76(sp)
  8059d4:	3821d13a 	srai	r16,r7,4
  8059d8:	100d883a 	mov	r6,r2
  8059dc:	180f883a 	mov	r7,r3
  8059e0:	08095300 	call	809530 <__muldf3>
  8059e4:	1011883a 	mov	r8,r2
  8059e8:	1813883a 	mov	r9,r3
  8059ec:	1029883a 	mov	r20,r2
  8059f0:	182b883a 	mov	r21,r3
  8059f4:	8001e526 	beq	r16,zero,80618c <_dtoa_r+0x14a0>
  8059f8:	05800084 	movi	r22,2
  8059fc:	04402074 	movhi	r17,129
  805a00:	8c7ba604 	addi	r17,r17,-4456
  805a04:	8080004c 	andi	r2,r16,1
  805a08:	1005003a 	cmpeq	r2,r2,zero
  805a0c:	1000081e 	bne	r2,zero,805a30 <_dtoa_r+0xd44>
  805a10:	89800017 	ldw	r6,0(r17)
  805a14:	89c00117 	ldw	r7,4(r17)
  805a18:	480b883a 	mov	r5,r9
  805a1c:	4009883a 	mov	r4,r8
  805a20:	08095300 	call	809530 <__muldf3>
  805a24:	1011883a 	mov	r8,r2
  805a28:	b5800044 	addi	r22,r22,1
  805a2c:	1813883a 	mov	r9,r3
  805a30:	8021d07a 	srai	r16,r16,1
  805a34:	8c400204 	addi	r17,r17,8
  805a38:	803ff21e 	bne	r16,zero,805a04 <_dtoa_r+0xd18>
  805a3c:	4029883a 	mov	r20,r8
  805a40:	482b883a 	mov	r21,r9
  805a44:	003dca06 	br	805170 <_dtoa_r+0x484>
  805a48:	d9000817 	ldw	r4,32(sp)
  805a4c:	2005003a 	cmpeq	r2,r4,zero
  805a50:	1001f61e 	bne	r2,zero,80622c <_dtoa_r+0x1540>
  805a54:	dc001117 	ldw	r16,68(sp)
  805a58:	dc801017 	ldw	r18,64(sp)
  805a5c:	18c10cc4 	addi	r3,r3,1075
  805a60:	003f6106 	br	8057e8 <_dtoa_r+0xafc>
  805a64:	d8000b15 	stw	zero,44(sp)
  805a68:	d9802617 	ldw	r6,152(sp)
  805a6c:	d8c00d17 	ldw	r3,52(sp)
  805a70:	30800044 	addi	r2,r6,1
  805a74:	18ad883a 	add	r22,r3,r2
  805a78:	b13fffc4 	addi	r4,r22,-1
  805a7c:	d9000e15 	stw	r4,56(sp)
  805a80:	0581f60e 	bge	zero,r22,80625c <_dtoa_r+0x1570>
  805a84:	dd800f15 	stw	r22,60(sp)
  805a88:	003f3006 	br	80574c <_dtoa_r+0xa60>
  805a8c:	d8000b15 	stw	zero,44(sp)
  805a90:	d9002617 	ldw	r4,152(sp)
  805a94:	0101eb0e 	bge	zero,r4,806244 <_dtoa_r+0x1558>
  805a98:	202d883a 	mov	r22,r4
  805a9c:	d9000e15 	stw	r4,56(sp)
  805aa0:	d9000f15 	stw	r4,60(sp)
  805aa4:	003f2906 	br	80574c <_dtoa_r+0xa60>
  805aa8:	01800044 	movi	r6,1
  805aac:	d9800b15 	stw	r6,44(sp)
  805ab0:	003ff706 	br	805a90 <_dtoa_r+0xda4>
  805ab4:	01000044 	movi	r4,1
  805ab8:	d9000b15 	stw	r4,44(sp)
  805abc:	003fea06 	br	805a68 <_dtoa_r+0xd7c>
  805ac0:	04000c0e 	bge	zero,r16,805af4 <_dtoa_r+0xe08>
  805ac4:	d9400717 	ldw	r5,28(sp)
  805ac8:	d9001617 	ldw	r4,88(sp)
  805acc:	01800044 	movi	r6,1
  805ad0:	08075300 	call	807530 <__lshift>
  805ad4:	1009883a 	mov	r4,r2
  805ad8:	900b883a 	mov	r5,r18
  805adc:	d8800715 	stw	r2,28(sp)
  805ae0:	0806d480 	call	806d48 <__mcmp>
  805ae4:	0081e00e 	bge	zero,r2,806268 <_dtoa_r+0x157c>
  805ae8:	bdc00044 	addi	r23,r23,1
  805aec:	00800e84 	movi	r2,58
  805af0:	b881a226 	beq	r23,r2,80617c <_dtoa_r+0x1490>
  805af4:	b7000044 	addi	fp,r22,1
  805af8:	b5c00005 	stb	r23,0(r22)
  805afc:	003f7406 	br	8058d0 <_dtoa_r+0xbe4>
  805b00:	00800e44 	movi	r2,57
  805b04:	b8819d26 	beq	r23,r2,80617c <_dtoa_r+0x1490>
  805b08:	053ffa0e 	bge	zero,r20,805af4 <_dtoa_r+0xe08>
  805b0c:	8dc00c44 	addi	r23,r17,49
  805b10:	003ff806 	br	805af4 <_dtoa_r+0xe08>
  805b14:	d9001617 	ldw	r4,88(sp)
  805b18:	a80b883a 	mov	r5,r21
  805b1c:	04000044 	movi	r16,1
  805b20:	0806bec0 	call	806bec <_Bfree>
  805b24:	003edf06 	br	8056a4 <_dtoa_r+0x9b8>
  805b28:	d9001617 	ldw	r4,88(sp)
  805b2c:	980b883a 	mov	r5,r19
  805b30:	01800284 	movi	r6,10
  805b34:	000f883a 	mov	r7,zero
  805b38:	08078a00 	call	8078a0 <__multadd>
  805b3c:	1027883a 	mov	r19,r2
  805b40:	d8800615 	stw	r2,24(sp)
  805b44:	003ebb06 	br	805634 <_dtoa_r+0x948>
  805b48:	d9801117 	ldw	r6,68(sp)
  805b4c:	d8800d17 	ldw	r2,52(sp)
  805b50:	d8000915 	stw	zero,36(sp)
  805b54:	308dc83a 	sub	r6,r6,r2
  805b58:	0087c83a 	sub	r3,zero,r2
  805b5c:	d9801115 	stw	r6,68(sp)
  805b60:	d8c01015 	stw	r3,64(sp)
  805b64:	003cfe06 	br	804f60 <_dtoa_r+0x274>
  805b68:	018dc83a 	sub	r6,zero,r6
  805b6c:	d9801115 	stw	r6,68(sp)
  805b70:	d8000a15 	stw	zero,40(sp)
  805b74:	003cf306 	br	804f44 <_dtoa_r+0x258>
  805b78:	d9000d17 	ldw	r4,52(sp)
  805b7c:	0809df40 	call	809df4 <__floatsidf>
  805b80:	880b883a 	mov	r5,r17
  805b84:	8009883a 	mov	r4,r16
  805b88:	180f883a 	mov	r7,r3
  805b8c:	100d883a 	mov	r6,r2
  805b90:	0809bd40 	call	809bd4 <__nedf2>
  805b94:	103ce126 	beq	r2,zero,804f1c <_dtoa_r+0x230>
  805b98:	d9800d17 	ldw	r6,52(sp)
  805b9c:	31bfffc4 	addi	r6,r6,-1
  805ba0:	d9800d15 	stw	r6,52(sp)
  805ba4:	003cdd06 	br	804f1c <_dtoa_r+0x230>
  805ba8:	d9000717 	ldw	r4,28(sp)
  805bac:	900b883a 	mov	r5,r18
  805bb0:	0806d480 	call	806d48 <__mcmp>
  805bb4:	103e8d0e 	bge	r2,zero,8055ec <_dtoa_r+0x900>
  805bb8:	d9400717 	ldw	r5,28(sp)
  805bbc:	d9001617 	ldw	r4,88(sp)
  805bc0:	01800284 	movi	r6,10
  805bc4:	000f883a 	mov	r7,zero
  805bc8:	08078a00 	call	8078a0 <__multadd>
  805bcc:	d9800d17 	ldw	r6,52(sp)
  805bd0:	d8800715 	stw	r2,28(sp)
  805bd4:	31bfffc4 	addi	r6,r6,-1
  805bd8:	d9800d15 	stw	r6,52(sp)
  805bdc:	b001a71e 	bne	r22,zero,80627c <_dtoa_r+0x1590>
  805be0:	d8800e17 	ldw	r2,56(sp)
  805be4:	d8800f15 	stw	r2,60(sp)
  805be8:	003e8006 	br	8055ec <_dtoa_r+0x900>
  805bec:	90800417 	ldw	r2,16(r18)
  805bf0:	1085883a 	add	r2,r2,r2
  805bf4:	1085883a 	add	r2,r2,r2
  805bf8:	1485883a 	add	r2,r2,r18
  805bfc:	11000417 	ldw	r4,16(r2)
  805c00:	0806c140 	call	806c14 <__hi0bits>
  805c04:	00c00804 	movi	r3,32
  805c08:	1887c83a 	sub	r3,r3,r2
  805c0c:	003e5a06 	br	805578 <_dtoa_r+0x88c>
  805c10:	d9400717 	ldw	r5,28(sp)
  805c14:	d9801017 	ldw	r6,64(sp)
  805c18:	d9001617 	ldw	r4,88(sp)
  805c1c:	08079a00 	call	8079a0 <__pow5mult>
  805c20:	d8800715 	stw	r2,28(sp)
  805c24:	003e4306 	br	805534 <_dtoa_r+0x848>
  805c28:	d9800f17 	ldw	r6,60(sp)
  805c2c:	d8800d17 	ldw	r2,52(sp)
  805c30:	d9800315 	stw	r6,12(sp)
  805c34:	d8800415 	stw	r2,16(sp)
  805c38:	d8c00b17 	ldw	r3,44(sp)
  805c3c:	1805003a 	cmpeq	r2,r3,zero
  805c40:	1000e21e 	bne	r2,zero,805fcc <_dtoa_r+0x12e0>
  805c44:	d9000317 	ldw	r4,12(sp)
  805c48:	0005883a 	mov	r2,zero
  805c4c:	00cff834 	movhi	r3,16352
  805c50:	200c90fa 	slli	r6,r4,3
  805c54:	01002074 	movhi	r4,129
  805c58:	213b7404 	addi	r4,r4,-4656
  805c5c:	180b883a 	mov	r5,r3
  805c60:	310d883a 	add	r6,r6,r4
  805c64:	327fff17 	ldw	r9,-4(r6)
  805c68:	323ffe17 	ldw	r8,-8(r6)
  805c6c:	1009883a 	mov	r4,r2
  805c70:	480f883a 	mov	r7,r9
  805c74:	400d883a 	mov	r6,r8
  805c78:	08098f40 	call	8098f4 <__divdf3>
  805c7c:	180b883a 	mov	r5,r3
  805c80:	b00d883a 	mov	r6,r22
  805c84:	b80f883a 	mov	r7,r23
  805c88:	1009883a 	mov	r4,r2
  805c8c:	080943c0 	call	80943c <__subdf3>
  805c90:	a80b883a 	mov	r5,r21
  805c94:	a009883a 	mov	r4,r20
  805c98:	d8c01915 	stw	r3,100(sp)
  805c9c:	d8801815 	stw	r2,96(sp)
  805ca0:	0809eec0 	call	809eec <__fixdfsi>
  805ca4:	1009883a 	mov	r4,r2
  805ca8:	1027883a 	mov	r19,r2
  805cac:	0809df40 	call	809df4 <__floatsidf>
  805cb0:	a80b883a 	mov	r5,r21
  805cb4:	a009883a 	mov	r4,r20
  805cb8:	180f883a 	mov	r7,r3
  805cbc:	100d883a 	mov	r6,r2
  805cc0:	080943c0 	call	80943c <__subdf3>
  805cc4:	d9801817 	ldw	r6,96(sp)
  805cc8:	1823883a 	mov	r17,r3
  805ccc:	d8801415 	stw	r2,80(sp)
  805cd0:	302d883a 	mov	r22,r6
  805cd4:	d9800517 	ldw	r6,20(sp)
  805cd8:	9cc00c04 	addi	r19,r19,48
  805cdc:	dc401515 	stw	r17,84(sp)
  805ce0:	d8c01917 	ldw	r3,100(sp)
  805ce4:	34c00005 	stb	r19,0(r6)
  805ce8:	d8800517 	ldw	r2,20(sp)
  805cec:	d9401917 	ldw	r5,100(sp)
  805cf0:	d9801417 	ldw	r6,80(sp)
  805cf4:	b009883a 	mov	r4,r22
  805cf8:	880f883a 	mov	r7,r17
  805cfc:	182f883a 	mov	r23,r3
  805d00:	17000044 	addi	fp,r2,1
  805d04:	0809c5c0 	call	809c5c <__gtdf2>
  805d08:	00804e16 	blt	zero,r2,805e44 <_dtoa_r+0x1158>
  805d0c:	d9801417 	ldw	r6,80(sp)
  805d10:	0005883a 	mov	r2,zero
  805d14:	00cffc34 	movhi	r3,16368
  805d18:	180b883a 	mov	r5,r3
  805d1c:	880f883a 	mov	r7,r17
  805d20:	1009883a 	mov	r4,r2
  805d24:	080943c0 	call	80943c <__subdf3>
  805d28:	d9401917 	ldw	r5,100(sp)
  805d2c:	180f883a 	mov	r7,r3
  805d30:	b009883a 	mov	r4,r22
  805d34:	100d883a 	mov	r6,r2
  805d38:	0809c5c0 	call	809c5c <__gtdf2>
  805d3c:	00bda216 	blt	zero,r2,8053c8 <_dtoa_r+0x6dc>
  805d40:	d8c00317 	ldw	r3,12(sp)
  805d44:	00800044 	movi	r2,1
  805d48:	10c01216 	blt	r2,r3,805d94 <_dtoa_r+0x10a8>
  805d4c:	003d4506 	br	805264 <_dtoa_r+0x578>
  805d50:	d9801417 	ldw	r6,80(sp)
  805d54:	0005883a 	mov	r2,zero
  805d58:	00cffc34 	movhi	r3,16368
  805d5c:	180b883a 	mov	r5,r3
  805d60:	880f883a 	mov	r7,r17
  805d64:	1009883a 	mov	r4,r2
  805d68:	080943c0 	call	80943c <__subdf3>
  805d6c:	d9c01b17 	ldw	r7,108(sp)
  805d70:	180b883a 	mov	r5,r3
  805d74:	1009883a 	mov	r4,r2
  805d78:	b00d883a 	mov	r6,r22
  805d7c:	0809d6c0 	call	809d6c <__ltdf2>
  805d80:	103d9116 	blt	r2,zero,8053c8 <_dtoa_r+0x6dc>
  805d84:	d9800517 	ldw	r6,20(sp)
  805d88:	d9000317 	ldw	r4,12(sp)
  805d8c:	3105883a 	add	r2,r6,r4
  805d90:	e0bd3426 	beq	fp,r2,805264 <_dtoa_r+0x578>
  805d94:	04500934 	movhi	r17,16420
  805d98:	0021883a 	mov	r16,zero
  805d9c:	b80b883a 	mov	r5,r23
  805da0:	b009883a 	mov	r4,r22
  805da4:	800d883a 	mov	r6,r16
  805da8:	880f883a 	mov	r7,r17
  805dac:	08095300 	call	809530 <__muldf3>
  805db0:	d9401517 	ldw	r5,84(sp)
  805db4:	d9001417 	ldw	r4,80(sp)
  805db8:	880f883a 	mov	r7,r17
  805dbc:	000d883a 	mov	r6,zero
  805dc0:	d8801a15 	stw	r2,104(sp)
  805dc4:	d8c01b15 	stw	r3,108(sp)
  805dc8:	08095300 	call	809530 <__muldf3>
  805dcc:	180b883a 	mov	r5,r3
  805dd0:	1009883a 	mov	r4,r2
  805dd4:	1823883a 	mov	r17,r3
  805dd8:	1021883a 	mov	r16,r2
  805ddc:	0809eec0 	call	809eec <__fixdfsi>
  805de0:	1009883a 	mov	r4,r2
  805de4:	102b883a 	mov	r21,r2
  805de8:	0809df40 	call	809df4 <__floatsidf>
  805dec:	880b883a 	mov	r5,r17
  805df0:	8009883a 	mov	r4,r16
  805df4:	180f883a 	mov	r7,r3
  805df8:	100d883a 	mov	r6,r2
  805dfc:	080943c0 	call	80943c <__subdf3>
  805e00:	1021883a 	mov	r16,r2
  805e04:	d9001b17 	ldw	r4,108(sp)
  805e08:	1823883a 	mov	r17,r3
  805e0c:	dc001415 	stw	r16,80(sp)
  805e10:	ad400c04 	addi	r21,r21,48
  805e14:	dc401515 	stw	r17,84(sp)
  805e18:	d8801a17 	ldw	r2,104(sp)
  805e1c:	e5400005 	stb	r21,0(fp)
  805e20:	202f883a 	mov	r23,r4
  805e24:	d9c01b17 	ldw	r7,108(sp)
  805e28:	d9001417 	ldw	r4,80(sp)
  805e2c:	880b883a 	mov	r5,r17
  805e30:	100d883a 	mov	r6,r2
  805e34:	102d883a 	mov	r22,r2
  805e38:	e7000044 	addi	fp,fp,1
  805e3c:	0809d6c0 	call	809d6c <__ltdf2>
  805e40:	103fc30e 	bge	r2,zero,805d50 <_dtoa_r+0x1064>
  805e44:	d9000417 	ldw	r4,16(sp)
  805e48:	d9000d15 	stw	r4,52(sp)
  805e4c:	003d7106 	br	805414 <_dtoa_r+0x728>
  805e50:	d9801717 	ldw	r6,92(sp)
  805e54:	00800084 	movi	r2,2
  805e58:	11bde60e 	bge	r2,r6,8055f4 <_dtoa_r+0x908>
  805e5c:	203cfb1e 	bne	r4,zero,80524c <_dtoa_r+0x560>
  805e60:	d9001617 	ldw	r4,88(sp)
  805e64:	900b883a 	mov	r5,r18
  805e68:	01800144 	movi	r6,5
  805e6c:	000f883a 	mov	r7,zero
  805e70:	08078a00 	call	8078a0 <__multadd>
  805e74:	d9000717 	ldw	r4,28(sp)
  805e78:	100b883a 	mov	r5,r2
  805e7c:	1025883a 	mov	r18,r2
  805e80:	0806d480 	call	806d48 <__mcmp>
  805e84:	00bcf10e 	bge	zero,r2,80524c <_dtoa_r+0x560>
  805e88:	d8c00d17 	ldw	r3,52(sp)
  805e8c:	d9000517 	ldw	r4,20(sp)
  805e90:	d8000615 	stw	zero,24(sp)
  805e94:	18c00044 	addi	r3,r3,1
  805e98:	d8c00d15 	stw	r3,52(sp)
  805e9c:	00800c44 	movi	r2,49
  805ea0:	27000044 	addi	fp,r4,1
  805ea4:	20800005 	stb	r2,0(r4)
  805ea8:	003e8906 	br	8058d0 <_dtoa_r+0xbe4>
  805eac:	d8c00517 	ldw	r3,20(sp)
  805eb0:	003bc206 	br	804dbc <_dtoa_r+0xd0>
  805eb4:	01802074 	movhi	r6,129
  805eb8:	31bba604 	addi	r6,r6,-4456
  805ebc:	30c00917 	ldw	r3,36(r6)
  805ec0:	30800817 	ldw	r2,32(r6)
  805ec4:	d9001217 	ldw	r4,72(sp)
  805ec8:	d9401317 	ldw	r5,76(sp)
  805ecc:	180f883a 	mov	r7,r3
  805ed0:	100d883a 	mov	r6,r2
  805ed4:	08098f40 	call	8098f4 <__divdf3>
  805ed8:	948003cc 	andi	r18,r18,15
  805edc:	058000c4 	movi	r22,3
  805ee0:	1029883a 	mov	r20,r2
  805ee4:	182b883a 	mov	r21,r3
  805ee8:	003c8906 	br	805110 <_dtoa_r+0x424>
  805eec:	d9001017 	ldw	r4,64(sp)
  805ef0:	d9800917 	ldw	r6,36(sp)
  805ef4:	0025883a 	mov	r18,zero
  805ef8:	1105c83a 	sub	r2,r2,r4
  805efc:	2089883a 	add	r4,r4,r2
  805f00:	308d883a 	add	r6,r6,r2
  805f04:	d9001015 	stw	r4,64(sp)
  805f08:	d9800915 	stw	r6,36(sp)
  805f0c:	003e3206 	br	8057d8 <_dtoa_r+0xaec>
  805f10:	28800044 	addi	r2,r5,1
  805f14:	27000044 	addi	fp,r4,1
  805f18:	20800005 	stb	r2,0(r4)
  805f1c:	003e6c06 	br	8058d0 <_dtoa_r+0xbe4>
  805f20:	d8800f17 	ldw	r2,60(sp)
  805f24:	00bce016 	blt	zero,r2,8052a8 <_dtoa_r+0x5bc>
  805f28:	d9800f17 	ldw	r6,60(sp)
  805f2c:	303cc51e 	bne	r6,zero,805244 <_dtoa_r+0x558>
  805f30:	0005883a 	mov	r2,zero
  805f34:	00d00534 	movhi	r3,16404
  805f38:	980b883a 	mov	r5,r19
  805f3c:	180f883a 	mov	r7,r3
  805f40:	9009883a 	mov	r4,r18
  805f44:	100d883a 	mov	r6,r2
  805f48:	08095300 	call	809530 <__muldf3>
  805f4c:	180b883a 	mov	r5,r3
  805f50:	a80f883a 	mov	r7,r21
  805f54:	1009883a 	mov	r4,r2
  805f58:	a00d883a 	mov	r6,r20
  805f5c:	0809ce40 	call	809ce4 <__gedf2>
  805f60:	103cb80e 	bge	r2,zero,805244 <_dtoa_r+0x558>
  805f64:	0027883a 	mov	r19,zero
  805f68:	0025883a 	mov	r18,zero
  805f6c:	003fc606 	br	805e88 <_dtoa_r+0x119c>
  805f70:	99400117 	ldw	r5,4(r19)
  805f74:	d9001617 	ldw	r4,88(sp)
  805f78:	080716c0 	call	80716c <_Balloc>
  805f7c:	99800417 	ldw	r6,16(r19)
  805f80:	11000304 	addi	r4,r2,12
  805f84:	99400304 	addi	r5,r19,12
  805f88:	318d883a 	add	r6,r6,r6
  805f8c:	318d883a 	add	r6,r6,r6
  805f90:	31800204 	addi	r6,r6,8
  805f94:	1023883a 	mov	r17,r2
  805f98:	0806a6c0 	call	806a6c <memcpy>
  805f9c:	d9001617 	ldw	r4,88(sp)
  805fa0:	880b883a 	mov	r5,r17
  805fa4:	01800044 	movi	r6,1
  805fa8:	08075300 	call	807530 <__lshift>
  805fac:	100b883a 	mov	r5,r2
  805fb0:	003d9c06 	br	805624 <_dtoa_r+0x938>
  805fb4:	00800e44 	movi	r2,57
  805fb8:	b8807026 	beq	r23,r2,80617c <_dtoa_r+0x1490>
  805fbc:	b8800044 	addi	r2,r23,1
  805fc0:	b7000044 	addi	fp,r22,1
  805fc4:	b0800005 	stb	r2,0(r22)
  805fc8:	003e4106 	br	8058d0 <_dtoa_r+0xbe4>
  805fcc:	d8800317 	ldw	r2,12(sp)
  805fd0:	01802074 	movhi	r6,129
  805fd4:	31bb7404 	addi	r6,r6,-4656
  805fd8:	b009883a 	mov	r4,r22
  805fdc:	100e90fa 	slli	r7,r2,3
  805fe0:	b80b883a 	mov	r5,r23
  805fe4:	398f883a 	add	r7,r7,r6
  805fe8:	38bffe17 	ldw	r2,-8(r7)
  805fec:	d9800517 	ldw	r6,20(sp)
  805ff0:	38ffff17 	ldw	r3,-4(r7)
  805ff4:	37000044 	addi	fp,r6,1
  805ff8:	180f883a 	mov	r7,r3
  805ffc:	100d883a 	mov	r6,r2
  806000:	08095300 	call	809530 <__muldf3>
  806004:	a80b883a 	mov	r5,r21
  806008:	a009883a 	mov	r4,r20
  80600c:	182f883a 	mov	r23,r3
  806010:	102d883a 	mov	r22,r2
  806014:	0809eec0 	call	809eec <__fixdfsi>
  806018:	1009883a 	mov	r4,r2
  80601c:	1027883a 	mov	r19,r2
  806020:	0809df40 	call	809df4 <__floatsidf>
  806024:	a80b883a 	mov	r5,r21
  806028:	a009883a 	mov	r4,r20
  80602c:	180f883a 	mov	r7,r3
  806030:	100d883a 	mov	r6,r2
  806034:	080943c0 	call	80943c <__subdf3>
  806038:	180b883a 	mov	r5,r3
  80603c:	d8c00517 	ldw	r3,20(sp)
  806040:	9cc00c04 	addi	r19,r19,48
  806044:	1009883a 	mov	r4,r2
  806048:	1cc00005 	stb	r19,0(r3)
  80604c:	2021883a 	mov	r16,r4
  806050:	d9000317 	ldw	r4,12(sp)
  806054:	00800044 	movi	r2,1
  806058:	2823883a 	mov	r17,r5
  80605c:	20802226 	beq	r4,r2,8060e8 <_dtoa_r+0x13fc>
  806060:	1029883a 	mov	r20,r2
  806064:	0005883a 	mov	r2,zero
  806068:	00d00934 	movhi	r3,16420
  80606c:	180f883a 	mov	r7,r3
  806070:	100d883a 	mov	r6,r2
  806074:	880b883a 	mov	r5,r17
  806078:	8009883a 	mov	r4,r16
  80607c:	08095300 	call	809530 <__muldf3>
  806080:	180b883a 	mov	r5,r3
  806084:	1009883a 	mov	r4,r2
  806088:	1823883a 	mov	r17,r3
  80608c:	1021883a 	mov	r16,r2
  806090:	0809eec0 	call	809eec <__fixdfsi>
  806094:	1009883a 	mov	r4,r2
  806098:	102b883a 	mov	r21,r2
  80609c:	0809df40 	call	809df4 <__floatsidf>
  8060a0:	880b883a 	mov	r5,r17
  8060a4:	8009883a 	mov	r4,r16
  8060a8:	180f883a 	mov	r7,r3
  8060ac:	100d883a 	mov	r6,r2
  8060b0:	080943c0 	call	80943c <__subdf3>
  8060b4:	180b883a 	mov	r5,r3
  8060b8:	d8c00517 	ldw	r3,20(sp)
  8060bc:	1009883a 	mov	r4,r2
  8060c0:	ad400c04 	addi	r21,r21,48
  8060c4:	1d05883a 	add	r2,r3,r20
  8060c8:	15400005 	stb	r21,0(r2)
  8060cc:	2021883a 	mov	r16,r4
  8060d0:	d9000317 	ldw	r4,12(sp)
  8060d4:	a5000044 	addi	r20,r20,1
  8060d8:	2823883a 	mov	r17,r5
  8060dc:	a13fe11e 	bne	r20,r4,806064 <_dtoa_r+0x1378>
  8060e0:	e505883a 	add	r2,fp,r20
  8060e4:	173fffc4 	addi	fp,r2,-1
  8060e8:	0025883a 	mov	r18,zero
  8060ec:	04cff834 	movhi	r19,16352
  8060f0:	b009883a 	mov	r4,r22
  8060f4:	b80b883a 	mov	r5,r23
  8060f8:	900d883a 	mov	r6,r18
  8060fc:	980f883a 	mov	r7,r19
  806100:	08094bc0 	call	8094bc <__adddf3>
  806104:	180b883a 	mov	r5,r3
  806108:	1009883a 	mov	r4,r2
  80610c:	800d883a 	mov	r6,r16
  806110:	880f883a 	mov	r7,r17
  806114:	0809d6c0 	call	809d6c <__ltdf2>
  806118:	103cab16 	blt	r2,zero,8053c8 <_dtoa_r+0x6dc>
  80611c:	0009883a 	mov	r4,zero
  806120:	980b883a 	mov	r5,r19
  806124:	b80f883a 	mov	r7,r23
  806128:	b00d883a 	mov	r6,r22
  80612c:	080943c0 	call	80943c <__subdf3>
  806130:	180b883a 	mov	r5,r3
  806134:	880f883a 	mov	r7,r17
  806138:	1009883a 	mov	r4,r2
  80613c:	800d883a 	mov	r6,r16
  806140:	0809c5c0 	call	809c5c <__gtdf2>
  806144:	00bc470e 	bge	zero,r2,805264 <_dtoa_r+0x578>
  806148:	00c00c04 	movi	r3,48
  80614c:	e73fffc4 	addi	fp,fp,-1
  806150:	e0800007 	ldb	r2,0(fp)
  806154:	10fffd26 	beq	r2,r3,80614c <_dtoa_r+0x1460>
  806158:	d9800417 	ldw	r6,16(sp)
  80615c:	e7000044 	addi	fp,fp,1
  806160:	d9800d15 	stw	r6,52(sp)
  806164:	003cab06 	br	805414 <_dtoa_r+0x728>
  806168:	d8c00f17 	ldw	r3,60(sp)
  80616c:	d9001117 	ldw	r4,68(sp)
  806170:	20e1c83a 	sub	r16,r4,r3
  806174:	0007883a 	mov	r3,zero
  806178:	003d9b06 	br	8057e8 <_dtoa_r+0xafc>
  80617c:	00800e44 	movi	r2,57
  806180:	b0800005 	stb	r2,0(r22)
  806184:	b5800044 	addi	r22,r22,1
  806188:	003dc106 	br	805890 <_dtoa_r+0xba4>
  80618c:	05800084 	movi	r22,2
  806190:	003bf706 	br	805170 <_dtoa_r+0x484>
  806194:	d9000f17 	ldw	r4,60(sp)
  806198:	013c000e 	bge	zero,r4,80519c <_dtoa_r+0x4b0>
  80619c:	d9800e17 	ldw	r6,56(sp)
  8061a0:	01bc300e 	bge	zero,r6,805264 <_dtoa_r+0x578>
  8061a4:	0005883a 	mov	r2,zero
  8061a8:	00d00934 	movhi	r3,16420
  8061ac:	a80b883a 	mov	r5,r21
  8061b0:	180f883a 	mov	r7,r3
  8061b4:	a009883a 	mov	r4,r20
  8061b8:	100d883a 	mov	r6,r2
  8061bc:	08095300 	call	809530 <__muldf3>
  8061c0:	b1000044 	addi	r4,r22,1
  8061c4:	1021883a 	mov	r16,r2
  8061c8:	1823883a 	mov	r17,r3
  8061cc:	0809df40 	call	809df4 <__floatsidf>
  8061d0:	880b883a 	mov	r5,r17
  8061d4:	8009883a 	mov	r4,r16
  8061d8:	180f883a 	mov	r7,r3
  8061dc:	100d883a 	mov	r6,r2
  8061e0:	08095300 	call	809530 <__muldf3>
  8061e4:	0011883a 	mov	r8,zero
  8061e8:	02500734 	movhi	r9,16412
  8061ec:	180b883a 	mov	r5,r3
  8061f0:	480f883a 	mov	r7,r9
  8061f4:	1009883a 	mov	r4,r2
  8061f8:	400d883a 	mov	r6,r8
  8061fc:	08094bc0 	call	8094bc <__adddf3>
  806200:	102d883a 	mov	r22,r2
  806204:	00bf3034 	movhi	r2,64704
  806208:	10ef883a 	add	r23,r2,r3
  80620c:	d8800d17 	ldw	r2,52(sp)
  806210:	d8c00e17 	ldw	r3,56(sp)
  806214:	8029883a 	mov	r20,r16
  806218:	10bfffc4 	addi	r2,r2,-1
  80621c:	882b883a 	mov	r21,r17
  806220:	d8800415 	stw	r2,16(sp)
  806224:	d8c00315 	stw	r3,12(sp)
  806228:	003e8306 	br	805c38 <_dtoa_r+0xf4c>
  80622c:	d8800117 	ldw	r2,4(sp)
  806230:	dc001117 	ldw	r16,68(sp)
  806234:	dc801017 	ldw	r18,64(sp)
  806238:	00c00d84 	movi	r3,54
  80623c:	1887c83a 	sub	r3,r3,r2
  806240:	003d6906 	br	8057e8 <_dtoa_r+0xafc>
  806244:	01800044 	movi	r6,1
  806248:	3021883a 	mov	r16,r6
  80624c:	d9800f15 	stw	r6,60(sp)
  806250:	d9802615 	stw	r6,152(sp)
  806254:	d9800e15 	stw	r6,56(sp)
  806258:	003b9306 	br	8050a8 <_dtoa_r+0x3bc>
  80625c:	b021883a 	mov	r16,r22
  806260:	dd800f15 	stw	r22,60(sp)
  806264:	003b9006 	br	8050a8 <_dtoa_r+0x3bc>
  806268:	103e221e 	bne	r2,zero,805af4 <_dtoa_r+0xe08>
  80626c:	b880004c 	andi	r2,r23,1
  806270:	1005003a 	cmpeq	r2,r2,zero
  806274:	103e1f1e 	bne	r2,zero,805af4 <_dtoa_r+0xe08>
  806278:	003e1b06 	br	805ae8 <_dtoa_r+0xdfc>
  80627c:	d9001617 	ldw	r4,88(sp)
  806280:	980b883a 	mov	r5,r19
  806284:	01800284 	movi	r6,10
  806288:	000f883a 	mov	r7,zero
  80628c:	08078a00 	call	8078a0 <__multadd>
  806290:	d8c00e17 	ldw	r3,56(sp)
  806294:	1027883a 	mov	r19,r2
  806298:	d8c00f15 	stw	r3,60(sp)
  80629c:	003cd306 	br	8055ec <_dtoa_r+0x900>

008062a0 <__sflags>:
  8062a0:	28c00007 	ldb	r3,0(r5)
  8062a4:	00801c84 	movi	r2,114
  8062a8:	18800926 	beq	r3,r2,8062d0 <__sflags+0x30>
  8062ac:	00801dc4 	movi	r2,119
  8062b0:	18801426 	beq	r3,r2,806304 <__sflags+0x64>
  8062b4:	00801844 	movi	r2,97
  8062b8:	18801626 	beq	r3,r2,806314 <__sflags+0x74>
  8062bc:	0007883a 	mov	r3,zero
  8062c0:	00800584 	movi	r2,22
  8062c4:	20800015 	stw	r2,0(r4)
  8062c8:	1805883a 	mov	r2,r3
  8062cc:	f800283a 	ret
  8062d0:	000f883a 	mov	r7,zero
  8062d4:	0011883a 	mov	r8,zero
  8062d8:	00c00104 	movi	r3,4
  8062dc:	28800047 	ldb	r2,1(r5)
  8062e0:	10000426 	beq	r2,zero,8062f4 <__sflags+0x54>
  8062e4:	01000ac4 	movi	r4,43
  8062e8:	11000e26 	beq	r2,r4,806324 <__sflags+0x84>
  8062ec:	28800087 	ldb	r2,2(r5)
  8062f0:	11000c26 	beq	r2,r4,806324 <__sflags+0x84>
  8062f4:	3a04b03a 	or	r2,r7,r8
  8062f8:	30800015 	stw	r2,0(r6)
  8062fc:	1805883a 	mov	r2,r3
  806300:	f800283a 	ret
  806304:	01c00044 	movi	r7,1
  806308:	02018004 	movi	r8,1536
  80630c:	00c00204 	movi	r3,8
  806310:	003ff206 	br	8062dc <__sflags+0x3c>
  806314:	01c00044 	movi	r7,1
  806318:	02008204 	movi	r8,520
  80631c:	00c04204 	movi	r3,264
  806320:	003fee06 	br	8062dc <__sflags+0x3c>
  806324:	00bffcc4 	movi	r2,-13
  806328:	1884703a 	and	r2,r3,r2
  80632c:	01c00084 	movi	r7,2
  806330:	10c00414 	ori	r3,r2,16
  806334:	3a04b03a 	or	r2,r7,r8
  806338:	30800015 	stw	r2,0(r6)
  80633c:	003fef06 	br	8062fc <__sflags+0x5c>

00806340 <__sfvwrite_r>:
  806340:	30800217 	ldw	r2,8(r6)
  806344:	defff504 	addi	sp,sp,-44
  806348:	df000915 	stw	fp,36(sp)
  80634c:	dd800715 	stw	r22,28(sp)
  806350:	dc800315 	stw	r18,12(sp)
  806354:	dfc00a15 	stw	ra,40(sp)
  806358:	ddc00815 	stw	r23,32(sp)
  80635c:	dd400615 	stw	r21,24(sp)
  806360:	dd000515 	stw	r20,20(sp)
  806364:	dcc00415 	stw	r19,16(sp)
  806368:	dc400215 	stw	r17,8(sp)
  80636c:	dc000115 	stw	r16,4(sp)
  806370:	302d883a 	mov	r22,r6
  806374:	2039883a 	mov	fp,r4
  806378:	2825883a 	mov	r18,r5
  80637c:	10001c26 	beq	r2,zero,8063f0 <__sfvwrite_r+0xb0>
  806380:	29c0030b 	ldhu	r7,12(r5)
  806384:	3880020c 	andi	r2,r7,8
  806388:	10002726 	beq	r2,zero,806428 <__sfvwrite_r+0xe8>
  80638c:	28800417 	ldw	r2,16(r5)
  806390:	10002526 	beq	r2,zero,806428 <__sfvwrite_r+0xe8>
  806394:	3880008c 	andi	r2,r7,2
  806398:	b5400017 	ldw	r21,0(r22)
  80639c:	10002826 	beq	r2,zero,806440 <__sfvwrite_r+0x100>
  8063a0:	0021883a 	mov	r16,zero
  8063a4:	0023883a 	mov	r17,zero
  8063a8:	880d883a 	mov	r6,r17
  8063ac:	e009883a 	mov	r4,fp
  8063b0:	00810004 	movi	r2,1024
  8063b4:	80006e26 	beq	r16,zero,806570 <__sfvwrite_r+0x230>
  8063b8:	800f883a 	mov	r7,r16
  8063bc:	91400717 	ldw	r5,28(r18)
  8063c0:	1400012e 	bgeu	r2,r16,8063c8 <__sfvwrite_r+0x88>
  8063c4:	100f883a 	mov	r7,r2
  8063c8:	90c00917 	ldw	r3,36(r18)
  8063cc:	183ee83a 	callr	r3
  8063d0:	1007883a 	mov	r3,r2
  8063d4:	80a1c83a 	sub	r16,r16,r2
  8063d8:	88a3883a 	add	r17,r17,r2
  8063dc:	00806d0e 	bge	zero,r2,806594 <__sfvwrite_r+0x254>
  8063e0:	b0800217 	ldw	r2,8(r22)
  8063e4:	10c5c83a 	sub	r2,r2,r3
  8063e8:	b0800215 	stw	r2,8(r22)
  8063ec:	103fee1e 	bne	r2,zero,8063a8 <__sfvwrite_r+0x68>
  8063f0:	0009883a 	mov	r4,zero
  8063f4:	2005883a 	mov	r2,r4
  8063f8:	dfc00a17 	ldw	ra,40(sp)
  8063fc:	df000917 	ldw	fp,36(sp)
  806400:	ddc00817 	ldw	r23,32(sp)
  806404:	dd800717 	ldw	r22,28(sp)
  806408:	dd400617 	ldw	r21,24(sp)
  80640c:	dd000517 	ldw	r20,20(sp)
  806410:	dcc00417 	ldw	r19,16(sp)
  806414:	dc800317 	ldw	r18,12(sp)
  806418:	dc400217 	ldw	r17,8(sp)
  80641c:	dc000117 	ldw	r16,4(sp)
  806420:	dec00b04 	addi	sp,sp,44
  806424:	f800283a 	ret
  806428:	08049280 	call	804928 <__swsetup_r>
  80642c:	1000e41e 	bne	r2,zero,8067c0 <__sfvwrite_r+0x480>
  806430:	91c0030b 	ldhu	r7,12(r18)
  806434:	b5400017 	ldw	r21,0(r22)
  806438:	3880008c 	andi	r2,r7,2
  80643c:	103fd81e 	bne	r2,zero,8063a0 <__sfvwrite_r+0x60>
  806440:	3880004c 	andi	r2,r7,1
  806444:	1005003a 	cmpeq	r2,r2,zero
  806448:	10005726 	beq	r2,zero,8065a8 <__sfvwrite_r+0x268>
  80644c:	0029883a 	mov	r20,zero
  806450:	002f883a 	mov	r23,zero
  806454:	a0004226 	beq	r20,zero,806560 <__sfvwrite_r+0x220>
  806458:	3880800c 	andi	r2,r7,512
  80645c:	94000217 	ldw	r16,8(r18)
  806460:	10008b26 	beq	r2,zero,806690 <__sfvwrite_r+0x350>
  806464:	800d883a 	mov	r6,r16
  806468:	a400a536 	bltu	r20,r16,806700 <__sfvwrite_r+0x3c0>
  80646c:	3881200c 	andi	r2,r7,1152
  806470:	10002726 	beq	r2,zero,806510 <__sfvwrite_r+0x1d0>
  806474:	90800517 	ldw	r2,20(r18)
  806478:	92000417 	ldw	r8,16(r18)
  80647c:	91400017 	ldw	r5,0(r18)
  806480:	1087883a 	add	r3,r2,r2
  806484:	1887883a 	add	r3,r3,r2
  806488:	1808d7fa 	srli	r4,r3,31
  80648c:	2a21c83a 	sub	r16,r5,r8
  806490:	80800044 	addi	r2,r16,1
  806494:	20c9883a 	add	r4,r4,r3
  806498:	2027d07a 	srai	r19,r4,1
  80649c:	a085883a 	add	r2,r20,r2
  8064a0:	980d883a 	mov	r6,r19
  8064a4:	9880022e 	bgeu	r19,r2,8064b0 <__sfvwrite_r+0x170>
  8064a8:	1027883a 	mov	r19,r2
  8064ac:	100d883a 	mov	r6,r2
  8064b0:	3881000c 	andi	r2,r7,1024
  8064b4:	1000b826 	beq	r2,zero,806798 <__sfvwrite_r+0x458>
  8064b8:	300b883a 	mov	r5,r6
  8064bc:	e009883a 	mov	r4,fp
  8064c0:	0801d240 	call	801d24 <_malloc_r>
  8064c4:	10003126 	beq	r2,zero,80658c <__sfvwrite_r+0x24c>
  8064c8:	91400417 	ldw	r5,16(r18)
  8064cc:	1009883a 	mov	r4,r2
  8064d0:	800d883a 	mov	r6,r16
  8064d4:	1023883a 	mov	r17,r2
  8064d8:	0806a6c0 	call	806a6c <memcpy>
  8064dc:	90c0030b 	ldhu	r3,12(r18)
  8064e0:	00beffc4 	movi	r2,-1025
  8064e4:	1886703a 	and	r3,r3,r2
  8064e8:	18c02014 	ori	r3,r3,128
  8064ec:	90c0030d 	sth	r3,12(r18)
  8064f0:	9c07c83a 	sub	r3,r19,r16
  8064f4:	8c05883a 	add	r2,r17,r16
  8064f8:	a00d883a 	mov	r6,r20
  8064fc:	a021883a 	mov	r16,r20
  806500:	90800015 	stw	r2,0(r18)
  806504:	90c00215 	stw	r3,8(r18)
  806508:	94400415 	stw	r17,16(r18)
  80650c:	94c00515 	stw	r19,20(r18)
  806510:	91000017 	ldw	r4,0(r18)
  806514:	b80b883a 	mov	r5,r23
  806518:	a023883a 	mov	r17,r20
  80651c:	0806b0c0 	call	806b0c <memmove>
  806520:	90c00217 	ldw	r3,8(r18)
  806524:	90800017 	ldw	r2,0(r18)
  806528:	a027883a 	mov	r19,r20
  80652c:	1c07c83a 	sub	r3,r3,r16
  806530:	1405883a 	add	r2,r2,r16
  806534:	90c00215 	stw	r3,8(r18)
  806538:	a021883a 	mov	r16,r20
  80653c:	90800015 	stw	r2,0(r18)
  806540:	b0800217 	ldw	r2,8(r22)
  806544:	1405c83a 	sub	r2,r2,r16
  806548:	b0800215 	stw	r2,8(r22)
  80654c:	103fa826 	beq	r2,zero,8063f0 <__sfvwrite_r+0xb0>
  806550:	a469c83a 	sub	r20,r20,r17
  806554:	91c0030b 	ldhu	r7,12(r18)
  806558:	bcef883a 	add	r23,r23,r19
  80655c:	a03fbe1e 	bne	r20,zero,806458 <__sfvwrite_r+0x118>
  806560:	adc00017 	ldw	r23,0(r21)
  806564:	ad000117 	ldw	r20,4(r21)
  806568:	ad400204 	addi	r21,r21,8
  80656c:	003fb906 	br	806454 <__sfvwrite_r+0x114>
  806570:	ac400017 	ldw	r17,0(r21)
  806574:	ac000117 	ldw	r16,4(r21)
  806578:	ad400204 	addi	r21,r21,8
  80657c:	003f8a06 	br	8063a8 <__sfvwrite_r+0x68>
  806580:	91400417 	ldw	r5,16(r18)
  806584:	e009883a 	mov	r4,fp
  806588:	08012280 	call	801228 <_free_r>
  80658c:	00800304 	movi	r2,12
  806590:	e0800015 	stw	r2,0(fp)
  806594:	9080030b 	ldhu	r2,12(r18)
  806598:	013fffc4 	movi	r4,-1
  80659c:	10801014 	ori	r2,r2,64
  8065a0:	9080030d 	sth	r2,12(r18)
  8065a4:	003f9306 	br	8063f4 <__sfvwrite_r+0xb4>
  8065a8:	0027883a 	mov	r19,zero
  8065ac:	002f883a 	mov	r23,zero
  8065b0:	d8000015 	stw	zero,0(sp)
  8065b4:	0029883a 	mov	r20,zero
  8065b8:	98001e26 	beq	r19,zero,806634 <__sfvwrite_r+0x2f4>
  8065bc:	d8c00017 	ldw	r3,0(sp)
  8065c0:	1804c03a 	cmpne	r2,r3,zero
  8065c4:	10005e26 	beq	r2,zero,806740 <__sfvwrite_r+0x400>
  8065c8:	9821883a 	mov	r16,r19
  8065cc:	a4c0012e 	bgeu	r20,r19,8065d4 <__sfvwrite_r+0x294>
  8065d0:	a021883a 	mov	r16,r20
  8065d4:	91000017 	ldw	r4,0(r18)
  8065d8:	90800417 	ldw	r2,16(r18)
  8065dc:	91800217 	ldw	r6,8(r18)
  8065e0:	91c00517 	ldw	r7,20(r18)
  8065e4:	1100022e 	bgeu	r2,r4,8065f0 <__sfvwrite_r+0x2b0>
  8065e8:	31e3883a 	add	r17,r6,r7
  8065ec:	8c001616 	blt	r17,r16,806648 <__sfvwrite_r+0x308>
  8065f0:	81c03816 	blt	r16,r7,8066d4 <__sfvwrite_r+0x394>
  8065f4:	90c00917 	ldw	r3,36(r18)
  8065f8:	91400717 	ldw	r5,28(r18)
  8065fc:	e009883a 	mov	r4,fp
  806600:	b80d883a 	mov	r6,r23
  806604:	183ee83a 	callr	r3
  806608:	1023883a 	mov	r17,r2
  80660c:	00bfe10e 	bge	zero,r2,806594 <__sfvwrite_r+0x254>
  806610:	a469c83a 	sub	r20,r20,r17
  806614:	a0001826 	beq	r20,zero,806678 <__sfvwrite_r+0x338>
  806618:	b0800217 	ldw	r2,8(r22)
  80661c:	1445c83a 	sub	r2,r2,r17
  806620:	b0800215 	stw	r2,8(r22)
  806624:	103f7226 	beq	r2,zero,8063f0 <__sfvwrite_r+0xb0>
  806628:	9c67c83a 	sub	r19,r19,r17
  80662c:	bc6f883a 	add	r23,r23,r17
  806630:	983fe21e 	bne	r19,zero,8065bc <__sfvwrite_r+0x27c>
  806634:	adc00017 	ldw	r23,0(r21)
  806638:	acc00117 	ldw	r19,4(r21)
  80663c:	ad400204 	addi	r21,r21,8
  806640:	d8000015 	stw	zero,0(sp)
  806644:	003fdc06 	br	8065b8 <__sfvwrite_r+0x278>
  806648:	b80b883a 	mov	r5,r23
  80664c:	880d883a 	mov	r6,r17
  806650:	0806b0c0 	call	806b0c <memmove>
  806654:	90c00017 	ldw	r3,0(r18)
  806658:	e009883a 	mov	r4,fp
  80665c:	900b883a 	mov	r5,r18
  806660:	1c47883a 	add	r3,r3,r17
  806664:	90c00015 	stw	r3,0(r18)
  806668:	0800a9c0 	call	800a9c <_fflush_r>
  80666c:	103fc91e 	bne	r2,zero,806594 <__sfvwrite_r+0x254>
  806670:	a469c83a 	sub	r20,r20,r17
  806674:	a03fe81e 	bne	r20,zero,806618 <__sfvwrite_r+0x2d8>
  806678:	e009883a 	mov	r4,fp
  80667c:	900b883a 	mov	r5,r18
  806680:	0800a9c0 	call	800a9c <_fflush_r>
  806684:	103fc31e 	bne	r2,zero,806594 <__sfvwrite_r+0x254>
  806688:	d8000015 	stw	zero,0(sp)
  80668c:	003fe206 	br	806618 <__sfvwrite_r+0x2d8>
  806690:	91000017 	ldw	r4,0(r18)
  806694:	90800417 	ldw	r2,16(r18)
  806698:	1100022e 	bgeu	r2,r4,8066a4 <__sfvwrite_r+0x364>
  80669c:	8023883a 	mov	r17,r16
  8066a0:	85003136 	bltu	r16,r20,806768 <__sfvwrite_r+0x428>
  8066a4:	91c00517 	ldw	r7,20(r18)
  8066a8:	a1c01836 	bltu	r20,r7,80670c <__sfvwrite_r+0x3cc>
  8066ac:	90c00917 	ldw	r3,36(r18)
  8066b0:	91400717 	ldw	r5,28(r18)
  8066b4:	e009883a 	mov	r4,fp
  8066b8:	b80d883a 	mov	r6,r23
  8066bc:	183ee83a 	callr	r3
  8066c0:	1021883a 	mov	r16,r2
  8066c4:	00bfb30e 	bge	zero,r2,806594 <__sfvwrite_r+0x254>
  8066c8:	1023883a 	mov	r17,r2
  8066cc:	1027883a 	mov	r19,r2
  8066d0:	003f9b06 	br	806540 <__sfvwrite_r+0x200>
  8066d4:	b80b883a 	mov	r5,r23
  8066d8:	800d883a 	mov	r6,r16
  8066dc:	0806b0c0 	call	806b0c <memmove>
  8066e0:	90c00217 	ldw	r3,8(r18)
  8066e4:	90800017 	ldw	r2,0(r18)
  8066e8:	8023883a 	mov	r17,r16
  8066ec:	1c07c83a 	sub	r3,r3,r16
  8066f0:	1405883a 	add	r2,r2,r16
  8066f4:	90c00215 	stw	r3,8(r18)
  8066f8:	90800015 	stw	r2,0(r18)
  8066fc:	003fc406 	br	806610 <__sfvwrite_r+0x2d0>
  806700:	a00d883a 	mov	r6,r20
  806704:	a021883a 	mov	r16,r20
  806708:	003f8106 	br	806510 <__sfvwrite_r+0x1d0>
  80670c:	b80b883a 	mov	r5,r23
  806710:	a00d883a 	mov	r6,r20
  806714:	0806b0c0 	call	806b0c <memmove>
  806718:	90c00217 	ldw	r3,8(r18)
  80671c:	90800017 	ldw	r2,0(r18)
  806720:	a021883a 	mov	r16,r20
  806724:	1d07c83a 	sub	r3,r3,r20
  806728:	1505883a 	add	r2,r2,r20
  80672c:	a023883a 	mov	r17,r20
  806730:	a027883a 	mov	r19,r20
  806734:	90c00215 	stw	r3,8(r18)
  806738:	90800015 	stw	r2,0(r18)
  80673c:	003f8006 	br	806540 <__sfvwrite_r+0x200>
  806740:	b809883a 	mov	r4,r23
  806744:	01400284 	movi	r5,10
  806748:	980d883a 	mov	r6,r19
  80674c:	08069880 	call	806988 <memchr>
  806750:	10001726 	beq	r2,zero,8067b0 <__sfvwrite_r+0x470>
  806754:	15c5c83a 	sub	r2,r2,r23
  806758:	15000044 	addi	r20,r2,1
  80675c:	00800044 	movi	r2,1
  806760:	d8800015 	stw	r2,0(sp)
  806764:	003f9806 	br	8065c8 <__sfvwrite_r+0x288>
  806768:	b80b883a 	mov	r5,r23
  80676c:	800d883a 	mov	r6,r16
  806770:	0806b0c0 	call	806b0c <memmove>
  806774:	90c00017 	ldw	r3,0(r18)
  806778:	e009883a 	mov	r4,fp
  80677c:	900b883a 	mov	r5,r18
  806780:	1c07883a 	add	r3,r3,r16
  806784:	90c00015 	stw	r3,0(r18)
  806788:	8027883a 	mov	r19,r16
  80678c:	0800a9c0 	call	800a9c <_fflush_r>
  806790:	103f6b26 	beq	r2,zero,806540 <__sfvwrite_r+0x200>
  806794:	003f7f06 	br	806594 <__sfvwrite_r+0x254>
  806798:	400b883a 	mov	r5,r8
  80679c:	e009883a 	mov	r4,fp
  8067a0:	0807c580 	call	807c58 <_realloc_r>
  8067a4:	103f7626 	beq	r2,zero,806580 <__sfvwrite_r+0x240>
  8067a8:	1023883a 	mov	r17,r2
  8067ac:	003f5006 	br	8064f0 <__sfvwrite_r+0x1b0>
  8067b0:	00c00044 	movi	r3,1
  8067b4:	9d000044 	addi	r20,r19,1
  8067b8:	d8c00015 	stw	r3,0(sp)
  8067bc:	003f8206 	br	8065c8 <__sfvwrite_r+0x288>
  8067c0:	9080030b 	ldhu	r2,12(r18)
  8067c4:	00c00244 	movi	r3,9
  8067c8:	013fffc4 	movi	r4,-1
  8067cc:	10801014 	ori	r2,r2,64
  8067d0:	9080030d 	sth	r2,12(r18)
  8067d4:	e0c00015 	stw	r3,0(fp)
  8067d8:	003f0606 	br	8063f4 <__sfvwrite_r+0xb4>

008067dc <_isatty_r>:
  8067dc:	defffd04 	addi	sp,sp,-12
  8067e0:	dc000015 	stw	r16,0(sp)
  8067e4:	04002074 	movhi	r16,129
  8067e8:	840b0804 	addi	r16,r16,11296
  8067ec:	dc400115 	stw	r17,4(sp)
  8067f0:	80000015 	stw	zero,0(r16)
  8067f4:	2023883a 	mov	r17,r4
  8067f8:	2809883a 	mov	r4,r5
  8067fc:	dfc00215 	stw	ra,8(sp)
  806800:	080ab940 	call	80ab94 <isatty>
  806804:	1007883a 	mov	r3,r2
  806808:	00bfffc4 	movi	r2,-1
  80680c:	18800626 	beq	r3,r2,806828 <_isatty_r+0x4c>
  806810:	1805883a 	mov	r2,r3
  806814:	dfc00217 	ldw	ra,8(sp)
  806818:	dc400117 	ldw	r17,4(sp)
  80681c:	dc000017 	ldw	r16,0(sp)
  806820:	dec00304 	addi	sp,sp,12
  806824:	f800283a 	ret
  806828:	80800017 	ldw	r2,0(r16)
  80682c:	103ff826 	beq	r2,zero,806810 <_isatty_r+0x34>
  806830:	88800015 	stw	r2,0(r17)
  806834:	1805883a 	mov	r2,r3
  806838:	dfc00217 	ldw	ra,8(sp)
  80683c:	dc400117 	ldw	r17,4(sp)
  806840:	dc000017 	ldw	r16,0(sp)
  806844:	dec00304 	addi	sp,sp,12
  806848:	f800283a 	ret

0080684c <__locale_charset>:
  80684c:	d0a00717 	ldw	r2,-32740(gp)
  806850:	f800283a 	ret

00806854 <_localeconv_r>:
  806854:	00802074 	movhi	r2,129
  806858:	10bb6804 	addi	r2,r2,-4704
  80685c:	f800283a 	ret

00806860 <localeconv>:
  806860:	00802074 	movhi	r2,129
  806864:	1083c704 	addi	r2,r2,3868
  806868:	11000017 	ldw	r4,0(r2)
  80686c:	08068541 	jmpi	806854 <_localeconv_r>

00806870 <_setlocale_r>:
  806870:	defffc04 	addi	sp,sp,-16
  806874:	00c02074 	movhi	r3,129
  806878:	18fb3f04 	addi	r3,r3,-4868
  80687c:	dc800215 	stw	r18,8(sp)
  806880:	dc400115 	stw	r17,4(sp)
  806884:	dc000015 	stw	r16,0(sp)
  806888:	2023883a 	mov	r17,r4
  80688c:	2825883a 	mov	r18,r5
  806890:	dfc00315 	stw	ra,12(sp)
  806894:	3021883a 	mov	r16,r6
  806898:	3009883a 	mov	r4,r6
  80689c:	180b883a 	mov	r5,r3
  8068a0:	30000926 	beq	r6,zero,8068c8 <_setlocale_r+0x58>
  8068a4:	08082bc0 	call	8082bc <strcmp>
  8068a8:	8009883a 	mov	r4,r16
  8068ac:	01402074 	movhi	r5,129
  8068b0:	297b4f04 	addi	r5,r5,-4804
  8068b4:	10000b1e 	bne	r2,zero,8068e4 <_setlocale_r+0x74>
  8068b8:	8c000d15 	stw	r16,52(r17)
  8068bc:	8c800c15 	stw	r18,48(r17)
  8068c0:	00c02074 	movhi	r3,129
  8068c4:	18fb3f04 	addi	r3,r3,-4868
  8068c8:	1805883a 	mov	r2,r3
  8068cc:	dfc00317 	ldw	ra,12(sp)
  8068d0:	dc800217 	ldw	r18,8(sp)
  8068d4:	dc400117 	ldw	r17,4(sp)
  8068d8:	dc000017 	ldw	r16,0(sp)
  8068dc:	dec00404 	addi	sp,sp,16
  8068e0:	f800283a 	ret
  8068e4:	08082bc0 	call	8082bc <strcmp>
  8068e8:	0007883a 	mov	r3,zero
  8068ec:	103ff226 	beq	r2,zero,8068b8 <_setlocale_r+0x48>
  8068f0:	003ff506 	br	8068c8 <_setlocale_r+0x58>

008068f4 <setlocale>:
  8068f4:	01802074 	movhi	r6,129
  8068f8:	3183c704 	addi	r6,r6,3868
  8068fc:	2007883a 	mov	r3,r4
  806900:	31000017 	ldw	r4,0(r6)
  806904:	280d883a 	mov	r6,r5
  806908:	180b883a 	mov	r5,r3
  80690c:	08068701 	jmpi	806870 <_setlocale_r>

00806910 <_lseek_r>:
  806910:	defffd04 	addi	sp,sp,-12
  806914:	dc000015 	stw	r16,0(sp)
  806918:	04002074 	movhi	r16,129
  80691c:	840b0804 	addi	r16,r16,11296
  806920:	dc400115 	stw	r17,4(sp)
  806924:	80000015 	stw	zero,0(r16)
  806928:	2023883a 	mov	r17,r4
  80692c:	2809883a 	mov	r4,r5
  806930:	300b883a 	mov	r5,r6
  806934:	380d883a 	mov	r6,r7
  806938:	dfc00215 	stw	ra,8(sp)
  80693c:	080ada00 	call	80ada0 <lseek>
  806940:	1007883a 	mov	r3,r2
  806944:	00bfffc4 	movi	r2,-1
  806948:	18800626 	beq	r3,r2,806964 <_lseek_r+0x54>
  80694c:	1805883a 	mov	r2,r3
  806950:	dfc00217 	ldw	ra,8(sp)
  806954:	dc400117 	ldw	r17,4(sp)
  806958:	dc000017 	ldw	r16,0(sp)
  80695c:	dec00304 	addi	sp,sp,12
  806960:	f800283a 	ret
  806964:	80800017 	ldw	r2,0(r16)
  806968:	103ff826 	beq	r2,zero,80694c <_lseek_r+0x3c>
  80696c:	88800015 	stw	r2,0(r17)
  806970:	1805883a 	mov	r2,r3
  806974:	dfc00217 	ldw	ra,8(sp)
  806978:	dc400117 	ldw	r17,4(sp)
  80697c:	dc000017 	ldw	r16,0(sp)
  806980:	dec00304 	addi	sp,sp,12
  806984:	f800283a 	ret

00806988 <memchr>:
  806988:	008000c4 	movi	r2,3
  80698c:	29403fcc 	andi	r5,r5,255
  806990:	2007883a 	mov	r3,r4
  806994:	1180022e 	bgeu	r2,r6,8069a0 <memchr+0x18>
  806998:	2084703a 	and	r2,r4,r2
  80699c:	10000b26 	beq	r2,zero,8069cc <memchr+0x44>
  8069a0:	313fffc4 	addi	r4,r6,-1
  8069a4:	3000051e 	bne	r6,zero,8069bc <memchr+0x34>
  8069a8:	00002c06 	br	806a5c <memchr+0xd4>
  8069ac:	213fffc4 	addi	r4,r4,-1
  8069b0:	00bfffc4 	movi	r2,-1
  8069b4:	18c00044 	addi	r3,r3,1
  8069b8:	20802826 	beq	r4,r2,806a5c <memchr+0xd4>
  8069bc:	18800003 	ldbu	r2,0(r3)
  8069c0:	28bffa1e 	bne	r5,r2,8069ac <memchr+0x24>
  8069c4:	1805883a 	mov	r2,r3
  8069c8:	f800283a 	ret
  8069cc:	0011883a 	mov	r8,zero
  8069d0:	0007883a 	mov	r3,zero
  8069d4:	01c00104 	movi	r7,4
  8069d8:	4004923a 	slli	r2,r8,8
  8069dc:	18c00044 	addi	r3,r3,1
  8069e0:	1151883a 	add	r8,r2,r5
  8069e4:	19fffc1e 	bne	r3,r7,8069d8 <memchr+0x50>
  8069e8:	02bfbff4 	movhi	r10,65279
  8069ec:	52bfbfc4 	addi	r10,r10,-257
  8069f0:	02602074 	movhi	r9,32897
  8069f4:	4a602004 	addi	r9,r9,-32640
  8069f8:	02c000c4 	movi	r11,3
  8069fc:	20800017 	ldw	r2,0(r4)
  806a00:	31bfff04 	addi	r6,r6,-4
  806a04:	200f883a 	mov	r7,r4
  806a08:	1204f03a 	xor	r2,r2,r8
  806a0c:	1287883a 	add	r3,r2,r10
  806a10:	1a46703a 	and	r3,r3,r9
  806a14:	0084303a 	nor	r2,zero,r2
  806a18:	10c4703a 	and	r2,r2,r3
  806a1c:	10000b26 	beq	r2,zero,806a4c <memchr+0xc4>
  806a20:	20800003 	ldbu	r2,0(r4)
  806a24:	28800f26 	beq	r5,r2,806a64 <memchr+0xdc>
  806a28:	20800043 	ldbu	r2,1(r4)
  806a2c:	21c00044 	addi	r7,r4,1
  806a30:	28800c26 	beq	r5,r2,806a64 <memchr+0xdc>
  806a34:	20800083 	ldbu	r2,2(r4)
  806a38:	21c00084 	addi	r7,r4,2
  806a3c:	28800926 	beq	r5,r2,806a64 <memchr+0xdc>
  806a40:	208000c3 	ldbu	r2,3(r4)
  806a44:	21c000c4 	addi	r7,r4,3
  806a48:	28800626 	beq	r5,r2,806a64 <memchr+0xdc>
  806a4c:	21000104 	addi	r4,r4,4
  806a50:	59bfea36 	bltu	r11,r6,8069fc <memchr+0x74>
  806a54:	2007883a 	mov	r3,r4
  806a58:	003fd106 	br	8069a0 <memchr+0x18>
  806a5c:	0005883a 	mov	r2,zero
  806a60:	f800283a 	ret
  806a64:	3805883a 	mov	r2,r7
  806a68:	f800283a 	ret

00806a6c <memcpy>:
  806a6c:	01c003c4 	movi	r7,15
  806a70:	2007883a 	mov	r3,r4
  806a74:	3980032e 	bgeu	r7,r6,806a84 <memcpy+0x18>
  806a78:	2904b03a 	or	r2,r5,r4
  806a7c:	108000cc 	andi	r2,r2,3
  806a80:	10000926 	beq	r2,zero,806aa8 <memcpy+0x3c>
  806a84:	30000626 	beq	r6,zero,806aa0 <memcpy+0x34>
  806a88:	30cd883a 	add	r6,r6,r3
  806a8c:	28800003 	ldbu	r2,0(r5)
  806a90:	29400044 	addi	r5,r5,1
  806a94:	18800005 	stb	r2,0(r3)
  806a98:	18c00044 	addi	r3,r3,1
  806a9c:	30fffb1e 	bne	r6,r3,806a8c <memcpy+0x20>
  806aa0:	2005883a 	mov	r2,r4
  806aa4:	f800283a 	ret
  806aa8:	3811883a 	mov	r8,r7
  806aac:	200f883a 	mov	r7,r4
  806ab0:	28c00017 	ldw	r3,0(r5)
  806ab4:	31bffc04 	addi	r6,r6,-16
  806ab8:	38c00015 	stw	r3,0(r7)
  806abc:	28800117 	ldw	r2,4(r5)
  806ac0:	38800115 	stw	r2,4(r7)
  806ac4:	28c00217 	ldw	r3,8(r5)
  806ac8:	38c00215 	stw	r3,8(r7)
  806acc:	28800317 	ldw	r2,12(r5)
  806ad0:	29400404 	addi	r5,r5,16
  806ad4:	38800315 	stw	r2,12(r7)
  806ad8:	39c00404 	addi	r7,r7,16
  806adc:	41bff436 	bltu	r8,r6,806ab0 <memcpy+0x44>
  806ae0:	008000c4 	movi	r2,3
  806ae4:	1180072e 	bgeu	r2,r6,806b04 <memcpy+0x98>
  806ae8:	1007883a 	mov	r3,r2
  806aec:	28800017 	ldw	r2,0(r5)
  806af0:	31bfff04 	addi	r6,r6,-4
  806af4:	29400104 	addi	r5,r5,4
  806af8:	38800015 	stw	r2,0(r7)
  806afc:	39c00104 	addi	r7,r7,4
  806b00:	19bffa36 	bltu	r3,r6,806aec <memcpy+0x80>
  806b04:	3807883a 	mov	r3,r7
  806b08:	003fde06 	br	806a84 <memcpy+0x18>

00806b0c <memmove>:
  806b0c:	2807883a 	mov	r3,r5
  806b10:	2011883a 	mov	r8,r4
  806b14:	29000c2e 	bgeu	r5,r4,806b48 <memmove+0x3c>
  806b18:	298f883a 	add	r7,r5,r6
  806b1c:	21c00a2e 	bgeu	r4,r7,806b48 <memmove+0x3c>
  806b20:	30000726 	beq	r6,zero,806b40 <memmove+0x34>
  806b24:	2187883a 	add	r3,r4,r6
  806b28:	198dc83a 	sub	r6,r3,r6
  806b2c:	39ffffc4 	addi	r7,r7,-1
  806b30:	38800003 	ldbu	r2,0(r7)
  806b34:	18ffffc4 	addi	r3,r3,-1
  806b38:	18800005 	stb	r2,0(r3)
  806b3c:	19bffb1e 	bne	r3,r6,806b2c <memmove+0x20>
  806b40:	2005883a 	mov	r2,r4
  806b44:	f800283a 	ret
  806b48:	01c003c4 	movi	r7,15
  806b4c:	39800a36 	bltu	r7,r6,806b78 <memmove+0x6c>
  806b50:	303ffb26 	beq	r6,zero,806b40 <memmove+0x34>
  806b54:	400f883a 	mov	r7,r8
  806b58:	320d883a 	add	r6,r6,r8
  806b5c:	28800003 	ldbu	r2,0(r5)
  806b60:	29400044 	addi	r5,r5,1
  806b64:	38800005 	stb	r2,0(r7)
  806b68:	39c00044 	addi	r7,r7,1
  806b6c:	39bffb1e 	bne	r7,r6,806b5c <memmove+0x50>
  806b70:	2005883a 	mov	r2,r4
  806b74:	f800283a 	ret
  806b78:	1904b03a 	or	r2,r3,r4
  806b7c:	108000cc 	andi	r2,r2,3
  806b80:	103ff31e 	bne	r2,zero,806b50 <memmove+0x44>
  806b84:	3811883a 	mov	r8,r7
  806b88:	180b883a 	mov	r5,r3
  806b8c:	200f883a 	mov	r7,r4
  806b90:	28c00017 	ldw	r3,0(r5)
  806b94:	31bffc04 	addi	r6,r6,-16
  806b98:	38c00015 	stw	r3,0(r7)
  806b9c:	28800117 	ldw	r2,4(r5)
  806ba0:	38800115 	stw	r2,4(r7)
  806ba4:	28c00217 	ldw	r3,8(r5)
  806ba8:	38c00215 	stw	r3,8(r7)
  806bac:	28800317 	ldw	r2,12(r5)
  806bb0:	29400404 	addi	r5,r5,16
  806bb4:	38800315 	stw	r2,12(r7)
  806bb8:	39c00404 	addi	r7,r7,16
  806bbc:	41bff436 	bltu	r8,r6,806b90 <memmove+0x84>
  806bc0:	008000c4 	movi	r2,3
  806bc4:	1180072e 	bgeu	r2,r6,806be4 <memmove+0xd8>
  806bc8:	1007883a 	mov	r3,r2
  806bcc:	28800017 	ldw	r2,0(r5)
  806bd0:	31bfff04 	addi	r6,r6,-4
  806bd4:	29400104 	addi	r5,r5,4
  806bd8:	38800015 	stw	r2,0(r7)
  806bdc:	39c00104 	addi	r7,r7,4
  806be0:	19bffa36 	bltu	r3,r6,806bcc <memmove+0xc0>
  806be4:	3811883a 	mov	r8,r7
  806be8:	003fd906 	br	806b50 <memmove+0x44>

00806bec <_Bfree>:
  806bec:	28000826 	beq	r5,zero,806c10 <_Bfree+0x24>
  806bf0:	28800117 	ldw	r2,4(r5)
  806bf4:	21001317 	ldw	r4,76(r4)
  806bf8:	1085883a 	add	r2,r2,r2
  806bfc:	1085883a 	add	r2,r2,r2
  806c00:	1105883a 	add	r2,r2,r4
  806c04:	10c00017 	ldw	r3,0(r2)
  806c08:	28c00015 	stw	r3,0(r5)
  806c0c:	11400015 	stw	r5,0(r2)
  806c10:	f800283a 	ret

00806c14 <__hi0bits>:
  806c14:	20bfffec 	andhi	r2,r4,65535
  806c18:	10001426 	beq	r2,zero,806c6c <__hi0bits+0x58>
  806c1c:	0007883a 	mov	r3,zero
  806c20:	20bfc02c 	andhi	r2,r4,65280
  806c24:	1000021e 	bne	r2,zero,806c30 <__hi0bits+0x1c>
  806c28:	2008923a 	slli	r4,r4,8
  806c2c:	18c00204 	addi	r3,r3,8
  806c30:	20bc002c 	andhi	r2,r4,61440
  806c34:	1000021e 	bne	r2,zero,806c40 <__hi0bits+0x2c>
  806c38:	2008913a 	slli	r4,r4,4
  806c3c:	18c00104 	addi	r3,r3,4
  806c40:	20b0002c 	andhi	r2,r4,49152
  806c44:	1000031e 	bne	r2,zero,806c54 <__hi0bits+0x40>
  806c48:	2105883a 	add	r2,r4,r4
  806c4c:	18c00084 	addi	r3,r3,2
  806c50:	1089883a 	add	r4,r2,r2
  806c54:	20000316 	blt	r4,zero,806c64 <__hi0bits+0x50>
  806c58:	2090002c 	andhi	r2,r4,16384
  806c5c:	10000626 	beq	r2,zero,806c78 <__hi0bits+0x64>
  806c60:	18c00044 	addi	r3,r3,1
  806c64:	1805883a 	mov	r2,r3
  806c68:	f800283a 	ret
  806c6c:	2008943a 	slli	r4,r4,16
  806c70:	00c00404 	movi	r3,16
  806c74:	003fea06 	br	806c20 <__hi0bits+0xc>
  806c78:	00c00804 	movi	r3,32
  806c7c:	1805883a 	mov	r2,r3
  806c80:	f800283a 	ret

00806c84 <__lo0bits>:
  806c84:	20c00017 	ldw	r3,0(r4)
  806c88:	188001cc 	andi	r2,r3,7
  806c8c:	10000a26 	beq	r2,zero,806cb8 <__lo0bits+0x34>
  806c90:	1880004c 	andi	r2,r3,1
  806c94:	1005003a 	cmpeq	r2,r2,zero
  806c98:	10002126 	beq	r2,zero,806d20 <__lo0bits+0x9c>
  806c9c:	1880008c 	andi	r2,r3,2
  806ca0:	1000251e 	bne	r2,zero,806d38 <__lo0bits+0xb4>
  806ca4:	1804d0ba 	srli	r2,r3,2
  806ca8:	01400084 	movi	r5,2
  806cac:	20800015 	stw	r2,0(r4)
  806cb0:	2805883a 	mov	r2,r5
  806cb4:	f800283a 	ret
  806cb8:	18bfffcc 	andi	r2,r3,65535
  806cbc:	10001526 	beq	r2,zero,806d14 <__lo0bits+0x90>
  806cc0:	000b883a 	mov	r5,zero
  806cc4:	18803fcc 	andi	r2,r3,255
  806cc8:	1000021e 	bne	r2,zero,806cd4 <__lo0bits+0x50>
  806ccc:	1806d23a 	srli	r3,r3,8
  806cd0:	29400204 	addi	r5,r5,8
  806cd4:	188003cc 	andi	r2,r3,15
  806cd8:	1000021e 	bne	r2,zero,806ce4 <__lo0bits+0x60>
  806cdc:	1806d13a 	srli	r3,r3,4
  806ce0:	29400104 	addi	r5,r5,4
  806ce4:	188000cc 	andi	r2,r3,3
  806ce8:	1000021e 	bne	r2,zero,806cf4 <__lo0bits+0x70>
  806cec:	1806d0ba 	srli	r3,r3,2
  806cf0:	29400084 	addi	r5,r5,2
  806cf4:	1880004c 	andi	r2,r3,1
  806cf8:	1000031e 	bne	r2,zero,806d08 <__lo0bits+0x84>
  806cfc:	1806d07a 	srli	r3,r3,1
  806d00:	18000a26 	beq	r3,zero,806d2c <__lo0bits+0xa8>
  806d04:	29400044 	addi	r5,r5,1
  806d08:	2805883a 	mov	r2,r5
  806d0c:	20c00015 	stw	r3,0(r4)
  806d10:	f800283a 	ret
  806d14:	1806d43a 	srli	r3,r3,16
  806d18:	01400404 	movi	r5,16
  806d1c:	003fe906 	br	806cc4 <__lo0bits+0x40>
  806d20:	000b883a 	mov	r5,zero
  806d24:	2805883a 	mov	r2,r5
  806d28:	f800283a 	ret
  806d2c:	01400804 	movi	r5,32
  806d30:	2805883a 	mov	r2,r5
  806d34:	f800283a 	ret
  806d38:	1804d07a 	srli	r2,r3,1
  806d3c:	01400044 	movi	r5,1
  806d40:	20800015 	stw	r2,0(r4)
  806d44:	003fda06 	br	806cb0 <__lo0bits+0x2c>

00806d48 <__mcmp>:
  806d48:	20800417 	ldw	r2,16(r4)
  806d4c:	28c00417 	ldw	r3,16(r5)
  806d50:	10cfc83a 	sub	r7,r2,r3
  806d54:	38000c1e 	bne	r7,zero,806d88 <__mcmp+0x40>
  806d58:	18c5883a 	add	r2,r3,r3
  806d5c:	1085883a 	add	r2,r2,r2
  806d60:	10c00504 	addi	r3,r2,20
  806d64:	21000504 	addi	r4,r4,20
  806d68:	28cb883a 	add	r5,r5,r3
  806d6c:	2085883a 	add	r2,r4,r2
  806d70:	10bfff04 	addi	r2,r2,-4
  806d74:	297fff04 	addi	r5,r5,-4
  806d78:	11800017 	ldw	r6,0(r2)
  806d7c:	28c00017 	ldw	r3,0(r5)
  806d80:	30c0031e 	bne	r6,r3,806d90 <__mcmp+0x48>
  806d84:	20bffa36 	bltu	r4,r2,806d70 <__mcmp+0x28>
  806d88:	3805883a 	mov	r2,r7
  806d8c:	f800283a 	ret
  806d90:	30c00336 	bltu	r6,r3,806da0 <__mcmp+0x58>
  806d94:	01c00044 	movi	r7,1
  806d98:	3805883a 	mov	r2,r7
  806d9c:	f800283a 	ret
  806da0:	01ffffc4 	movi	r7,-1
  806da4:	003ff806 	br	806d88 <__mcmp+0x40>

00806da8 <__ulp>:
  806da8:	295ffc2c 	andhi	r5,r5,32752
  806dac:	013f3034 	movhi	r4,64704
  806db0:	290b883a 	add	r5,r5,r4
  806db4:	0145c83a 	sub	r2,zero,r5
  806db8:	1007d53a 	srai	r3,r2,20
  806dbc:	000d883a 	mov	r6,zero
  806dc0:	0140040e 	bge	zero,r5,806dd4 <__ulp+0x2c>
  806dc4:	280f883a 	mov	r7,r5
  806dc8:	3807883a 	mov	r3,r7
  806dcc:	3005883a 	mov	r2,r6
  806dd0:	f800283a 	ret
  806dd4:	008004c4 	movi	r2,19
  806dd8:	193ffb04 	addi	r4,r3,-20
  806ddc:	10c00c0e 	bge	r2,r3,806e10 <__ulp+0x68>
  806de0:	008007c4 	movi	r2,31
  806de4:	1107c83a 	sub	r3,r2,r4
  806de8:	00800784 	movi	r2,30
  806dec:	01400044 	movi	r5,1
  806df0:	11000216 	blt	r2,r4,806dfc <__ulp+0x54>
  806df4:	00800044 	movi	r2,1
  806df8:	10ca983a 	sll	r5,r2,r3
  806dfc:	000f883a 	mov	r7,zero
  806e00:	280d883a 	mov	r6,r5
  806e04:	3807883a 	mov	r3,r7
  806e08:	3005883a 	mov	r2,r6
  806e0c:	f800283a 	ret
  806e10:	00800234 	movhi	r2,8
  806e14:	10cfd83a 	sra	r7,r2,r3
  806e18:	000d883a 	mov	r6,zero
  806e1c:	3005883a 	mov	r2,r6
  806e20:	3807883a 	mov	r3,r7
  806e24:	f800283a 	ret

00806e28 <__b2d>:
  806e28:	20800417 	ldw	r2,16(r4)
  806e2c:	defff904 	addi	sp,sp,-28
  806e30:	dd000415 	stw	r20,16(sp)
  806e34:	1085883a 	add	r2,r2,r2
  806e38:	25000504 	addi	r20,r4,20
  806e3c:	1085883a 	add	r2,r2,r2
  806e40:	dc000015 	stw	r16,0(sp)
  806e44:	a0a1883a 	add	r16,r20,r2
  806e48:	dd400515 	stw	r21,20(sp)
  806e4c:	857fff17 	ldw	r21,-4(r16)
  806e50:	dc400115 	stw	r17,4(sp)
  806e54:	dfc00615 	stw	ra,24(sp)
  806e58:	a809883a 	mov	r4,r21
  806e5c:	2823883a 	mov	r17,r5
  806e60:	dcc00315 	stw	r19,12(sp)
  806e64:	dc800215 	stw	r18,8(sp)
  806e68:	0806c140 	call	806c14 <__hi0bits>
  806e6c:	100b883a 	mov	r5,r2
  806e70:	00800804 	movi	r2,32
  806e74:	1145c83a 	sub	r2,r2,r5
  806e78:	88800015 	stw	r2,0(r17)
  806e7c:	00800284 	movi	r2,10
  806e80:	80ffff04 	addi	r3,r16,-4
  806e84:	11401416 	blt	r2,r5,806ed8 <__b2d+0xb0>
  806e88:	008002c4 	movi	r2,11
  806e8c:	1149c83a 	sub	r4,r2,r5
  806e90:	a0c02736 	bltu	r20,r3,806f30 <__b2d+0x108>
  806e94:	000d883a 	mov	r6,zero
  806e98:	28800544 	addi	r2,r5,21
  806e9c:	a906d83a 	srl	r3,r21,r4
  806ea0:	a884983a 	sll	r2,r21,r2
  806ea4:	1ccffc34 	orhi	r19,r3,16368
  806ea8:	11a4b03a 	or	r18,r2,r6
  806eac:	9005883a 	mov	r2,r18
  806eb0:	9807883a 	mov	r3,r19
  806eb4:	dfc00617 	ldw	ra,24(sp)
  806eb8:	dd400517 	ldw	r21,20(sp)
  806ebc:	dd000417 	ldw	r20,16(sp)
  806ec0:	dcc00317 	ldw	r19,12(sp)
  806ec4:	dc800217 	ldw	r18,8(sp)
  806ec8:	dc400117 	ldw	r17,4(sp)
  806ecc:	dc000017 	ldw	r16,0(sp)
  806ed0:	dec00704 	addi	sp,sp,28
  806ed4:	f800283a 	ret
  806ed8:	a0c00e36 	bltu	r20,r3,806f14 <__b2d+0xec>
  806edc:	293ffd44 	addi	r4,r5,-11
  806ee0:	000d883a 	mov	r6,zero
  806ee4:	20000f26 	beq	r4,zero,806f24 <__b2d+0xfc>
  806ee8:	00800804 	movi	r2,32
  806eec:	110bc83a 	sub	r5,r2,r4
  806ef0:	a0c01236 	bltu	r20,r3,806f3c <__b2d+0x114>
  806ef4:	000f883a 	mov	r7,zero
  806ef8:	a904983a 	sll	r2,r21,r4
  806efc:	3146d83a 	srl	r3,r6,r5
  806f00:	3108983a 	sll	r4,r6,r4
  806f04:	108ffc34 	orhi	r2,r2,16368
  806f08:	18a6b03a 	or	r19,r3,r2
  806f0c:	3924b03a 	or	r18,r7,r4
  806f10:	003fe606 	br	806eac <__b2d+0x84>
  806f14:	293ffd44 	addi	r4,r5,-11
  806f18:	81bffe17 	ldw	r6,-8(r16)
  806f1c:	80fffe04 	addi	r3,r16,-8
  806f20:	203ff11e 	bne	r4,zero,806ee8 <__b2d+0xc0>
  806f24:	accffc34 	orhi	r19,r21,16368
  806f28:	3025883a 	mov	r18,r6
  806f2c:	003fdf06 	br	806eac <__b2d+0x84>
  806f30:	18bfff17 	ldw	r2,-4(r3)
  806f34:	110cd83a 	srl	r6,r2,r4
  806f38:	003fd706 	br	806e98 <__b2d+0x70>
  806f3c:	18bfff17 	ldw	r2,-4(r3)
  806f40:	114ed83a 	srl	r7,r2,r5
  806f44:	003fec06 	br	806ef8 <__b2d+0xd0>

00806f48 <__ratio>:
  806f48:	defff904 	addi	sp,sp,-28
  806f4c:	dc400215 	stw	r17,8(sp)
  806f50:	2823883a 	mov	r17,r5
  806f54:	d80b883a 	mov	r5,sp
  806f58:	dfc00615 	stw	ra,24(sp)
  806f5c:	dd000515 	stw	r20,20(sp)
  806f60:	dcc00415 	stw	r19,16(sp)
  806f64:	dc800315 	stw	r18,12(sp)
  806f68:	2025883a 	mov	r18,r4
  806f6c:	0806e280 	call	806e28 <__b2d>
  806f70:	8809883a 	mov	r4,r17
  806f74:	d9400104 	addi	r5,sp,4
  806f78:	1027883a 	mov	r19,r2
  806f7c:	1829883a 	mov	r20,r3
  806f80:	0806e280 	call	806e28 <__b2d>
  806f84:	89000417 	ldw	r4,16(r17)
  806f88:	91c00417 	ldw	r7,16(r18)
  806f8c:	d9800117 	ldw	r6,4(sp)
  806f90:	180b883a 	mov	r5,r3
  806f94:	390fc83a 	sub	r7,r7,r4
  806f98:	1009883a 	mov	r4,r2
  806f9c:	d8800017 	ldw	r2,0(sp)
  806fa0:	380e917a 	slli	r7,r7,5
  806fa4:	2011883a 	mov	r8,r4
  806fa8:	1185c83a 	sub	r2,r2,r6
  806fac:	11c5883a 	add	r2,r2,r7
  806fb0:	1006953a 	slli	r3,r2,20
  806fb4:	2813883a 	mov	r9,r5
  806fb8:	00800d0e 	bge	zero,r2,806ff0 <__ratio+0xa8>
  806fbc:	1d29883a 	add	r20,r3,r20
  806fc0:	a00b883a 	mov	r5,r20
  806fc4:	480f883a 	mov	r7,r9
  806fc8:	9809883a 	mov	r4,r19
  806fcc:	400d883a 	mov	r6,r8
  806fd0:	08098f40 	call	8098f4 <__divdf3>
  806fd4:	dfc00617 	ldw	ra,24(sp)
  806fd8:	dd000517 	ldw	r20,20(sp)
  806fdc:	dcc00417 	ldw	r19,16(sp)
  806fe0:	dc800317 	ldw	r18,12(sp)
  806fe4:	dc400217 	ldw	r17,8(sp)
  806fe8:	dec00704 	addi	sp,sp,28
  806fec:	f800283a 	ret
  806ff0:	28d3c83a 	sub	r9,r5,r3
  806ff4:	003ff206 	br	806fc0 <__ratio+0x78>

00806ff8 <_mprec_log10>:
  806ff8:	defffe04 	addi	sp,sp,-8
  806ffc:	008005c4 	movi	r2,23
  807000:	dc000015 	stw	r16,0(sp)
  807004:	dfc00115 	stw	ra,4(sp)
  807008:	2021883a 	mov	r16,r4
  80700c:	11000c16 	blt	r2,r4,807040 <_mprec_log10+0x48>
  807010:	200490fa 	slli	r2,r4,3
  807014:	00c02074 	movhi	r3,129
  807018:	18fb7404 	addi	r3,r3,-4656
  80701c:	10c5883a 	add	r2,r2,r3
  807020:	12400117 	ldw	r9,4(r2)
  807024:	12000017 	ldw	r8,0(r2)
  807028:	4807883a 	mov	r3,r9
  80702c:	4005883a 	mov	r2,r8
  807030:	dfc00117 	ldw	ra,4(sp)
  807034:	dc000017 	ldw	r16,0(sp)
  807038:	dec00204 	addi	sp,sp,8
  80703c:	f800283a 	ret
  807040:	0011883a 	mov	r8,zero
  807044:	024ffc34 	movhi	r9,16368
  807048:	0005883a 	mov	r2,zero
  80704c:	00d00934 	movhi	r3,16420
  807050:	480b883a 	mov	r5,r9
  807054:	4009883a 	mov	r4,r8
  807058:	180f883a 	mov	r7,r3
  80705c:	100d883a 	mov	r6,r2
  807060:	08095300 	call	809530 <__muldf3>
  807064:	843fffc4 	addi	r16,r16,-1
  807068:	1011883a 	mov	r8,r2
  80706c:	1813883a 	mov	r9,r3
  807070:	803ff51e 	bne	r16,zero,807048 <_mprec_log10+0x50>
  807074:	4005883a 	mov	r2,r8
  807078:	4807883a 	mov	r3,r9
  80707c:	dfc00117 	ldw	ra,4(sp)
  807080:	dc000017 	ldw	r16,0(sp)
  807084:	dec00204 	addi	sp,sp,8
  807088:	f800283a 	ret

0080708c <__copybits>:
  80708c:	297fffc4 	addi	r5,r5,-1
  807090:	30800417 	ldw	r2,16(r6)
  807094:	280bd17a 	srai	r5,r5,5
  807098:	31800504 	addi	r6,r6,20
  80709c:	1085883a 	add	r2,r2,r2
  8070a0:	294b883a 	add	r5,r5,r5
  8070a4:	294b883a 	add	r5,r5,r5
  8070a8:	1085883a 	add	r2,r2,r2
  8070ac:	290b883a 	add	r5,r5,r4
  8070b0:	3087883a 	add	r3,r6,r2
  8070b4:	29400104 	addi	r5,r5,4
  8070b8:	30c0052e 	bgeu	r6,r3,8070d0 <__copybits+0x44>
  8070bc:	30800017 	ldw	r2,0(r6)
  8070c0:	31800104 	addi	r6,r6,4
  8070c4:	20800015 	stw	r2,0(r4)
  8070c8:	21000104 	addi	r4,r4,4
  8070cc:	30fffb36 	bltu	r6,r3,8070bc <__copybits+0x30>
  8070d0:	2140032e 	bgeu	r4,r5,8070e0 <__copybits+0x54>
  8070d4:	20000015 	stw	zero,0(r4)
  8070d8:	21000104 	addi	r4,r4,4
  8070dc:	217ffd36 	bltu	r4,r5,8070d4 <__copybits+0x48>
  8070e0:	f800283a 	ret

008070e4 <__any_on>:
  8070e4:	20800417 	ldw	r2,16(r4)
  8070e8:	2807d17a 	srai	r3,r5,5
  8070ec:	21000504 	addi	r4,r4,20
  8070f0:	10c00d0e 	bge	r2,r3,807128 <__any_on+0x44>
  8070f4:	1085883a 	add	r2,r2,r2
  8070f8:	1085883a 	add	r2,r2,r2
  8070fc:	208d883a 	add	r6,r4,r2
  807100:	2180182e 	bgeu	r4,r6,807164 <__any_on+0x80>
  807104:	30bfff17 	ldw	r2,-4(r6)
  807108:	30ffff04 	addi	r3,r6,-4
  80710c:	1000041e 	bne	r2,zero,807120 <__any_on+0x3c>
  807110:	20c0142e 	bgeu	r4,r3,807164 <__any_on+0x80>
  807114:	18ffff04 	addi	r3,r3,-4
  807118:	18800017 	ldw	r2,0(r3)
  80711c:	103ffc26 	beq	r2,zero,807110 <__any_on+0x2c>
  807120:	00800044 	movi	r2,1
  807124:	f800283a 	ret
  807128:	18800a0e 	bge	r3,r2,807154 <__any_on+0x70>
  80712c:	294007cc 	andi	r5,r5,31
  807130:	28000826 	beq	r5,zero,807154 <__any_on+0x70>
  807134:	18c5883a 	add	r2,r3,r3
  807138:	1085883a 	add	r2,r2,r2
  80713c:	208d883a 	add	r6,r4,r2
  807140:	30c00017 	ldw	r3,0(r6)
  807144:	1944d83a 	srl	r2,r3,r5
  807148:	1144983a 	sll	r2,r2,r5
  80714c:	18bff41e 	bne	r3,r2,807120 <__any_on+0x3c>
  807150:	003feb06 	br	807100 <__any_on+0x1c>
  807154:	18c5883a 	add	r2,r3,r3
  807158:	1085883a 	add	r2,r2,r2
  80715c:	208d883a 	add	r6,r4,r2
  807160:	003fe706 	br	807100 <__any_on+0x1c>
  807164:	0005883a 	mov	r2,zero
  807168:	f800283a 	ret

0080716c <_Balloc>:
  80716c:	20c01317 	ldw	r3,76(r4)
  807170:	defffb04 	addi	sp,sp,-20
  807174:	dcc00315 	stw	r19,12(sp)
  807178:	dc800215 	stw	r18,8(sp)
  80717c:	dfc00415 	stw	ra,16(sp)
  807180:	2825883a 	mov	r18,r5
  807184:	dc400115 	stw	r17,4(sp)
  807188:	dc000015 	stw	r16,0(sp)
  80718c:	2027883a 	mov	r19,r4
  807190:	01800404 	movi	r6,16
  807194:	01400104 	movi	r5,4
  807198:	18001726 	beq	r3,zero,8071f8 <_Balloc+0x8c>
  80719c:	01400044 	movi	r5,1
  8071a0:	9485883a 	add	r2,r18,r18
  8071a4:	2ca2983a 	sll	r17,r5,r18
  8071a8:	1085883a 	add	r2,r2,r2
  8071ac:	10c7883a 	add	r3,r2,r3
  8071b0:	1c000017 	ldw	r16,0(r3)
  8071b4:	8c4d883a 	add	r6,r17,r17
  8071b8:	318d883a 	add	r6,r6,r6
  8071bc:	9809883a 	mov	r4,r19
  8071c0:	31800504 	addi	r6,r6,20
  8071c4:	80001226 	beq	r16,zero,807210 <_Balloc+0xa4>
  8071c8:	80800017 	ldw	r2,0(r16)
  8071cc:	18800015 	stw	r2,0(r3)
  8071d0:	80000415 	stw	zero,16(r16)
  8071d4:	80000315 	stw	zero,12(r16)
  8071d8:	8005883a 	mov	r2,r16
  8071dc:	dfc00417 	ldw	ra,16(sp)
  8071e0:	dcc00317 	ldw	r19,12(sp)
  8071e4:	dc800217 	ldw	r18,8(sp)
  8071e8:	dc400117 	ldw	r17,4(sp)
  8071ec:	dc000017 	ldw	r16,0(sp)
  8071f0:	dec00504 	addi	sp,sp,20
  8071f4:	f800283a 	ret
  8071f8:	08083ec0 	call	8083ec <_calloc_r>
  8071fc:	1007883a 	mov	r3,r2
  807200:	0021883a 	mov	r16,zero
  807204:	98801315 	stw	r2,76(r19)
  807208:	103fe41e 	bne	r2,zero,80719c <_Balloc+0x30>
  80720c:	003ff206 	br	8071d8 <_Balloc+0x6c>
  807210:	08083ec0 	call	8083ec <_calloc_r>
  807214:	103ff026 	beq	r2,zero,8071d8 <_Balloc+0x6c>
  807218:	1021883a 	mov	r16,r2
  80721c:	14800115 	stw	r18,4(r2)
  807220:	14400215 	stw	r17,8(r2)
  807224:	003fea06 	br	8071d0 <_Balloc+0x64>

00807228 <__d2b>:
  807228:	defff504 	addi	sp,sp,-44
  80722c:	dcc00515 	stw	r19,20(sp)
  807230:	04c00044 	movi	r19,1
  807234:	dc000215 	stw	r16,8(sp)
  807238:	2821883a 	mov	r16,r5
  80723c:	980b883a 	mov	r5,r19
  807240:	ddc00915 	stw	r23,36(sp)
  807244:	dd800815 	stw	r22,32(sp)
  807248:	dd400715 	stw	r21,28(sp)
  80724c:	dd000615 	stw	r20,24(sp)
  807250:	dc800415 	stw	r18,16(sp)
  807254:	dc400315 	stw	r17,12(sp)
  807258:	dfc00a15 	stw	ra,40(sp)
  80725c:	3023883a 	mov	r17,r6
  807260:	382d883a 	mov	r22,r7
  807264:	ddc00b17 	ldw	r23,44(sp)
  807268:	080716c0 	call	80716c <_Balloc>
  80726c:	1025883a 	mov	r18,r2
  807270:	00a00034 	movhi	r2,32768
  807274:	10bfffc4 	addi	r2,r2,-1
  807278:	8888703a 	and	r4,r17,r2
  80727c:	202ad53a 	srli	r21,r4,20
  807280:	00800434 	movhi	r2,16
  807284:	10bfffc4 	addi	r2,r2,-1
  807288:	8886703a 	and	r3,r17,r2
  80728c:	a829003a 	cmpeq	r20,r21,zero
  807290:	800b883a 	mov	r5,r16
  807294:	d8c00115 	stw	r3,4(sp)
  807298:	94000504 	addi	r16,r18,20
  80729c:	a000021e 	bne	r20,zero,8072a8 <__d2b+0x80>
  8072a0:	18c00434 	orhi	r3,r3,16
  8072a4:	d8c00115 	stw	r3,4(sp)
  8072a8:	28002726 	beq	r5,zero,807348 <__d2b+0x120>
  8072ac:	d809883a 	mov	r4,sp
  8072b0:	d9400015 	stw	r5,0(sp)
  8072b4:	0806c840 	call	806c84 <__lo0bits>
  8072b8:	100d883a 	mov	r6,r2
  8072bc:	10003526 	beq	r2,zero,807394 <__d2b+0x16c>
  8072c0:	d8c00117 	ldw	r3,4(sp)
  8072c4:	00800804 	movi	r2,32
  8072c8:	1185c83a 	sub	r2,r2,r6
  8072cc:	d9000017 	ldw	r4,0(sp)
  8072d0:	1886983a 	sll	r3,r3,r2
  8072d4:	1906b03a 	or	r3,r3,r4
  8072d8:	90c00515 	stw	r3,20(r18)
  8072dc:	d8c00117 	ldw	r3,4(sp)
  8072e0:	1986d83a 	srl	r3,r3,r6
  8072e4:	d8c00115 	stw	r3,4(sp)
  8072e8:	180b003a 	cmpeq	r5,r3,zero
  8072ec:	00800084 	movi	r2,2
  8072f0:	114bc83a 	sub	r5,r2,r5
  8072f4:	80c00115 	stw	r3,4(r16)
  8072f8:	91400415 	stw	r5,16(r18)
  8072fc:	a0001a1e 	bne	r20,zero,807368 <__d2b+0x140>
  807300:	3545883a 	add	r2,r6,r21
  807304:	10bef344 	addi	r2,r2,-1075
  807308:	00c00d44 	movi	r3,53
  80730c:	b0800015 	stw	r2,0(r22)
  807310:	1987c83a 	sub	r3,r3,r6
  807314:	b8c00015 	stw	r3,0(r23)
  807318:	9005883a 	mov	r2,r18
  80731c:	dfc00a17 	ldw	ra,40(sp)
  807320:	ddc00917 	ldw	r23,36(sp)
  807324:	dd800817 	ldw	r22,32(sp)
  807328:	dd400717 	ldw	r21,28(sp)
  80732c:	dd000617 	ldw	r20,24(sp)
  807330:	dcc00517 	ldw	r19,20(sp)
  807334:	dc800417 	ldw	r18,16(sp)
  807338:	dc400317 	ldw	r17,12(sp)
  80733c:	dc000217 	ldw	r16,8(sp)
  807340:	dec00b04 	addi	sp,sp,44
  807344:	f800283a 	ret
  807348:	d9000104 	addi	r4,sp,4
  80734c:	0806c840 	call	806c84 <__lo0bits>
  807350:	11800804 	addi	r6,r2,32
  807354:	d8800117 	ldw	r2,4(sp)
  807358:	94c00415 	stw	r19,16(r18)
  80735c:	980b883a 	mov	r5,r19
  807360:	90800515 	stw	r2,20(r18)
  807364:	a03fe626 	beq	r20,zero,807300 <__d2b+0xd8>
  807368:	2945883a 	add	r2,r5,r5
  80736c:	1085883a 	add	r2,r2,r2
  807370:	1405883a 	add	r2,r2,r16
  807374:	113fff17 	ldw	r4,-4(r2)
  807378:	30fef384 	addi	r3,r6,-1074
  80737c:	2820917a 	slli	r16,r5,5
  807380:	b0c00015 	stw	r3,0(r22)
  807384:	0806c140 	call	806c14 <__hi0bits>
  807388:	80a1c83a 	sub	r16,r16,r2
  80738c:	bc000015 	stw	r16,0(r23)
  807390:	003fe106 	br	807318 <__d2b+0xf0>
  807394:	d8800017 	ldw	r2,0(sp)
  807398:	90800515 	stw	r2,20(r18)
  80739c:	d8c00117 	ldw	r3,4(sp)
  8073a0:	003fd106 	br	8072e8 <__d2b+0xc0>

008073a4 <__mdiff>:
  8073a4:	defffb04 	addi	sp,sp,-20
  8073a8:	dc000015 	stw	r16,0(sp)
  8073ac:	2821883a 	mov	r16,r5
  8073b0:	dc800215 	stw	r18,8(sp)
  8073b4:	300b883a 	mov	r5,r6
  8073b8:	2025883a 	mov	r18,r4
  8073bc:	8009883a 	mov	r4,r16
  8073c0:	dc400115 	stw	r17,4(sp)
  8073c4:	dfc00415 	stw	ra,16(sp)
  8073c8:	dcc00315 	stw	r19,12(sp)
  8073cc:	3023883a 	mov	r17,r6
  8073d0:	0806d480 	call	806d48 <__mcmp>
  8073d4:	10004226 	beq	r2,zero,8074e0 <__mdiff+0x13c>
  8073d8:	10005016 	blt	r2,zero,80751c <__mdiff+0x178>
  8073dc:	0027883a 	mov	r19,zero
  8073e0:	81400117 	ldw	r5,4(r16)
  8073e4:	9009883a 	mov	r4,r18
  8073e8:	080716c0 	call	80716c <_Balloc>
  8073ec:	1019883a 	mov	r12,r2
  8073f0:	82800417 	ldw	r10,16(r16)
  8073f4:	88800417 	ldw	r2,16(r17)
  8073f8:	81800504 	addi	r6,r16,20
  8073fc:	5287883a 	add	r3,r10,r10
  807400:	1085883a 	add	r2,r2,r2
  807404:	18c7883a 	add	r3,r3,r3
  807408:	1085883a 	add	r2,r2,r2
  80740c:	8a000504 	addi	r8,r17,20
  807410:	64c00315 	stw	r19,12(r12)
  807414:	30db883a 	add	r13,r6,r3
  807418:	4097883a 	add	r11,r8,r2
  80741c:	61c00504 	addi	r7,r12,20
  807420:	0013883a 	mov	r9,zero
  807424:	31000017 	ldw	r4,0(r6)
  807428:	41400017 	ldw	r5,0(r8)
  80742c:	42000104 	addi	r8,r8,4
  807430:	20bfffcc 	andi	r2,r4,65535
  807434:	28ffffcc 	andi	r3,r5,65535
  807438:	10c5c83a 	sub	r2,r2,r3
  80743c:	1245883a 	add	r2,r2,r9
  807440:	2008d43a 	srli	r4,r4,16
  807444:	280ad43a 	srli	r5,r5,16
  807448:	1007d43a 	srai	r3,r2,16
  80744c:	3880000d 	sth	r2,0(r7)
  807450:	2149c83a 	sub	r4,r4,r5
  807454:	20c9883a 	add	r4,r4,r3
  807458:	3900008d 	sth	r4,2(r7)
  80745c:	31800104 	addi	r6,r6,4
  807460:	39c00104 	addi	r7,r7,4
  807464:	2013d43a 	srai	r9,r4,16
  807468:	42ffee36 	bltu	r8,r11,807424 <__mdiff+0x80>
  80746c:	33400c2e 	bgeu	r6,r13,8074a0 <__mdiff+0xfc>
  807470:	30800017 	ldw	r2,0(r6)
  807474:	31800104 	addi	r6,r6,4
  807478:	10ffffcc 	andi	r3,r2,65535
  80747c:	1a47883a 	add	r3,r3,r9
  807480:	1004d43a 	srli	r2,r2,16
  807484:	1809d43a 	srai	r4,r3,16
  807488:	38c0000d 	sth	r3,0(r7)
  80748c:	1105883a 	add	r2,r2,r4
  807490:	3880008d 	sth	r2,2(r7)
  807494:	1013d43a 	srai	r9,r2,16
  807498:	39c00104 	addi	r7,r7,4
  80749c:	337ff436 	bltu	r6,r13,807470 <__mdiff+0xcc>
  8074a0:	38bfff17 	ldw	r2,-4(r7)
  8074a4:	38ffff04 	addi	r3,r7,-4
  8074a8:	1000041e 	bne	r2,zero,8074bc <__mdiff+0x118>
  8074ac:	18ffff04 	addi	r3,r3,-4
  8074b0:	18800017 	ldw	r2,0(r3)
  8074b4:	52bfffc4 	addi	r10,r10,-1
  8074b8:	103ffc26 	beq	r2,zero,8074ac <__mdiff+0x108>
  8074bc:	6005883a 	mov	r2,r12
  8074c0:	62800415 	stw	r10,16(r12)
  8074c4:	dfc00417 	ldw	ra,16(sp)
  8074c8:	dcc00317 	ldw	r19,12(sp)
  8074cc:	dc800217 	ldw	r18,8(sp)
  8074d0:	dc400117 	ldw	r17,4(sp)
  8074d4:	dc000017 	ldw	r16,0(sp)
  8074d8:	dec00504 	addi	sp,sp,20
  8074dc:	f800283a 	ret
  8074e0:	9009883a 	mov	r4,r18
  8074e4:	000b883a 	mov	r5,zero
  8074e8:	080716c0 	call	80716c <_Balloc>
  8074ec:	1019883a 	mov	r12,r2
  8074f0:	00800044 	movi	r2,1
  8074f4:	60800415 	stw	r2,16(r12)
  8074f8:	6005883a 	mov	r2,r12
  8074fc:	60000515 	stw	zero,20(r12)
  807500:	dfc00417 	ldw	ra,16(sp)
  807504:	dcc00317 	ldw	r19,12(sp)
  807508:	dc800217 	ldw	r18,8(sp)
  80750c:	dc400117 	ldw	r17,4(sp)
  807510:	dc000017 	ldw	r16,0(sp)
  807514:	dec00504 	addi	sp,sp,20
  807518:	f800283a 	ret
  80751c:	880d883a 	mov	r6,r17
  807520:	04c00044 	movi	r19,1
  807524:	8023883a 	mov	r17,r16
  807528:	3021883a 	mov	r16,r6
  80752c:	003fac06 	br	8073e0 <__mdiff+0x3c>

00807530 <__lshift>:
  807530:	defff904 	addi	sp,sp,-28
  807534:	28800417 	ldw	r2,16(r5)
  807538:	dc000015 	stw	r16,0(sp)
  80753c:	3021d17a 	srai	r16,r6,5
  807540:	28c00217 	ldw	r3,8(r5)
  807544:	10800044 	addi	r2,r2,1
  807548:	dc400115 	stw	r17,4(sp)
  80754c:	80a3883a 	add	r17,r16,r2
  807550:	dd400515 	stw	r21,20(sp)
  807554:	dd000415 	stw	r20,16(sp)
  807558:	dc800215 	stw	r18,8(sp)
  80755c:	dfc00615 	stw	ra,24(sp)
  807560:	2825883a 	mov	r18,r5
  807564:	dcc00315 	stw	r19,12(sp)
  807568:	3029883a 	mov	r20,r6
  80756c:	202b883a 	mov	r21,r4
  807570:	29400117 	ldw	r5,4(r5)
  807574:	1c40030e 	bge	r3,r17,807584 <__lshift+0x54>
  807578:	18c7883a 	add	r3,r3,r3
  80757c:	29400044 	addi	r5,r5,1
  807580:	1c7ffd16 	blt	r3,r17,807578 <__lshift+0x48>
  807584:	a809883a 	mov	r4,r21
  807588:	080716c0 	call	80716c <_Balloc>
  80758c:	1027883a 	mov	r19,r2
  807590:	11400504 	addi	r5,r2,20
  807594:	0400090e 	bge	zero,r16,8075bc <__lshift+0x8c>
  807598:	2805883a 	mov	r2,r5
  80759c:	0007883a 	mov	r3,zero
  8075a0:	18c00044 	addi	r3,r3,1
  8075a4:	10000015 	stw	zero,0(r2)
  8075a8:	10800104 	addi	r2,r2,4
  8075ac:	80fffc1e 	bne	r16,r3,8075a0 <__lshift+0x70>
  8075b0:	8405883a 	add	r2,r16,r16
  8075b4:	1085883a 	add	r2,r2,r2
  8075b8:	288b883a 	add	r5,r5,r2
  8075bc:	90800417 	ldw	r2,16(r18)
  8075c0:	91000504 	addi	r4,r18,20
  8075c4:	a18007cc 	andi	r6,r20,31
  8075c8:	1085883a 	add	r2,r2,r2
  8075cc:	1085883a 	add	r2,r2,r2
  8075d0:	208f883a 	add	r7,r4,r2
  8075d4:	30001e26 	beq	r6,zero,807650 <__lshift+0x120>
  8075d8:	00800804 	movi	r2,32
  8075dc:	1191c83a 	sub	r8,r2,r6
  8075e0:	0007883a 	mov	r3,zero
  8075e4:	20800017 	ldw	r2,0(r4)
  8075e8:	1184983a 	sll	r2,r2,r6
  8075ec:	1884b03a 	or	r2,r3,r2
  8075f0:	28800015 	stw	r2,0(r5)
  8075f4:	20c00017 	ldw	r3,0(r4)
  8075f8:	21000104 	addi	r4,r4,4
  8075fc:	29400104 	addi	r5,r5,4
  807600:	1a06d83a 	srl	r3,r3,r8
  807604:	21fff736 	bltu	r4,r7,8075e4 <__lshift+0xb4>
  807608:	28c00015 	stw	r3,0(r5)
  80760c:	18000126 	beq	r3,zero,807614 <__lshift+0xe4>
  807610:	8c400044 	addi	r17,r17,1
  807614:	88bfffc4 	addi	r2,r17,-1
  807618:	98800415 	stw	r2,16(r19)
  80761c:	a809883a 	mov	r4,r21
  807620:	900b883a 	mov	r5,r18
  807624:	0806bec0 	call	806bec <_Bfree>
  807628:	9805883a 	mov	r2,r19
  80762c:	dfc00617 	ldw	ra,24(sp)
  807630:	dd400517 	ldw	r21,20(sp)
  807634:	dd000417 	ldw	r20,16(sp)
  807638:	dcc00317 	ldw	r19,12(sp)
  80763c:	dc800217 	ldw	r18,8(sp)
  807640:	dc400117 	ldw	r17,4(sp)
  807644:	dc000017 	ldw	r16,0(sp)
  807648:	dec00704 	addi	sp,sp,28
  80764c:	f800283a 	ret
  807650:	20800017 	ldw	r2,0(r4)
  807654:	21000104 	addi	r4,r4,4
  807658:	28800015 	stw	r2,0(r5)
  80765c:	29400104 	addi	r5,r5,4
  807660:	21ffec2e 	bgeu	r4,r7,807614 <__lshift+0xe4>
  807664:	20800017 	ldw	r2,0(r4)
  807668:	21000104 	addi	r4,r4,4
  80766c:	28800015 	stw	r2,0(r5)
  807670:	29400104 	addi	r5,r5,4
  807674:	21fff636 	bltu	r4,r7,807650 <__lshift+0x120>
  807678:	003fe606 	br	807614 <__lshift+0xe4>

0080767c <__multiply>:
  80767c:	defff904 	addi	sp,sp,-28
  807680:	dcc00315 	stw	r19,12(sp)
  807684:	dc800215 	stw	r18,8(sp)
  807688:	2cc00417 	ldw	r19,16(r5)
  80768c:	34800417 	ldw	r18,16(r6)
  807690:	dd000415 	stw	r20,16(sp)
  807694:	dc400115 	stw	r17,4(sp)
  807698:	dfc00615 	stw	ra,24(sp)
  80769c:	dd400515 	stw	r21,20(sp)
  8076a0:	dc000015 	stw	r16,0(sp)
  8076a4:	2823883a 	mov	r17,r5
  8076a8:	3029883a 	mov	r20,r6
  8076ac:	9c80040e 	bge	r19,r18,8076c0 <__multiply+0x44>
  8076b0:	9027883a 	mov	r19,r18
  8076b4:	2c800417 	ldw	r18,16(r5)
  8076b8:	2829883a 	mov	r20,r5
  8076bc:	3023883a 	mov	r17,r6
  8076c0:	88800217 	ldw	r2,8(r17)
  8076c4:	9ca1883a 	add	r16,r19,r18
  8076c8:	89400117 	ldw	r5,4(r17)
  8076cc:	1400010e 	bge	r2,r16,8076d4 <__multiply+0x58>
  8076d0:	29400044 	addi	r5,r5,1
  8076d4:	080716c0 	call	80716c <_Balloc>
  8076d8:	102b883a 	mov	r21,r2
  8076dc:	8405883a 	add	r2,r16,r16
  8076e0:	1085883a 	add	r2,r2,r2
  8076e4:	a9000504 	addi	r4,r21,20
  8076e8:	209d883a 	add	r14,r4,r2
  8076ec:	2380042e 	bgeu	r4,r14,807700 <__multiply+0x84>
  8076f0:	2005883a 	mov	r2,r4
  8076f4:	10000015 	stw	zero,0(r2)
  8076f8:	10800104 	addi	r2,r2,4
  8076fc:	13bffd36 	bltu	r2,r14,8076f4 <__multiply+0x78>
  807700:	9485883a 	add	r2,r18,r18
  807704:	9cc7883a 	add	r3,r19,r19
  807708:	a1800504 	addi	r6,r20,20
  80770c:	1085883a 	add	r2,r2,r2
  807710:	8b400504 	addi	r13,r17,20
  807714:	18c7883a 	add	r3,r3,r3
  807718:	309f883a 	add	r15,r6,r2
  80771c:	68d7883a 	add	r11,r13,r3
  807720:	33c03b2e 	bgeu	r6,r15,807810 <__multiply+0x194>
  807724:	2019883a 	mov	r12,r4
  807728:	30800017 	ldw	r2,0(r6)
  80772c:	127fffcc 	andi	r9,r2,65535
  807730:	48001826 	beq	r9,zero,807794 <__multiply+0x118>
  807734:	6811883a 	mov	r8,r13
  807738:	600f883a 	mov	r7,r12
  80773c:	0015883a 	mov	r10,zero
  807740:	40c00017 	ldw	r3,0(r8)
  807744:	39400017 	ldw	r5,0(r7)
  807748:	42000104 	addi	r8,r8,4
  80774c:	193fffcc 	andi	r4,r3,65535
  807750:	4909383a 	mul	r4,r9,r4
  807754:	1806d43a 	srli	r3,r3,16
  807758:	28bfffcc 	andi	r2,r5,65535
  80775c:	5085883a 	add	r2,r10,r2
  807760:	2089883a 	add	r4,r4,r2
  807764:	48c7383a 	mul	r3,r9,r3
  807768:	280ad43a 	srli	r5,r5,16
  80776c:	2004d43a 	srli	r2,r4,16
  807770:	3900000d 	sth	r4,0(r7)
  807774:	1947883a 	add	r3,r3,r5
  807778:	10c5883a 	add	r2,r2,r3
  80777c:	3880008d 	sth	r2,2(r7)
  807780:	1014d43a 	srli	r10,r2,16
  807784:	39c00104 	addi	r7,r7,4
  807788:	42ffed36 	bltu	r8,r11,807740 <__multiply+0xc4>
  80778c:	3a800015 	stw	r10,0(r7)
  807790:	30800017 	ldw	r2,0(r6)
  807794:	1012d43a 	srli	r9,r2,16
  807798:	48001926 	beq	r9,zero,807800 <__multiply+0x184>
  80779c:	60800017 	ldw	r2,0(r12)
  8077a0:	6811883a 	mov	r8,r13
  8077a4:	600f883a 	mov	r7,r12
  8077a8:	0015883a 	mov	r10,zero
  8077ac:	100b883a 	mov	r5,r2
  8077b0:	41000017 	ldw	r4,0(r8)
  8077b4:	2806d43a 	srli	r3,r5,16
  8077b8:	3880000d 	sth	r2,0(r7)
  8077bc:	20bfffcc 	andi	r2,r4,65535
  8077c0:	4885383a 	mul	r2,r9,r2
  8077c4:	50c7883a 	add	r3,r10,r3
  8077c8:	2008d43a 	srli	r4,r4,16
  8077cc:	10c5883a 	add	r2,r2,r3
  8077d0:	3880008d 	sth	r2,2(r7)
  8077d4:	39c00104 	addi	r7,r7,4
  8077d8:	39400017 	ldw	r5,0(r7)
  8077dc:	4909383a 	mul	r4,r9,r4
  8077e0:	1004d43a 	srli	r2,r2,16
  8077e4:	28ffffcc 	andi	r3,r5,65535
  8077e8:	20c9883a 	add	r4,r4,r3
  8077ec:	1105883a 	add	r2,r2,r4
  8077f0:	42000104 	addi	r8,r8,4
  8077f4:	1014d43a 	srli	r10,r2,16
  8077f8:	42ffed36 	bltu	r8,r11,8077b0 <__multiply+0x134>
  8077fc:	38800015 	stw	r2,0(r7)
  807800:	31800104 	addi	r6,r6,4
  807804:	33c0022e 	bgeu	r6,r15,807810 <__multiply+0x194>
  807808:	63000104 	addi	r12,r12,4
  80780c:	003fc606 	br	807728 <__multiply+0xac>
  807810:	0400090e 	bge	zero,r16,807838 <__multiply+0x1bc>
  807814:	70bfff17 	ldw	r2,-4(r14)
  807818:	70ffff04 	addi	r3,r14,-4
  80781c:	10000326 	beq	r2,zero,80782c <__multiply+0x1b0>
  807820:	00000506 	br	807838 <__multiply+0x1bc>
  807824:	18800017 	ldw	r2,0(r3)
  807828:	1000031e 	bne	r2,zero,807838 <__multiply+0x1bc>
  80782c:	843fffc4 	addi	r16,r16,-1
  807830:	18ffff04 	addi	r3,r3,-4
  807834:	803ffb1e 	bne	r16,zero,807824 <__multiply+0x1a8>
  807838:	a805883a 	mov	r2,r21
  80783c:	ac000415 	stw	r16,16(r21)
  807840:	dfc00617 	ldw	ra,24(sp)
  807844:	dd400517 	ldw	r21,20(sp)
  807848:	dd000417 	ldw	r20,16(sp)
  80784c:	dcc00317 	ldw	r19,12(sp)
  807850:	dc800217 	ldw	r18,8(sp)
  807854:	dc400117 	ldw	r17,4(sp)
  807858:	dc000017 	ldw	r16,0(sp)
  80785c:	dec00704 	addi	sp,sp,28
  807860:	f800283a 	ret

00807864 <__i2b>:
  807864:	defffd04 	addi	sp,sp,-12
  807868:	dc000015 	stw	r16,0(sp)
  80786c:	04000044 	movi	r16,1
  807870:	dc800115 	stw	r18,4(sp)
  807874:	2825883a 	mov	r18,r5
  807878:	800b883a 	mov	r5,r16
  80787c:	dfc00215 	stw	ra,8(sp)
  807880:	080716c0 	call	80716c <_Balloc>
  807884:	14000415 	stw	r16,16(r2)
  807888:	14800515 	stw	r18,20(r2)
  80788c:	dfc00217 	ldw	ra,8(sp)
  807890:	dc800117 	ldw	r18,4(sp)
  807894:	dc000017 	ldw	r16,0(sp)
  807898:	dec00304 	addi	sp,sp,12
  80789c:	f800283a 	ret

008078a0 <__multadd>:
  8078a0:	defffa04 	addi	sp,sp,-24
  8078a4:	dc800215 	stw	r18,8(sp)
  8078a8:	2c800417 	ldw	r18,16(r5)
  8078ac:	dd000415 	stw	r20,16(sp)
  8078b0:	dcc00315 	stw	r19,12(sp)
  8078b4:	dc000015 	stw	r16,0(sp)
  8078b8:	dfc00515 	stw	ra,20(sp)
  8078bc:	3821883a 	mov	r16,r7
  8078c0:	dc400115 	stw	r17,4(sp)
  8078c4:	2827883a 	mov	r19,r5
  8078c8:	2029883a 	mov	r20,r4
  8078cc:	2a000504 	addi	r8,r5,20
  8078d0:	000f883a 	mov	r7,zero
  8078d4:	40800017 	ldw	r2,0(r8)
  8078d8:	39c00044 	addi	r7,r7,1
  8078dc:	10ffffcc 	andi	r3,r2,65535
  8078e0:	1987383a 	mul	r3,r3,r6
  8078e4:	1004d43a 	srli	r2,r2,16
  8078e8:	1c07883a 	add	r3,r3,r16
  8078ec:	180ad43a 	srli	r5,r3,16
  8078f0:	1185383a 	mul	r2,r2,r6
  8078f4:	18ffffcc 	andi	r3,r3,65535
  8078f8:	1145883a 	add	r2,r2,r5
  8078fc:	1008943a 	slli	r4,r2,16
  807900:	1020d43a 	srli	r16,r2,16
  807904:	20c9883a 	add	r4,r4,r3
  807908:	41000015 	stw	r4,0(r8)
  80790c:	42000104 	addi	r8,r8,4
  807910:	3cbff016 	blt	r7,r18,8078d4 <__multadd+0x34>
  807914:	80000826 	beq	r16,zero,807938 <__multadd+0x98>
  807918:	98800217 	ldw	r2,8(r19)
  80791c:	90800f0e 	bge	r18,r2,80795c <__multadd+0xbc>
  807920:	9485883a 	add	r2,r18,r18
  807924:	1085883a 	add	r2,r2,r2
  807928:	14c5883a 	add	r2,r2,r19
  80792c:	90c00044 	addi	r3,r18,1
  807930:	14000515 	stw	r16,20(r2)
  807934:	98c00415 	stw	r3,16(r19)
  807938:	9805883a 	mov	r2,r19
  80793c:	dfc00517 	ldw	ra,20(sp)
  807940:	dd000417 	ldw	r20,16(sp)
  807944:	dcc00317 	ldw	r19,12(sp)
  807948:	dc800217 	ldw	r18,8(sp)
  80794c:	dc400117 	ldw	r17,4(sp)
  807950:	dc000017 	ldw	r16,0(sp)
  807954:	dec00604 	addi	sp,sp,24
  807958:	f800283a 	ret
  80795c:	99400117 	ldw	r5,4(r19)
  807960:	a009883a 	mov	r4,r20
  807964:	29400044 	addi	r5,r5,1
  807968:	080716c0 	call	80716c <_Balloc>
  80796c:	99800417 	ldw	r6,16(r19)
  807970:	99400304 	addi	r5,r19,12
  807974:	11000304 	addi	r4,r2,12
  807978:	318d883a 	add	r6,r6,r6
  80797c:	318d883a 	add	r6,r6,r6
  807980:	31800204 	addi	r6,r6,8
  807984:	1023883a 	mov	r17,r2
  807988:	0806a6c0 	call	806a6c <memcpy>
  80798c:	980b883a 	mov	r5,r19
  807990:	a009883a 	mov	r4,r20
  807994:	0806bec0 	call	806bec <_Bfree>
  807998:	8827883a 	mov	r19,r17
  80799c:	003fe006 	br	807920 <__multadd+0x80>

008079a0 <__pow5mult>:
  8079a0:	defffa04 	addi	sp,sp,-24
  8079a4:	308000cc 	andi	r2,r6,3
  8079a8:	dd000415 	stw	r20,16(sp)
  8079ac:	dcc00315 	stw	r19,12(sp)
  8079b0:	dc000015 	stw	r16,0(sp)
  8079b4:	dfc00515 	stw	ra,20(sp)
  8079b8:	dc800215 	stw	r18,8(sp)
  8079bc:	dc400115 	stw	r17,4(sp)
  8079c0:	3021883a 	mov	r16,r6
  8079c4:	2027883a 	mov	r19,r4
  8079c8:	2829883a 	mov	r20,r5
  8079cc:	10002b1e 	bne	r2,zero,807a7c <__pow5mult+0xdc>
  8079d0:	8025d0ba 	srai	r18,r16,2
  8079d4:	90001b26 	beq	r18,zero,807a44 <__pow5mult+0xa4>
  8079d8:	9c001217 	ldw	r16,72(r19)
  8079dc:	8000081e 	bne	r16,zero,807a00 <__pow5mult+0x60>
  8079e0:	00003006 	br	807aa4 <__pow5mult+0x104>
  8079e4:	800b883a 	mov	r5,r16
  8079e8:	800d883a 	mov	r6,r16
  8079ec:	9809883a 	mov	r4,r19
  8079f0:	90001426 	beq	r18,zero,807a44 <__pow5mult+0xa4>
  8079f4:	80800017 	ldw	r2,0(r16)
  8079f8:	10001b26 	beq	r2,zero,807a68 <__pow5mult+0xc8>
  8079fc:	1021883a 	mov	r16,r2
  807a00:	9080004c 	andi	r2,r18,1
  807a04:	1005003a 	cmpeq	r2,r2,zero
  807a08:	9025d07a 	srai	r18,r18,1
  807a0c:	800d883a 	mov	r6,r16
  807a10:	9809883a 	mov	r4,r19
  807a14:	a00b883a 	mov	r5,r20
  807a18:	103ff21e 	bne	r2,zero,8079e4 <__pow5mult+0x44>
  807a1c:	080767c0 	call	80767c <__multiply>
  807a20:	a00b883a 	mov	r5,r20
  807a24:	9809883a 	mov	r4,r19
  807a28:	1023883a 	mov	r17,r2
  807a2c:	0806bec0 	call	806bec <_Bfree>
  807a30:	8829883a 	mov	r20,r17
  807a34:	800b883a 	mov	r5,r16
  807a38:	800d883a 	mov	r6,r16
  807a3c:	9809883a 	mov	r4,r19
  807a40:	903fec1e 	bne	r18,zero,8079f4 <__pow5mult+0x54>
  807a44:	a005883a 	mov	r2,r20
  807a48:	dfc00517 	ldw	ra,20(sp)
  807a4c:	dd000417 	ldw	r20,16(sp)
  807a50:	dcc00317 	ldw	r19,12(sp)
  807a54:	dc800217 	ldw	r18,8(sp)
  807a58:	dc400117 	ldw	r17,4(sp)
  807a5c:	dc000017 	ldw	r16,0(sp)
  807a60:	dec00604 	addi	sp,sp,24
  807a64:	f800283a 	ret
  807a68:	080767c0 	call	80767c <__multiply>
  807a6c:	80800015 	stw	r2,0(r16)
  807a70:	1021883a 	mov	r16,r2
  807a74:	10000015 	stw	zero,0(r2)
  807a78:	003fe106 	br	807a00 <__pow5mult+0x60>
  807a7c:	1085883a 	add	r2,r2,r2
  807a80:	00c02074 	movhi	r3,129
  807a84:	18fbba04 	addi	r3,r3,-4376
  807a88:	1085883a 	add	r2,r2,r2
  807a8c:	10c5883a 	add	r2,r2,r3
  807a90:	11bfff17 	ldw	r6,-4(r2)
  807a94:	000f883a 	mov	r7,zero
  807a98:	08078a00 	call	8078a0 <__multadd>
  807a9c:	1029883a 	mov	r20,r2
  807aa0:	003fcb06 	br	8079d0 <__pow5mult+0x30>
  807aa4:	9809883a 	mov	r4,r19
  807aa8:	01409c44 	movi	r5,625
  807aac:	08078640 	call	807864 <__i2b>
  807ab0:	98801215 	stw	r2,72(r19)
  807ab4:	1021883a 	mov	r16,r2
  807ab8:	10000015 	stw	zero,0(r2)
  807abc:	003fd006 	br	807a00 <__pow5mult+0x60>

00807ac0 <__s2b>:
  807ac0:	defff904 	addi	sp,sp,-28
  807ac4:	dcc00315 	stw	r19,12(sp)
  807ac8:	dc800215 	stw	r18,8(sp)
  807acc:	2827883a 	mov	r19,r5
  807ad0:	2025883a 	mov	r18,r4
  807ad4:	01400244 	movi	r5,9
  807ad8:	39000204 	addi	r4,r7,8
  807adc:	dd000415 	stw	r20,16(sp)
  807ae0:	dc400115 	stw	r17,4(sp)
  807ae4:	dfc00615 	stw	ra,24(sp)
  807ae8:	dd400515 	stw	r21,20(sp)
  807aec:	dc000015 	stw	r16,0(sp)
  807af0:	3829883a 	mov	r20,r7
  807af4:	3023883a 	mov	r17,r6
  807af8:	08008a80 	call	8008a8 <__divsi3>
  807afc:	00c00044 	movi	r3,1
  807b00:	1880350e 	bge	r3,r2,807bd8 <__s2b+0x118>
  807b04:	000b883a 	mov	r5,zero
  807b08:	18c7883a 	add	r3,r3,r3
  807b0c:	29400044 	addi	r5,r5,1
  807b10:	18bffd16 	blt	r3,r2,807b08 <__s2b+0x48>
  807b14:	9009883a 	mov	r4,r18
  807b18:	080716c0 	call	80716c <_Balloc>
  807b1c:	1011883a 	mov	r8,r2
  807b20:	d8800717 	ldw	r2,28(sp)
  807b24:	00c00044 	movi	r3,1
  807b28:	01800244 	movi	r6,9
  807b2c:	40800515 	stw	r2,20(r8)
  807b30:	40c00415 	stw	r3,16(r8)
  807b34:	3440260e 	bge	r6,r17,807bd0 <__s2b+0x110>
  807b38:	3021883a 	mov	r16,r6
  807b3c:	99ab883a 	add	r21,r19,r6
  807b40:	9c05883a 	add	r2,r19,r16
  807b44:	11c00007 	ldb	r7,0(r2)
  807b48:	400b883a 	mov	r5,r8
  807b4c:	9009883a 	mov	r4,r18
  807b50:	39fff404 	addi	r7,r7,-48
  807b54:	01800284 	movi	r6,10
  807b58:	08078a00 	call	8078a0 <__multadd>
  807b5c:	84000044 	addi	r16,r16,1
  807b60:	1011883a 	mov	r8,r2
  807b64:	8c3ff61e 	bne	r17,r16,807b40 <__s2b+0x80>
  807b68:	ac45883a 	add	r2,r21,r17
  807b6c:	117ffe04 	addi	r5,r2,-8
  807b70:	880d883a 	mov	r6,r17
  807b74:	35000c0e 	bge	r6,r20,807ba8 <__s2b+0xe8>
  807b78:	a185c83a 	sub	r2,r20,r6
  807b7c:	2821883a 	mov	r16,r5
  807b80:	28a3883a 	add	r17,r5,r2
  807b84:	81c00007 	ldb	r7,0(r16)
  807b88:	400b883a 	mov	r5,r8
  807b8c:	9009883a 	mov	r4,r18
  807b90:	39fff404 	addi	r7,r7,-48
  807b94:	01800284 	movi	r6,10
  807b98:	08078a00 	call	8078a0 <__multadd>
  807b9c:	84000044 	addi	r16,r16,1
  807ba0:	1011883a 	mov	r8,r2
  807ba4:	847ff71e 	bne	r16,r17,807b84 <__s2b+0xc4>
  807ba8:	4005883a 	mov	r2,r8
  807bac:	dfc00617 	ldw	ra,24(sp)
  807bb0:	dd400517 	ldw	r21,20(sp)
  807bb4:	dd000417 	ldw	r20,16(sp)
  807bb8:	dcc00317 	ldw	r19,12(sp)
  807bbc:	dc800217 	ldw	r18,8(sp)
  807bc0:	dc400117 	ldw	r17,4(sp)
  807bc4:	dc000017 	ldw	r16,0(sp)
  807bc8:	dec00704 	addi	sp,sp,28
  807bcc:	f800283a 	ret
  807bd0:	99400284 	addi	r5,r19,10
  807bd4:	003fe706 	br	807b74 <__s2b+0xb4>
  807bd8:	000b883a 	mov	r5,zero
  807bdc:	003fcd06 	br	807b14 <__s2b+0x54>

00807be0 <_read_r>:
  807be0:	defffd04 	addi	sp,sp,-12
  807be4:	dc000015 	stw	r16,0(sp)
  807be8:	04002074 	movhi	r16,129
  807bec:	840b0804 	addi	r16,r16,11296
  807bf0:	dc400115 	stw	r17,4(sp)
  807bf4:	80000015 	stw	zero,0(r16)
  807bf8:	2023883a 	mov	r17,r4
  807bfc:	2809883a 	mov	r4,r5
  807c00:	300b883a 	mov	r5,r6
  807c04:	380d883a 	mov	r6,r7
  807c08:	dfc00215 	stw	ra,8(sp)
  807c0c:	080b2600 	call	80b260 <read>
  807c10:	1007883a 	mov	r3,r2
  807c14:	00bfffc4 	movi	r2,-1
  807c18:	18800626 	beq	r3,r2,807c34 <_read_r+0x54>
  807c1c:	1805883a 	mov	r2,r3
  807c20:	dfc00217 	ldw	ra,8(sp)
  807c24:	dc400117 	ldw	r17,4(sp)
  807c28:	dc000017 	ldw	r16,0(sp)
  807c2c:	dec00304 	addi	sp,sp,12
  807c30:	f800283a 	ret
  807c34:	80800017 	ldw	r2,0(r16)
  807c38:	103ff826 	beq	r2,zero,807c1c <_read_r+0x3c>
  807c3c:	88800015 	stw	r2,0(r17)
  807c40:	1805883a 	mov	r2,r3
  807c44:	dfc00217 	ldw	ra,8(sp)
  807c48:	dc400117 	ldw	r17,4(sp)
  807c4c:	dc000017 	ldw	r16,0(sp)
  807c50:	dec00304 	addi	sp,sp,12
  807c54:	f800283a 	ret

00807c58 <_realloc_r>:
  807c58:	defff404 	addi	sp,sp,-48
  807c5c:	dd800815 	stw	r22,32(sp)
  807c60:	dc800415 	stw	r18,16(sp)
  807c64:	dc400315 	stw	r17,12(sp)
  807c68:	dfc00b15 	stw	ra,44(sp)
  807c6c:	df000a15 	stw	fp,40(sp)
  807c70:	ddc00915 	stw	r23,36(sp)
  807c74:	dd400715 	stw	r21,28(sp)
  807c78:	dd000615 	stw	r20,24(sp)
  807c7c:	dcc00515 	stw	r19,20(sp)
  807c80:	dc000215 	stw	r16,8(sp)
  807c84:	2825883a 	mov	r18,r5
  807c88:	3023883a 	mov	r17,r6
  807c8c:	202d883a 	mov	r22,r4
  807c90:	2800c926 	beq	r5,zero,807fb8 <_realloc_r+0x360>
  807c94:	080af5c0 	call	80af5c <__malloc_lock>
  807c98:	943ffe04 	addi	r16,r18,-8
  807c9c:	88c002c4 	addi	r3,r17,11
  807ca0:	00800584 	movi	r2,22
  807ca4:	82000117 	ldw	r8,4(r16)
  807ca8:	10c01b2e 	bgeu	r2,r3,807d18 <_realloc_r+0xc0>
  807cac:	00bffe04 	movi	r2,-8
  807cb0:	188e703a 	and	r7,r3,r2
  807cb4:	3839883a 	mov	fp,r7
  807cb8:	38001a16 	blt	r7,zero,807d24 <_realloc_r+0xcc>
  807cbc:	e4401936 	bltu	fp,r17,807d24 <_realloc_r+0xcc>
  807cc0:	013fff04 	movi	r4,-4
  807cc4:	4126703a 	and	r19,r8,r4
  807cc8:	99c02616 	blt	r19,r7,807d64 <_realloc_r+0x10c>
  807ccc:	802b883a 	mov	r21,r16
  807cd0:	9829883a 	mov	r20,r19
  807cd4:	84000204 	addi	r16,r16,8
  807cd8:	a80f883a 	mov	r7,r21
  807cdc:	a70dc83a 	sub	r6,r20,fp
  807ce0:	008003c4 	movi	r2,15
  807ce4:	1180c136 	bltu	r2,r6,807fec <_realloc_r+0x394>
  807ce8:	38800117 	ldw	r2,4(r7)
  807cec:	a549883a 	add	r4,r20,r21
  807cf0:	1080004c 	andi	r2,r2,1
  807cf4:	a084b03a 	or	r2,r20,r2
  807cf8:	38800115 	stw	r2,4(r7)
  807cfc:	20c00117 	ldw	r3,4(r4)
  807d00:	18c00054 	ori	r3,r3,1
  807d04:	20c00115 	stw	r3,4(r4)
  807d08:	b009883a 	mov	r4,r22
  807d0c:	080af7c0 	call	80af7c <__malloc_unlock>
  807d10:	8023883a 	mov	r17,r16
  807d14:	00000606 	br	807d30 <_realloc_r+0xd8>
  807d18:	01c00404 	movi	r7,16
  807d1c:	3839883a 	mov	fp,r7
  807d20:	e47fe72e 	bgeu	fp,r17,807cc0 <_realloc_r+0x68>
  807d24:	00800304 	movi	r2,12
  807d28:	0023883a 	mov	r17,zero
  807d2c:	b0800015 	stw	r2,0(r22)
  807d30:	8805883a 	mov	r2,r17
  807d34:	dfc00b17 	ldw	ra,44(sp)
  807d38:	df000a17 	ldw	fp,40(sp)
  807d3c:	ddc00917 	ldw	r23,36(sp)
  807d40:	dd800817 	ldw	r22,32(sp)
  807d44:	dd400717 	ldw	r21,28(sp)
  807d48:	dd000617 	ldw	r20,24(sp)
  807d4c:	dcc00517 	ldw	r19,20(sp)
  807d50:	dc800417 	ldw	r18,16(sp)
  807d54:	dc400317 	ldw	r17,12(sp)
  807d58:	dc000217 	ldw	r16,8(sp)
  807d5c:	dec00c04 	addi	sp,sp,48
  807d60:	f800283a 	ret
  807d64:	00802074 	movhi	r2,129
  807d68:	10bdc504 	addi	r2,r2,-2284
  807d6c:	12400217 	ldw	r9,8(r2)
  807d70:	84cd883a 	add	r6,r16,r19
  807d74:	802b883a 	mov	r21,r16
  807d78:	3240b926 	beq	r6,r9,808060 <_realloc_r+0x408>
  807d7c:	31400117 	ldw	r5,4(r6)
  807d80:	00bfff84 	movi	r2,-2
  807d84:	2884703a 	and	r2,r5,r2
  807d88:	1185883a 	add	r2,r2,r6
  807d8c:	10c00117 	ldw	r3,4(r2)
  807d90:	18c0004c 	andi	r3,r3,1
  807d94:	1807003a 	cmpeq	r3,r3,zero
  807d98:	1800a326 	beq	r3,zero,808028 <_realloc_r+0x3d0>
  807d9c:	2908703a 	and	r4,r5,r4
  807da0:	9929883a 	add	r20,r19,r4
  807da4:	a1c0a30e 	bge	r20,r7,808034 <_realloc_r+0x3dc>
  807da8:	4080004c 	andi	r2,r8,1
  807dac:	1000551e 	bne	r2,zero,807f04 <_realloc_r+0x2ac>
  807db0:	80800017 	ldw	r2,0(r16)
  807db4:	80afc83a 	sub	r23,r16,r2
  807db8:	b8c00117 	ldw	r3,4(r23)
  807dbc:	00bfff04 	movi	r2,-4
  807dc0:	1884703a 	and	r2,r3,r2
  807dc4:	30002e26 	beq	r6,zero,807e80 <_realloc_r+0x228>
  807dc8:	3240b926 	beq	r6,r9,8080b0 <_realloc_r+0x458>
  807dcc:	98a9883a 	add	r20,r19,r2
  807dd0:	2509883a 	add	r4,r4,r20
  807dd4:	d9000015 	stw	r4,0(sp)
  807dd8:	21c02a16 	blt	r4,r7,807e84 <_realloc_r+0x22c>
  807ddc:	30800317 	ldw	r2,12(r6)
  807de0:	30c00217 	ldw	r3,8(r6)
  807de4:	01400904 	movi	r5,36
  807de8:	99bfff04 	addi	r6,r19,-4
  807dec:	18800315 	stw	r2,12(r3)
  807df0:	10c00215 	stw	r3,8(r2)
  807df4:	b9000317 	ldw	r4,12(r23)
  807df8:	b8800217 	ldw	r2,8(r23)
  807dfc:	b82b883a 	mov	r21,r23
  807e00:	bc000204 	addi	r16,r23,8
  807e04:	20800215 	stw	r2,8(r4)
  807e08:	11000315 	stw	r4,12(r2)
  807e0c:	2980e436 	bltu	r5,r6,8081a0 <_realloc_r+0x548>
  807e10:	008004c4 	movi	r2,19
  807e14:	9009883a 	mov	r4,r18
  807e18:	8011883a 	mov	r8,r16
  807e1c:	11800f2e 	bgeu	r2,r6,807e5c <_realloc_r+0x204>
  807e20:	90800017 	ldw	r2,0(r18)
  807e24:	ba000404 	addi	r8,r23,16
  807e28:	91000204 	addi	r4,r18,8
  807e2c:	b8800215 	stw	r2,8(r23)
  807e30:	90c00117 	ldw	r3,4(r18)
  807e34:	008006c4 	movi	r2,27
  807e38:	b8c00315 	stw	r3,12(r23)
  807e3c:	1180072e 	bgeu	r2,r6,807e5c <_realloc_r+0x204>
  807e40:	90c00217 	ldw	r3,8(r18)
  807e44:	ba000604 	addi	r8,r23,24
  807e48:	91000404 	addi	r4,r18,16
  807e4c:	b8c00415 	stw	r3,16(r23)
  807e50:	90800317 	ldw	r2,12(r18)
  807e54:	b8800515 	stw	r2,20(r23)
  807e58:	3140e726 	beq	r6,r5,8081f8 <_realloc_r+0x5a0>
  807e5c:	20800017 	ldw	r2,0(r4)
  807e60:	dd000017 	ldw	r20,0(sp)
  807e64:	b80f883a 	mov	r7,r23
  807e68:	40800015 	stw	r2,0(r8)
  807e6c:	20c00117 	ldw	r3,4(r4)
  807e70:	40c00115 	stw	r3,4(r8)
  807e74:	20800217 	ldw	r2,8(r4)
  807e78:	40800215 	stw	r2,8(r8)
  807e7c:	003f9706 	br	807cdc <_realloc_r+0x84>
  807e80:	98a9883a 	add	r20,r19,r2
  807e84:	a1c01f16 	blt	r20,r7,807f04 <_realloc_r+0x2ac>
  807e88:	b8c00317 	ldw	r3,12(r23)
  807e8c:	b8800217 	ldw	r2,8(r23)
  807e90:	99bfff04 	addi	r6,r19,-4
  807e94:	01400904 	movi	r5,36
  807e98:	b82b883a 	mov	r21,r23
  807e9c:	18800215 	stw	r2,8(r3)
  807ea0:	10c00315 	stw	r3,12(r2)
  807ea4:	bc000204 	addi	r16,r23,8
  807ea8:	2980c336 	bltu	r5,r6,8081b8 <_realloc_r+0x560>
  807eac:	008004c4 	movi	r2,19
  807eb0:	9009883a 	mov	r4,r18
  807eb4:	8011883a 	mov	r8,r16
  807eb8:	11800f2e 	bgeu	r2,r6,807ef8 <_realloc_r+0x2a0>
  807ebc:	90800017 	ldw	r2,0(r18)
  807ec0:	ba000404 	addi	r8,r23,16
  807ec4:	91000204 	addi	r4,r18,8
  807ec8:	b8800215 	stw	r2,8(r23)
  807ecc:	90c00117 	ldw	r3,4(r18)
  807ed0:	008006c4 	movi	r2,27
  807ed4:	b8c00315 	stw	r3,12(r23)
  807ed8:	1180072e 	bgeu	r2,r6,807ef8 <_realloc_r+0x2a0>
  807edc:	90c00217 	ldw	r3,8(r18)
  807ee0:	ba000604 	addi	r8,r23,24
  807ee4:	91000404 	addi	r4,r18,16
  807ee8:	b8c00415 	stw	r3,16(r23)
  807eec:	90800317 	ldw	r2,12(r18)
  807ef0:	b8800515 	stw	r2,20(r23)
  807ef4:	3140c726 	beq	r6,r5,808214 <_realloc_r+0x5bc>
  807ef8:	20800017 	ldw	r2,0(r4)
  807efc:	b80f883a 	mov	r7,r23
  807f00:	003fd906 	br	807e68 <_realloc_r+0x210>
  807f04:	880b883a 	mov	r5,r17
  807f08:	b009883a 	mov	r4,r22
  807f0c:	0801d240 	call	801d24 <_malloc_r>
  807f10:	1023883a 	mov	r17,r2
  807f14:	10002526 	beq	r2,zero,807fac <_realloc_r+0x354>
  807f18:	80800117 	ldw	r2,4(r16)
  807f1c:	00ffff84 	movi	r3,-2
  807f20:	893ffe04 	addi	r4,r17,-8
  807f24:	10c4703a 	and	r2,r2,r3
  807f28:	8085883a 	add	r2,r16,r2
  807f2c:	20809526 	beq	r4,r2,808184 <_realloc_r+0x52c>
  807f30:	99bfff04 	addi	r6,r19,-4
  807f34:	01c00904 	movi	r7,36
  807f38:	39804536 	bltu	r7,r6,808050 <_realloc_r+0x3f8>
  807f3c:	008004c4 	movi	r2,19
  807f40:	9009883a 	mov	r4,r18
  807f44:	880b883a 	mov	r5,r17
  807f48:	11800f2e 	bgeu	r2,r6,807f88 <_realloc_r+0x330>
  807f4c:	90800017 	ldw	r2,0(r18)
  807f50:	89400204 	addi	r5,r17,8
  807f54:	91000204 	addi	r4,r18,8
  807f58:	88800015 	stw	r2,0(r17)
  807f5c:	90c00117 	ldw	r3,4(r18)
  807f60:	008006c4 	movi	r2,27
  807f64:	88c00115 	stw	r3,4(r17)
  807f68:	1180072e 	bgeu	r2,r6,807f88 <_realloc_r+0x330>
  807f6c:	90c00217 	ldw	r3,8(r18)
  807f70:	89400404 	addi	r5,r17,16
  807f74:	91000404 	addi	r4,r18,16
  807f78:	88c00215 	stw	r3,8(r17)
  807f7c:	90800317 	ldw	r2,12(r18)
  807f80:	88800315 	stw	r2,12(r17)
  807f84:	31c09126 	beq	r6,r7,8081cc <_realloc_r+0x574>
  807f88:	20800017 	ldw	r2,0(r4)
  807f8c:	28800015 	stw	r2,0(r5)
  807f90:	20c00117 	ldw	r3,4(r4)
  807f94:	28c00115 	stw	r3,4(r5)
  807f98:	20800217 	ldw	r2,8(r4)
  807f9c:	28800215 	stw	r2,8(r5)
  807fa0:	900b883a 	mov	r5,r18
  807fa4:	b009883a 	mov	r4,r22
  807fa8:	08012280 	call	801228 <_free_r>
  807fac:	b009883a 	mov	r4,r22
  807fb0:	080af7c0 	call	80af7c <__malloc_unlock>
  807fb4:	003f5e06 	br	807d30 <_realloc_r+0xd8>
  807fb8:	300b883a 	mov	r5,r6
  807fbc:	dfc00b17 	ldw	ra,44(sp)
  807fc0:	df000a17 	ldw	fp,40(sp)
  807fc4:	ddc00917 	ldw	r23,36(sp)
  807fc8:	dd800817 	ldw	r22,32(sp)
  807fcc:	dd400717 	ldw	r21,28(sp)
  807fd0:	dd000617 	ldw	r20,24(sp)
  807fd4:	dcc00517 	ldw	r19,20(sp)
  807fd8:	dc800417 	ldw	r18,16(sp)
  807fdc:	dc400317 	ldw	r17,12(sp)
  807fe0:	dc000217 	ldw	r16,8(sp)
  807fe4:	dec00c04 	addi	sp,sp,48
  807fe8:	0801d241 	jmpi	801d24 <_malloc_r>
  807fec:	38800117 	ldw	r2,4(r7)
  807ff0:	e54b883a 	add	r5,fp,r21
  807ff4:	31000054 	ori	r4,r6,1
  807ff8:	1080004c 	andi	r2,r2,1
  807ffc:	1704b03a 	or	r2,r2,fp
  808000:	38800115 	stw	r2,4(r7)
  808004:	29000115 	stw	r4,4(r5)
  808008:	2987883a 	add	r3,r5,r6
  80800c:	18800117 	ldw	r2,4(r3)
  808010:	29400204 	addi	r5,r5,8
  808014:	b009883a 	mov	r4,r22
  808018:	10800054 	ori	r2,r2,1
  80801c:	18800115 	stw	r2,4(r3)
  808020:	08012280 	call	801228 <_free_r>
  808024:	003f3806 	br	807d08 <_realloc_r+0xb0>
  808028:	000d883a 	mov	r6,zero
  80802c:	0009883a 	mov	r4,zero
  808030:	003f5d06 	br	807da8 <_realloc_r+0x150>
  808034:	30c00217 	ldw	r3,8(r6)
  808038:	30800317 	ldw	r2,12(r6)
  80803c:	800f883a 	mov	r7,r16
  808040:	84000204 	addi	r16,r16,8
  808044:	10c00215 	stw	r3,8(r2)
  808048:	18800315 	stw	r2,12(r3)
  80804c:	003f2306 	br	807cdc <_realloc_r+0x84>
  808050:	8809883a 	mov	r4,r17
  808054:	900b883a 	mov	r5,r18
  808058:	0806b0c0 	call	806b0c <memmove>
  80805c:	003fd006 	br	807fa0 <_realloc_r+0x348>
  808060:	30800117 	ldw	r2,4(r6)
  808064:	e0c00404 	addi	r3,fp,16
  808068:	1108703a 	and	r4,r2,r4
  80806c:	9905883a 	add	r2,r19,r4
  808070:	10ff4d16 	blt	r2,r3,807da8 <_realloc_r+0x150>
  808074:	1705c83a 	sub	r2,r2,fp
  808078:	870b883a 	add	r5,r16,fp
  80807c:	10800054 	ori	r2,r2,1
  808080:	28800115 	stw	r2,4(r5)
  808084:	80c00117 	ldw	r3,4(r16)
  808088:	00802074 	movhi	r2,129
  80808c:	10bdc504 	addi	r2,r2,-2284
  808090:	b009883a 	mov	r4,r22
  808094:	18c0004c 	andi	r3,r3,1
  808098:	e0c6b03a 	or	r3,fp,r3
  80809c:	11400215 	stw	r5,8(r2)
  8080a0:	80c00115 	stw	r3,4(r16)
  8080a4:	080af7c0 	call	80af7c <__malloc_unlock>
  8080a8:	84400204 	addi	r17,r16,8
  8080ac:	003f2006 	br	807d30 <_realloc_r+0xd8>
  8080b0:	98a9883a 	add	r20,r19,r2
  8080b4:	2509883a 	add	r4,r4,r20
  8080b8:	e0800404 	addi	r2,fp,16
  8080bc:	d9000115 	stw	r4,4(sp)
  8080c0:	20bf7016 	blt	r4,r2,807e84 <_realloc_r+0x22c>
  8080c4:	b8c00317 	ldw	r3,12(r23)
  8080c8:	b8800217 	ldw	r2,8(r23)
  8080cc:	99bfff04 	addi	r6,r19,-4
  8080d0:	01400904 	movi	r5,36
  8080d4:	18800215 	stw	r2,8(r3)
  8080d8:	10c00315 	stw	r3,12(r2)
  8080dc:	bc400204 	addi	r17,r23,8
  8080e0:	29804136 	bltu	r5,r6,8081e8 <_realloc_r+0x590>
  8080e4:	008004c4 	movi	r2,19
  8080e8:	9009883a 	mov	r4,r18
  8080ec:	880f883a 	mov	r7,r17
  8080f0:	11800f2e 	bgeu	r2,r6,808130 <_realloc_r+0x4d8>
  8080f4:	90800017 	ldw	r2,0(r18)
  8080f8:	b9c00404 	addi	r7,r23,16
  8080fc:	91000204 	addi	r4,r18,8
  808100:	b8800215 	stw	r2,8(r23)
  808104:	90c00117 	ldw	r3,4(r18)
  808108:	008006c4 	movi	r2,27
  80810c:	b8c00315 	stw	r3,12(r23)
  808110:	1180072e 	bgeu	r2,r6,808130 <_realloc_r+0x4d8>
  808114:	90c00217 	ldw	r3,8(r18)
  808118:	b9c00604 	addi	r7,r23,24
  80811c:	91000404 	addi	r4,r18,16
  808120:	b8c00415 	stw	r3,16(r23)
  808124:	90800317 	ldw	r2,12(r18)
  808128:	b8800515 	stw	r2,20(r23)
  80812c:	31404026 	beq	r6,r5,808230 <_realloc_r+0x5d8>
  808130:	20800017 	ldw	r2,0(r4)
  808134:	38800015 	stw	r2,0(r7)
  808138:	20c00117 	ldw	r3,4(r4)
  80813c:	38c00115 	stw	r3,4(r7)
  808140:	20800217 	ldw	r2,8(r4)
  808144:	38800215 	stw	r2,8(r7)
  808148:	d8c00117 	ldw	r3,4(sp)
  80814c:	bf0b883a 	add	r5,r23,fp
  808150:	b009883a 	mov	r4,r22
  808154:	1f05c83a 	sub	r2,r3,fp
  808158:	10800054 	ori	r2,r2,1
  80815c:	28800115 	stw	r2,4(r5)
  808160:	b8c00117 	ldw	r3,4(r23)
  808164:	00802074 	movhi	r2,129
  808168:	10bdc504 	addi	r2,r2,-2284
  80816c:	11400215 	stw	r5,8(r2)
  808170:	18c0004c 	andi	r3,r3,1
  808174:	e0c6b03a 	or	r3,fp,r3
  808178:	b8c00115 	stw	r3,4(r23)
  80817c:	080af7c0 	call	80af7c <__malloc_unlock>
  808180:	003eeb06 	br	807d30 <_realloc_r+0xd8>
  808184:	20800117 	ldw	r2,4(r4)
  808188:	00ffff04 	movi	r3,-4
  80818c:	800f883a 	mov	r7,r16
  808190:	10c4703a 	and	r2,r2,r3
  808194:	98a9883a 	add	r20,r19,r2
  808198:	84000204 	addi	r16,r16,8
  80819c:	003ecf06 	br	807cdc <_realloc_r+0x84>
  8081a0:	900b883a 	mov	r5,r18
  8081a4:	8009883a 	mov	r4,r16
  8081a8:	0806b0c0 	call	806b0c <memmove>
  8081ac:	dd000017 	ldw	r20,0(sp)
  8081b0:	b80f883a 	mov	r7,r23
  8081b4:	003ec906 	br	807cdc <_realloc_r+0x84>
  8081b8:	900b883a 	mov	r5,r18
  8081bc:	8009883a 	mov	r4,r16
  8081c0:	0806b0c0 	call	806b0c <memmove>
  8081c4:	b80f883a 	mov	r7,r23
  8081c8:	003ec406 	br	807cdc <_realloc_r+0x84>
  8081cc:	90c00417 	ldw	r3,16(r18)
  8081d0:	89400604 	addi	r5,r17,24
  8081d4:	91000604 	addi	r4,r18,24
  8081d8:	88c00415 	stw	r3,16(r17)
  8081dc:	90800517 	ldw	r2,20(r18)
  8081e0:	88800515 	stw	r2,20(r17)
  8081e4:	003f6806 	br	807f88 <_realloc_r+0x330>
  8081e8:	900b883a 	mov	r5,r18
  8081ec:	8809883a 	mov	r4,r17
  8081f0:	0806b0c0 	call	806b0c <memmove>
  8081f4:	003fd406 	br	808148 <_realloc_r+0x4f0>
  8081f8:	90c00417 	ldw	r3,16(r18)
  8081fc:	91000604 	addi	r4,r18,24
  808200:	ba000804 	addi	r8,r23,32
  808204:	b8c00615 	stw	r3,24(r23)
  808208:	90800517 	ldw	r2,20(r18)
  80820c:	b8800715 	stw	r2,28(r23)
  808210:	003f1206 	br	807e5c <_realloc_r+0x204>
  808214:	90c00417 	ldw	r3,16(r18)
  808218:	91000604 	addi	r4,r18,24
  80821c:	ba000804 	addi	r8,r23,32
  808220:	b8c00615 	stw	r3,24(r23)
  808224:	90800517 	ldw	r2,20(r18)
  808228:	b8800715 	stw	r2,28(r23)
  80822c:	003f3206 	br	807ef8 <_realloc_r+0x2a0>
  808230:	90c00417 	ldw	r3,16(r18)
  808234:	91000604 	addi	r4,r18,24
  808238:	b9c00804 	addi	r7,r23,32
  80823c:	b8c00615 	stw	r3,24(r23)
  808240:	90800517 	ldw	r2,20(r18)
  808244:	b8800715 	stw	r2,28(r23)
  808248:	003fb906 	br	808130 <_realloc_r+0x4d8>

0080824c <__isinfd>:
  80824c:	200d883a 	mov	r6,r4
  808250:	0109c83a 	sub	r4,zero,r4
  808254:	2188b03a 	or	r4,r4,r6
  808258:	2008d7fa 	srli	r4,r4,31
  80825c:	00a00034 	movhi	r2,32768
  808260:	10bfffc4 	addi	r2,r2,-1
  808264:	1144703a 	and	r2,r2,r5
  808268:	2088b03a 	or	r4,r4,r2
  80826c:	009ffc34 	movhi	r2,32752
  808270:	1105c83a 	sub	r2,r2,r4
  808274:	0087c83a 	sub	r3,zero,r2
  808278:	10c4b03a 	or	r2,r2,r3
  80827c:	1004d7fa 	srli	r2,r2,31
  808280:	00c00044 	movi	r3,1
  808284:	1885c83a 	sub	r2,r3,r2
  808288:	f800283a 	ret

0080828c <__isnand>:
  80828c:	200d883a 	mov	r6,r4
  808290:	0109c83a 	sub	r4,zero,r4
  808294:	2188b03a 	or	r4,r4,r6
  808298:	2008d7fa 	srli	r4,r4,31
  80829c:	00a00034 	movhi	r2,32768
  8082a0:	10bfffc4 	addi	r2,r2,-1
  8082a4:	1144703a 	and	r2,r2,r5
  8082a8:	2088b03a 	or	r4,r4,r2
  8082ac:	009ffc34 	movhi	r2,32752
  8082b0:	1105c83a 	sub	r2,r2,r4
  8082b4:	1004d7fa 	srli	r2,r2,31
  8082b8:	f800283a 	ret

008082bc <strcmp>:
  8082bc:	2144b03a 	or	r2,r4,r5
  8082c0:	108000cc 	andi	r2,r2,3
  8082c4:	10001d1e 	bne	r2,zero,80833c <strcmp+0x80>
  8082c8:	200f883a 	mov	r7,r4
  8082cc:	28800017 	ldw	r2,0(r5)
  8082d0:	21000017 	ldw	r4,0(r4)
  8082d4:	280d883a 	mov	r6,r5
  8082d8:	2080161e 	bne	r4,r2,808334 <strcmp+0x78>
  8082dc:	023fbff4 	movhi	r8,65279
  8082e0:	423fbfc4 	addi	r8,r8,-257
  8082e4:	2207883a 	add	r3,r4,r8
  8082e8:	01602074 	movhi	r5,32897
  8082ec:	29602004 	addi	r5,r5,-32640
  8082f0:	1946703a 	and	r3,r3,r5
  8082f4:	0104303a 	nor	r2,zero,r4
  8082f8:	10c4703a 	and	r2,r2,r3
  8082fc:	10001c1e 	bne	r2,zero,808370 <strcmp+0xb4>
  808300:	4013883a 	mov	r9,r8
  808304:	2811883a 	mov	r8,r5
  808308:	00000106 	br	808310 <strcmp+0x54>
  80830c:	1800181e 	bne	r3,zero,808370 <strcmp+0xb4>
  808310:	39c00104 	addi	r7,r7,4
  808314:	39000017 	ldw	r4,0(r7)
  808318:	31800104 	addi	r6,r6,4
  80831c:	31400017 	ldw	r5,0(r6)
  808320:	2245883a 	add	r2,r4,r9
  808324:	1204703a 	and	r2,r2,r8
  808328:	0106303a 	nor	r3,zero,r4
  80832c:	1886703a 	and	r3,r3,r2
  808330:	217ff626 	beq	r4,r5,80830c <strcmp+0x50>
  808334:	3809883a 	mov	r4,r7
  808338:	300b883a 	mov	r5,r6
  80833c:	20c00007 	ldb	r3,0(r4)
  808340:	1800051e 	bne	r3,zero,808358 <strcmp+0x9c>
  808344:	00000606 	br	808360 <strcmp+0xa4>
  808348:	21000044 	addi	r4,r4,1
  80834c:	20c00007 	ldb	r3,0(r4)
  808350:	29400044 	addi	r5,r5,1
  808354:	18000226 	beq	r3,zero,808360 <strcmp+0xa4>
  808358:	28800007 	ldb	r2,0(r5)
  80835c:	18bffa26 	beq	r3,r2,808348 <strcmp+0x8c>
  808360:	20c00003 	ldbu	r3,0(r4)
  808364:	28800003 	ldbu	r2,0(r5)
  808368:	1885c83a 	sub	r2,r3,r2
  80836c:	f800283a 	ret
  808370:	0005883a 	mov	r2,zero
  808374:	f800283a 	ret

00808378 <strlen>:
  808378:	208000cc 	andi	r2,r4,3
  80837c:	2011883a 	mov	r8,r4
  808380:	1000161e 	bne	r2,zero,8083dc <strlen+0x64>
  808384:	20c00017 	ldw	r3,0(r4)
  808388:	017fbff4 	movhi	r5,65279
  80838c:	297fbfc4 	addi	r5,r5,-257
  808390:	01e02074 	movhi	r7,32897
  808394:	39e02004 	addi	r7,r7,-32640
  808398:	1945883a 	add	r2,r3,r5
  80839c:	11c4703a 	and	r2,r2,r7
  8083a0:	00c6303a 	nor	r3,zero,r3
  8083a4:	1886703a 	and	r3,r3,r2
  8083a8:	18000c1e 	bne	r3,zero,8083dc <strlen+0x64>
  8083ac:	280d883a 	mov	r6,r5
  8083b0:	380b883a 	mov	r5,r7
  8083b4:	21000104 	addi	r4,r4,4
  8083b8:	20800017 	ldw	r2,0(r4)
  8083bc:	1187883a 	add	r3,r2,r6
  8083c0:	1946703a 	and	r3,r3,r5
  8083c4:	0084303a 	nor	r2,zero,r2
  8083c8:	10c4703a 	and	r2,r2,r3
  8083cc:	103ff926 	beq	r2,zero,8083b4 <strlen+0x3c>
  8083d0:	20800007 	ldb	r2,0(r4)
  8083d4:	10000326 	beq	r2,zero,8083e4 <strlen+0x6c>
  8083d8:	21000044 	addi	r4,r4,1
  8083dc:	20800007 	ldb	r2,0(r4)
  8083e0:	103ffd1e 	bne	r2,zero,8083d8 <strlen+0x60>
  8083e4:	2205c83a 	sub	r2,r4,r8
  8083e8:	f800283a 	ret

008083ec <_calloc_r>:
  8083ec:	298b383a 	mul	r5,r5,r6
  8083f0:	defffe04 	addi	sp,sp,-8
  8083f4:	dc000015 	stw	r16,0(sp)
  8083f8:	dfc00115 	stw	ra,4(sp)
  8083fc:	0801d240 	call	801d24 <_malloc_r>
  808400:	1021883a 	mov	r16,r2
  808404:	01c00904 	movi	r7,36
  808408:	10000d26 	beq	r2,zero,808440 <_calloc_r+0x54>
  80840c:	10ffff17 	ldw	r3,-4(r2)
  808410:	1009883a 	mov	r4,r2
  808414:	00bfff04 	movi	r2,-4
  808418:	1886703a 	and	r3,r3,r2
  80841c:	1887883a 	add	r3,r3,r2
  808420:	180d883a 	mov	r6,r3
  808424:	000b883a 	mov	r5,zero
  808428:	38c01736 	bltu	r7,r3,808488 <_calloc_r+0x9c>
  80842c:	008004c4 	movi	r2,19
  808430:	10c00836 	bltu	r2,r3,808454 <_calloc_r+0x68>
  808434:	20000215 	stw	zero,8(r4)
  808438:	20000015 	stw	zero,0(r4)
  80843c:	20000115 	stw	zero,4(r4)
  808440:	8005883a 	mov	r2,r16
  808444:	dfc00117 	ldw	ra,4(sp)
  808448:	dc000017 	ldw	r16,0(sp)
  80844c:	dec00204 	addi	sp,sp,8
  808450:	f800283a 	ret
  808454:	008006c4 	movi	r2,27
  808458:	80000015 	stw	zero,0(r16)
  80845c:	80000115 	stw	zero,4(r16)
  808460:	81000204 	addi	r4,r16,8
  808464:	10fff32e 	bgeu	r2,r3,808434 <_calloc_r+0x48>
  808468:	80000215 	stw	zero,8(r16)
  80846c:	80000315 	stw	zero,12(r16)
  808470:	81000404 	addi	r4,r16,16
  808474:	19ffef1e 	bne	r3,r7,808434 <_calloc_r+0x48>
  808478:	81000604 	addi	r4,r16,24
  80847c:	80000415 	stw	zero,16(r16)
  808480:	80000515 	stw	zero,20(r16)
  808484:	003feb06 	br	808434 <_calloc_r+0x48>
  808488:	08024640 	call	802464 <memset>
  80848c:	8005883a 	mov	r2,r16
  808490:	dfc00117 	ldw	ra,4(sp)
  808494:	dc000017 	ldw	r16,0(sp)
  808498:	dec00204 	addi	sp,sp,8
  80849c:	f800283a 	ret

008084a0 <__udivdi3>:
  8084a0:	defff004 	addi	sp,sp,-64
  8084a4:	2005883a 	mov	r2,r4
  8084a8:	3011883a 	mov	r8,r6
  8084ac:	df000e15 	stw	fp,56(sp)
  8084b0:	dd000a15 	stw	r20,40(sp)
  8084b4:	dc000615 	stw	r16,24(sp)
  8084b8:	dfc00f15 	stw	ra,60(sp)
  8084bc:	ddc00d15 	stw	r23,52(sp)
  8084c0:	dd800c15 	stw	r22,48(sp)
  8084c4:	dd400b15 	stw	r21,44(sp)
  8084c8:	dcc00915 	stw	r19,36(sp)
  8084cc:	dc800815 	stw	r18,32(sp)
  8084d0:	dc400715 	stw	r17,28(sp)
  8084d4:	4021883a 	mov	r16,r8
  8084d8:	1039883a 	mov	fp,r2
  8084dc:	2829883a 	mov	r20,r5
  8084e0:	38003b1e 	bne	r7,zero,8085d0 <__udivdi3+0x130>
  8084e4:	2a005c36 	bltu	r5,r8,808658 <__udivdi3+0x1b8>
  8084e8:	4000a626 	beq	r8,zero,808784 <__udivdi3+0x2e4>
  8084ec:	00bfffd4 	movui	r2,65535
  8084f0:	14009e36 	bltu	r2,r16,80876c <__udivdi3+0x2cc>
  8084f4:	00803fc4 	movi	r2,255
  8084f8:	14013d36 	bltu	r2,r16,8089f0 <__udivdi3+0x550>
  8084fc:	000b883a 	mov	r5,zero
  808500:	0005883a 	mov	r2,zero
  808504:	8084d83a 	srl	r2,r16,r2
  808508:	01002074 	movhi	r4,129
  80850c:	213bc204 	addi	r4,r4,-4344
  808510:	01800804 	movi	r6,32
  808514:	1105883a 	add	r2,r2,r4
  808518:	10c00003 	ldbu	r3,0(r2)
  80851c:	28c7883a 	add	r3,r5,r3
  808520:	30edc83a 	sub	r22,r6,r3
  808524:	b000ee1e 	bne	r22,zero,8088e0 <__udivdi3+0x440>
  808528:	802ad43a 	srli	r21,r16,16
  80852c:	00800044 	movi	r2,1
  808530:	a423c83a 	sub	r17,r20,r16
  808534:	85ffffcc 	andi	r23,r16,65535
  808538:	d8800315 	stw	r2,12(sp)
  80853c:	8809883a 	mov	r4,r17
  808540:	a80b883a 	mov	r5,r21
  808544:	08009680 	call	800968 <__udivsi3>
  808548:	8809883a 	mov	r4,r17
  80854c:	a80b883a 	mov	r5,r21
  808550:	102d883a 	mov	r22,r2
  808554:	08009700 	call	800970 <__umodsi3>
  808558:	1004943a 	slli	r2,r2,16
  80855c:	e006d43a 	srli	r3,fp,16
  808560:	bda3383a 	mul	r17,r23,r22
  808564:	10c4b03a 	or	r2,r2,r3
  808568:	1440042e 	bgeu	r2,r17,80857c <__udivdi3+0xdc>
  80856c:	1405883a 	add	r2,r2,r16
  808570:	b5bfffc4 	addi	r22,r22,-1
  808574:	14000136 	bltu	r2,r16,80857c <__udivdi3+0xdc>
  808578:	14413d36 	bltu	r2,r17,808a70 <__udivdi3+0x5d0>
  80857c:	1463c83a 	sub	r17,r2,r17
  808580:	8809883a 	mov	r4,r17
  808584:	a80b883a 	mov	r5,r21
  808588:	08009680 	call	800968 <__udivsi3>
  80858c:	8809883a 	mov	r4,r17
  808590:	a80b883a 	mov	r5,r21
  808594:	1029883a 	mov	r20,r2
  808598:	08009700 	call	800970 <__umodsi3>
  80859c:	1004943a 	slli	r2,r2,16
  8085a0:	bd09383a 	mul	r4,r23,r20
  8085a4:	e0ffffcc 	andi	r3,fp,65535
  8085a8:	10c4b03a 	or	r2,r2,r3
  8085ac:	1100042e 	bgeu	r2,r4,8085c0 <__udivdi3+0x120>
  8085b0:	8085883a 	add	r2,r16,r2
  8085b4:	a53fffc4 	addi	r20,r20,-1
  8085b8:	14000136 	bltu	r2,r16,8085c0 <__udivdi3+0x120>
  8085bc:	11012036 	bltu	r2,r4,808a40 <__udivdi3+0x5a0>
  8085c0:	b004943a 	slli	r2,r22,16
  8085c4:	d9000317 	ldw	r4,12(sp)
  8085c8:	a084b03a 	or	r2,r20,r2
  8085cc:	00001506 	br	808624 <__udivdi3+0x184>
  8085d0:	380d883a 	mov	r6,r7
  8085d4:	29c06236 	bltu	r5,r7,808760 <__udivdi3+0x2c0>
  8085d8:	00bfffd4 	movui	r2,65535
  8085dc:	11c05a36 	bltu	r2,r7,808748 <__udivdi3+0x2a8>
  8085e0:	00803fc4 	movi	r2,255
  8085e4:	11c0fc36 	bltu	r2,r7,8089d8 <__udivdi3+0x538>
  8085e8:	000b883a 	mov	r5,zero
  8085ec:	0005883a 	mov	r2,zero
  8085f0:	3084d83a 	srl	r2,r6,r2
  8085f4:	01002074 	movhi	r4,129
  8085f8:	213bc204 	addi	r4,r4,-4344
  8085fc:	01c00804 	movi	r7,32
  808600:	1105883a 	add	r2,r2,r4
  808604:	10c00003 	ldbu	r3,0(r2)
  808608:	28c7883a 	add	r3,r5,r3
  80860c:	38efc83a 	sub	r23,r7,r3
  808610:	b800691e 	bne	r23,zero,8087b8 <__udivdi3+0x318>
  808614:	35000136 	bltu	r6,r20,80861c <__udivdi3+0x17c>
  808618:	e4005136 	bltu	fp,r16,808760 <__udivdi3+0x2c0>
  80861c:	00800044 	movi	r2,1
  808620:	0009883a 	mov	r4,zero
  808624:	2007883a 	mov	r3,r4
  808628:	dfc00f17 	ldw	ra,60(sp)
  80862c:	df000e17 	ldw	fp,56(sp)
  808630:	ddc00d17 	ldw	r23,52(sp)
  808634:	dd800c17 	ldw	r22,48(sp)
  808638:	dd400b17 	ldw	r21,44(sp)
  80863c:	dd000a17 	ldw	r20,40(sp)
  808640:	dcc00917 	ldw	r19,36(sp)
  808644:	dc800817 	ldw	r18,32(sp)
  808648:	dc400717 	ldw	r17,28(sp)
  80864c:	dc000617 	ldw	r16,24(sp)
  808650:	dec01004 	addi	sp,sp,64
  808654:	f800283a 	ret
  808658:	00bfffd4 	movui	r2,65535
  80865c:	12005036 	bltu	r2,r8,8087a0 <__udivdi3+0x300>
  808660:	00803fc4 	movi	r2,255
  808664:	1200e836 	bltu	r2,r8,808a08 <__udivdi3+0x568>
  808668:	000b883a 	mov	r5,zero
  80866c:	0005883a 	mov	r2,zero
  808670:	8084d83a 	srl	r2,r16,r2
  808674:	01002074 	movhi	r4,129
  808678:	213bc204 	addi	r4,r4,-4344
  80867c:	01800804 	movi	r6,32
  808680:	1105883a 	add	r2,r2,r4
  808684:	10c00003 	ldbu	r3,0(r2)
  808688:	28c7883a 	add	r3,r5,r3
  80868c:	30cbc83a 	sub	r5,r6,r3
  808690:	28000626 	beq	r5,zero,8086ac <__udivdi3+0x20c>
  808694:	3145c83a 	sub	r2,r6,r5
  808698:	e084d83a 	srl	r2,fp,r2
  80869c:	a146983a 	sll	r3,r20,r5
  8086a0:	e178983a 	sll	fp,fp,r5
  8086a4:	8160983a 	sll	r16,r16,r5
  8086a8:	18a8b03a 	or	r20,r3,r2
  8086ac:	802ad43a 	srli	r21,r16,16
  8086b0:	a009883a 	mov	r4,r20
  8086b4:	85ffffcc 	andi	r23,r16,65535
  8086b8:	a80b883a 	mov	r5,r21
  8086bc:	08009680 	call	800968 <__udivsi3>
  8086c0:	a009883a 	mov	r4,r20
  8086c4:	a80b883a 	mov	r5,r21
  8086c8:	102d883a 	mov	r22,r2
  8086cc:	08009700 	call	800970 <__umodsi3>
  8086d0:	1004943a 	slli	r2,r2,16
  8086d4:	e006d43a 	srli	r3,fp,16
  8086d8:	bda3383a 	mul	r17,r23,r22
  8086dc:	10c4b03a 	or	r2,r2,r3
  8086e0:	1440042e 	bgeu	r2,r17,8086f4 <__udivdi3+0x254>
  8086e4:	1405883a 	add	r2,r2,r16
  8086e8:	b5bfffc4 	addi	r22,r22,-1
  8086ec:	14000136 	bltu	r2,r16,8086f4 <__udivdi3+0x254>
  8086f0:	1440d536 	bltu	r2,r17,808a48 <__udivdi3+0x5a8>
  8086f4:	1463c83a 	sub	r17,r2,r17
  8086f8:	8809883a 	mov	r4,r17
  8086fc:	a80b883a 	mov	r5,r21
  808700:	08009680 	call	800968 <__udivsi3>
  808704:	8809883a 	mov	r4,r17
  808708:	a80b883a 	mov	r5,r21
  80870c:	1029883a 	mov	r20,r2
  808710:	08009700 	call	800970 <__umodsi3>
  808714:	1004943a 	slli	r2,r2,16
  808718:	bd09383a 	mul	r4,r23,r20
  80871c:	e0ffffcc 	andi	r3,fp,65535
  808720:	10c4b03a 	or	r2,r2,r3
  808724:	1100042e 	bgeu	r2,r4,808738 <__udivdi3+0x298>
  808728:	8085883a 	add	r2,r16,r2
  80872c:	a53fffc4 	addi	r20,r20,-1
  808730:	14000136 	bltu	r2,r16,808738 <__udivdi3+0x298>
  808734:	1100c736 	bltu	r2,r4,808a54 <__udivdi3+0x5b4>
  808738:	b004943a 	slli	r2,r22,16
  80873c:	0009883a 	mov	r4,zero
  808740:	a084b03a 	or	r2,r20,r2
  808744:	003fb706 	br	808624 <__udivdi3+0x184>
  808748:	00804034 	movhi	r2,256
  80874c:	10bfffc4 	addi	r2,r2,-1
  808750:	11c0a436 	bltu	r2,r7,8089e4 <__udivdi3+0x544>
  808754:	01400404 	movi	r5,16
  808758:	2805883a 	mov	r2,r5
  80875c:	003fa406 	br	8085f0 <__udivdi3+0x150>
  808760:	0005883a 	mov	r2,zero
  808764:	0009883a 	mov	r4,zero
  808768:	003fae06 	br	808624 <__udivdi3+0x184>
  80876c:	00804034 	movhi	r2,256
  808770:	10bfffc4 	addi	r2,r2,-1
  808774:	1400a136 	bltu	r2,r16,8089fc <__udivdi3+0x55c>
  808778:	01400404 	movi	r5,16
  80877c:	2805883a 	mov	r2,r5
  808780:	003f6006 	br	808504 <__udivdi3+0x64>
  808784:	01000044 	movi	r4,1
  808788:	000b883a 	mov	r5,zero
  80878c:	08009680 	call	800968 <__udivsi3>
  808790:	1021883a 	mov	r16,r2
  808794:	00bfffd4 	movui	r2,65535
  808798:	143ff436 	bltu	r2,r16,80876c <__udivdi3+0x2cc>
  80879c:	003f5506 	br	8084f4 <__udivdi3+0x54>
  8087a0:	00804034 	movhi	r2,256
  8087a4:	10bfffc4 	addi	r2,r2,-1
  8087a8:	12009a36 	bltu	r2,r8,808a14 <__udivdi3+0x574>
  8087ac:	01400404 	movi	r5,16
  8087b0:	2805883a 	mov	r2,r5
  8087b4:	003fae06 	br	808670 <__udivdi3+0x1d0>
  8087b8:	3dc5c83a 	sub	r2,r7,r23
  8087bc:	35c8983a 	sll	r4,r6,r23
  8087c0:	8086d83a 	srl	r3,r16,r2
  8087c4:	a0a2d83a 	srl	r17,r20,r2
  8087c8:	e084d83a 	srl	r2,fp,r2
  8087cc:	20eab03a 	or	r21,r4,r3
  8087d0:	a82cd43a 	srli	r22,r21,16
  8087d4:	a5c6983a 	sll	r3,r20,r23
  8087d8:	8809883a 	mov	r4,r17
  8087dc:	b00b883a 	mov	r5,r22
  8087e0:	1886b03a 	or	r3,r3,r2
  8087e4:	d8c00215 	stw	r3,8(sp)
  8087e8:	08009680 	call	800968 <__udivsi3>
  8087ec:	8809883a 	mov	r4,r17
  8087f0:	b00b883a 	mov	r5,r22
  8087f4:	1029883a 	mov	r20,r2
  8087f8:	08009700 	call	800970 <__umodsi3>
  8087fc:	a8ffffcc 	andi	r3,r21,65535
  808800:	d8c00515 	stw	r3,20(sp)
  808804:	d9000217 	ldw	r4,8(sp)
  808808:	d9400517 	ldw	r5,20(sp)
  80880c:	1004943a 	slli	r2,r2,16
  808810:	2006d43a 	srli	r3,r4,16
  808814:	85e0983a 	sll	r16,r16,r23
  808818:	2d23383a 	mul	r17,r5,r20
  80881c:	10c4b03a 	or	r2,r2,r3
  808820:	dc000015 	stw	r16,0(sp)
  808824:	1440032e 	bgeu	r2,r17,808834 <__udivdi3+0x394>
  808828:	1545883a 	add	r2,r2,r21
  80882c:	a53fffc4 	addi	r20,r20,-1
  808830:	15407f2e 	bgeu	r2,r21,808a30 <__udivdi3+0x590>
  808834:	1463c83a 	sub	r17,r2,r17
  808838:	8809883a 	mov	r4,r17
  80883c:	b00b883a 	mov	r5,r22
  808840:	08009680 	call	800968 <__udivsi3>
  808844:	8809883a 	mov	r4,r17
  808848:	b00b883a 	mov	r5,r22
  80884c:	1021883a 	mov	r16,r2
  808850:	08009700 	call	800970 <__umodsi3>
  808854:	d8c00517 	ldw	r3,20(sp)
  808858:	d9000217 	ldw	r4,8(sp)
  80885c:	1004943a 	slli	r2,r2,16
  808860:	1c0f383a 	mul	r7,r3,r16
  808864:	20ffffcc 	andi	r3,r4,65535
  808868:	10e2b03a 	or	r17,r2,r3
  80886c:	89c0032e 	bgeu	r17,r7,80887c <__udivdi3+0x3dc>
  808870:	8d63883a 	add	r17,r17,r21
  808874:	843fffc4 	addi	r16,r16,-1
  808878:	8d40692e 	bgeu	r17,r21,808a20 <__udivdi3+0x580>
  80887c:	a008943a 	slli	r4,r20,16
  808880:	d9400017 	ldw	r5,0(sp)
  808884:	89e3c83a 	sub	r17,r17,r7
  808888:	8110b03a 	or	r8,r16,r4
  80888c:	280cd43a 	srli	r6,r5,16
  808890:	28ffffcc 	andi	r3,r5,65535
  808894:	40bfffcc 	andi	r2,r8,65535
  808898:	400ad43a 	srli	r5,r8,16
  80889c:	10d3383a 	mul	r9,r2,r3
  8088a0:	1185383a 	mul	r2,r2,r6
  8088a4:	28c7383a 	mul	r3,r5,r3
  8088a8:	4808d43a 	srli	r4,r9,16
  8088ac:	298b383a 	mul	r5,r5,r6
  8088b0:	10c5883a 	add	r2,r2,r3
  8088b4:	2089883a 	add	r4,r4,r2
  8088b8:	20c0022e 	bgeu	r4,r3,8088c4 <__udivdi3+0x424>
  8088bc:	00800074 	movhi	r2,1
  8088c0:	288b883a 	add	r5,r5,r2
  8088c4:	2004d43a 	srli	r2,r4,16
  8088c8:	288b883a 	add	r5,r5,r2
  8088cc:	89403f36 	bltu	r17,r5,8089cc <__udivdi3+0x52c>
  8088d0:	89403926 	beq	r17,r5,8089b8 <__udivdi3+0x518>
  8088d4:	4005883a 	mov	r2,r8
  8088d8:	0009883a 	mov	r4,zero
  8088dc:	003f5106 	br	808624 <__udivdi3+0x184>
  8088e0:	85a0983a 	sll	r16,r16,r22
  8088e4:	3585c83a 	sub	r2,r6,r22
  8088e8:	a0a2d83a 	srl	r17,r20,r2
  8088ec:	802ad43a 	srli	r21,r16,16
  8088f0:	e084d83a 	srl	r2,fp,r2
  8088f4:	a586983a 	sll	r3,r20,r22
  8088f8:	8809883a 	mov	r4,r17
  8088fc:	a80b883a 	mov	r5,r21
  808900:	1886b03a 	or	r3,r3,r2
  808904:	d8c00115 	stw	r3,4(sp)
  808908:	08009680 	call	800968 <__udivsi3>
  80890c:	8809883a 	mov	r4,r17
  808910:	a80b883a 	mov	r5,r21
  808914:	d8800415 	stw	r2,16(sp)
  808918:	08009700 	call	800970 <__umodsi3>
  80891c:	d9000117 	ldw	r4,4(sp)
  808920:	d9400417 	ldw	r5,16(sp)
  808924:	1004943a 	slli	r2,r2,16
  808928:	85ffffcc 	andi	r23,r16,65535
  80892c:	2006d43a 	srli	r3,r4,16
  808930:	b963383a 	mul	r17,r23,r5
  808934:	10c4b03a 	or	r2,r2,r3
  808938:	1440042e 	bgeu	r2,r17,80894c <__udivdi3+0x4ac>
  80893c:	297fffc4 	addi	r5,r5,-1
  808940:	1405883a 	add	r2,r2,r16
  808944:	d9400415 	stw	r5,16(sp)
  808948:	1400442e 	bgeu	r2,r16,808a5c <__udivdi3+0x5bc>
  80894c:	1463c83a 	sub	r17,r2,r17
  808950:	8809883a 	mov	r4,r17
  808954:	a80b883a 	mov	r5,r21
  808958:	08009680 	call	800968 <__udivsi3>
  80895c:	8809883a 	mov	r4,r17
  808960:	a80b883a 	mov	r5,r21
  808964:	1029883a 	mov	r20,r2
  808968:	08009700 	call	800970 <__umodsi3>
  80896c:	d9400117 	ldw	r5,4(sp)
  808970:	1004943a 	slli	r2,r2,16
  808974:	bd09383a 	mul	r4,r23,r20
  808978:	28ffffcc 	andi	r3,r5,65535
  80897c:	10c6b03a 	or	r3,r2,r3
  808980:	1900062e 	bgeu	r3,r4,80899c <__udivdi3+0x4fc>
  808984:	1c07883a 	add	r3,r3,r16
  808988:	a53fffc4 	addi	r20,r20,-1
  80898c:	1c000336 	bltu	r3,r16,80899c <__udivdi3+0x4fc>
  808990:	1900022e 	bgeu	r3,r4,80899c <__udivdi3+0x4fc>
  808994:	a53fffc4 	addi	r20,r20,-1
  808998:	1c07883a 	add	r3,r3,r16
  80899c:	d9400417 	ldw	r5,16(sp)
  8089a0:	e5b8983a 	sll	fp,fp,r22
  8089a4:	1923c83a 	sub	r17,r3,r4
  8089a8:	2804943a 	slli	r2,r5,16
  8089ac:	a0a8b03a 	or	r20,r20,r2
  8089b0:	dd000315 	stw	r20,12(sp)
  8089b4:	003ee106 	br	80853c <__udivdi3+0x9c>
  8089b8:	2004943a 	slli	r2,r4,16
  8089bc:	e5c8983a 	sll	r4,fp,r23
  8089c0:	48ffffcc 	andi	r3,r9,65535
  8089c4:	10c5883a 	add	r2,r2,r3
  8089c8:	20bfc22e 	bgeu	r4,r2,8088d4 <__udivdi3+0x434>
  8089cc:	40bfffc4 	addi	r2,r8,-1
  8089d0:	0009883a 	mov	r4,zero
  8089d4:	003f1306 	br	808624 <__udivdi3+0x184>
  8089d8:	01400204 	movi	r5,8
  8089dc:	2805883a 	mov	r2,r5
  8089e0:	003f0306 	br	8085f0 <__udivdi3+0x150>
  8089e4:	01400604 	movi	r5,24
  8089e8:	2805883a 	mov	r2,r5
  8089ec:	003f0006 	br	8085f0 <__udivdi3+0x150>
  8089f0:	01400204 	movi	r5,8
  8089f4:	2805883a 	mov	r2,r5
  8089f8:	003ec206 	br	808504 <__udivdi3+0x64>
  8089fc:	01400604 	movi	r5,24
  808a00:	2805883a 	mov	r2,r5
  808a04:	003ebf06 	br	808504 <__udivdi3+0x64>
  808a08:	01400204 	movi	r5,8
  808a0c:	2805883a 	mov	r2,r5
  808a10:	003f1706 	br	808670 <__udivdi3+0x1d0>
  808a14:	01400604 	movi	r5,24
  808a18:	2805883a 	mov	r2,r5
  808a1c:	003f1406 	br	808670 <__udivdi3+0x1d0>
  808a20:	89ff962e 	bgeu	r17,r7,80887c <__udivdi3+0x3dc>
  808a24:	8d63883a 	add	r17,r17,r21
  808a28:	843fffc4 	addi	r16,r16,-1
  808a2c:	003f9306 	br	80887c <__udivdi3+0x3dc>
  808a30:	147f802e 	bgeu	r2,r17,808834 <__udivdi3+0x394>
  808a34:	a53fffc4 	addi	r20,r20,-1
  808a38:	1545883a 	add	r2,r2,r21
  808a3c:	003f7d06 	br	808834 <__udivdi3+0x394>
  808a40:	a53fffc4 	addi	r20,r20,-1
  808a44:	003ede06 	br	8085c0 <__udivdi3+0x120>
  808a48:	b5bfffc4 	addi	r22,r22,-1
  808a4c:	1405883a 	add	r2,r2,r16
  808a50:	003f2806 	br	8086f4 <__udivdi3+0x254>
  808a54:	a53fffc4 	addi	r20,r20,-1
  808a58:	003f3706 	br	808738 <__udivdi3+0x298>
  808a5c:	147fbb2e 	bgeu	r2,r17,80894c <__udivdi3+0x4ac>
  808a60:	297fffc4 	addi	r5,r5,-1
  808a64:	1405883a 	add	r2,r2,r16
  808a68:	d9400415 	stw	r5,16(sp)
  808a6c:	003fb706 	br	80894c <__udivdi3+0x4ac>
  808a70:	b5bfffc4 	addi	r22,r22,-1
  808a74:	1405883a 	add	r2,r2,r16
  808a78:	003ec006 	br	80857c <__udivdi3+0xdc>

00808a7c <__umoddi3>:
  808a7c:	defff104 	addi	sp,sp,-60
  808a80:	dd800b15 	stw	r22,44(sp)
  808a84:	dd000915 	stw	r20,36(sp)
  808a88:	dc000515 	stw	r16,20(sp)
  808a8c:	dfc00e15 	stw	ra,56(sp)
  808a90:	df000d15 	stw	fp,52(sp)
  808a94:	ddc00c15 	stw	r23,48(sp)
  808a98:	dd400a15 	stw	r21,40(sp)
  808a9c:	dcc00815 	stw	r19,32(sp)
  808aa0:	dc800715 	stw	r18,28(sp)
  808aa4:	dc400615 	stw	r17,24(sp)
  808aa8:	3021883a 	mov	r16,r6
  808aac:	202d883a 	mov	r22,r4
  808ab0:	2829883a 	mov	r20,r5
  808ab4:	38002b1e 	bne	r7,zero,808b64 <__umoddi3+0xe8>
  808ab8:	29805036 	bltu	r5,r6,808bfc <__umoddi3+0x180>
  808abc:	30008a26 	beq	r6,zero,808ce8 <__umoddi3+0x26c>
  808ac0:	00bfffd4 	movui	r2,65535
  808ac4:	14008236 	bltu	r2,r16,808cd0 <__umoddi3+0x254>
  808ac8:	00803fc4 	movi	r2,255
  808acc:	14013636 	bltu	r2,r16,808fa8 <__umoddi3+0x52c>
  808ad0:	000b883a 	mov	r5,zero
  808ad4:	0005883a 	mov	r2,zero
  808ad8:	8084d83a 	srl	r2,r16,r2
  808adc:	01002074 	movhi	r4,129
  808ae0:	213bc204 	addi	r4,r4,-4344
  808ae4:	01800804 	movi	r6,32
  808ae8:	1105883a 	add	r2,r2,r4
  808aec:	10c00003 	ldbu	r3,0(r2)
  808af0:	28c7883a 	add	r3,r5,r3
  808af4:	30efc83a 	sub	r23,r6,r3
  808af8:	b800941e 	bne	r23,zero,808d4c <__umoddi3+0x2d0>
  808afc:	802ad43a 	srli	r21,r16,16
  808b00:	a423c83a 	sub	r17,r20,r16
  808b04:	0039883a 	mov	fp,zero
  808b08:	853fffcc 	andi	r20,r16,65535
  808b0c:	8809883a 	mov	r4,r17
  808b10:	a80b883a 	mov	r5,r21
  808b14:	08009680 	call	800968 <__udivsi3>
  808b18:	8809883a 	mov	r4,r17
  808b1c:	a80b883a 	mov	r5,r21
  808b20:	a0a3383a 	mul	r17,r20,r2
  808b24:	08009700 	call	800970 <__umodsi3>
  808b28:	1004943a 	slli	r2,r2,16
  808b2c:	b006d43a 	srli	r3,r22,16
  808b30:	10c4b03a 	or	r2,r2,r3
  808b34:	1440032e 	bgeu	r2,r17,808b44 <__umoddi3+0xc8>
  808b38:	1405883a 	add	r2,r2,r16
  808b3c:	14000136 	bltu	r2,r16,808b44 <__umoddi3+0xc8>
  808b40:	14413536 	bltu	r2,r17,809018 <__umoddi3+0x59c>
  808b44:	1463c83a 	sub	r17,r2,r17
  808b48:	8809883a 	mov	r4,r17
  808b4c:	a80b883a 	mov	r5,r21
  808b50:	08009680 	call	800968 <__udivsi3>
  808b54:	8809883a 	mov	r4,r17
  808b58:	a0a3383a 	mul	r17,r20,r2
  808b5c:	a80b883a 	mov	r5,r21
  808b60:	00004d06 	br	808c98 <__umoddi3+0x21c>
  808b64:	380d883a 	mov	r6,r7
  808b68:	29c0102e 	bgeu	r5,r7,808bac <__umoddi3+0x130>
  808b6c:	2011883a 	mov	r8,r4
  808b70:	2813883a 	mov	r9,r5
  808b74:	4005883a 	mov	r2,r8
  808b78:	4807883a 	mov	r3,r9
  808b7c:	dfc00e17 	ldw	ra,56(sp)
  808b80:	df000d17 	ldw	fp,52(sp)
  808b84:	ddc00c17 	ldw	r23,48(sp)
  808b88:	dd800b17 	ldw	r22,44(sp)
  808b8c:	dd400a17 	ldw	r21,40(sp)
  808b90:	dd000917 	ldw	r20,36(sp)
  808b94:	dcc00817 	ldw	r19,32(sp)
  808b98:	dc800717 	ldw	r18,28(sp)
  808b9c:	dc400617 	ldw	r17,24(sp)
  808ba0:	dc000517 	ldw	r16,20(sp)
  808ba4:	dec00f04 	addi	sp,sp,60
  808ba8:	f800283a 	ret
  808bac:	00bfffd4 	movui	r2,65535
  808bb0:	11c05a36 	bltu	r2,r7,808d1c <__umoddi3+0x2a0>
  808bb4:	00803fc4 	movi	r2,255
  808bb8:	11c0fe36 	bltu	r2,r7,808fb4 <__umoddi3+0x538>
  808bbc:	000b883a 	mov	r5,zero
  808bc0:	0005883a 	mov	r2,zero
  808bc4:	3084d83a 	srl	r2,r6,r2
  808bc8:	01002074 	movhi	r4,129
  808bcc:	213bc204 	addi	r4,r4,-4344
  808bd0:	01c00804 	movi	r7,32
  808bd4:	1105883a 	add	r2,r2,r4
  808bd8:	10c00003 	ldbu	r3,0(r2)
  808bdc:	28c7883a 	add	r3,r5,r3
  808be0:	38ebc83a 	sub	r21,r7,r3
  808be4:	a800851e 	bne	r21,zero,808dfc <__umoddi3+0x380>
  808be8:	35005236 	bltu	r6,r20,808d34 <__umoddi3+0x2b8>
  808bec:	b400512e 	bgeu	r22,r16,808d34 <__umoddi3+0x2b8>
  808bf0:	b011883a 	mov	r8,r22
  808bf4:	a013883a 	mov	r9,r20
  808bf8:	003fde06 	br	808b74 <__umoddi3+0xf8>
  808bfc:	00bfffd4 	movui	r2,65535
  808c00:	11804036 	bltu	r2,r6,808d04 <__umoddi3+0x288>
  808c04:	00803fc4 	movi	r2,255
  808c08:	1180ed36 	bltu	r2,r6,808fc0 <__umoddi3+0x544>
  808c0c:	000b883a 	mov	r5,zero
  808c10:	0005883a 	mov	r2,zero
  808c14:	8084d83a 	srl	r2,r16,r2
  808c18:	01002074 	movhi	r4,129
  808c1c:	213bc204 	addi	r4,r4,-4344
  808c20:	01800804 	movi	r6,32
  808c24:	1105883a 	add	r2,r2,r4
  808c28:	10c00003 	ldbu	r3,0(r2)
  808c2c:	28c7883a 	add	r3,r5,r3
  808c30:	30c7c83a 	sub	r3,r6,r3
  808c34:	1800bf1e 	bne	r3,zero,808f34 <__umoddi3+0x4b8>
  808c38:	0039883a 	mov	fp,zero
  808c3c:	802ad43a 	srli	r21,r16,16
  808c40:	a009883a 	mov	r4,r20
  808c44:	85ffffcc 	andi	r23,r16,65535
  808c48:	a80b883a 	mov	r5,r21
  808c4c:	08009680 	call	800968 <__udivsi3>
  808c50:	a009883a 	mov	r4,r20
  808c54:	a80b883a 	mov	r5,r21
  808c58:	b8a3383a 	mul	r17,r23,r2
  808c5c:	08009700 	call	800970 <__umodsi3>
  808c60:	1004943a 	slli	r2,r2,16
  808c64:	b006d43a 	srli	r3,r22,16
  808c68:	10c4b03a 	or	r2,r2,r3
  808c6c:	1440032e 	bgeu	r2,r17,808c7c <__umoddi3+0x200>
  808c70:	1405883a 	add	r2,r2,r16
  808c74:	14000136 	bltu	r2,r16,808c7c <__umoddi3+0x200>
  808c78:	1440e536 	bltu	r2,r17,809010 <__umoddi3+0x594>
  808c7c:	1463c83a 	sub	r17,r2,r17
  808c80:	8809883a 	mov	r4,r17
  808c84:	a80b883a 	mov	r5,r21
  808c88:	08009680 	call	800968 <__udivsi3>
  808c8c:	8809883a 	mov	r4,r17
  808c90:	b8a3383a 	mul	r17,r23,r2
  808c94:	a80b883a 	mov	r5,r21
  808c98:	08009700 	call	800970 <__umodsi3>
  808c9c:	1004943a 	slli	r2,r2,16
  808ca0:	b0ffffcc 	andi	r3,r22,65535
  808ca4:	10c4b03a 	or	r2,r2,r3
  808ca8:	1440042e 	bgeu	r2,r17,808cbc <__umoddi3+0x240>
  808cac:	1405883a 	add	r2,r2,r16
  808cb0:	14000236 	bltu	r2,r16,808cbc <__umoddi3+0x240>
  808cb4:	1440012e 	bgeu	r2,r17,808cbc <__umoddi3+0x240>
  808cb8:	1405883a 	add	r2,r2,r16
  808cbc:	1445c83a 	sub	r2,r2,r17
  808cc0:	1724d83a 	srl	r18,r2,fp
  808cc4:	0013883a 	mov	r9,zero
  808cc8:	9011883a 	mov	r8,r18
  808ccc:	003fa906 	br	808b74 <__umoddi3+0xf8>
  808cd0:	00804034 	movhi	r2,256
  808cd4:	10bfffc4 	addi	r2,r2,-1
  808cd8:	1400b036 	bltu	r2,r16,808f9c <__umoddi3+0x520>
  808cdc:	01400404 	movi	r5,16
  808ce0:	2805883a 	mov	r2,r5
  808ce4:	003f7c06 	br	808ad8 <__umoddi3+0x5c>
  808ce8:	01000044 	movi	r4,1
  808cec:	000b883a 	mov	r5,zero
  808cf0:	08009680 	call	800968 <__udivsi3>
  808cf4:	1021883a 	mov	r16,r2
  808cf8:	00bfffd4 	movui	r2,65535
  808cfc:	143ff436 	bltu	r2,r16,808cd0 <__umoddi3+0x254>
  808d00:	003f7106 	br	808ac8 <__umoddi3+0x4c>
  808d04:	00804034 	movhi	r2,256
  808d08:	10bfffc4 	addi	r2,r2,-1
  808d0c:	1180af36 	bltu	r2,r6,808fcc <__umoddi3+0x550>
  808d10:	01400404 	movi	r5,16
  808d14:	2805883a 	mov	r2,r5
  808d18:	003fbe06 	br	808c14 <__umoddi3+0x198>
  808d1c:	00804034 	movhi	r2,256
  808d20:	10bfffc4 	addi	r2,r2,-1
  808d24:	11c0ac36 	bltu	r2,r7,808fd8 <__umoddi3+0x55c>
  808d28:	01400404 	movi	r5,16
  808d2c:	2805883a 	mov	r2,r5
  808d30:	003fa406 	br	808bc4 <__umoddi3+0x148>
  808d34:	b409c83a 	sub	r4,r22,r16
  808d38:	b105803a 	cmpltu	r2,r22,r4
  808d3c:	a187c83a 	sub	r3,r20,r6
  808d40:	18a9c83a 	sub	r20,r3,r2
  808d44:	202d883a 	mov	r22,r4
  808d48:	003fa906 	br	808bf0 <__umoddi3+0x174>
  808d4c:	85e0983a 	sll	r16,r16,r23
  808d50:	35c5c83a 	sub	r2,r6,r23
  808d54:	a0a2d83a 	srl	r17,r20,r2
  808d58:	802ad43a 	srli	r21,r16,16
  808d5c:	b084d83a 	srl	r2,r22,r2
  808d60:	a5c6983a 	sll	r3,r20,r23
  808d64:	8809883a 	mov	r4,r17
  808d68:	a80b883a 	mov	r5,r21
  808d6c:	1886b03a 	or	r3,r3,r2
  808d70:	d8c00115 	stw	r3,4(sp)
  808d74:	853fffcc 	andi	r20,r16,65535
  808d78:	08009680 	call	800968 <__udivsi3>
  808d7c:	8809883a 	mov	r4,r17
  808d80:	a80b883a 	mov	r5,r21
  808d84:	a0a3383a 	mul	r17,r20,r2
  808d88:	08009700 	call	800970 <__umodsi3>
  808d8c:	d9000117 	ldw	r4,4(sp)
  808d90:	1004943a 	slli	r2,r2,16
  808d94:	b839883a 	mov	fp,r23
  808d98:	2006d43a 	srli	r3,r4,16
  808d9c:	10c4b03a 	or	r2,r2,r3
  808da0:	1440022e 	bgeu	r2,r17,808dac <__umoddi3+0x330>
  808da4:	1405883a 	add	r2,r2,r16
  808da8:	1400962e 	bgeu	r2,r16,809004 <__umoddi3+0x588>
  808dac:	1463c83a 	sub	r17,r2,r17
  808db0:	8809883a 	mov	r4,r17
  808db4:	a80b883a 	mov	r5,r21
  808db8:	08009680 	call	800968 <__udivsi3>
  808dbc:	8809883a 	mov	r4,r17
  808dc0:	a80b883a 	mov	r5,r21
  808dc4:	a0a3383a 	mul	r17,r20,r2
  808dc8:	08009700 	call	800970 <__umodsi3>
  808dcc:	d9400117 	ldw	r5,4(sp)
  808dd0:	1004943a 	slli	r2,r2,16
  808dd4:	28ffffcc 	andi	r3,r5,65535
  808dd8:	10c4b03a 	or	r2,r2,r3
  808ddc:	1440042e 	bgeu	r2,r17,808df0 <__umoddi3+0x374>
  808de0:	1405883a 	add	r2,r2,r16
  808de4:	14000236 	bltu	r2,r16,808df0 <__umoddi3+0x374>
  808de8:	1440012e 	bgeu	r2,r17,808df0 <__umoddi3+0x374>
  808dec:	1405883a 	add	r2,r2,r16
  808df0:	b5ec983a 	sll	r22,r22,r23
  808df4:	1463c83a 	sub	r17,r2,r17
  808df8:	003f4406 	br	808b0c <__umoddi3+0x90>
  808dfc:	3d4fc83a 	sub	r7,r7,r21
  808e00:	3546983a 	sll	r3,r6,r21
  808e04:	81c4d83a 	srl	r2,r16,r7
  808e08:	a1e2d83a 	srl	r17,r20,r7
  808e0c:	a54c983a 	sll	r6,r20,r21
  808e10:	18aeb03a 	or	r23,r3,r2
  808e14:	b828d43a 	srli	r20,r23,16
  808e18:	b1c4d83a 	srl	r2,r22,r7
  808e1c:	8809883a 	mov	r4,r17
  808e20:	a00b883a 	mov	r5,r20
  808e24:	308cb03a 	or	r6,r6,r2
  808e28:	d9c00315 	stw	r7,12(sp)
  808e2c:	d9800215 	stw	r6,8(sp)
  808e30:	08009680 	call	800968 <__udivsi3>
  808e34:	8809883a 	mov	r4,r17
  808e38:	a00b883a 	mov	r5,r20
  808e3c:	1039883a 	mov	fp,r2
  808e40:	08009700 	call	800970 <__umodsi3>
  808e44:	b8ffffcc 	andi	r3,r23,65535
  808e48:	d8c00415 	stw	r3,16(sp)
  808e4c:	d9000217 	ldw	r4,8(sp)
  808e50:	d9400417 	ldw	r5,16(sp)
  808e54:	1004943a 	slli	r2,r2,16
  808e58:	2006d43a 	srli	r3,r4,16
  808e5c:	8560983a 	sll	r16,r16,r21
  808e60:	2f23383a 	mul	r17,r5,fp
  808e64:	10c4b03a 	or	r2,r2,r3
  808e68:	dc000015 	stw	r16,0(sp)
  808e6c:	b56c983a 	sll	r22,r22,r21
  808e70:	1440032e 	bgeu	r2,r17,808e80 <__umoddi3+0x404>
  808e74:	15c5883a 	add	r2,r2,r23
  808e78:	e73fffc4 	addi	fp,fp,-1
  808e7c:	15c05d2e 	bgeu	r2,r23,808ff4 <__umoddi3+0x578>
  808e80:	1463c83a 	sub	r17,r2,r17
  808e84:	8809883a 	mov	r4,r17
  808e88:	a00b883a 	mov	r5,r20
  808e8c:	08009680 	call	800968 <__udivsi3>
  808e90:	8809883a 	mov	r4,r17
  808e94:	a00b883a 	mov	r5,r20
  808e98:	1021883a 	mov	r16,r2
  808e9c:	08009700 	call	800970 <__umodsi3>
  808ea0:	d8c00417 	ldw	r3,16(sp)
  808ea4:	d9000217 	ldw	r4,8(sp)
  808ea8:	1004943a 	slli	r2,r2,16
  808eac:	1c23383a 	mul	r17,r3,r16
  808eb0:	20ffffcc 	andi	r3,r4,65535
  808eb4:	10ceb03a 	or	r7,r2,r3
  808eb8:	3c40032e 	bgeu	r7,r17,808ec8 <__umoddi3+0x44c>
  808ebc:	3dcf883a 	add	r7,r7,r23
  808ec0:	843fffc4 	addi	r16,r16,-1
  808ec4:	3dc0472e 	bgeu	r7,r23,808fe4 <__umoddi3+0x568>
  808ec8:	e004943a 	slli	r2,fp,16
  808ecc:	d9400017 	ldw	r5,0(sp)
  808ed0:	3c4fc83a 	sub	r7,r7,r17
  808ed4:	8084b03a 	or	r2,r16,r2
  808ed8:	28ffffcc 	andi	r3,r5,65535
  808edc:	280cd43a 	srli	r6,r5,16
  808ee0:	100ad43a 	srli	r5,r2,16
  808ee4:	10bfffcc 	andi	r2,r2,65535
  808ee8:	10d1383a 	mul	r8,r2,r3
  808eec:	28c7383a 	mul	r3,r5,r3
  808ef0:	1185383a 	mul	r2,r2,r6
  808ef4:	4008d43a 	srli	r4,r8,16
  808ef8:	298b383a 	mul	r5,r5,r6
  808efc:	10c5883a 	add	r2,r2,r3
  808f00:	2089883a 	add	r4,r4,r2
  808f04:	20c0022e 	bgeu	r4,r3,808f10 <__umoddi3+0x494>
  808f08:	00800074 	movhi	r2,1
  808f0c:	288b883a 	add	r5,r5,r2
  808f10:	2004d43a 	srli	r2,r4,16
  808f14:	2008943a 	slli	r4,r4,16
  808f18:	40ffffcc 	andi	r3,r8,65535
  808f1c:	288b883a 	add	r5,r5,r2
  808f20:	20c9883a 	add	r4,r4,r3
  808f24:	39400b36 	bltu	r7,r5,808f54 <__umoddi3+0x4d8>
  808f28:	39403d26 	beq	r7,r5,809020 <__umoddi3+0x5a4>
  808f2c:	394bc83a 	sub	r5,r7,r5
  808f30:	00000f06 	br	808f70 <__umoddi3+0x4f4>
  808f34:	30c5c83a 	sub	r2,r6,r3
  808f38:	1839883a 	mov	fp,r3
  808f3c:	b084d83a 	srl	r2,r22,r2
  808f40:	a0c6983a 	sll	r3,r20,r3
  808f44:	8720983a 	sll	r16,r16,fp
  808f48:	b72c983a 	sll	r22,r22,fp
  808f4c:	18a8b03a 	or	r20,r3,r2
  808f50:	003f3a06 	br	808c3c <__umoddi3+0x1c0>
  808f54:	d8c00017 	ldw	r3,0(sp)
  808f58:	20c5c83a 	sub	r2,r4,r3
  808f5c:	2089803a 	cmpltu	r4,r4,r2
  808f60:	2dc7c83a 	sub	r3,r5,r23
  808f64:	1907c83a 	sub	r3,r3,r4
  808f68:	38cbc83a 	sub	r5,r7,r3
  808f6c:	1009883a 	mov	r4,r2
  808f70:	b105c83a 	sub	r2,r22,r4
  808f74:	b087803a 	cmpltu	r3,r22,r2
  808f78:	28c7c83a 	sub	r3,r5,r3
  808f7c:	d9400317 	ldw	r5,12(sp)
  808f80:	1544d83a 	srl	r2,r2,r21
  808f84:	1948983a 	sll	r4,r3,r5
  808f88:	1d46d83a 	srl	r3,r3,r21
  808f8c:	20a4b03a 	or	r18,r4,r2
  808f90:	9011883a 	mov	r8,r18
  808f94:	1813883a 	mov	r9,r3
  808f98:	003ef606 	br	808b74 <__umoddi3+0xf8>
  808f9c:	01400604 	movi	r5,24
  808fa0:	2805883a 	mov	r2,r5
  808fa4:	003ecc06 	br	808ad8 <__umoddi3+0x5c>
  808fa8:	01400204 	movi	r5,8
  808fac:	2805883a 	mov	r2,r5
  808fb0:	003ec906 	br	808ad8 <__umoddi3+0x5c>
  808fb4:	01400204 	movi	r5,8
  808fb8:	2805883a 	mov	r2,r5
  808fbc:	003f0106 	br	808bc4 <__umoddi3+0x148>
  808fc0:	01400204 	movi	r5,8
  808fc4:	2805883a 	mov	r2,r5
  808fc8:	003f1206 	br	808c14 <__umoddi3+0x198>
  808fcc:	01400604 	movi	r5,24
  808fd0:	2805883a 	mov	r2,r5
  808fd4:	003f0f06 	br	808c14 <__umoddi3+0x198>
  808fd8:	01400604 	movi	r5,24
  808fdc:	2805883a 	mov	r2,r5
  808fe0:	003ef806 	br	808bc4 <__umoddi3+0x148>
  808fe4:	3c7fb82e 	bgeu	r7,r17,808ec8 <__umoddi3+0x44c>
  808fe8:	843fffc4 	addi	r16,r16,-1
  808fec:	3dcf883a 	add	r7,r7,r23
  808ff0:	003fb506 	br	808ec8 <__umoddi3+0x44c>
  808ff4:	147fa22e 	bgeu	r2,r17,808e80 <__umoddi3+0x404>
  808ff8:	e73fffc4 	addi	fp,fp,-1
  808ffc:	15c5883a 	add	r2,r2,r23
  809000:	003f9f06 	br	808e80 <__umoddi3+0x404>
  809004:	147f692e 	bgeu	r2,r17,808dac <__umoddi3+0x330>
  809008:	1405883a 	add	r2,r2,r16
  80900c:	003f6706 	br	808dac <__umoddi3+0x330>
  809010:	1405883a 	add	r2,r2,r16
  809014:	003f1906 	br	808c7c <__umoddi3+0x200>
  809018:	1405883a 	add	r2,r2,r16
  80901c:	003ec906 	br	808b44 <__umoddi3+0xc8>
  809020:	b13fcc36 	bltu	r22,r4,808f54 <__umoddi3+0x4d8>
  809024:	000b883a 	mov	r5,zero
  809028:	003fd106 	br	808f70 <__umoddi3+0x4f4>

0080902c <_fpadd_parts>:
  80902c:	defff804 	addi	sp,sp,-32
  809030:	dcc00315 	stw	r19,12(sp)
  809034:	2027883a 	mov	r19,r4
  809038:	21000017 	ldw	r4,0(r4)
  80903c:	00c00044 	movi	r3,1
  809040:	dd400515 	stw	r21,20(sp)
  809044:	dd000415 	stw	r20,16(sp)
  809048:	ddc00715 	stw	r23,28(sp)
  80904c:	dd800615 	stw	r22,24(sp)
  809050:	dc800215 	stw	r18,8(sp)
  809054:	dc400115 	stw	r17,4(sp)
  809058:	dc000015 	stw	r16,0(sp)
  80905c:	282b883a 	mov	r21,r5
  809060:	3029883a 	mov	r20,r6
  809064:	1900632e 	bgeu	r3,r4,8091f4 <_fpadd_parts+0x1c8>
  809068:	28800017 	ldw	r2,0(r5)
  80906c:	1880812e 	bgeu	r3,r2,809274 <_fpadd_parts+0x248>
  809070:	00c00104 	movi	r3,4
  809074:	20c0dc26 	beq	r4,r3,8093e8 <_fpadd_parts+0x3bc>
  809078:	10c07e26 	beq	r2,r3,809274 <_fpadd_parts+0x248>
  80907c:	00c00084 	movi	r3,2
  809080:	10c06726 	beq	r2,r3,809220 <_fpadd_parts+0x1f4>
  809084:	20c07b26 	beq	r4,r3,809274 <_fpadd_parts+0x248>
  809088:	9dc00217 	ldw	r23,8(r19)
  80908c:	28c00217 	ldw	r3,8(r5)
  809090:	9c400317 	ldw	r17,12(r19)
  809094:	2bc00317 	ldw	r15,12(r5)
  809098:	b8cdc83a 	sub	r6,r23,r3
  80909c:	9c800417 	ldw	r18,16(r19)
  8090a0:	2c000417 	ldw	r16,16(r5)
  8090a4:	3009883a 	mov	r4,r6
  8090a8:	30009716 	blt	r6,zero,809308 <_fpadd_parts+0x2dc>
  8090ac:	00800fc4 	movi	r2,63
  8090b0:	11806b16 	blt	r2,r6,809260 <_fpadd_parts+0x234>
  8090b4:	0100a40e 	bge	zero,r4,809348 <_fpadd_parts+0x31c>
  8090b8:	35bff804 	addi	r22,r6,-32
  8090bc:	b000bc16 	blt	r22,zero,8093b0 <_fpadd_parts+0x384>
  8090c0:	8596d83a 	srl	r11,r16,r22
  8090c4:	0019883a 	mov	r12,zero
  8090c8:	0013883a 	mov	r9,zero
  8090cc:	01000044 	movi	r4,1
  8090d0:	0015883a 	mov	r10,zero
  8090d4:	b000be16 	blt	r22,zero,8093d0 <_fpadd_parts+0x3a4>
  8090d8:	2590983a 	sll	r8,r4,r22
  8090dc:	000f883a 	mov	r7,zero
  8090e0:	00bfffc4 	movi	r2,-1
  8090e4:	3889883a 	add	r4,r7,r2
  8090e8:	408b883a 	add	r5,r8,r2
  8090ec:	21cd803a 	cmpltu	r6,r4,r7
  8090f0:	314b883a 	add	r5,r6,r5
  8090f4:	7904703a 	and	r2,r15,r4
  8090f8:	8146703a 	and	r3,r16,r5
  8090fc:	10c4b03a 	or	r2,r2,r3
  809100:	10000226 	beq	r2,zero,80910c <_fpadd_parts+0xe0>
  809104:	02400044 	movi	r9,1
  809108:	0015883a 	mov	r10,zero
  80910c:	5a5eb03a 	or	r15,r11,r9
  809110:	62a0b03a 	or	r16,r12,r10
  809114:	99400117 	ldw	r5,4(r19)
  809118:	a8800117 	ldw	r2,4(r21)
  80911c:	28806e26 	beq	r5,r2,8092d8 <_fpadd_parts+0x2ac>
  809120:	28006626 	beq	r5,zero,8092bc <_fpadd_parts+0x290>
  809124:	7c45c83a 	sub	r2,r15,r17
  809128:	7889803a 	cmpltu	r4,r15,r2
  80912c:	8487c83a 	sub	r3,r16,r18
  809130:	1909c83a 	sub	r4,r3,r4
  809134:	100d883a 	mov	r6,r2
  809138:	200f883a 	mov	r7,r4
  80913c:	38007716 	blt	r7,zero,80931c <_fpadd_parts+0x2f0>
  809140:	a5c00215 	stw	r23,8(r20)
  809144:	a1c00415 	stw	r7,16(r20)
  809148:	a0000115 	stw	zero,4(r20)
  80914c:	a1800315 	stw	r6,12(r20)
  809150:	a2000317 	ldw	r8,12(r20)
  809154:	a2400417 	ldw	r9,16(r20)
  809158:	00bfffc4 	movi	r2,-1
  80915c:	408b883a 	add	r5,r8,r2
  809160:	2a09803a 	cmpltu	r4,r5,r8
  809164:	488d883a 	add	r6,r9,r2
  809168:	01c40034 	movhi	r7,4096
  80916c:	39ffffc4 	addi	r7,r7,-1
  809170:	218d883a 	add	r6,r4,r6
  809174:	39801736 	bltu	r7,r6,8091d4 <_fpadd_parts+0x1a8>
  809178:	31c06526 	beq	r6,r7,809310 <_fpadd_parts+0x2e4>
  80917c:	a3000217 	ldw	r12,8(r20)
  809180:	4209883a 	add	r4,r8,r8
  809184:	00bfffc4 	movi	r2,-1
  809188:	220f803a 	cmpltu	r7,r4,r8
  80918c:	4a4b883a 	add	r5,r9,r9
  809190:	394f883a 	add	r7,r7,r5
  809194:	2095883a 	add	r10,r4,r2
  809198:	3897883a 	add	r11,r7,r2
  80919c:	510d803a 	cmpltu	r6,r10,r4
  8091a0:	6099883a 	add	r12,r12,r2
  8091a4:	32d7883a 	add	r11,r6,r11
  8091a8:	00840034 	movhi	r2,4096
  8091ac:	10bfffc4 	addi	r2,r2,-1
  8091b0:	2011883a 	mov	r8,r4
  8091b4:	3813883a 	mov	r9,r7
  8091b8:	a1000315 	stw	r4,12(r20)
  8091bc:	a1c00415 	stw	r7,16(r20)
  8091c0:	a3000215 	stw	r12,8(r20)
  8091c4:	12c00336 	bltu	r2,r11,8091d4 <_fpadd_parts+0x1a8>
  8091c8:	58bfed1e 	bne	r11,r2,809180 <_fpadd_parts+0x154>
  8091cc:	00bfff84 	movi	r2,-2
  8091d0:	12bfeb2e 	bgeu	r2,r10,809180 <_fpadd_parts+0x154>
  8091d4:	a2800417 	ldw	r10,16(r20)
  8091d8:	008000c4 	movi	r2,3
  8091dc:	00c80034 	movhi	r3,8192
  8091e0:	18ffffc4 	addi	r3,r3,-1
  8091e4:	a2400317 	ldw	r9,12(r20)
  8091e8:	a0800015 	stw	r2,0(r20)
  8091ec:	1a802336 	bltu	r3,r10,80927c <_fpadd_parts+0x250>
  8091f0:	a027883a 	mov	r19,r20
  8091f4:	9805883a 	mov	r2,r19
  8091f8:	ddc00717 	ldw	r23,28(sp)
  8091fc:	dd800617 	ldw	r22,24(sp)
  809200:	dd400517 	ldw	r21,20(sp)
  809204:	dd000417 	ldw	r20,16(sp)
  809208:	dcc00317 	ldw	r19,12(sp)
  80920c:	dc800217 	ldw	r18,8(sp)
  809210:	dc400117 	ldw	r17,4(sp)
  809214:	dc000017 	ldw	r16,0(sp)
  809218:	dec00804 	addi	sp,sp,32
  80921c:	f800283a 	ret
  809220:	20fff41e 	bne	r4,r3,8091f4 <_fpadd_parts+0x1c8>
  809224:	31000015 	stw	r4,0(r6)
  809228:	98800117 	ldw	r2,4(r19)
  80922c:	30800115 	stw	r2,4(r6)
  809230:	98c00217 	ldw	r3,8(r19)
  809234:	30c00215 	stw	r3,8(r6)
  809238:	98800317 	ldw	r2,12(r19)
  80923c:	30800315 	stw	r2,12(r6)
  809240:	98c00417 	ldw	r3,16(r19)
  809244:	30c00415 	stw	r3,16(r6)
  809248:	98800117 	ldw	r2,4(r19)
  80924c:	28c00117 	ldw	r3,4(r5)
  809250:	3027883a 	mov	r19,r6
  809254:	10c4703a 	and	r2,r2,r3
  809258:	30800115 	stw	r2,4(r6)
  80925c:	003fe506 	br	8091f4 <_fpadd_parts+0x1c8>
  809260:	1dc02616 	blt	r3,r23,8092fc <_fpadd_parts+0x2d0>
  809264:	0023883a 	mov	r17,zero
  809268:	182f883a 	mov	r23,r3
  80926c:	0025883a 	mov	r18,zero
  809270:	003fa806 	br	809114 <_fpadd_parts+0xe8>
  809274:	a827883a 	mov	r19,r21
  809278:	003fde06 	br	8091f4 <_fpadd_parts+0x1c8>
  80927c:	01800044 	movi	r6,1
  809280:	500497fa 	slli	r2,r10,31
  809284:	4808d07a 	srli	r4,r9,1
  809288:	518ad83a 	srl	r5,r10,r6
  80928c:	a2000217 	ldw	r8,8(r20)
  809290:	1108b03a 	or	r4,r2,r4
  809294:	0007883a 	mov	r3,zero
  809298:	4984703a 	and	r2,r9,r6
  80929c:	208cb03a 	or	r6,r4,r2
  8092a0:	28ceb03a 	or	r7,r5,r3
  8092a4:	42000044 	addi	r8,r8,1
  8092a8:	a027883a 	mov	r19,r20
  8092ac:	a1c00415 	stw	r7,16(r20)
  8092b0:	a2000215 	stw	r8,8(r20)
  8092b4:	a1800315 	stw	r6,12(r20)
  8092b8:	003fce06 	br	8091f4 <_fpadd_parts+0x1c8>
  8092bc:	8bc5c83a 	sub	r2,r17,r15
  8092c0:	8889803a 	cmpltu	r4,r17,r2
  8092c4:	9407c83a 	sub	r3,r18,r16
  8092c8:	1909c83a 	sub	r4,r3,r4
  8092cc:	100d883a 	mov	r6,r2
  8092d0:	200f883a 	mov	r7,r4
  8092d4:	003f9906 	br	80913c <_fpadd_parts+0x110>
  8092d8:	7c45883a 	add	r2,r15,r17
  8092dc:	13c9803a 	cmpltu	r4,r2,r15
  8092e0:	8487883a 	add	r3,r16,r18
  8092e4:	20c9883a 	add	r4,r4,r3
  8092e8:	a1400115 	stw	r5,4(r20)
  8092ec:	a5c00215 	stw	r23,8(r20)
  8092f0:	a0800315 	stw	r2,12(r20)
  8092f4:	a1000415 	stw	r4,16(r20)
  8092f8:	003fb606 	br	8091d4 <_fpadd_parts+0x1a8>
  8092fc:	001f883a 	mov	r15,zero
  809300:	0021883a 	mov	r16,zero
  809304:	003f8306 	br	809114 <_fpadd_parts+0xe8>
  809308:	018dc83a 	sub	r6,zero,r6
  80930c:	003f6706 	br	8090ac <_fpadd_parts+0x80>
  809310:	00bfff84 	movi	r2,-2
  809314:	117faf36 	bltu	r2,r5,8091d4 <_fpadd_parts+0x1a8>
  809318:	003f9806 	br	80917c <_fpadd_parts+0x150>
  80931c:	0005883a 	mov	r2,zero
  809320:	1189c83a 	sub	r4,r2,r6
  809324:	1105803a 	cmpltu	r2,r2,r4
  809328:	01cbc83a 	sub	r5,zero,r7
  80932c:	2885c83a 	sub	r2,r5,r2
  809330:	01800044 	movi	r6,1
  809334:	a1800115 	stw	r6,4(r20)
  809338:	a5c00215 	stw	r23,8(r20)
  80933c:	a1000315 	stw	r4,12(r20)
  809340:	a0800415 	stw	r2,16(r20)
  809344:	003f8206 	br	809150 <_fpadd_parts+0x124>
  809348:	203f7226 	beq	r4,zero,809114 <_fpadd_parts+0xe8>
  80934c:	35bff804 	addi	r22,r6,-32
  809350:	b9af883a 	add	r23,r23,r6
  809354:	b0003116 	blt	r22,zero,80941c <_fpadd_parts+0x3f0>
  809358:	959ad83a 	srl	r13,r18,r22
  80935c:	001d883a 	mov	r14,zero
  809360:	000f883a 	mov	r7,zero
  809364:	01000044 	movi	r4,1
  809368:	0011883a 	mov	r8,zero
  80936c:	b0002516 	blt	r22,zero,809404 <_fpadd_parts+0x3d8>
  809370:	2594983a 	sll	r10,r4,r22
  809374:	0013883a 	mov	r9,zero
  809378:	00bfffc4 	movi	r2,-1
  80937c:	4889883a 	add	r4,r9,r2
  809380:	508b883a 	add	r5,r10,r2
  809384:	224d803a 	cmpltu	r6,r4,r9
  809388:	314b883a 	add	r5,r6,r5
  80938c:	8904703a 	and	r2,r17,r4
  809390:	9146703a 	and	r3,r18,r5
  809394:	10c4b03a 	or	r2,r2,r3
  809398:	10000226 	beq	r2,zero,8093a4 <_fpadd_parts+0x378>
  80939c:	01c00044 	movi	r7,1
  8093a0:	0011883a 	mov	r8,zero
  8093a4:	69e2b03a 	or	r17,r13,r7
  8093a8:	7224b03a 	or	r18,r14,r8
  8093ac:	003f5906 	br	809114 <_fpadd_parts+0xe8>
  8093b0:	8407883a 	add	r3,r16,r16
  8093b4:	008007c4 	movi	r2,31
  8093b8:	1185c83a 	sub	r2,r2,r6
  8093bc:	1886983a 	sll	r3,r3,r2
  8093c0:	7996d83a 	srl	r11,r15,r6
  8093c4:	8198d83a 	srl	r12,r16,r6
  8093c8:	1ad6b03a 	or	r11,r3,r11
  8093cc:	003f3e06 	br	8090c8 <_fpadd_parts+0x9c>
  8093d0:	2006d07a 	srli	r3,r4,1
  8093d4:	008007c4 	movi	r2,31
  8093d8:	1185c83a 	sub	r2,r2,r6
  8093dc:	1890d83a 	srl	r8,r3,r2
  8093e0:	218e983a 	sll	r7,r4,r6
  8093e4:	003f3e06 	br	8090e0 <_fpadd_parts+0xb4>
  8093e8:	113f821e 	bne	r2,r4,8091f4 <_fpadd_parts+0x1c8>
  8093ec:	28c00117 	ldw	r3,4(r5)
  8093f0:	98800117 	ldw	r2,4(r19)
  8093f4:	10ff7f26 	beq	r2,r3,8091f4 <_fpadd_parts+0x1c8>
  8093f8:	04c02074 	movhi	r19,129
  8093fc:	9cfbbd04 	addi	r19,r19,-4364
  809400:	003f7c06 	br	8091f4 <_fpadd_parts+0x1c8>
  809404:	2006d07a 	srli	r3,r4,1
  809408:	008007c4 	movi	r2,31
  80940c:	1185c83a 	sub	r2,r2,r6
  809410:	1894d83a 	srl	r10,r3,r2
  809414:	2192983a 	sll	r9,r4,r6
  809418:	003fd706 	br	809378 <_fpadd_parts+0x34c>
  80941c:	9487883a 	add	r3,r18,r18
  809420:	008007c4 	movi	r2,31
  809424:	1185c83a 	sub	r2,r2,r6
  809428:	1886983a 	sll	r3,r3,r2
  80942c:	899ad83a 	srl	r13,r17,r6
  809430:	919cd83a 	srl	r14,r18,r6
  809434:	1b5ab03a 	or	r13,r3,r13
  809438:	003fc906 	br	809360 <_fpadd_parts+0x334>

0080943c <__subdf3>:
  80943c:	deffea04 	addi	sp,sp,-88
  809440:	dcc01415 	stw	r19,80(sp)
  809444:	dcc00404 	addi	r19,sp,16
  809448:	2011883a 	mov	r8,r4
  80944c:	2813883a 	mov	r9,r5
  809450:	dc401315 	stw	r17,76(sp)
  809454:	d809883a 	mov	r4,sp
  809458:	980b883a 	mov	r5,r19
  80945c:	dc400904 	addi	r17,sp,36
  809460:	dfc01515 	stw	ra,84(sp)
  809464:	da400115 	stw	r9,4(sp)
  809468:	d9c00315 	stw	r7,12(sp)
  80946c:	da000015 	stw	r8,0(sp)
  809470:	d9800215 	stw	r6,8(sp)
  809474:	080a5840 	call	80a584 <__unpack_d>
  809478:	d9000204 	addi	r4,sp,8
  80947c:	880b883a 	mov	r5,r17
  809480:	080a5840 	call	80a584 <__unpack_d>
  809484:	d8800a17 	ldw	r2,40(sp)
  809488:	880b883a 	mov	r5,r17
  80948c:	9809883a 	mov	r4,r19
  809490:	d9800e04 	addi	r6,sp,56
  809494:	1080005c 	xori	r2,r2,1
  809498:	d8800a15 	stw	r2,40(sp)
  80949c:	080902c0 	call	80902c <_fpadd_parts>
  8094a0:	1009883a 	mov	r4,r2
  8094a4:	080a2700 	call	80a270 <__pack_d>
  8094a8:	dfc01517 	ldw	ra,84(sp)
  8094ac:	dcc01417 	ldw	r19,80(sp)
  8094b0:	dc401317 	ldw	r17,76(sp)
  8094b4:	dec01604 	addi	sp,sp,88
  8094b8:	f800283a 	ret

008094bc <__adddf3>:
  8094bc:	deffea04 	addi	sp,sp,-88
  8094c0:	dcc01415 	stw	r19,80(sp)
  8094c4:	dcc00404 	addi	r19,sp,16
  8094c8:	2011883a 	mov	r8,r4
  8094cc:	2813883a 	mov	r9,r5
  8094d0:	dc401315 	stw	r17,76(sp)
  8094d4:	d809883a 	mov	r4,sp
  8094d8:	980b883a 	mov	r5,r19
  8094dc:	dc400904 	addi	r17,sp,36
  8094e0:	dfc01515 	stw	ra,84(sp)
  8094e4:	da400115 	stw	r9,4(sp)
  8094e8:	d9c00315 	stw	r7,12(sp)
  8094ec:	da000015 	stw	r8,0(sp)
  8094f0:	d9800215 	stw	r6,8(sp)
  8094f4:	080a5840 	call	80a584 <__unpack_d>
  8094f8:	d9000204 	addi	r4,sp,8
  8094fc:	880b883a 	mov	r5,r17
  809500:	080a5840 	call	80a584 <__unpack_d>
  809504:	d9800e04 	addi	r6,sp,56
  809508:	9809883a 	mov	r4,r19
  80950c:	880b883a 	mov	r5,r17
  809510:	080902c0 	call	80902c <_fpadd_parts>
  809514:	1009883a 	mov	r4,r2
  809518:	080a2700 	call	80a270 <__pack_d>
  80951c:	dfc01517 	ldw	ra,84(sp)
  809520:	dcc01417 	ldw	r19,80(sp)
  809524:	dc401317 	ldw	r17,76(sp)
  809528:	dec01604 	addi	sp,sp,88
  80952c:	f800283a 	ret

00809530 <__muldf3>:
  809530:	deffe004 	addi	sp,sp,-128
  809534:	dc401815 	stw	r17,96(sp)
  809538:	dc400404 	addi	r17,sp,16
  80953c:	2011883a 	mov	r8,r4
  809540:	2813883a 	mov	r9,r5
  809544:	dc001715 	stw	r16,92(sp)
  809548:	d809883a 	mov	r4,sp
  80954c:	880b883a 	mov	r5,r17
  809550:	dc000904 	addi	r16,sp,36
  809554:	dfc01f15 	stw	ra,124(sp)
  809558:	da400115 	stw	r9,4(sp)
  80955c:	d9c00315 	stw	r7,12(sp)
  809560:	da000015 	stw	r8,0(sp)
  809564:	d9800215 	stw	r6,8(sp)
  809568:	ddc01e15 	stw	r23,120(sp)
  80956c:	dd801d15 	stw	r22,116(sp)
  809570:	dd401c15 	stw	r21,112(sp)
  809574:	dd001b15 	stw	r20,108(sp)
  809578:	dcc01a15 	stw	r19,104(sp)
  80957c:	dc801915 	stw	r18,100(sp)
  809580:	080a5840 	call	80a584 <__unpack_d>
  809584:	d9000204 	addi	r4,sp,8
  809588:	800b883a 	mov	r5,r16
  80958c:	080a5840 	call	80a584 <__unpack_d>
  809590:	d9000417 	ldw	r4,16(sp)
  809594:	00800044 	movi	r2,1
  809598:	1100102e 	bgeu	r2,r4,8095dc <__muldf3+0xac>
  80959c:	d8c00917 	ldw	r3,36(sp)
  8095a0:	10c0062e 	bgeu	r2,r3,8095bc <__muldf3+0x8c>
  8095a4:	00800104 	movi	r2,4
  8095a8:	20800a26 	beq	r4,r2,8095d4 <__muldf3+0xa4>
  8095ac:	1880cc26 	beq	r3,r2,8098e0 <__muldf3+0x3b0>
  8095b0:	00800084 	movi	r2,2
  8095b4:	20800926 	beq	r4,r2,8095dc <__muldf3+0xac>
  8095b8:	1880191e 	bne	r3,r2,809620 <__muldf3+0xf0>
  8095bc:	d8c00a17 	ldw	r3,40(sp)
  8095c0:	d8800517 	ldw	r2,20(sp)
  8095c4:	8009883a 	mov	r4,r16
  8095c8:	10c4c03a 	cmpne	r2,r2,r3
  8095cc:	d8800a15 	stw	r2,40(sp)
  8095d0:	00000706 	br	8095f0 <__muldf3+0xc0>
  8095d4:	00800084 	movi	r2,2
  8095d8:	1880c326 	beq	r3,r2,8098e8 <__muldf3+0x3b8>
  8095dc:	d8800517 	ldw	r2,20(sp)
  8095e0:	d8c00a17 	ldw	r3,40(sp)
  8095e4:	8809883a 	mov	r4,r17
  8095e8:	10c4c03a 	cmpne	r2,r2,r3
  8095ec:	d8800515 	stw	r2,20(sp)
  8095f0:	080a2700 	call	80a270 <__pack_d>
  8095f4:	dfc01f17 	ldw	ra,124(sp)
  8095f8:	ddc01e17 	ldw	r23,120(sp)
  8095fc:	dd801d17 	ldw	r22,116(sp)
  809600:	dd401c17 	ldw	r21,112(sp)
  809604:	dd001b17 	ldw	r20,108(sp)
  809608:	dcc01a17 	ldw	r19,104(sp)
  80960c:	dc801917 	ldw	r18,100(sp)
  809610:	dc401817 	ldw	r17,96(sp)
  809614:	dc001717 	ldw	r16,92(sp)
  809618:	dec02004 	addi	sp,sp,128
  80961c:	f800283a 	ret
  809620:	dd800717 	ldw	r22,28(sp)
  809624:	dc800c17 	ldw	r18,48(sp)
  809628:	002b883a 	mov	r21,zero
  80962c:	0023883a 	mov	r17,zero
  809630:	a80b883a 	mov	r5,r21
  809634:	b00d883a 	mov	r6,r22
  809638:	880f883a 	mov	r7,r17
  80963c:	ddc00817 	ldw	r23,32(sp)
  809640:	dcc00d17 	ldw	r19,52(sp)
  809644:	9009883a 	mov	r4,r18
  809648:	080a1580 	call	80a158 <__muldi3>
  80964c:	001b883a 	mov	r13,zero
  809650:	680f883a 	mov	r7,r13
  809654:	b009883a 	mov	r4,r22
  809658:	000b883a 	mov	r5,zero
  80965c:	980d883a 	mov	r6,r19
  809660:	b82d883a 	mov	r22,r23
  809664:	002f883a 	mov	r23,zero
  809668:	db401615 	stw	r13,88(sp)
  80966c:	d8801315 	stw	r2,76(sp)
  809670:	d8c01415 	stw	r3,80(sp)
  809674:	dcc01515 	stw	r19,84(sp)
  809678:	080a1580 	call	80a158 <__muldi3>
  80967c:	b00d883a 	mov	r6,r22
  809680:	000b883a 	mov	r5,zero
  809684:	9009883a 	mov	r4,r18
  809688:	b80f883a 	mov	r7,r23
  80968c:	1021883a 	mov	r16,r2
  809690:	1823883a 	mov	r17,r3
  809694:	080a1580 	call	80a158 <__muldi3>
  809698:	8085883a 	add	r2,r16,r2
  80969c:	140d803a 	cmpltu	r6,r2,r16
  8096a0:	88c7883a 	add	r3,r17,r3
  8096a4:	30cd883a 	add	r6,r6,r3
  8096a8:	1029883a 	mov	r20,r2
  8096ac:	302b883a 	mov	r21,r6
  8096b0:	da801317 	ldw	r10,76(sp)
  8096b4:	dac01417 	ldw	r11,80(sp)
  8096b8:	db001517 	ldw	r12,84(sp)
  8096bc:	db401617 	ldw	r13,88(sp)
  8096c0:	3440612e 	bgeu	r6,r17,809848 <__muldf3+0x318>
  8096c4:	0009883a 	mov	r4,zero
  8096c8:	5105883a 	add	r2,r10,r4
  8096cc:	128d803a 	cmpltu	r6,r2,r10
  8096d0:	5d07883a 	add	r3,r11,r20
  8096d4:	30cd883a 	add	r6,r6,r3
  8096d8:	0021883a 	mov	r16,zero
  8096dc:	04400044 	movi	r17,1
  8096e0:	1025883a 	mov	r18,r2
  8096e4:	3027883a 	mov	r19,r6
  8096e8:	32c06236 	bltu	r6,r11,809874 <__muldf3+0x344>
  8096ec:	59807a26 	beq	r11,r6,8098d8 <__muldf3+0x3a8>
  8096f0:	680b883a 	mov	r5,r13
  8096f4:	b80f883a 	mov	r7,r23
  8096f8:	6009883a 	mov	r4,r12
  8096fc:	b00d883a 	mov	r6,r22
  809700:	080a1580 	call	80a158 <__muldi3>
  809704:	1009883a 	mov	r4,r2
  809708:	000f883a 	mov	r7,zero
  80970c:	1545883a 	add	r2,r2,r21
  809710:	1111803a 	cmpltu	r8,r2,r4
  809714:	19c7883a 	add	r3,r3,r7
  809718:	40c7883a 	add	r3,r8,r3
  80971c:	88cb883a 	add	r5,r17,r3
  809720:	d8c00617 	ldw	r3,24(sp)
  809724:	8089883a 	add	r4,r16,r2
  809728:	d8800b17 	ldw	r2,44(sp)
  80972c:	18c00104 	addi	r3,r3,4
  809730:	240d803a 	cmpltu	r6,r4,r16
  809734:	10c7883a 	add	r3,r2,r3
  809738:	2013883a 	mov	r9,r4
  80973c:	d8800a17 	ldw	r2,40(sp)
  809740:	d9000517 	ldw	r4,20(sp)
  809744:	314d883a 	add	r6,r6,r5
  809748:	3015883a 	mov	r10,r6
  80974c:	2088c03a 	cmpne	r4,r4,r2
  809750:	00880034 	movhi	r2,8192
  809754:	10bfffc4 	addi	r2,r2,-1
  809758:	d9000f15 	stw	r4,60(sp)
  80975c:	d8c01015 	stw	r3,64(sp)
  809760:	1180162e 	bgeu	r2,r6,8097bc <__muldf3+0x28c>
  809764:	1811883a 	mov	r8,r3
  809768:	101f883a 	mov	r15,r2
  80976c:	980497fa 	slli	r2,r19,31
  809770:	9016d07a 	srli	r11,r18,1
  809774:	500697fa 	slli	r3,r10,31
  809778:	480cd07a 	srli	r6,r9,1
  80977c:	500ed07a 	srli	r7,r10,1
  809780:	12d6b03a 	or	r11,r2,r11
  809784:	00800044 	movi	r2,1
  809788:	198cb03a 	or	r6,r3,r6
  80978c:	4888703a 	and	r4,r9,r2
  809790:	9818d07a 	srli	r12,r19,1
  809794:	001b883a 	mov	r13,zero
  809798:	03a00034 	movhi	r14,32768
  80979c:	3013883a 	mov	r9,r6
  8097a0:	3815883a 	mov	r10,r7
  8097a4:	4091883a 	add	r8,r8,r2
  8097a8:	20000226 	beq	r4,zero,8097b4 <__muldf3+0x284>
  8097ac:	5b64b03a 	or	r18,r11,r13
  8097b0:	63a6b03a 	or	r19,r12,r14
  8097b4:	7abfed36 	bltu	r15,r10,80976c <__muldf3+0x23c>
  8097b8:	da001015 	stw	r8,64(sp)
  8097bc:	00840034 	movhi	r2,4096
  8097c0:	10bfffc4 	addi	r2,r2,-1
  8097c4:	12801436 	bltu	r2,r10,809818 <__muldf3+0x2e8>
  8097c8:	da001017 	ldw	r8,64(sp)
  8097cc:	101f883a 	mov	r15,r2
  8097d0:	4a45883a 	add	r2,r9,r9
  8097d4:	124d803a 	cmpltu	r6,r2,r9
  8097d8:	5287883a 	add	r3,r10,r10
  8097dc:	9497883a 	add	r11,r18,r18
  8097e0:	5c8f803a 	cmpltu	r7,r11,r18
  8097e4:	9cd9883a 	add	r12,r19,r19
  8097e8:	01000044 	movi	r4,1
  8097ec:	30cd883a 	add	r6,r6,r3
  8097f0:	3b0f883a 	add	r7,r7,r12
  8097f4:	423fffc4 	addi	r8,r8,-1
  8097f8:	1013883a 	mov	r9,r2
  8097fc:	3015883a 	mov	r10,r6
  809800:	111ab03a 	or	r13,r2,r4
  809804:	98003016 	blt	r19,zero,8098c8 <__muldf3+0x398>
  809808:	5825883a 	mov	r18,r11
  80980c:	3827883a 	mov	r19,r7
  809810:	7abfef2e 	bgeu	r15,r10,8097d0 <__muldf3+0x2a0>
  809814:	da001015 	stw	r8,64(sp)
  809818:	00803fc4 	movi	r2,255
  80981c:	488e703a 	and	r7,r9,r2
  809820:	00802004 	movi	r2,128
  809824:	0007883a 	mov	r3,zero
  809828:	0011883a 	mov	r8,zero
  80982c:	38801826 	beq	r7,r2,809890 <__muldf3+0x360>
  809830:	008000c4 	movi	r2,3
  809834:	d9000e04 	addi	r4,sp,56
  809838:	da801215 	stw	r10,72(sp)
  80983c:	d8800e15 	stw	r2,56(sp)
  809840:	da401115 	stw	r9,68(sp)
  809844:	003f6a06 	br	8095f0 <__muldf3+0xc0>
  809848:	89802126 	beq	r17,r6,8098d0 <__muldf3+0x3a0>
  80984c:	0009883a 	mov	r4,zero
  809850:	5105883a 	add	r2,r10,r4
  809854:	128d803a 	cmpltu	r6,r2,r10
  809858:	5d07883a 	add	r3,r11,r20
  80985c:	30cd883a 	add	r6,r6,r3
  809860:	0021883a 	mov	r16,zero
  809864:	0023883a 	mov	r17,zero
  809868:	1025883a 	mov	r18,r2
  80986c:	3027883a 	mov	r19,r6
  809870:	32ff9e2e 	bgeu	r6,r11,8096ec <__muldf3+0x1bc>
  809874:	00800044 	movi	r2,1
  809878:	8089883a 	add	r4,r16,r2
  80987c:	240d803a 	cmpltu	r6,r4,r16
  809880:	344d883a 	add	r6,r6,r17
  809884:	2021883a 	mov	r16,r4
  809888:	3023883a 	mov	r17,r6
  80988c:	003f9806 	br	8096f0 <__muldf3+0x1c0>
  809890:	403fe71e 	bne	r8,zero,809830 <__muldf3+0x300>
  809894:	01004004 	movi	r4,256
  809898:	4904703a 	and	r2,r9,r4
  80989c:	10c4b03a 	or	r2,r2,r3
  8098a0:	103fe31e 	bne	r2,zero,809830 <__muldf3+0x300>
  8098a4:	94c4b03a 	or	r2,r18,r19
  8098a8:	103fe126 	beq	r2,zero,809830 <__muldf3+0x300>
  8098ac:	49c5883a 	add	r2,r9,r7
  8098b0:	1251803a 	cmpltu	r8,r2,r9
  8098b4:	4291883a 	add	r8,r8,r10
  8098b8:	013fc004 	movi	r4,-256
  8098bc:	1112703a 	and	r9,r2,r4
  8098c0:	4015883a 	mov	r10,r8
  8098c4:	003fda06 	br	809830 <__muldf3+0x300>
  8098c8:	6813883a 	mov	r9,r13
  8098cc:	003fce06 	br	809808 <__muldf3+0x2d8>
  8098d0:	143f7c36 	bltu	r2,r16,8096c4 <__muldf3+0x194>
  8098d4:	003fdd06 	br	80984c <__muldf3+0x31c>
  8098d8:	12bf852e 	bgeu	r2,r10,8096f0 <__muldf3+0x1c0>
  8098dc:	003fe506 	br	809874 <__muldf3+0x344>
  8098e0:	00800084 	movi	r2,2
  8098e4:	20bf351e 	bne	r4,r2,8095bc <__muldf3+0x8c>
  8098e8:	01002074 	movhi	r4,129
  8098ec:	213bbd04 	addi	r4,r4,-4364
  8098f0:	003f3f06 	br	8095f0 <__muldf3+0xc0>

008098f4 <__divdf3>:
  8098f4:	deffed04 	addi	sp,sp,-76
  8098f8:	dcc01115 	stw	r19,68(sp)
  8098fc:	dcc00404 	addi	r19,sp,16
  809900:	2011883a 	mov	r8,r4
  809904:	2813883a 	mov	r9,r5
  809908:	dc000e15 	stw	r16,56(sp)
  80990c:	d809883a 	mov	r4,sp
  809910:	980b883a 	mov	r5,r19
  809914:	dc000904 	addi	r16,sp,36
  809918:	dfc01215 	stw	ra,72(sp)
  80991c:	da400115 	stw	r9,4(sp)
  809920:	d9c00315 	stw	r7,12(sp)
  809924:	da000015 	stw	r8,0(sp)
  809928:	d9800215 	stw	r6,8(sp)
  80992c:	dc801015 	stw	r18,64(sp)
  809930:	dc400f15 	stw	r17,60(sp)
  809934:	080a5840 	call	80a584 <__unpack_d>
  809938:	d9000204 	addi	r4,sp,8
  80993c:	800b883a 	mov	r5,r16
  809940:	080a5840 	call	80a584 <__unpack_d>
  809944:	d9000417 	ldw	r4,16(sp)
  809948:	00800044 	movi	r2,1
  80994c:	11000b2e 	bgeu	r2,r4,80997c <__divdf3+0x88>
  809950:	d9400917 	ldw	r5,36(sp)
  809954:	1140762e 	bgeu	r2,r5,809b30 <__divdf3+0x23c>
  809958:	d8800517 	ldw	r2,20(sp)
  80995c:	d8c00a17 	ldw	r3,40(sp)
  809960:	01800104 	movi	r6,4
  809964:	10c4f03a 	xor	r2,r2,r3
  809968:	d8800515 	stw	r2,20(sp)
  80996c:	21800226 	beq	r4,r6,809978 <__divdf3+0x84>
  809970:	00800084 	movi	r2,2
  809974:	2080141e 	bne	r4,r2,8099c8 <__divdf3+0xd4>
  809978:	29000926 	beq	r5,r4,8099a0 <__divdf3+0xac>
  80997c:	9809883a 	mov	r4,r19
  809980:	080a2700 	call	80a270 <__pack_d>
  809984:	dfc01217 	ldw	ra,72(sp)
  809988:	dcc01117 	ldw	r19,68(sp)
  80998c:	dc801017 	ldw	r18,64(sp)
  809990:	dc400f17 	ldw	r17,60(sp)
  809994:	dc000e17 	ldw	r16,56(sp)
  809998:	dec01304 	addi	sp,sp,76
  80999c:	f800283a 	ret
  8099a0:	01002074 	movhi	r4,129
  8099a4:	213bbd04 	addi	r4,r4,-4364
  8099a8:	080a2700 	call	80a270 <__pack_d>
  8099ac:	dfc01217 	ldw	ra,72(sp)
  8099b0:	dcc01117 	ldw	r19,68(sp)
  8099b4:	dc801017 	ldw	r18,64(sp)
  8099b8:	dc400f17 	ldw	r17,60(sp)
  8099bc:	dc000e17 	ldw	r16,56(sp)
  8099c0:	dec01304 	addi	sp,sp,76
  8099c4:	f800283a 	ret
  8099c8:	29805b26 	beq	r5,r6,809b38 <__divdf3+0x244>
  8099cc:	28802d26 	beq	r5,r2,809a84 <__divdf3+0x190>
  8099d0:	d8c00617 	ldw	r3,24(sp)
  8099d4:	d8800b17 	ldw	r2,44(sp)
  8099d8:	d9c00817 	ldw	r7,32(sp)
  8099dc:	dc400d17 	ldw	r17,52(sp)
  8099e0:	188bc83a 	sub	r5,r3,r2
  8099e4:	d9800717 	ldw	r6,28(sp)
  8099e8:	dc000c17 	ldw	r16,48(sp)
  8099ec:	d9400615 	stw	r5,24(sp)
  8099f0:	3c403836 	bltu	r7,r17,809ad4 <__divdf3+0x1e0>
  8099f4:	89c03626 	beq	r17,r7,809ad0 <__divdf3+0x1dc>
  8099f8:	0015883a 	mov	r10,zero
  8099fc:	001d883a 	mov	r14,zero
  809a00:	02c40034 	movhi	r11,4096
  809a04:	001f883a 	mov	r15,zero
  809a08:	003f883a 	mov	ra,zero
  809a0c:	04800f44 	movi	r18,61
  809a10:	00000f06 	br	809a50 <__divdf3+0x15c>
  809a14:	601d883a 	mov	r14,r12
  809a18:	681f883a 	mov	r15,r13
  809a1c:	400d883a 	mov	r6,r8
  809a20:	100f883a 	mov	r7,r2
  809a24:	3191883a 	add	r8,r6,r6
  809a28:	5808d07a 	srli	r4,r11,1
  809a2c:	4185803a 	cmpltu	r2,r8,r6
  809a30:	39d3883a 	add	r9,r7,r7
  809a34:	28c6b03a 	or	r3,r5,r3
  809a38:	1245883a 	add	r2,r2,r9
  809a3c:	1815883a 	mov	r10,r3
  809a40:	2017883a 	mov	r11,r4
  809a44:	400d883a 	mov	r6,r8
  809a48:	100f883a 	mov	r7,r2
  809a4c:	fc801726 	beq	ra,r18,809aac <__divdf3+0x1b8>
  809a50:	580a97fa 	slli	r5,r11,31
  809a54:	5006d07a 	srli	r3,r10,1
  809a58:	ffc00044 	addi	ra,ra,1
  809a5c:	3c7ff136 	bltu	r7,r17,809a24 <__divdf3+0x130>
  809a60:	3411c83a 	sub	r8,r6,r16
  809a64:	3205803a 	cmpltu	r2,r6,r8
  809a68:	3c53c83a 	sub	r9,r7,r17
  809a6c:	7298b03a 	or	r12,r14,r10
  809a70:	7adab03a 	or	r13,r15,r11
  809a74:	4885c83a 	sub	r2,r9,r2
  809a78:	89ffe61e 	bne	r17,r7,809a14 <__divdf3+0x120>
  809a7c:	343fe936 	bltu	r6,r16,809a24 <__divdf3+0x130>
  809a80:	003fe406 	br	809a14 <__divdf3+0x120>
  809a84:	9809883a 	mov	r4,r19
  809a88:	d9800415 	stw	r6,16(sp)
  809a8c:	080a2700 	call	80a270 <__pack_d>
  809a90:	dfc01217 	ldw	ra,72(sp)
  809a94:	dcc01117 	ldw	r19,68(sp)
  809a98:	dc801017 	ldw	r18,64(sp)
  809a9c:	dc400f17 	ldw	r17,60(sp)
  809aa0:	dc000e17 	ldw	r16,56(sp)
  809aa4:	dec01304 	addi	sp,sp,76
  809aa8:	f800283a 	ret
  809aac:	00803fc4 	movi	r2,255
  809ab0:	7090703a 	and	r8,r14,r2
  809ab4:	00802004 	movi	r2,128
  809ab8:	0007883a 	mov	r3,zero
  809abc:	0013883a 	mov	r9,zero
  809ac0:	40800d26 	beq	r8,r2,809af8 <__divdf3+0x204>
  809ac4:	dbc00815 	stw	r15,32(sp)
  809ac8:	db800715 	stw	r14,28(sp)
  809acc:	003fab06 	br	80997c <__divdf3+0x88>
  809ad0:	343fc92e 	bgeu	r6,r16,8099f8 <__divdf3+0x104>
  809ad4:	3185883a 	add	r2,r6,r6
  809ad8:	1189803a 	cmpltu	r4,r2,r6
  809adc:	39c7883a 	add	r3,r7,r7
  809ae0:	20c9883a 	add	r4,r4,r3
  809ae4:	297fffc4 	addi	r5,r5,-1
  809ae8:	100d883a 	mov	r6,r2
  809aec:	200f883a 	mov	r7,r4
  809af0:	d9400615 	stw	r5,24(sp)
  809af4:	003fc006 	br	8099f8 <__divdf3+0x104>
  809af8:	483ff21e 	bne	r9,zero,809ac4 <__divdf3+0x1d0>
  809afc:	01004004 	movi	r4,256
  809b00:	7104703a 	and	r2,r14,r4
  809b04:	10c4b03a 	or	r2,r2,r3
  809b08:	103fee1e 	bne	r2,zero,809ac4 <__divdf3+0x1d0>
  809b0c:	31c4b03a 	or	r2,r6,r7
  809b10:	103fec26 	beq	r2,zero,809ac4 <__divdf3+0x1d0>
  809b14:	7205883a 	add	r2,r14,r8
  809b18:	1391803a 	cmpltu	r8,r2,r14
  809b1c:	43d1883a 	add	r8,r8,r15
  809b20:	013fc004 	movi	r4,-256
  809b24:	111c703a 	and	r14,r2,r4
  809b28:	401f883a 	mov	r15,r8
  809b2c:	003fe506 	br	809ac4 <__divdf3+0x1d0>
  809b30:	8009883a 	mov	r4,r16
  809b34:	003f9206 	br	809980 <__divdf3+0x8c>
  809b38:	9809883a 	mov	r4,r19
  809b3c:	d8000715 	stw	zero,28(sp)
  809b40:	d8000815 	stw	zero,32(sp)
  809b44:	d8000615 	stw	zero,24(sp)
  809b48:	003f8d06 	br	809980 <__divdf3+0x8c>

00809b4c <__eqdf2>:
  809b4c:	deffef04 	addi	sp,sp,-68
  809b50:	dc400f15 	stw	r17,60(sp)
  809b54:	dc400404 	addi	r17,sp,16
  809b58:	2005883a 	mov	r2,r4
  809b5c:	2807883a 	mov	r3,r5
  809b60:	dc000e15 	stw	r16,56(sp)
  809b64:	d809883a 	mov	r4,sp
  809b68:	880b883a 	mov	r5,r17
  809b6c:	dc000904 	addi	r16,sp,36
  809b70:	d8c00115 	stw	r3,4(sp)
  809b74:	d8800015 	stw	r2,0(sp)
  809b78:	d9800215 	stw	r6,8(sp)
  809b7c:	dfc01015 	stw	ra,64(sp)
  809b80:	d9c00315 	stw	r7,12(sp)
  809b84:	080a5840 	call	80a584 <__unpack_d>
  809b88:	d9000204 	addi	r4,sp,8
  809b8c:	800b883a 	mov	r5,r16
  809b90:	080a5840 	call	80a584 <__unpack_d>
  809b94:	d8800417 	ldw	r2,16(sp)
  809b98:	00c00044 	movi	r3,1
  809b9c:	180d883a 	mov	r6,r3
  809ba0:	1880062e 	bgeu	r3,r2,809bbc <__eqdf2+0x70>
  809ba4:	d8800917 	ldw	r2,36(sp)
  809ba8:	8809883a 	mov	r4,r17
  809bac:	800b883a 	mov	r5,r16
  809bb0:	1880022e 	bgeu	r3,r2,809bbc <__eqdf2+0x70>
  809bb4:	080a6bc0 	call	80a6bc <__fpcmp_parts_d>
  809bb8:	100d883a 	mov	r6,r2
  809bbc:	3005883a 	mov	r2,r6
  809bc0:	dfc01017 	ldw	ra,64(sp)
  809bc4:	dc400f17 	ldw	r17,60(sp)
  809bc8:	dc000e17 	ldw	r16,56(sp)
  809bcc:	dec01104 	addi	sp,sp,68
  809bd0:	f800283a 	ret

00809bd4 <__nedf2>:
  809bd4:	deffef04 	addi	sp,sp,-68
  809bd8:	dc400f15 	stw	r17,60(sp)
  809bdc:	dc400404 	addi	r17,sp,16
  809be0:	2005883a 	mov	r2,r4
  809be4:	2807883a 	mov	r3,r5
  809be8:	dc000e15 	stw	r16,56(sp)
  809bec:	d809883a 	mov	r4,sp
  809bf0:	880b883a 	mov	r5,r17
  809bf4:	dc000904 	addi	r16,sp,36
  809bf8:	d8c00115 	stw	r3,4(sp)
  809bfc:	d8800015 	stw	r2,0(sp)
  809c00:	d9800215 	stw	r6,8(sp)
  809c04:	dfc01015 	stw	ra,64(sp)
  809c08:	d9c00315 	stw	r7,12(sp)
  809c0c:	080a5840 	call	80a584 <__unpack_d>
  809c10:	d9000204 	addi	r4,sp,8
  809c14:	800b883a 	mov	r5,r16
  809c18:	080a5840 	call	80a584 <__unpack_d>
  809c1c:	d8800417 	ldw	r2,16(sp)
  809c20:	00c00044 	movi	r3,1
  809c24:	180d883a 	mov	r6,r3
  809c28:	1880062e 	bgeu	r3,r2,809c44 <__nedf2+0x70>
  809c2c:	d8800917 	ldw	r2,36(sp)
  809c30:	8809883a 	mov	r4,r17
  809c34:	800b883a 	mov	r5,r16
  809c38:	1880022e 	bgeu	r3,r2,809c44 <__nedf2+0x70>
  809c3c:	080a6bc0 	call	80a6bc <__fpcmp_parts_d>
  809c40:	100d883a 	mov	r6,r2
  809c44:	3005883a 	mov	r2,r6
  809c48:	dfc01017 	ldw	ra,64(sp)
  809c4c:	dc400f17 	ldw	r17,60(sp)
  809c50:	dc000e17 	ldw	r16,56(sp)
  809c54:	dec01104 	addi	sp,sp,68
  809c58:	f800283a 	ret

00809c5c <__gtdf2>:
  809c5c:	deffef04 	addi	sp,sp,-68
  809c60:	dc400f15 	stw	r17,60(sp)
  809c64:	dc400404 	addi	r17,sp,16
  809c68:	2005883a 	mov	r2,r4
  809c6c:	2807883a 	mov	r3,r5
  809c70:	dc000e15 	stw	r16,56(sp)
  809c74:	d809883a 	mov	r4,sp
  809c78:	880b883a 	mov	r5,r17
  809c7c:	dc000904 	addi	r16,sp,36
  809c80:	d8c00115 	stw	r3,4(sp)
  809c84:	d8800015 	stw	r2,0(sp)
  809c88:	d9800215 	stw	r6,8(sp)
  809c8c:	dfc01015 	stw	ra,64(sp)
  809c90:	d9c00315 	stw	r7,12(sp)
  809c94:	080a5840 	call	80a584 <__unpack_d>
  809c98:	d9000204 	addi	r4,sp,8
  809c9c:	800b883a 	mov	r5,r16
  809ca0:	080a5840 	call	80a584 <__unpack_d>
  809ca4:	d8800417 	ldw	r2,16(sp)
  809ca8:	00c00044 	movi	r3,1
  809cac:	01bfffc4 	movi	r6,-1
  809cb0:	1880062e 	bgeu	r3,r2,809ccc <__gtdf2+0x70>
  809cb4:	d8800917 	ldw	r2,36(sp)
  809cb8:	8809883a 	mov	r4,r17
  809cbc:	800b883a 	mov	r5,r16
  809cc0:	1880022e 	bgeu	r3,r2,809ccc <__gtdf2+0x70>
  809cc4:	080a6bc0 	call	80a6bc <__fpcmp_parts_d>
  809cc8:	100d883a 	mov	r6,r2
  809ccc:	3005883a 	mov	r2,r6
  809cd0:	dfc01017 	ldw	ra,64(sp)
  809cd4:	dc400f17 	ldw	r17,60(sp)
  809cd8:	dc000e17 	ldw	r16,56(sp)
  809cdc:	dec01104 	addi	sp,sp,68
  809ce0:	f800283a 	ret

00809ce4 <__gedf2>:
  809ce4:	deffef04 	addi	sp,sp,-68
  809ce8:	dc400f15 	stw	r17,60(sp)
  809cec:	dc400404 	addi	r17,sp,16
  809cf0:	2005883a 	mov	r2,r4
  809cf4:	2807883a 	mov	r3,r5
  809cf8:	dc000e15 	stw	r16,56(sp)
  809cfc:	d809883a 	mov	r4,sp
  809d00:	880b883a 	mov	r5,r17
  809d04:	dc000904 	addi	r16,sp,36
  809d08:	d8c00115 	stw	r3,4(sp)
  809d0c:	d8800015 	stw	r2,0(sp)
  809d10:	d9800215 	stw	r6,8(sp)
  809d14:	dfc01015 	stw	ra,64(sp)
  809d18:	d9c00315 	stw	r7,12(sp)
  809d1c:	080a5840 	call	80a584 <__unpack_d>
  809d20:	d9000204 	addi	r4,sp,8
  809d24:	800b883a 	mov	r5,r16
  809d28:	080a5840 	call	80a584 <__unpack_d>
  809d2c:	d8800417 	ldw	r2,16(sp)
  809d30:	00c00044 	movi	r3,1
  809d34:	01bfffc4 	movi	r6,-1
  809d38:	1880062e 	bgeu	r3,r2,809d54 <__gedf2+0x70>
  809d3c:	d8800917 	ldw	r2,36(sp)
  809d40:	8809883a 	mov	r4,r17
  809d44:	800b883a 	mov	r5,r16
  809d48:	1880022e 	bgeu	r3,r2,809d54 <__gedf2+0x70>
  809d4c:	080a6bc0 	call	80a6bc <__fpcmp_parts_d>
  809d50:	100d883a 	mov	r6,r2
  809d54:	3005883a 	mov	r2,r6
  809d58:	dfc01017 	ldw	ra,64(sp)
  809d5c:	dc400f17 	ldw	r17,60(sp)
  809d60:	dc000e17 	ldw	r16,56(sp)
  809d64:	dec01104 	addi	sp,sp,68
  809d68:	f800283a 	ret

00809d6c <__ltdf2>:
  809d6c:	deffef04 	addi	sp,sp,-68
  809d70:	dc400f15 	stw	r17,60(sp)
  809d74:	dc400404 	addi	r17,sp,16
  809d78:	2005883a 	mov	r2,r4
  809d7c:	2807883a 	mov	r3,r5
  809d80:	dc000e15 	stw	r16,56(sp)
  809d84:	d809883a 	mov	r4,sp
  809d88:	880b883a 	mov	r5,r17
  809d8c:	dc000904 	addi	r16,sp,36
  809d90:	d8c00115 	stw	r3,4(sp)
  809d94:	d8800015 	stw	r2,0(sp)
  809d98:	d9800215 	stw	r6,8(sp)
  809d9c:	dfc01015 	stw	ra,64(sp)
  809da0:	d9c00315 	stw	r7,12(sp)
  809da4:	080a5840 	call	80a584 <__unpack_d>
  809da8:	d9000204 	addi	r4,sp,8
  809dac:	800b883a 	mov	r5,r16
  809db0:	080a5840 	call	80a584 <__unpack_d>
  809db4:	d8800417 	ldw	r2,16(sp)
  809db8:	00c00044 	movi	r3,1
  809dbc:	180d883a 	mov	r6,r3
  809dc0:	1880062e 	bgeu	r3,r2,809ddc <__ltdf2+0x70>
  809dc4:	d8800917 	ldw	r2,36(sp)
  809dc8:	8809883a 	mov	r4,r17
  809dcc:	800b883a 	mov	r5,r16
  809dd0:	1880022e 	bgeu	r3,r2,809ddc <__ltdf2+0x70>
  809dd4:	080a6bc0 	call	80a6bc <__fpcmp_parts_d>
  809dd8:	100d883a 	mov	r6,r2
  809ddc:	3005883a 	mov	r2,r6
  809de0:	dfc01017 	ldw	ra,64(sp)
  809de4:	dc400f17 	ldw	r17,60(sp)
  809de8:	dc000e17 	ldw	r16,56(sp)
  809dec:	dec01104 	addi	sp,sp,68
  809df0:	f800283a 	ret

00809df4 <__floatsidf>:
  809df4:	2006d7fa 	srli	r3,r4,31
  809df8:	defff604 	addi	sp,sp,-40
  809dfc:	008000c4 	movi	r2,3
  809e00:	dfc00915 	stw	ra,36(sp)
  809e04:	dcc00815 	stw	r19,32(sp)
  809e08:	dc800715 	stw	r18,28(sp)
  809e0c:	dc400615 	stw	r17,24(sp)
  809e10:	dc000515 	stw	r16,20(sp)
  809e14:	d8800015 	stw	r2,0(sp)
  809e18:	d8c00115 	stw	r3,4(sp)
  809e1c:	20000f1e 	bne	r4,zero,809e5c <__floatsidf+0x68>
  809e20:	00800084 	movi	r2,2
  809e24:	d8800015 	stw	r2,0(sp)
  809e28:	d809883a 	mov	r4,sp
  809e2c:	080a2700 	call	80a270 <__pack_d>
  809e30:	1009883a 	mov	r4,r2
  809e34:	180b883a 	mov	r5,r3
  809e38:	2005883a 	mov	r2,r4
  809e3c:	2807883a 	mov	r3,r5
  809e40:	dfc00917 	ldw	ra,36(sp)
  809e44:	dcc00817 	ldw	r19,32(sp)
  809e48:	dc800717 	ldw	r18,28(sp)
  809e4c:	dc400617 	ldw	r17,24(sp)
  809e50:	dc000517 	ldw	r16,20(sp)
  809e54:	dec00a04 	addi	sp,sp,40
  809e58:	f800283a 	ret
  809e5c:	00800f04 	movi	r2,60
  809e60:	1807003a 	cmpeq	r3,r3,zero
  809e64:	d8800215 	stw	r2,8(sp)
  809e68:	18001126 	beq	r3,zero,809eb0 <__floatsidf+0xbc>
  809e6c:	0027883a 	mov	r19,zero
  809e70:	2025883a 	mov	r18,r4
  809e74:	d9000315 	stw	r4,12(sp)
  809e78:	dcc00415 	stw	r19,16(sp)
  809e7c:	080a1f00 	call	80a1f0 <__clzsi2>
  809e80:	11000744 	addi	r4,r2,29
  809e84:	013fe80e 	bge	zero,r4,809e28 <__floatsidf+0x34>
  809e88:	10bfff44 	addi	r2,r2,-3
  809e8c:	10000c16 	blt	r2,zero,809ec0 <__floatsidf+0xcc>
  809e90:	90a2983a 	sll	r17,r18,r2
  809e94:	0021883a 	mov	r16,zero
  809e98:	d8800217 	ldw	r2,8(sp)
  809e9c:	dc400415 	stw	r17,16(sp)
  809ea0:	dc000315 	stw	r16,12(sp)
  809ea4:	1105c83a 	sub	r2,r2,r4
  809ea8:	d8800215 	stw	r2,8(sp)
  809eac:	003fde06 	br	809e28 <__floatsidf+0x34>
  809eb0:	00a00034 	movhi	r2,32768
  809eb4:	20800a26 	beq	r4,r2,809ee0 <__floatsidf+0xec>
  809eb8:	0109c83a 	sub	r4,zero,r4
  809ebc:	003feb06 	br	809e6c <__floatsidf+0x78>
  809ec0:	9006d07a 	srli	r3,r18,1
  809ec4:	008007c4 	movi	r2,31
  809ec8:	1105c83a 	sub	r2,r2,r4
  809ecc:	1886d83a 	srl	r3,r3,r2
  809ed0:	9922983a 	sll	r17,r19,r4
  809ed4:	9120983a 	sll	r16,r18,r4
  809ed8:	1c62b03a 	or	r17,r3,r17
  809edc:	003fee06 	br	809e98 <__floatsidf+0xa4>
  809ee0:	0009883a 	mov	r4,zero
  809ee4:	01707834 	movhi	r5,49632
  809ee8:	003fd306 	br	809e38 <__floatsidf+0x44>

00809eec <__fixdfsi>:
  809eec:	defff804 	addi	sp,sp,-32
  809ef0:	2005883a 	mov	r2,r4
  809ef4:	2807883a 	mov	r3,r5
  809ef8:	d809883a 	mov	r4,sp
  809efc:	d9400204 	addi	r5,sp,8
  809f00:	d8c00115 	stw	r3,4(sp)
  809f04:	d8800015 	stw	r2,0(sp)
  809f08:	dfc00715 	stw	ra,28(sp)
  809f0c:	080a5840 	call	80a584 <__unpack_d>
  809f10:	d8c00217 	ldw	r3,8(sp)
  809f14:	00800084 	movi	r2,2
  809f18:	1880051e 	bne	r3,r2,809f30 <__fixdfsi+0x44>
  809f1c:	0007883a 	mov	r3,zero
  809f20:	1805883a 	mov	r2,r3
  809f24:	dfc00717 	ldw	ra,28(sp)
  809f28:	dec00804 	addi	sp,sp,32
  809f2c:	f800283a 	ret
  809f30:	00800044 	movi	r2,1
  809f34:	10fff92e 	bgeu	r2,r3,809f1c <__fixdfsi+0x30>
  809f38:	00800104 	movi	r2,4
  809f3c:	18800426 	beq	r3,r2,809f50 <__fixdfsi+0x64>
  809f40:	d8c00417 	ldw	r3,16(sp)
  809f44:	183ff516 	blt	r3,zero,809f1c <__fixdfsi+0x30>
  809f48:	00800784 	movi	r2,30
  809f4c:	10c0080e 	bge	r2,r3,809f70 <__fixdfsi+0x84>
  809f50:	d8800317 	ldw	r2,12(sp)
  809f54:	1000121e 	bne	r2,zero,809fa0 <__fixdfsi+0xb4>
  809f58:	00e00034 	movhi	r3,32768
  809f5c:	18ffffc4 	addi	r3,r3,-1
  809f60:	1805883a 	mov	r2,r3
  809f64:	dfc00717 	ldw	ra,28(sp)
  809f68:	dec00804 	addi	sp,sp,32
  809f6c:	f800283a 	ret
  809f70:	00800f04 	movi	r2,60
  809f74:	10d1c83a 	sub	r8,r2,r3
  809f78:	40bff804 	addi	r2,r8,-32
  809f7c:	d9800517 	ldw	r6,20(sp)
  809f80:	d9c00617 	ldw	r7,24(sp)
  809f84:	10000816 	blt	r2,zero,809fa8 <__fixdfsi+0xbc>
  809f88:	3888d83a 	srl	r4,r7,r2
  809f8c:	d8800317 	ldw	r2,12(sp)
  809f90:	2007883a 	mov	r3,r4
  809f94:	103fe226 	beq	r2,zero,809f20 <__fixdfsi+0x34>
  809f98:	0107c83a 	sub	r3,zero,r4
  809f9c:	003fe006 	br	809f20 <__fixdfsi+0x34>
  809fa0:	00e00034 	movhi	r3,32768
  809fa4:	003fde06 	br	809f20 <__fixdfsi+0x34>
  809fa8:	39c7883a 	add	r3,r7,r7
  809fac:	008007c4 	movi	r2,31
  809fb0:	1205c83a 	sub	r2,r2,r8
  809fb4:	1886983a 	sll	r3,r3,r2
  809fb8:	3208d83a 	srl	r4,r6,r8
  809fbc:	1908b03a 	or	r4,r3,r4
  809fc0:	003ff206 	br	809f8c <__fixdfsi+0xa0>

00809fc4 <__floatunsidf>:
  809fc4:	defff204 	addi	sp,sp,-56
  809fc8:	dfc00d15 	stw	ra,52(sp)
  809fcc:	ddc00c15 	stw	r23,48(sp)
  809fd0:	dd800b15 	stw	r22,44(sp)
  809fd4:	dd400a15 	stw	r21,40(sp)
  809fd8:	dd000915 	stw	r20,36(sp)
  809fdc:	dcc00815 	stw	r19,32(sp)
  809fe0:	dc800715 	stw	r18,28(sp)
  809fe4:	dc400615 	stw	r17,24(sp)
  809fe8:	dc000515 	stw	r16,20(sp)
  809fec:	d8000115 	stw	zero,4(sp)
  809ff0:	20000f1e 	bne	r4,zero,80a030 <__floatunsidf+0x6c>
  809ff4:	00800084 	movi	r2,2
  809ff8:	d8800015 	stw	r2,0(sp)
  809ffc:	d809883a 	mov	r4,sp
  80a000:	080a2700 	call	80a270 <__pack_d>
  80a004:	dfc00d17 	ldw	ra,52(sp)
  80a008:	ddc00c17 	ldw	r23,48(sp)
  80a00c:	dd800b17 	ldw	r22,44(sp)
  80a010:	dd400a17 	ldw	r21,40(sp)
  80a014:	dd000917 	ldw	r20,36(sp)
  80a018:	dcc00817 	ldw	r19,32(sp)
  80a01c:	dc800717 	ldw	r18,28(sp)
  80a020:	dc400617 	ldw	r17,24(sp)
  80a024:	dc000517 	ldw	r16,20(sp)
  80a028:	dec00e04 	addi	sp,sp,56
  80a02c:	f800283a 	ret
  80a030:	008000c4 	movi	r2,3
  80a034:	00c00f04 	movi	r3,60
  80a038:	002f883a 	mov	r23,zero
  80a03c:	202d883a 	mov	r22,r4
  80a040:	d8800015 	stw	r2,0(sp)
  80a044:	d8c00215 	stw	r3,8(sp)
  80a048:	d9000315 	stw	r4,12(sp)
  80a04c:	ddc00415 	stw	r23,16(sp)
  80a050:	080a1f00 	call	80a1f0 <__clzsi2>
  80a054:	12400744 	addi	r9,r2,29
  80a058:	48000b16 	blt	r9,zero,80a088 <__floatunsidf+0xc4>
  80a05c:	483fe726 	beq	r9,zero,809ffc <__floatunsidf+0x38>
  80a060:	10bfff44 	addi	r2,r2,-3
  80a064:	10002e16 	blt	r2,zero,80a120 <__floatunsidf+0x15c>
  80a068:	b0a2983a 	sll	r17,r22,r2
  80a06c:	0021883a 	mov	r16,zero
  80a070:	d8800217 	ldw	r2,8(sp)
  80a074:	dc400415 	stw	r17,16(sp)
  80a078:	dc000315 	stw	r16,12(sp)
  80a07c:	1245c83a 	sub	r2,r2,r9
  80a080:	d8800215 	stw	r2,8(sp)
  80a084:	003fdd06 	br	809ffc <__floatunsidf+0x38>
  80a088:	0255c83a 	sub	r10,zero,r9
  80a08c:	51bff804 	addi	r6,r10,-32
  80a090:	30001b16 	blt	r6,zero,80a100 <__floatunsidf+0x13c>
  80a094:	b9a8d83a 	srl	r20,r23,r6
  80a098:	002b883a 	mov	r21,zero
  80a09c:	000f883a 	mov	r7,zero
  80a0a0:	01000044 	movi	r4,1
  80a0a4:	0011883a 	mov	r8,zero
  80a0a8:	30002516 	blt	r6,zero,80a140 <__floatunsidf+0x17c>
  80a0ac:	21a6983a 	sll	r19,r4,r6
  80a0b0:	0025883a 	mov	r18,zero
  80a0b4:	00bfffc4 	movi	r2,-1
  80a0b8:	9089883a 	add	r4,r18,r2
  80a0bc:	988b883a 	add	r5,r19,r2
  80a0c0:	248d803a 	cmpltu	r6,r4,r18
  80a0c4:	314b883a 	add	r5,r6,r5
  80a0c8:	b104703a 	and	r2,r22,r4
  80a0cc:	b946703a 	and	r3,r23,r5
  80a0d0:	10c4b03a 	or	r2,r2,r3
  80a0d4:	10000226 	beq	r2,zero,80a0e0 <__floatunsidf+0x11c>
  80a0d8:	01c00044 	movi	r7,1
  80a0dc:	0011883a 	mov	r8,zero
  80a0e0:	d9000217 	ldw	r4,8(sp)
  80a0e4:	a1c4b03a 	or	r2,r20,r7
  80a0e8:	aa06b03a 	or	r3,r21,r8
  80a0ec:	2249c83a 	sub	r4,r4,r9
  80a0f0:	d8c00415 	stw	r3,16(sp)
  80a0f4:	d9000215 	stw	r4,8(sp)
  80a0f8:	d8800315 	stw	r2,12(sp)
  80a0fc:	003fbf06 	br	809ffc <__floatunsidf+0x38>
  80a100:	bdc7883a 	add	r3,r23,r23
  80a104:	008007c4 	movi	r2,31
  80a108:	1285c83a 	sub	r2,r2,r10
  80a10c:	1886983a 	sll	r3,r3,r2
  80a110:	b2a8d83a 	srl	r20,r22,r10
  80a114:	baaad83a 	srl	r21,r23,r10
  80a118:	1d28b03a 	or	r20,r3,r20
  80a11c:	003fdf06 	br	80a09c <__floatunsidf+0xd8>
  80a120:	b006d07a 	srli	r3,r22,1
  80a124:	008007c4 	movi	r2,31
  80a128:	1245c83a 	sub	r2,r2,r9
  80a12c:	1886d83a 	srl	r3,r3,r2
  80a130:	ba62983a 	sll	r17,r23,r9
  80a134:	b260983a 	sll	r16,r22,r9
  80a138:	1c62b03a 	or	r17,r3,r17
  80a13c:	003fcc06 	br	80a070 <__floatunsidf+0xac>
  80a140:	2006d07a 	srli	r3,r4,1
  80a144:	008007c4 	movi	r2,31
  80a148:	1285c83a 	sub	r2,r2,r10
  80a14c:	18a6d83a 	srl	r19,r3,r2
  80a150:	22a4983a 	sll	r18,r4,r10
  80a154:	003fd706 	br	80a0b4 <__floatunsidf+0xf0>

0080a158 <__muldi3>:
  80a158:	2011883a 	mov	r8,r4
  80a15c:	427fffcc 	andi	r9,r8,65535
  80a160:	4018d43a 	srli	r12,r8,16
  80a164:	32bfffcc 	andi	r10,r6,65535
  80a168:	3016d43a 	srli	r11,r6,16
  80a16c:	4a85383a 	mul	r2,r9,r10
  80a170:	6295383a 	mul	r10,r12,r10
  80a174:	4ad3383a 	mul	r9,r9,r11
  80a178:	113fffcc 	andi	r4,r2,65535
  80a17c:	1004d43a 	srli	r2,r2,16
  80a180:	4a93883a 	add	r9,r9,r10
  80a184:	3807883a 	mov	r3,r7
  80a188:	1245883a 	add	r2,r2,r9
  80a18c:	280f883a 	mov	r7,r5
  80a190:	180b883a 	mov	r5,r3
  80a194:	1006943a 	slli	r3,r2,16
  80a198:	defffd04 	addi	sp,sp,-12
  80a19c:	dc800215 	stw	r18,8(sp)
  80a1a0:	1907883a 	add	r3,r3,r4
  80a1a4:	dc400115 	stw	r17,4(sp)
  80a1a8:	dc000015 	stw	r16,0(sp)
  80a1ac:	4165383a 	mul	r18,r8,r5
  80a1b0:	31e3383a 	mul	r17,r6,r7
  80a1b4:	1012d43a 	srli	r9,r2,16
  80a1b8:	62d9383a 	mul	r12,r12,r11
  80a1bc:	181f883a 	mov	r15,r3
  80a1c0:	1280022e 	bgeu	r2,r10,80a1cc <__muldi3+0x74>
  80a1c4:	00800074 	movhi	r2,1
  80a1c8:	6099883a 	add	r12,r12,r2
  80a1cc:	624d883a 	add	r6,r12,r9
  80a1d0:	9187883a 	add	r3,r18,r6
  80a1d4:	88c7883a 	add	r3,r17,r3
  80a1d8:	7805883a 	mov	r2,r15
  80a1dc:	dc800217 	ldw	r18,8(sp)
  80a1e0:	dc400117 	ldw	r17,4(sp)
  80a1e4:	dc000017 	ldw	r16,0(sp)
  80a1e8:	dec00304 	addi	sp,sp,12
  80a1ec:	f800283a 	ret

0080a1f0 <__clzsi2>:
  80a1f0:	00bfffd4 	movui	r2,65535
  80a1f4:	11000e36 	bltu	r2,r4,80a230 <__clzsi2+0x40>
  80a1f8:	00803fc4 	movi	r2,255
  80a1fc:	01400204 	movi	r5,8
  80a200:	0007883a 	mov	r3,zero
  80a204:	11001036 	bltu	r2,r4,80a248 <__clzsi2+0x58>
  80a208:	000b883a 	mov	r5,zero
  80a20c:	20c6d83a 	srl	r3,r4,r3
  80a210:	00802074 	movhi	r2,129
  80a214:	10bbc204 	addi	r2,r2,-4344
  80a218:	1887883a 	add	r3,r3,r2
  80a21c:	18800003 	ldbu	r2,0(r3)
  80a220:	00c00804 	movi	r3,32
  80a224:	2885883a 	add	r2,r5,r2
  80a228:	1885c83a 	sub	r2,r3,r2
  80a22c:	f800283a 	ret
  80a230:	01400404 	movi	r5,16
  80a234:	00804034 	movhi	r2,256
  80a238:	10bfffc4 	addi	r2,r2,-1
  80a23c:	2807883a 	mov	r3,r5
  80a240:	113ff22e 	bgeu	r2,r4,80a20c <__clzsi2+0x1c>
  80a244:	01400604 	movi	r5,24
  80a248:	2807883a 	mov	r3,r5
  80a24c:	20c6d83a 	srl	r3,r4,r3
  80a250:	00802074 	movhi	r2,129
  80a254:	10bbc204 	addi	r2,r2,-4344
  80a258:	1887883a 	add	r3,r3,r2
  80a25c:	18800003 	ldbu	r2,0(r3)
  80a260:	00c00804 	movi	r3,32
  80a264:	2885883a 	add	r2,r5,r2
  80a268:	1885c83a 	sub	r2,r3,r2
  80a26c:	f800283a 	ret

0080a270 <__pack_d>:
  80a270:	20c00017 	ldw	r3,0(r4)
  80a274:	defffd04 	addi	sp,sp,-12
  80a278:	dc000015 	stw	r16,0(sp)
  80a27c:	dc800215 	stw	r18,8(sp)
  80a280:	dc400115 	stw	r17,4(sp)
  80a284:	00800044 	movi	r2,1
  80a288:	22000317 	ldw	r8,12(r4)
  80a28c:	001f883a 	mov	r15,zero
  80a290:	22400417 	ldw	r9,16(r4)
  80a294:	24000117 	ldw	r16,4(r4)
  80a298:	10c0552e 	bgeu	r2,r3,80a3f0 <__pack_d+0x180>
  80a29c:	00800104 	movi	r2,4
  80a2a0:	18804f26 	beq	r3,r2,80a3e0 <__pack_d+0x170>
  80a2a4:	00800084 	movi	r2,2
  80a2a8:	18800226 	beq	r3,r2,80a2b4 <__pack_d+0x44>
  80a2ac:	4244b03a 	or	r2,r8,r9
  80a2b0:	10001a1e 	bne	r2,zero,80a31c <__pack_d+0xac>
  80a2b4:	000d883a 	mov	r6,zero
  80a2b8:	000f883a 	mov	r7,zero
  80a2bc:	0011883a 	mov	r8,zero
  80a2c0:	00800434 	movhi	r2,16
  80a2c4:	10bfffc4 	addi	r2,r2,-1
  80a2c8:	301d883a 	mov	r14,r6
  80a2cc:	3884703a 	and	r2,r7,r2
  80a2d0:	400a953a 	slli	r5,r8,20
  80a2d4:	79bffc2c 	andhi	r6,r15,65520
  80a2d8:	308cb03a 	or	r6,r6,r2
  80a2dc:	00e00434 	movhi	r3,32784
  80a2e0:	18ffffc4 	addi	r3,r3,-1
  80a2e4:	800497fa 	slli	r2,r16,31
  80a2e8:	30c6703a 	and	r3,r6,r3
  80a2ec:	1946b03a 	or	r3,r3,r5
  80a2f0:	01600034 	movhi	r5,32768
  80a2f4:	297fffc4 	addi	r5,r5,-1
  80a2f8:	194a703a 	and	r5,r3,r5
  80a2fc:	288ab03a 	or	r5,r5,r2
  80a300:	2807883a 	mov	r3,r5
  80a304:	7005883a 	mov	r2,r14
  80a308:	dc800217 	ldw	r18,8(sp)
  80a30c:	dc400117 	ldw	r17,4(sp)
  80a310:	dc000017 	ldw	r16,0(sp)
  80a314:	dec00304 	addi	sp,sp,12
  80a318:	f800283a 	ret
  80a31c:	21000217 	ldw	r4,8(r4)
  80a320:	00bf0084 	movi	r2,-1022
  80a324:	20803f16 	blt	r4,r2,80a424 <__pack_d+0x1b4>
  80a328:	0080ffc4 	movi	r2,1023
  80a32c:	11002c16 	blt	r2,r4,80a3e0 <__pack_d+0x170>
  80a330:	00803fc4 	movi	r2,255
  80a334:	408c703a 	and	r6,r8,r2
  80a338:	00802004 	movi	r2,128
  80a33c:	0007883a 	mov	r3,zero
  80a340:	000f883a 	mov	r7,zero
  80a344:	2280ffc4 	addi	r10,r4,1023
  80a348:	30801e26 	beq	r6,r2,80a3c4 <__pack_d+0x154>
  80a34c:	00801fc4 	movi	r2,127
  80a350:	4089883a 	add	r4,r8,r2
  80a354:	220d803a 	cmpltu	r6,r4,r8
  80a358:	324d883a 	add	r6,r6,r9
  80a35c:	2011883a 	mov	r8,r4
  80a360:	3013883a 	mov	r9,r6
  80a364:	00880034 	movhi	r2,8192
  80a368:	10bfffc4 	addi	r2,r2,-1
  80a36c:	12400d36 	bltu	r2,r9,80a3a4 <__pack_d+0x134>
  80a370:	4804963a 	slli	r2,r9,24
  80a374:	400cd23a 	srli	r6,r8,8
  80a378:	480ed23a 	srli	r7,r9,8
  80a37c:	013fffc4 	movi	r4,-1
  80a380:	118cb03a 	or	r6,r2,r6
  80a384:	01400434 	movhi	r5,16
  80a388:	297fffc4 	addi	r5,r5,-1
  80a38c:	3104703a 	and	r2,r6,r4
  80a390:	3946703a 	and	r3,r7,r5
  80a394:	5201ffcc 	andi	r8,r10,2047
  80a398:	100d883a 	mov	r6,r2
  80a39c:	180f883a 	mov	r7,r3
  80a3a0:	003fc706 	br	80a2c0 <__pack_d+0x50>
  80a3a4:	480897fa 	slli	r4,r9,31
  80a3a8:	4004d07a 	srli	r2,r8,1
  80a3ac:	4806d07a 	srli	r3,r9,1
  80a3b0:	52800044 	addi	r10,r10,1
  80a3b4:	2084b03a 	or	r2,r4,r2
  80a3b8:	1011883a 	mov	r8,r2
  80a3bc:	1813883a 	mov	r9,r3
  80a3c0:	003feb06 	br	80a370 <__pack_d+0x100>
  80a3c4:	383fe11e 	bne	r7,zero,80a34c <__pack_d+0xdc>
  80a3c8:	01004004 	movi	r4,256
  80a3cc:	4104703a 	and	r2,r8,r4
  80a3d0:	10c4b03a 	or	r2,r2,r3
  80a3d4:	103fe326 	beq	r2,zero,80a364 <__pack_d+0xf4>
  80a3d8:	3005883a 	mov	r2,r6
  80a3dc:	003fdc06 	br	80a350 <__pack_d+0xe0>
  80a3e0:	000d883a 	mov	r6,zero
  80a3e4:	000f883a 	mov	r7,zero
  80a3e8:	0201ffc4 	movi	r8,2047
  80a3ec:	003fb406 	br	80a2c0 <__pack_d+0x50>
  80a3f0:	0005883a 	mov	r2,zero
  80a3f4:	00c00234 	movhi	r3,8
  80a3f8:	408cb03a 	or	r6,r8,r2
  80a3fc:	48ceb03a 	or	r7,r9,r3
  80a400:	013fffc4 	movi	r4,-1
  80a404:	01400434 	movhi	r5,16
  80a408:	297fffc4 	addi	r5,r5,-1
  80a40c:	3104703a 	and	r2,r6,r4
  80a410:	3946703a 	and	r3,r7,r5
  80a414:	100d883a 	mov	r6,r2
  80a418:	180f883a 	mov	r7,r3
  80a41c:	0201ffc4 	movi	r8,2047
  80a420:	003fa706 	br	80a2c0 <__pack_d+0x50>
  80a424:	1109c83a 	sub	r4,r2,r4
  80a428:	00800e04 	movi	r2,56
  80a42c:	11004316 	blt	r2,r4,80a53c <__pack_d+0x2cc>
  80a430:	21fff804 	addi	r7,r4,-32
  80a434:	38004516 	blt	r7,zero,80a54c <__pack_d+0x2dc>
  80a438:	49d8d83a 	srl	r12,r9,r7
  80a43c:	001b883a 	mov	r13,zero
  80a440:	0023883a 	mov	r17,zero
  80a444:	01400044 	movi	r5,1
  80a448:	0025883a 	mov	r18,zero
  80a44c:	38004716 	blt	r7,zero,80a56c <__pack_d+0x2fc>
  80a450:	29d6983a 	sll	r11,r5,r7
  80a454:	0015883a 	mov	r10,zero
  80a458:	00bfffc4 	movi	r2,-1
  80a45c:	5089883a 	add	r4,r10,r2
  80a460:	588b883a 	add	r5,r11,r2
  80a464:	228d803a 	cmpltu	r6,r4,r10
  80a468:	314b883a 	add	r5,r6,r5
  80a46c:	4104703a 	and	r2,r8,r4
  80a470:	4946703a 	and	r3,r9,r5
  80a474:	10c4b03a 	or	r2,r2,r3
  80a478:	10000226 	beq	r2,zero,80a484 <__pack_d+0x214>
  80a47c:	04400044 	movi	r17,1
  80a480:	0025883a 	mov	r18,zero
  80a484:	00803fc4 	movi	r2,255
  80a488:	644eb03a 	or	r7,r12,r17
  80a48c:	3892703a 	and	r9,r7,r2
  80a490:	00802004 	movi	r2,128
  80a494:	6c90b03a 	or	r8,r13,r18
  80a498:	0015883a 	mov	r10,zero
  80a49c:	48801626 	beq	r9,r2,80a4f8 <__pack_d+0x288>
  80a4a0:	01001fc4 	movi	r4,127
  80a4a4:	3905883a 	add	r2,r7,r4
  80a4a8:	11cd803a 	cmpltu	r6,r2,r7
  80a4ac:	320d883a 	add	r6,r6,r8
  80a4b0:	100f883a 	mov	r7,r2
  80a4b4:	00840034 	movhi	r2,4096
  80a4b8:	10bfffc4 	addi	r2,r2,-1
  80a4bc:	3011883a 	mov	r8,r6
  80a4c0:	0007883a 	mov	r3,zero
  80a4c4:	11801b36 	bltu	r2,r6,80a534 <__pack_d+0x2c4>
  80a4c8:	4004963a 	slli	r2,r8,24
  80a4cc:	3808d23a 	srli	r4,r7,8
  80a4d0:	400ad23a 	srli	r5,r8,8
  80a4d4:	1813883a 	mov	r9,r3
  80a4d8:	1108b03a 	or	r4,r2,r4
  80a4dc:	00bfffc4 	movi	r2,-1
  80a4e0:	00c00434 	movhi	r3,16
  80a4e4:	18ffffc4 	addi	r3,r3,-1
  80a4e8:	208c703a 	and	r6,r4,r2
  80a4ec:	28ce703a 	and	r7,r5,r3
  80a4f0:	4a01ffcc 	andi	r8,r9,2047
  80a4f4:	003f7206 	br	80a2c0 <__pack_d+0x50>
  80a4f8:	503fe91e 	bne	r10,zero,80a4a0 <__pack_d+0x230>
  80a4fc:	01004004 	movi	r4,256
  80a500:	3904703a 	and	r2,r7,r4
  80a504:	0007883a 	mov	r3,zero
  80a508:	10c4b03a 	or	r2,r2,r3
  80a50c:	10000626 	beq	r2,zero,80a528 <__pack_d+0x2b8>
  80a510:	3a45883a 	add	r2,r7,r9
  80a514:	11cd803a 	cmpltu	r6,r2,r7
  80a518:	320d883a 	add	r6,r6,r8
  80a51c:	100f883a 	mov	r7,r2
  80a520:	3011883a 	mov	r8,r6
  80a524:	0007883a 	mov	r3,zero
  80a528:	00840034 	movhi	r2,4096
  80a52c:	10bfffc4 	addi	r2,r2,-1
  80a530:	123fe52e 	bgeu	r2,r8,80a4c8 <__pack_d+0x258>
  80a534:	00c00044 	movi	r3,1
  80a538:	003fe306 	br	80a4c8 <__pack_d+0x258>
  80a53c:	0009883a 	mov	r4,zero
  80a540:	0013883a 	mov	r9,zero
  80a544:	000b883a 	mov	r5,zero
  80a548:	003fe406 	br	80a4dc <__pack_d+0x26c>
  80a54c:	4a47883a 	add	r3,r9,r9
  80a550:	008007c4 	movi	r2,31
  80a554:	1105c83a 	sub	r2,r2,r4
  80a558:	1886983a 	sll	r3,r3,r2
  80a55c:	4118d83a 	srl	r12,r8,r4
  80a560:	491ad83a 	srl	r13,r9,r4
  80a564:	1b18b03a 	or	r12,r3,r12
  80a568:	003fb506 	br	80a440 <__pack_d+0x1d0>
  80a56c:	2806d07a 	srli	r3,r5,1
  80a570:	008007c4 	movi	r2,31
  80a574:	1105c83a 	sub	r2,r2,r4
  80a578:	1896d83a 	srl	r11,r3,r2
  80a57c:	2914983a 	sll	r10,r5,r4
  80a580:	003fb506 	br	80a458 <__pack_d+0x1e8>

0080a584 <__unpack_d>:
  80a584:	20c00117 	ldw	r3,4(r4)
  80a588:	22400017 	ldw	r9,0(r4)
  80a58c:	00800434 	movhi	r2,16
  80a590:	10bfffc4 	addi	r2,r2,-1
  80a594:	1808d53a 	srli	r4,r3,20
  80a598:	180cd7fa 	srli	r6,r3,31
  80a59c:	1894703a 	and	r10,r3,r2
  80a5a0:	2201ffcc 	andi	r8,r4,2047
  80a5a4:	281b883a 	mov	r13,r5
  80a5a8:	4817883a 	mov	r11,r9
  80a5ac:	29800115 	stw	r6,4(r5)
  80a5b0:	5019883a 	mov	r12,r10
  80a5b4:	40001e1e 	bne	r8,zero,80a630 <__unpack_d+0xac>
  80a5b8:	4a84b03a 	or	r2,r9,r10
  80a5bc:	10001926 	beq	r2,zero,80a624 <__unpack_d+0xa0>
  80a5c0:	4804d63a 	srli	r2,r9,24
  80a5c4:	500c923a 	slli	r6,r10,8
  80a5c8:	013f0084 	movi	r4,-1022
  80a5cc:	00c40034 	movhi	r3,4096
  80a5d0:	18ffffc4 	addi	r3,r3,-1
  80a5d4:	118cb03a 	or	r6,r2,r6
  80a5d8:	008000c4 	movi	r2,3
  80a5dc:	480a923a 	slli	r5,r9,8
  80a5e0:	68800015 	stw	r2,0(r13)
  80a5e4:	69000215 	stw	r4,8(r13)
  80a5e8:	19800b36 	bltu	r3,r6,80a618 <__unpack_d+0x94>
  80a5ec:	200f883a 	mov	r7,r4
  80a5f0:	1811883a 	mov	r8,r3
  80a5f4:	2945883a 	add	r2,r5,r5
  80a5f8:	1149803a 	cmpltu	r4,r2,r5
  80a5fc:	3187883a 	add	r3,r6,r6
  80a600:	20c9883a 	add	r4,r4,r3
  80a604:	100b883a 	mov	r5,r2
  80a608:	200d883a 	mov	r6,r4
  80a60c:	39ffffc4 	addi	r7,r7,-1
  80a610:	413ff82e 	bgeu	r8,r4,80a5f4 <__unpack_d+0x70>
  80a614:	69c00215 	stw	r7,8(r13)
  80a618:	69800415 	stw	r6,16(r13)
  80a61c:	69400315 	stw	r5,12(r13)
  80a620:	f800283a 	ret
  80a624:	00800084 	movi	r2,2
  80a628:	28800015 	stw	r2,0(r5)
  80a62c:	f800283a 	ret
  80a630:	0081ffc4 	movi	r2,2047
  80a634:	40800f26 	beq	r8,r2,80a674 <__unpack_d+0xf0>
  80a638:	480cd63a 	srli	r6,r9,24
  80a63c:	5006923a 	slli	r3,r10,8
  80a640:	4804923a 	slli	r2,r9,8
  80a644:	0009883a 	mov	r4,zero
  80a648:	30c6b03a 	or	r3,r6,r3
  80a64c:	01440034 	movhi	r5,4096
  80a650:	110cb03a 	or	r6,r2,r4
  80a654:	423f0044 	addi	r8,r8,-1023
  80a658:	194eb03a 	or	r7,r3,r5
  80a65c:	008000c4 	movi	r2,3
  80a660:	69c00415 	stw	r7,16(r13)
  80a664:	6a000215 	stw	r8,8(r13)
  80a668:	68800015 	stw	r2,0(r13)
  80a66c:	69800315 	stw	r6,12(r13)
  80a670:	f800283a 	ret
  80a674:	4a84b03a 	or	r2,r9,r10
  80a678:	1000031e 	bne	r2,zero,80a688 <__unpack_d+0x104>
  80a67c:	00800104 	movi	r2,4
  80a680:	28800015 	stw	r2,0(r5)
  80a684:	f800283a 	ret
  80a688:	0009883a 	mov	r4,zero
  80a68c:	01400234 	movhi	r5,8
  80a690:	4904703a 	and	r2,r9,r4
  80a694:	5146703a 	and	r3,r10,r5
  80a698:	10c4b03a 	or	r2,r2,r3
  80a69c:	10000526 	beq	r2,zero,80a6b4 <__unpack_d+0x130>
  80a6a0:	00800044 	movi	r2,1
  80a6a4:	68800015 	stw	r2,0(r13)
  80a6a8:	6b000415 	stw	r12,16(r13)
  80a6ac:	6ac00315 	stw	r11,12(r13)
  80a6b0:	f800283a 	ret
  80a6b4:	68000015 	stw	zero,0(r13)
  80a6b8:	003ffb06 	br	80a6a8 <__unpack_d+0x124>

0080a6bc <__fpcmp_parts_d>:
  80a6bc:	21800017 	ldw	r6,0(r4)
  80a6c0:	00c00044 	movi	r3,1
  80a6c4:	19800a2e 	bgeu	r3,r6,80a6f0 <__fpcmp_parts_d+0x34>
  80a6c8:	28800017 	ldw	r2,0(r5)
  80a6cc:	1880082e 	bgeu	r3,r2,80a6f0 <__fpcmp_parts_d+0x34>
  80a6d0:	00c00104 	movi	r3,4
  80a6d4:	30c02626 	beq	r6,r3,80a770 <__fpcmp_parts_d+0xb4>
  80a6d8:	10c02226 	beq	r2,r3,80a764 <__fpcmp_parts_d+0xa8>
  80a6dc:	00c00084 	movi	r3,2
  80a6e0:	30c00526 	beq	r6,r3,80a6f8 <__fpcmp_parts_d+0x3c>
  80a6e4:	10c0071e 	bne	r2,r3,80a704 <__fpcmp_parts_d+0x48>
  80a6e8:	20800117 	ldw	r2,4(r4)
  80a6ec:	1000091e 	bne	r2,zero,80a714 <__fpcmp_parts_d+0x58>
  80a6f0:	00800044 	movi	r2,1
  80a6f4:	f800283a 	ret
  80a6f8:	10c01a1e 	bne	r2,r3,80a764 <__fpcmp_parts_d+0xa8>
  80a6fc:	0005883a 	mov	r2,zero
  80a700:	f800283a 	ret
  80a704:	22000117 	ldw	r8,4(r4)
  80a708:	28800117 	ldw	r2,4(r5)
  80a70c:	40800326 	beq	r8,r2,80a71c <__fpcmp_parts_d+0x60>
  80a710:	403ff726 	beq	r8,zero,80a6f0 <__fpcmp_parts_d+0x34>
  80a714:	00bfffc4 	movi	r2,-1
  80a718:	f800283a 	ret
  80a71c:	20c00217 	ldw	r3,8(r4)
  80a720:	28800217 	ldw	r2,8(r5)
  80a724:	10fffa16 	blt	r2,r3,80a710 <__fpcmp_parts_d+0x54>
  80a728:	18800916 	blt	r3,r2,80a750 <__fpcmp_parts_d+0x94>
  80a72c:	21c00417 	ldw	r7,16(r4)
  80a730:	28c00417 	ldw	r3,16(r5)
  80a734:	21800317 	ldw	r6,12(r4)
  80a738:	28800317 	ldw	r2,12(r5)
  80a73c:	19fff436 	bltu	r3,r7,80a710 <__fpcmp_parts_d+0x54>
  80a740:	38c00526 	beq	r7,r3,80a758 <__fpcmp_parts_d+0x9c>
  80a744:	38c00236 	bltu	r7,r3,80a750 <__fpcmp_parts_d+0x94>
  80a748:	19ffec1e 	bne	r3,r7,80a6fc <__fpcmp_parts_d+0x40>
  80a74c:	30bfeb2e 	bgeu	r6,r2,80a6fc <__fpcmp_parts_d+0x40>
  80a750:	403fe71e 	bne	r8,zero,80a6f0 <__fpcmp_parts_d+0x34>
  80a754:	003fef06 	br	80a714 <__fpcmp_parts_d+0x58>
  80a758:	11bffa2e 	bgeu	r2,r6,80a744 <__fpcmp_parts_d+0x88>
  80a75c:	403fe426 	beq	r8,zero,80a6f0 <__fpcmp_parts_d+0x34>
  80a760:	003fec06 	br	80a714 <__fpcmp_parts_d+0x58>
  80a764:	28800117 	ldw	r2,4(r5)
  80a768:	103fe11e 	bne	r2,zero,80a6f0 <__fpcmp_parts_d+0x34>
  80a76c:	003fe906 	br	80a714 <__fpcmp_parts_d+0x58>
  80a770:	11bfdd1e 	bne	r2,r6,80a6e8 <__fpcmp_parts_d+0x2c>
  80a774:	28c00117 	ldw	r3,4(r5)
  80a778:	20800117 	ldw	r2,4(r4)
  80a77c:	1885c83a 	sub	r2,r3,r2
  80a780:	f800283a 	ret

0080a784 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80a784:	defff404 	addi	sp,sp,-48
  80a788:	df000b15 	stw	fp,44(sp)
  80a78c:	df000b04 	addi	fp,sp,44
  80a790:	e13ffb15 	stw	r4,-20(fp)
  80a794:	e17ffc15 	stw	r5,-16(fp)
  80a798:	e1bffd15 	stw	r6,-12(fp)
  80a79c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80a7a0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80a7a4:	00802074 	movhi	r2,129
  80a7a8:	108b1204 	addi	r2,r2,11336
  80a7ac:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80a7b0:	1005003a 	cmpeq	r2,r2,zero
  80a7b4:	1000411e 	bne	r2,zero,80a8bc <alt_alarm_start+0x138>
  {
    if (alarm)
  80a7b8:	e0bffb17 	ldw	r2,-20(fp)
  80a7bc:	1005003a 	cmpeq	r2,r2,zero
  80a7c0:	10003b1e 	bne	r2,zero,80a8b0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80a7c4:	e0fffb17 	ldw	r3,-20(fp)
  80a7c8:	e0bffd17 	ldw	r2,-12(fp)
  80a7cc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80a7d0:	e0fffb17 	ldw	r3,-20(fp)
  80a7d4:	e0bffe17 	ldw	r2,-8(fp)
  80a7d8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a7dc:	0005303a 	rdctl	r2,status
  80a7e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a7e4:	e0fff817 	ldw	r3,-32(fp)
  80a7e8:	00bfff84 	movi	r2,-2
  80a7ec:	1884703a 	and	r2,r3,r2
  80a7f0:	1001703a 	wrctl	status,r2
  
  return context;
  80a7f4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80a7f8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80a7fc:	00802074 	movhi	r2,129
  80a800:	108b1304 	addi	r2,r2,11340
  80a804:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80a808:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80a80c:	e0fffc17 	ldw	r3,-16(fp)
  80a810:	e0bff917 	ldw	r2,-28(fp)
  80a814:	1885883a 	add	r2,r3,r2
  80a818:	10c00044 	addi	r3,r2,1
  80a81c:	e0bffb17 	ldw	r2,-20(fp)
  80a820:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80a824:	e0bffb17 	ldw	r2,-20(fp)
  80a828:	10c00217 	ldw	r3,8(r2)
  80a82c:	e0bff917 	ldw	r2,-28(fp)
  80a830:	1880042e 	bgeu	r3,r2,80a844 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80a834:	e0fffb17 	ldw	r3,-20(fp)
  80a838:	00800044 	movi	r2,1
  80a83c:	18800405 	stb	r2,16(r3)
  80a840:	00000206 	br	80a84c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80a844:	e0bffb17 	ldw	r2,-20(fp)
  80a848:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80a84c:	e0fffb17 	ldw	r3,-20(fp)
  80a850:	00802074 	movhi	r2,129
  80a854:	1083d404 	addi	r2,r2,3920
  80a858:	e0bff615 	stw	r2,-40(fp)
  80a85c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80a860:	e0fff717 	ldw	r3,-36(fp)
  80a864:	e0bff617 	ldw	r2,-40(fp)
  80a868:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80a86c:	e0bff617 	ldw	r2,-40(fp)
  80a870:	10c00017 	ldw	r3,0(r2)
  80a874:	e0bff717 	ldw	r2,-36(fp)
  80a878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80a87c:	e0bff617 	ldw	r2,-40(fp)
  80a880:	10c00017 	ldw	r3,0(r2)
  80a884:	e0bff717 	ldw	r2,-36(fp)
  80a888:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80a88c:	e0fff617 	ldw	r3,-40(fp)
  80a890:	e0bff717 	ldw	r2,-36(fp)
  80a894:	18800015 	stw	r2,0(r3)
  80a898:	e0bffa17 	ldw	r2,-24(fp)
  80a89c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a8a0:	e0bff517 	ldw	r2,-44(fp)
  80a8a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80a8a8:	e03fff15 	stw	zero,-4(fp)
  80a8ac:	00000506 	br	80a8c4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80a8b0:	00bffa84 	movi	r2,-22
  80a8b4:	e0bfff15 	stw	r2,-4(fp)
  80a8b8:	00000206 	br	80a8c4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80a8bc:	00bfde84 	movi	r2,-134
  80a8c0:	e0bfff15 	stw	r2,-4(fp)
  80a8c4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80a8c8:	e037883a 	mov	sp,fp
  80a8cc:	df000017 	ldw	fp,0(sp)
  80a8d0:	dec00104 	addi	sp,sp,4
  80a8d4:	f800283a 	ret

0080a8d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a8d8:	defff804 	addi	sp,sp,-32
  80a8dc:	dfc00715 	stw	ra,28(sp)
  80a8e0:	df000615 	stw	fp,24(sp)
  80a8e4:	df000604 	addi	fp,sp,24
  80a8e8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a8ec:	e0bffc17 	ldw	r2,-16(fp)
  80a8f0:	1004803a 	cmplt	r2,r2,zero
  80a8f4:	1000081e 	bne	r2,zero,80a918 <close+0x40>
  80a8f8:	e0bffc17 	ldw	r2,-16(fp)
  80a8fc:	10800324 	muli	r2,r2,12
  80a900:	1007883a 	mov	r3,r2
  80a904:	00802074 	movhi	r2,129
  80a908:	10bed404 	addi	r2,r2,-1200
  80a90c:	1887883a 	add	r3,r3,r2
  80a910:	e0ffff15 	stw	r3,-4(fp)
  80a914:	00000106 	br	80a91c <close+0x44>
  80a918:	e03fff15 	stw	zero,-4(fp)
  80a91c:	e0bfff17 	ldw	r2,-4(fp)
  80a920:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a924:	e0bffb17 	ldw	r2,-20(fp)
  80a928:	1005003a 	cmpeq	r2,r2,zero
  80a92c:	10001d1e 	bne	r2,zero,80a9a4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a930:	e0bffb17 	ldw	r2,-20(fp)
  80a934:	10800017 	ldw	r2,0(r2)
  80a938:	10800417 	ldw	r2,16(r2)
  80a93c:	1005003a 	cmpeq	r2,r2,zero
  80a940:	1000071e 	bne	r2,zero,80a960 <close+0x88>
  80a944:	e0bffb17 	ldw	r2,-20(fp)
  80a948:	10800017 	ldw	r2,0(r2)
  80a94c:	10800417 	ldw	r2,16(r2)
  80a950:	e13ffb17 	ldw	r4,-20(fp)
  80a954:	103ee83a 	callr	r2
  80a958:	e0bffe15 	stw	r2,-8(fp)
  80a95c:	00000106 	br	80a964 <close+0x8c>
  80a960:	e03ffe15 	stw	zero,-8(fp)
  80a964:	e0bffe17 	ldw	r2,-8(fp)
  80a968:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a96c:	e13ffc17 	ldw	r4,-16(fp)
  80a970:	080b3e00 	call	80b3e0 <alt_release_fd>
    if (rval < 0)
  80a974:	e0bffa17 	ldw	r2,-24(fp)
  80a978:	1004403a 	cmpge	r2,r2,zero
  80a97c:	1000071e 	bne	r2,zero,80a99c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  80a980:	080a9d40 	call	80a9d4 <alt_get_errno>
  80a984:	e0fffa17 	ldw	r3,-24(fp)
  80a988:	00c7c83a 	sub	r3,zero,r3
  80a98c:	10c00015 	stw	r3,0(r2)
      return -1;
  80a990:	00bfffc4 	movi	r2,-1
  80a994:	e0bffd15 	stw	r2,-12(fp)
  80a998:	00000806 	br	80a9bc <close+0xe4>
    }
    return 0;
  80a99c:	e03ffd15 	stw	zero,-12(fp)
  80a9a0:	00000606 	br	80a9bc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a9a4:	080a9d40 	call	80a9d4 <alt_get_errno>
  80a9a8:	1007883a 	mov	r3,r2
  80a9ac:	00801444 	movi	r2,81
  80a9b0:	18800015 	stw	r2,0(r3)
    return -1;
  80a9b4:	00bfffc4 	movi	r2,-1
  80a9b8:	e0bffd15 	stw	r2,-12(fp)
  80a9bc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a9c0:	e037883a 	mov	sp,fp
  80a9c4:	dfc00117 	ldw	ra,4(sp)
  80a9c8:	df000017 	ldw	fp,0(sp)
  80a9cc:	dec00204 	addi	sp,sp,8
  80a9d0:	f800283a 	ret

0080a9d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a9d4:	defffd04 	addi	sp,sp,-12
  80a9d8:	dfc00215 	stw	ra,8(sp)
  80a9dc:	df000115 	stw	fp,4(sp)
  80a9e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a9e4:	00802074 	movhi	r2,129
  80a9e8:	1083d204 	addi	r2,r2,3912
  80a9ec:	10800017 	ldw	r2,0(r2)
  80a9f0:	1005003a 	cmpeq	r2,r2,zero
  80a9f4:	1000061e 	bne	r2,zero,80aa10 <alt_get_errno+0x3c>
  80a9f8:	00802074 	movhi	r2,129
  80a9fc:	1083d204 	addi	r2,r2,3912
  80aa00:	10800017 	ldw	r2,0(r2)
  80aa04:	103ee83a 	callr	r2
  80aa08:	e0bfff15 	stw	r2,-4(fp)
  80aa0c:	00000306 	br	80aa1c <alt_get_errno+0x48>
  80aa10:	00802074 	movhi	r2,129
  80aa14:	108b0804 	addi	r2,r2,11296
  80aa18:	e0bfff15 	stw	r2,-4(fp)
  80aa1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa20:	e037883a 	mov	sp,fp
  80aa24:	dfc00117 	ldw	ra,4(sp)
  80aa28:	df000017 	ldw	fp,0(sp)
  80aa2c:	dec00204 	addi	sp,sp,8
  80aa30:	f800283a 	ret

0080aa34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80aa34:	defffc04 	addi	sp,sp,-16
  80aa38:	df000315 	stw	fp,12(sp)
  80aa3c:	df000304 	addi	fp,sp,12
  80aa40:	e13ffd15 	stw	r4,-12(fp)
  80aa44:	e17ffe15 	stw	r5,-8(fp)
  80aa48:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80aa4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa50:	e037883a 	mov	sp,fp
  80aa54:	df000017 	ldw	fp,0(sp)
  80aa58:	dec00104 	addi	sp,sp,4
  80aa5c:	f800283a 	ret

0080aa60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80aa60:	defff904 	addi	sp,sp,-28
  80aa64:	dfc00615 	stw	ra,24(sp)
  80aa68:	df000515 	stw	fp,20(sp)
  80aa6c:	df000504 	addi	fp,sp,20
  80aa70:	e13ffc15 	stw	r4,-16(fp)
  80aa74:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aa78:	e0bffc17 	ldw	r2,-16(fp)
  80aa7c:	1004803a 	cmplt	r2,r2,zero
  80aa80:	1000081e 	bne	r2,zero,80aaa4 <fstat+0x44>
  80aa84:	e0bffc17 	ldw	r2,-16(fp)
  80aa88:	10800324 	muli	r2,r2,12
  80aa8c:	1007883a 	mov	r3,r2
  80aa90:	00802074 	movhi	r2,129
  80aa94:	10bed404 	addi	r2,r2,-1200
  80aa98:	1887883a 	add	r3,r3,r2
  80aa9c:	e0ffff15 	stw	r3,-4(fp)
  80aaa0:	00000106 	br	80aaa8 <fstat+0x48>
  80aaa4:	e03fff15 	stw	zero,-4(fp)
  80aaa8:	e0bfff17 	ldw	r2,-4(fp)
  80aaac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80aab0:	e0bffb17 	ldw	r2,-20(fp)
  80aab4:	1005003a 	cmpeq	r2,r2,zero
  80aab8:	1000121e 	bne	r2,zero,80ab04 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80aabc:	e0bffb17 	ldw	r2,-20(fp)
  80aac0:	10800017 	ldw	r2,0(r2)
  80aac4:	10800817 	ldw	r2,32(r2)
  80aac8:	1005003a 	cmpeq	r2,r2,zero
  80aacc:	1000081e 	bne	r2,zero,80aaf0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  80aad0:	e0bffb17 	ldw	r2,-20(fp)
  80aad4:	10800017 	ldw	r2,0(r2)
  80aad8:	10800817 	ldw	r2,32(r2)
  80aadc:	e13ffb17 	ldw	r4,-20(fp)
  80aae0:	e17ffd17 	ldw	r5,-12(fp)
  80aae4:	103ee83a 	callr	r2
  80aae8:	e0bffe15 	stw	r2,-8(fp)
  80aaec:	00000b06 	br	80ab1c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80aaf0:	e0fffd17 	ldw	r3,-12(fp)
  80aaf4:	00880004 	movi	r2,8192
  80aaf8:	18800115 	stw	r2,4(r3)
      return 0;
  80aafc:	e03ffe15 	stw	zero,-8(fp)
  80ab00:	00000606 	br	80ab1c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ab04:	080ab340 	call	80ab34 <alt_get_errno>
  80ab08:	1007883a 	mov	r3,r2
  80ab0c:	00801444 	movi	r2,81
  80ab10:	18800015 	stw	r2,0(r3)
    return -1;
  80ab14:	00bfffc4 	movi	r2,-1
  80ab18:	e0bffe15 	stw	r2,-8(fp)
  80ab1c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ab20:	e037883a 	mov	sp,fp
  80ab24:	dfc00117 	ldw	ra,4(sp)
  80ab28:	df000017 	ldw	fp,0(sp)
  80ab2c:	dec00204 	addi	sp,sp,8
  80ab30:	f800283a 	ret

0080ab34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ab34:	defffd04 	addi	sp,sp,-12
  80ab38:	dfc00215 	stw	ra,8(sp)
  80ab3c:	df000115 	stw	fp,4(sp)
  80ab40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ab44:	00802074 	movhi	r2,129
  80ab48:	1083d204 	addi	r2,r2,3912
  80ab4c:	10800017 	ldw	r2,0(r2)
  80ab50:	1005003a 	cmpeq	r2,r2,zero
  80ab54:	1000061e 	bne	r2,zero,80ab70 <alt_get_errno+0x3c>
  80ab58:	00802074 	movhi	r2,129
  80ab5c:	1083d204 	addi	r2,r2,3912
  80ab60:	10800017 	ldw	r2,0(r2)
  80ab64:	103ee83a 	callr	r2
  80ab68:	e0bfff15 	stw	r2,-4(fp)
  80ab6c:	00000306 	br	80ab7c <alt_get_errno+0x48>
  80ab70:	00802074 	movhi	r2,129
  80ab74:	108b0804 	addi	r2,r2,11296
  80ab78:	e0bfff15 	stw	r2,-4(fp)
  80ab7c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ab80:	e037883a 	mov	sp,fp
  80ab84:	dfc00117 	ldw	ra,4(sp)
  80ab88:	df000017 	ldw	fp,0(sp)
  80ab8c:	dec00204 	addi	sp,sp,8
  80ab90:	f800283a 	ret

0080ab94 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80ab94:	deffeb04 	addi	sp,sp,-84
  80ab98:	dfc01415 	stw	ra,80(sp)
  80ab9c:	df001315 	stw	fp,76(sp)
  80aba0:	df001304 	addi	fp,sp,76
  80aba4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80aba8:	e0bffd17 	ldw	r2,-12(fp)
  80abac:	1004803a 	cmplt	r2,r2,zero
  80abb0:	1000081e 	bne	r2,zero,80abd4 <isatty+0x40>
  80abb4:	e0bffd17 	ldw	r2,-12(fp)
  80abb8:	10800324 	muli	r2,r2,12
  80abbc:	1007883a 	mov	r3,r2
  80abc0:	00802074 	movhi	r2,129
  80abc4:	10bed404 	addi	r2,r2,-1200
  80abc8:	1887883a 	add	r3,r3,r2
  80abcc:	e0ffff15 	stw	r3,-4(fp)
  80abd0:	00000106 	br	80abd8 <isatty+0x44>
  80abd4:	e03fff15 	stw	zero,-4(fp)
  80abd8:	e0bfff17 	ldw	r2,-4(fp)
  80abdc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80abe0:	e0bfed17 	ldw	r2,-76(fp)
  80abe4:	1005003a 	cmpeq	r2,r2,zero
  80abe8:	10000f1e 	bne	r2,zero,80ac28 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80abec:	e0bfed17 	ldw	r2,-76(fp)
  80abf0:	10800017 	ldw	r2,0(r2)
  80abf4:	10800817 	ldw	r2,32(r2)
  80abf8:	1004c03a 	cmpne	r2,r2,zero
  80abfc:	1000031e 	bne	r2,zero,80ac0c <isatty+0x78>
    {
      return 1;
  80ac00:	00800044 	movi	r2,1
  80ac04:	e0bffe15 	stw	r2,-8(fp)
  80ac08:	00000c06 	br	80ac3c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80ac0c:	e17fee04 	addi	r5,fp,-72
  80ac10:	e13ffd17 	ldw	r4,-12(fp)
  80ac14:	080aa600 	call	80aa60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80ac18:	e0bfef17 	ldw	r2,-68(fp)
  80ac1c:	10880020 	cmpeqi	r2,r2,8192
  80ac20:	e0bffe15 	stw	r2,-8(fp)
  80ac24:	00000506 	br	80ac3c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ac28:	080ac540 	call	80ac54 <alt_get_errno>
  80ac2c:	1007883a 	mov	r3,r2
  80ac30:	00801444 	movi	r2,81
  80ac34:	18800015 	stw	r2,0(r3)
    return 0;
  80ac38:	e03ffe15 	stw	zero,-8(fp)
  80ac3c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80ac40:	e037883a 	mov	sp,fp
  80ac44:	dfc00117 	ldw	ra,4(sp)
  80ac48:	df000017 	ldw	fp,0(sp)
  80ac4c:	dec00204 	addi	sp,sp,8
  80ac50:	f800283a 	ret

0080ac54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ac54:	defffd04 	addi	sp,sp,-12
  80ac58:	dfc00215 	stw	ra,8(sp)
  80ac5c:	df000115 	stw	fp,4(sp)
  80ac60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ac64:	00802074 	movhi	r2,129
  80ac68:	1083d204 	addi	r2,r2,3912
  80ac6c:	10800017 	ldw	r2,0(r2)
  80ac70:	1005003a 	cmpeq	r2,r2,zero
  80ac74:	1000061e 	bne	r2,zero,80ac90 <alt_get_errno+0x3c>
  80ac78:	00802074 	movhi	r2,129
  80ac7c:	1083d204 	addi	r2,r2,3912
  80ac80:	10800017 	ldw	r2,0(r2)
  80ac84:	103ee83a 	callr	r2
  80ac88:	e0bfff15 	stw	r2,-4(fp)
  80ac8c:	00000306 	br	80ac9c <alt_get_errno+0x48>
  80ac90:	00802074 	movhi	r2,129
  80ac94:	108b0804 	addi	r2,r2,11296
  80ac98:	e0bfff15 	stw	r2,-4(fp)
  80ac9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80aca0:	e037883a 	mov	sp,fp
  80aca4:	dfc00117 	ldw	ra,4(sp)
  80aca8:	df000017 	ldw	fp,0(sp)
  80acac:	dec00204 	addi	sp,sp,8
  80acb0:	f800283a 	ret

0080acb4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80acb4:	defffe04 	addi	sp,sp,-8
  80acb8:	dfc00115 	stw	ra,4(sp)
  80acbc:	df000015 	stw	fp,0(sp)
  80acc0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80acc4:	01002074 	movhi	r4,129
  80acc8:	2103d904 	addi	r4,r4,3940
  80accc:	01402074 	movhi	r5,129
  80acd0:	297cb404 	addi	r5,r5,-3376
  80acd4:	01802074 	movhi	r6,129
  80acd8:	3183d904 	addi	r6,r6,3940
  80acdc:	080ad340 	call	80ad34 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ace0:	01002034 	movhi	r4,128
  80ace4:	21000804 	addi	r4,r4,32
  80ace8:	01402034 	movhi	r5,128
  80acec:	29400804 	addi	r5,r5,32
  80acf0:	01802034 	movhi	r6,128
  80acf4:	31806d04 	addi	r6,r6,436
  80acf8:	080ad340 	call	80ad34 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80acfc:	01002074 	movhi	r4,129
  80ad00:	213b2e04 	addi	r4,r4,-4936
  80ad04:	01402074 	movhi	r5,129
  80ad08:	297b2e04 	addi	r5,r5,-4936
  80ad0c:	01802074 	movhi	r6,129
  80ad10:	31bcb404 	addi	r6,r6,-3376
  80ad14:	080ad340 	call	80ad34 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ad18:	080ddbc0 	call	80ddbc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ad1c:	080e2480 	call	80e248 <alt_icache_flush_all>
}
  80ad20:	e037883a 	mov	sp,fp
  80ad24:	dfc00117 	ldw	ra,4(sp)
  80ad28:	df000017 	ldw	fp,0(sp)
  80ad2c:	dec00204 	addi	sp,sp,8
  80ad30:	f800283a 	ret

0080ad34 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ad34:	defffc04 	addi	sp,sp,-16
  80ad38:	df000315 	stw	fp,12(sp)
  80ad3c:	df000304 	addi	fp,sp,12
  80ad40:	e13ffd15 	stw	r4,-12(fp)
  80ad44:	e17ffe15 	stw	r5,-8(fp)
  80ad48:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ad4c:	e0fffe17 	ldw	r3,-8(fp)
  80ad50:	e0bffd17 	ldw	r2,-12(fp)
  80ad54:	18800e26 	beq	r3,r2,80ad90 <alt_load_section+0x5c>
  {
    while( to != end )
  80ad58:	00000a06 	br	80ad84 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80ad5c:	e0bffd17 	ldw	r2,-12(fp)
  80ad60:	10c00017 	ldw	r3,0(r2)
  80ad64:	e0bffe17 	ldw	r2,-8(fp)
  80ad68:	10c00015 	stw	r3,0(r2)
  80ad6c:	e0bffe17 	ldw	r2,-8(fp)
  80ad70:	10800104 	addi	r2,r2,4
  80ad74:	e0bffe15 	stw	r2,-8(fp)
  80ad78:	e0bffd17 	ldw	r2,-12(fp)
  80ad7c:	10800104 	addi	r2,r2,4
  80ad80:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ad84:	e0fffe17 	ldw	r3,-8(fp)
  80ad88:	e0bfff17 	ldw	r2,-4(fp)
  80ad8c:	18bff31e 	bne	r3,r2,80ad5c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80ad90:	e037883a 	mov	sp,fp
  80ad94:	df000017 	ldw	fp,0(sp)
  80ad98:	dec00104 	addi	sp,sp,4
  80ad9c:	f800283a 	ret

0080ada0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ada0:	defff804 	addi	sp,sp,-32
  80ada4:	dfc00715 	stw	ra,28(sp)
  80ada8:	df000615 	stw	fp,24(sp)
  80adac:	df000604 	addi	fp,sp,24
  80adb0:	e13ffc15 	stw	r4,-16(fp)
  80adb4:	e17ffd15 	stw	r5,-12(fp)
  80adb8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80adbc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80adc0:	e0bffc17 	ldw	r2,-16(fp)
  80adc4:	1004803a 	cmplt	r2,r2,zero
  80adc8:	1000081e 	bne	r2,zero,80adec <lseek+0x4c>
  80adcc:	e0bffc17 	ldw	r2,-16(fp)
  80add0:	10800324 	muli	r2,r2,12
  80add4:	1007883a 	mov	r3,r2
  80add8:	00802074 	movhi	r2,129
  80addc:	10bed404 	addi	r2,r2,-1200
  80ade0:	1887883a 	add	r3,r3,r2
  80ade4:	e0ffff15 	stw	r3,-4(fp)
  80ade8:	00000106 	br	80adf0 <lseek+0x50>
  80adec:	e03fff15 	stw	zero,-4(fp)
  80adf0:	e0bfff17 	ldw	r2,-4(fp)
  80adf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80adf8:	e0bffb17 	ldw	r2,-20(fp)
  80adfc:	1005003a 	cmpeq	r2,r2,zero
  80ae00:	1000111e 	bne	r2,zero,80ae48 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ae04:	e0bffb17 	ldw	r2,-20(fp)
  80ae08:	10800017 	ldw	r2,0(r2)
  80ae0c:	10800717 	ldw	r2,28(r2)
  80ae10:	1005003a 	cmpeq	r2,r2,zero
  80ae14:	1000091e 	bne	r2,zero,80ae3c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ae18:	e0bffb17 	ldw	r2,-20(fp)
  80ae1c:	10800017 	ldw	r2,0(r2)
  80ae20:	10800717 	ldw	r2,28(r2)
  80ae24:	e13ffb17 	ldw	r4,-20(fp)
  80ae28:	e17ffd17 	ldw	r5,-12(fp)
  80ae2c:	e1bffe17 	ldw	r6,-8(fp)
  80ae30:	103ee83a 	callr	r2
  80ae34:	e0bffa15 	stw	r2,-24(fp)
  80ae38:	00000506 	br	80ae50 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ae3c:	00bfde84 	movi	r2,-134
  80ae40:	e0bffa15 	stw	r2,-24(fp)
  80ae44:	00000206 	br	80ae50 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ae48:	00bfebc4 	movi	r2,-81
  80ae4c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80ae50:	e0bffa17 	ldw	r2,-24(fp)
  80ae54:	1004403a 	cmpge	r2,r2,zero
  80ae58:	1000071e 	bne	r2,zero,80ae78 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80ae5c:	080ae900 	call	80ae90 <alt_get_errno>
  80ae60:	1007883a 	mov	r3,r2
  80ae64:	e0bffa17 	ldw	r2,-24(fp)
  80ae68:	0085c83a 	sub	r2,zero,r2
  80ae6c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ae70:	00bfffc4 	movi	r2,-1
  80ae74:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80ae78:	e0bffa17 	ldw	r2,-24(fp)
}
  80ae7c:	e037883a 	mov	sp,fp
  80ae80:	dfc00117 	ldw	ra,4(sp)
  80ae84:	df000017 	ldw	fp,0(sp)
  80ae88:	dec00204 	addi	sp,sp,8
  80ae8c:	f800283a 	ret

0080ae90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ae90:	defffd04 	addi	sp,sp,-12
  80ae94:	dfc00215 	stw	ra,8(sp)
  80ae98:	df000115 	stw	fp,4(sp)
  80ae9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80aea0:	00802074 	movhi	r2,129
  80aea4:	1083d204 	addi	r2,r2,3912
  80aea8:	10800017 	ldw	r2,0(r2)
  80aeac:	1005003a 	cmpeq	r2,r2,zero
  80aeb0:	1000061e 	bne	r2,zero,80aecc <alt_get_errno+0x3c>
  80aeb4:	00802074 	movhi	r2,129
  80aeb8:	1083d204 	addi	r2,r2,3912
  80aebc:	10800017 	ldw	r2,0(r2)
  80aec0:	103ee83a 	callr	r2
  80aec4:	e0bfff15 	stw	r2,-4(fp)
  80aec8:	00000306 	br	80aed8 <alt_get_errno+0x48>
  80aecc:	00802074 	movhi	r2,129
  80aed0:	108b0804 	addi	r2,r2,11296
  80aed4:	e0bfff15 	stw	r2,-4(fp)
  80aed8:	e0bfff17 	ldw	r2,-4(fp)
}
  80aedc:	e037883a 	mov	sp,fp
  80aee0:	dfc00117 	ldw	ra,4(sp)
  80aee4:	df000017 	ldw	fp,0(sp)
  80aee8:	dec00204 	addi	sp,sp,8
  80aeec:	f800283a 	ret

0080aef0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80aef0:	defffd04 	addi	sp,sp,-12
  80aef4:	dfc00215 	stw	ra,8(sp)
  80aef8:	df000115 	stw	fp,4(sp)
  80aefc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80af00:	0009883a 	mov	r4,zero
  80af04:	080b8200 	call	80b820 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80af08:	080b8540 	call	80b854 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80af0c:	01002074 	movhi	r4,129
  80af10:	213c0504 	addi	r4,r4,-4076
  80af14:	01402074 	movhi	r5,129
  80af18:	297c0504 	addi	r5,r5,-4076
  80af1c:	01802074 	movhi	r6,129
  80af20:	31bc0504 	addi	r6,r6,-4076
  80af24:	080e6080 	call	80e608 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80af28:	080df140 	call	80df14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80af2c:	01002074 	movhi	r4,129
  80af30:	2137de04 	addi	r4,r4,-8328
  80af34:	080e8ac0 	call	80e8ac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80af38:	d1274a17 	ldw	r4,-25304(gp)
  80af3c:	d1674b17 	ldw	r5,-25300(gp)
  80af40:	d1a74c17 	ldw	r6,-25296(gp)
  80af44:	08007480 	call	800748 <main>
  80af48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80af4c:	01000044 	movi	r4,1
  80af50:	080a8d80 	call	80a8d8 <close>
  exit (result);
  80af54:	e13fff17 	ldw	r4,-4(fp)
  80af58:	080e8c00 	call	80e8c0 <exit>

0080af5c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80af5c:	defffe04 	addi	sp,sp,-8
  80af60:	df000115 	stw	fp,4(sp)
  80af64:	df000104 	addi	fp,sp,4
  80af68:	e13fff15 	stw	r4,-4(fp)
}
  80af6c:	e037883a 	mov	sp,fp
  80af70:	df000017 	ldw	fp,0(sp)
  80af74:	dec00104 	addi	sp,sp,4
  80af78:	f800283a 	ret

0080af7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80af7c:	defffe04 	addi	sp,sp,-8
  80af80:	df000115 	stw	fp,4(sp)
  80af84:	df000104 	addi	fp,sp,4
  80af88:	e13fff15 	stw	r4,-4(fp)
}
  80af8c:	e037883a 	mov	sp,fp
  80af90:	df000017 	ldw	fp,0(sp)
  80af94:	dec00104 	addi	sp,sp,4
  80af98:	f800283a 	ret

0080af9c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80af9c:	defffc04 	addi	sp,sp,-16
  80afa0:	df000315 	stw	fp,12(sp)
  80afa4:	df000304 	addi	fp,sp,12
  80afa8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80afac:	e0bffe17 	ldw	r2,-8(fp)
  80afb0:	10800217 	ldw	r2,8(r2)
  80afb4:	10d00034 	orhi	r3,r2,16384
  80afb8:	e0bffe17 	ldw	r2,-8(fp)
  80afbc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80afc0:	e03ffd15 	stw	zero,-12(fp)
  80afc4:	00002006 	br	80b048 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80afc8:	e0bffd17 	ldw	r2,-12(fp)
  80afcc:	00c02074 	movhi	r3,129
  80afd0:	18fed404 	addi	r3,r3,-1200
  80afd4:	10800324 	muli	r2,r2,12
  80afd8:	10c5883a 	add	r2,r2,r3
  80afdc:	10c00017 	ldw	r3,0(r2)
  80afe0:	e0bffe17 	ldw	r2,-8(fp)
  80afe4:	10800017 	ldw	r2,0(r2)
  80afe8:	1880141e 	bne	r3,r2,80b03c <alt_file_locked+0xa0>
  80afec:	e0bffd17 	ldw	r2,-12(fp)
  80aff0:	00c02074 	movhi	r3,129
  80aff4:	18fed404 	addi	r3,r3,-1200
  80aff8:	10800324 	muli	r2,r2,12
  80affc:	10c5883a 	add	r2,r2,r3
  80b000:	10800204 	addi	r2,r2,8
  80b004:	10800017 	ldw	r2,0(r2)
  80b008:	1004403a 	cmpge	r2,r2,zero
  80b00c:	10000b1e 	bne	r2,zero,80b03c <alt_file_locked+0xa0>
  80b010:	e0bffd17 	ldw	r2,-12(fp)
  80b014:	10800324 	muli	r2,r2,12
  80b018:	1007883a 	mov	r3,r2
  80b01c:	00802074 	movhi	r2,129
  80b020:	10bed404 	addi	r2,r2,-1200
  80b024:	1887883a 	add	r3,r3,r2
  80b028:	e0bffe17 	ldw	r2,-8(fp)
  80b02c:	18800326 	beq	r3,r2,80b03c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80b030:	00bffcc4 	movi	r2,-13
  80b034:	e0bfff15 	stw	r2,-4(fp)
  80b038:	00000a06 	br	80b064 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80b03c:	e0bffd17 	ldw	r2,-12(fp)
  80b040:	10800044 	addi	r2,r2,1
  80b044:	e0bffd15 	stw	r2,-12(fp)
  80b048:	00802074 	movhi	r2,129
  80b04c:	1083d104 	addi	r2,r2,3908
  80b050:	10800017 	ldw	r2,0(r2)
  80b054:	1007883a 	mov	r3,r2
  80b058:	e0bffd17 	ldw	r2,-12(fp)
  80b05c:	18bfda2e 	bgeu	r3,r2,80afc8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80b060:	e03fff15 	stw	zero,-4(fp)
  80b064:	e0bfff17 	ldw	r2,-4(fp)
}
  80b068:	e037883a 	mov	sp,fp
  80b06c:	df000017 	ldw	fp,0(sp)
  80b070:	dec00104 	addi	sp,sp,4
  80b074:	f800283a 	ret

0080b078 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80b078:	defff404 	addi	sp,sp,-48
  80b07c:	dfc00b15 	stw	ra,44(sp)
  80b080:	df000a15 	stw	fp,40(sp)
  80b084:	df000a04 	addi	fp,sp,40
  80b088:	e13ffb15 	stw	r4,-20(fp)
  80b08c:	e17ffc15 	stw	r5,-16(fp)
  80b090:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80b094:	00bfffc4 	movi	r2,-1
  80b098:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80b09c:	00bffb44 	movi	r2,-19
  80b0a0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80b0a4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80b0a8:	e13ffb17 	ldw	r4,-20(fp)
  80b0ac:	01402074 	movhi	r5,129
  80b0b0:	2943cf04 	addi	r5,r5,3900
  80b0b4:	080dfdc0 	call	80dfdc <alt_find_dev>
  80b0b8:	e0bffa15 	stw	r2,-24(fp)
  80b0bc:	e0bffa17 	ldw	r2,-24(fp)
  80b0c0:	1004c03a 	cmpne	r2,r2,zero
  80b0c4:	1000051e 	bne	r2,zero,80b0dc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80b0c8:	e13ffb17 	ldw	r4,-20(fp)
  80b0cc:	080e0700 	call	80e070 <alt_find_file>
  80b0d0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80b0d4:	00800044 	movi	r2,1
  80b0d8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80b0dc:	e0bffa17 	ldw	r2,-24(fp)
  80b0e0:	1005003a 	cmpeq	r2,r2,zero
  80b0e4:	1000301e 	bne	r2,zero,80b1a8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80b0e8:	e13ffa17 	ldw	r4,-24(fp)
  80b0ec:	080e1900 	call	80e190 <alt_get_fd>
  80b0f0:	e0bff815 	stw	r2,-32(fp)
  80b0f4:	e0bff817 	ldw	r2,-32(fp)
  80b0f8:	1004403a 	cmpge	r2,r2,zero
  80b0fc:	1000031e 	bne	r2,zero,80b10c <open+0x94>
    {
      status = index;
  80b100:	e0bff817 	ldw	r2,-32(fp)
  80b104:	e0bff715 	stw	r2,-36(fp)
  80b108:	00002906 	br	80b1b0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  80b10c:	e0bff817 	ldw	r2,-32(fp)
  80b110:	10800324 	muli	r2,r2,12
  80b114:	1007883a 	mov	r3,r2
  80b118:	00802074 	movhi	r2,129
  80b11c:	10bed404 	addi	r2,r2,-1200
  80b120:	1885883a 	add	r2,r3,r2
  80b124:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80b128:	e0fffc17 	ldw	r3,-16(fp)
  80b12c:	00900034 	movhi	r2,16384
  80b130:	10bfffc4 	addi	r2,r2,-1
  80b134:	1886703a 	and	r3,r3,r2
  80b138:	e0bff917 	ldw	r2,-28(fp)
  80b13c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80b140:	e0bff617 	ldw	r2,-40(fp)
  80b144:	1004c03a 	cmpne	r2,r2,zero
  80b148:	1000061e 	bne	r2,zero,80b164 <open+0xec>
  80b14c:	e13ff917 	ldw	r4,-28(fp)
  80b150:	080af9c0 	call	80af9c <alt_file_locked>
  80b154:	e0bff715 	stw	r2,-36(fp)
  80b158:	e0bff717 	ldw	r2,-36(fp)
  80b15c:	1004803a 	cmplt	r2,r2,zero
  80b160:	1000131e 	bne	r2,zero,80b1b0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80b164:	e0bffa17 	ldw	r2,-24(fp)
  80b168:	10800317 	ldw	r2,12(r2)
  80b16c:	1005003a 	cmpeq	r2,r2,zero
  80b170:	1000091e 	bne	r2,zero,80b198 <open+0x120>
  80b174:	e0bffa17 	ldw	r2,-24(fp)
  80b178:	10800317 	ldw	r2,12(r2)
  80b17c:	e13ff917 	ldw	r4,-28(fp)
  80b180:	e17ffb17 	ldw	r5,-20(fp)
  80b184:	e1bffc17 	ldw	r6,-16(fp)
  80b188:	e1fffd17 	ldw	r7,-12(fp)
  80b18c:	103ee83a 	callr	r2
  80b190:	e0bfff15 	stw	r2,-4(fp)
  80b194:	00000106 	br	80b19c <open+0x124>
  80b198:	e03fff15 	stw	zero,-4(fp)
  80b19c:	e0bfff17 	ldw	r2,-4(fp)
  80b1a0:	e0bff715 	stw	r2,-36(fp)
  80b1a4:	00000206 	br	80b1b0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80b1a8:	00bffb44 	movi	r2,-19
  80b1ac:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80b1b0:	e0bff717 	ldw	r2,-36(fp)
  80b1b4:	1004403a 	cmpge	r2,r2,zero
  80b1b8:	1000091e 	bne	r2,zero,80b1e0 <open+0x168>
  {
    alt_release_fd (index);  
  80b1bc:	e13ff817 	ldw	r4,-32(fp)
  80b1c0:	080b3e00 	call	80b3e0 <alt_release_fd>
    ALT_ERRNO = -status;
  80b1c4:	080b2000 	call	80b200 <alt_get_errno>
  80b1c8:	e0fff717 	ldw	r3,-36(fp)
  80b1cc:	00c7c83a 	sub	r3,zero,r3
  80b1d0:	10c00015 	stw	r3,0(r2)
    return -1;
  80b1d4:	00bfffc4 	movi	r2,-1
  80b1d8:	e0bffe15 	stw	r2,-8(fp)
  80b1dc:	00000206 	br	80b1e8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  80b1e0:	e0bff817 	ldw	r2,-32(fp)
  80b1e4:	e0bffe15 	stw	r2,-8(fp)
  80b1e8:	e0bffe17 	ldw	r2,-8(fp)
}
  80b1ec:	e037883a 	mov	sp,fp
  80b1f0:	dfc00117 	ldw	ra,4(sp)
  80b1f4:	df000017 	ldw	fp,0(sp)
  80b1f8:	dec00204 	addi	sp,sp,8
  80b1fc:	f800283a 	ret

0080b200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b200:	defffd04 	addi	sp,sp,-12
  80b204:	dfc00215 	stw	ra,8(sp)
  80b208:	df000115 	stw	fp,4(sp)
  80b20c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b210:	00802074 	movhi	r2,129
  80b214:	1083d204 	addi	r2,r2,3912
  80b218:	10800017 	ldw	r2,0(r2)
  80b21c:	1005003a 	cmpeq	r2,r2,zero
  80b220:	1000061e 	bne	r2,zero,80b23c <alt_get_errno+0x3c>
  80b224:	00802074 	movhi	r2,129
  80b228:	1083d204 	addi	r2,r2,3912
  80b22c:	10800017 	ldw	r2,0(r2)
  80b230:	103ee83a 	callr	r2
  80b234:	e0bfff15 	stw	r2,-4(fp)
  80b238:	00000306 	br	80b248 <alt_get_errno+0x48>
  80b23c:	00802074 	movhi	r2,129
  80b240:	108b0804 	addi	r2,r2,11296
  80b244:	e0bfff15 	stw	r2,-4(fp)
  80b248:	e0bfff17 	ldw	r2,-4(fp)
}
  80b24c:	e037883a 	mov	sp,fp
  80b250:	dfc00117 	ldw	ra,4(sp)
  80b254:	df000017 	ldw	fp,0(sp)
  80b258:	dec00204 	addi	sp,sp,8
  80b25c:	f800283a 	ret

0080b260 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b260:	defff704 	addi	sp,sp,-36
  80b264:	dfc00815 	stw	ra,32(sp)
  80b268:	df000715 	stw	fp,28(sp)
  80b26c:	df000704 	addi	fp,sp,28
  80b270:	e13ffb15 	stw	r4,-20(fp)
  80b274:	e17ffc15 	stw	r5,-16(fp)
  80b278:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b27c:	e0bffb17 	ldw	r2,-20(fp)
  80b280:	1004803a 	cmplt	r2,r2,zero
  80b284:	1000081e 	bne	r2,zero,80b2a8 <read+0x48>
  80b288:	e0bffb17 	ldw	r2,-20(fp)
  80b28c:	10800324 	muli	r2,r2,12
  80b290:	1007883a 	mov	r3,r2
  80b294:	00802074 	movhi	r2,129
  80b298:	10bed404 	addi	r2,r2,-1200
  80b29c:	1887883a 	add	r3,r3,r2
  80b2a0:	e0ffff15 	stw	r3,-4(fp)
  80b2a4:	00000106 	br	80b2ac <read+0x4c>
  80b2a8:	e03fff15 	stw	zero,-4(fp)
  80b2ac:	e0bfff17 	ldw	r2,-4(fp)
  80b2b0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b2b4:	e0bffa17 	ldw	r2,-24(fp)
  80b2b8:	1005003a 	cmpeq	r2,r2,zero
  80b2bc:	1000241e 	bne	r2,zero,80b350 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b2c0:	e0bffa17 	ldw	r2,-24(fp)
  80b2c4:	10800217 	ldw	r2,8(r2)
  80b2c8:	108000cc 	andi	r2,r2,3
  80b2cc:	10800060 	cmpeqi	r2,r2,1
  80b2d0:	10001a1e 	bne	r2,zero,80b33c <read+0xdc>
  80b2d4:	e0bffa17 	ldw	r2,-24(fp)
  80b2d8:	10800017 	ldw	r2,0(r2)
  80b2dc:	10800517 	ldw	r2,20(r2)
  80b2e0:	1005003a 	cmpeq	r2,r2,zero
  80b2e4:	1000151e 	bne	r2,zero,80b33c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b2e8:	e0bffa17 	ldw	r2,-24(fp)
  80b2ec:	10800017 	ldw	r2,0(r2)
  80b2f0:	10800517 	ldw	r2,20(r2)
  80b2f4:	e17ffc17 	ldw	r5,-16(fp)
  80b2f8:	e1bffd17 	ldw	r6,-12(fp)
  80b2fc:	e13ffa17 	ldw	r4,-24(fp)
  80b300:	103ee83a 	callr	r2
  80b304:	e0bff915 	stw	r2,-28(fp)
  80b308:	e0bff917 	ldw	r2,-28(fp)
  80b30c:	1004403a 	cmpge	r2,r2,zero
  80b310:	1000071e 	bne	r2,zero,80b330 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80b314:	080b3800 	call	80b380 <alt_get_errno>
  80b318:	e0fff917 	ldw	r3,-28(fp)
  80b31c:	00c7c83a 	sub	r3,zero,r3
  80b320:	10c00015 	stw	r3,0(r2)
          return -1;
  80b324:	00bfffc4 	movi	r2,-1
  80b328:	e0bffe15 	stw	r2,-8(fp)
  80b32c:	00000e06 	br	80b368 <read+0x108>
        }
        return rval;
  80b330:	e0bff917 	ldw	r2,-28(fp)
  80b334:	e0bffe15 	stw	r2,-8(fp)
  80b338:	00000b06 	br	80b368 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80b33c:	080b3800 	call	80b380 <alt_get_errno>
  80b340:	1007883a 	mov	r3,r2
  80b344:	00800344 	movi	r2,13
  80b348:	18800015 	stw	r2,0(r3)
  80b34c:	00000406 	br	80b360 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80b350:	080b3800 	call	80b380 <alt_get_errno>
  80b354:	1007883a 	mov	r3,r2
  80b358:	00801444 	movi	r2,81
  80b35c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b360:	00bfffc4 	movi	r2,-1
  80b364:	e0bffe15 	stw	r2,-8(fp)
  80b368:	e0bffe17 	ldw	r2,-8(fp)
}
  80b36c:	e037883a 	mov	sp,fp
  80b370:	dfc00117 	ldw	ra,4(sp)
  80b374:	df000017 	ldw	fp,0(sp)
  80b378:	dec00204 	addi	sp,sp,8
  80b37c:	f800283a 	ret

0080b380 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b380:	defffd04 	addi	sp,sp,-12
  80b384:	dfc00215 	stw	ra,8(sp)
  80b388:	df000115 	stw	fp,4(sp)
  80b38c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b390:	00802074 	movhi	r2,129
  80b394:	1083d204 	addi	r2,r2,3912
  80b398:	10800017 	ldw	r2,0(r2)
  80b39c:	1005003a 	cmpeq	r2,r2,zero
  80b3a0:	1000061e 	bne	r2,zero,80b3bc <alt_get_errno+0x3c>
  80b3a4:	00802074 	movhi	r2,129
  80b3a8:	1083d204 	addi	r2,r2,3912
  80b3ac:	10800017 	ldw	r2,0(r2)
  80b3b0:	103ee83a 	callr	r2
  80b3b4:	e0bfff15 	stw	r2,-4(fp)
  80b3b8:	00000306 	br	80b3c8 <alt_get_errno+0x48>
  80b3bc:	00802074 	movhi	r2,129
  80b3c0:	108b0804 	addi	r2,r2,11296
  80b3c4:	e0bfff15 	stw	r2,-4(fp)
  80b3c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80b3cc:	e037883a 	mov	sp,fp
  80b3d0:	dfc00117 	ldw	ra,4(sp)
  80b3d4:	df000017 	ldw	fp,0(sp)
  80b3d8:	dec00204 	addi	sp,sp,8
  80b3dc:	f800283a 	ret

0080b3e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b3e0:	defffe04 	addi	sp,sp,-8
  80b3e4:	df000115 	stw	fp,4(sp)
  80b3e8:	df000104 	addi	fp,sp,4
  80b3ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b3f0:	e0bfff17 	ldw	r2,-4(fp)
  80b3f4:	108000d0 	cmplti	r2,r2,3
  80b3f8:	10000d1e 	bne	r2,zero,80b430 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b3fc:	e0bfff17 	ldw	r2,-4(fp)
  80b400:	00c02074 	movhi	r3,129
  80b404:	18fed404 	addi	r3,r3,-1200
  80b408:	10800324 	muli	r2,r2,12
  80b40c:	10c5883a 	add	r2,r2,r3
  80b410:	10800204 	addi	r2,r2,8
  80b414:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b418:	e0bfff17 	ldw	r2,-4(fp)
  80b41c:	00c02074 	movhi	r3,129
  80b420:	18fed404 	addi	r3,r3,-1200
  80b424:	10800324 	muli	r2,r2,12
  80b428:	10c5883a 	add	r2,r2,r3
  80b42c:	10000015 	stw	zero,0(r2)
  }
}
  80b430:	e037883a 	mov	sp,fp
  80b434:	df000017 	ldw	fp,0(sp)
  80b438:	dec00104 	addi	sp,sp,4
  80b43c:	f800283a 	ret

0080b440 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b440:	defff804 	addi	sp,sp,-32
  80b444:	df000715 	stw	fp,28(sp)
  80b448:	df000704 	addi	fp,sp,28
  80b44c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b450:	0005303a 	rdctl	r2,status
  80b454:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b458:	e0fffb17 	ldw	r3,-20(fp)
  80b45c:	00bfff84 	movi	r2,-2
  80b460:	1884703a 	and	r2,r3,r2
  80b464:	1001703a 	wrctl	status,r2
  
  return context;
  80b468:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b46c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b470:	d0a00e17 	ldw	r2,-32712(gp)
  80b474:	10c000c4 	addi	r3,r2,3
  80b478:	00bfff04 	movi	r2,-4
  80b47c:	1884703a 	and	r2,r3,r2
  80b480:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b484:	d0e00e17 	ldw	r3,-32712(gp)
  80b488:	e0bffe17 	ldw	r2,-8(fp)
  80b48c:	1887883a 	add	r3,r3,r2
  80b490:	00804034 	movhi	r2,256
  80b494:	10800004 	addi	r2,r2,0
  80b498:	10c0072e 	bgeu	r2,r3,80b4b8 <sbrk+0x78>
  80b49c:	e0bffd17 	ldw	r2,-12(fp)
  80b4a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4a4:	e0bffa17 	ldw	r2,-24(fp)
  80b4a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80b4ac:	00bfffc4 	movi	r2,-1
  80b4b0:	e0bfff15 	stw	r2,-4(fp)
  80b4b4:	00000c06 	br	80b4e8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80b4b8:	d0a00e17 	ldw	r2,-32712(gp)
  80b4bc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80b4c0:	d0e00e17 	ldw	r3,-32712(gp)
  80b4c4:	e0bffe17 	ldw	r2,-8(fp)
  80b4c8:	1885883a 	add	r2,r3,r2
  80b4cc:	d0a00e15 	stw	r2,-32712(gp)
  80b4d0:	e0bffd17 	ldw	r2,-12(fp)
  80b4d4:	e0bff915 	stw	r2,-28(fp)
  80b4d8:	e0bff917 	ldw	r2,-28(fp)
  80b4dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80b4e0:	e0bffc17 	ldw	r2,-16(fp)
  80b4e4:	e0bfff15 	stw	r2,-4(fp)
  80b4e8:	e0bfff17 	ldw	r2,-4(fp)
} 
  80b4ec:	e037883a 	mov	sp,fp
  80b4f0:	df000017 	ldw	fp,0(sp)
  80b4f4:	dec00104 	addi	sp,sp,4
  80b4f8:	f800283a 	ret

0080b4fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80b4fc:	defffa04 	addi	sp,sp,-24
  80b500:	df000515 	stw	fp,20(sp)
  80b504:	df000504 	addi	fp,sp,20
  80b508:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b50c:	0005303a 	rdctl	r2,status
  80b510:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b514:	e0fffd17 	ldw	r3,-12(fp)
  80b518:	00bfff84 	movi	r2,-2
  80b51c:	1884703a 	and	r2,r3,r2
  80b520:	1001703a 	wrctl	status,r2
  
  return context;
  80b524:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80b528:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80b52c:	e0bfff17 	ldw	r2,-4(fp)
  80b530:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80b534:	e0bffc17 	ldw	r2,-16(fp)
  80b538:	10c00017 	ldw	r3,0(r2)
  80b53c:	e0bffc17 	ldw	r2,-16(fp)
  80b540:	10800117 	ldw	r2,4(r2)
  80b544:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80b548:	e0bffc17 	ldw	r2,-16(fp)
  80b54c:	10c00117 	ldw	r3,4(r2)
  80b550:	e0bffc17 	ldw	r2,-16(fp)
  80b554:	10800017 	ldw	r2,0(r2)
  80b558:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80b55c:	e0fffc17 	ldw	r3,-16(fp)
  80b560:	e0bffc17 	ldw	r2,-16(fp)
  80b564:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80b568:	e0fffc17 	ldw	r3,-16(fp)
  80b56c:	e0bffc17 	ldw	r2,-16(fp)
  80b570:	18800015 	stw	r2,0(r3)
  80b574:	e0bffe17 	ldw	r2,-8(fp)
  80b578:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b57c:	e0bffb17 	ldw	r2,-20(fp)
  80b580:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80b584:	e037883a 	mov	sp,fp
  80b588:	df000017 	ldw	fp,0(sp)
  80b58c:	dec00104 	addi	sp,sp,4
  80b590:	f800283a 	ret

0080b594 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80b594:	defffb04 	addi	sp,sp,-20
  80b598:	dfc00415 	stw	ra,16(sp)
  80b59c:	df000315 	stw	fp,12(sp)
  80b5a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80b5a4:	d0a00f17 	ldw	r2,-32708(gp)
  80b5a8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80b5ac:	d0a74e17 	ldw	r2,-25288(gp)
  80b5b0:	10800044 	addi	r2,r2,1
  80b5b4:	d0a74e15 	stw	r2,-25288(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b5b8:	00003106 	br	80b680 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80b5bc:	e0bffe17 	ldw	r2,-8(fp)
  80b5c0:	10800017 	ldw	r2,0(r2)
  80b5c4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80b5c8:	e0bffe17 	ldw	r2,-8(fp)
  80b5cc:	10800403 	ldbu	r2,16(r2)
  80b5d0:	10803fcc 	andi	r2,r2,255
  80b5d4:	1005003a 	cmpeq	r2,r2,zero
  80b5d8:	1000051e 	bne	r2,zero,80b5f0 <alt_tick+0x5c>
  80b5dc:	d0a74e17 	ldw	r2,-25288(gp)
  80b5e0:	1004c03a 	cmpne	r2,r2,zero
  80b5e4:	1000021e 	bne	r2,zero,80b5f0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80b5e8:	e0bffe17 	ldw	r2,-8(fp)
  80b5ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80b5f0:	e0bffe17 	ldw	r2,-8(fp)
  80b5f4:	10c00217 	ldw	r3,8(r2)
  80b5f8:	d0a74e17 	ldw	r2,-25288(gp)
  80b5fc:	10c01e36 	bltu	r2,r3,80b678 <alt_tick+0xe4>
  80b600:	e0bffe17 	ldw	r2,-8(fp)
  80b604:	10800403 	ldbu	r2,16(r2)
  80b608:	10803fcc 	andi	r2,r2,255
  80b60c:	1004c03a 	cmpne	r2,r2,zero
  80b610:	1000191e 	bne	r2,zero,80b678 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80b614:	e0bffe17 	ldw	r2,-8(fp)
  80b618:	10c00317 	ldw	r3,12(r2)
  80b61c:	e0bffe17 	ldw	r2,-8(fp)
  80b620:	11000517 	ldw	r4,20(r2)
  80b624:	183ee83a 	callr	r3
  80b628:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80b62c:	e0bffd17 	ldw	r2,-12(fp)
  80b630:	1004c03a 	cmpne	r2,r2,zero
  80b634:	1000031e 	bne	r2,zero,80b644 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80b638:	e13ffe17 	ldw	r4,-8(fp)
  80b63c:	080b4fc0 	call	80b4fc <alt_alarm_stop>
  80b640:	00000d06 	br	80b678 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80b644:	e0bffe17 	ldw	r2,-8(fp)
  80b648:	10c00217 	ldw	r3,8(r2)
  80b64c:	e0bffd17 	ldw	r2,-12(fp)
  80b650:	1887883a 	add	r3,r3,r2
  80b654:	e0bffe17 	ldw	r2,-8(fp)
  80b658:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80b65c:	e0bffe17 	ldw	r2,-8(fp)
  80b660:	10c00217 	ldw	r3,8(r2)
  80b664:	d0a74e17 	ldw	r2,-25288(gp)
  80b668:	1880032e 	bgeu	r3,r2,80b678 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80b66c:	e0fffe17 	ldw	r3,-8(fp)
  80b670:	00800044 	movi	r2,1
  80b674:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80b678:	e0bfff17 	ldw	r2,-4(fp)
  80b67c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b680:	d0e00f04 	addi	r3,gp,-32708
  80b684:	e0bffe17 	ldw	r2,-8(fp)
  80b688:	10ffcc1e 	bne	r2,r3,80b5bc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80b68c:	e037883a 	mov	sp,fp
  80b690:	dfc00117 	ldw	ra,4(sp)
  80b694:	df000017 	ldw	fp,0(sp)
  80b698:	dec00204 	addi	sp,sp,8
  80b69c:	f800283a 	ret

0080b6a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80b6a0:	defff704 	addi	sp,sp,-36
  80b6a4:	dfc00815 	stw	ra,32(sp)
  80b6a8:	df000715 	stw	fp,28(sp)
  80b6ac:	df000704 	addi	fp,sp,28
  80b6b0:	e13ffb15 	stw	r4,-20(fp)
  80b6b4:	e17ffc15 	stw	r5,-16(fp)
  80b6b8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b6bc:	e0bffb17 	ldw	r2,-20(fp)
  80b6c0:	1004803a 	cmplt	r2,r2,zero
  80b6c4:	1000081e 	bne	r2,zero,80b6e8 <write+0x48>
  80b6c8:	e0bffb17 	ldw	r2,-20(fp)
  80b6cc:	10800324 	muli	r2,r2,12
  80b6d0:	1007883a 	mov	r3,r2
  80b6d4:	00802074 	movhi	r2,129
  80b6d8:	10bed404 	addi	r2,r2,-1200
  80b6dc:	1887883a 	add	r3,r3,r2
  80b6e0:	e0ffff15 	stw	r3,-4(fp)
  80b6e4:	00000106 	br	80b6ec <write+0x4c>
  80b6e8:	e03fff15 	stw	zero,-4(fp)
  80b6ec:	e0bfff17 	ldw	r2,-4(fp)
  80b6f0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b6f4:	e0bffa17 	ldw	r2,-24(fp)
  80b6f8:	1005003a 	cmpeq	r2,r2,zero
  80b6fc:	1000241e 	bne	r2,zero,80b790 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b700:	e0bffa17 	ldw	r2,-24(fp)
  80b704:	10800217 	ldw	r2,8(r2)
  80b708:	108000cc 	andi	r2,r2,3
  80b70c:	1005003a 	cmpeq	r2,r2,zero
  80b710:	10001a1e 	bne	r2,zero,80b77c <write+0xdc>
  80b714:	e0bffa17 	ldw	r2,-24(fp)
  80b718:	10800017 	ldw	r2,0(r2)
  80b71c:	10800617 	ldw	r2,24(r2)
  80b720:	1005003a 	cmpeq	r2,r2,zero
  80b724:	1000151e 	bne	r2,zero,80b77c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b728:	e0bffa17 	ldw	r2,-24(fp)
  80b72c:	10800017 	ldw	r2,0(r2)
  80b730:	10800617 	ldw	r2,24(r2)
  80b734:	e17ffc17 	ldw	r5,-16(fp)
  80b738:	e1bffd17 	ldw	r6,-12(fp)
  80b73c:	e13ffa17 	ldw	r4,-24(fp)
  80b740:	103ee83a 	callr	r2
  80b744:	e0bff915 	stw	r2,-28(fp)
  80b748:	e0bff917 	ldw	r2,-28(fp)
  80b74c:	1004403a 	cmpge	r2,r2,zero
  80b750:	1000071e 	bne	r2,zero,80b770 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80b754:	080b7c00 	call	80b7c0 <alt_get_errno>
  80b758:	e0fff917 	ldw	r3,-28(fp)
  80b75c:	00c7c83a 	sub	r3,zero,r3
  80b760:	10c00015 	stw	r3,0(r2)
        return -1;
  80b764:	00bfffc4 	movi	r2,-1
  80b768:	e0bffe15 	stw	r2,-8(fp)
  80b76c:	00000e06 	br	80b7a8 <write+0x108>
      }
      return rval;
  80b770:	e0bff917 	ldw	r2,-28(fp)
  80b774:	e0bffe15 	stw	r2,-8(fp)
  80b778:	00000b06 	br	80b7a8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b77c:	080b7c00 	call	80b7c0 <alt_get_errno>
  80b780:	1007883a 	mov	r3,r2
  80b784:	00800344 	movi	r2,13
  80b788:	18800015 	stw	r2,0(r3)
  80b78c:	00000406 	br	80b7a0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b790:	080b7c00 	call	80b7c0 <alt_get_errno>
  80b794:	1007883a 	mov	r3,r2
  80b798:	00801444 	movi	r2,81
  80b79c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b7a0:	00bfffc4 	movi	r2,-1
  80b7a4:	e0bffe15 	stw	r2,-8(fp)
  80b7a8:	e0bffe17 	ldw	r2,-8(fp)
}
  80b7ac:	e037883a 	mov	sp,fp
  80b7b0:	dfc00117 	ldw	ra,4(sp)
  80b7b4:	df000017 	ldw	fp,0(sp)
  80b7b8:	dec00204 	addi	sp,sp,8
  80b7bc:	f800283a 	ret

0080b7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b7c0:	defffd04 	addi	sp,sp,-12
  80b7c4:	dfc00215 	stw	ra,8(sp)
  80b7c8:	df000115 	stw	fp,4(sp)
  80b7cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b7d0:	00802074 	movhi	r2,129
  80b7d4:	1083d204 	addi	r2,r2,3912
  80b7d8:	10800017 	ldw	r2,0(r2)
  80b7dc:	1005003a 	cmpeq	r2,r2,zero
  80b7e0:	1000061e 	bne	r2,zero,80b7fc <alt_get_errno+0x3c>
  80b7e4:	00802074 	movhi	r2,129
  80b7e8:	1083d204 	addi	r2,r2,3912
  80b7ec:	10800017 	ldw	r2,0(r2)
  80b7f0:	103ee83a 	callr	r2
  80b7f4:	e0bfff15 	stw	r2,-4(fp)
  80b7f8:	00000306 	br	80b808 <alt_get_errno+0x48>
  80b7fc:	00802074 	movhi	r2,129
  80b800:	108b0804 	addi	r2,r2,11296
  80b804:	e0bfff15 	stw	r2,-4(fp)
  80b808:	e0bfff17 	ldw	r2,-4(fp)
}
  80b80c:	e037883a 	mov	sp,fp
  80b810:	dfc00117 	ldw	ra,4(sp)
  80b814:	df000017 	ldw	fp,0(sp)
  80b818:	dec00204 	addi	sp,sp,8
  80b81c:	f800283a 	ret

0080b820 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b820:	defffd04 	addi	sp,sp,-12
  80b824:	dfc00215 	stw	ra,8(sp)
  80b828:	df000115 	stw	fp,4(sp)
  80b82c:	df000104 	addi	fp,sp,4
  80b830:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  80b834:	080e6b00 	call	80e6b0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b838:	00800044 	movi	r2,1
  80b83c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b840:	e037883a 	mov	sp,fp
  80b844:	dfc00117 	ldw	ra,4(sp)
  80b848:	df000017 	ldw	fp,0(sp)
  80b84c:	dec00204 	addi	sp,sp,8
  80b850:	f800283a 	ret

0080b854 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b854:	defffe04 	addi	sp,sp,-8
  80b858:	dfc00115 	stw	ra,4(sp)
  80b85c:	df000015 	stw	fp,0(sp)
  80b860:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80b864:	01004074 	movhi	r4,257
  80b868:	21040804 	addi	r4,r4,4128
  80b86c:	000b883a 	mov	r5,zero
  80b870:	01800084 	movi	r6,2
  80b874:	01c0fa04 	movi	r7,1000
  80b878:	080d37c0 	call	80d37c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80b87c:	01002074 	movhi	r4,129
  80b880:	213f3e04 	addi	r4,r4,-776
  80b884:	000b883a 	mov	r5,zero
  80b888:	01800044 	movi	r6,1
  80b88c:	080ba680 	call	80ba68 <altera_avalon_jtag_uart_init>
  80b890:	01002074 	movhi	r4,129
  80b894:	213f3404 	addi	r4,r4,-816
  80b898:	080b8e80 	call	80b8e8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80b89c:	01002074 	movhi	r4,129
  80b8a0:	21035604 	addi	r4,r4,3416
  80b8a4:	080d1780 	call	80d178 <altera_avalon_lcd_16207_init>
  80b8a8:	01002074 	movhi	r4,129
  80b8ac:	21034c04 	addi	r4,r4,3376
  80b8b0:	080b8e80 	call	80b8e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80b8b4:	01002074 	movhi	r4,129
  80b8b8:	21039e04 	addi	r4,r4,3704
  80b8bc:	000b883a 	mov	r5,zero
  80b8c0:	000d883a 	mov	r6,zero
  80b8c4:	080d5040 	call	80d504 <altera_avalon_uart_init>
  80b8c8:	01002074 	movhi	r4,129
  80b8cc:	21039404 	addi	r4,r4,3664
  80b8d0:	080b8e80 	call	80b8e8 <alt_dev_reg>
}
  80b8d4:	e037883a 	mov	sp,fp
  80b8d8:	dfc00117 	ldw	ra,4(sp)
  80b8dc:	df000017 	ldw	fp,0(sp)
  80b8e0:	dec00204 	addi	sp,sp,8
  80b8e4:	f800283a 	ret

0080b8e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b8e8:	defffd04 	addi	sp,sp,-12
  80b8ec:	dfc00215 	stw	ra,8(sp)
  80b8f0:	df000115 	stw	fp,4(sp)
  80b8f4:	df000104 	addi	fp,sp,4
  80b8f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b8fc:	e13fff17 	ldw	r4,-4(fp)
  80b900:	01402074 	movhi	r5,129
  80b904:	2943cf04 	addi	r5,r5,3900
  80b908:	080de000 	call	80de00 <alt_dev_llist_insert>
}
  80b90c:	e037883a 	mov	sp,fp
  80b910:	dfc00117 	ldw	ra,4(sp)
  80b914:	df000017 	ldw	fp,0(sp)
  80b918:	dec00204 	addi	sp,sp,8
  80b91c:	f800283a 	ret

0080b920 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b920:	defffa04 	addi	sp,sp,-24
  80b924:	dfc00515 	stw	ra,20(sp)
  80b928:	df000415 	stw	fp,16(sp)
  80b92c:	df000404 	addi	fp,sp,16
  80b930:	e13ffd15 	stw	r4,-12(fp)
  80b934:	e17ffe15 	stw	r5,-8(fp)
  80b938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b93c:	e0bffd17 	ldw	r2,-12(fp)
  80b940:	10800017 	ldw	r2,0(r2)
  80b944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b948:	e0bffc17 	ldw	r2,-16(fp)
  80b94c:	11000a04 	addi	r4,r2,40
  80b950:	e0bffd17 	ldw	r2,-12(fp)
  80b954:	11c00217 	ldw	r7,8(r2)
  80b958:	e17ffe17 	ldw	r5,-8(fp)
  80b95c:	e1bfff17 	ldw	r6,-4(fp)
  80b960:	080bf680 	call	80bf68 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b964:	e037883a 	mov	sp,fp
  80b968:	dfc00117 	ldw	ra,4(sp)
  80b96c:	df000017 	ldw	fp,0(sp)
  80b970:	dec00204 	addi	sp,sp,8
  80b974:	f800283a 	ret

0080b978 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b978:	defffa04 	addi	sp,sp,-24
  80b97c:	dfc00515 	stw	ra,20(sp)
  80b980:	df000415 	stw	fp,16(sp)
  80b984:	df000404 	addi	fp,sp,16
  80b988:	e13ffd15 	stw	r4,-12(fp)
  80b98c:	e17ffe15 	stw	r5,-8(fp)
  80b990:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b994:	e0bffd17 	ldw	r2,-12(fp)
  80b998:	10800017 	ldw	r2,0(r2)
  80b99c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b9a0:	e0bffc17 	ldw	r2,-16(fp)
  80b9a4:	11000a04 	addi	r4,r2,40
  80b9a8:	e0bffd17 	ldw	r2,-12(fp)
  80b9ac:	11c00217 	ldw	r7,8(r2)
  80b9b0:	e17ffe17 	ldw	r5,-8(fp)
  80b9b4:	e1bfff17 	ldw	r6,-4(fp)
  80b9b8:	080c18c0 	call	80c18c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b9bc:	e037883a 	mov	sp,fp
  80b9c0:	dfc00117 	ldw	ra,4(sp)
  80b9c4:	df000017 	ldw	fp,0(sp)
  80b9c8:	dec00204 	addi	sp,sp,8
  80b9cc:	f800283a 	ret

0080b9d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b9d0:	defffc04 	addi	sp,sp,-16
  80b9d4:	dfc00315 	stw	ra,12(sp)
  80b9d8:	df000215 	stw	fp,8(sp)
  80b9dc:	df000204 	addi	fp,sp,8
  80b9e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b9e4:	e0bfff17 	ldw	r2,-4(fp)
  80b9e8:	10800017 	ldw	r2,0(r2)
  80b9ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b9f0:	e0bffe17 	ldw	r2,-8(fp)
  80b9f4:	11000a04 	addi	r4,r2,40
  80b9f8:	e0bfff17 	ldw	r2,-4(fp)
  80b9fc:	11400217 	ldw	r5,8(r2)
  80ba00:	080be000 	call	80be00 <altera_avalon_jtag_uart_close>
}
  80ba04:	e037883a 	mov	sp,fp
  80ba08:	dfc00117 	ldw	ra,4(sp)
  80ba0c:	df000017 	ldw	fp,0(sp)
  80ba10:	dec00204 	addi	sp,sp,8
  80ba14:	f800283a 	ret

0080ba18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80ba18:	defffa04 	addi	sp,sp,-24
  80ba1c:	dfc00515 	stw	ra,20(sp)
  80ba20:	df000415 	stw	fp,16(sp)
  80ba24:	df000404 	addi	fp,sp,16
  80ba28:	e13ffd15 	stw	r4,-12(fp)
  80ba2c:	e17ffe15 	stw	r5,-8(fp)
  80ba30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80ba34:	e0bffd17 	ldw	r2,-12(fp)
  80ba38:	10800017 	ldw	r2,0(r2)
  80ba3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80ba40:	e0bffc17 	ldw	r2,-16(fp)
  80ba44:	11000a04 	addi	r4,r2,40
  80ba48:	e17ffe17 	ldw	r5,-8(fp)
  80ba4c:	e1bfff17 	ldw	r6,-4(fp)
  80ba50:	080be740 	call	80be74 <altera_avalon_jtag_uart_ioctl>
}
  80ba54:	e037883a 	mov	sp,fp
  80ba58:	dfc00117 	ldw	ra,4(sp)
  80ba5c:	df000017 	ldw	fp,0(sp)
  80ba60:	dec00204 	addi	sp,sp,8
  80ba64:	f800283a 	ret

0080ba68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80ba68:	defffa04 	addi	sp,sp,-24
  80ba6c:	dfc00515 	stw	ra,20(sp)
  80ba70:	df000415 	stw	fp,16(sp)
  80ba74:	df000404 	addi	fp,sp,16
  80ba78:	e13ffd15 	stw	r4,-12(fp)
  80ba7c:	e17ffe15 	stw	r5,-8(fp)
  80ba80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ba84:	e0fffd17 	ldw	r3,-12(fp)
  80ba88:	00800044 	movi	r2,1
  80ba8c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80ba90:	e0bffd17 	ldw	r2,-12(fp)
  80ba94:	10800017 	ldw	r2,0(r2)
  80ba98:	11000104 	addi	r4,r2,4
  80ba9c:	e0bffd17 	ldw	r2,-12(fp)
  80baa0:	10800817 	ldw	r2,32(r2)
  80baa4:	1007883a 	mov	r3,r2
  80baa8:	2005883a 	mov	r2,r4
  80baac:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80bab0:	e13ffe17 	ldw	r4,-8(fp)
  80bab4:	e17fff17 	ldw	r5,-4(fp)
  80bab8:	d8000015 	stw	zero,0(sp)
  80babc:	01802074 	movhi	r6,129
  80bac0:	31aeca04 	addi	r6,r6,-17624
  80bac4:	e1fffd17 	ldw	r7,-12(fp)
  80bac8:	080e2780 	call	80e278 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80bacc:	e0bffd17 	ldw	r2,-12(fp)
  80bad0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80bad4:	e0bffd17 	ldw	r2,-12(fp)
  80bad8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80badc:	00802074 	movhi	r2,129
  80bae0:	108b1204 	addi	r2,r2,11336
  80bae4:	10800017 	ldw	r2,0(r2)
  80bae8:	100b883a 	mov	r5,r2
  80baec:	01802074 	movhi	r6,129
  80baf0:	31af5404 	addi	r6,r6,-17072
  80baf4:	e1fffd17 	ldw	r7,-12(fp)
  80baf8:	080a7840 	call	80a784 <alt_alarm_start>
  80bafc:	1004403a 	cmpge	r2,r2,zero
  80bb00:	1000041e 	bne	r2,zero,80bb14 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80bb04:	e0fffd17 	ldw	r3,-12(fp)
  80bb08:	00a00034 	movhi	r2,32768
  80bb0c:	10bfffc4 	addi	r2,r2,-1
  80bb10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80bb14:	e037883a 	mov	sp,fp
  80bb18:	dfc00117 	ldw	ra,4(sp)
  80bb1c:	df000017 	ldw	fp,0(sp)
  80bb20:	dec00204 	addi	sp,sp,8
  80bb24:	f800283a 	ret

0080bb28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80bb28:	defff804 	addi	sp,sp,-32
  80bb2c:	df000715 	stw	fp,28(sp)
  80bb30:	df000704 	addi	fp,sp,28
  80bb34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80bb38:	e0bfff17 	ldw	r2,-4(fp)
  80bb3c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80bb40:	e0bffe17 	ldw	r2,-8(fp)
  80bb44:	10800017 	ldw	r2,0(r2)
  80bb48:	e0bffd15 	stw	r2,-12(fp)
  80bb4c:	00000006 	br	80bb50 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bb50:	e0bffd17 	ldw	r2,-12(fp)
  80bb54:	10800104 	addi	r2,r2,4
  80bb58:	10800037 	ldwio	r2,0(r2)
  80bb5c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80bb60:	e0bffc17 	ldw	r2,-16(fp)
  80bb64:	1080c00c 	andi	r2,r2,768
  80bb68:	1005003a 	cmpeq	r2,r2,zero
  80bb6c:	1000741e 	bne	r2,zero,80bd40 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80bb70:	e0bffc17 	ldw	r2,-16(fp)
  80bb74:	1080400c 	andi	r2,r2,256
  80bb78:	1005003a 	cmpeq	r2,r2,zero
  80bb7c:	1000351e 	bne	r2,zero,80bc54 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80bb80:	00800074 	movhi	r2,1
  80bb84:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bb88:	e0bffe17 	ldw	r2,-8(fp)
  80bb8c:	10800a17 	ldw	r2,40(r2)
  80bb90:	10800044 	addi	r2,r2,1
  80bb94:	1081ffcc 	andi	r2,r2,2047
  80bb98:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80bb9c:	e0bffe17 	ldw	r2,-8(fp)
  80bba0:	10c00b17 	ldw	r3,44(r2)
  80bba4:	e0bffa17 	ldw	r2,-24(fp)
  80bba8:	18801626 	beq	r3,r2,80bc04 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80bbac:	e0bffd17 	ldw	r2,-12(fp)
  80bbb0:	10800037 	ldwio	r2,0(r2)
  80bbb4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80bbb8:	e0bffb17 	ldw	r2,-20(fp)
  80bbbc:	10a0000c 	andi	r2,r2,32768
  80bbc0:	1005003a 	cmpeq	r2,r2,zero
  80bbc4:	10000f1e 	bne	r2,zero,80bc04 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80bbc8:	e0bffe17 	ldw	r2,-8(fp)
  80bbcc:	10c00a17 	ldw	r3,40(r2)
  80bbd0:	e0bffb17 	ldw	r2,-20(fp)
  80bbd4:	1009883a 	mov	r4,r2
  80bbd8:	e0bffe17 	ldw	r2,-8(fp)
  80bbdc:	1885883a 	add	r2,r3,r2
  80bbe0:	10800e04 	addi	r2,r2,56
  80bbe4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bbe8:	e0bffe17 	ldw	r2,-8(fp)
  80bbec:	10800a17 	ldw	r2,40(r2)
  80bbf0:	10800044 	addi	r2,r2,1
  80bbf4:	10c1ffcc 	andi	r3,r2,2047
  80bbf8:	e0bffe17 	ldw	r2,-8(fp)
  80bbfc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80bc00:	003fe106 	br	80bb88 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80bc04:	e0bffb17 	ldw	r2,-20(fp)
  80bc08:	10bfffec 	andhi	r2,r2,65535
  80bc0c:	1005003a 	cmpeq	r2,r2,zero
  80bc10:	1000101e 	bne	r2,zero,80bc54 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bc14:	e0bffe17 	ldw	r2,-8(fp)
  80bc18:	10c00817 	ldw	r3,32(r2)
  80bc1c:	00bfff84 	movi	r2,-2
  80bc20:	1886703a 	and	r3,r3,r2
  80bc24:	e0bffe17 	ldw	r2,-8(fp)
  80bc28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80bc2c:	e0bffd17 	ldw	r2,-12(fp)
  80bc30:	11000104 	addi	r4,r2,4
  80bc34:	e0bffe17 	ldw	r2,-8(fp)
  80bc38:	10800817 	ldw	r2,32(r2)
  80bc3c:	1007883a 	mov	r3,r2
  80bc40:	2005883a 	mov	r2,r4
  80bc44:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bc48:	e0bffd17 	ldw	r2,-12(fp)
  80bc4c:	10800104 	addi	r2,r2,4
  80bc50:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80bc54:	e0bffc17 	ldw	r2,-16(fp)
  80bc58:	1080800c 	andi	r2,r2,512
  80bc5c:	1005003a 	cmpeq	r2,r2,zero
  80bc60:	103fbb1e 	bne	r2,zero,80bb50 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80bc64:	e0bffc17 	ldw	r2,-16(fp)
  80bc68:	10bfffec 	andhi	r2,r2,65535
  80bc6c:	1004d43a 	srli	r2,r2,16
  80bc70:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bc74:	00001506 	br	80bccc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80bc78:	e13ffd17 	ldw	r4,-12(fp)
  80bc7c:	e0bffe17 	ldw	r2,-8(fp)
  80bc80:	10c00d17 	ldw	r3,52(r2)
  80bc84:	e0bffe17 	ldw	r2,-8(fp)
  80bc88:	1885883a 	add	r2,r3,r2
  80bc8c:	10820e04 	addi	r2,r2,2104
  80bc90:	10800003 	ldbu	r2,0(r2)
  80bc94:	10c03fcc 	andi	r3,r2,255
  80bc98:	18c0201c 	xori	r3,r3,128
  80bc9c:	18ffe004 	addi	r3,r3,-128
  80bca0:	2005883a 	mov	r2,r4
  80bca4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bca8:	e0bffe17 	ldw	r2,-8(fp)
  80bcac:	10800d17 	ldw	r2,52(r2)
  80bcb0:	10800044 	addi	r2,r2,1
  80bcb4:	10c1ffcc 	andi	r3,r2,2047
  80bcb8:	e0bffe17 	ldw	r2,-8(fp)
  80bcbc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80bcc0:	e0bff917 	ldw	r2,-28(fp)
  80bcc4:	10bfffc4 	addi	r2,r2,-1
  80bcc8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80bccc:	e0bff917 	ldw	r2,-28(fp)
  80bcd0:	1005003a 	cmpeq	r2,r2,zero
  80bcd4:	1000051e 	bne	r2,zero,80bcec <altera_avalon_jtag_uart_irq+0x1c4>
  80bcd8:	e0bffe17 	ldw	r2,-8(fp)
  80bcdc:	10c00d17 	ldw	r3,52(r2)
  80bce0:	e0bffe17 	ldw	r2,-8(fp)
  80bce4:	10800c17 	ldw	r2,48(r2)
  80bce8:	18bfe31e 	bne	r3,r2,80bc78 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80bcec:	e0bff917 	ldw	r2,-28(fp)
  80bcf0:	1005003a 	cmpeq	r2,r2,zero
  80bcf4:	103f961e 	bne	r2,zero,80bb50 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bcf8:	e0bffe17 	ldw	r2,-8(fp)
  80bcfc:	10c00817 	ldw	r3,32(r2)
  80bd00:	00bfff44 	movi	r2,-3
  80bd04:	1886703a 	and	r3,r3,r2
  80bd08:	e0bffe17 	ldw	r2,-8(fp)
  80bd0c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bd10:	e0bffe17 	ldw	r2,-8(fp)
  80bd14:	10800017 	ldw	r2,0(r2)
  80bd18:	11000104 	addi	r4,r2,4
  80bd1c:	e0bffe17 	ldw	r2,-8(fp)
  80bd20:	10800817 	ldw	r2,32(r2)
  80bd24:	1007883a 	mov	r3,r2
  80bd28:	2005883a 	mov	r2,r4
  80bd2c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bd30:	e0bffd17 	ldw	r2,-12(fp)
  80bd34:	10800104 	addi	r2,r2,4
  80bd38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80bd3c:	003f8406 	br	80bb50 <altera_avalon_jtag_uart_irq+0x28>
}
  80bd40:	e037883a 	mov	sp,fp
  80bd44:	df000017 	ldw	fp,0(sp)
  80bd48:	dec00104 	addi	sp,sp,4
  80bd4c:	f800283a 	ret

0080bd50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80bd50:	defffc04 	addi	sp,sp,-16
  80bd54:	df000315 	stw	fp,12(sp)
  80bd58:	df000304 	addi	fp,sp,12
  80bd5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80bd60:	e0bfff17 	ldw	r2,-4(fp)
  80bd64:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80bd68:	e0bffe17 	ldw	r2,-8(fp)
  80bd6c:	10800017 	ldw	r2,0(r2)
  80bd70:	10800104 	addi	r2,r2,4
  80bd74:	10800037 	ldwio	r2,0(r2)
  80bd78:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80bd7c:	e0bffd17 	ldw	r2,-12(fp)
  80bd80:	1081000c 	andi	r2,r2,1024
  80bd84:	1005003a 	cmpeq	r2,r2,zero
  80bd88:	10000c1e 	bne	r2,zero,80bdbc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80bd8c:	e0bffe17 	ldw	r2,-8(fp)
  80bd90:	10800017 	ldw	r2,0(r2)
  80bd94:	11000104 	addi	r4,r2,4
  80bd98:	e0bffe17 	ldw	r2,-8(fp)
  80bd9c:	10800817 	ldw	r2,32(r2)
  80bda0:	10810014 	ori	r2,r2,1024
  80bda4:	1007883a 	mov	r3,r2
  80bda8:	2005883a 	mov	r2,r4
  80bdac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80bdb0:	e0bffe17 	ldw	r2,-8(fp)
  80bdb4:	10000915 	stw	zero,36(r2)
  80bdb8:	00000a06 	br	80bde4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80bdbc:	e0bffe17 	ldw	r2,-8(fp)
  80bdc0:	10c00917 	ldw	r3,36(r2)
  80bdc4:	00a00034 	movhi	r2,32768
  80bdc8:	10bfff04 	addi	r2,r2,-4
  80bdcc:	10c00536 	bltu	r2,r3,80bde4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80bdd0:	e0bffe17 	ldw	r2,-8(fp)
  80bdd4:	10800917 	ldw	r2,36(r2)
  80bdd8:	10c00044 	addi	r3,r2,1
  80bddc:	e0bffe17 	ldw	r2,-8(fp)
  80bde0:	10c00915 	stw	r3,36(r2)
  80bde4:	00802074 	movhi	r2,129
  80bde8:	108b1204 	addi	r2,r2,11336
  80bdec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80bdf0:	e037883a 	mov	sp,fp
  80bdf4:	df000017 	ldw	fp,0(sp)
  80bdf8:	dec00104 	addi	sp,sp,4
  80bdfc:	f800283a 	ret

0080be00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80be00:	defffc04 	addi	sp,sp,-16
  80be04:	df000315 	stw	fp,12(sp)
  80be08:	df000304 	addi	fp,sp,12
  80be0c:	e13ffd15 	stw	r4,-12(fp)
  80be10:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80be14:	00000706 	br	80be34 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80be18:	e0bffe17 	ldw	r2,-8(fp)
  80be1c:	1090000c 	andi	r2,r2,16384
  80be20:	1005003a 	cmpeq	r2,r2,zero
  80be24:	1000031e 	bne	r2,zero,80be34 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80be28:	00bffd44 	movi	r2,-11
  80be2c:	e0bfff15 	stw	r2,-4(fp)
  80be30:	00000b06 	br	80be60 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80be34:	e0bffd17 	ldw	r2,-12(fp)
  80be38:	10c00d17 	ldw	r3,52(r2)
  80be3c:	e0bffd17 	ldw	r2,-12(fp)
  80be40:	10800c17 	ldw	r2,48(r2)
  80be44:	18800526 	beq	r3,r2,80be5c <altera_avalon_jtag_uart_close+0x5c>
  80be48:	e0bffd17 	ldw	r2,-12(fp)
  80be4c:	10c00917 	ldw	r3,36(r2)
  80be50:	e0bffd17 	ldw	r2,-12(fp)
  80be54:	10800117 	ldw	r2,4(r2)
  80be58:	18bfef36 	bltu	r3,r2,80be18 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80be5c:	e03fff15 	stw	zero,-4(fp)
  80be60:	e0bfff17 	ldw	r2,-4(fp)
}
  80be64:	e037883a 	mov	sp,fp
  80be68:	df000017 	ldw	fp,0(sp)
  80be6c:	dec00104 	addi	sp,sp,4
  80be70:	f800283a 	ret

0080be74 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80be74:	defff804 	addi	sp,sp,-32
  80be78:	df000715 	stw	fp,28(sp)
  80be7c:	df000704 	addi	fp,sp,28
  80be80:	e13ffb15 	stw	r4,-20(fp)
  80be84:	e17ffc15 	stw	r5,-16(fp)
  80be88:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80be8c:	00bff9c4 	movi	r2,-25
  80be90:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80be94:	e0bffc17 	ldw	r2,-16(fp)
  80be98:	e0bfff15 	stw	r2,-4(fp)
  80be9c:	e0ffff17 	ldw	r3,-4(fp)
  80bea0:	189a8060 	cmpeqi	r2,r3,27137
  80bea4:	1000041e 	bne	r2,zero,80beb8 <altera_avalon_jtag_uart_ioctl+0x44>
  80bea8:	e0ffff17 	ldw	r3,-4(fp)
  80beac:	189a80a0 	cmpeqi	r2,r3,27138
  80beb0:	10001b1e 	bne	r2,zero,80bf20 <altera_avalon_jtag_uart_ioctl+0xac>
  80beb4:	00002706 	br	80bf54 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80beb8:	e0bffb17 	ldw	r2,-20(fp)
  80bebc:	10c00117 	ldw	r3,4(r2)
  80bec0:	00a00034 	movhi	r2,32768
  80bec4:	10bfffc4 	addi	r2,r2,-1
  80bec8:	18802226 	beq	r3,r2,80bf54 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80becc:	e0bffd17 	ldw	r2,-12(fp)
  80bed0:	10800017 	ldw	r2,0(r2)
  80bed4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80bed8:	e0bff917 	ldw	r2,-28(fp)
  80bedc:	10800090 	cmplti	r2,r2,2
  80bee0:	1000071e 	bne	r2,zero,80bf00 <altera_avalon_jtag_uart_ioctl+0x8c>
  80bee4:	e0fff917 	ldw	r3,-28(fp)
  80bee8:	00a00034 	movhi	r2,32768
  80beec:	10bfffc4 	addi	r2,r2,-1
  80bef0:	18800326 	beq	r3,r2,80bf00 <altera_avalon_jtag_uart_ioctl+0x8c>
  80bef4:	e0bff917 	ldw	r2,-28(fp)
  80bef8:	e0bffe15 	stw	r2,-8(fp)
  80befc:	00000306 	br	80bf0c <altera_avalon_jtag_uart_ioctl+0x98>
  80bf00:	00e00034 	movhi	r3,32768
  80bf04:	18ffff84 	addi	r3,r3,-2
  80bf08:	e0fffe15 	stw	r3,-8(fp)
  80bf0c:	e0bffb17 	ldw	r2,-20(fp)
  80bf10:	e0fffe17 	ldw	r3,-8(fp)
  80bf14:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80bf18:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80bf1c:	00000d06 	br	80bf54 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80bf20:	e0bffb17 	ldw	r2,-20(fp)
  80bf24:	10c00117 	ldw	r3,4(r2)
  80bf28:	00a00034 	movhi	r2,32768
  80bf2c:	10bfffc4 	addi	r2,r2,-1
  80bf30:	18800826 	beq	r3,r2,80bf54 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80bf34:	e13ffd17 	ldw	r4,-12(fp)
  80bf38:	e0bffb17 	ldw	r2,-20(fp)
  80bf3c:	10c00917 	ldw	r3,36(r2)
  80bf40:	e0bffb17 	ldw	r2,-20(fp)
  80bf44:	10800117 	ldw	r2,4(r2)
  80bf48:	1885803a 	cmpltu	r2,r3,r2
  80bf4c:	20800015 	stw	r2,0(r4)
      rc = 0;
  80bf50:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80bf54:	e0bffa17 	ldw	r2,-24(fp)
}
  80bf58:	e037883a 	mov	sp,fp
  80bf5c:	df000017 	ldw	fp,0(sp)
  80bf60:	dec00104 	addi	sp,sp,4
  80bf64:	f800283a 	ret

0080bf68 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80bf68:	defff204 	addi	sp,sp,-56
  80bf6c:	dfc00d15 	stw	ra,52(sp)
  80bf70:	df000c15 	stw	fp,48(sp)
  80bf74:	df000c04 	addi	fp,sp,48
  80bf78:	e13ffb15 	stw	r4,-20(fp)
  80bf7c:	e17ffc15 	stw	r5,-16(fp)
  80bf80:	e1bffd15 	stw	r6,-12(fp)
  80bf84:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80bf88:	e0bffc17 	ldw	r2,-16(fp)
  80bf8c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80bf90:	00004806 	br	80c0b4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80bf94:	e0bffb17 	ldw	r2,-20(fp)
  80bf98:	10800a17 	ldw	r2,40(r2)
  80bf9c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80bfa0:	e0bffb17 	ldw	r2,-20(fp)
  80bfa4:	10800b17 	ldw	r2,44(r2)
  80bfa8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80bfac:	e0fff717 	ldw	r3,-36(fp)
  80bfb0:	e0bff617 	ldw	r2,-40(fp)
  80bfb4:	18800536 	bltu	r3,r2,80bfcc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80bfb8:	e0bff717 	ldw	r2,-36(fp)
  80bfbc:	e0fff617 	ldw	r3,-40(fp)
  80bfc0:	10c5c83a 	sub	r2,r2,r3
  80bfc4:	e0bff815 	stw	r2,-32(fp)
  80bfc8:	00000406 	br	80bfdc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80bfcc:	00820004 	movi	r2,2048
  80bfd0:	e0fff617 	ldw	r3,-40(fp)
  80bfd4:	10c5c83a 	sub	r2,r2,r3
  80bfd8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80bfdc:	e0bff817 	ldw	r2,-32(fp)
  80bfe0:	1005003a 	cmpeq	r2,r2,zero
  80bfe4:	10001f1e 	bne	r2,zero,80c064 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80bfe8:	e0fffd17 	ldw	r3,-12(fp)
  80bfec:	e0bff817 	ldw	r2,-32(fp)
  80bff0:	1880022e 	bgeu	r3,r2,80bffc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80bff4:	e0bffd17 	ldw	r2,-12(fp)
  80bff8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80bffc:	e0bffb17 	ldw	r2,-20(fp)
  80c000:	10c00e04 	addi	r3,r2,56
  80c004:	e0bff617 	ldw	r2,-40(fp)
  80c008:	1887883a 	add	r3,r3,r2
  80c00c:	e0bffa17 	ldw	r2,-24(fp)
  80c010:	1009883a 	mov	r4,r2
  80c014:	180b883a 	mov	r5,r3
  80c018:	e1bff817 	ldw	r6,-32(fp)
  80c01c:	0806a6c0 	call	806a6c <memcpy>
      ptr   += n;
  80c020:	e0fff817 	ldw	r3,-32(fp)
  80c024:	e0bffa17 	ldw	r2,-24(fp)
  80c028:	10c5883a 	add	r2,r2,r3
  80c02c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80c030:	e0fffd17 	ldw	r3,-12(fp)
  80c034:	e0bff817 	ldw	r2,-32(fp)
  80c038:	1885c83a 	sub	r2,r3,r2
  80c03c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c040:	e0fff617 	ldw	r3,-40(fp)
  80c044:	e0bff817 	ldw	r2,-32(fp)
  80c048:	1885883a 	add	r2,r3,r2
  80c04c:	10c1ffcc 	andi	r3,r2,2047
  80c050:	e0bffb17 	ldw	r2,-20(fp)
  80c054:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c058:	e0bffd17 	ldw	r2,-12(fp)
  80c05c:	10800048 	cmpgei	r2,r2,1
  80c060:	103fcc1e 	bne	r2,zero,80bf94 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80c064:	e0fffa17 	ldw	r3,-24(fp)
  80c068:	e0bffc17 	ldw	r2,-16(fp)
  80c06c:	1880141e 	bne	r3,r2,80c0c0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c070:	e0bffe17 	ldw	r2,-8(fp)
  80c074:	1090000c 	andi	r2,r2,16384
  80c078:	1004c03a 	cmpne	r2,r2,zero
  80c07c:	1000101e 	bne	r2,zero,80c0c0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c080:	e0bffb17 	ldw	r2,-20(fp)
  80c084:	10c00a17 	ldw	r3,40(r2)
  80c088:	e0bff717 	ldw	r2,-36(fp)
  80c08c:	1880051e 	bne	r3,r2,80c0a4 <altera_avalon_jtag_uart_read+0x13c>
  80c090:	e0bffb17 	ldw	r2,-20(fp)
  80c094:	10c00917 	ldw	r3,36(r2)
  80c098:	e0bffb17 	ldw	r2,-20(fp)
  80c09c:	10800117 	ldw	r2,4(r2)
  80c0a0:	18bff736 	bltu	r3,r2,80c080 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c0a4:	e0bffb17 	ldw	r2,-20(fp)
  80c0a8:	10c00a17 	ldw	r3,40(r2)
  80c0ac:	e0bff717 	ldw	r2,-36(fp)
  80c0b0:	18800326 	beq	r3,r2,80c0c0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c0b4:	e0bffd17 	ldw	r2,-12(fp)
  80c0b8:	10800048 	cmpgei	r2,r2,1
  80c0bc:	103fb51e 	bne	r2,zero,80bf94 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c0c0:	e0fffa17 	ldw	r3,-24(fp)
  80c0c4:	e0bffc17 	ldw	r2,-16(fp)
  80c0c8:	18801926 	beq	r3,r2,80c130 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c0cc:	0005303a 	rdctl	r2,status
  80c0d0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c0d4:	e0fff517 	ldw	r3,-44(fp)
  80c0d8:	00bfff84 	movi	r2,-2
  80c0dc:	1884703a 	and	r2,r3,r2
  80c0e0:	1001703a 	wrctl	status,r2
  
  return context;
  80c0e4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c0e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c0ec:	e0bffb17 	ldw	r2,-20(fp)
  80c0f0:	10800817 	ldw	r2,32(r2)
  80c0f4:	10c00054 	ori	r3,r2,1
  80c0f8:	e0bffb17 	ldw	r2,-20(fp)
  80c0fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c100:	e0bffb17 	ldw	r2,-20(fp)
  80c104:	10800017 	ldw	r2,0(r2)
  80c108:	11000104 	addi	r4,r2,4
  80c10c:	e0bffb17 	ldw	r2,-20(fp)
  80c110:	10800817 	ldw	r2,32(r2)
  80c114:	1007883a 	mov	r3,r2
  80c118:	2005883a 	mov	r2,r4
  80c11c:	10c00035 	stwio	r3,0(r2)
  80c120:	e0bff917 	ldw	r2,-28(fp)
  80c124:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c128:	e0bff417 	ldw	r2,-48(fp)
  80c12c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c130:	e0fffa17 	ldw	r3,-24(fp)
  80c134:	e0bffc17 	ldw	r2,-16(fp)
  80c138:	18800526 	beq	r3,r2,80c150 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80c13c:	e0fffa17 	ldw	r3,-24(fp)
  80c140:	e0bffc17 	ldw	r2,-16(fp)
  80c144:	1887c83a 	sub	r3,r3,r2
  80c148:	e0ffff15 	stw	r3,-4(fp)
  80c14c:	00000906 	br	80c174 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80c150:	e0bffe17 	ldw	r2,-8(fp)
  80c154:	1090000c 	andi	r2,r2,16384
  80c158:	1005003a 	cmpeq	r2,r2,zero
  80c15c:	1000031e 	bne	r2,zero,80c16c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c160:	00bffd44 	movi	r2,-11
  80c164:	e0bfff15 	stw	r2,-4(fp)
  80c168:	00000206 	br	80c174 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80c16c:	00bffec4 	movi	r2,-5
  80c170:	e0bfff15 	stw	r2,-4(fp)
  80c174:	e0bfff17 	ldw	r2,-4(fp)
}
  80c178:	e037883a 	mov	sp,fp
  80c17c:	dfc00117 	ldw	ra,4(sp)
  80c180:	df000017 	ldw	fp,0(sp)
  80c184:	dec00204 	addi	sp,sp,8
  80c188:	f800283a 	ret

0080c18c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c18c:	defff204 	addi	sp,sp,-56
  80c190:	dfc00d15 	stw	ra,52(sp)
  80c194:	df000c15 	stw	fp,48(sp)
  80c198:	df000c04 	addi	fp,sp,48
  80c19c:	e13ffb15 	stw	r4,-20(fp)
  80c1a0:	e17ffc15 	stw	r5,-16(fp)
  80c1a4:	e1bffd15 	stw	r6,-12(fp)
  80c1a8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c1ac:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c1b0:	e0bffc17 	ldw	r2,-16(fp)
  80c1b4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c1b8:	00003a06 	br	80c2a4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c1bc:	e0bffb17 	ldw	r2,-20(fp)
  80c1c0:	10800c17 	ldw	r2,48(r2)
  80c1c4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80c1c8:	e0bffb17 	ldw	r2,-20(fp)
  80c1cc:	10800d17 	ldw	r2,52(r2)
  80c1d0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80c1d4:	e0fffa17 	ldw	r3,-24(fp)
  80c1d8:	e0bff917 	ldw	r2,-28(fp)
  80c1dc:	1880062e 	bgeu	r3,r2,80c1f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c1e0:	e0fff917 	ldw	r3,-28(fp)
  80c1e4:	e0bffa17 	ldw	r2,-24(fp)
  80c1e8:	1885c83a 	sub	r2,r3,r2
  80c1ec:	10bfffc4 	addi	r2,r2,-1
  80c1f0:	e0bff815 	stw	r2,-32(fp)
  80c1f4:	00000c06 	br	80c228 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80c1f8:	e0bff917 	ldw	r2,-28(fp)
  80c1fc:	1005003a 	cmpeq	r2,r2,zero
  80c200:	1000051e 	bne	r2,zero,80c218 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c204:	00820004 	movi	r2,2048
  80c208:	e0fffa17 	ldw	r3,-24(fp)
  80c20c:	10c5c83a 	sub	r2,r2,r3
  80c210:	e0bff815 	stw	r2,-32(fp)
  80c214:	00000406 	br	80c228 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c218:	0081ffc4 	movi	r2,2047
  80c21c:	e0fffa17 	ldw	r3,-24(fp)
  80c220:	10c5c83a 	sub	r2,r2,r3
  80c224:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c228:	e0bff817 	ldw	r2,-32(fp)
  80c22c:	1005003a 	cmpeq	r2,r2,zero
  80c230:	10001f1e 	bne	r2,zero,80c2b0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80c234:	e0fffd17 	ldw	r3,-12(fp)
  80c238:	e0bff817 	ldw	r2,-32(fp)
  80c23c:	1880022e 	bgeu	r3,r2,80c248 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80c240:	e0bffd17 	ldw	r2,-12(fp)
  80c244:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c248:	e0bffb17 	ldw	r2,-20(fp)
  80c24c:	10c20e04 	addi	r3,r2,2104
  80c250:	e0bffa17 	ldw	r2,-24(fp)
  80c254:	1885883a 	add	r2,r3,r2
  80c258:	e0fffc17 	ldw	r3,-16(fp)
  80c25c:	1009883a 	mov	r4,r2
  80c260:	180b883a 	mov	r5,r3
  80c264:	e1bff817 	ldw	r6,-32(fp)
  80c268:	0806a6c0 	call	806a6c <memcpy>
      ptr   += n;
  80c26c:	e0fff817 	ldw	r3,-32(fp)
  80c270:	e0bffc17 	ldw	r2,-16(fp)
  80c274:	10c5883a 	add	r2,r2,r3
  80c278:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80c27c:	e0fffd17 	ldw	r3,-12(fp)
  80c280:	e0bff817 	ldw	r2,-32(fp)
  80c284:	1885c83a 	sub	r2,r3,r2
  80c288:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c28c:	e0fffa17 	ldw	r3,-24(fp)
  80c290:	e0bff817 	ldw	r2,-32(fp)
  80c294:	1885883a 	add	r2,r3,r2
  80c298:	10c1ffcc 	andi	r3,r2,2047
  80c29c:	e0bffb17 	ldw	r2,-20(fp)
  80c2a0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c2a4:	e0bffd17 	ldw	r2,-12(fp)
  80c2a8:	10800048 	cmpgei	r2,r2,1
  80c2ac:	103fc31e 	bne	r2,zero,80c1bc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c2b0:	0005303a 	rdctl	r2,status
  80c2b4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c2b8:	e0fff517 	ldw	r3,-44(fp)
  80c2bc:	00bfff84 	movi	r2,-2
  80c2c0:	1884703a 	and	r2,r3,r2
  80c2c4:	1001703a 	wrctl	status,r2
  
  return context;
  80c2c8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c2cc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c2d0:	e0bffb17 	ldw	r2,-20(fp)
  80c2d4:	10800817 	ldw	r2,32(r2)
  80c2d8:	10c00094 	ori	r3,r2,2
  80c2dc:	e0bffb17 	ldw	r2,-20(fp)
  80c2e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c2e4:	e0bffb17 	ldw	r2,-20(fp)
  80c2e8:	10800017 	ldw	r2,0(r2)
  80c2ec:	11000104 	addi	r4,r2,4
  80c2f0:	e0bffb17 	ldw	r2,-20(fp)
  80c2f4:	10800817 	ldw	r2,32(r2)
  80c2f8:	1007883a 	mov	r3,r2
  80c2fc:	2005883a 	mov	r2,r4
  80c300:	10c00035 	stwio	r3,0(r2)
  80c304:	e0bff717 	ldw	r2,-36(fp)
  80c308:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c30c:	e0bff417 	ldw	r2,-48(fp)
  80c310:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c314:	e0bffd17 	ldw	r2,-12(fp)
  80c318:	10800050 	cmplti	r2,r2,1
  80c31c:	1000111e 	bne	r2,zero,80c364 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80c320:	e0bffe17 	ldw	r2,-8(fp)
  80c324:	1090000c 	andi	r2,r2,16384
  80c328:	1004c03a 	cmpne	r2,r2,zero
  80c32c:	1000101e 	bne	r2,zero,80c370 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c330:	e0bffb17 	ldw	r2,-20(fp)
  80c334:	10c00d17 	ldw	r3,52(r2)
  80c338:	e0bff917 	ldw	r2,-28(fp)
  80c33c:	1880051e 	bne	r3,r2,80c354 <altera_avalon_jtag_uart_write+0x1c8>
  80c340:	e0bffb17 	ldw	r2,-20(fp)
  80c344:	10c00917 	ldw	r3,36(r2)
  80c348:	e0bffb17 	ldw	r2,-20(fp)
  80c34c:	10800117 	ldw	r2,4(r2)
  80c350:	18bff736 	bltu	r3,r2,80c330 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80c354:	e0bffb17 	ldw	r2,-20(fp)
  80c358:	10c00d17 	ldw	r3,52(r2)
  80c35c:	e0bff917 	ldw	r2,-28(fp)
  80c360:	18800326 	beq	r3,r2,80c370 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80c364:	e0bffd17 	ldw	r2,-12(fp)
  80c368:	10800048 	cmpgei	r2,r2,1
  80c36c:	103fcd1e 	bne	r2,zero,80c2a4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80c370:	e0fffc17 	ldw	r3,-16(fp)
  80c374:	e0bff617 	ldw	r2,-40(fp)
  80c378:	18800526 	beq	r3,r2,80c390 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80c37c:	e0fffc17 	ldw	r3,-16(fp)
  80c380:	e0bff617 	ldw	r2,-40(fp)
  80c384:	1887c83a 	sub	r3,r3,r2
  80c388:	e0ffff15 	stw	r3,-4(fp)
  80c38c:	00000906 	br	80c3b4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80c390:	e0bffe17 	ldw	r2,-8(fp)
  80c394:	1090000c 	andi	r2,r2,16384
  80c398:	1005003a 	cmpeq	r2,r2,zero
  80c39c:	1000031e 	bne	r2,zero,80c3ac <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80c3a0:	00bffd44 	movi	r2,-11
  80c3a4:	e0bfff15 	stw	r2,-4(fp)
  80c3a8:	00000206 	br	80c3b4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80c3ac:	00bffec4 	movi	r2,-5
  80c3b0:	e0bfff15 	stw	r2,-4(fp)
  80c3b4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c3b8:	e037883a 	mov	sp,fp
  80c3bc:	dfc00117 	ldw	ra,4(sp)
  80c3c0:	df000017 	ldw	fp,0(sp)
  80c3c4:	dec00204 	addi	sp,sp,8
  80c3c8:	f800283a 	ret

0080c3cc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80c3cc:	defffa04 	addi	sp,sp,-24
  80c3d0:	dfc00515 	stw	ra,20(sp)
  80c3d4:	df000415 	stw	fp,16(sp)
  80c3d8:	df000404 	addi	fp,sp,16
  80c3dc:	e13ffe15 	stw	r4,-8(fp)
  80c3e0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80c3e4:	e0bffe17 	ldw	r2,-8(fp)
  80c3e8:	10800017 	ldw	r2,0(r2)
  80c3ec:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80c3f0:	008003f4 	movhi	r2,15
  80c3f4:	10909004 	addi	r2,r2,16960
  80c3f8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80c3fc:	e0bffe17 	ldw	r2,-8(fp)
  80c400:	10800803 	ldbu	r2,32(r2)
  80c404:	10803fcc 	andi	r2,r2,255
  80c408:	1080201c 	xori	r2,r2,128
  80c40c:	10bfe004 	addi	r2,r2,-128
  80c410:	1004c03a 	cmpne	r2,r2,zero
  80c414:	1000161e 	bne	r2,zero,80c470 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c418:	00000a06 	br	80c444 <lcd_write_command+0x78>
    if (--i == 0)
  80c41c:	e0bffc17 	ldw	r2,-16(fp)
  80c420:	10bfffc4 	addi	r2,r2,-1
  80c424:	e0bffc15 	stw	r2,-16(fp)
  80c428:	e0bffc17 	ldw	r2,-16(fp)
  80c42c:	1004c03a 	cmpne	r2,r2,zero
  80c430:	1000041e 	bne	r2,zero,80c444 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80c434:	e0fffe17 	ldw	r3,-8(fp)
  80c438:	00800044 	movi	r2,1
  80c43c:	18800805 	stb	r2,32(r3)
      return;
  80c440:	00000b06 	br	80c470 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c444:	e0bffd17 	ldw	r2,-12(fp)
  80c448:	10800104 	addi	r2,r2,4
  80c44c:	10800037 	ldwio	r2,0(r2)
  80c450:	1080200c 	andi	r2,r2,128
  80c454:	1004c03a 	cmpne	r2,r2,zero
  80c458:	103ff01e 	bne	r2,zero,80c41c <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80c45c:	01001904 	movi	r4,100
  80c460:	080e6800 	call	80e680 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80c464:	e0bffd17 	ldw	r2,-12(fp)
  80c468:	e0ffff03 	ldbu	r3,-4(fp)
  80c46c:	10c00035 	stwio	r3,0(r2)
}
  80c470:	e037883a 	mov	sp,fp
  80c474:	dfc00117 	ldw	ra,4(sp)
  80c478:	df000017 	ldw	fp,0(sp)
  80c47c:	dec00204 	addi	sp,sp,8
  80c480:	f800283a 	ret

0080c484 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80c484:	defffa04 	addi	sp,sp,-24
  80c488:	dfc00515 	stw	ra,20(sp)
  80c48c:	df000415 	stw	fp,16(sp)
  80c490:	df000404 	addi	fp,sp,16
  80c494:	e13ffe15 	stw	r4,-8(fp)
  80c498:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80c49c:	e0bffe17 	ldw	r2,-8(fp)
  80c4a0:	10800017 	ldw	r2,0(r2)
  80c4a4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80c4a8:	008003f4 	movhi	r2,15
  80c4ac:	10909004 	addi	r2,r2,16960
  80c4b0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80c4b4:	e0bffe17 	ldw	r2,-8(fp)
  80c4b8:	10800803 	ldbu	r2,32(r2)
  80c4bc:	10803fcc 	andi	r2,r2,255
  80c4c0:	1080201c 	xori	r2,r2,128
  80c4c4:	10bfe004 	addi	r2,r2,-128
  80c4c8:	1004c03a 	cmpne	r2,r2,zero
  80c4cc:	10001d1e 	bne	r2,zero,80c544 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c4d0:	00000a06 	br	80c4fc <lcd_write_data+0x78>
    if (--i == 0)
  80c4d4:	e0bffc17 	ldw	r2,-16(fp)
  80c4d8:	10bfffc4 	addi	r2,r2,-1
  80c4dc:	e0bffc15 	stw	r2,-16(fp)
  80c4e0:	e0bffc17 	ldw	r2,-16(fp)
  80c4e4:	1004c03a 	cmpne	r2,r2,zero
  80c4e8:	1000041e 	bne	r2,zero,80c4fc <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80c4ec:	e0fffe17 	ldw	r3,-8(fp)
  80c4f0:	00800044 	movi	r2,1
  80c4f4:	18800805 	stb	r2,32(r3)
      return;
  80c4f8:	00001206 	br	80c544 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80c4fc:	e0bffd17 	ldw	r2,-12(fp)
  80c500:	10800104 	addi	r2,r2,4
  80c504:	10800037 	ldwio	r2,0(r2)
  80c508:	1080200c 	andi	r2,r2,128
  80c50c:	1004c03a 	cmpne	r2,r2,zero
  80c510:	103ff01e 	bne	r2,zero,80c4d4 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80c514:	01001904 	movi	r4,100
  80c518:	080e6800 	call	80e680 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80c51c:	e0bffd17 	ldw	r2,-12(fp)
  80c520:	10800204 	addi	r2,r2,8
  80c524:	e0ffff03 	ldbu	r3,-4(fp)
  80c528:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80c52c:	e0bffe17 	ldw	r2,-8(fp)
  80c530:	108008c3 	ldbu	r2,35(r2)
  80c534:	10800044 	addi	r2,r2,1
  80c538:	1007883a 	mov	r3,r2
  80c53c:	e0bffe17 	ldw	r2,-8(fp)
  80c540:	10c008c5 	stb	r3,35(r2)
}
  80c544:	e037883a 	mov	sp,fp
  80c548:	dfc00117 	ldw	ra,4(sp)
  80c54c:	df000017 	ldw	fp,0(sp)
  80c550:	dec00204 	addi	sp,sp,8
  80c554:	f800283a 	ret

0080c558 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80c558:	defffc04 	addi	sp,sp,-16
  80c55c:	dfc00315 	stw	ra,12(sp)
  80c560:	df000215 	stw	fp,8(sp)
  80c564:	df000204 	addi	fp,sp,8
  80c568:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80c56c:	e13fff17 	ldw	r4,-4(fp)
  80c570:	01400044 	movi	r5,1
  80c574:	080c3cc0 	call	80c3cc <lcd_write_command>

  sp->x = 0;
  80c578:	e0bfff17 	ldw	r2,-4(fp)
  80c57c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80c580:	e0bfff17 	ldw	r2,-4(fp)
  80c584:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80c588:	e0bfff17 	ldw	r2,-4(fp)
  80c58c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c590:	e03ffe15 	stw	zero,-8(fp)
  80c594:	00001906 	br	80c5fc <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80c598:	e0bffe17 	ldw	r2,-8(fp)
  80c59c:	10801924 	muli	r2,r2,100
  80c5a0:	10c01004 	addi	r3,r2,64
  80c5a4:	e0bfff17 	ldw	r2,-4(fp)
  80c5a8:	1889883a 	add	r4,r3,r2
  80c5ac:	01400804 	movi	r5,32
  80c5b0:	01801444 	movi	r6,81
  80c5b4:	08024640 	call	802464 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80c5b8:	e0bffe17 	ldw	r2,-8(fp)
  80c5bc:	10801924 	muli	r2,r2,100
  80c5c0:	10c00c04 	addi	r3,r2,48
  80c5c4:	e0bfff17 	ldw	r2,-4(fp)
  80c5c8:	1889883a 	add	r4,r3,r2
  80c5cc:	01400804 	movi	r5,32
  80c5d0:	01800404 	movi	r6,16
  80c5d4:	08024640 	call	802464 <memset>
    sp->line[y].width = 0;
  80c5d8:	e0bffe17 	ldw	r2,-8(fp)
  80c5dc:	e0ffff17 	ldw	r3,-4(fp)
  80c5e0:	10801924 	muli	r2,r2,100
  80c5e4:	10c5883a 	add	r2,r2,r3
  80c5e8:	10802404 	addi	r2,r2,144
  80c5ec:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c5f0:	e0bffe17 	ldw	r2,-8(fp)
  80c5f4:	10800044 	addi	r2,r2,1
  80c5f8:	e0bffe15 	stw	r2,-8(fp)
  80c5fc:	e0bffe17 	ldw	r2,-8(fp)
  80c600:	10800090 	cmplti	r2,r2,2
  80c604:	103fe41e 	bne	r2,zero,80c598 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80c608:	e037883a 	mov	sp,fp
  80c60c:	dfc00117 	ldw	ra,4(sp)
  80c610:	df000017 	ldw	fp,0(sp)
  80c614:	dec00204 	addi	sp,sp,8
  80c618:	f800283a 	ret

0080c61c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80c61c:	defff604 	addi	sp,sp,-40
  80c620:	dfc00915 	stw	ra,36(sp)
  80c624:	df000815 	stw	fp,32(sp)
  80c628:	dc000715 	stw	r16,28(sp)
  80c62c:	df000704 	addi	fp,sp,28
  80c630:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80c634:	e0bfff17 	ldw	r2,-4(fp)
  80c638:	10800943 	ldbu	r2,37(r2)
  80c63c:	10803fcc 	andi	r2,r2,255
  80c640:	1080201c 	xori	r2,r2,128
  80c644:	10bfe004 	addi	r2,r2,-128
  80c648:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c64c:	e03ffe15 	stw	zero,-8(fp)
  80c650:	00006406 	br	80c7e4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80c654:	e0bffe17 	ldw	r2,-8(fp)
  80c658:	e0ffff17 	ldw	r3,-4(fp)
  80c65c:	10801924 	muli	r2,r2,100
  80c660:	10c5883a 	add	r2,r2,r3
  80c664:	10802404 	addi	r2,r2,144
  80c668:	10800043 	ldbu	r2,1(r2)
  80c66c:	10803fcc 	andi	r2,r2,255
  80c670:	1080201c 	xori	r2,r2,128
  80c674:	10bfe004 	addi	r2,r2,-128
  80c678:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80c67c:	e0bffe17 	ldw	r2,-8(fp)
  80c680:	e0ffff17 	ldw	r3,-4(fp)
  80c684:	10801924 	muli	r2,r2,100
  80c688:	10c5883a 	add	r2,r2,r3
  80c68c:	10802404 	addi	r2,r2,144
  80c690:	10800083 	ldbu	r2,2(r2)
  80c694:	10c03fcc 	andi	r3,r2,255
  80c698:	e0bffc17 	ldw	r2,-16(fp)
  80c69c:	1885383a 	mul	r2,r3,r2
  80c6a0:	1005d23a 	srai	r2,r2,8
  80c6a4:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  80c6a8:	e0fffa17 	ldw	r3,-24(fp)
  80c6ac:	e0bffb17 	ldw	r2,-20(fp)
  80c6b0:	18800116 	blt	r3,r2,80c6b8 <lcd_repaint_screen+0x9c>
      offset = 0;
  80c6b4:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80c6b8:	e03ffd15 	stw	zero,-12(fp)
  80c6bc:	00004306 	br	80c7cc <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80c6c0:	e43ffe17 	ldw	r16,-8(fp)
  80c6c4:	e0fffd17 	ldw	r3,-12(fp)
  80c6c8:	e0bffa17 	ldw	r2,-24(fp)
  80c6cc:	1889883a 	add	r4,r3,r2
  80c6d0:	e17ffb17 	ldw	r5,-20(fp)
  80c6d4:	08009080 	call	800908 <__modsi3>
  80c6d8:	1009883a 	mov	r4,r2
  80c6dc:	e0ffff17 	ldw	r3,-4(fp)
  80c6e0:	80801924 	muli	r2,r16,100
  80c6e4:	10c5883a 	add	r2,r2,r3
  80c6e8:	1105883a 	add	r2,r2,r4
  80c6ec:	10801004 	addi	r2,r2,64
  80c6f0:	10800003 	ldbu	r2,0(r2)
  80c6f4:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80c6f8:	e0bffe17 	ldw	r2,-8(fp)
  80c6fc:	e13ffd17 	ldw	r4,-12(fp)
  80c700:	e0ffff17 	ldw	r3,-4(fp)
  80c704:	10801924 	muli	r2,r2,100
  80c708:	10c5883a 	add	r2,r2,r3
  80c70c:	1105883a 	add	r2,r2,r4
  80c710:	10800c04 	addi	r2,r2,48
  80c714:	10800003 	ldbu	r2,0(r2)
  80c718:	10c03fcc 	andi	r3,r2,255
  80c71c:	18c0201c 	xori	r3,r3,128
  80c720:	18ffe004 	addi	r3,r3,-128
  80c724:	e0bff947 	ldb	r2,-27(fp)
  80c728:	18802526 	beq	r3,r2,80c7c0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80c72c:	e0fffe17 	ldw	r3,-8(fp)
  80c730:	d0a01104 	addi	r2,gp,-32700
  80c734:	1885883a 	add	r2,r3,r2
  80c738:	10800003 	ldbu	r2,0(r2)
  80c73c:	1007883a 	mov	r3,r2
  80c740:	e0bffd17 	ldw	r2,-12(fp)
  80c744:	1885883a 	add	r2,r3,r2
  80c748:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80c74c:	e0fff903 	ldbu	r3,-28(fp)
  80c750:	e0bfff17 	ldw	r2,-4(fp)
  80c754:	108008c3 	ldbu	r2,35(r2)
  80c758:	10803fcc 	andi	r2,r2,255
  80c75c:	1080201c 	xori	r2,r2,128
  80c760:	10bfe004 	addi	r2,r2,-128
  80c764:	18800926 	beq	r3,r2,80c78c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80c768:	e0fff903 	ldbu	r3,-28(fp)
  80c76c:	00bfe004 	movi	r2,-128
  80c770:	1884b03a 	or	r2,r3,r2
  80c774:	11403fcc 	andi	r5,r2,255
  80c778:	e13fff17 	ldw	r4,-4(fp)
  80c77c:	080c3cc0 	call	80c3cc <lcd_write_command>
          sp->address = address;
  80c780:	e0fff903 	ldbu	r3,-28(fp)
  80c784:	e0bfff17 	ldw	r2,-4(fp)
  80c788:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80c78c:	e0bff943 	ldbu	r2,-27(fp)
  80c790:	11403fcc 	andi	r5,r2,255
  80c794:	e13fff17 	ldw	r4,-4(fp)
  80c798:	080c4840 	call	80c484 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80c79c:	e0bffe17 	ldw	r2,-8(fp)
  80c7a0:	e13ffd17 	ldw	r4,-12(fp)
  80c7a4:	e0ffff17 	ldw	r3,-4(fp)
  80c7a8:	10801924 	muli	r2,r2,100
  80c7ac:	10c5883a 	add	r2,r2,r3
  80c7b0:	1105883a 	add	r2,r2,r4
  80c7b4:	10c00c04 	addi	r3,r2,48
  80c7b8:	e0bff943 	ldbu	r2,-27(fp)
  80c7bc:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80c7c0:	e0bffd17 	ldw	r2,-12(fp)
  80c7c4:	10800044 	addi	r2,r2,1
  80c7c8:	e0bffd15 	stw	r2,-12(fp)
  80c7cc:	e0bffd17 	ldw	r2,-12(fp)
  80c7d0:	10800410 	cmplti	r2,r2,16
  80c7d4:	103fba1e 	bne	r2,zero,80c6c0 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c7d8:	e0bffe17 	ldw	r2,-8(fp)
  80c7dc:	10800044 	addi	r2,r2,1
  80c7e0:	e0bffe15 	stw	r2,-8(fp)
  80c7e4:	e0bffe17 	ldw	r2,-8(fp)
  80c7e8:	10800090 	cmplti	r2,r2,2
  80c7ec:	103f991e 	bne	r2,zero,80c654 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80c7f0:	e037883a 	mov	sp,fp
  80c7f4:	dfc00217 	ldw	ra,8(sp)
  80c7f8:	df000117 	ldw	fp,4(sp)
  80c7fc:	dc000017 	ldw	r16,0(sp)
  80c800:	dec00304 	addi	sp,sp,12
  80c804:	f800283a 	ret

0080c808 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80c808:	defffc04 	addi	sp,sp,-16
  80c80c:	dfc00315 	stw	ra,12(sp)
  80c810:	df000215 	stw	fp,8(sp)
  80c814:	df000204 	addi	fp,sp,8
  80c818:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c81c:	e03ffe15 	stw	zero,-8(fp)
  80c820:	00001d06 	br	80c898 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80c824:	e0bffe17 	ldw	r2,-8(fp)
  80c828:	10800048 	cmpgei	r2,r2,1
  80c82c:	10000f1e 	bne	r2,zero,80c86c <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80c830:	e0bffe17 	ldw	r2,-8(fp)
  80c834:	10801924 	muli	r2,r2,100
  80c838:	10c01004 	addi	r3,r2,64
  80c83c:	e0bfff17 	ldw	r2,-4(fp)
  80c840:	1889883a 	add	r4,r3,r2
  80c844:	e0bffe17 	ldw	r2,-8(fp)
  80c848:	10800044 	addi	r2,r2,1
  80c84c:	10801924 	muli	r2,r2,100
  80c850:	10c01004 	addi	r3,r2,64
  80c854:	e0bfff17 	ldw	r2,-4(fp)
  80c858:	1885883a 	add	r2,r3,r2
  80c85c:	100b883a 	mov	r5,r2
  80c860:	01801404 	movi	r6,80
  80c864:	0806a6c0 	call	806a6c <memcpy>
  80c868:	00000806 	br	80c88c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80c86c:	e0bffe17 	ldw	r2,-8(fp)
  80c870:	10801924 	muli	r2,r2,100
  80c874:	10c01004 	addi	r3,r2,64
  80c878:	e0bfff17 	ldw	r2,-4(fp)
  80c87c:	1889883a 	add	r4,r3,r2
  80c880:	01400804 	movi	r5,32
  80c884:	01801404 	movi	r6,80
  80c888:	08024640 	call	802464 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80c88c:	e0bffe17 	ldw	r2,-8(fp)
  80c890:	10800044 	addi	r2,r2,1
  80c894:	e0bffe15 	stw	r2,-8(fp)
  80c898:	e0bffe17 	ldw	r2,-8(fp)
  80c89c:	10800090 	cmplti	r2,r2,2
  80c8a0:	103fe01e 	bne	r2,zero,80c824 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80c8a4:	e0bfff17 	ldw	r2,-4(fp)
  80c8a8:	10800883 	ldbu	r2,34(r2)
  80c8ac:	10bfffc4 	addi	r2,r2,-1
  80c8b0:	1007883a 	mov	r3,r2
  80c8b4:	e0bfff17 	ldw	r2,-4(fp)
  80c8b8:	10c00885 	stb	r3,34(r2)
}
  80c8bc:	e037883a 	mov	sp,fp
  80c8c0:	dfc00117 	ldw	ra,4(sp)
  80c8c4:	df000017 	ldw	fp,0(sp)
  80c8c8:	dec00204 	addi	sp,sp,8
  80c8cc:	f800283a 	ret

0080c8d0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80c8d0:	defff804 	addi	sp,sp,-32
  80c8d4:	dfc00715 	stw	ra,28(sp)
  80c8d8:	df000615 	stw	fp,24(sp)
  80c8dc:	df000604 	addi	fp,sp,24
  80c8e0:	e13ffd15 	stw	r4,-12(fp)
  80c8e4:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80c8e8:	e03ffc15 	stw	zero,-16(fp)
  80c8ec:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  80c8f0:	e0bffd17 	ldw	r2,-12(fp)
  80c8f4:	10800a03 	ldbu	r2,40(r2)
  80c8f8:	10803fcc 	andi	r2,r2,255
  80c8fc:	1080201c 	xori	r2,r2,128
  80c900:	10bfe004 	addi	r2,r2,-128
  80c904:	108016d8 	cmpnei	r2,r2,91
  80c908:	1000491e 	bne	r2,zero,80ca30 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  80c90c:	e0bffd17 	ldw	r2,-12(fp)
  80c910:	10800a04 	addi	r2,r2,40
  80c914:	10800044 	addi	r2,r2,1
  80c918:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80c91c:	00000d06 	br	80c954 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80c920:	e0bffc17 	ldw	r2,-16(fp)
  80c924:	10c002a4 	muli	r3,r2,10
  80c928:	e0bffa17 	ldw	r2,-24(fp)
  80c92c:	10800003 	ldbu	r2,0(r2)
  80c930:	10803fcc 	andi	r2,r2,255
  80c934:	1080201c 	xori	r2,r2,128
  80c938:	10bfe004 	addi	r2,r2,-128
  80c93c:	1885883a 	add	r2,r3,r2
  80c940:	10bff404 	addi	r2,r2,-48
  80c944:	e0bffc15 	stw	r2,-16(fp)
  80c948:	e0bffa17 	ldw	r2,-24(fp)
  80c94c:	10800044 	addi	r2,r2,1
  80c950:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80c954:	e0bffa17 	ldw	r2,-24(fp)
  80c958:	10800003 	ldbu	r2,0(r2)
  80c95c:	10803fcc 	andi	r2,r2,255
  80c960:	1080201c 	xori	r2,r2,128
  80c964:	10bfe004 	addi	r2,r2,-128
  80c968:	1007883a 	mov	r3,r2
  80c96c:	00802074 	movhi	r2,129
  80c970:	1083d804 	addi	r2,r2,3936
  80c974:	10800017 	ldw	r2,0(r2)
  80c978:	1885883a 	add	r2,r3,r2
  80c97c:	10800003 	ldbu	r2,0(r2)
  80c980:	10803fcc 	andi	r2,r2,255
  80c984:	1080010c 	andi	r2,r2,4
  80c988:	1004c03a 	cmpne	r2,r2,zero
  80c98c:	103fe41e 	bne	r2,zero,80c920 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80c990:	e0bffa17 	ldw	r2,-24(fp)
  80c994:	10800003 	ldbu	r2,0(r2)
  80c998:	10803fcc 	andi	r2,r2,255
  80c99c:	1080201c 	xori	r2,r2,128
  80c9a0:	10bfe004 	addi	r2,r2,-128
  80c9a4:	10800ed8 	cmpnei	r2,r2,59
  80c9a8:	1000231e 	bne	r2,zero,80ca38 <lcd_handle_escape+0x168>
    {
      ptr++;
  80c9ac:	e0bffa17 	ldw	r2,-24(fp)
  80c9b0:	10800044 	addi	r2,r2,1
  80c9b4:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80c9b8:	00000d06 	br	80c9f0 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80c9bc:	e0bffb17 	ldw	r2,-20(fp)
  80c9c0:	10c002a4 	muli	r3,r2,10
  80c9c4:	e0bffa17 	ldw	r2,-24(fp)
  80c9c8:	10800003 	ldbu	r2,0(r2)
  80c9cc:	10803fcc 	andi	r2,r2,255
  80c9d0:	1080201c 	xori	r2,r2,128
  80c9d4:	10bfe004 	addi	r2,r2,-128
  80c9d8:	1885883a 	add	r2,r3,r2
  80c9dc:	10bff404 	addi	r2,r2,-48
  80c9e0:	e0bffb15 	stw	r2,-20(fp)
  80c9e4:	e0bffa17 	ldw	r2,-24(fp)
  80c9e8:	10800044 	addi	r2,r2,1
  80c9ec:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80c9f0:	e0bffa17 	ldw	r2,-24(fp)
  80c9f4:	10800003 	ldbu	r2,0(r2)
  80c9f8:	10803fcc 	andi	r2,r2,255
  80c9fc:	1080201c 	xori	r2,r2,128
  80ca00:	10bfe004 	addi	r2,r2,-128
  80ca04:	1007883a 	mov	r3,r2
  80ca08:	00802074 	movhi	r2,129
  80ca0c:	1083d804 	addi	r2,r2,3936
  80ca10:	10800017 	ldw	r2,0(r2)
  80ca14:	1885883a 	add	r2,r3,r2
  80ca18:	10800003 	ldbu	r2,0(r2)
  80ca1c:	10803fcc 	andi	r2,r2,255
  80ca20:	1080010c 	andi	r2,r2,4
  80ca24:	1004c03a 	cmpne	r2,r2,zero
  80ca28:	103fe41e 	bne	r2,zero,80c9bc <lcd_handle_escape+0xec>
  80ca2c:	00000206 	br	80ca38 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80ca30:	00bfffc4 	movi	r2,-1
  80ca34:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80ca38:	e0bffe07 	ldb	r2,-8(fp)
  80ca3c:	e0bfff15 	stw	r2,-4(fp)
  80ca40:	e0ffff17 	ldw	r3,-4(fp)
  80ca44:	188012a0 	cmpeqi	r2,r3,74
  80ca48:	10002f1e 	bne	r2,zero,80cb08 <lcd_handle_escape+0x238>
  80ca4c:	e0ffff17 	ldw	r3,-4(fp)
  80ca50:	188012c8 	cmpgei	r2,r3,75
  80ca54:	1000041e 	bne	r2,zero,80ca68 <lcd_handle_escape+0x198>
  80ca58:	e0ffff17 	ldw	r3,-4(fp)
  80ca5c:	18801220 	cmpeqi	r2,r3,72
  80ca60:	1000081e 	bne	r2,zero,80ca84 <lcd_handle_escape+0x1b4>
  80ca64:	00004906 	br	80cb8c <lcd_handle_escape+0x2bc>
  80ca68:	e0ffff17 	ldw	r3,-4(fp)
  80ca6c:	188012e0 	cmpeqi	r2,r3,75
  80ca70:	10002b1e 	bne	r2,zero,80cb20 <lcd_handle_escape+0x250>
  80ca74:	e0ffff17 	ldw	r3,-4(fp)
  80ca78:	188019a0 	cmpeqi	r2,r3,102
  80ca7c:	1000011e 	bne	r2,zero,80ca84 <lcd_handle_escape+0x1b4>
  80ca80:	00004206 	br	80cb8c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80ca84:	e0bffb17 	ldw	r2,-20(fp)
  80ca88:	10800050 	cmplti	r2,r2,1
  80ca8c:	1000051e 	bne	r2,zero,80caa4 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  80ca90:	e0bffb17 	ldw	r2,-20(fp)
  80ca94:	10bfffc4 	addi	r2,r2,-1
  80ca98:	1007883a 	mov	r3,r2
  80ca9c:	e0bffd17 	ldw	r2,-12(fp)
  80caa0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80caa4:	e0bffc17 	ldw	r2,-16(fp)
  80caa8:	10800050 	cmplti	r2,r2,1
  80caac:	1000371e 	bne	r2,zero,80cb8c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  80cab0:	e0bffc17 	ldw	r2,-16(fp)
  80cab4:	10bfffc4 	addi	r2,r2,-1
  80cab8:	1007883a 	mov	r3,r2
  80cabc:	e0bffd17 	ldw	r2,-12(fp)
  80cac0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80cac4:	e0bffd17 	ldw	r2,-12(fp)
  80cac8:	10800883 	ldbu	r2,34(r2)
  80cacc:	10803fcc 	andi	r2,r2,255
  80cad0:	10800170 	cmpltui	r2,r2,5
  80cad4:	1000061e 	bne	r2,zero,80caf0 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  80cad8:	e0fffd17 	ldw	r3,-12(fp)
  80cadc:	00800104 	movi	r2,4
  80cae0:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  80cae4:	00000206 	br	80caf0 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  80cae8:	e13ffd17 	ldw	r4,-12(fp)
  80caec:	080c8080 	call	80c808 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80caf0:	e0bffd17 	ldw	r2,-12(fp)
  80caf4:	10800883 	ldbu	r2,34(r2)
  80caf8:	10803fcc 	andi	r2,r2,255
  80cafc:	108000e8 	cmpgeui	r2,r2,3
  80cb00:	103ff91e 	bne	r2,zero,80cae8 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  80cb04:	00002106 	br	80cb8c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80cb08:	e0bffc17 	ldw	r2,-16(fp)
  80cb0c:	10800098 	cmpnei	r2,r2,2
  80cb10:	10001e1e 	bne	r2,zero,80cb8c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  80cb14:	e13ffd17 	ldw	r4,-12(fp)
  80cb18:	080c5580 	call	80c558 <lcd_clear_screen>
    break;
  80cb1c:	00001b06 	br	80cb8c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80cb20:	e0bffc17 	ldw	r2,-16(fp)
  80cb24:	10800048 	cmpgei	r2,r2,1
  80cb28:	1000181e 	bne	r2,zero,80cb8c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80cb2c:	e0bffd17 	ldw	r2,-12(fp)
  80cb30:	10800843 	ldbu	r2,33(r2)
  80cb34:	10803fcc 	andi	r2,r2,255
  80cb38:	10801428 	cmpgeui	r2,r2,80
  80cb3c:	1000131e 	bne	r2,zero,80cb8c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80cb40:	e0bffd17 	ldw	r2,-12(fp)
  80cb44:	10800883 	ldbu	r2,34(r2)
  80cb48:	10803fcc 	andi	r2,r2,255
  80cb4c:	10801924 	muli	r2,r2,100
  80cb50:	10c01004 	addi	r3,r2,64
  80cb54:	e0bffd17 	ldw	r2,-12(fp)
  80cb58:	1887883a 	add	r3,r3,r2
  80cb5c:	e0bffd17 	ldw	r2,-12(fp)
  80cb60:	10800843 	ldbu	r2,33(r2)
  80cb64:	10803fcc 	andi	r2,r2,255
  80cb68:	1889883a 	add	r4,r3,r2
  80cb6c:	e0bffd17 	ldw	r2,-12(fp)
  80cb70:	10800843 	ldbu	r2,33(r2)
  80cb74:	10c03fcc 	andi	r3,r2,255
  80cb78:	00801404 	movi	r2,80
  80cb7c:	10c5c83a 	sub	r2,r2,r3
  80cb80:	100d883a 	mov	r6,r2
  80cb84:	01400804 	movi	r5,32
  80cb88:	08024640 	call	802464 <memset>
    }
    break;
  }
}
  80cb8c:	e037883a 	mov	sp,fp
  80cb90:	dfc00117 	ldw	ra,4(sp)
  80cb94:	df000017 	ldw	fp,0(sp)
  80cb98:	dec00204 	addi	sp,sp,8
  80cb9c:	f800283a 	ret

0080cba0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80cba0:	defff204 	addi	sp,sp,-56
  80cba4:	dfc00d15 	stw	ra,52(sp)
  80cba8:	df000c15 	stw	fp,48(sp)
  80cbac:	dc000b15 	stw	r16,44(sp)
  80cbb0:	df000b04 	addi	fp,sp,44
  80cbb4:	e13ffc15 	stw	r4,-16(fp)
  80cbb8:	e17ffd15 	stw	r5,-12(fp)
  80cbbc:	e1bffe15 	stw	r6,-8(fp)
  80cbc0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80cbc4:	e0bffe17 	ldw	r2,-8(fp)
  80cbc8:	1007883a 	mov	r3,r2
  80cbcc:	e0bffd17 	ldw	r2,-12(fp)
  80cbd0:	10c5883a 	add	r2,r2,r3
  80cbd4:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80cbd8:	e0fffc17 	ldw	r3,-16(fp)
  80cbdc:	00800044 	movi	r2,1
  80cbe0:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  80cbe4:	0000a206 	br	80ce70 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  80cbe8:	e0bffd17 	ldw	r2,-12(fp)
  80cbec:	10800003 	ldbu	r2,0(r2)
  80cbf0:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  80cbf4:	e0bffc17 	ldw	r2,-16(fp)
  80cbf8:	10800903 	ldbu	r2,36(r2)
  80cbfc:	10803fcc 	andi	r2,r2,255
  80cc00:	1080201c 	xori	r2,r2,128
  80cc04:	10bfe004 	addi	r2,r2,-128
  80cc08:	1004803a 	cmplt	r2,r2,zero
  80cc0c:	10003b1e 	bne	r2,zero,80ccfc <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  80cc10:	e0bffc17 	ldw	r2,-16(fp)
  80cc14:	10800903 	ldbu	r2,36(r2)
  80cc18:	10803fcc 	andi	r2,r2,255
  80cc1c:	1080201c 	xori	r2,r2,128
  80cc20:	10bfe004 	addi	r2,r2,-128
  80cc24:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80cc28:	e0bff717 	ldw	r2,-36(fp)
  80cc2c:	1004c03a 	cmpne	r2,r2,zero
  80cc30:	1000031e 	bne	r2,zero,80cc40 <altera_avalon_lcd_16207_write+0xa0>
  80cc34:	e0bff807 	ldb	r2,-32(fp)
  80cc38:	108016d8 	cmpnei	r2,r2,91
  80cc3c:	1000111e 	bne	r2,zero,80cc84 <altera_avalon_lcd_16207_write+0xe4>
  80cc40:	e0bff717 	ldw	r2,-36(fp)
  80cc44:	1005003a 	cmpeq	r2,r2,zero
  80cc48:	10001a1e 	bne	r2,zero,80ccb4 <altera_avalon_lcd_16207_write+0x114>
  80cc4c:	e0bff807 	ldb	r2,-32(fp)
  80cc50:	1007883a 	mov	r3,r2
  80cc54:	00802074 	movhi	r2,129
  80cc58:	1083d804 	addi	r2,r2,3936
  80cc5c:	10800017 	ldw	r2,0(r2)
  80cc60:	1885883a 	add	r2,r3,r2
  80cc64:	10800003 	ldbu	r2,0(r2)
  80cc68:	10803fcc 	andi	r2,r2,255
  80cc6c:	1080010c 	andi	r2,r2,4
  80cc70:	1004c03a 	cmpne	r2,r2,zero
  80cc74:	10000f1e 	bne	r2,zero,80ccb4 <altera_avalon_lcd_16207_write+0x114>
  80cc78:	e0bff807 	ldb	r2,-32(fp)
  80cc7c:	10800ee0 	cmpeqi	r2,r2,59
  80cc80:	10000c1e 	bne	r2,zero,80ccb4 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  80cc84:	e0fff717 	ldw	r3,-36(fp)
  80cc88:	e0bffc17 	ldw	r2,-16(fp)
  80cc8c:	1885883a 	add	r2,r3,r2
  80cc90:	10800a04 	addi	r2,r2,40
  80cc94:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80cc98:	e17ff807 	ldb	r5,-32(fp)
  80cc9c:	e13ffc17 	ldw	r4,-16(fp)
  80cca0:	080c8d00 	call	80c8d0 <lcd_handle_escape>

        sp->esccount = -1;
  80cca4:	e0fffc17 	ldw	r3,-16(fp)
  80cca8:	00bfffc4 	movi	r2,-1
  80ccac:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80ccb0:	00006c06 	br	80ce64 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80ccb4:	e0bffc17 	ldw	r2,-16(fp)
  80ccb8:	10800903 	ldbu	r2,36(r2)
  80ccbc:	10803fcc 	andi	r2,r2,255
  80ccc0:	108001e8 	cmpgeui	r2,r2,7
  80ccc4:	1000671e 	bne	r2,zero,80ce64 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  80ccc8:	e0fff717 	ldw	r3,-36(fp)
  80cccc:	e0bffc17 	ldw	r2,-16(fp)
  80ccd0:	1885883a 	add	r2,r3,r2
  80ccd4:	10c00a04 	addi	r3,r2,40
  80ccd8:	e0bff803 	ldbu	r2,-32(fp)
  80ccdc:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  80cce0:	e0bffc17 	ldw	r2,-16(fp)
  80cce4:	10800903 	ldbu	r2,36(r2)
  80cce8:	10800044 	addi	r2,r2,1
  80ccec:	1007883a 	mov	r3,r2
  80ccf0:	e0bffc17 	ldw	r2,-16(fp)
  80ccf4:	10c00905 	stb	r3,36(r2)
  80ccf8:	00005a06 	br	80ce64 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  80ccfc:	e0bff807 	ldb	r2,-32(fp)
  80cd00:	108006d8 	cmpnei	r2,r2,27
  80cd04:	1000031e 	bne	r2,zero,80cd14 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  80cd08:	e0bffc17 	ldw	r2,-16(fp)
  80cd0c:	10000905 	stb	zero,36(r2)
  80cd10:	00005406 	br	80ce64 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  80cd14:	e0bff807 	ldb	r2,-32(fp)
  80cd18:	10800358 	cmpnei	r2,r2,13
  80cd1c:	1000031e 	bne	r2,zero,80cd2c <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  80cd20:	e0bffc17 	ldw	r2,-16(fp)
  80cd24:	10000845 	stb	zero,33(r2)
  80cd28:	00004e06 	br	80ce64 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  80cd2c:	e0bff807 	ldb	r2,-32(fp)
  80cd30:	10800298 	cmpnei	r2,r2,10
  80cd34:	1000101e 	bne	r2,zero,80cd78 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  80cd38:	e0bffc17 	ldw	r2,-16(fp)
  80cd3c:	10000845 	stb	zero,33(r2)
      sp->y++;
  80cd40:	e0bffc17 	ldw	r2,-16(fp)
  80cd44:	10800883 	ldbu	r2,34(r2)
  80cd48:	10800044 	addi	r2,r2,1
  80cd4c:	1007883a 	mov	r3,r2
  80cd50:	e0bffc17 	ldw	r2,-16(fp)
  80cd54:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80cd58:	e0bffc17 	ldw	r2,-16(fp)
  80cd5c:	10800883 	ldbu	r2,34(r2)
  80cd60:	10803fcc 	andi	r2,r2,255
  80cd64:	108000f0 	cmpltui	r2,r2,3
  80cd68:	10003e1e 	bne	r2,zero,80ce64 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  80cd6c:	e13ffc17 	ldw	r4,-16(fp)
  80cd70:	080c8080 	call	80c808 <lcd_scroll_up>
  80cd74:	00003b06 	br	80ce64 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  80cd78:	e0bff807 	ldb	r2,-32(fp)
  80cd7c:	10800218 	cmpnei	r2,r2,8
  80cd80:	10000c1e 	bne	r2,zero,80cdb4 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  80cd84:	e0bffc17 	ldw	r2,-16(fp)
  80cd88:	10800843 	ldbu	r2,33(r2)
  80cd8c:	10803fcc 	andi	r2,r2,255
  80cd90:	1005003a 	cmpeq	r2,r2,zero
  80cd94:	1000331e 	bne	r2,zero,80ce64 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  80cd98:	e0bffc17 	ldw	r2,-16(fp)
  80cd9c:	10800843 	ldbu	r2,33(r2)
  80cda0:	10bfffc4 	addi	r2,r2,-1
  80cda4:	1007883a 	mov	r3,r2
  80cda8:	e0bffc17 	ldw	r2,-16(fp)
  80cdac:	10c00845 	stb	r3,33(r2)
  80cdb0:	00002c06 	br	80ce64 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  80cdb4:	e0bff807 	ldb	r2,-32(fp)
  80cdb8:	1007883a 	mov	r3,r2
  80cdbc:	00802074 	movhi	r2,129
  80cdc0:	1083d804 	addi	r2,r2,3936
  80cdc4:	10800017 	ldw	r2,0(r2)
  80cdc8:	1885883a 	add	r2,r3,r2
  80cdcc:	10800003 	ldbu	r2,0(r2)
  80cdd0:	10803fcc 	andi	r2,r2,255
  80cdd4:	1080201c 	xori	r2,r2,128
  80cdd8:	10bfe004 	addi	r2,r2,-128
  80cddc:	108025cc 	andi	r2,r2,151
  80cde0:	1005003a 	cmpeq	r2,r2,zero
  80cde4:	10001f1e 	bne	r2,zero,80ce64 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80cde8:	e0bffc17 	ldw	r2,-16(fp)
  80cdec:	10800883 	ldbu	r2,34(r2)
  80cdf0:	10803fcc 	andi	r2,r2,255
  80cdf4:	108000b0 	cmpltui	r2,r2,2
  80cdf8:	1000021e 	bne	r2,zero,80ce04 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  80cdfc:	e13ffc17 	ldw	r4,-16(fp)
  80ce00:	080c8080 	call	80c808 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80ce04:	e0bffc17 	ldw	r2,-16(fp)
  80ce08:	10800843 	ldbu	r2,33(r2)
  80ce0c:	10803fcc 	andi	r2,r2,255
  80ce10:	10801428 	cmpgeui	r2,r2,80
  80ce14:	10000d1e 	bne	r2,zero,80ce4c <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  80ce18:	e0bffc17 	ldw	r2,-16(fp)
  80ce1c:	10800883 	ldbu	r2,34(r2)
  80ce20:	11003fcc 	andi	r4,r2,255
  80ce24:	e0bffc17 	ldw	r2,-16(fp)
  80ce28:	10800843 	ldbu	r2,33(r2)
  80ce2c:	11403fcc 	andi	r5,r2,255
  80ce30:	e0fffc17 	ldw	r3,-16(fp)
  80ce34:	20801924 	muli	r2,r4,100
  80ce38:	10c5883a 	add	r2,r2,r3
  80ce3c:	1145883a 	add	r2,r2,r5
  80ce40:	10c01004 	addi	r3,r2,64
  80ce44:	e0bff803 	ldbu	r2,-32(fp)
  80ce48:	18800005 	stb	r2,0(r3)

      sp->x++;
  80ce4c:	e0bffc17 	ldw	r2,-16(fp)
  80ce50:	10800843 	ldbu	r2,33(r2)
  80ce54:	10800044 	addi	r2,r2,1
  80ce58:	1007883a 	mov	r3,r2
  80ce5c:	e0bffc17 	ldw	r2,-16(fp)
  80ce60:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80ce64:	e0bffd17 	ldw	r2,-12(fp)
  80ce68:	10800044 	addi	r2,r2,1
  80ce6c:	e0bffd15 	stw	r2,-12(fp)
  80ce70:	e0fffd17 	ldw	r3,-12(fp)
  80ce74:	e0bffb17 	ldw	r2,-20(fp)
  80ce78:	18bf5b36 	bltu	r3,r2,80cbe8 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80ce7c:	00800404 	movi	r2,16
  80ce80:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ce84:	e03ffa15 	stw	zero,-24(fp)
  80ce88:	00003606 	br	80cf64 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80ce8c:	00801404 	movi	r2,80
  80ce90:	e0bff615 	stw	r2,-40(fp)
  80ce94:	00001106 	br	80cedc <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  80ce98:	e13ffa17 	ldw	r4,-24(fp)
  80ce9c:	e0bff617 	ldw	r2,-40(fp)
  80cea0:	117fffc4 	addi	r5,r2,-1
  80cea4:	e0fffc17 	ldw	r3,-16(fp)
  80cea8:	20801924 	muli	r2,r4,100
  80ceac:	10c5883a 	add	r2,r2,r3
  80ceb0:	1145883a 	add	r2,r2,r5
  80ceb4:	10801004 	addi	r2,r2,64
  80ceb8:	10800003 	ldbu	r2,0(r2)
  80cebc:	10803fcc 	andi	r2,r2,255
  80cec0:	1080201c 	xori	r2,r2,128
  80cec4:	10bfe004 	addi	r2,r2,-128
  80cec8:	10800818 	cmpnei	r2,r2,32
  80cecc:	1000061e 	bne	r2,zero,80cee8 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80ced0:	e0bff617 	ldw	r2,-40(fp)
  80ced4:	10bfffc4 	addi	r2,r2,-1
  80ced8:	e0bff615 	stw	r2,-40(fp)
  80cedc:	e0bff617 	ldw	r2,-40(fp)
  80cee0:	10800048 	cmpgei	r2,r2,1
  80cee4:	103fec1e 	bne	r2,zero,80ce98 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80cee8:	e0bff617 	ldw	r2,-40(fp)
  80ceec:	10800448 	cmpgei	r2,r2,17
  80cef0:	1000031e 	bne	r2,zero,80cf00 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  80cef4:	00800404 	movi	r2,16
  80cef8:	e0bff615 	stw	r2,-40(fp)
  80cefc:	00000306 	br	80cf0c <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  80cf00:	e0bff617 	ldw	r2,-40(fp)
  80cf04:	10800044 	addi	r2,r2,1
  80cf08:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  80cf0c:	e13ffa17 	ldw	r4,-24(fp)
  80cf10:	e0bff617 	ldw	r2,-40(fp)
  80cf14:	100b883a 	mov	r5,r2
  80cf18:	e0fffc17 	ldw	r3,-16(fp)
  80cf1c:	20801924 	muli	r2,r4,100
  80cf20:	10c5883a 	add	r2,r2,r3
  80cf24:	10802404 	addi	r2,r2,144
  80cf28:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  80cf2c:	e0fff917 	ldw	r3,-28(fp)
  80cf30:	e0bff617 	ldw	r2,-40(fp)
  80cf34:	1880020e 	bge	r3,r2,80cf40 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  80cf38:	e0bff617 	ldw	r2,-40(fp)
  80cf3c:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80cf40:	e0bffa17 	ldw	r2,-24(fp)
  80cf44:	e0fffc17 	ldw	r3,-16(fp)
  80cf48:	10801924 	muli	r2,r2,100
  80cf4c:	10c5883a 	add	r2,r2,r3
  80cf50:	10802404 	addi	r2,r2,144
  80cf54:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cf58:	e0bffa17 	ldw	r2,-24(fp)
  80cf5c:	10800044 	addi	r2,r2,1
  80cf60:	e0bffa15 	stw	r2,-24(fp)
  80cf64:	e0bffa17 	ldw	r2,-24(fp)
  80cf68:	10800090 	cmplti	r2,r2,2
  80cf6c:	103fc71e 	bne	r2,zero,80ce8c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80cf70:	e0bff917 	ldw	r2,-28(fp)
  80cf74:	10800448 	cmpgei	r2,r2,17
  80cf78:	1000031e 	bne	r2,zero,80cf88 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  80cf7c:	e0bffc17 	ldw	r2,-16(fp)
  80cf80:	10000985 	stb	zero,38(r2)
  80cf84:	00002d06 	br	80d03c <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  80cf88:	e0bff917 	ldw	r2,-28(fp)
  80cf8c:	1085883a 	add	r2,r2,r2
  80cf90:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  80cf94:	e0bff917 	ldw	r2,-28(fp)
  80cf98:	1007883a 	mov	r3,r2
  80cf9c:	e0bffc17 	ldw	r2,-16(fp)
  80cfa0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80cfa4:	e03ffa15 	stw	zero,-24(fp)
  80cfa8:	00002106 	br	80d030 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80cfac:	e0bffa17 	ldw	r2,-24(fp)
  80cfb0:	e0fffc17 	ldw	r3,-16(fp)
  80cfb4:	10801924 	muli	r2,r2,100
  80cfb8:	10c5883a 	add	r2,r2,r3
  80cfbc:	10802404 	addi	r2,r2,144
  80cfc0:	10800043 	ldbu	r2,1(r2)
  80cfc4:	10803fcc 	andi	r2,r2,255
  80cfc8:	1080201c 	xori	r2,r2,128
  80cfcc:	10bfe004 	addi	r2,r2,-128
  80cfd0:	10800450 	cmplti	r2,r2,17
  80cfd4:	1000131e 	bne	r2,zero,80d024 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80cfd8:	e43ffa17 	ldw	r16,-24(fp)
  80cfdc:	e0bffa17 	ldw	r2,-24(fp)
  80cfe0:	e0fffc17 	ldw	r3,-16(fp)
  80cfe4:	10801924 	muli	r2,r2,100
  80cfe8:	10c5883a 	add	r2,r2,r3
  80cfec:	10802404 	addi	r2,r2,144
  80cff0:	10800043 	ldbu	r2,1(r2)
  80cff4:	10803fcc 	andi	r2,r2,255
  80cff8:	1080201c 	xori	r2,r2,128
  80cffc:	10bfe004 	addi	r2,r2,-128
  80d000:	1008923a 	slli	r4,r2,8
  80d004:	e17ff917 	ldw	r5,-28(fp)
  80d008:	08008a80 	call	8008a8 <__divsi3>
  80d00c:	1009883a 	mov	r4,r2
  80d010:	e0fffc17 	ldw	r3,-16(fp)
  80d014:	80801924 	muli	r2,r16,100
  80d018:	10c5883a 	add	r2,r2,r3
  80d01c:	10802404 	addi	r2,r2,144
  80d020:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80d024:	e0bffa17 	ldw	r2,-24(fp)
  80d028:	10800044 	addi	r2,r2,1
  80d02c:	e0bffa15 	stw	r2,-24(fp)
  80d030:	e0bffa17 	ldw	r2,-24(fp)
  80d034:	10800090 	cmplti	r2,r2,2
  80d038:	103fdc1e 	bne	r2,zero,80cfac <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80d03c:	e0bffc17 	ldw	r2,-16(fp)
  80d040:	10800943 	ldbu	r2,37(r2)
  80d044:	10803fcc 	andi	r2,r2,255
  80d048:	1080201c 	xori	r2,r2,128
  80d04c:	10bfe004 	addi	r2,r2,-128
  80d050:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  80d054:	e13ffc17 	ldw	r4,-16(fp)
  80d058:	080c61c0 	call	80c61c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80d05c:	e0bffc17 	ldw	r2,-16(fp)
  80d060:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80d064:	e0bffc17 	ldw	r2,-16(fp)
  80d068:	10800943 	ldbu	r2,37(r2)
  80d06c:	10c03fcc 	andi	r3,r2,255
  80d070:	18c0201c 	xori	r3,r3,128
  80d074:	18ffe004 	addi	r3,r3,-128
  80d078:	e0bff517 	ldw	r2,-44(fp)
  80d07c:	18800426 	beq	r3,r2,80d090 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80d080:	e0fffc17 	ldw	r3,-16(fp)
  80d084:	00800044 	movi	r2,1
  80d088:	188009c5 	stb	r2,39(r3)
  }
  80d08c:	003feb06 	br	80d03c <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80d090:	e0bffe17 	ldw	r2,-8(fp)
}
  80d094:	e037883a 	mov	sp,fp
  80d098:	dfc00217 	ldw	ra,8(sp)
  80d09c:	df000117 	ldw	fp,4(sp)
  80d0a0:	dc000017 	ldw	r16,0(sp)
  80d0a4:	dec00304 	addi	sp,sp,12
  80d0a8:	f800283a 	ret

0080d0ac <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80d0ac:	defffc04 	addi	sp,sp,-16
  80d0b0:	dfc00315 	stw	ra,12(sp)
  80d0b4:	df000215 	stw	fp,8(sp)
  80d0b8:	df000204 	addi	fp,sp,8
  80d0bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80d0c0:	e0bfff17 	ldw	r2,-4(fp)
  80d0c4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80d0c8:	e0bffe17 	ldw	r2,-8(fp)
  80d0cc:	10800943 	ldbu	r2,37(r2)
  80d0d0:	10803fcc 	andi	r2,r2,255
  80d0d4:	1080201c 	xori	r2,r2,128
  80d0d8:	10bfe004 	addi	r2,r2,-128
  80d0dc:	10c00044 	addi	r3,r2,1
  80d0e0:	e0bffe17 	ldw	r2,-8(fp)
  80d0e4:	10800983 	ldbu	r2,38(r2)
  80d0e8:	10803fcc 	andi	r2,r2,255
  80d0ec:	1080201c 	xori	r2,r2,128
  80d0f0:	10bfe004 	addi	r2,r2,-128
  80d0f4:	18800316 	blt	r3,r2,80d104 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  80d0f8:	e0bffe17 	ldw	r2,-8(fp)
  80d0fc:	10000945 	stb	zero,37(r2)
  80d100:	00000606 	br	80d11c <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80d104:	e0bffe17 	ldw	r2,-8(fp)
  80d108:	10800943 	ldbu	r2,37(r2)
  80d10c:	10800044 	addi	r2,r2,1
  80d110:	1007883a 	mov	r3,r2
  80d114:	e0bffe17 	ldw	r2,-8(fp)
  80d118:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80d11c:	e0bffe17 	ldw	r2,-8(fp)
  80d120:	10800983 	ldbu	r2,38(r2)
  80d124:	10803fcc 	andi	r2,r2,255
  80d128:	1080201c 	xori	r2,r2,128
  80d12c:	10bfe004 	addi	r2,r2,-128
  80d130:	10800050 	cmplti	r2,r2,1
  80d134:	1000091e 	bne	r2,zero,80d15c <alt_lcd_16207_timeout+0xb0>
  80d138:	e0bffe17 	ldw	r2,-8(fp)
  80d13c:	108009c3 	ldbu	r2,39(r2)
  80d140:	10803fcc 	andi	r2,r2,255
  80d144:	1080201c 	xori	r2,r2,128
  80d148:	10bfe004 	addi	r2,r2,-128
  80d14c:	1004c03a 	cmpne	r2,r2,zero
  80d150:	1000021e 	bne	r2,zero,80d15c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  80d154:	e13ffe17 	ldw	r4,-8(fp)
  80d158:	080c61c0 	call	80c61c <lcd_repaint_screen>

  return sp->period;
  80d15c:	e0bffe17 	ldw	r2,-8(fp)
  80d160:	10800717 	ldw	r2,28(r2)
}
  80d164:	e037883a 	mov	sp,fp
  80d168:	dfc00117 	ldw	ra,4(sp)
  80d16c:	df000017 	ldw	fp,0(sp)
  80d170:	dec00204 	addi	sp,sp,8
  80d174:	f800283a 	ret

0080d178 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80d178:	defffc04 	addi	sp,sp,-16
  80d17c:	dfc00315 	stw	ra,12(sp)
  80d180:	df000215 	stw	fp,8(sp)
  80d184:	df000204 	addi	fp,sp,8
  80d188:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80d18c:	e0bfff17 	ldw	r2,-4(fp)
  80d190:	10800017 	ldw	r2,0(r2)
  80d194:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80d198:	e0bfff17 	ldw	r2,-4(fp)
  80d19c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80d1a0:	010ea604 	movi	r4,15000
  80d1a4:	080e6800 	call	80e680 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d1a8:	e0bffe17 	ldw	r2,-8(fp)
  80d1ac:	1007883a 	mov	r3,r2
  80d1b0:	00800c04 	movi	r2,48
  80d1b4:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80d1b8:	01040104 	movi	r4,4100
  80d1bc:	080e6800 	call	80e680 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d1c0:	e0bffe17 	ldw	r2,-8(fp)
  80d1c4:	1007883a 	mov	r3,r2
  80d1c8:	00800c04 	movi	r2,48
  80d1cc:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80d1d0:	0100fa04 	movi	r4,1000
  80d1d4:	080e6800 	call	80e680 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80d1d8:	e0bffe17 	ldw	r2,-8(fp)
  80d1dc:	1007883a 	mov	r3,r2
  80d1e0:	00800c04 	movi	r2,48
  80d1e4:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80d1e8:	e13fff17 	ldw	r4,-4(fp)
  80d1ec:	01400e04 	movi	r5,56
  80d1f0:	080c3cc0 	call	80c3cc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80d1f4:	e13fff17 	ldw	r4,-4(fp)
  80d1f8:	01400204 	movi	r5,8
  80d1fc:	080c3cc0 	call	80c3cc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80d200:	e13fff17 	ldw	r4,-4(fp)
  80d204:	080c5580 	call	80c558 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80d208:	e13fff17 	ldw	r4,-4(fp)
  80d20c:	01400184 	movi	r5,6
  80d210:	080c3cc0 	call	80c3cc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80d214:	e13fff17 	ldw	r4,-4(fp)
  80d218:	01400304 	movi	r5,12
  80d21c:	080c3cc0 	call	80c3cc <lcd_write_command>

  sp->esccount = -1;
  80d220:	e0ffff17 	ldw	r3,-4(fp)
  80d224:	00bfffc4 	movi	r2,-1
  80d228:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  80d22c:	e0bfff17 	ldw	r2,-4(fp)
  80d230:	11000a04 	addi	r4,r2,40
  80d234:	000b883a 	mov	r5,zero
  80d238:	01800204 	movi	r6,8
  80d23c:	08024640 	call	802464 <memset>

  sp->scrollpos = 0;
  80d240:	e0bfff17 	ldw	r2,-4(fp)
  80d244:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80d248:	e0bfff17 	ldw	r2,-4(fp)
  80d24c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80d250:	e0bfff17 	ldw	r2,-4(fp)
  80d254:	100009c5 	stb	zero,39(r2)
  80d258:	00802074 	movhi	r2,129
  80d25c:	108b1204 	addi	r2,r2,11336
  80d260:	10800017 	ldw	r2,0(r2)
  80d264:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80d268:	01400284 	movi	r5,10
  80d26c:	08009680 	call	800968 <__udivsi3>
  80d270:	1007883a 	mov	r3,r2
  80d274:	e0bfff17 	ldw	r2,-4(fp)
  80d278:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80d27c:	e0bfff17 	ldw	r2,-4(fp)
  80d280:	11000104 	addi	r4,r2,4
  80d284:	e0bfff17 	ldw	r2,-4(fp)
  80d288:	10800717 	ldw	r2,28(r2)
  80d28c:	100b883a 	mov	r5,r2
  80d290:	01802074 	movhi	r6,129
  80d294:	31b42b04 	addi	r6,r6,-12116
  80d298:	e1ffff17 	ldw	r7,-4(fp)
  80d29c:	080a7840 	call	80a784 <alt_alarm_start>
}
  80d2a0:	e037883a 	mov	sp,fp
  80d2a4:	dfc00117 	ldw	ra,4(sp)
  80d2a8:	df000017 	ldw	fp,0(sp)
  80d2ac:	dec00204 	addi	sp,sp,8
  80d2b0:	f800283a 	ret

0080d2b4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d2b4:	defffa04 	addi	sp,sp,-24
  80d2b8:	dfc00515 	stw	ra,20(sp)
  80d2bc:	df000415 	stw	fp,16(sp)
  80d2c0:	df000404 	addi	fp,sp,16
  80d2c4:	e13ffd15 	stw	r4,-12(fp)
  80d2c8:	e17ffe15 	stw	r5,-8(fp)
  80d2cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80d2d0:	e0bffd17 	ldw	r2,-12(fp)
  80d2d4:	10800017 	ldw	r2,0(r2)
  80d2d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80d2dc:	e0bffc17 	ldw	r2,-16(fp)
  80d2e0:	11000a04 	addi	r4,r2,40
  80d2e4:	e0bffd17 	ldw	r2,-12(fp)
  80d2e8:	11c00217 	ldw	r7,8(r2)
  80d2ec:	e17ffe17 	ldw	r5,-8(fp)
  80d2f0:	e1bfff17 	ldw	r6,-4(fp)
  80d2f4:	080cba00 	call	80cba0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80d2f8:	e037883a 	mov	sp,fp
  80d2fc:	dfc00117 	ldw	ra,4(sp)
  80d300:	df000017 	ldw	fp,0(sp)
  80d304:	dec00204 	addi	sp,sp,8
  80d308:	f800283a 	ret

0080d30c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80d30c:	defffa04 	addi	sp,sp,-24
  80d310:	dfc00515 	stw	ra,20(sp)
  80d314:	df000415 	stw	fp,16(sp)
  80d318:	df000404 	addi	fp,sp,16
  80d31c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80d320:	e0bfff17 	ldw	r2,-4(fp)
  80d324:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80d328:	e0bfff17 	ldw	r2,-4(fp)
  80d32c:	10800104 	addi	r2,r2,4
  80d330:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d334:	0005303a 	rdctl	r2,status
  80d338:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d33c:	e0fffd17 	ldw	r3,-12(fp)
  80d340:	00bfff84 	movi	r2,-2
  80d344:	1884703a 	and	r2,r3,r2
  80d348:	1001703a 	wrctl	status,r2
  
  return context;
  80d34c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80d350:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80d354:	080b5940 	call	80b594 <alt_tick>
  80d358:	e0bffe17 	ldw	r2,-8(fp)
  80d35c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d360:	e0bffc17 	ldw	r2,-16(fp)
  80d364:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80d368:	e037883a 	mov	sp,fp
  80d36c:	dfc00117 	ldw	ra,4(sp)
  80d370:	df000017 	ldw	fp,0(sp)
  80d374:	dec00204 	addi	sp,sp,8
  80d378:	f800283a 	ret

0080d37c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80d37c:	defff804 	addi	sp,sp,-32
  80d380:	dfc00715 	stw	ra,28(sp)
  80d384:	df000615 	stw	fp,24(sp)
  80d388:	df000604 	addi	fp,sp,24
  80d38c:	e13ffc15 	stw	r4,-16(fp)
  80d390:	e17ffd15 	stw	r5,-12(fp)
  80d394:	e1bffe15 	stw	r6,-8(fp)
  80d398:	e1ffff15 	stw	r7,-4(fp)
  80d39c:	e0bfff17 	ldw	r2,-4(fp)
  80d3a0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80d3a4:	00802074 	movhi	r2,129
  80d3a8:	108b1204 	addi	r2,r2,11336
  80d3ac:	10800017 	ldw	r2,0(r2)
  80d3b0:	1004c03a 	cmpne	r2,r2,zero
  80d3b4:	1000041e 	bne	r2,zero,80d3c8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80d3b8:	00c02074 	movhi	r3,129
  80d3bc:	18cb1204 	addi	r3,r3,11336
  80d3c0:	e0bffb17 	ldw	r2,-20(fp)
  80d3c4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80d3c8:	e0bffc17 	ldw	r2,-16(fp)
  80d3cc:	10800104 	addi	r2,r2,4
  80d3d0:	1007883a 	mov	r3,r2
  80d3d4:	008001c4 	movi	r2,7
  80d3d8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80d3dc:	d8000015 	stw	zero,0(sp)
  80d3e0:	e13ffd17 	ldw	r4,-12(fp)
  80d3e4:	e17ffe17 	ldw	r5,-8(fp)
  80d3e8:	01802074 	movhi	r6,129
  80d3ec:	31b4c304 	addi	r6,r6,-11508
  80d3f0:	e1fffc17 	ldw	r7,-16(fp)
  80d3f4:	080e2780 	call	80e278 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80d3f8:	e037883a 	mov	sp,fp
  80d3fc:	dfc00117 	ldw	ra,4(sp)
  80d400:	df000017 	ldw	fp,0(sp)
  80d404:	dec00204 	addi	sp,sp,8
  80d408:	f800283a 	ret

0080d40c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d40c:	defffa04 	addi	sp,sp,-24
  80d410:	dfc00515 	stw	ra,20(sp)
  80d414:	df000415 	stw	fp,16(sp)
  80d418:	df000404 	addi	fp,sp,16
  80d41c:	e13ffd15 	stw	r4,-12(fp)
  80d420:	e17ffe15 	stw	r5,-8(fp)
  80d424:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d428:	e0bffd17 	ldw	r2,-12(fp)
  80d42c:	10800017 	ldw	r2,0(r2)
  80d430:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80d434:	e0bffc17 	ldw	r2,-16(fp)
  80d438:	11000a04 	addi	r4,r2,40
  80d43c:	e0bffd17 	ldw	r2,-12(fp)
  80d440:	11c00217 	ldw	r7,8(r2)
  80d444:	e17ffe17 	ldw	r5,-8(fp)
  80d448:	e1bfff17 	ldw	r6,-4(fp)
  80d44c:	080d9040 	call	80d904 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80d450:	e037883a 	mov	sp,fp
  80d454:	dfc00117 	ldw	ra,4(sp)
  80d458:	df000017 	ldw	fp,0(sp)
  80d45c:	dec00204 	addi	sp,sp,8
  80d460:	f800283a 	ret

0080d464 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d464:	defffa04 	addi	sp,sp,-24
  80d468:	dfc00515 	stw	ra,20(sp)
  80d46c:	df000415 	stw	fp,16(sp)
  80d470:	df000404 	addi	fp,sp,16
  80d474:	e13ffd15 	stw	r4,-12(fp)
  80d478:	e17ffe15 	stw	r5,-8(fp)
  80d47c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d480:	e0bffd17 	ldw	r2,-12(fp)
  80d484:	10800017 	ldw	r2,0(r2)
  80d488:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80d48c:	e0bffc17 	ldw	r2,-16(fp)
  80d490:	11000a04 	addi	r4,r2,40
  80d494:	e0bffd17 	ldw	r2,-12(fp)
  80d498:	11c00217 	ldw	r7,8(r2)
  80d49c:	e17ffe17 	ldw	r5,-8(fp)
  80d4a0:	e1bfff17 	ldw	r6,-4(fp)
  80d4a4:	080db940 	call	80db94 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80d4a8:	e037883a 	mov	sp,fp
  80d4ac:	dfc00117 	ldw	ra,4(sp)
  80d4b0:	df000017 	ldw	fp,0(sp)
  80d4b4:	dec00204 	addi	sp,sp,8
  80d4b8:	f800283a 	ret

0080d4bc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80d4bc:	defffc04 	addi	sp,sp,-16
  80d4c0:	dfc00315 	stw	ra,12(sp)
  80d4c4:	df000215 	stw	fp,8(sp)
  80d4c8:	df000204 	addi	fp,sp,8
  80d4cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80d4d0:	e0bfff17 	ldw	r2,-4(fp)
  80d4d4:	10800017 	ldw	r2,0(r2)
  80d4d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80d4dc:	e0bffe17 	ldw	r2,-8(fp)
  80d4e0:	11000a04 	addi	r4,r2,40
  80d4e4:	e0bfff17 	ldw	r2,-4(fp)
  80d4e8:	11400217 	ldw	r5,8(r2)
  80d4ec:	080d8a40 	call	80d8a4 <altera_avalon_uart_close>
}
  80d4f0:	e037883a 	mov	sp,fp
  80d4f4:	dfc00117 	ldw	ra,4(sp)
  80d4f8:	df000017 	ldw	fp,0(sp)
  80d4fc:	dec00204 	addi	sp,sp,8
  80d500:	f800283a 	ret

0080d504 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80d504:	defff704 	addi	sp,sp,-36
  80d508:	dfc00815 	stw	ra,32(sp)
  80d50c:	df000715 	stw	fp,28(sp)
  80d510:	df000704 	addi	fp,sp,28
  80d514:	e13ffc15 	stw	r4,-16(fp)
  80d518:	e17ffd15 	stw	r5,-12(fp)
  80d51c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  80d520:	e0bffc17 	ldw	r2,-16(fp)
  80d524:	10800017 	ldw	r2,0(r2)
  80d528:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80d52c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80d530:	1004c03a 	cmpne	r2,r2,zero
  80d534:	1000061e 	bne	r2,zero,80d550 <altera_avalon_uart_init+0x4c>
  80d538:	0005883a 	mov	r2,zero
  80d53c:	1004c03a 	cmpne	r2,r2,zero
  80d540:	1000031e 	bne	r2,zero,80d550 <altera_avalon_uart_init+0x4c>
  80d544:	0005883a 	mov	r2,zero
  80d548:	1005003a 	cmpeq	r2,r2,zero
  80d54c:	1000031e 	bne	r2,zero,80d55c <altera_avalon_uart_init+0x58>
  80d550:	00800044 	movi	r2,1
  80d554:	e0bfff15 	stw	r2,-4(fp)
  80d558:	00000106 	br	80d560 <altera_avalon_uart_init+0x5c>
  80d55c:	e03fff15 	stw	zero,-4(fp)
  80d560:	e0bfff17 	ldw	r2,-4(fp)
  80d564:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80d568:	e0bffa17 	ldw	r2,-24(fp)
  80d56c:	1004c03a 	cmpne	r2,r2,zero
  80d570:	1000111e 	bne	r2,zero,80d5b8 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80d574:	e0fffc17 	ldw	r3,-16(fp)
  80d578:	00832004 	movi	r2,3200
  80d57c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80d580:	e0bffb17 	ldw	r2,-20(fp)
  80d584:	11000304 	addi	r4,r2,12
  80d588:	e0bffc17 	ldw	r2,-16(fp)
  80d58c:	10800117 	ldw	r2,4(r2)
  80d590:	1007883a 	mov	r3,r2
  80d594:	2005883a 	mov	r2,r4
  80d598:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80d59c:	d8000015 	stw	zero,0(sp)
  80d5a0:	e13ffd17 	ldw	r4,-12(fp)
  80d5a4:	e17ffe17 	ldw	r5,-8(fp)
  80d5a8:	01802074 	movhi	r6,129
  80d5ac:	31b57304 	addi	r6,r6,-10804
  80d5b0:	e1fffc17 	ldw	r7,-16(fp)
  80d5b4:	080e2780 	call	80e278 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80d5b8:	e037883a 	mov	sp,fp
  80d5bc:	dfc00117 	ldw	ra,4(sp)
  80d5c0:	df000017 	ldw	fp,0(sp)
  80d5c4:	dec00204 	addi	sp,sp,8
  80d5c8:	f800283a 	ret

0080d5cc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80d5cc:	defffa04 	addi	sp,sp,-24
  80d5d0:	dfc00515 	stw	ra,20(sp)
  80d5d4:	df000415 	stw	fp,16(sp)
  80d5d8:	df000404 	addi	fp,sp,16
  80d5dc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80d5e0:	e0bfff17 	ldw	r2,-4(fp)
  80d5e4:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80d5e8:	e0bffd17 	ldw	r2,-12(fp)
  80d5ec:	10800017 	ldw	r2,0(r2)
  80d5f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80d5f4:	e0bffc17 	ldw	r2,-16(fp)
  80d5f8:	10800204 	addi	r2,r2,8
  80d5fc:	10800037 	ldwio	r2,0(r2)
  80d600:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80d604:	e0bffc17 	ldw	r2,-16(fp)
  80d608:	10800204 	addi	r2,r2,8
  80d60c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80d610:	e0bffc17 	ldw	r2,-16(fp)
  80d614:	10800204 	addi	r2,r2,8
  80d618:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80d61c:	e0bffe17 	ldw	r2,-8(fp)
  80d620:	1080200c 	andi	r2,r2,128
  80d624:	1005003a 	cmpeq	r2,r2,zero
  80d628:	1000031e 	bne	r2,zero,80d638 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80d62c:	e13ffd17 	ldw	r4,-12(fp)
  80d630:	e17ffe17 	ldw	r5,-8(fp)
  80d634:	080d6680 	call	80d668 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80d638:	e0bffe17 	ldw	r2,-8(fp)
  80d63c:	1081100c 	andi	r2,r2,1088
  80d640:	1005003a 	cmpeq	r2,r2,zero
  80d644:	1000031e 	bne	r2,zero,80d654 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80d648:	e13ffd17 	ldw	r4,-12(fp)
  80d64c:	e17ffe17 	ldw	r5,-8(fp)
  80d650:	080d7480 	call	80d748 <altera_avalon_uart_txirq>
  }
  

}
  80d654:	e037883a 	mov	sp,fp
  80d658:	dfc00117 	ldw	ra,4(sp)
  80d65c:	df000017 	ldw	fp,0(sp)
  80d660:	dec00204 	addi	sp,sp,8
  80d664:	f800283a 	ret

0080d668 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d668:	defffc04 	addi	sp,sp,-16
  80d66c:	df000315 	stw	fp,12(sp)
  80d670:	df000304 	addi	fp,sp,12
  80d674:	e13ffe15 	stw	r4,-8(fp)
  80d678:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80d67c:	e0bfff17 	ldw	r2,-4(fp)
  80d680:	108000cc 	andi	r2,r2,3
  80d684:	1004c03a 	cmpne	r2,r2,zero
  80d688:	10002b1e 	bne	r2,zero,80d738 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80d68c:	e0bffe17 	ldw	r2,-8(fp)
  80d690:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d694:	e0bffe17 	ldw	r2,-8(fp)
  80d698:	10800317 	ldw	r2,12(r2)
  80d69c:	10800044 	addi	r2,r2,1
  80d6a0:	10800fcc 	andi	r2,r2,63
  80d6a4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80d6a8:	e0bffe17 	ldw	r2,-8(fp)
  80d6ac:	11000317 	ldw	r4,12(r2)
  80d6b0:	e0bffe17 	ldw	r2,-8(fp)
  80d6b4:	10800017 	ldw	r2,0(r2)
  80d6b8:	10800037 	ldwio	r2,0(r2)
  80d6bc:	1007883a 	mov	r3,r2
  80d6c0:	e0bffe17 	ldw	r2,-8(fp)
  80d6c4:	2085883a 	add	r2,r4,r2
  80d6c8:	10800704 	addi	r2,r2,28
  80d6cc:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  80d6d0:	e0fffe17 	ldw	r3,-8(fp)
  80d6d4:	e0bffd17 	ldw	r2,-12(fp)
  80d6d8:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80d6dc:	e0bffe17 	ldw	r2,-8(fp)
  80d6e0:	10800317 	ldw	r2,12(r2)
  80d6e4:	10800044 	addi	r2,r2,1
  80d6e8:	10800fcc 	andi	r2,r2,63
  80d6ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80d6f0:	e0bffe17 	ldw	r2,-8(fp)
  80d6f4:	10c00217 	ldw	r3,8(r2)
  80d6f8:	e0bffd17 	ldw	r2,-12(fp)
  80d6fc:	18800e1e 	bne	r3,r2,80d738 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80d700:	e0bffe17 	ldw	r2,-8(fp)
  80d704:	10c00117 	ldw	r3,4(r2)
  80d708:	00bfdfc4 	movi	r2,-129
  80d70c:	1886703a 	and	r3,r3,r2
  80d710:	e0bffe17 	ldw	r2,-8(fp)
  80d714:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80d718:	e0bffe17 	ldw	r2,-8(fp)
  80d71c:	10800017 	ldw	r2,0(r2)
  80d720:	11000304 	addi	r4,r2,12
  80d724:	e0bffe17 	ldw	r2,-8(fp)
  80d728:	10800117 	ldw	r2,4(r2)
  80d72c:	1007883a 	mov	r3,r2
  80d730:	2005883a 	mov	r2,r4
  80d734:	10c00035 	stwio	r3,0(r2)
  }   
}
  80d738:	e037883a 	mov	sp,fp
  80d73c:	df000017 	ldw	fp,0(sp)
  80d740:	dec00104 	addi	sp,sp,4
  80d744:	f800283a 	ret

0080d748 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80d748:	defffd04 	addi	sp,sp,-12
  80d74c:	df000215 	stw	fp,8(sp)
  80d750:	df000204 	addi	fp,sp,8
  80d754:	e13ffe15 	stw	r4,-8(fp)
  80d758:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80d75c:	e0bffe17 	ldw	r2,-8(fp)
  80d760:	10c00417 	ldw	r3,16(r2)
  80d764:	e0bffe17 	ldw	r2,-8(fp)
  80d768:	10800517 	ldw	r2,20(r2)
  80d76c:	18803626 	beq	r3,r2,80d848 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d770:	e0bffe17 	ldw	r2,-8(fp)
  80d774:	10800617 	ldw	r2,24(r2)
  80d778:	1080008c 	andi	r2,r2,2
  80d77c:	1005003a 	cmpeq	r2,r2,zero
  80d780:	1000041e 	bne	r2,zero,80d794 <altera_avalon_uart_txirq+0x4c>
  80d784:	e0bfff17 	ldw	r2,-4(fp)
  80d788:	1082000c 	andi	r2,r2,2048
  80d78c:	1005003a 	cmpeq	r2,r2,zero
  80d790:	10001e1e 	bne	r2,zero,80d80c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80d794:	e0bffe17 	ldw	r2,-8(fp)
  80d798:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80d79c:	e0bffe17 	ldw	r2,-8(fp)
  80d7a0:	10800017 	ldw	r2,0(r2)
  80d7a4:	11000104 	addi	r4,r2,4
  80d7a8:	e0bffe17 	ldw	r2,-8(fp)
  80d7ac:	10c00417 	ldw	r3,16(r2)
  80d7b0:	e0bffe17 	ldw	r2,-8(fp)
  80d7b4:	1885883a 	add	r2,r3,r2
  80d7b8:	10801704 	addi	r2,r2,92
  80d7bc:	10800003 	ldbu	r2,0(r2)
  80d7c0:	10c03fcc 	andi	r3,r2,255
  80d7c4:	2005883a 	mov	r2,r4
  80d7c8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80d7cc:	e0bffe17 	ldw	r2,-8(fp)
  80d7d0:	10800417 	ldw	r2,16(r2)
  80d7d4:	10c00044 	addi	r3,r2,1
  80d7d8:	e0bffe17 	ldw	r2,-8(fp)
  80d7dc:	10c00415 	stw	r3,16(r2)
  80d7e0:	e0bffe17 	ldw	r2,-8(fp)
  80d7e4:	10800417 	ldw	r2,16(r2)
  80d7e8:	10c00fcc 	andi	r3,r2,63
  80d7ec:	e0bffe17 	ldw	r2,-8(fp)
  80d7f0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d7f4:	e0bffe17 	ldw	r2,-8(fp)
  80d7f8:	10800117 	ldw	r2,4(r2)
  80d7fc:	10c01014 	ori	r3,r2,64
  80d800:	e0bffe17 	ldw	r2,-8(fp)
  80d804:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80d808:	00000f06 	br	80d848 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80d80c:	e0bffe17 	ldw	r2,-8(fp)
  80d810:	10800017 	ldw	r2,0(r2)
  80d814:	10800204 	addi	r2,r2,8
  80d818:	10800037 	ldwio	r2,0(r2)
  80d81c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80d820:	e0bfff17 	ldw	r2,-4(fp)
  80d824:	1082000c 	andi	r2,r2,2048
  80d828:	1004c03a 	cmpne	r2,r2,zero
  80d82c:	1000061e 	bne	r2,zero,80d848 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80d830:	e0bffe17 	ldw	r2,-8(fp)
  80d834:	10c00117 	ldw	r3,4(r2)
  80d838:	00bfefc4 	movi	r2,-65
  80d83c:	1886703a 	and	r3,r3,r2
  80d840:	e0bffe17 	ldw	r2,-8(fp)
  80d844:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80d848:	e0bffe17 	ldw	r2,-8(fp)
  80d84c:	10c00417 	ldw	r3,16(r2)
  80d850:	e0bffe17 	ldw	r2,-8(fp)
  80d854:	10800517 	ldw	r2,20(r2)
  80d858:	1880061e 	bne	r3,r2,80d874 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80d85c:	e0bffe17 	ldw	r2,-8(fp)
  80d860:	10c00117 	ldw	r3,4(r2)
  80d864:	00beefc4 	movi	r2,-1089
  80d868:	1886703a 	and	r3,r3,r2
  80d86c:	e0bffe17 	ldw	r2,-8(fp)
  80d870:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80d874:	e0bffe17 	ldw	r2,-8(fp)
  80d878:	10800017 	ldw	r2,0(r2)
  80d87c:	11000304 	addi	r4,r2,12
  80d880:	e0bffe17 	ldw	r2,-8(fp)
  80d884:	10800117 	ldw	r2,4(r2)
  80d888:	1007883a 	mov	r3,r2
  80d88c:	2005883a 	mov	r2,r4
  80d890:	10c00035 	stwio	r3,0(r2)
}
  80d894:	e037883a 	mov	sp,fp
  80d898:	df000017 	ldw	fp,0(sp)
  80d89c:	dec00104 	addi	sp,sp,4
  80d8a0:	f800283a 	ret

0080d8a4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80d8a4:	defffc04 	addi	sp,sp,-16
  80d8a8:	df000315 	stw	fp,12(sp)
  80d8ac:	df000304 	addi	fp,sp,12
  80d8b0:	e13ffd15 	stw	r4,-12(fp)
  80d8b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d8b8:	00000706 	br	80d8d8 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80d8bc:	e0bffe17 	ldw	r2,-8(fp)
  80d8c0:	1090000c 	andi	r2,r2,16384
  80d8c4:	1005003a 	cmpeq	r2,r2,zero
  80d8c8:	1000031e 	bne	r2,zero,80d8d8 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  80d8cc:	00bffd44 	movi	r2,-11
  80d8d0:	e0bfff15 	stw	r2,-4(fp)
  80d8d4:	00000606 	br	80d8f0 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80d8d8:	e0bffd17 	ldw	r2,-12(fp)
  80d8dc:	10c00417 	ldw	r3,16(r2)
  80d8e0:	e0bffd17 	ldw	r2,-12(fp)
  80d8e4:	10800517 	ldw	r2,20(r2)
  80d8e8:	18bff41e 	bne	r3,r2,80d8bc <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80d8ec:	e03fff15 	stw	zero,-4(fp)
  80d8f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80d8f4:	e037883a 	mov	sp,fp
  80d8f8:	df000017 	ldw	fp,0(sp)
  80d8fc:	dec00104 	addi	sp,sp,4
  80d900:	f800283a 	ret

0080d904 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80d904:	defff004 	addi	sp,sp,-64
  80d908:	dfc00f15 	stw	ra,60(sp)
  80d90c:	df000e15 	stw	fp,56(sp)
  80d910:	df000e04 	addi	fp,sp,56
  80d914:	e13ffb15 	stw	r4,-20(fp)
  80d918:	e17ffc15 	stw	r5,-16(fp)
  80d91c:	e1bffd15 	stw	r6,-12(fp)
  80d920:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  80d924:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80d928:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80d92c:	e0bffe17 	ldw	r2,-8(fp)
  80d930:	1090000c 	andi	r2,r2,16384
  80d934:	1005003a 	cmpeq	r2,r2,zero
  80d938:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80d93c:	e0bffb17 	ldw	r2,-20(fp)
  80d940:	10800217 	ldw	r2,8(r2)
  80d944:	10800044 	addi	r2,r2,1
  80d948:	10800fcc 	andi	r2,r2,63
  80d94c:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d950:	00001906 	br	80d9b8 <altera_avalon_uart_read+0xb4>
    {
      count++;
  80d954:	e0bff617 	ldw	r2,-40(fp)
  80d958:	10800044 	addi	r2,r2,1
  80d95c:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80d960:	e0bffb17 	ldw	r2,-20(fp)
  80d964:	10c00217 	ldw	r3,8(r2)
  80d968:	e0bffb17 	ldw	r2,-20(fp)
  80d96c:	1885883a 	add	r2,r3,r2
  80d970:	10800704 	addi	r2,r2,28
  80d974:	10800003 	ldbu	r2,0(r2)
  80d978:	1007883a 	mov	r3,r2
  80d97c:	e0bffc17 	ldw	r2,-16(fp)
  80d980:	10c00005 	stb	r3,0(r2)
  80d984:	e0bffc17 	ldw	r2,-16(fp)
  80d988:	10800044 	addi	r2,r2,1
  80d98c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  80d990:	e0bffb17 	ldw	r2,-20(fp)
  80d994:	10800217 	ldw	r2,8(r2)
  80d998:	10c00044 	addi	r3,r2,1
  80d99c:	e0bffb17 	ldw	r2,-20(fp)
  80d9a0:	10c00215 	stw	r3,8(r2)
  80d9a4:	e0bffb17 	ldw	r2,-20(fp)
  80d9a8:	10800217 	ldw	r2,8(r2)
  80d9ac:	10c00fcc 	andi	r3,r2,63
  80d9b0:	e0bffb17 	ldw	r2,-20(fp)
  80d9b4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80d9b8:	e0fff617 	ldw	r3,-40(fp)
  80d9bc:	e0bffd17 	ldw	r2,-12(fp)
  80d9c0:	1880050e 	bge	r3,r2,80d9d8 <altera_avalon_uart_read+0xd4>
  80d9c4:	e0bffb17 	ldw	r2,-20(fp)
  80d9c8:	10c00217 	ldw	r3,8(r2)
  80d9cc:	e0bffb17 	ldw	r2,-20(fp)
  80d9d0:	10800317 	ldw	r2,12(r2)
  80d9d4:	18bfdf1e 	bne	r3,r2,80d954 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80d9d8:	e0bff617 	ldw	r2,-40(fp)
  80d9dc:	1004c03a 	cmpne	r2,r2,zero
  80d9e0:	1000271e 	bne	r2,zero,80da80 <altera_avalon_uart_read+0x17c>
  80d9e4:	e0bffb17 	ldw	r2,-20(fp)
  80d9e8:	10c00217 	ldw	r3,8(r2)
  80d9ec:	e0bffb17 	ldw	r2,-20(fp)
  80d9f0:	10800317 	ldw	r2,12(r2)
  80d9f4:	1880221e 	bne	r3,r2,80da80 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80d9f8:	e0bff917 	ldw	r2,-28(fp)
  80d9fc:	1004c03a 	cmpne	r2,r2,zero
  80da00:	1000061e 	bne	r2,zero,80da1c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80da04:	080db340 	call	80db34 <alt_get_errno>
  80da08:	00c002c4 	movi	r3,11
  80da0c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  80da10:	00800044 	movi	r2,1
  80da14:	e0bff705 	stb	r2,-36(fp)
        break;
  80da18:	00001f06 	br	80da98 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da1c:	0005303a 	rdctl	r2,status
  80da20:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80da24:	e0fff517 	ldw	r3,-44(fp)
  80da28:	00bfff84 	movi	r2,-2
  80da2c:	1884703a 	and	r2,r3,r2
  80da30:	1001703a 	wrctl	status,r2
  
  return context;
  80da34:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80da38:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80da3c:	e0bffb17 	ldw	r2,-20(fp)
  80da40:	10800117 	ldw	r2,4(r2)
  80da44:	10c02014 	ori	r3,r2,128
  80da48:	e0bffb17 	ldw	r2,-20(fp)
  80da4c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80da50:	e0bffb17 	ldw	r2,-20(fp)
  80da54:	10800017 	ldw	r2,0(r2)
  80da58:	11000304 	addi	r4,r2,12
  80da5c:	e0bffb17 	ldw	r2,-20(fp)
  80da60:	10800117 	ldw	r2,4(r2)
  80da64:	1007883a 	mov	r3,r2
  80da68:	2005883a 	mov	r2,r4
  80da6c:	10c00035 	stwio	r3,0(r2)
  80da70:	e0bffa17 	ldw	r2,-24(fp)
  80da74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80da78:	e0bff417 	ldw	r2,-48(fp)
  80da7c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80da80:	e0bff617 	ldw	r2,-40(fp)
  80da84:	1004c03a 	cmpne	r2,r2,zero
  80da88:	1000031e 	bne	r2,zero,80da98 <altera_avalon_uart_read+0x194>
  80da8c:	e0bffd17 	ldw	r2,-12(fp)
  80da90:	1004c03a 	cmpne	r2,r2,zero
  80da94:	103fc81e 	bne	r2,zero,80d9b8 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80da98:	0005303a 	rdctl	r2,status
  80da9c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80daa0:	e0fff317 	ldw	r3,-52(fp)
  80daa4:	00bfff84 	movi	r2,-2
  80daa8:	1884703a 	and	r2,r3,r2
  80daac:	1001703a 	wrctl	status,r2
  
  return context;
  80dab0:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80dab4:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80dab8:	e0bffb17 	ldw	r2,-20(fp)
  80dabc:	10800117 	ldw	r2,4(r2)
  80dac0:	10c02014 	ori	r3,r2,128
  80dac4:	e0bffb17 	ldw	r2,-20(fp)
  80dac8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80dacc:	e0bffb17 	ldw	r2,-20(fp)
  80dad0:	10800017 	ldw	r2,0(r2)
  80dad4:	11000304 	addi	r4,r2,12
  80dad8:	e0bffb17 	ldw	r2,-20(fp)
  80dadc:	10800117 	ldw	r2,4(r2)
  80dae0:	1007883a 	mov	r3,r2
  80dae4:	2005883a 	mov	r2,r4
  80dae8:	10c00035 	stwio	r3,0(r2)
  80daec:	e0bffa17 	ldw	r2,-24(fp)
  80daf0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80daf4:	e0bff217 	ldw	r2,-56(fp)
  80daf8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80dafc:	e0bff703 	ldbu	r2,-36(fp)
  80db00:	1005003a 	cmpeq	r2,r2,zero
  80db04:	1000031e 	bne	r2,zero,80db14 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80db08:	00bffd04 	movi	r2,-12
  80db0c:	e0bfff15 	stw	r2,-4(fp)
  80db10:	00000206 	br	80db1c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  80db14:	e0bff617 	ldw	r2,-40(fp)
  80db18:	e0bfff15 	stw	r2,-4(fp)
  80db1c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80db20:	e037883a 	mov	sp,fp
  80db24:	dfc00117 	ldw	ra,4(sp)
  80db28:	df000017 	ldw	fp,0(sp)
  80db2c:	dec00204 	addi	sp,sp,8
  80db30:	f800283a 	ret

0080db34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80db34:	defffd04 	addi	sp,sp,-12
  80db38:	dfc00215 	stw	ra,8(sp)
  80db3c:	df000115 	stw	fp,4(sp)
  80db40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80db44:	00802074 	movhi	r2,129
  80db48:	1083d204 	addi	r2,r2,3912
  80db4c:	10800017 	ldw	r2,0(r2)
  80db50:	1005003a 	cmpeq	r2,r2,zero
  80db54:	1000061e 	bne	r2,zero,80db70 <alt_get_errno+0x3c>
  80db58:	00802074 	movhi	r2,129
  80db5c:	1083d204 	addi	r2,r2,3912
  80db60:	10800017 	ldw	r2,0(r2)
  80db64:	103ee83a 	callr	r2
  80db68:	e0bfff15 	stw	r2,-4(fp)
  80db6c:	00000306 	br	80db7c <alt_get_errno+0x48>
  80db70:	00802074 	movhi	r2,129
  80db74:	108b0804 	addi	r2,r2,11296
  80db78:	e0bfff15 	stw	r2,-4(fp)
  80db7c:	e0bfff17 	ldw	r2,-4(fp)
}
  80db80:	e037883a 	mov	sp,fp
  80db84:	dfc00117 	ldw	ra,4(sp)
  80db88:	df000017 	ldw	fp,0(sp)
  80db8c:	dec00204 	addi	sp,sp,8
  80db90:	f800283a 	ret

0080db94 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80db94:	defff204 	addi	sp,sp,-56
  80db98:	dfc00d15 	stw	ra,52(sp)
  80db9c:	df000c15 	stw	fp,48(sp)
  80dba0:	df000c04 	addi	fp,sp,48
  80dba4:	e13ffc15 	stw	r4,-16(fp)
  80dba8:	e17ffd15 	stw	r5,-12(fp)
  80dbac:	e1bffe15 	stw	r6,-8(fp)
  80dbb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80dbb4:	e0bffe17 	ldw	r2,-8(fp)
  80dbb8:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80dbbc:	e0bfff17 	ldw	r2,-4(fp)
  80dbc0:	1090000c 	andi	r2,r2,16384
  80dbc4:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80dbc8:	00004006 	br	80dccc <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80dbcc:	e0bffc17 	ldw	r2,-16(fp)
  80dbd0:	10800517 	ldw	r2,20(r2)
  80dbd4:	10800044 	addi	r2,r2,1
  80dbd8:	10800fcc 	andi	r2,r2,63
  80dbdc:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80dbe0:	e0bffc17 	ldw	r2,-16(fp)
  80dbe4:	10c00417 	ldw	r3,16(r2)
  80dbe8:	e0bff917 	ldw	r2,-28(fp)
  80dbec:	1880251e 	bne	r3,r2,80dc84 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  80dbf0:	e0bffa17 	ldw	r2,-24(fp)
  80dbf4:	1005003a 	cmpeq	r2,r2,zero
  80dbf8:	1000051e 	bne	r2,zero,80dc10 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80dbfc:	080dd5c0 	call	80dd5c <alt_get_errno>
  80dc00:	1007883a 	mov	r3,r2
  80dc04:	008002c4 	movi	r2,11
  80dc08:	18800015 	stw	r2,0(r3)
        break;
  80dc0c:	00003206 	br	80dcd8 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc10:	0005303a 	rdctl	r2,status
  80dc14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc18:	e0fff717 	ldw	r3,-36(fp)
  80dc1c:	00bfff84 	movi	r2,-2
  80dc20:	1884703a 	and	r2,r3,r2
  80dc24:	1001703a 	wrctl	status,r2
  
  return context;
  80dc28:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80dc2c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80dc30:	e0bffc17 	ldw	r2,-16(fp)
  80dc34:	10800117 	ldw	r2,4(r2)
  80dc38:	10c11014 	ori	r3,r2,1088
  80dc3c:	e0bffc17 	ldw	r2,-16(fp)
  80dc40:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80dc44:	e0bffc17 	ldw	r2,-16(fp)
  80dc48:	10800017 	ldw	r2,0(r2)
  80dc4c:	11000304 	addi	r4,r2,12
  80dc50:	e0bffc17 	ldw	r2,-16(fp)
  80dc54:	10800117 	ldw	r2,4(r2)
  80dc58:	1007883a 	mov	r3,r2
  80dc5c:	2005883a 	mov	r2,r4
  80dc60:	10c00035 	stwio	r3,0(r2)
  80dc64:	e0bffb17 	ldw	r2,-20(fp)
  80dc68:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc6c:	e0bff617 	ldw	r2,-40(fp)
  80dc70:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80dc74:	e0bffc17 	ldw	r2,-16(fp)
  80dc78:	10c00417 	ldw	r3,16(r2)
  80dc7c:	e0bff917 	ldw	r2,-28(fp)
  80dc80:	18bffc26 	beq	r3,r2,80dc74 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  80dc84:	e0bff817 	ldw	r2,-32(fp)
  80dc88:	10bfffc4 	addi	r2,r2,-1
  80dc8c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80dc90:	e0bffc17 	ldw	r2,-16(fp)
  80dc94:	10c00517 	ldw	r3,20(r2)
  80dc98:	e0bffd17 	ldw	r2,-12(fp)
  80dc9c:	10800003 	ldbu	r2,0(r2)
  80dca0:	1009883a 	mov	r4,r2
  80dca4:	e0bffc17 	ldw	r2,-16(fp)
  80dca8:	1885883a 	add	r2,r3,r2
  80dcac:	10801704 	addi	r2,r2,92
  80dcb0:	11000005 	stb	r4,0(r2)
  80dcb4:	e0bffd17 	ldw	r2,-12(fp)
  80dcb8:	10800044 	addi	r2,r2,1
  80dcbc:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  80dcc0:	e0fffc17 	ldw	r3,-16(fp)
  80dcc4:	e0bff917 	ldw	r2,-28(fp)
  80dcc8:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80dccc:	e0bff817 	ldw	r2,-32(fp)
  80dcd0:	1004c03a 	cmpne	r2,r2,zero
  80dcd4:	103fbd1e 	bne	r2,zero,80dbcc <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dcd8:	0005303a 	rdctl	r2,status
  80dcdc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dce0:	e0fff517 	ldw	r3,-44(fp)
  80dce4:	00bfff84 	movi	r2,-2
  80dce8:	1884703a 	and	r2,r3,r2
  80dcec:	1001703a 	wrctl	status,r2
  
  return context;
  80dcf0:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80dcf4:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80dcf8:	e0bffc17 	ldw	r2,-16(fp)
  80dcfc:	10800117 	ldw	r2,4(r2)
  80dd00:	10c11014 	ori	r3,r2,1088
  80dd04:	e0bffc17 	ldw	r2,-16(fp)
  80dd08:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80dd0c:	e0bffc17 	ldw	r2,-16(fp)
  80dd10:	10800017 	ldw	r2,0(r2)
  80dd14:	11000304 	addi	r4,r2,12
  80dd18:	e0bffc17 	ldw	r2,-16(fp)
  80dd1c:	10800117 	ldw	r2,4(r2)
  80dd20:	1007883a 	mov	r3,r2
  80dd24:	2005883a 	mov	r2,r4
  80dd28:	10c00035 	stwio	r3,0(r2)
  80dd2c:	e0bffb17 	ldw	r2,-20(fp)
  80dd30:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dd34:	e0bff417 	ldw	r2,-48(fp)
  80dd38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80dd3c:	e0fffe17 	ldw	r3,-8(fp)
  80dd40:	e0bff817 	ldw	r2,-32(fp)
  80dd44:	1885c83a 	sub	r2,r3,r2
}
  80dd48:	e037883a 	mov	sp,fp
  80dd4c:	dfc00117 	ldw	ra,4(sp)
  80dd50:	df000017 	ldw	fp,0(sp)
  80dd54:	dec00204 	addi	sp,sp,8
  80dd58:	f800283a 	ret

0080dd5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dd5c:	defffd04 	addi	sp,sp,-12
  80dd60:	dfc00215 	stw	ra,8(sp)
  80dd64:	df000115 	stw	fp,4(sp)
  80dd68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dd6c:	00802074 	movhi	r2,129
  80dd70:	1083d204 	addi	r2,r2,3912
  80dd74:	10800017 	ldw	r2,0(r2)
  80dd78:	1005003a 	cmpeq	r2,r2,zero
  80dd7c:	1000061e 	bne	r2,zero,80dd98 <alt_get_errno+0x3c>
  80dd80:	00802074 	movhi	r2,129
  80dd84:	1083d204 	addi	r2,r2,3912
  80dd88:	10800017 	ldw	r2,0(r2)
  80dd8c:	103ee83a 	callr	r2
  80dd90:	e0bfff15 	stw	r2,-4(fp)
  80dd94:	00000306 	br	80dda4 <alt_get_errno+0x48>
  80dd98:	00802074 	movhi	r2,129
  80dd9c:	108b0804 	addi	r2,r2,11296
  80dda0:	e0bfff15 	stw	r2,-4(fp)
  80dda4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dda8:	e037883a 	mov	sp,fp
  80ddac:	dfc00117 	ldw	ra,4(sp)
  80ddb0:	df000017 	ldw	fp,0(sp)
  80ddb4:	dec00204 	addi	sp,sp,8
  80ddb8:	f800283a 	ret

0080ddbc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80ddbc:	defffe04 	addi	sp,sp,-8
  80ddc0:	df000115 	stw	fp,4(sp)
  80ddc4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ddc8:	e03fff15 	stw	zero,-4(fp)
  80ddcc:	00000506 	br	80dde4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80ddd0:	e0bfff17 	ldw	r2,-4(fp)
  80ddd4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80ddd8:	e0bfff17 	ldw	r2,-4(fp)
  80dddc:	10800804 	addi	r2,r2,32
  80dde0:	e0bfff15 	stw	r2,-4(fp)
  80dde4:	e0bfff17 	ldw	r2,-4(fp)
  80dde8:	10820030 	cmpltui	r2,r2,2048
  80ddec:	103ff81e 	bne	r2,zero,80ddd0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80ddf0:	e037883a 	mov	sp,fp
  80ddf4:	df000017 	ldw	fp,0(sp)
  80ddf8:	dec00104 	addi	sp,sp,4
  80ddfc:	f800283a 	ret

0080de00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80de00:	defff904 	addi	sp,sp,-28
  80de04:	dfc00615 	stw	ra,24(sp)
  80de08:	df000515 	stw	fp,20(sp)
  80de0c:	df000504 	addi	fp,sp,20
  80de10:	e13ffd15 	stw	r4,-12(fp)
  80de14:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80de18:	e0bffd17 	ldw	r2,-12(fp)
  80de1c:	1005003a 	cmpeq	r2,r2,zero
  80de20:	1000041e 	bne	r2,zero,80de34 <alt_dev_llist_insert+0x34>
  80de24:	e0bffd17 	ldw	r2,-12(fp)
  80de28:	10800217 	ldw	r2,8(r2)
  80de2c:	1004c03a 	cmpne	r2,r2,zero
  80de30:	1000071e 	bne	r2,zero,80de50 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80de34:	080deb40 	call	80deb4 <alt_get_errno>
  80de38:	1007883a 	mov	r3,r2
  80de3c:	00800584 	movi	r2,22
  80de40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80de44:	00bffa84 	movi	r2,-22
  80de48:	e0bfff15 	stw	r2,-4(fp)
  80de4c:	00001306 	br	80de9c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80de50:	e0fffd17 	ldw	r3,-12(fp)
  80de54:	e0bffe17 	ldw	r2,-8(fp)
  80de58:	e0bffb15 	stw	r2,-20(fp)
  80de5c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80de60:	e0fffc17 	ldw	r3,-16(fp)
  80de64:	e0bffb17 	ldw	r2,-20(fp)
  80de68:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80de6c:	e0bffb17 	ldw	r2,-20(fp)
  80de70:	10c00017 	ldw	r3,0(r2)
  80de74:	e0bffc17 	ldw	r2,-16(fp)
  80de78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80de7c:	e0bffb17 	ldw	r2,-20(fp)
  80de80:	10c00017 	ldw	r3,0(r2)
  80de84:	e0bffc17 	ldw	r2,-16(fp)
  80de88:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80de8c:	e0fffb17 	ldw	r3,-20(fp)
  80de90:	e0bffc17 	ldw	r2,-16(fp)
  80de94:	18800015 	stw	r2,0(r3)

  return 0;  
  80de98:	e03fff15 	stw	zero,-4(fp)
  80de9c:	e0bfff17 	ldw	r2,-4(fp)
}
  80dea0:	e037883a 	mov	sp,fp
  80dea4:	dfc00117 	ldw	ra,4(sp)
  80dea8:	df000017 	ldw	fp,0(sp)
  80deac:	dec00204 	addi	sp,sp,8
  80deb0:	f800283a 	ret

0080deb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80deb4:	defffd04 	addi	sp,sp,-12
  80deb8:	dfc00215 	stw	ra,8(sp)
  80debc:	df000115 	stw	fp,4(sp)
  80dec0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80dec4:	00802074 	movhi	r2,129
  80dec8:	1083d204 	addi	r2,r2,3912
  80decc:	10800017 	ldw	r2,0(r2)
  80ded0:	1005003a 	cmpeq	r2,r2,zero
  80ded4:	1000061e 	bne	r2,zero,80def0 <alt_get_errno+0x3c>
  80ded8:	00802074 	movhi	r2,129
  80dedc:	1083d204 	addi	r2,r2,3912
  80dee0:	10800017 	ldw	r2,0(r2)
  80dee4:	103ee83a 	callr	r2
  80dee8:	e0bfff15 	stw	r2,-4(fp)
  80deec:	00000306 	br	80defc <alt_get_errno+0x48>
  80def0:	00802074 	movhi	r2,129
  80def4:	108b0804 	addi	r2,r2,11296
  80def8:	e0bfff15 	stw	r2,-4(fp)
  80defc:	e0bfff17 	ldw	r2,-4(fp)
}
  80df00:	e037883a 	mov	sp,fp
  80df04:	dfc00117 	ldw	ra,4(sp)
  80df08:	df000017 	ldw	fp,0(sp)
  80df0c:	dec00204 	addi	sp,sp,8
  80df10:	f800283a 	ret

0080df14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80df14:	defffd04 	addi	sp,sp,-12
  80df18:	dfc00215 	stw	ra,8(sp)
  80df1c:	df000115 	stw	fp,4(sp)
  80df20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80df24:	00bfff04 	movi	r2,-4
  80df28:	00c02074 	movhi	r3,129
  80df2c:	18fb2e04 	addi	r3,r3,-4936
  80df30:	1885883a 	add	r2,r3,r2
  80df34:	e0bfff15 	stw	r2,-4(fp)
  80df38:	00000606 	br	80df54 <_do_ctors+0x40>
        (*ctor) (); 
  80df3c:	e0bfff17 	ldw	r2,-4(fp)
  80df40:	10800017 	ldw	r2,0(r2)
  80df44:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80df48:	e0bfff17 	ldw	r2,-4(fp)
  80df4c:	10bfff04 	addi	r2,r2,-4
  80df50:	e0bfff15 	stw	r2,-4(fp)
  80df54:	e0ffff17 	ldw	r3,-4(fp)
  80df58:	00802074 	movhi	r2,129
  80df5c:	10bb2d04 	addi	r2,r2,-4940
  80df60:	18bff62e 	bgeu	r3,r2,80df3c <_do_ctors+0x28>
        (*ctor) (); 
}
  80df64:	e037883a 	mov	sp,fp
  80df68:	dfc00117 	ldw	ra,4(sp)
  80df6c:	df000017 	ldw	fp,0(sp)
  80df70:	dec00204 	addi	sp,sp,8
  80df74:	f800283a 	ret

0080df78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80df78:	defffd04 	addi	sp,sp,-12
  80df7c:	dfc00215 	stw	ra,8(sp)
  80df80:	df000115 	stw	fp,4(sp)
  80df84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80df88:	00bfff04 	movi	r2,-4
  80df8c:	00c02074 	movhi	r3,129
  80df90:	18fb2e04 	addi	r3,r3,-4936
  80df94:	1885883a 	add	r2,r3,r2
  80df98:	e0bfff15 	stw	r2,-4(fp)
  80df9c:	00000606 	br	80dfb8 <_do_dtors+0x40>
        (*dtor) (); 
  80dfa0:	e0bfff17 	ldw	r2,-4(fp)
  80dfa4:	10800017 	ldw	r2,0(r2)
  80dfa8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80dfac:	e0bfff17 	ldw	r2,-4(fp)
  80dfb0:	10bfff04 	addi	r2,r2,-4
  80dfb4:	e0bfff15 	stw	r2,-4(fp)
  80dfb8:	e0ffff17 	ldw	r3,-4(fp)
  80dfbc:	00802074 	movhi	r2,129
  80dfc0:	10bb2e04 	addi	r2,r2,-4936
  80dfc4:	18bff62e 	bgeu	r3,r2,80dfa0 <_do_dtors+0x28>
        (*dtor) (); 
}
  80dfc8:	e037883a 	mov	sp,fp
  80dfcc:	dfc00117 	ldw	ra,4(sp)
  80dfd0:	df000017 	ldw	fp,0(sp)
  80dfd4:	dec00204 	addi	sp,sp,8
  80dfd8:	f800283a 	ret

0080dfdc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80dfdc:	defff904 	addi	sp,sp,-28
  80dfe0:	dfc00615 	stw	ra,24(sp)
  80dfe4:	df000515 	stw	fp,20(sp)
  80dfe8:	df000504 	addi	fp,sp,20
  80dfec:	e13ffd15 	stw	r4,-12(fp)
  80dff0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80dff4:	e0bffe17 	ldw	r2,-8(fp)
  80dff8:	10800017 	ldw	r2,0(r2)
  80dffc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80e000:	e13ffd17 	ldw	r4,-12(fp)
  80e004:	08083780 	call	808378 <strlen>
  80e008:	10800044 	addi	r2,r2,1
  80e00c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e010:	00000d06 	br	80e048 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80e014:	e0bffc17 	ldw	r2,-16(fp)
  80e018:	11000217 	ldw	r4,8(r2)
  80e01c:	e1bffb17 	ldw	r6,-20(fp)
  80e020:	e17ffd17 	ldw	r5,-12(fp)
  80e024:	080e8f80 	call	80e8f8 <memcmp>
  80e028:	1004c03a 	cmpne	r2,r2,zero
  80e02c:	1000031e 	bne	r2,zero,80e03c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80e030:	e0bffc17 	ldw	r2,-16(fp)
  80e034:	e0bfff15 	stw	r2,-4(fp)
  80e038:	00000706 	br	80e058 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80e03c:	e0bffc17 	ldw	r2,-16(fp)
  80e040:	10800017 	ldw	r2,0(r2)
  80e044:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80e048:	e0fffe17 	ldw	r3,-8(fp)
  80e04c:	e0bffc17 	ldw	r2,-16(fp)
  80e050:	10fff01e 	bne	r2,r3,80e014 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80e054:	e03fff15 	stw	zero,-4(fp)
  80e058:	e0bfff17 	ldw	r2,-4(fp)
}
  80e05c:	e037883a 	mov	sp,fp
  80e060:	dfc00117 	ldw	ra,4(sp)
  80e064:	df000017 	ldw	fp,0(sp)
  80e068:	dec00204 	addi	sp,sp,8
  80e06c:	f800283a 	ret

0080e070 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80e070:	defffa04 	addi	sp,sp,-24
  80e074:	dfc00515 	stw	ra,20(sp)
  80e078:	df000415 	stw	fp,16(sp)
  80e07c:	df000404 	addi	fp,sp,16
  80e080:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80e084:	00802074 	movhi	r2,129
  80e088:	1083cd04 	addi	r2,r2,3892
  80e08c:	10800017 	ldw	r2,0(r2)
  80e090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e094:	00003306 	br	80e164 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80e098:	e0bffd17 	ldw	r2,-12(fp)
  80e09c:	11000217 	ldw	r4,8(r2)
  80e0a0:	08083780 	call	808378 <strlen>
  80e0a4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80e0a8:	e0bffd17 	ldw	r2,-12(fp)
  80e0ac:	10c00217 	ldw	r3,8(r2)
  80e0b0:	e0bffc17 	ldw	r2,-16(fp)
  80e0b4:	1885883a 	add	r2,r3,r2
  80e0b8:	10bfffc4 	addi	r2,r2,-1
  80e0bc:	10800003 	ldbu	r2,0(r2)
  80e0c0:	10803fcc 	andi	r2,r2,255
  80e0c4:	1080201c 	xori	r2,r2,128
  80e0c8:	10bfe004 	addi	r2,r2,-128
  80e0cc:	10800bd8 	cmpnei	r2,r2,47
  80e0d0:	1000031e 	bne	r2,zero,80e0e0 <alt_find_file+0x70>
    {
      len -= 1;
  80e0d4:	e0bffc17 	ldw	r2,-16(fp)
  80e0d8:	10bfffc4 	addi	r2,r2,-1
  80e0dc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80e0e0:	e0bffc17 	ldw	r2,-16(fp)
  80e0e4:	1007883a 	mov	r3,r2
  80e0e8:	e0bffe17 	ldw	r2,-8(fp)
  80e0ec:	1885883a 	add	r2,r3,r2
  80e0f0:	10800003 	ldbu	r2,0(r2)
  80e0f4:	10803fcc 	andi	r2,r2,255
  80e0f8:	1080201c 	xori	r2,r2,128
  80e0fc:	10bfe004 	addi	r2,r2,-128
  80e100:	10800be0 	cmpeqi	r2,r2,47
  80e104:	10000a1e 	bne	r2,zero,80e130 <alt_find_file+0xc0>
  80e108:	e0bffc17 	ldw	r2,-16(fp)
  80e10c:	1007883a 	mov	r3,r2
  80e110:	e0bffe17 	ldw	r2,-8(fp)
  80e114:	1885883a 	add	r2,r3,r2
  80e118:	10800003 	ldbu	r2,0(r2)
  80e11c:	10803fcc 	andi	r2,r2,255
  80e120:	1080201c 	xori	r2,r2,128
  80e124:	10bfe004 	addi	r2,r2,-128
  80e128:	1004c03a 	cmpne	r2,r2,zero
  80e12c:	10000a1e 	bne	r2,zero,80e158 <alt_find_file+0xe8>
  80e130:	e0bffd17 	ldw	r2,-12(fp)
  80e134:	11000217 	ldw	r4,8(r2)
  80e138:	e1bffc17 	ldw	r6,-16(fp)
  80e13c:	e17ffe17 	ldw	r5,-8(fp)
  80e140:	080e8f80 	call	80e8f8 <memcmp>
  80e144:	1004c03a 	cmpne	r2,r2,zero
  80e148:	1000031e 	bne	r2,zero,80e158 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80e14c:	e0bffd17 	ldw	r2,-12(fp)
  80e150:	e0bfff15 	stw	r2,-4(fp)
  80e154:	00000806 	br	80e178 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80e158:	e0bffd17 	ldw	r2,-12(fp)
  80e15c:	10800017 	ldw	r2,0(r2)
  80e160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80e164:	00c02074 	movhi	r3,129
  80e168:	18c3cd04 	addi	r3,r3,3892
  80e16c:	e0bffd17 	ldw	r2,-12(fp)
  80e170:	10ffc91e 	bne	r2,r3,80e098 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80e174:	e03fff15 	stw	zero,-4(fp)
  80e178:	e0bfff17 	ldw	r2,-4(fp)
}
  80e17c:	e037883a 	mov	sp,fp
  80e180:	dfc00117 	ldw	ra,4(sp)
  80e184:	df000017 	ldw	fp,0(sp)
  80e188:	dec00204 	addi	sp,sp,8
  80e18c:	f800283a 	ret

0080e190 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80e190:	defffc04 	addi	sp,sp,-16
  80e194:	df000315 	stw	fp,12(sp)
  80e198:	df000304 	addi	fp,sp,12
  80e19c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80e1a0:	00bffa04 	movi	r2,-24
  80e1a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e1a8:	e03ffe15 	stw	zero,-8(fp)
  80e1ac:	00001e06 	br	80e228 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  80e1b0:	e0bffe17 	ldw	r2,-8(fp)
  80e1b4:	00c02074 	movhi	r3,129
  80e1b8:	18fed404 	addi	r3,r3,-1200
  80e1bc:	10800324 	muli	r2,r2,12
  80e1c0:	10c5883a 	add	r2,r2,r3
  80e1c4:	10800017 	ldw	r2,0(r2)
  80e1c8:	1004c03a 	cmpne	r2,r2,zero
  80e1cc:	1000131e 	bne	r2,zero,80e21c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  80e1d0:	e0bffe17 	ldw	r2,-8(fp)
  80e1d4:	00c02074 	movhi	r3,129
  80e1d8:	18fed404 	addi	r3,r3,-1200
  80e1dc:	10800324 	muli	r2,r2,12
  80e1e0:	10c7883a 	add	r3,r2,r3
  80e1e4:	e0bfff17 	ldw	r2,-4(fp)
  80e1e8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80e1ec:	00802074 	movhi	r2,129
  80e1f0:	1083d104 	addi	r2,r2,3908
  80e1f4:	10c00017 	ldw	r3,0(r2)
  80e1f8:	e0bffe17 	ldw	r2,-8(fp)
  80e1fc:	1880040e 	bge	r3,r2,80e210 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  80e200:	00c02074 	movhi	r3,129
  80e204:	18c3d104 	addi	r3,r3,3908
  80e208:	e0bffe17 	ldw	r2,-8(fp)
  80e20c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80e210:	e0bffe17 	ldw	r2,-8(fp)
  80e214:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80e218:	00000606 	br	80e234 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80e21c:	e0bffe17 	ldw	r2,-8(fp)
  80e220:	10800044 	addi	r2,r2,1
  80e224:	e0bffe15 	stw	r2,-8(fp)
  80e228:	e0bffe17 	ldw	r2,-8(fp)
  80e22c:	10800810 	cmplti	r2,r2,32
  80e230:	103fdf1e 	bne	r2,zero,80e1b0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80e234:	e0bffd17 	ldw	r2,-12(fp)
}
  80e238:	e037883a 	mov	sp,fp
  80e23c:	df000017 	ldw	fp,0(sp)
  80e240:	dec00104 	addi	sp,sp,4
  80e244:	f800283a 	ret

0080e248 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80e248:	defffe04 	addi	sp,sp,-8
  80e24c:	dfc00115 	stw	ra,4(sp)
  80e250:	df000015 	stw	fp,0(sp)
  80e254:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80e258:	0009883a 	mov	r4,zero
  80e25c:	01440004 	movi	r5,4096
  80e260:	080e81c0 	call	80e81c <alt_icache_flush>
#endif
}
  80e264:	e037883a 	mov	sp,fp
  80e268:	dfc00117 	ldw	ra,4(sp)
  80e26c:	df000017 	ldw	fp,0(sp)
  80e270:	dec00204 	addi	sp,sp,8
  80e274:	f800283a 	ret

0080e278 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e278:	defff904 	addi	sp,sp,-28
  80e27c:	dfc00615 	stw	ra,24(sp)
  80e280:	df000515 	stw	fp,20(sp)
  80e284:	df000504 	addi	fp,sp,20
  80e288:	e13ffc15 	stw	r4,-16(fp)
  80e28c:	e17ffd15 	stw	r5,-12(fp)
  80e290:	e1bffe15 	stw	r6,-8(fp)
  80e294:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80e298:	e0800217 	ldw	r2,8(fp)
  80e29c:	d8800015 	stw	r2,0(sp)
  80e2a0:	e13ffc17 	ldw	r4,-16(fp)
  80e2a4:	e17ffd17 	ldw	r5,-12(fp)
  80e2a8:	e1bffe17 	ldw	r6,-8(fp)
  80e2ac:	e1ffff17 	ldw	r7,-4(fp)
  80e2b0:	080e44c0 	call	80e44c <alt_iic_isr_register>
}  
  80e2b4:	e037883a 	mov	sp,fp
  80e2b8:	dfc00117 	ldw	ra,4(sp)
  80e2bc:	df000017 	ldw	fp,0(sp)
  80e2c0:	dec00204 	addi	sp,sp,8
  80e2c4:	f800283a 	ret

0080e2c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80e2c8:	defff904 	addi	sp,sp,-28
  80e2cc:	df000615 	stw	fp,24(sp)
  80e2d0:	df000604 	addi	fp,sp,24
  80e2d4:	e13ffe15 	stw	r4,-8(fp)
  80e2d8:	e17fff15 	stw	r5,-4(fp)
  80e2dc:	e0bfff17 	ldw	r2,-4(fp)
  80e2e0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e2e4:	0005303a 	rdctl	r2,status
  80e2e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e2ec:	e0fffb17 	ldw	r3,-20(fp)
  80e2f0:	00bfff84 	movi	r2,-2
  80e2f4:	1884703a 	and	r2,r3,r2
  80e2f8:	1001703a 	wrctl	status,r2
  
  return context;
  80e2fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e300:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80e304:	e0fffc17 	ldw	r3,-16(fp)
  80e308:	00800044 	movi	r2,1
  80e30c:	10c4983a 	sll	r2,r2,r3
  80e310:	1007883a 	mov	r3,r2
  80e314:	00802074 	movhi	r2,129
  80e318:	108b1404 	addi	r2,r2,11344
  80e31c:	10800017 	ldw	r2,0(r2)
  80e320:	1886b03a 	or	r3,r3,r2
  80e324:	00802074 	movhi	r2,129
  80e328:	108b1404 	addi	r2,r2,11344
  80e32c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e330:	00802074 	movhi	r2,129
  80e334:	108b1404 	addi	r2,r2,11344
  80e338:	10800017 	ldw	r2,0(r2)
  80e33c:	100170fa 	wrctl	ienable,r2
  80e340:	e0bffd17 	ldw	r2,-12(fp)
  80e344:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e348:	e0bffa17 	ldw	r2,-24(fp)
  80e34c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e350:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80e354:	e037883a 	mov	sp,fp
  80e358:	df000017 	ldw	fp,0(sp)
  80e35c:	dec00104 	addi	sp,sp,4
  80e360:	f800283a 	ret

0080e364 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80e364:	defff904 	addi	sp,sp,-28
  80e368:	df000615 	stw	fp,24(sp)
  80e36c:	df000604 	addi	fp,sp,24
  80e370:	e13ffe15 	stw	r4,-8(fp)
  80e374:	e17fff15 	stw	r5,-4(fp)
  80e378:	e0bfff17 	ldw	r2,-4(fp)
  80e37c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e380:	0005303a 	rdctl	r2,status
  80e384:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e388:	e0fffb17 	ldw	r3,-20(fp)
  80e38c:	00bfff84 	movi	r2,-2
  80e390:	1884703a 	and	r2,r3,r2
  80e394:	1001703a 	wrctl	status,r2
  
  return context;
  80e398:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80e39c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80e3a0:	e0fffc17 	ldw	r3,-16(fp)
  80e3a4:	00800044 	movi	r2,1
  80e3a8:	10c4983a 	sll	r2,r2,r3
  80e3ac:	0084303a 	nor	r2,zero,r2
  80e3b0:	1007883a 	mov	r3,r2
  80e3b4:	00802074 	movhi	r2,129
  80e3b8:	108b1404 	addi	r2,r2,11344
  80e3bc:	10800017 	ldw	r2,0(r2)
  80e3c0:	1886703a 	and	r3,r3,r2
  80e3c4:	00802074 	movhi	r2,129
  80e3c8:	108b1404 	addi	r2,r2,11344
  80e3cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80e3d0:	00802074 	movhi	r2,129
  80e3d4:	108b1404 	addi	r2,r2,11344
  80e3d8:	10800017 	ldw	r2,0(r2)
  80e3dc:	100170fa 	wrctl	ienable,r2
  80e3e0:	e0bffd17 	ldw	r2,-12(fp)
  80e3e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e3e8:	e0bffa17 	ldw	r2,-24(fp)
  80e3ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80e3f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80e3f4:	e037883a 	mov	sp,fp
  80e3f8:	df000017 	ldw	fp,0(sp)
  80e3fc:	dec00104 	addi	sp,sp,4
  80e400:	f800283a 	ret

0080e404 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80e404:	defffc04 	addi	sp,sp,-16
  80e408:	df000315 	stw	fp,12(sp)
  80e40c:	df000304 	addi	fp,sp,12
  80e410:	e13ffe15 	stw	r4,-8(fp)
  80e414:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80e418:	000530fa 	rdctl	r2,ienable
  80e41c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80e420:	e0ffff17 	ldw	r3,-4(fp)
  80e424:	00800044 	movi	r2,1
  80e428:	10c4983a 	sll	r2,r2,r3
  80e42c:	1007883a 	mov	r3,r2
  80e430:	e0bffd17 	ldw	r2,-12(fp)
  80e434:	1884703a 	and	r2,r3,r2
  80e438:	1004c03a 	cmpne	r2,r2,zero
}
  80e43c:	e037883a 	mov	sp,fp
  80e440:	df000017 	ldw	fp,0(sp)
  80e444:	dec00104 	addi	sp,sp,4
  80e448:	f800283a 	ret

0080e44c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80e44c:	defff404 	addi	sp,sp,-48
  80e450:	dfc00b15 	stw	ra,44(sp)
  80e454:	df000a15 	stw	fp,40(sp)
  80e458:	df000a04 	addi	fp,sp,40
  80e45c:	e13ffb15 	stw	r4,-20(fp)
  80e460:	e17ffc15 	stw	r5,-16(fp)
  80e464:	e1bffd15 	stw	r6,-12(fp)
  80e468:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80e46c:	00bffa84 	movi	r2,-22
  80e470:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80e474:	e0bffc17 	ldw	r2,-16(fp)
  80e478:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e47c:	e0bff917 	ldw	r2,-28(fp)
  80e480:	10800808 	cmpgei	r2,r2,32
  80e484:	1000291e 	bne	r2,zero,80e52c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e488:	0005303a 	rdctl	r2,status
  80e48c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e490:	e0fff717 	ldw	r3,-36(fp)
  80e494:	00bfff84 	movi	r2,-2
  80e498:	1884703a 	and	r2,r3,r2
  80e49c:	1001703a 	wrctl	status,r2
  
  return context;
  80e4a0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80e4a4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80e4a8:	e0bff917 	ldw	r2,-28(fp)
  80e4ac:	00c02074 	movhi	r3,129
  80e4b0:	18cb2b04 	addi	r3,r3,11436
  80e4b4:	100490fa 	slli	r2,r2,3
  80e4b8:	10c7883a 	add	r3,r2,r3
  80e4bc:	e0bffd17 	ldw	r2,-12(fp)
  80e4c0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80e4c4:	e0bff917 	ldw	r2,-28(fp)
  80e4c8:	00c02074 	movhi	r3,129
  80e4cc:	18cb2b04 	addi	r3,r3,11436
  80e4d0:	100490fa 	slli	r2,r2,3
  80e4d4:	10c5883a 	add	r2,r2,r3
  80e4d8:	10c00104 	addi	r3,r2,4
  80e4dc:	e0bffe17 	ldw	r2,-8(fp)
  80e4e0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80e4e4:	e0bffd17 	ldw	r2,-12(fp)
  80e4e8:	1005003a 	cmpeq	r2,r2,zero
  80e4ec:	1000051e 	bne	r2,zero,80e504 <alt_iic_isr_register+0xb8>
  80e4f0:	e17ff917 	ldw	r5,-28(fp)
  80e4f4:	e13ffb17 	ldw	r4,-20(fp)
  80e4f8:	080e2c80 	call	80e2c8 <alt_ic_irq_enable>
  80e4fc:	e0bfff15 	stw	r2,-4(fp)
  80e500:	00000406 	br	80e514 <alt_iic_isr_register+0xc8>
  80e504:	e17ff917 	ldw	r5,-28(fp)
  80e508:	e13ffb17 	ldw	r4,-20(fp)
  80e50c:	080e3640 	call	80e364 <alt_ic_irq_disable>
  80e510:	e0bfff15 	stw	r2,-4(fp)
  80e514:	e0bfff17 	ldw	r2,-4(fp)
  80e518:	e0bffa15 	stw	r2,-24(fp)
  80e51c:	e0bff817 	ldw	r2,-32(fp)
  80e520:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e524:	e0bff617 	ldw	r2,-40(fp)
  80e528:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80e52c:	e0bffa17 	ldw	r2,-24(fp)
}
  80e530:	e037883a 	mov	sp,fp
  80e534:	dfc00117 	ldw	ra,4(sp)
  80e538:	df000017 	ldw	fp,0(sp)
  80e53c:	dec00204 	addi	sp,sp,8
  80e540:	f800283a 	ret

0080e544 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80e544:	defff904 	addi	sp,sp,-28
  80e548:	dfc00615 	stw	ra,24(sp)
  80e54c:	df000515 	stw	fp,20(sp)
  80e550:	df000504 	addi	fp,sp,20
  80e554:	e13ffc15 	stw	r4,-16(fp)
  80e558:	e17ffd15 	stw	r5,-12(fp)
  80e55c:	e1bffe15 	stw	r6,-8(fp)
  80e560:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80e564:	e13ffd17 	ldw	r4,-12(fp)
  80e568:	e17ffe17 	ldw	r5,-8(fp)
  80e56c:	e1bfff17 	ldw	r6,-4(fp)
  80e570:	080b0780 	call	80b078 <open>
  80e574:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80e578:	e0bffb17 	ldw	r2,-20(fp)
  80e57c:	1004803a 	cmplt	r2,r2,zero
  80e580:	10001c1e 	bne	r2,zero,80e5f4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80e584:	e0bffb17 	ldw	r2,-20(fp)
  80e588:	00c02074 	movhi	r3,129
  80e58c:	18fed404 	addi	r3,r3,-1200
  80e590:	10800324 	muli	r2,r2,12
  80e594:	10c5883a 	add	r2,r2,r3
  80e598:	10c00017 	ldw	r3,0(r2)
  80e59c:	e0bffc17 	ldw	r2,-16(fp)
  80e5a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80e5a4:	e0bffb17 	ldw	r2,-20(fp)
  80e5a8:	00c02074 	movhi	r3,129
  80e5ac:	18fed404 	addi	r3,r3,-1200
  80e5b0:	10800324 	muli	r2,r2,12
  80e5b4:	10c5883a 	add	r2,r2,r3
  80e5b8:	10800104 	addi	r2,r2,4
  80e5bc:	10c00017 	ldw	r3,0(r2)
  80e5c0:	e0bffc17 	ldw	r2,-16(fp)
  80e5c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80e5c8:	e0bffb17 	ldw	r2,-20(fp)
  80e5cc:	00c02074 	movhi	r3,129
  80e5d0:	18fed404 	addi	r3,r3,-1200
  80e5d4:	10800324 	muli	r2,r2,12
  80e5d8:	10c5883a 	add	r2,r2,r3
  80e5dc:	10800204 	addi	r2,r2,8
  80e5e0:	10c00017 	ldw	r3,0(r2)
  80e5e4:	e0bffc17 	ldw	r2,-16(fp)
  80e5e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80e5ec:	e13ffb17 	ldw	r4,-20(fp)
  80e5f0:	080b3e00 	call	80b3e0 <alt_release_fd>
  }
} 
  80e5f4:	e037883a 	mov	sp,fp
  80e5f8:	dfc00117 	ldw	ra,4(sp)
  80e5fc:	df000017 	ldw	fp,0(sp)
  80e600:	dec00204 	addi	sp,sp,8
  80e604:	f800283a 	ret

0080e608 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80e608:	defffb04 	addi	sp,sp,-20
  80e60c:	dfc00415 	stw	ra,16(sp)
  80e610:	df000315 	stw	fp,12(sp)
  80e614:	df000304 	addi	fp,sp,12
  80e618:	e13ffd15 	stw	r4,-12(fp)
  80e61c:	e17ffe15 	stw	r5,-8(fp)
  80e620:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80e624:	01002074 	movhi	r4,129
  80e628:	213ed704 	addi	r4,r4,-1188
  80e62c:	e17ffd17 	ldw	r5,-12(fp)
  80e630:	01800044 	movi	r6,1
  80e634:	01c07fc4 	movi	r7,511
  80e638:	080e5440 	call	80e544 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80e63c:	01002074 	movhi	r4,129
  80e640:	213ed404 	addi	r4,r4,-1200
  80e644:	e17ffe17 	ldw	r5,-8(fp)
  80e648:	000d883a 	mov	r6,zero
  80e64c:	01c07fc4 	movi	r7,511
  80e650:	080e5440 	call	80e544 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80e654:	01002074 	movhi	r4,129
  80e658:	213eda04 	addi	r4,r4,-1176
  80e65c:	e17fff17 	ldw	r5,-4(fp)
  80e660:	01800044 	movi	r6,1
  80e664:	01c07fc4 	movi	r7,511
  80e668:	080e5440 	call	80e544 <alt_open_fd>
}  
  80e66c:	e037883a 	mov	sp,fp
  80e670:	dfc00117 	ldw	ra,4(sp)
  80e674:	df000017 	ldw	fp,0(sp)
  80e678:	dec00204 	addi	sp,sp,8
  80e67c:	f800283a 	ret

0080e680 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80e680:	defffd04 	addi	sp,sp,-12
  80e684:	dfc00215 	stw	ra,8(sp)
  80e688:	df000115 	stw	fp,4(sp)
  80e68c:	df000104 	addi	fp,sp,4
  80e690:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80e694:	e13fff17 	ldw	r4,-4(fp)
  80e698:	080e6d00 	call	80e6d0 <alt_busy_sleep>
}
  80e69c:	e037883a 	mov	sp,fp
  80e6a0:	dfc00117 	ldw	ra,4(sp)
  80e6a4:	df000017 	ldw	fp,0(sp)
  80e6a8:	dec00204 	addi	sp,sp,8
  80e6ac:	f800283a 	ret

0080e6b0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80e6b0:	deffff04 	addi	sp,sp,-4
  80e6b4:	df000015 	stw	fp,0(sp)
  80e6b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80e6bc:	000170fa 	wrctl	ienable,zero
}
  80e6c0:	e037883a 	mov	sp,fp
  80e6c4:	df000017 	ldw	fp,0(sp)
  80e6c8:	dec00104 	addi	sp,sp,4
  80e6cc:	f800283a 	ret

0080e6d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80e6d0:	defffa04 	addi	sp,sp,-24
  80e6d4:	dfc00515 	stw	ra,20(sp)
  80e6d8:	df000415 	stw	fp,16(sp)
  80e6dc:	df000404 	addi	fp,sp,16
  80e6e0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80e6e4:	008000c4 	movi	r2,3
  80e6e8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80e6ec:	e0fffc17 	ldw	r3,-16(fp)
  80e6f0:	008003f4 	movhi	r2,15
  80e6f4:	10909004 	addi	r2,r2,16960
  80e6f8:	188b383a 	mul	r5,r3,r2
  80e6fc:	0100bef4 	movhi	r4,763
  80e700:	213c2004 	addi	r4,r4,-3968
  80e704:	08009680 	call	800968 <__udivsi3>
  80e708:	100b883a 	mov	r5,r2
  80e70c:	01200034 	movhi	r4,32768
  80e710:	213fffc4 	addi	r4,r4,-1
  80e714:	08009680 	call	800968 <__udivsi3>
  80e718:	100b883a 	mov	r5,r2
  80e71c:	e13fff17 	ldw	r4,-4(fp)
  80e720:	08009680 	call	800968 <__udivsi3>
  80e724:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80e728:	e0bffd17 	ldw	r2,-12(fp)
  80e72c:	1005003a 	cmpeq	r2,r2,zero
  80e730:	1000281e 	bne	r2,zero,80e7d4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  80e734:	e03ffe15 	stw	zero,-8(fp)
  80e738:	00001606 	br	80e794 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80e73c:	00a00034 	movhi	r2,32768
  80e740:	10bfffc4 	addi	r2,r2,-1
  80e744:	10bfffc4 	addi	r2,r2,-1
  80e748:	103ffe1e 	bne	r2,zero,80e744 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80e74c:	e0fffc17 	ldw	r3,-16(fp)
  80e750:	008003f4 	movhi	r2,15
  80e754:	10909004 	addi	r2,r2,16960
  80e758:	188b383a 	mul	r5,r3,r2
  80e75c:	0100bef4 	movhi	r4,763
  80e760:	213c2004 	addi	r4,r4,-3968
  80e764:	08009680 	call	800968 <__udivsi3>
  80e768:	100b883a 	mov	r5,r2
  80e76c:	01200034 	movhi	r4,32768
  80e770:	213fffc4 	addi	r4,r4,-1
  80e774:	08009680 	call	800968 <__udivsi3>
  80e778:	1007883a 	mov	r3,r2
  80e77c:	e0bfff17 	ldw	r2,-4(fp)
  80e780:	10c5c83a 	sub	r2,r2,r3
  80e784:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80e788:	e0bffe17 	ldw	r2,-8(fp)
  80e78c:	10800044 	addi	r2,r2,1
  80e790:	e0bffe15 	stw	r2,-8(fp)
  80e794:	e0fffe17 	ldw	r3,-8(fp)
  80e798:	e0bffd17 	ldw	r2,-12(fp)
  80e79c:	18bfe716 	blt	r3,r2,80e73c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e7a0:	e0fffc17 	ldw	r3,-16(fp)
  80e7a4:	008003f4 	movhi	r2,15
  80e7a8:	10909004 	addi	r2,r2,16960
  80e7ac:	188b383a 	mul	r5,r3,r2
  80e7b0:	0100bef4 	movhi	r4,763
  80e7b4:	213c2004 	addi	r4,r4,-3968
  80e7b8:	08009680 	call	800968 <__udivsi3>
  80e7bc:	1007883a 	mov	r3,r2
  80e7c0:	e0bfff17 	ldw	r2,-4(fp)
  80e7c4:	1885383a 	mul	r2,r3,r2
  80e7c8:	10bfffc4 	addi	r2,r2,-1
  80e7cc:	103ffe1e 	bne	r2,zero,80e7c8 <alt_busy_sleep+0xf8>
  80e7d0:	00000c06 	br	80e804 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80e7d4:	e0fffc17 	ldw	r3,-16(fp)
  80e7d8:	008003f4 	movhi	r2,15
  80e7dc:	10909004 	addi	r2,r2,16960
  80e7e0:	188b383a 	mul	r5,r3,r2
  80e7e4:	0100bef4 	movhi	r4,763
  80e7e8:	213c2004 	addi	r4,r4,-3968
  80e7ec:	08009680 	call	800968 <__udivsi3>
  80e7f0:	1007883a 	mov	r3,r2
  80e7f4:	e0bfff17 	ldw	r2,-4(fp)
  80e7f8:	1885383a 	mul	r2,r3,r2
  80e7fc:	10bfffc4 	addi	r2,r2,-1
  80e800:	00bffe16 	blt	zero,r2,80e7fc <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80e804:	0005883a 	mov	r2,zero
}
  80e808:	e037883a 	mov	sp,fp
  80e80c:	dfc00117 	ldw	ra,4(sp)
  80e810:	df000017 	ldw	fp,0(sp)
  80e814:	dec00204 	addi	sp,sp,8
  80e818:	f800283a 	ret

0080e81c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80e81c:	defffb04 	addi	sp,sp,-20
  80e820:	df000415 	stw	fp,16(sp)
  80e824:	df000404 	addi	fp,sp,16
  80e828:	e13ffe15 	stw	r4,-8(fp)
  80e82c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80e830:	e0bfff17 	ldw	r2,-4(fp)
  80e834:	10840070 	cmpltui	r2,r2,4097
  80e838:	1000021e 	bne	r2,zero,80e844 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80e83c:	00840004 	movi	r2,4096
  80e840:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80e844:	e0fffe17 	ldw	r3,-8(fp)
  80e848:	e0bfff17 	ldw	r2,-4(fp)
  80e84c:	1885883a 	add	r2,r3,r2
  80e850:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80e854:	e0bffe17 	ldw	r2,-8(fp)
  80e858:	e0bffd15 	stw	r2,-12(fp)
  80e85c:	00000506 	br	80e874 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80e860:	e0bffd17 	ldw	r2,-12(fp)
  80e864:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80e868:	e0bffd17 	ldw	r2,-12(fp)
  80e86c:	10800804 	addi	r2,r2,32
  80e870:	e0bffd15 	stw	r2,-12(fp)
  80e874:	e0fffd17 	ldw	r3,-12(fp)
  80e878:	e0bffc17 	ldw	r2,-16(fp)
  80e87c:	18bff836 	bltu	r3,r2,80e860 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80e880:	e0bffe17 	ldw	r2,-8(fp)
  80e884:	108007cc 	andi	r2,r2,31
  80e888:	1005003a 	cmpeq	r2,r2,zero
  80e88c:	1000021e 	bne	r2,zero,80e898 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80e890:	e0bffd17 	ldw	r2,-12(fp)
  80e894:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80e898:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80e89c:	e037883a 	mov	sp,fp
  80e8a0:	df000017 	ldw	fp,0(sp)
  80e8a4:	dec00104 	addi	sp,sp,4
  80e8a8:	f800283a 	ret

0080e8ac <atexit>:
  80e8ac:	200b883a 	mov	r5,r4
  80e8b0:	000d883a 	mov	r6,zero
  80e8b4:	0009883a 	mov	r4,zero
  80e8b8:	000f883a 	mov	r7,zero
  80e8bc:	080e96c1 	jmpi	80e96c <__register_exitproc>

0080e8c0 <exit>:
  80e8c0:	defffe04 	addi	sp,sp,-8
  80e8c4:	000b883a 	mov	r5,zero
  80e8c8:	dc000015 	stw	r16,0(sp)
  80e8cc:	dfc00115 	stw	ra,4(sp)
  80e8d0:	2021883a 	mov	r16,r4
  80e8d4:	080eaa40 	call	80eaa4 <__call_exitprocs>
  80e8d8:	00802074 	movhi	r2,129
  80e8dc:	1083c804 	addi	r2,r2,3872
  80e8e0:	11000017 	ldw	r4,0(r2)
  80e8e4:	20800f17 	ldw	r2,60(r4)
  80e8e8:	10000126 	beq	r2,zero,80e8f0 <exit+0x30>
  80e8ec:	103ee83a 	callr	r2
  80e8f0:	8009883a 	mov	r4,r16
  80e8f4:	080ec940 	call	80ec94 <_exit>

0080e8f8 <memcmp>:
  80e8f8:	00c000c4 	movi	r3,3
  80e8fc:	1980032e 	bgeu	r3,r6,80e90c <memcmp+0x14>
  80e900:	2144b03a 	or	r2,r4,r5
  80e904:	10c4703a 	and	r2,r2,r3
  80e908:	10000f26 	beq	r2,zero,80e948 <memcmp+0x50>
  80e90c:	31ffffc4 	addi	r7,r6,-1
  80e910:	3000061e 	bne	r6,zero,80e92c <memcmp+0x34>
  80e914:	00000a06 	br	80e940 <memcmp+0x48>
  80e918:	39ffffc4 	addi	r7,r7,-1
  80e91c:	00bfffc4 	movi	r2,-1
  80e920:	21000044 	addi	r4,r4,1
  80e924:	29400044 	addi	r5,r5,1
  80e928:	38800526 	beq	r7,r2,80e940 <memcmp+0x48>
  80e92c:	20c00003 	ldbu	r3,0(r4)
  80e930:	28800003 	ldbu	r2,0(r5)
  80e934:	18bff826 	beq	r3,r2,80e918 <memcmp+0x20>
  80e938:	1885c83a 	sub	r2,r3,r2
  80e93c:	f800283a 	ret
  80e940:	0005883a 	mov	r2,zero
  80e944:	f800283a 	ret
  80e948:	180f883a 	mov	r7,r3
  80e94c:	20c00017 	ldw	r3,0(r4)
  80e950:	28800017 	ldw	r2,0(r5)
  80e954:	18bfed1e 	bne	r3,r2,80e90c <memcmp+0x14>
  80e958:	31bfff04 	addi	r6,r6,-4
  80e95c:	21000104 	addi	r4,r4,4
  80e960:	29400104 	addi	r5,r5,4
  80e964:	39bff936 	bltu	r7,r6,80e94c <memcmp+0x54>
  80e968:	003fe806 	br	80e90c <memcmp+0x14>

0080e96c <__register_exitproc>:
  80e96c:	defffa04 	addi	sp,sp,-24
  80e970:	00802074 	movhi	r2,129
  80e974:	1083c804 	addi	r2,r2,3872
  80e978:	dc000015 	stw	r16,0(sp)
  80e97c:	14000017 	ldw	r16,0(r2)
  80e980:	dd000415 	stw	r20,16(sp)
  80e984:	2829883a 	mov	r20,r5
  80e988:	81405217 	ldw	r5,328(r16)
  80e98c:	dcc00315 	stw	r19,12(sp)
  80e990:	dc800215 	stw	r18,8(sp)
  80e994:	dc400115 	stw	r17,4(sp)
  80e998:	dfc00515 	stw	ra,20(sp)
  80e99c:	2023883a 	mov	r17,r4
  80e9a0:	3027883a 	mov	r19,r6
  80e9a4:	3825883a 	mov	r18,r7
  80e9a8:	28002526 	beq	r5,zero,80ea40 <__register_exitproc+0xd4>
  80e9ac:	29000117 	ldw	r4,4(r5)
  80e9b0:	008007c4 	movi	r2,31
  80e9b4:	11002716 	blt	r2,r4,80ea54 <__register_exitproc+0xe8>
  80e9b8:	8800101e 	bne	r17,zero,80e9fc <__register_exitproc+0x90>
  80e9bc:	2105883a 	add	r2,r4,r4
  80e9c0:	1085883a 	add	r2,r2,r2
  80e9c4:	20c00044 	addi	r3,r4,1
  80e9c8:	1145883a 	add	r2,r2,r5
  80e9cc:	0009883a 	mov	r4,zero
  80e9d0:	15000215 	stw	r20,8(r2)
  80e9d4:	28c00115 	stw	r3,4(r5)
  80e9d8:	2005883a 	mov	r2,r4
  80e9dc:	dfc00517 	ldw	ra,20(sp)
  80e9e0:	dd000417 	ldw	r20,16(sp)
  80e9e4:	dcc00317 	ldw	r19,12(sp)
  80e9e8:	dc800217 	ldw	r18,8(sp)
  80e9ec:	dc400117 	ldw	r17,4(sp)
  80e9f0:	dc000017 	ldw	r16,0(sp)
  80e9f4:	dec00604 	addi	sp,sp,24
  80e9f8:	f800283a 	ret
  80e9fc:	29802204 	addi	r6,r5,136
  80ea00:	00800044 	movi	r2,1
  80ea04:	110e983a 	sll	r7,r2,r4
  80ea08:	30c04017 	ldw	r3,256(r6)
  80ea0c:	2105883a 	add	r2,r4,r4
  80ea10:	1085883a 	add	r2,r2,r2
  80ea14:	1185883a 	add	r2,r2,r6
  80ea18:	19c6b03a 	or	r3,r3,r7
  80ea1c:	14802015 	stw	r18,128(r2)
  80ea20:	14c00015 	stw	r19,0(r2)
  80ea24:	00800084 	movi	r2,2
  80ea28:	30c04015 	stw	r3,256(r6)
  80ea2c:	88bfe31e 	bne	r17,r2,80e9bc <__register_exitproc+0x50>
  80ea30:	30804117 	ldw	r2,260(r6)
  80ea34:	11c4b03a 	or	r2,r2,r7
  80ea38:	30804115 	stw	r2,260(r6)
  80ea3c:	003fdf06 	br	80e9bc <__register_exitproc+0x50>
  80ea40:	00802074 	movhi	r2,129
  80ea44:	108b6b04 	addi	r2,r2,11692
  80ea48:	100b883a 	mov	r5,r2
  80ea4c:	80805215 	stw	r2,328(r16)
  80ea50:	003fd606 	br	80e9ac <__register_exitproc+0x40>
  80ea54:	00800034 	movhi	r2,0
  80ea58:	10800004 	addi	r2,r2,0
  80ea5c:	1000021e 	bne	r2,zero,80ea68 <__register_exitproc+0xfc>
  80ea60:	013fffc4 	movi	r4,-1
  80ea64:	003fdc06 	br	80e9d8 <__register_exitproc+0x6c>
  80ea68:	01006404 	movi	r4,400
  80ea6c:	103ee83a 	callr	r2
  80ea70:	1007883a 	mov	r3,r2
  80ea74:	103ffa26 	beq	r2,zero,80ea60 <__register_exitproc+0xf4>
  80ea78:	80805217 	ldw	r2,328(r16)
  80ea7c:	180b883a 	mov	r5,r3
  80ea80:	18000115 	stw	zero,4(r3)
  80ea84:	18800015 	stw	r2,0(r3)
  80ea88:	80c05215 	stw	r3,328(r16)
  80ea8c:	18006215 	stw	zero,392(r3)
  80ea90:	18006315 	stw	zero,396(r3)
  80ea94:	0009883a 	mov	r4,zero
  80ea98:	883fc826 	beq	r17,zero,80e9bc <__register_exitproc+0x50>
  80ea9c:	003fd706 	br	80e9fc <__register_exitproc+0x90>

0080eaa0 <register_fini>:
  80eaa0:	f800283a 	ret

0080eaa4 <__call_exitprocs>:
  80eaa4:	00802074 	movhi	r2,129
  80eaa8:	1083c804 	addi	r2,r2,3872
  80eaac:	10800017 	ldw	r2,0(r2)
  80eab0:	defff304 	addi	sp,sp,-52
  80eab4:	df000b15 	stw	fp,44(sp)
  80eab8:	d8800115 	stw	r2,4(sp)
  80eabc:	00800034 	movhi	r2,0
  80eac0:	10800004 	addi	r2,r2,0
  80eac4:	1005003a 	cmpeq	r2,r2,zero
  80eac8:	d8800215 	stw	r2,8(sp)
  80eacc:	d8800117 	ldw	r2,4(sp)
  80ead0:	dd400815 	stw	r21,32(sp)
  80ead4:	dd000715 	stw	r20,28(sp)
  80ead8:	10805204 	addi	r2,r2,328
  80eadc:	dfc00c15 	stw	ra,48(sp)
  80eae0:	ddc00a15 	stw	r23,40(sp)
  80eae4:	dd800915 	stw	r22,36(sp)
  80eae8:	dcc00615 	stw	r19,24(sp)
  80eaec:	dc800515 	stw	r18,20(sp)
  80eaf0:	dc400415 	stw	r17,16(sp)
  80eaf4:	dc000315 	stw	r16,12(sp)
  80eaf8:	282b883a 	mov	r21,r5
  80eafc:	2039883a 	mov	fp,r4
  80eb00:	d8800015 	stw	r2,0(sp)
  80eb04:	2829003a 	cmpeq	r20,r5,zero
  80eb08:	d8800117 	ldw	r2,4(sp)
  80eb0c:	14405217 	ldw	r17,328(r2)
  80eb10:	88001026 	beq	r17,zero,80eb54 <__call_exitprocs+0xb0>
  80eb14:	ddc00017 	ldw	r23,0(sp)
  80eb18:	88800117 	ldw	r2,4(r17)
  80eb1c:	8c802204 	addi	r18,r17,136
  80eb20:	143fffc4 	addi	r16,r2,-1
  80eb24:	80000916 	blt	r16,zero,80eb4c <__call_exitprocs+0xa8>
  80eb28:	05bfffc4 	movi	r22,-1
  80eb2c:	a000151e 	bne	r20,zero,80eb84 <__call_exitprocs+0xe0>
  80eb30:	8409883a 	add	r4,r16,r16
  80eb34:	2105883a 	add	r2,r4,r4
  80eb38:	1485883a 	add	r2,r2,r18
  80eb3c:	10c02017 	ldw	r3,128(r2)
  80eb40:	a8c01126 	beq	r21,r3,80eb88 <__call_exitprocs+0xe4>
  80eb44:	843fffc4 	addi	r16,r16,-1
  80eb48:	85bff81e 	bne	r16,r22,80eb2c <__call_exitprocs+0x88>
  80eb4c:	d8800217 	ldw	r2,8(sp)
  80eb50:	10003126 	beq	r2,zero,80ec18 <__call_exitprocs+0x174>
  80eb54:	dfc00c17 	ldw	ra,48(sp)
  80eb58:	df000b17 	ldw	fp,44(sp)
  80eb5c:	ddc00a17 	ldw	r23,40(sp)
  80eb60:	dd800917 	ldw	r22,36(sp)
  80eb64:	dd400817 	ldw	r21,32(sp)
  80eb68:	dd000717 	ldw	r20,28(sp)
  80eb6c:	dcc00617 	ldw	r19,24(sp)
  80eb70:	dc800517 	ldw	r18,20(sp)
  80eb74:	dc400417 	ldw	r17,16(sp)
  80eb78:	dc000317 	ldw	r16,12(sp)
  80eb7c:	dec00d04 	addi	sp,sp,52
  80eb80:	f800283a 	ret
  80eb84:	8409883a 	add	r4,r16,r16
  80eb88:	88c00117 	ldw	r3,4(r17)
  80eb8c:	2105883a 	add	r2,r4,r4
  80eb90:	1445883a 	add	r2,r2,r17
  80eb94:	18ffffc4 	addi	r3,r3,-1
  80eb98:	11800217 	ldw	r6,8(r2)
  80eb9c:	1c001526 	beq	r3,r16,80ebf4 <__call_exitprocs+0x150>
  80eba0:	10000215 	stw	zero,8(r2)
  80eba4:	303fe726 	beq	r6,zero,80eb44 <__call_exitprocs+0xa0>
  80eba8:	00c00044 	movi	r3,1
  80ebac:	1c06983a 	sll	r3,r3,r16
  80ebb0:	90804017 	ldw	r2,256(r18)
  80ebb4:	8cc00117 	ldw	r19,4(r17)
  80ebb8:	1884703a 	and	r2,r3,r2
  80ebbc:	10001426 	beq	r2,zero,80ec10 <__call_exitprocs+0x16c>
  80ebc0:	90804117 	ldw	r2,260(r18)
  80ebc4:	1884703a 	and	r2,r3,r2
  80ebc8:	10000c1e 	bne	r2,zero,80ebfc <__call_exitprocs+0x158>
  80ebcc:	2105883a 	add	r2,r4,r4
  80ebd0:	1485883a 	add	r2,r2,r18
  80ebd4:	11400017 	ldw	r5,0(r2)
  80ebd8:	e009883a 	mov	r4,fp
  80ebdc:	303ee83a 	callr	r6
  80ebe0:	88800117 	ldw	r2,4(r17)
  80ebe4:	98bfc81e 	bne	r19,r2,80eb08 <__call_exitprocs+0x64>
  80ebe8:	b8800017 	ldw	r2,0(r23)
  80ebec:	147fd526 	beq	r2,r17,80eb44 <__call_exitprocs+0xa0>
  80ebf0:	003fc506 	br	80eb08 <__call_exitprocs+0x64>
  80ebf4:	8c000115 	stw	r16,4(r17)
  80ebf8:	003fea06 	br	80eba4 <__call_exitprocs+0x100>
  80ebfc:	2105883a 	add	r2,r4,r4
  80ec00:	1485883a 	add	r2,r2,r18
  80ec04:	11000017 	ldw	r4,0(r2)
  80ec08:	303ee83a 	callr	r6
  80ec0c:	003ff406 	br	80ebe0 <__call_exitprocs+0x13c>
  80ec10:	303ee83a 	callr	r6
  80ec14:	003ff206 	br	80ebe0 <__call_exitprocs+0x13c>
  80ec18:	88800117 	ldw	r2,4(r17)
  80ec1c:	1000081e 	bne	r2,zero,80ec40 <__call_exitprocs+0x19c>
  80ec20:	89000017 	ldw	r4,0(r17)
  80ec24:	20000726 	beq	r4,zero,80ec44 <__call_exitprocs+0x1a0>
  80ec28:	b9000015 	stw	r4,0(r23)
  80ec2c:	8809883a 	mov	r4,r17
  80ec30:	00000000 	call	0 <__reset-0x800000>
  80ec34:	bc400017 	ldw	r17,0(r23)
  80ec38:	883fb71e 	bne	r17,zero,80eb18 <__call_exitprocs+0x74>
  80ec3c:	003fc506 	br	80eb54 <__call_exitprocs+0xb0>
  80ec40:	89000017 	ldw	r4,0(r17)
  80ec44:	882f883a 	mov	r23,r17
  80ec48:	2023883a 	mov	r17,r4
  80ec4c:	883fb21e 	bne	r17,zero,80eb18 <__call_exitprocs+0x74>
  80ec50:	003fc006 	br	80eb54 <__call_exitprocs+0xb0>

0080ec54 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80ec54:	defffd04 	addi	sp,sp,-12
  80ec58:	df000215 	stw	fp,8(sp)
  80ec5c:	df000204 	addi	fp,sp,8
  80ec60:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80ec64:	e0bfff17 	ldw	r2,-4(fp)
  80ec68:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80ec6c:	e0bffe17 	ldw	r2,-8(fp)
  80ec70:	1005003a 	cmpeq	r2,r2,zero
  80ec74:	1000021e 	bne	r2,zero,80ec80 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80ec78:	002af070 	cmpltui	zero,zero,43969
  80ec7c:	00000106 	br	80ec84 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80ec80:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80ec84:	e037883a 	mov	sp,fp
  80ec88:	df000017 	ldw	fp,0(sp)
  80ec8c:	dec00104 	addi	sp,sp,4
  80ec90:	f800283a 	ret

0080ec94 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80ec94:	defffd04 	addi	sp,sp,-12
  80ec98:	dfc00215 	stw	ra,8(sp)
  80ec9c:	df000115 	stw	fp,4(sp)
  80eca0:	df000104 	addi	fp,sp,4
  80eca4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80eca8:	e13fff17 	ldw	r4,-4(fp)
  80ecac:	080ec540 	call	80ec54 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80ecb0:	003fff06 	br	80ecb0 <_exit+0x1c>
  80ecb4:	0080eaa0 	cmpeqi	r2,zero,938
