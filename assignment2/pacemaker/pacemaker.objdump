
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000513c memsz 0x0000513c flags r-x
    LOAD off    0x0000615c vaddr 0x0080515c paddr 0x0080697c align 2**12
         filesz 0x00001820 memsz 0x00001820 flags rw-
    LOAD off    0x0000819c vaddr 0x0080819c paddr 0x0080819c align 2**12
         filesz 0x00000000 memsz 0x00000380 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004cdc  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002cc  00804e90  00804e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001820  0080515c  0080697c  0000615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000380  0080819c  0080819c  0000819c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000797c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000006b8  00000000  00000000  000079a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000f0a  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d679  00000000  00000000  00008f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000312c  00000000  00000000  000165db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008a36  00000000  00000000  00019707  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d54  00000000  00000000  00022140  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000da8  00000000  00000000  00022e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015c6  00000000  00000000  00023c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00025204  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00025268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00027b7a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00027b7d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00027b80  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00027b81  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00027b82  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00027b86  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00027b8a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00027b8e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00027b97  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00027ba0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  00027ba9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  00027baf  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  00027bc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00804e90 l    d  .rodata	00000000 .rodata
0080515c l    d  .rwdata	00000000 .rwdata
0080819c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00808274 l     O .bss	00000018 URI_timer
008081fc l     O .bss	00000018 LRI_timer
00808214 l     O .bss	00000018 PVARP_timer
0080822c l     O .bss	00000018 VRP_timer
00808244 l     O .bss	00000018 AEI_timer
0080825c l     O .bss	00000018 AVI_timer
00000000 l    df *ABS*	00000000 pacemaker_fsm.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
00800fd8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080515c l     O .rwdata	00001060 jtag_uart
008061bc l     O .rwdata	00000120 lcd
008062dc l     O .rwdata	000000c4 uart
0080131c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080155c l     F .text	00000228 altera_avalon_jtag_uart_irq
00801784 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00806950 l     O .rwdata	00000004 colstart
00801e00 l     F .text	000000b8 lcd_write_command
00801eb8 l     F .text	000000d4 lcd_write_data
00801f8c l     F .text	000000c4 lcd_clear_screen
00802050 l     F .text	000001ec lcd_repaint_screen
0080223c l     F .text	000000c8 lcd_scroll_up
00802304 l     F .text	000002d0 lcd_handle_escape
00802ae0 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00802d40 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00803000 l     F .text	0000009c altera_avalon_uart_irq
0080309c l     F .text	000000e0 altera_avalon_uart_rxirq
0080317c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00803568 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00803790 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
008038ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00803990 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00803a70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00803e94 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00803fd0 l     F .text	000000dc alt_file_locked
00804234 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00804fd8 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00806548 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00804b2c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00804ce0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00804e2c l     F .text	00000040 alt_sim_halt
008081a8 g     O .bss	00000001 PRE_g2
008081a9 g     O .bss	00000001 g3b
00801044 g     F .text	0000006c alt_main
0080828c g     O .bss	00000100 alt_irq
008081aa g     O .bss	00000001 g4
0080697c g       *ABS*	00000000 __flash_rwdata_start
008081ab g     O .bss	00000001 g19
0080819c g     O .bss	00000001 _pacemaker_local_URI_t
008081ac g     O .bss	00000001 g27
008081ad g     O .bss	00000001 g3
0080819d g     O .bss	00000001 _pacemaker_local_VS
00800270 g     F .text	00000038 LRI_timer_isr
008081ae g     O .bss	00000001 g9
008081af g     O .bss	00000001 _cg7
008081b0 g     O .bss	00000004 _PRE_GO
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008081f8 g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
008081b4 g     O .bss	00000001 _cg12
008081e4 g     O .bss	00000004 alt_argv
0080e948 g       *ABS*	00000000 _gp
008042f4 g     F .text	00000030 usleep
0080044c g     F .text	00000044 reset
008081b5 g     O .bss	00000001 PRE_g20
008081b6 g     O .bss	00000001 g1
008063c8 g     O .rwdata	00000180 alt_fd_list
00804490 g     F .text	00000094 alt_find_dev
0080484c g     F .text	000000a0 memcpy
00803f58 g     F .text	00000078 alt_io_redirect
00804e90 g       *ABS*	00000000 __DTOR_END__
008081b7 g     O .bss	00000001 g12
00800200 g     F .text	00000038 URI_timer_isr
0080199c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00804e1c g     F .text	00000008 __udivsi3
008081b8 g     O .bss	00000001 g17
008081b9 g     O .bss	00000001 g27_e2
008046fc g     F .text	00000090 alt_icache_flush
0080819e g     O .bss	00000001 _pacemaker_local_AS
008002a8 g     F .text	00000038 PVARP_timer_isr
00806964 g     O .rwdata	00000004 alt_max_fd
008081ba g     O .bss	00000001 PRE_g8
008081bb g     O .bss	00000001 g18
008081bc g     O .bss	00000001 PRE_g10
00806978 g     O .rwdata	00000004 _global_impure_ptr
0080851c g       *ABS*	00000000 __bss_end
00803d9c g     F .text	000000f8 alt_iic_isr_register
00801148 g     F .text	0000010c alt_tick
00802f38 g     F .text	000000c8 altera_avalon_uart_init
00806970 g     O .rwdata	00000004 __ctype_ptr
00803d54 g     F .text	00000048 alt_ic_irq_enabled
008081bd g     O .bss	00000001 _cg21
008010b0 g     F .text	00000098 alt_alarm_stop
0080819f g     O .bss	00000001 _pacemaker_local_StartRI
008081f4 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
008063a0 g     O .rwdata	00000028 alt_dev_null
008081a0 g     O .bss	00000001 _pacemaker_local_AP
0080394c g     F .text	00000044 alt_dcache_flush_all
008081a1 g     O .bss	00000001 _pacemaker_local_LRI_t
008081be g     O .bss	00000001 g21
008081bf g     O .bss	00000001 _cg14
0080697c g       *ABS*	00000000 __ram_rwdata_end
008081c0 g     O .bss	00000001 g5
0080695c g     O .rwdata	00000008 alt_dev_list
008081c1 g     O .bss	00000001 g2
008081c2 g     O .bss	00000001 g7
008081c3 g     O .bss	00000001 _cg16
0080515c g       *ABS*	00000000 __ram_rodata_end
008081c4 g     O .bss	00000001 PRE_g25
00804e24 g     F .text	00000008 __umodsi3
00800238 g     F .text	00000038 AVI_timer_isr
008002e0 g     F .text	00000038 VRP_timer_isr
0080851c g       *ABS*	00000000 end
008081c5 g     O .bss	00000001 PRE_g4
008025d4 g     F .text	0000050c altera_avalon_lcd_16207_write
008035c8 g     F .text	000001c8 altera_avalon_uart_write
008081c6 g     O .bss	00000001 g23
0080149c g     F .text	000000c0 altera_avalon_jtag_uart_init
00804e8c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00802db0 g     F .text	00000090 alt_avalon_timer_sc_init
00802e98 g     F .text	00000058 altera_avalon_uart_write_fd
00802ef0 g     F .text	00000048 altera_avalon_uart_close_fd
00801bc0 g     F .text	00000240 altera_avalon_jtag_uart_write
008081c7 g     O .bss	00000001 g14
00804b30 g     F .text	000001b0 __call_exitprocs
008001b4 g     F .text	0000004c _start
008081ec g     O .bss	00000004 _alt_tick_rate
008081f0 g     O .bss	00000004 _alt_nticks
008081c8 g     O .bss	00000001 PRE_g6
00801288 g     F .text	00000094 alt_sys_init
008049f8 g     F .text	00000134 __register_exitproc
00801834 g     F .text	00000074 altera_avalon_jtag_uart_close
0080515c g       *ABS*	00000000 __ram_rwdata_start
00804e90 g       *ABS*	00000000 __ram_rodata_start
008081c9 g     O .bss	00000001 _cg5
00801354 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00804644 g     F .text	000000b8 alt_get_fd
00804344 g     F .text	0000014c alt_busy_sleep
008081ca g     O .bss	00000001 g15
008081cb g     O .bss	00000001 _GO
008047d8 g     F .text	00000074 memcmp
00801404 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080851c g       *ABS*	00000000 __alt_stack_base
0080144c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00800318 g     F .text	00000038 AEI_timer_isr
00800490 g     F .text	00000974 tick
008081cc g     O .bss	00000001 g20
00804524 g     F .text	00000120 alt_find_file
008039bc g     F .text	000000b4 alt_dev_llist_insert
008081cd g     O .bss	00000001 _cg22
0080819c g       *ABS*	00000000 __bss_start
008048ec g     F .text	00000098 memset
00800350 g     F .text	000000fc main
008081e8 g     O .bss	00000004 alt_envp
008081ce g     O .bss	00000001 _cg11
008081a2 g     O .bss	00000001 _pacemaker_local_AVI_t
008013ac g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00802bac g     F .text	0000013c altera_avalon_lcd_16207_init
0080838c g     O .bss	00000190 _atexit0
00806968 g     O .rwdata	00000004 alt_errno
00804d5c g     F .text	00000060 __divsi3
00804e90 g       *ABS*	00000000 __CTOR_END__
008081a3 g     O .bss	00000001 _pacemaker_local_VRP_t
00804e90 g       *ABS*	00000000 __flash_rodata_start
00804e90 g       *ABS*	00000000 __DTOR_LIST__
00801254 g     F .text	00000034 alt_irq_init
00804294 g     F .text	00000060 alt_release_fd
008081cf g     O .bss	00000001 g13
008081d0 g     O .bss	00000001 g8
0080478c g     F .text	00000014 atexit
00806974 g     O .rwdata	00000004 _impure_ptr
008081e0 g     O .bss	00000004 alt_argc
008081d1 g     O .bss	00000001 g6
008081d2 g     O .bss	00000001 _cg19
00803b34 g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00802ce8 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
008081d3 g     O .bss	00000001 _cg9
00806954 g     O .rwdata	00000008 alt_fs_list
008081d4 g     O .bss	00000001 g0
008081a4 g     O .bss	00000001 _pacemaker_local_AEI_t
00800020 g       *ABS*	00000000 __ram_exceptions_start
008081d5 g     O .bss	00000001 g16
00803bc8 g     F .text	00000050 alt_ic_isr_register
008081d6 g     O .bss	00000001 g25
0080697c g       *ABS*	00000000 _edata
00802e40 g     F .text	00000058 altera_avalon_uart_read_fd
0080851c g       *ABS*	00000000 _end
008081d7 g     O .bss	00000001 g11
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008018a8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008081d8 g     O .bss	00000001 g22
008081a5 g     O .bss	00000001 _pacemaker_local_VP
008081d9 g     O .bss	00000001 g28
008081da g     O .bss	00000001 g23_e1
00803cb4 g     F .text	000000a0 alt_ic_irq_disable
00804324 g     F .text	00000020 altera_nios2_qsys_irq_init
008081a6 g     O .bss	00000001 _pacemaker_local_PVARP_t
008047a0 g     F .text	00000038 exit
00804dbc g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008081db g     O .bss	00000001 _cg18
00804ed4 g     O .rodata	00000101 _ctype_
008032d8 g     F .text	00000060 altera_avalon_uart_close
00804e6c g     F .text	00000020 _exit
00800e04 g     F .text	00000154 alt_alarm_start
00804984 g     F .text	00000074 strlen
008040ac g     F .text	00000188 open
00803b98 g     F .text	00000030 alt_icache_flush_all
008081dc g     O .bss	00000001 g24
0080696c g     O .rwdata	00000004 alt_priority_mask
00803c18 g     F .text	0000009c alt_ic_irq_enable
00803338 g     F .text	00000230 altera_avalon_uart_read
008081dd g     O .bss	00000001 g10
00806948 g     O .rwdata	00000008 alt_alarm_list
00803ad0 g     F .text	00000064 _do_ctors
008081de g     O .bss	00000001 g26
008037f0 g     F .text	000000fc close
00800f58 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18e0a304 	addi	r3,r3,-32116
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18e0a304 	addi	r3,r3,-32116
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001d0:	d6ba5214 	ori	gp,gp,59720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10a06714 	ori	r2,r2,33180

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18e14714 	ori	r3,r3,34076

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	0800f580 	call	800f58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	08010440 	call	801044 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <URI_timer_isr>:
	AEI_timer,
	AVI_timer,
	URI_timer;

//timer ISR declarations
DECLARE_TIMER_ISR (URI)
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13fff15 	stw	r4,-4(fp)
  800210:	e0bfff17 	ldw	r2,-4(fp)
  800214:	e0bffe15 	stw	r2,-8(fp)
  800218:	e0fffe17 	ldw	r3,-8(fp)
  80021c:	00800044 	movi	r2,1
  800220:	18800015 	stw	r2,0(r3)
  800224:	0005883a 	mov	r2,zero
  800228:	e037883a 	mov	sp,fp
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00104 	addi	sp,sp,4
  800234:	f800283a 	ret

00800238 <AVI_timer_isr>:
DECLARE_TIMER_ISR (AVI)
  800238:	defffd04 	addi	sp,sp,-12
  80023c:	df000215 	stw	fp,8(sp)
  800240:	df000204 	addi	fp,sp,8
  800244:	e13fff15 	stw	r4,-4(fp)
  800248:	e0bfff17 	ldw	r2,-4(fp)
  80024c:	e0bffe15 	stw	r2,-8(fp)
  800250:	e0fffe17 	ldw	r3,-8(fp)
  800254:	00800044 	movi	r2,1
  800258:	18800015 	stw	r2,0(r3)
  80025c:	0005883a 	mov	r2,zero
  800260:	e037883a 	mov	sp,fp
  800264:	df000017 	ldw	fp,0(sp)
  800268:	dec00104 	addi	sp,sp,4
  80026c:	f800283a 	ret

00800270 <LRI_timer_isr>:
DECLARE_TIMER_ISR (LRI)
  800270:	defffd04 	addi	sp,sp,-12
  800274:	df000215 	stw	fp,8(sp)
  800278:	df000204 	addi	fp,sp,8
  80027c:	e13fff15 	stw	r4,-4(fp)
  800280:	e0bfff17 	ldw	r2,-4(fp)
  800284:	e0bffe15 	stw	r2,-8(fp)
  800288:	e0fffe17 	ldw	r3,-8(fp)
  80028c:	00800044 	movi	r2,1
  800290:	18800015 	stw	r2,0(r3)
  800294:	0005883a 	mov	r2,zero
  800298:	e037883a 	mov	sp,fp
  80029c:	df000017 	ldw	fp,0(sp)
  8002a0:	dec00104 	addi	sp,sp,4
  8002a4:	f800283a 	ret

008002a8 <PVARP_timer_isr>:
DECLARE_TIMER_ISR (PVARP)
  8002a8:	defffd04 	addi	sp,sp,-12
  8002ac:	df000215 	stw	fp,8(sp)
  8002b0:	df000204 	addi	fp,sp,8
  8002b4:	e13fff15 	stw	r4,-4(fp)
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	e0bffe15 	stw	r2,-8(fp)
  8002c0:	e0fffe17 	ldw	r3,-8(fp)
  8002c4:	00800044 	movi	r2,1
  8002c8:	18800015 	stw	r2,0(r3)
  8002cc:	0005883a 	mov	r2,zero
  8002d0:	e037883a 	mov	sp,fp
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00104 	addi	sp,sp,4
  8002dc:	f800283a 	ret

008002e0 <VRP_timer_isr>:
DECLARE_TIMER_ISR (VRP)
  8002e0:	defffd04 	addi	sp,sp,-12
  8002e4:	df000215 	stw	fp,8(sp)
  8002e8:	df000204 	addi	fp,sp,8
  8002ec:	e13fff15 	stw	r4,-4(fp)
  8002f0:	e0bfff17 	ldw	r2,-4(fp)
  8002f4:	e0bffe15 	stw	r2,-8(fp)
  8002f8:	e0fffe17 	ldw	r3,-8(fp)
  8002fc:	00800044 	movi	r2,1
  800300:	18800015 	stw	r2,0(r3)
  800304:	0005883a 	mov	r2,zero
  800308:	e037883a 	mov	sp,fp
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00104 	addi	sp,sp,4
  800314:	f800283a 	ret

00800318 <AEI_timer_isr>:
DECLARE_TIMER_ISR (AEI)
  800318:	defffd04 	addi	sp,sp,-12
  80031c:	df000215 	stw	fp,8(sp)
  800320:	df000204 	addi	fp,sp,8
  800324:	e13fff15 	stw	r4,-4(fp)
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	e0bffe15 	stw	r2,-8(fp)
  800330:	e0fffe17 	ldw	r3,-8(fp)
  800334:	00800044 	movi	r2,1
  800338:	18800015 	stw	r2,0(r3)
  80033c:	0005883a 	mov	r2,zero
  800340:	e037883a 	mov	sp,fp
  800344:	df000017 	ldw	fp,0(sp)
  800348:	dec00104 	addi	sp,sp,4
  80034c:	f800283a 	ret

00800350 <main>:



int main()
{
  800350:	defffe04 	addi	sp,sp,-8
  800354:	dfc00115 	stw	ra,4(sp)
  800358:	df000015 	stw	fp,0(sp)
  80035c:	d839883a 	mov	fp,sp
	reset();
  800360:	080044c0 	call	80044c <reset>
	while (1) {
		//reset and start URI and LRI timers if necessary
		//also start pvarp, vrp, and aei, although they should have stopped long before
		if (FSMVAR(StartRI) ) {
  800364:	d0a615c3 	ldbu	r2,-26537(gp)
  800368:	10803fcc 	andi	r2,r2,255
  80036c:	1080201c 	xori	r2,r2,128
  800370:	10bfe004 	addi	r2,r2,-128
  800374:	1005003a 	cmpeq	r2,r2,zero
  800378:	1000321e 	bne	r2,zero,800444 <main+0xf4>
			RESTART_TIMER(URI);
  80037c:	01002074 	movhi	r4,129
  800380:	21209d04 	addi	r4,r4,-32140
  800384:	08010b00 	call	8010b0 <alt_alarm_stop>
  800388:	01002074 	movhi	r4,129
  80038c:	21209d04 	addi	r4,r4,-32140
  800390:	0140e104 	movi	r5,900
  800394:	01802034 	movhi	r6,128
  800398:	31808004 	addi	r6,r6,512
  80039c:	d1e61504 	addi	r7,gp,-26540
  8003a0:	0800e040 	call	800e04 <alt_alarm_start>
			RESTART_TIMER(LRI);
  8003a4:	01002074 	movhi	r4,129
  8003a8:	21207f04 	addi	r4,r4,-32260
  8003ac:	08010b00 	call	8010b0 <alt_alarm_stop>
  8003b0:	01002074 	movhi	r4,129
  8003b4:	21207f04 	addi	r4,r4,-32260
  8003b8:	0140ed84 	movi	r5,950
  8003bc:	01802034 	movhi	r6,128
  8003c0:	31809c04 	addi	r6,r6,624
  8003c4:	d1e61644 	addi	r7,gp,-26535
  8003c8:	0800e040 	call	800e04 <alt_alarm_start>
			RESTART_TIMER(PVARP);
  8003cc:	01002074 	movhi	r4,129
  8003d0:	21208504 	addi	r4,r4,-32236
  8003d4:	08010b00 	call	8010b0 <alt_alarm_stop>
  8003d8:	01002074 	movhi	r4,129
  8003dc:	21208504 	addi	r4,r4,-32236
  8003e0:	01400c84 	movi	r5,50
  8003e4:	01802034 	movhi	r6,128
  8003e8:	3180aa04 	addi	r6,r6,680
  8003ec:	d1e61784 	addi	r7,gp,-26530
  8003f0:	0800e040 	call	800e04 <alt_alarm_start>
			RESTART_TIMER(VRP);
  8003f4:	01002074 	movhi	r4,129
  8003f8:	21208b04 	addi	r4,r4,-32212
  8003fc:	08010b00 	call	8010b0 <alt_alarm_stop>
  800400:	01002074 	movhi	r4,129
  800404:	21208b04 	addi	r4,r4,-32212
  800408:	01402584 	movi	r5,150
  80040c:	01802034 	movhi	r6,128
  800410:	3180b804 	addi	r6,r6,736
  800414:	d1e616c4 	addi	r7,gp,-26533
  800418:	0800e040 	call	800e04 <alt_alarm_start>
			RESTART_TIMER(AEI);
  80041c:	01002074 	movhi	r4,129
  800420:	21209104 	addi	r4,r4,-32188
  800424:	08010b00 	call	8010b0 <alt_alarm_stop>
  800428:	01002074 	movhi	r4,129
  80042c:	21209104 	addi	r4,r4,-32188
  800430:	0140c804 	movi	r5,800
  800434:	01802034 	movhi	r6,128
  800438:	3180c604 	addi	r6,r6,792
  80043c:	d1e61704 	addi	r7,gp,-26532
  800440:	0800e040 	call	800e04 <alt_alarm_start>
		}
//		if (FSMVAR(StartAVI) ) {
//			RESTART_TIMER(AVI);
//		}
		tick();
  800444:	08004900 	call	800490 <tick>
	}
  800448:	003fc606 	br	800364 <main+0x14>

0080044c <reset>:
char _cg14;
char g23_e1;
char g27_e2;
int _PRE_GO;

void reset(){
  80044c:	deffff04 	addi	sp,sp,-4
  800450:	df000015 	stw	fp,0(sp)
  800454:	d839883a 	mov	fp,sp
   _GO = 1;
  800458:	00800044 	movi	r2,1
  80045c:	d0a620c5 	stb	r2,-26493(gp)
   _PRE_GO = 0;
  800460:	d0261a15 	stw	zero,-26520(gp)
   PRE_g2 = 0;
  800464:	d0261805 	stb	zero,-26528(gp)
   PRE_g4 = 0;
  800468:	d0261f45 	stb	zero,-26499(gp)
   PRE_g6 = 0;
  80046c:	d0262005 	stb	zero,-26496(gp)
   PRE_g8 = 0;
  800470:	d0261c85 	stb	zero,-26510(gp)
   PRE_g10 = 0;
  800474:	d0261d05 	stb	zero,-26508(gp)
   PRE_g20 = 0;
  800478:	d0261b45 	stb	zero,-26515(gp)
   PRE_g25 = 0;
  80047c:	d0261f05 	stb	zero,-26500(gp)
   return;
}
  800480:	e037883a 	mov	sp,fp
  800484:	df000017 	ldw	fp,0(sp)
  800488:	dec00104 	addi	sp,sp,4
  80048c:	f800283a 	ret

00800490 <tick>:

void tick(){
  800490:	deffed04 	addi	sp,sp,-76
  800494:	df001215 	stw	fp,72(sp)
  800498:	df001204 	addi	fp,sp,72
   if(_PRE_GO == 1){
  80049c:	d0a61a17 	ldw	r2,-26520(gp)
  8004a0:	10800058 	cmpnei	r2,r2,1
  8004a4:	1000011e 	bne	r2,zero,8004ac <tick+0x1c>
      _GO = 0;
  8004a8:	d02620c5 	stb	zero,-26493(gp)
   }
   {
      g0 = _GO;
  8004ac:	d0a620c3 	ldbu	r2,-26493(gp)
  8004b0:	d0a62305 	stb	r2,-26484(gp)
      g1 = g0;
  8004b4:	d0a62303 	ldbu	r2,-26484(gp)
  8004b8:	d0a61b85 	stb	r2,-26514(gp)
      g21 =(PRE_g20);
  8004bc:	d0a61b43 	ldbu	r2,-26515(gp)
  8004c0:	d0a61d85 	stb	r2,-26506(gp)
      _cg21 = _pacemaker_local_PVARP_t;
  8004c4:	d0a61783 	ldbu	r2,-26530(gp)
  8004c8:	d0a61d45 	stb	r2,-26507(gp)
      g22 =(g21&&(!(_cg21)));
  8004cc:	d0a61d83 	ldbu	r2,-26506(gp)
  8004d0:	10803fcc 	andi	r2,r2,255
  8004d4:	1080201c 	xori	r2,r2,128
  8004d8:	10bfe004 	addi	r2,r2,-128
  8004dc:	1005003a 	cmpeq	r2,r2,zero
  8004e0:	1000091e 	bne	r2,zero,800508 <tick+0x78>
  8004e4:	d0a61d43 	ldbu	r2,-26507(gp)
  8004e8:	10803fcc 	andi	r2,r2,255
  8004ec:	1080201c 	xori	r2,r2,128
  8004f0:	10bfe004 	addi	r2,r2,-128
  8004f4:	1004c03a 	cmpne	r2,r2,zero
  8004f8:	1000031e 	bne	r2,zero,800508 <tick+0x78>
  8004fc:	00800044 	movi	r2,1
  800500:	e0bfff15 	stw	r2,-4(fp)
  800504:	00000106 	br	80050c <tick+0x7c>
  800508:	e03fff15 	stw	zero,-4(fp)
  80050c:	e0ffff17 	ldw	r3,-4(fp)
  800510:	1805883a 	mov	r2,r3
  800514:	d0a62405 	stb	r2,-26480(gp)
      _cg22 = _pacemaker_local_VS;
  800518:	d0a61543 	ldbu	r2,-26539(gp)
  80051c:	d0a62145 	stb	r2,-26491(gp)
      g11 =(PRE_g10);
  800520:	d0a61d03 	ldbu	r2,-26508(gp)
  800524:	d0a623c5 	stb	r2,-26481(gp)
      _cg11 = _pacemaker_local_VS;
  800528:	d0a61543 	ldbu	r2,-26539(gp)
  80052c:	d0a62185 	stb	r2,-26490(gp)
      g24 = g0;
  800530:	d0a62303 	ldbu	r2,-26484(gp)
  800534:	d0a62505 	stb	r2,-26476(gp)
      g26 =(PRE_g25);
  800538:	d0a61f03 	ldbu	r2,-26500(gp)
  80053c:	d0a62585 	stb	r2,-26474(gp)
      g25 =(g24||g26);
  800540:	d0a62503 	ldbu	r2,-26476(gp)
  800544:	10803fcc 	andi	r2,r2,255
  800548:	1080201c 	xori	r2,r2,128
  80054c:	10bfe004 	addi	r2,r2,-128
  800550:	1004c03a 	cmpne	r2,r2,zero
  800554:	1000061e 	bne	r2,zero,800570 <tick+0xe0>
  800558:	d0a62583 	ldbu	r2,-26474(gp)
  80055c:	10803fcc 	andi	r2,r2,255
  800560:	1080201c 	xori	r2,r2,128
  800564:	10bfe004 	addi	r2,r2,-128
  800568:	1005003a 	cmpeq	r2,r2,zero
  80056c:	1000031e 	bne	r2,zero,80057c <tick+0xec>
  800570:	00800044 	movi	r2,1
  800574:	e0bffe15 	stw	r2,-8(fp)
  800578:	00000106 	br	800580 <tick+0xf0>
  80057c:	e03ffe15 	stw	zero,-8(fp)
  800580:	e0fffe17 	ldw	r3,-8(fp)
  800584:	1805883a 	mov	r2,r3
  800588:	d0a62385 	stb	r2,-26482(gp)
      if(g25){
  80058c:	d0a62383 	ldbu	r2,-26482(gp)
  800590:	10803fcc 	andi	r2,r2,255
  800594:	1080201c 	xori	r2,r2,128
  800598:	10bfe004 	addi	r2,r2,-128
  80059c:	1005003a 	cmpeq	r2,r2,zero
  8005a0:	1000031e 	bne	r2,zero,8005b0 <tick+0x120>
         _pacemaker_local_VP = 0;
  8005a4:	d0261745 	stb	zero,-26531(gp)
         _pacemaker_local_AP = 0;
  8005a8:	d0261605 	stb	zero,-26536(gp)
         _pacemaker_local_StartRI = 0;
  8005ac:	d02615c5 	stb	zero,-26537(gp)
      }
      g12 =(g11&&(!(_cg11)));
  8005b0:	d0a623c3 	ldbu	r2,-26481(gp)
  8005b4:	10803fcc 	andi	r2,r2,255
  8005b8:	1080201c 	xori	r2,r2,128
  8005bc:	10bfe004 	addi	r2,r2,-128
  8005c0:	1005003a 	cmpeq	r2,r2,zero
  8005c4:	1000091e 	bne	r2,zero,8005ec <tick+0x15c>
  8005c8:	d0a62183 	ldbu	r2,-26490(gp)
  8005cc:	10803fcc 	andi	r2,r2,255
  8005d0:	1080201c 	xori	r2,r2,128
  8005d4:	10bfe004 	addi	r2,r2,-128
  8005d8:	1004c03a 	cmpne	r2,r2,zero
  8005dc:	1000031e 	bne	r2,zero,8005ec <tick+0x15c>
  8005e0:	00800044 	movi	r2,1
  8005e4:	e0bffd15 	stw	r2,-12(fp)
  8005e8:	00000106 	br	8005f0 <tick+0x160>
  8005ec:	e03ffd15 	stw	zero,-12(fp)
  8005f0:	e0fffd17 	ldw	r3,-12(fp)
  8005f4:	1805883a 	mov	r2,r3
  8005f8:	d0a61bc5 	stb	r2,-26513(gp)
      _cg12 =((_pacemaker_local_AVI_t&&_pacemaker_local_URI_t)||_pacemaker_local_LRI_t);
  8005fc:	d0a61683 	ldbu	r2,-26534(gp)
  800600:	10803fcc 	andi	r2,r2,255
  800604:	1080201c 	xori	r2,r2,128
  800608:	10bfe004 	addi	r2,r2,-128
  80060c:	1005003a 	cmpeq	r2,r2,zero
  800610:	1000061e 	bne	r2,zero,80062c <tick+0x19c>
  800614:	d0a61503 	ldbu	r2,-26540(gp)
  800618:	10803fcc 	andi	r2,r2,255
  80061c:	1080201c 	xori	r2,r2,128
  800620:	10bfe004 	addi	r2,r2,-128
  800624:	1004c03a 	cmpne	r2,r2,zero
  800628:	1000061e 	bne	r2,zero,800644 <tick+0x1b4>
  80062c:	d0a61643 	ldbu	r2,-26535(gp)
  800630:	10803fcc 	andi	r2,r2,255
  800634:	1080201c 	xori	r2,r2,128
  800638:	10bfe004 	addi	r2,r2,-128
  80063c:	1005003a 	cmpeq	r2,r2,zero
  800640:	1000031e 	bne	r2,zero,800650 <tick+0x1c0>
  800644:	00800044 	movi	r2,1
  800648:	e0bffc15 	stw	r2,-16(fp)
  80064c:	00000106 	br	800654 <tick+0x1c4>
  800650:	e03ffc15 	stw	zero,-16(fp)
  800654:	e0fffc17 	ldw	r3,-16(fp)
  800658:	1805883a 	mov	r2,r3
  80065c:	d0a61b05 	stb	r2,-26516(gp)
      g13 =(g12&&_cg12);
  800660:	d0a61bc3 	ldbu	r2,-26513(gp)
  800664:	10803fcc 	andi	r2,r2,255
  800668:	1080201c 	xori	r2,r2,128
  80066c:	10bfe004 	addi	r2,r2,-128
  800670:	1005003a 	cmpeq	r2,r2,zero
  800674:	1000091e 	bne	r2,zero,80069c <tick+0x20c>
  800678:	d0a61b03 	ldbu	r2,-26516(gp)
  80067c:	10803fcc 	andi	r2,r2,255
  800680:	1080201c 	xori	r2,r2,128
  800684:	10bfe004 	addi	r2,r2,-128
  800688:	1005003a 	cmpeq	r2,r2,zero
  80068c:	1000031e 	bne	r2,zero,80069c <tick+0x20c>
  800690:	00800044 	movi	r2,1
  800694:	e0bffb15 	stw	r2,-20(fp)
  800698:	00000106 	br	8006a0 <tick+0x210>
  80069c:	e03ffb15 	stw	zero,-20(fp)
  8006a0:	e0fffb17 	ldw	r3,-20(fp)
  8006a4:	1805883a 	mov	r2,r3
  8006a8:	d0a621c5 	stb	r2,-26489(gp)
      if(g13){
  8006ac:	d0a621c3 	ldbu	r2,-26489(gp)
  8006b0:	10803fcc 	andi	r2,r2,255
  8006b4:	1080201c 	xori	r2,r2,128
  8006b8:	10bfe004 	addi	r2,r2,-128
  8006bc:	1005003a 	cmpeq	r2,r2,zero
  8006c0:	1000021e 	bne	r2,zero,8006cc <tick+0x23c>
         _pacemaker_local_VP =(_pacemaker_local_VP||1);
  8006c4:	00800044 	movi	r2,1
  8006c8:	d0a61745 	stb	r2,-26531(gp)
      }
      g9 =(PRE_g8);
  8006cc:	d0a61c83 	ldbu	r2,-26510(gp)
  8006d0:	d0a61985 	stb	r2,-26522(gp)
      _cg9 = _pacemaker_local_AS;
  8006d4:	d0a61583 	ldbu	r2,-26538(gp)
  8006d8:	d0a622c5 	stb	r2,-26485(gp)
      g14 =(g9&&(!(_cg9)));
  8006dc:	d0a61983 	ldbu	r2,-26522(gp)
  8006e0:	10803fcc 	andi	r2,r2,255
  8006e4:	1080201c 	xori	r2,r2,128
  8006e8:	10bfe004 	addi	r2,r2,-128
  8006ec:	1005003a 	cmpeq	r2,r2,zero
  8006f0:	1000091e 	bne	r2,zero,800718 <tick+0x288>
  8006f4:	d0a622c3 	ldbu	r2,-26485(gp)
  8006f8:	10803fcc 	andi	r2,r2,255
  8006fc:	1080201c 	xori	r2,r2,128
  800700:	10bfe004 	addi	r2,r2,-128
  800704:	1004c03a 	cmpne	r2,r2,zero
  800708:	1000031e 	bne	r2,zero,800718 <tick+0x288>
  80070c:	00800044 	movi	r2,1
  800710:	e0bffa15 	stw	r2,-24(fp)
  800714:	00000106 	br	80071c <tick+0x28c>
  800718:	e03ffa15 	stw	zero,-24(fp)
  80071c:	e0fffa17 	ldw	r3,-24(fp)
  800720:	1805883a 	mov	r2,r3
  800724:	d0a61fc5 	stb	r2,-26497(gp)
      _cg14 = _pacemaker_local_AEI_t;
  800728:	d0a61703 	ldbu	r2,-26532(gp)
  80072c:	d0a61dc5 	stb	r2,-26505(gp)
      g16 =(g14&&(!(_cg14)));
  800730:	d0a61fc3 	ldbu	r2,-26497(gp)
  800734:	10803fcc 	andi	r2,r2,255
  800738:	1080201c 	xori	r2,r2,128
  80073c:	10bfe004 	addi	r2,r2,-128
  800740:	1005003a 	cmpeq	r2,r2,zero
  800744:	1000091e 	bne	r2,zero,80076c <tick+0x2dc>
  800748:	d0a61dc3 	ldbu	r2,-26505(gp)
  80074c:	10803fcc 	andi	r2,r2,255
  800750:	1080201c 	xori	r2,r2,128
  800754:	10bfe004 	addi	r2,r2,-128
  800758:	1004c03a 	cmpne	r2,r2,zero
  80075c:	1000031e 	bne	r2,zero,80076c <tick+0x2dc>
  800760:	00800044 	movi	r2,1
  800764:	e0bff915 	stw	r2,-28(fp)
  800768:	00000106 	br	800770 <tick+0x2e0>
  80076c:	e03ff915 	stw	zero,-28(fp)
  800770:	e0fff917 	ldw	r3,-28(fp)
  800774:	1805883a 	mov	r2,r3
  800778:	d0a62345 	stb	r2,-26483(gp)
      _cg16 = _pacemaker_local_LRI_t;
  80077c:	d0a61643 	ldbu	r2,-26535(gp)
  800780:	d0a61ec5 	stb	r2,-26501(gp)
      g17 =(g16&&_cg16);
  800784:	d0a62343 	ldbu	r2,-26483(gp)
  800788:	10803fcc 	andi	r2,r2,255
  80078c:	1080201c 	xori	r2,r2,128
  800790:	10bfe004 	addi	r2,r2,-128
  800794:	1005003a 	cmpeq	r2,r2,zero
  800798:	1000091e 	bne	r2,zero,8007c0 <tick+0x330>
  80079c:	d0a61ec3 	ldbu	r2,-26501(gp)
  8007a0:	10803fcc 	andi	r2,r2,255
  8007a4:	1080201c 	xori	r2,r2,128
  8007a8:	10bfe004 	addi	r2,r2,-128
  8007ac:	1005003a 	cmpeq	r2,r2,zero
  8007b0:	1000031e 	bne	r2,zero,8007c0 <tick+0x330>
  8007b4:	00800044 	movi	r2,1
  8007b8:	e0bff815 	stw	r2,-32(fp)
  8007bc:	00000106 	br	8007c4 <tick+0x334>
  8007c0:	e03ff815 	stw	zero,-32(fp)
  8007c4:	e0fff817 	ldw	r3,-32(fp)
  8007c8:	1805883a 	mov	r2,r3
  8007cc:	d0a61c05 	stb	r2,-26512(gp)
      if(g17){
  8007d0:	d0a61c03 	ldbu	r2,-26512(gp)
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	1080201c 	xori	r2,r2,128
  8007dc:	10bfe004 	addi	r2,r2,-128
  8007e0:	1005003a 	cmpeq	r2,r2,zero
  8007e4:	1000021e 	bne	r2,zero,8007f0 <tick+0x360>
         _pacemaker_local_VP =(_pacemaker_local_VP||1);
  8007e8:	00800044 	movi	r2,1
  8007ec:	d0a61745 	stb	r2,-26531(gp)
      }
      g2 =((g22&&_cg22)||(g11&&_cg11)||g1||g13||g17);
  8007f0:	d0a62403 	ldbu	r2,-26480(gp)
  8007f4:	10803fcc 	andi	r2,r2,255
  8007f8:	1080201c 	xori	r2,r2,128
  8007fc:	10bfe004 	addi	r2,r2,-128
  800800:	1005003a 	cmpeq	r2,r2,zero
  800804:	1000061e 	bne	r2,zero,800820 <tick+0x390>
  800808:	d0a62143 	ldbu	r2,-26491(gp)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	1004c03a 	cmpne	r2,r2,zero
  80081c:	10001e1e 	bne	r2,zero,800898 <tick+0x408>
  800820:	d0a623c3 	ldbu	r2,-26481(gp)
  800824:	10803fcc 	andi	r2,r2,255
  800828:	1080201c 	xori	r2,r2,128
  80082c:	10bfe004 	addi	r2,r2,-128
  800830:	1005003a 	cmpeq	r2,r2,zero
  800834:	1000061e 	bne	r2,zero,800850 <tick+0x3c0>
  800838:	d0a62183 	ldbu	r2,-26490(gp)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	1004c03a 	cmpne	r2,r2,zero
  80084c:	1000121e 	bne	r2,zero,800898 <tick+0x408>
  800850:	d0a61b83 	ldbu	r2,-26514(gp)
  800854:	10803fcc 	andi	r2,r2,255
  800858:	1080201c 	xori	r2,r2,128
  80085c:	10bfe004 	addi	r2,r2,-128
  800860:	1004c03a 	cmpne	r2,r2,zero
  800864:	10000c1e 	bne	r2,zero,800898 <tick+0x408>
  800868:	d0a621c3 	ldbu	r2,-26489(gp)
  80086c:	10803fcc 	andi	r2,r2,255
  800870:	1080201c 	xori	r2,r2,128
  800874:	10bfe004 	addi	r2,r2,-128
  800878:	1004c03a 	cmpne	r2,r2,zero
  80087c:	1000061e 	bne	r2,zero,800898 <tick+0x408>
  800880:	d0a61c03 	ldbu	r2,-26512(gp)
  800884:	10803fcc 	andi	r2,r2,255
  800888:	1080201c 	xori	r2,r2,128
  80088c:	10bfe004 	addi	r2,r2,-128
  800890:	1005003a 	cmpeq	r2,r2,zero
  800894:	1000031e 	bne	r2,zero,8008a4 <tick+0x414>
  800898:	00800044 	movi	r2,1
  80089c:	e0bff715 	stw	r2,-36(fp)
  8008a0:	00000106 	br	8008a8 <tick+0x418>
  8008a4:	e03ff715 	stw	zero,-36(fp)
  8008a8:	e0fff717 	ldw	r3,-36(fp)
  8008ac:	1805883a 	mov	r2,r3
  8008b0:	d0a61e45 	stb	r2,-26503(gp)
      g3 =(PRE_g2);
  8008b4:	d0a61803 	ldbu	r2,-26528(gp)
  8008b8:	d0a61945 	stb	r2,-26523(gp)
      g3b = g3;
  8008bc:	d0a61943 	ldbu	r2,-26523(gp)
  8008c0:	d0a61845 	stb	r2,-26527(gp)
      if(g3b){
  8008c4:	d0a61843 	ldbu	r2,-26527(gp)
  8008c8:	10803fcc 	andi	r2,r2,255
  8008cc:	1080201c 	xori	r2,r2,128
  8008d0:	10bfe004 	addi	r2,r2,-128
  8008d4:	1005003a 	cmpeq	r2,r2,zero
  8008d8:	1000021e 	bne	r2,zero,8008e4 <tick+0x454>
         _pacemaker_local_StartRI =(_pacemaker_local_StartRI||1);
  8008dc:	00800044 	movi	r2,1
  8008e0:	d0a615c5 	stb	r2,-26537(gp)
      }
      g5 =(PRE_g4);
  8008e4:	d0a61f43 	ldbu	r2,-26499(gp)
  8008e8:	d0a61e05 	stb	r2,-26504(gp)
      _cg5 = _pacemaker_local_PVARP_t;
  8008ec:	d0a61783 	ldbu	r2,-26530(gp)
  8008f0:	d0a62045 	stb	r2,-26495(gp)
      g19 =(g5&&(!(_cg5)));
  8008f4:	d0a61e03 	ldbu	r2,-26504(gp)
  8008f8:	10803fcc 	andi	r2,r2,255
  8008fc:	1080201c 	xori	r2,r2,128
  800900:	10bfe004 	addi	r2,r2,-128
  800904:	1005003a 	cmpeq	r2,r2,zero
  800908:	1000091e 	bne	r2,zero,800930 <tick+0x4a0>
  80090c:	d0a62043 	ldbu	r2,-26495(gp)
  800910:	10803fcc 	andi	r2,r2,255
  800914:	1080201c 	xori	r2,r2,128
  800918:	10bfe004 	addi	r2,r2,-128
  80091c:	1004c03a 	cmpne	r2,r2,zero
  800920:	1000031e 	bne	r2,zero,800930 <tick+0x4a0>
  800924:	00800044 	movi	r2,1
  800928:	e0bff615 	stw	r2,-40(fp)
  80092c:	00000106 	br	800934 <tick+0x4a4>
  800930:	e03ff615 	stw	zero,-40(fp)
  800934:	e0fff617 	ldw	r3,-40(fp)
  800938:	1805883a 	mov	r2,r3
  80093c:	d0a618c5 	stb	r2,-26525(gp)
      _cg19 = _pacemaker_local_VRP_t;
  800940:	d0a616c3 	ldbu	r2,-26533(gp)
  800944:	d0a62285 	stb	r2,-26486(gp)
      g4 =(g3b||(g19&&(!(_cg19))));
  800948:	d0a61843 	ldbu	r2,-26527(gp)
  80094c:	10803fcc 	andi	r2,r2,255
  800950:	1080201c 	xori	r2,r2,128
  800954:	10bfe004 	addi	r2,r2,-128
  800958:	1004c03a 	cmpne	r2,r2,zero
  80095c:	10000c1e 	bne	r2,zero,800990 <tick+0x500>
  800960:	d0a618c3 	ldbu	r2,-26525(gp)
  800964:	10803fcc 	andi	r2,r2,255
  800968:	1080201c 	xori	r2,r2,128
  80096c:	10bfe004 	addi	r2,r2,-128
  800970:	1005003a 	cmpeq	r2,r2,zero
  800974:	1000091e 	bne	r2,zero,80099c <tick+0x50c>
  800978:	d0a62283 	ldbu	r2,-26486(gp)
  80097c:	10803fcc 	andi	r2,r2,255
  800980:	1080201c 	xori	r2,r2,128
  800984:	10bfe004 	addi	r2,r2,-128
  800988:	1004c03a 	cmpne	r2,r2,zero
  80098c:	1000031e 	bne	r2,zero,80099c <tick+0x50c>
  800990:	00800044 	movi	r2,1
  800994:	e0bff515 	stw	r2,-44(fp)
  800998:	00000106 	br	8009a0 <tick+0x510>
  80099c:	e03ff515 	stw	zero,-44(fp)
  8009a0:	e0fff517 	ldw	r3,-44(fp)
  8009a4:	1805883a 	mov	r2,r3
  8009a8:	d0a61885 	stb	r2,-26526(gp)
      g7 =(PRE_g6);
  8009ac:	d0a62003 	ldbu	r2,-26496(gp)
  8009b0:	d0a61e85 	stb	r2,-26502(gp)
      _cg7 = _pacemaker_local_VRP_t;
  8009b4:	d0a616c3 	ldbu	r2,-26533(gp)
  8009b8:	d0a619c5 	stb	r2,-26521(gp)
      g18 =(g7&&(!(_cg7)));
  8009bc:	d0a61e83 	ldbu	r2,-26502(gp)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	1005003a 	cmpeq	r2,r2,zero
  8009d0:	1000091e 	bne	r2,zero,8009f8 <tick+0x568>
  8009d4:	d0a619c3 	ldbu	r2,-26521(gp)
  8009d8:	10803fcc 	andi	r2,r2,255
  8009dc:	1080201c 	xori	r2,r2,128
  8009e0:	10bfe004 	addi	r2,r2,-128
  8009e4:	1004c03a 	cmpne	r2,r2,zero
  8009e8:	1000031e 	bne	r2,zero,8009f8 <tick+0x568>
  8009ec:	00800044 	movi	r2,1
  8009f0:	e0bff415 	stw	r2,-48(fp)
  8009f4:	00000106 	br	8009fc <tick+0x56c>
  8009f8:	e03ff415 	stw	zero,-48(fp)
  8009fc:	e0fff417 	ldw	r3,-48(fp)
  800a00:	1805883a 	mov	r2,r3
  800a04:	d0a61cc5 	stb	r2,-26509(gp)
      _cg18 = _pacemaker_local_AS;
  800a08:	d0a61583 	ldbu	r2,-26538(gp)
  800a0c:	d0a624c5 	stb	r2,-26477(gp)
      g6 =((g5&&_cg5)||(g18&&(!(_cg18))));
  800a10:	d0a61e03 	ldbu	r2,-26504(gp)
  800a14:	10803fcc 	andi	r2,r2,255
  800a18:	1080201c 	xori	r2,r2,128
  800a1c:	10bfe004 	addi	r2,r2,-128
  800a20:	1005003a 	cmpeq	r2,r2,zero
  800a24:	1000061e 	bne	r2,zero,800a40 <tick+0x5b0>
  800a28:	d0a62043 	ldbu	r2,-26495(gp)
  800a2c:	10803fcc 	andi	r2,r2,255
  800a30:	1080201c 	xori	r2,r2,128
  800a34:	10bfe004 	addi	r2,r2,-128
  800a38:	1004c03a 	cmpne	r2,r2,zero
  800a3c:	10000c1e 	bne	r2,zero,800a70 <tick+0x5e0>
  800a40:	d0a61cc3 	ldbu	r2,-26509(gp)
  800a44:	10803fcc 	andi	r2,r2,255
  800a48:	1080201c 	xori	r2,r2,128
  800a4c:	10bfe004 	addi	r2,r2,-128
  800a50:	1005003a 	cmpeq	r2,r2,zero
  800a54:	1000091e 	bne	r2,zero,800a7c <tick+0x5ec>
  800a58:	d0a624c3 	ldbu	r2,-26477(gp)
  800a5c:	10803fcc 	andi	r2,r2,255
  800a60:	1080201c 	xori	r2,r2,128
  800a64:	10bfe004 	addi	r2,r2,-128
  800a68:	1004c03a 	cmpne	r2,r2,zero
  800a6c:	1000031e 	bne	r2,zero,800a7c <tick+0x5ec>
  800a70:	00800044 	movi	r2,1
  800a74:	e0bff315 	stw	r2,-52(fp)
  800a78:	00000106 	br	800a80 <tick+0x5f0>
  800a7c:	e03ff315 	stw	zero,-52(fp)
  800a80:	e0fff317 	ldw	r3,-52(fp)
  800a84:	1805883a 	mov	r2,r3
  800a88:	d0a62245 	stb	r2,-26487(gp)
      g8 =((g7&&_cg7)||(g16&&(!(_cg16)))||(g21&&_cg21));
  800a8c:	d0a61e83 	ldbu	r2,-26502(gp)
  800a90:	10803fcc 	andi	r2,r2,255
  800a94:	1080201c 	xori	r2,r2,128
  800a98:	10bfe004 	addi	r2,r2,-128
  800a9c:	1005003a 	cmpeq	r2,r2,zero
  800aa0:	1000061e 	bne	r2,zero,800abc <tick+0x62c>
  800aa4:	d0a619c3 	ldbu	r2,-26521(gp)
  800aa8:	10803fcc 	andi	r2,r2,255
  800aac:	1080201c 	xori	r2,r2,128
  800ab0:	10bfe004 	addi	r2,r2,-128
  800ab4:	1004c03a 	cmpne	r2,r2,zero
  800ab8:	1000181e 	bne	r2,zero,800b1c <tick+0x68c>
  800abc:	d0a62343 	ldbu	r2,-26483(gp)
  800ac0:	10803fcc 	andi	r2,r2,255
  800ac4:	1080201c 	xori	r2,r2,128
  800ac8:	10bfe004 	addi	r2,r2,-128
  800acc:	1005003a 	cmpeq	r2,r2,zero
  800ad0:	1000061e 	bne	r2,zero,800aec <tick+0x65c>
  800ad4:	d0a61ec3 	ldbu	r2,-26501(gp)
  800ad8:	10803fcc 	andi	r2,r2,255
  800adc:	1080201c 	xori	r2,r2,128
  800ae0:	10bfe004 	addi	r2,r2,-128
  800ae4:	1005003a 	cmpeq	r2,r2,zero
  800ae8:	10000c1e 	bne	r2,zero,800b1c <tick+0x68c>
  800aec:	d0a61d83 	ldbu	r2,-26506(gp)
  800af0:	10803fcc 	andi	r2,r2,255
  800af4:	1080201c 	xori	r2,r2,128
  800af8:	10bfe004 	addi	r2,r2,-128
  800afc:	1005003a 	cmpeq	r2,r2,zero
  800b00:	1000091e 	bne	r2,zero,800b28 <tick+0x698>
  800b04:	d0a61d43 	ldbu	r2,-26507(gp)
  800b08:	10803fcc 	andi	r2,r2,255
  800b0c:	1080201c 	xori	r2,r2,128
  800b10:	10bfe004 	addi	r2,r2,-128
  800b14:	1005003a 	cmpeq	r2,r2,zero
  800b18:	1000031e 	bne	r2,zero,800b28 <tick+0x698>
  800b1c:	00800044 	movi	r2,1
  800b20:	e0bff215 	stw	r2,-56(fp)
  800b24:	00000106 	br	800b2c <tick+0x69c>
  800b28:	e03ff215 	stw	zero,-56(fp)
  800b2c:	e0fff217 	ldw	r3,-56(fp)
  800b30:	1805883a 	mov	r2,r3
  800b34:	d0a62205 	stb	r2,-26488(gp)
      g15 =(g14&&_cg14);
  800b38:	d0a61fc3 	ldbu	r2,-26497(gp)
  800b3c:	10803fcc 	andi	r2,r2,255
  800b40:	1080201c 	xori	r2,r2,128
  800b44:	10bfe004 	addi	r2,r2,-128
  800b48:	1005003a 	cmpeq	r2,r2,zero
  800b4c:	1000091e 	bne	r2,zero,800b74 <tick+0x6e4>
  800b50:	d0a61dc3 	ldbu	r2,-26505(gp)
  800b54:	10803fcc 	andi	r2,r2,255
  800b58:	1080201c 	xori	r2,r2,128
  800b5c:	10bfe004 	addi	r2,r2,-128
  800b60:	1005003a 	cmpeq	r2,r2,zero
  800b64:	1000031e 	bne	r2,zero,800b74 <tick+0x6e4>
  800b68:	00800044 	movi	r2,1
  800b6c:	e0bff115 	stw	r2,-60(fp)
  800b70:	00000106 	br	800b78 <tick+0x6e8>
  800b74:	e03ff115 	stw	zero,-60(fp)
  800b78:	e0fff117 	ldw	r3,-60(fp)
  800b7c:	1805883a 	mov	r2,r3
  800b80:	d0a62085 	stb	r2,-26494(gp)
      if(g15){
  800b84:	d0a62083 	ldbu	r2,-26494(gp)
  800b88:	10803fcc 	andi	r2,r2,255
  800b8c:	1080201c 	xori	r2,r2,128
  800b90:	10bfe004 	addi	r2,r2,-128
  800b94:	1005003a 	cmpeq	r2,r2,zero
  800b98:	1000021e 	bne	r2,zero,800ba4 <tick+0x714>
         _pacemaker_local_AP =(_pacemaker_local_AP||1);
  800b9c:	00800044 	movi	r2,1
  800ba0:	d0a61605 	stb	r2,-26536(gp)
      }
      g10 =(g15||(g18&&_cg18)||(g9&&_cg9)||(g12&&(!(_cg12))));
  800ba4:	d0a62083 	ldbu	r2,-26494(gp)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1080201c 	xori	r2,r2,128
  800bb0:	10bfe004 	addi	r2,r2,-128
  800bb4:	1004c03a 	cmpne	r2,r2,zero
  800bb8:	1000241e 	bne	r2,zero,800c4c <tick+0x7bc>
  800bbc:	d0a61cc3 	ldbu	r2,-26509(gp)
  800bc0:	10803fcc 	andi	r2,r2,255
  800bc4:	1080201c 	xori	r2,r2,128
  800bc8:	10bfe004 	addi	r2,r2,-128
  800bcc:	1005003a 	cmpeq	r2,r2,zero
  800bd0:	1000061e 	bne	r2,zero,800bec <tick+0x75c>
  800bd4:	d0a624c3 	ldbu	r2,-26477(gp)
  800bd8:	10803fcc 	andi	r2,r2,255
  800bdc:	1080201c 	xori	r2,r2,128
  800be0:	10bfe004 	addi	r2,r2,-128
  800be4:	1004c03a 	cmpne	r2,r2,zero
  800be8:	1000181e 	bne	r2,zero,800c4c <tick+0x7bc>
  800bec:	d0a61983 	ldbu	r2,-26522(gp)
  800bf0:	10803fcc 	andi	r2,r2,255
  800bf4:	1080201c 	xori	r2,r2,128
  800bf8:	10bfe004 	addi	r2,r2,-128
  800bfc:	1005003a 	cmpeq	r2,r2,zero
  800c00:	1000061e 	bne	r2,zero,800c1c <tick+0x78c>
  800c04:	d0a622c3 	ldbu	r2,-26485(gp)
  800c08:	10803fcc 	andi	r2,r2,255
  800c0c:	1080201c 	xori	r2,r2,128
  800c10:	10bfe004 	addi	r2,r2,-128
  800c14:	1004c03a 	cmpne	r2,r2,zero
  800c18:	10000c1e 	bne	r2,zero,800c4c <tick+0x7bc>
  800c1c:	d0a61bc3 	ldbu	r2,-26513(gp)
  800c20:	10803fcc 	andi	r2,r2,255
  800c24:	1080201c 	xori	r2,r2,128
  800c28:	10bfe004 	addi	r2,r2,-128
  800c2c:	1005003a 	cmpeq	r2,r2,zero
  800c30:	1000091e 	bne	r2,zero,800c58 <tick+0x7c8>
  800c34:	d0a61b03 	ldbu	r2,-26516(gp)
  800c38:	10803fcc 	andi	r2,r2,255
  800c3c:	1080201c 	xori	r2,r2,128
  800c40:	10bfe004 	addi	r2,r2,-128
  800c44:	1004c03a 	cmpne	r2,r2,zero
  800c48:	1000031e 	bne	r2,zero,800c58 <tick+0x7c8>
  800c4c:	00800044 	movi	r2,1
  800c50:	e0bff015 	stw	r2,-64(fp)
  800c54:	00000106 	br	800c5c <tick+0x7cc>
  800c58:	e03ff015 	stw	zero,-64(fp)
  800c5c:	e0fff017 	ldw	r3,-64(fp)
  800c60:	1805883a 	mov	r2,r3
  800c64:	d0a62545 	stb	r2,-26475(gp)
      g20 =((g19&&_cg19)||(g22&&(!(_cg22))));
  800c68:	d0a618c3 	ldbu	r2,-26525(gp)
  800c6c:	10803fcc 	andi	r2,r2,255
  800c70:	1080201c 	xori	r2,r2,128
  800c74:	10bfe004 	addi	r2,r2,-128
  800c78:	1005003a 	cmpeq	r2,r2,zero
  800c7c:	1000061e 	bne	r2,zero,800c98 <tick+0x808>
  800c80:	d0a62283 	ldbu	r2,-26486(gp)
  800c84:	10803fcc 	andi	r2,r2,255
  800c88:	1080201c 	xori	r2,r2,128
  800c8c:	10bfe004 	addi	r2,r2,-128
  800c90:	1004c03a 	cmpne	r2,r2,zero
  800c94:	10000c1e 	bne	r2,zero,800cc8 <tick+0x838>
  800c98:	d0a62403 	ldbu	r2,-26480(gp)
  800c9c:	10803fcc 	andi	r2,r2,255
  800ca0:	1080201c 	xori	r2,r2,128
  800ca4:	10bfe004 	addi	r2,r2,-128
  800ca8:	1005003a 	cmpeq	r2,r2,zero
  800cac:	1000091e 	bne	r2,zero,800cd4 <tick+0x844>
  800cb0:	d0a62143 	ldbu	r2,-26491(gp)
  800cb4:	10803fcc 	andi	r2,r2,255
  800cb8:	1080201c 	xori	r2,r2,128
  800cbc:	10bfe004 	addi	r2,r2,-128
  800cc0:	1004c03a 	cmpne	r2,r2,zero
  800cc4:	1000031e 	bne	r2,zero,800cd4 <tick+0x844>
  800cc8:	00800044 	movi	r2,1
  800ccc:	e0bfef15 	stw	r2,-68(fp)
  800cd0:	00000106 	br	800cd8 <tick+0x848>
  800cd4:	e03fef15 	stw	zero,-68(fp)
  800cd8:	e0ffef17 	ldw	r3,-68(fp)
  800cdc:	1805883a 	mov	r2,r3
  800ce0:	d0a62105 	stb	r2,-26492(gp)
      g23_e1 =(!((g3||g5||g7||g21||g9||g11)));
  800ce4:	d0a61943 	ldbu	r2,-26523(gp)
  800ce8:	10803fcc 	andi	r2,r2,255
  800cec:	1080201c 	xori	r2,r2,128
  800cf0:	10bfe004 	addi	r2,r2,-128
  800cf4:	1004c03a 	cmpne	r2,r2,zero
  800cf8:	1000211e 	bne	r2,zero,800d80 <tick+0x8f0>
  800cfc:	d0a61e03 	ldbu	r2,-26504(gp)
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1080201c 	xori	r2,r2,128
  800d08:	10bfe004 	addi	r2,r2,-128
  800d0c:	1004c03a 	cmpne	r2,r2,zero
  800d10:	10001b1e 	bne	r2,zero,800d80 <tick+0x8f0>
  800d14:	d0a61e83 	ldbu	r2,-26502(gp)
  800d18:	10803fcc 	andi	r2,r2,255
  800d1c:	1080201c 	xori	r2,r2,128
  800d20:	10bfe004 	addi	r2,r2,-128
  800d24:	1004c03a 	cmpne	r2,r2,zero
  800d28:	1000151e 	bne	r2,zero,800d80 <tick+0x8f0>
  800d2c:	d0a61d83 	ldbu	r2,-26506(gp)
  800d30:	10803fcc 	andi	r2,r2,255
  800d34:	1080201c 	xori	r2,r2,128
  800d38:	10bfe004 	addi	r2,r2,-128
  800d3c:	1004c03a 	cmpne	r2,r2,zero
  800d40:	10000f1e 	bne	r2,zero,800d80 <tick+0x8f0>
  800d44:	d0a61983 	ldbu	r2,-26522(gp)
  800d48:	10803fcc 	andi	r2,r2,255
  800d4c:	1080201c 	xori	r2,r2,128
  800d50:	10bfe004 	addi	r2,r2,-128
  800d54:	1004c03a 	cmpne	r2,r2,zero
  800d58:	1000091e 	bne	r2,zero,800d80 <tick+0x8f0>
  800d5c:	d0a623c3 	ldbu	r2,-26481(gp)
  800d60:	10803fcc 	andi	r2,r2,255
  800d64:	1080201c 	xori	r2,r2,128
  800d68:	10bfe004 	addi	r2,r2,-128
  800d6c:	1004c03a 	cmpne	r2,r2,zero
  800d70:	1000031e 	bne	r2,zero,800d80 <tick+0x8f0>
  800d74:	00800044 	movi	r2,1
  800d78:	e0bfee15 	stw	r2,-72(fp)
  800d7c:	00000106 	br	800d84 <tick+0x8f4>
  800d80:	e03fee15 	stw	zero,-72(fp)
  800d84:	e0ffee17 	ldw	r3,-72(fp)
  800d88:	1805883a 	mov	r2,r3
  800d8c:	d0a62485 	stb	r2,-26478(gp)
      g27_e2 =(!(g26));
  800d90:	d0a62583 	ldbu	r2,-26474(gp)
  800d94:	10803fcc 	andi	r2,r2,255
  800d98:	1080201c 	xori	r2,r2,128
  800d9c:	10bfe004 	addi	r2,r2,-128
  800da0:	1005003a 	cmpeq	r2,r2,zero
  800da4:	d0a61c45 	stb	r2,-26511(gp)
   }
   PRE_g2 = g2;
  800da8:	d0a61e43 	ldbu	r2,-26503(gp)
  800dac:	d0a61805 	stb	r2,-26528(gp)
   PRE_g4 = g4;
  800db0:	d0a61883 	ldbu	r2,-26526(gp)
  800db4:	d0a61f45 	stb	r2,-26499(gp)
   PRE_g6 = g6;
  800db8:	d0a62243 	ldbu	r2,-26487(gp)
  800dbc:	d0a62005 	stb	r2,-26496(gp)
   PRE_g8 = g8;
  800dc0:	d0a62203 	ldbu	r2,-26488(gp)
  800dc4:	d0a61c85 	stb	r2,-26510(gp)
   PRE_g10 = g10;
  800dc8:	d0a62543 	ldbu	r2,-26475(gp)
  800dcc:	d0a61d05 	stb	r2,-26508(gp)
   PRE_g20 = g20;
  800dd0:	d0a62103 	ldbu	r2,-26492(gp)
  800dd4:	d0a61b45 	stb	r2,-26515(gp)
   PRE_g25 = g25;
  800dd8:	d0a62383 	ldbu	r2,-26482(gp)
  800ddc:	d0a61f05 	stb	r2,-26500(gp)
   _PRE_GO = _GO;
  800de0:	d0a620c3 	ldbu	r2,-26493(gp)
  800de4:	10803fcc 	andi	r2,r2,255
  800de8:	1080201c 	xori	r2,r2,128
  800dec:	10bfe004 	addi	r2,r2,-128
  800df0:	d0a61a15 	stw	r2,-26520(gp)
   return;
}
  800df4:	e037883a 	mov	sp,fp
  800df8:	df000017 	ldw	fp,0(sp)
  800dfc:	dec00104 	addi	sp,sp,4
  800e00:	f800283a 	ret

00800e04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  800e04:	defff404 	addi	sp,sp,-48
  800e08:	df000b15 	stw	fp,44(sp)
  800e0c:	df000b04 	addi	fp,sp,44
  800e10:	e13ffb15 	stw	r4,-20(fp)
  800e14:	e17ffc15 	stw	r5,-16(fp)
  800e18:	e1bffd15 	stw	r6,-12(fp)
  800e1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  800e20:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800e24:	00802074 	movhi	r2,129
  800e28:	10a07b04 	addi	r2,r2,-32276
  800e2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  800e30:	1005003a 	cmpeq	r2,r2,zero
  800e34:	1000411e 	bne	r2,zero,800f3c <alt_alarm_start+0x138>
  {
    if (alarm)
  800e38:	e0bffb17 	ldw	r2,-20(fp)
  800e3c:	1005003a 	cmpeq	r2,r2,zero
  800e40:	10003b1e 	bne	r2,zero,800f30 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  800e44:	e0fffb17 	ldw	r3,-20(fp)
  800e48:	e0bffd17 	ldw	r2,-12(fp)
  800e4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  800e50:	e0fffb17 	ldw	r3,-20(fp)
  800e54:	e0bffe17 	ldw	r2,-8(fp)
  800e58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800e5c:	0005303a 	rdctl	r2,status
  800e60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800e64:	e0fff817 	ldw	r3,-32(fp)
  800e68:	00bfff84 	movi	r2,-2
  800e6c:	1884703a 	and	r2,r3,r2
  800e70:	1001703a 	wrctl	status,r2
  
  return context;
  800e74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  800e78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  800e7c:	00802074 	movhi	r2,129
  800e80:	10a07c04 	addi	r2,r2,-32272
  800e84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  800e88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  800e8c:	e0fffc17 	ldw	r3,-16(fp)
  800e90:	e0bff917 	ldw	r2,-28(fp)
  800e94:	1885883a 	add	r2,r3,r2
  800e98:	10c00044 	addi	r3,r2,1
  800e9c:	e0bffb17 	ldw	r2,-20(fp)
  800ea0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  800ea4:	e0bffb17 	ldw	r2,-20(fp)
  800ea8:	10c00217 	ldw	r3,8(r2)
  800eac:	e0bff917 	ldw	r2,-28(fp)
  800eb0:	1880042e 	bgeu	r3,r2,800ec4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  800eb4:	e0fffb17 	ldw	r3,-20(fp)
  800eb8:	00800044 	movi	r2,1
  800ebc:	18800405 	stb	r2,16(r3)
  800ec0:	00000206 	br	800ecc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  800ec4:	e0bffb17 	ldw	r2,-20(fp)
  800ec8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  800ecc:	e0fffb17 	ldw	r3,-20(fp)
  800ed0:	00802034 	movhi	r2,128
  800ed4:	109a5204 	addi	r2,r2,26952
  800ed8:	e0bff615 	stw	r2,-40(fp)
  800edc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  800ee0:	e0fff717 	ldw	r3,-36(fp)
  800ee4:	e0bff617 	ldw	r2,-40(fp)
  800ee8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  800eec:	e0bff617 	ldw	r2,-40(fp)
  800ef0:	10c00017 	ldw	r3,0(r2)
  800ef4:	e0bff717 	ldw	r2,-36(fp)
  800ef8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  800efc:	e0bff617 	ldw	r2,-40(fp)
  800f00:	10c00017 	ldw	r3,0(r2)
  800f04:	e0bff717 	ldw	r2,-36(fp)
  800f08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  800f0c:	e0fff617 	ldw	r3,-40(fp)
  800f10:	e0bff717 	ldw	r2,-36(fp)
  800f14:	18800015 	stw	r2,0(r3)
  800f18:	e0bffa17 	ldw	r2,-24(fp)
  800f1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f20:	e0bff517 	ldw	r2,-44(fp)
  800f24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  800f28:	e03fff15 	stw	zero,-4(fp)
  800f2c:	00000506 	br	800f44 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  800f30:	00bffa84 	movi	r2,-22
  800f34:	e0bfff15 	stw	r2,-4(fp)
  800f38:	00000206 	br	800f44 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  800f3c:	00bfde84 	movi	r2,-134
  800f40:	e0bfff15 	stw	r2,-4(fp)
  800f44:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  800f48:	e037883a 	mov	sp,fp
  800f4c:	df000017 	ldw	fp,0(sp)
  800f50:	dec00104 	addi	sp,sp,4
  800f54:	f800283a 	ret

00800f58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800f58:	defffe04 	addi	sp,sp,-8
  800f5c:	dfc00115 	stw	ra,4(sp)
  800f60:	df000015 	stw	fp,0(sp)
  800f64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800f68:	01002034 	movhi	r4,128
  800f6c:	211a5f04 	addi	r4,r4,27004
  800f70:	01402034 	movhi	r5,128
  800f74:	29545704 	addi	r5,r5,20828
  800f78:	01802034 	movhi	r6,128
  800f7c:	319a5f04 	addi	r6,r6,27004
  800f80:	0800fd80 	call	800fd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800f84:	01002034 	movhi	r4,128
  800f88:	21000804 	addi	r4,r4,32
  800f8c:	01402034 	movhi	r5,128
  800f90:	29400804 	addi	r5,r5,32
  800f94:	01802034 	movhi	r6,128
  800f98:	31806d04 	addi	r6,r6,436
  800f9c:	0800fd80 	call	800fd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800fa0:	01002034 	movhi	r4,128
  800fa4:	2113a404 	addi	r4,r4,20112
  800fa8:	01402034 	movhi	r5,128
  800fac:	2953a404 	addi	r5,r5,20112
  800fb0:	01802034 	movhi	r6,128
  800fb4:	31945704 	addi	r6,r6,20828
  800fb8:	0800fd80 	call	800fd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800fbc:	080394c0 	call	80394c <alt_dcache_flush_all>
  alt_icache_flush_all();
  800fc0:	0803b980 	call	803b98 <alt_icache_flush_all>
}
  800fc4:	e037883a 	mov	sp,fp
  800fc8:	dfc00117 	ldw	ra,4(sp)
  800fcc:	df000017 	ldw	fp,0(sp)
  800fd0:	dec00204 	addi	sp,sp,8
  800fd4:	f800283a 	ret

00800fd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  800fd8:	defffc04 	addi	sp,sp,-16
  800fdc:	df000315 	stw	fp,12(sp)
  800fe0:	df000304 	addi	fp,sp,12
  800fe4:	e13ffd15 	stw	r4,-12(fp)
  800fe8:	e17ffe15 	stw	r5,-8(fp)
  800fec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  800ff0:	e0fffe17 	ldw	r3,-8(fp)
  800ff4:	e0bffd17 	ldw	r2,-12(fp)
  800ff8:	18800e26 	beq	r3,r2,801034 <alt_load_section+0x5c>
  {
    while( to != end )
  800ffc:	00000a06 	br	801028 <alt_load_section+0x50>
    {
      *to++ = *from++;
  801000:	e0bffd17 	ldw	r2,-12(fp)
  801004:	10c00017 	ldw	r3,0(r2)
  801008:	e0bffe17 	ldw	r2,-8(fp)
  80100c:	10c00015 	stw	r3,0(r2)
  801010:	e0bffe17 	ldw	r2,-8(fp)
  801014:	10800104 	addi	r2,r2,4
  801018:	e0bffe15 	stw	r2,-8(fp)
  80101c:	e0bffd17 	ldw	r2,-12(fp)
  801020:	10800104 	addi	r2,r2,4
  801024:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  801028:	e0fffe17 	ldw	r3,-8(fp)
  80102c:	e0bfff17 	ldw	r2,-4(fp)
  801030:	18bff31e 	bne	r3,r2,801000 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  801034:	e037883a 	mov	sp,fp
  801038:	df000017 	ldw	fp,0(sp)
  80103c:	dec00104 	addi	sp,sp,4
  801040:	f800283a 	ret

00801044 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  801044:	defffd04 	addi	sp,sp,-12
  801048:	dfc00215 	stw	ra,8(sp)
  80104c:	df000115 	stw	fp,4(sp)
  801050:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  801054:	0009883a 	mov	r4,zero
  801058:	08012540 	call	801254 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80105c:	08012880 	call	801288 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  801060:	01002034 	movhi	r4,128
  801064:	2113a404 	addi	r4,r4,20112
  801068:	01402034 	movhi	r5,128
  80106c:	2953a404 	addi	r5,r5,20112
  801070:	01802034 	movhi	r6,128
  801074:	3193a404 	addi	r6,r6,20112
  801078:	0803f580 	call	803f58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80107c:	0803ad00 	call	803ad0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  801080:	01002034 	movhi	r4,128
  801084:	210ecd04 	addi	r4,r4,15156
  801088:	080478c0 	call	80478c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80108c:	d1262617 	ldw	r4,-26472(gp)
  801090:	d1662717 	ldw	r5,-26468(gp)
  801094:	d1a62817 	ldw	r6,-26464(gp)
  801098:	08003500 	call	800350 <main>
  80109c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8010a0:	01000044 	movi	r4,1
  8010a4:	08037f00 	call	8037f0 <close>
  exit (result);
  8010a8:	e13fff17 	ldw	r4,-4(fp)
  8010ac:	08047a00 	call	8047a0 <exit>

008010b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8010b0:	defffa04 	addi	sp,sp,-24
  8010b4:	df000515 	stw	fp,20(sp)
  8010b8:	df000504 	addi	fp,sp,20
  8010bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8010c0:	0005303a 	rdctl	r2,status
  8010c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8010c8:	e0fffd17 	ldw	r3,-12(fp)
  8010cc:	00bfff84 	movi	r2,-2
  8010d0:	1884703a 	and	r2,r3,r2
  8010d4:	1001703a 	wrctl	status,r2
  
  return context;
  8010d8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8010dc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8010e0:	e0bfff17 	ldw	r2,-4(fp)
  8010e4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8010e8:	e0bffc17 	ldw	r2,-16(fp)
  8010ec:	10c00017 	ldw	r3,0(r2)
  8010f0:	e0bffc17 	ldw	r2,-16(fp)
  8010f4:	10800117 	ldw	r2,4(r2)
  8010f8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8010fc:	e0bffc17 	ldw	r2,-16(fp)
  801100:	10c00117 	ldw	r3,4(r2)
  801104:	e0bffc17 	ldw	r2,-16(fp)
  801108:	10800017 	ldw	r2,0(r2)
  80110c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  801110:	e0fffc17 	ldw	r3,-16(fp)
  801114:	e0bffc17 	ldw	r2,-16(fp)
  801118:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80111c:	e0fffc17 	ldw	r3,-16(fp)
  801120:	e0bffc17 	ldw	r2,-16(fp)
  801124:	18800015 	stw	r2,0(r3)
  801128:	e0bffe17 	ldw	r2,-8(fp)
  80112c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801130:	e0bffb17 	ldw	r2,-20(fp)
  801134:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  801138:	e037883a 	mov	sp,fp
  80113c:	df000017 	ldw	fp,0(sp)
  801140:	dec00104 	addi	sp,sp,4
  801144:	f800283a 	ret

00801148 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  801148:	defffb04 	addi	sp,sp,-20
  80114c:	dfc00415 	stw	ra,16(sp)
  801150:	df000315 	stw	fp,12(sp)
  801154:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  801158:	d0a00017 	ldw	r2,-32768(gp)
  80115c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  801160:	d0a62a17 	ldw	r2,-26456(gp)
  801164:	10800044 	addi	r2,r2,1
  801168:	d0a62a15 	stw	r2,-26456(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80116c:	00003106 	br	801234 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  801170:	e0bffe17 	ldw	r2,-8(fp)
  801174:	10800017 	ldw	r2,0(r2)
  801178:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80117c:	e0bffe17 	ldw	r2,-8(fp)
  801180:	10800403 	ldbu	r2,16(r2)
  801184:	10803fcc 	andi	r2,r2,255
  801188:	1005003a 	cmpeq	r2,r2,zero
  80118c:	1000051e 	bne	r2,zero,8011a4 <alt_tick+0x5c>
  801190:	d0a62a17 	ldw	r2,-26456(gp)
  801194:	1004c03a 	cmpne	r2,r2,zero
  801198:	1000021e 	bne	r2,zero,8011a4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80119c:	e0bffe17 	ldw	r2,-8(fp)
  8011a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8011a4:	e0bffe17 	ldw	r2,-8(fp)
  8011a8:	10c00217 	ldw	r3,8(r2)
  8011ac:	d0a62a17 	ldw	r2,-26456(gp)
  8011b0:	10c01e36 	bltu	r2,r3,80122c <alt_tick+0xe4>
  8011b4:	e0bffe17 	ldw	r2,-8(fp)
  8011b8:	10800403 	ldbu	r2,16(r2)
  8011bc:	10803fcc 	andi	r2,r2,255
  8011c0:	1004c03a 	cmpne	r2,r2,zero
  8011c4:	1000191e 	bne	r2,zero,80122c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8011c8:	e0bffe17 	ldw	r2,-8(fp)
  8011cc:	10c00317 	ldw	r3,12(r2)
  8011d0:	e0bffe17 	ldw	r2,-8(fp)
  8011d4:	11000517 	ldw	r4,20(r2)
  8011d8:	183ee83a 	callr	r3
  8011dc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8011e0:	e0bffd17 	ldw	r2,-12(fp)
  8011e4:	1004c03a 	cmpne	r2,r2,zero
  8011e8:	1000031e 	bne	r2,zero,8011f8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8011ec:	e13ffe17 	ldw	r4,-8(fp)
  8011f0:	08010b00 	call	8010b0 <alt_alarm_stop>
  8011f4:	00000d06 	br	80122c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8011f8:	e0bffe17 	ldw	r2,-8(fp)
  8011fc:	10c00217 	ldw	r3,8(r2)
  801200:	e0bffd17 	ldw	r2,-12(fp)
  801204:	1887883a 	add	r3,r3,r2
  801208:	e0bffe17 	ldw	r2,-8(fp)
  80120c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  801210:	e0bffe17 	ldw	r2,-8(fp)
  801214:	10c00217 	ldw	r3,8(r2)
  801218:	d0a62a17 	ldw	r2,-26456(gp)
  80121c:	1880032e 	bgeu	r3,r2,80122c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  801220:	e0fffe17 	ldw	r3,-8(fp)
  801224:	00800044 	movi	r2,1
  801228:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80122c:	e0bfff17 	ldw	r2,-4(fp)
  801230:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  801234:	d0e00004 	addi	r3,gp,-32768
  801238:	e0bffe17 	ldw	r2,-8(fp)
  80123c:	10ffcc1e 	bne	r2,r3,801170 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  801240:	e037883a 	mov	sp,fp
  801244:	dfc00117 	ldw	ra,4(sp)
  801248:	df000017 	ldw	fp,0(sp)
  80124c:	dec00204 	addi	sp,sp,8
  801250:	f800283a 	ret

00801254 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  801254:	defffd04 	addi	sp,sp,-12
  801258:	dfc00215 	stw	ra,8(sp)
  80125c:	df000115 	stw	fp,4(sp)
  801260:	df000104 	addi	fp,sp,4
  801264:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  801268:	08043240 	call	804324 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80126c:	00800044 	movi	r2,1
  801270:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  801274:	e037883a 	mov	sp,fp
  801278:	dfc00117 	ldw	ra,4(sp)
  80127c:	df000017 	ldw	fp,0(sp)
  801280:	dec00204 	addi	sp,sp,8
  801284:	f800283a 	ret

00801288 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  801288:	defffe04 	addi	sp,sp,-8
  80128c:	dfc00115 	stw	ra,4(sp)
  801290:	df000015 	stw	fp,0(sp)
  801294:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  801298:	01004074 	movhi	r4,257
  80129c:	21040804 	addi	r4,r4,4128
  8012a0:	000b883a 	mov	r5,zero
  8012a4:	01800084 	movi	r6,2
  8012a8:	01c0fa04 	movi	r7,1000
  8012ac:	0802db00 	call	802db0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8012b0:	01002034 	movhi	r4,128
  8012b4:	21146104 	addi	r4,r4,20868
  8012b8:	000b883a 	mov	r5,zero
  8012bc:	01800044 	movi	r6,1
  8012c0:	080149c0 	call	80149c <altera_avalon_jtag_uart_init>
  8012c4:	01002034 	movhi	r4,128
  8012c8:	21145704 	addi	r4,r4,20828
  8012cc:	080131c0 	call	80131c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8012d0:	01002034 	movhi	r4,128
  8012d4:	21187904 	addi	r4,r4,25060
  8012d8:	0802bac0 	call	802bac <altera_avalon_lcd_16207_init>
  8012dc:	01002034 	movhi	r4,128
  8012e0:	21186f04 	addi	r4,r4,25020
  8012e4:	080131c0 	call	80131c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8012e8:	01002034 	movhi	r4,128
  8012ec:	2118c104 	addi	r4,r4,25348
  8012f0:	000b883a 	mov	r5,zero
  8012f4:	000d883a 	mov	r6,zero
  8012f8:	0802f380 	call	802f38 <altera_avalon_uart_init>
  8012fc:	01002034 	movhi	r4,128
  801300:	2118b704 	addi	r4,r4,25308
  801304:	080131c0 	call	80131c <alt_dev_reg>
}
  801308:	e037883a 	mov	sp,fp
  80130c:	dfc00117 	ldw	ra,4(sp)
  801310:	df000017 	ldw	fp,0(sp)
  801314:	dec00204 	addi	sp,sp,8
  801318:	f800283a 	ret

0080131c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80131c:	defffd04 	addi	sp,sp,-12
  801320:	dfc00215 	stw	ra,8(sp)
  801324:	df000115 	stw	fp,4(sp)
  801328:	df000104 	addi	fp,sp,4
  80132c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  801330:	e13fff17 	ldw	r4,-4(fp)
  801334:	01402034 	movhi	r5,128
  801338:	295a5704 	addi	r5,r5,26972
  80133c:	08039bc0 	call	8039bc <alt_dev_llist_insert>
}
  801340:	e037883a 	mov	sp,fp
  801344:	dfc00117 	ldw	ra,4(sp)
  801348:	df000017 	ldw	fp,0(sp)
  80134c:	dec00204 	addi	sp,sp,8
  801350:	f800283a 	ret

00801354 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  801354:	defffa04 	addi	sp,sp,-24
  801358:	dfc00515 	stw	ra,20(sp)
  80135c:	df000415 	stw	fp,16(sp)
  801360:	df000404 	addi	fp,sp,16
  801364:	e13ffd15 	stw	r4,-12(fp)
  801368:	e17ffe15 	stw	r5,-8(fp)
  80136c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  801370:	e0bffd17 	ldw	r2,-12(fp)
  801374:	10800017 	ldw	r2,0(r2)
  801378:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80137c:	e0bffc17 	ldw	r2,-16(fp)
  801380:	11000a04 	addi	r4,r2,40
  801384:	e0bffd17 	ldw	r2,-12(fp)
  801388:	11c00217 	ldw	r7,8(r2)
  80138c:	e17ffe17 	ldw	r5,-8(fp)
  801390:	e1bfff17 	ldw	r6,-4(fp)
  801394:	080199c0 	call	80199c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  801398:	e037883a 	mov	sp,fp
  80139c:	dfc00117 	ldw	ra,4(sp)
  8013a0:	df000017 	ldw	fp,0(sp)
  8013a4:	dec00204 	addi	sp,sp,8
  8013a8:	f800283a 	ret

008013ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8013ac:	defffa04 	addi	sp,sp,-24
  8013b0:	dfc00515 	stw	ra,20(sp)
  8013b4:	df000415 	stw	fp,16(sp)
  8013b8:	df000404 	addi	fp,sp,16
  8013bc:	e13ffd15 	stw	r4,-12(fp)
  8013c0:	e17ffe15 	stw	r5,-8(fp)
  8013c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8013c8:	e0bffd17 	ldw	r2,-12(fp)
  8013cc:	10800017 	ldw	r2,0(r2)
  8013d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8013d4:	e0bffc17 	ldw	r2,-16(fp)
  8013d8:	11000a04 	addi	r4,r2,40
  8013dc:	e0bffd17 	ldw	r2,-12(fp)
  8013e0:	11c00217 	ldw	r7,8(r2)
  8013e4:	e17ffe17 	ldw	r5,-8(fp)
  8013e8:	e1bfff17 	ldw	r6,-4(fp)
  8013ec:	0801bc00 	call	801bc0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8013f0:	e037883a 	mov	sp,fp
  8013f4:	dfc00117 	ldw	ra,4(sp)
  8013f8:	df000017 	ldw	fp,0(sp)
  8013fc:	dec00204 	addi	sp,sp,8
  801400:	f800283a 	ret

00801404 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  801404:	defffc04 	addi	sp,sp,-16
  801408:	dfc00315 	stw	ra,12(sp)
  80140c:	df000215 	stw	fp,8(sp)
  801410:	df000204 	addi	fp,sp,8
  801414:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  801418:	e0bfff17 	ldw	r2,-4(fp)
  80141c:	10800017 	ldw	r2,0(r2)
  801420:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  801424:	e0bffe17 	ldw	r2,-8(fp)
  801428:	11000a04 	addi	r4,r2,40
  80142c:	e0bfff17 	ldw	r2,-4(fp)
  801430:	11400217 	ldw	r5,8(r2)
  801434:	08018340 	call	801834 <altera_avalon_jtag_uart_close>
}
  801438:	e037883a 	mov	sp,fp
  80143c:	dfc00117 	ldw	ra,4(sp)
  801440:	df000017 	ldw	fp,0(sp)
  801444:	dec00204 	addi	sp,sp,8
  801448:	f800283a 	ret

0080144c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80144c:	defffa04 	addi	sp,sp,-24
  801450:	dfc00515 	stw	ra,20(sp)
  801454:	df000415 	stw	fp,16(sp)
  801458:	df000404 	addi	fp,sp,16
  80145c:	e13ffd15 	stw	r4,-12(fp)
  801460:	e17ffe15 	stw	r5,-8(fp)
  801464:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  801468:	e0bffd17 	ldw	r2,-12(fp)
  80146c:	10800017 	ldw	r2,0(r2)
  801470:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  801474:	e0bffc17 	ldw	r2,-16(fp)
  801478:	11000a04 	addi	r4,r2,40
  80147c:	e17ffe17 	ldw	r5,-8(fp)
  801480:	e1bfff17 	ldw	r6,-4(fp)
  801484:	08018a80 	call	8018a8 <altera_avalon_jtag_uart_ioctl>
}
  801488:	e037883a 	mov	sp,fp
  80148c:	dfc00117 	ldw	ra,4(sp)
  801490:	df000017 	ldw	fp,0(sp)
  801494:	dec00204 	addi	sp,sp,8
  801498:	f800283a 	ret

0080149c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80149c:	defffa04 	addi	sp,sp,-24
  8014a0:	dfc00515 	stw	ra,20(sp)
  8014a4:	df000415 	stw	fp,16(sp)
  8014a8:	df000404 	addi	fp,sp,16
  8014ac:	e13ffd15 	stw	r4,-12(fp)
  8014b0:	e17ffe15 	stw	r5,-8(fp)
  8014b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8014b8:	e0fffd17 	ldw	r3,-12(fp)
  8014bc:	00800044 	movi	r2,1
  8014c0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8014c4:	e0bffd17 	ldw	r2,-12(fp)
  8014c8:	10800017 	ldw	r2,0(r2)
  8014cc:	11000104 	addi	r4,r2,4
  8014d0:	e0bffd17 	ldw	r2,-12(fp)
  8014d4:	10800817 	ldw	r2,32(r2)
  8014d8:	1007883a 	mov	r3,r2
  8014dc:	2005883a 	mov	r2,r4
  8014e0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8014e4:	e13ffe17 	ldw	r4,-8(fp)
  8014e8:	e17fff17 	ldw	r5,-4(fp)
  8014ec:	d8000015 	stw	zero,0(sp)
  8014f0:	01802034 	movhi	r6,128
  8014f4:	31855704 	addi	r6,r6,5468
  8014f8:	e1fffd17 	ldw	r7,-12(fp)
  8014fc:	0803bc80 	call	803bc8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  801500:	e0bffd17 	ldw	r2,-12(fp)
  801504:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  801508:	e0bffd17 	ldw	r2,-12(fp)
  80150c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  801510:	00802074 	movhi	r2,129
  801514:	10a07b04 	addi	r2,r2,-32276
  801518:	10800017 	ldw	r2,0(r2)
  80151c:	100b883a 	mov	r5,r2
  801520:	01802034 	movhi	r6,128
  801524:	3185e104 	addi	r6,r6,6020
  801528:	e1fffd17 	ldw	r7,-12(fp)
  80152c:	0800e040 	call	800e04 <alt_alarm_start>
  801530:	1004403a 	cmpge	r2,r2,zero
  801534:	1000041e 	bne	r2,zero,801548 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  801538:	e0fffd17 	ldw	r3,-12(fp)
  80153c:	00a00034 	movhi	r2,32768
  801540:	10bfffc4 	addi	r2,r2,-1
  801544:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  801548:	e037883a 	mov	sp,fp
  80154c:	dfc00117 	ldw	ra,4(sp)
  801550:	df000017 	ldw	fp,0(sp)
  801554:	dec00204 	addi	sp,sp,8
  801558:	f800283a 	ret

0080155c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80155c:	defff804 	addi	sp,sp,-32
  801560:	df000715 	stw	fp,28(sp)
  801564:	df000704 	addi	fp,sp,28
  801568:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80156c:	e0bfff17 	ldw	r2,-4(fp)
  801570:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  801574:	e0bffe17 	ldw	r2,-8(fp)
  801578:	10800017 	ldw	r2,0(r2)
  80157c:	e0bffd15 	stw	r2,-12(fp)
  801580:	00000006 	br	801584 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  801584:	e0bffd17 	ldw	r2,-12(fp)
  801588:	10800104 	addi	r2,r2,4
  80158c:	10800037 	ldwio	r2,0(r2)
  801590:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  801594:	e0bffc17 	ldw	r2,-16(fp)
  801598:	1080c00c 	andi	r2,r2,768
  80159c:	1005003a 	cmpeq	r2,r2,zero
  8015a0:	1000741e 	bne	r2,zero,801774 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8015a4:	e0bffc17 	ldw	r2,-16(fp)
  8015a8:	1080400c 	andi	r2,r2,256
  8015ac:	1005003a 	cmpeq	r2,r2,zero
  8015b0:	1000351e 	bne	r2,zero,801688 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8015b4:	00800074 	movhi	r2,1
  8015b8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8015bc:	e0bffe17 	ldw	r2,-8(fp)
  8015c0:	10800a17 	ldw	r2,40(r2)
  8015c4:	10800044 	addi	r2,r2,1
  8015c8:	1081ffcc 	andi	r2,r2,2047
  8015cc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8015d0:	e0bffe17 	ldw	r2,-8(fp)
  8015d4:	10c00b17 	ldw	r3,44(r2)
  8015d8:	e0bffa17 	ldw	r2,-24(fp)
  8015dc:	18801626 	beq	r3,r2,801638 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8015e0:	e0bffd17 	ldw	r2,-12(fp)
  8015e4:	10800037 	ldwio	r2,0(r2)
  8015e8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8015ec:	e0bffb17 	ldw	r2,-20(fp)
  8015f0:	10a0000c 	andi	r2,r2,32768
  8015f4:	1005003a 	cmpeq	r2,r2,zero
  8015f8:	10000f1e 	bne	r2,zero,801638 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8015fc:	e0bffe17 	ldw	r2,-8(fp)
  801600:	10c00a17 	ldw	r3,40(r2)
  801604:	e0bffb17 	ldw	r2,-20(fp)
  801608:	1009883a 	mov	r4,r2
  80160c:	e0bffe17 	ldw	r2,-8(fp)
  801610:	1885883a 	add	r2,r3,r2
  801614:	10800e04 	addi	r2,r2,56
  801618:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80161c:	e0bffe17 	ldw	r2,-8(fp)
  801620:	10800a17 	ldw	r2,40(r2)
  801624:	10800044 	addi	r2,r2,1
  801628:	10c1ffcc 	andi	r3,r2,2047
  80162c:	e0bffe17 	ldw	r2,-8(fp)
  801630:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  801634:	003fe106 	br	8015bc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  801638:	e0bffb17 	ldw	r2,-20(fp)
  80163c:	10bfffec 	andhi	r2,r2,65535
  801640:	1005003a 	cmpeq	r2,r2,zero
  801644:	1000101e 	bne	r2,zero,801688 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  801648:	e0bffe17 	ldw	r2,-8(fp)
  80164c:	10c00817 	ldw	r3,32(r2)
  801650:	00bfff84 	movi	r2,-2
  801654:	1886703a 	and	r3,r3,r2
  801658:	e0bffe17 	ldw	r2,-8(fp)
  80165c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  801660:	e0bffd17 	ldw	r2,-12(fp)
  801664:	11000104 	addi	r4,r2,4
  801668:	e0bffe17 	ldw	r2,-8(fp)
  80166c:	10800817 	ldw	r2,32(r2)
  801670:	1007883a 	mov	r3,r2
  801674:	2005883a 	mov	r2,r4
  801678:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80167c:	e0bffd17 	ldw	r2,-12(fp)
  801680:	10800104 	addi	r2,r2,4
  801684:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  801688:	e0bffc17 	ldw	r2,-16(fp)
  80168c:	1080800c 	andi	r2,r2,512
  801690:	1005003a 	cmpeq	r2,r2,zero
  801694:	103fbb1e 	bne	r2,zero,801584 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  801698:	e0bffc17 	ldw	r2,-16(fp)
  80169c:	10bfffec 	andhi	r2,r2,65535
  8016a0:	1004d43a 	srli	r2,r2,16
  8016a4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8016a8:	00001506 	br	801700 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8016ac:	e13ffd17 	ldw	r4,-12(fp)
  8016b0:	e0bffe17 	ldw	r2,-8(fp)
  8016b4:	10c00d17 	ldw	r3,52(r2)
  8016b8:	e0bffe17 	ldw	r2,-8(fp)
  8016bc:	1885883a 	add	r2,r3,r2
  8016c0:	10820e04 	addi	r2,r2,2104
  8016c4:	10800003 	ldbu	r2,0(r2)
  8016c8:	10c03fcc 	andi	r3,r2,255
  8016cc:	18c0201c 	xori	r3,r3,128
  8016d0:	18ffe004 	addi	r3,r3,-128
  8016d4:	2005883a 	mov	r2,r4
  8016d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8016dc:	e0bffe17 	ldw	r2,-8(fp)
  8016e0:	10800d17 	ldw	r2,52(r2)
  8016e4:	10800044 	addi	r2,r2,1
  8016e8:	10c1ffcc 	andi	r3,r2,2047
  8016ec:	e0bffe17 	ldw	r2,-8(fp)
  8016f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8016f4:	e0bff917 	ldw	r2,-28(fp)
  8016f8:	10bfffc4 	addi	r2,r2,-1
  8016fc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  801700:	e0bff917 	ldw	r2,-28(fp)
  801704:	1005003a 	cmpeq	r2,r2,zero
  801708:	1000051e 	bne	r2,zero,801720 <altera_avalon_jtag_uart_irq+0x1c4>
  80170c:	e0bffe17 	ldw	r2,-8(fp)
  801710:	10c00d17 	ldw	r3,52(r2)
  801714:	e0bffe17 	ldw	r2,-8(fp)
  801718:	10800c17 	ldw	r2,48(r2)
  80171c:	18bfe31e 	bne	r3,r2,8016ac <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  801720:	e0bff917 	ldw	r2,-28(fp)
  801724:	1005003a 	cmpeq	r2,r2,zero
  801728:	103f961e 	bne	r2,zero,801584 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80172c:	e0bffe17 	ldw	r2,-8(fp)
  801730:	10c00817 	ldw	r3,32(r2)
  801734:	00bfff44 	movi	r2,-3
  801738:	1886703a 	and	r3,r3,r2
  80173c:	e0bffe17 	ldw	r2,-8(fp)
  801740:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801744:	e0bffe17 	ldw	r2,-8(fp)
  801748:	10800017 	ldw	r2,0(r2)
  80174c:	11000104 	addi	r4,r2,4
  801750:	e0bffe17 	ldw	r2,-8(fp)
  801754:	10800817 	ldw	r2,32(r2)
  801758:	1007883a 	mov	r3,r2
  80175c:	2005883a 	mov	r2,r4
  801760:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  801764:	e0bffd17 	ldw	r2,-12(fp)
  801768:	10800104 	addi	r2,r2,4
  80176c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  801770:	003f8406 	br	801584 <altera_avalon_jtag_uart_irq+0x28>
}
  801774:	e037883a 	mov	sp,fp
  801778:	df000017 	ldw	fp,0(sp)
  80177c:	dec00104 	addi	sp,sp,4
  801780:	f800283a 	ret

00801784 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  801784:	defffc04 	addi	sp,sp,-16
  801788:	df000315 	stw	fp,12(sp)
  80178c:	df000304 	addi	fp,sp,12
  801790:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  801794:	e0bfff17 	ldw	r2,-4(fp)
  801798:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80179c:	e0bffe17 	ldw	r2,-8(fp)
  8017a0:	10800017 	ldw	r2,0(r2)
  8017a4:	10800104 	addi	r2,r2,4
  8017a8:	10800037 	ldwio	r2,0(r2)
  8017ac:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8017b0:	e0bffd17 	ldw	r2,-12(fp)
  8017b4:	1081000c 	andi	r2,r2,1024
  8017b8:	1005003a 	cmpeq	r2,r2,zero
  8017bc:	10000c1e 	bne	r2,zero,8017f0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8017c0:	e0bffe17 	ldw	r2,-8(fp)
  8017c4:	10800017 	ldw	r2,0(r2)
  8017c8:	11000104 	addi	r4,r2,4
  8017cc:	e0bffe17 	ldw	r2,-8(fp)
  8017d0:	10800817 	ldw	r2,32(r2)
  8017d4:	10810014 	ori	r2,r2,1024
  8017d8:	1007883a 	mov	r3,r2
  8017dc:	2005883a 	mov	r2,r4
  8017e0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8017e4:	e0bffe17 	ldw	r2,-8(fp)
  8017e8:	10000915 	stw	zero,36(r2)
  8017ec:	00000a06 	br	801818 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8017f0:	e0bffe17 	ldw	r2,-8(fp)
  8017f4:	10c00917 	ldw	r3,36(r2)
  8017f8:	00a00034 	movhi	r2,32768
  8017fc:	10bfff04 	addi	r2,r2,-4
  801800:	10c00536 	bltu	r2,r3,801818 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  801804:	e0bffe17 	ldw	r2,-8(fp)
  801808:	10800917 	ldw	r2,36(r2)
  80180c:	10c00044 	addi	r3,r2,1
  801810:	e0bffe17 	ldw	r2,-8(fp)
  801814:	10c00915 	stw	r3,36(r2)
  801818:	00802074 	movhi	r2,129
  80181c:	10a07b04 	addi	r2,r2,-32276
  801820:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  801824:	e037883a 	mov	sp,fp
  801828:	df000017 	ldw	fp,0(sp)
  80182c:	dec00104 	addi	sp,sp,4
  801830:	f800283a 	ret

00801834 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  801834:	defffc04 	addi	sp,sp,-16
  801838:	df000315 	stw	fp,12(sp)
  80183c:	df000304 	addi	fp,sp,12
  801840:	e13ffd15 	stw	r4,-12(fp)
  801844:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  801848:	00000706 	br	801868 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80184c:	e0bffe17 	ldw	r2,-8(fp)
  801850:	1090000c 	andi	r2,r2,16384
  801854:	1005003a 	cmpeq	r2,r2,zero
  801858:	1000031e 	bne	r2,zero,801868 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80185c:	00bffd44 	movi	r2,-11
  801860:	e0bfff15 	stw	r2,-4(fp)
  801864:	00000b06 	br	801894 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  801868:	e0bffd17 	ldw	r2,-12(fp)
  80186c:	10c00d17 	ldw	r3,52(r2)
  801870:	e0bffd17 	ldw	r2,-12(fp)
  801874:	10800c17 	ldw	r2,48(r2)
  801878:	18800526 	beq	r3,r2,801890 <altera_avalon_jtag_uart_close+0x5c>
  80187c:	e0bffd17 	ldw	r2,-12(fp)
  801880:	10c00917 	ldw	r3,36(r2)
  801884:	e0bffd17 	ldw	r2,-12(fp)
  801888:	10800117 	ldw	r2,4(r2)
  80188c:	18bfef36 	bltu	r3,r2,80184c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  801890:	e03fff15 	stw	zero,-4(fp)
  801894:	e0bfff17 	ldw	r2,-4(fp)
}
  801898:	e037883a 	mov	sp,fp
  80189c:	df000017 	ldw	fp,0(sp)
  8018a0:	dec00104 	addi	sp,sp,4
  8018a4:	f800283a 	ret

008018a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8018a8:	defff804 	addi	sp,sp,-32
  8018ac:	df000715 	stw	fp,28(sp)
  8018b0:	df000704 	addi	fp,sp,28
  8018b4:	e13ffb15 	stw	r4,-20(fp)
  8018b8:	e17ffc15 	stw	r5,-16(fp)
  8018bc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8018c0:	00bff9c4 	movi	r2,-25
  8018c4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8018c8:	e0bffc17 	ldw	r2,-16(fp)
  8018cc:	e0bfff15 	stw	r2,-4(fp)
  8018d0:	e0ffff17 	ldw	r3,-4(fp)
  8018d4:	189a8060 	cmpeqi	r2,r3,27137
  8018d8:	1000041e 	bne	r2,zero,8018ec <altera_avalon_jtag_uart_ioctl+0x44>
  8018dc:	e0ffff17 	ldw	r3,-4(fp)
  8018e0:	189a80a0 	cmpeqi	r2,r3,27138
  8018e4:	10001b1e 	bne	r2,zero,801954 <altera_avalon_jtag_uart_ioctl+0xac>
  8018e8:	00002706 	br	801988 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8018ec:	e0bffb17 	ldw	r2,-20(fp)
  8018f0:	10c00117 	ldw	r3,4(r2)
  8018f4:	00a00034 	movhi	r2,32768
  8018f8:	10bfffc4 	addi	r2,r2,-1
  8018fc:	18802226 	beq	r3,r2,801988 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  801900:	e0bffd17 	ldw	r2,-12(fp)
  801904:	10800017 	ldw	r2,0(r2)
  801908:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80190c:	e0bff917 	ldw	r2,-28(fp)
  801910:	10800090 	cmplti	r2,r2,2
  801914:	1000071e 	bne	r2,zero,801934 <altera_avalon_jtag_uart_ioctl+0x8c>
  801918:	e0fff917 	ldw	r3,-28(fp)
  80191c:	00a00034 	movhi	r2,32768
  801920:	10bfffc4 	addi	r2,r2,-1
  801924:	18800326 	beq	r3,r2,801934 <altera_avalon_jtag_uart_ioctl+0x8c>
  801928:	e0bff917 	ldw	r2,-28(fp)
  80192c:	e0bffe15 	stw	r2,-8(fp)
  801930:	00000306 	br	801940 <altera_avalon_jtag_uart_ioctl+0x98>
  801934:	00e00034 	movhi	r3,32768
  801938:	18ffff84 	addi	r3,r3,-2
  80193c:	e0fffe15 	stw	r3,-8(fp)
  801940:	e0bffb17 	ldw	r2,-20(fp)
  801944:	e0fffe17 	ldw	r3,-8(fp)
  801948:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80194c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  801950:	00000d06 	br	801988 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  801954:	e0bffb17 	ldw	r2,-20(fp)
  801958:	10c00117 	ldw	r3,4(r2)
  80195c:	00a00034 	movhi	r2,32768
  801960:	10bfffc4 	addi	r2,r2,-1
  801964:	18800826 	beq	r3,r2,801988 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  801968:	e13ffd17 	ldw	r4,-12(fp)
  80196c:	e0bffb17 	ldw	r2,-20(fp)
  801970:	10c00917 	ldw	r3,36(r2)
  801974:	e0bffb17 	ldw	r2,-20(fp)
  801978:	10800117 	ldw	r2,4(r2)
  80197c:	1885803a 	cmpltu	r2,r3,r2
  801980:	20800015 	stw	r2,0(r4)
      rc = 0;
  801984:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  801988:	e0bffa17 	ldw	r2,-24(fp)
}
  80198c:	e037883a 	mov	sp,fp
  801990:	df000017 	ldw	fp,0(sp)
  801994:	dec00104 	addi	sp,sp,4
  801998:	f800283a 	ret

0080199c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80199c:	defff204 	addi	sp,sp,-56
  8019a0:	dfc00d15 	stw	ra,52(sp)
  8019a4:	df000c15 	stw	fp,48(sp)
  8019a8:	df000c04 	addi	fp,sp,48
  8019ac:	e13ffb15 	stw	r4,-20(fp)
  8019b0:	e17ffc15 	stw	r5,-16(fp)
  8019b4:	e1bffd15 	stw	r6,-12(fp)
  8019b8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8019bc:	e0bffc17 	ldw	r2,-16(fp)
  8019c0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8019c4:	00004806 	br	801ae8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8019c8:	e0bffb17 	ldw	r2,-20(fp)
  8019cc:	10800a17 	ldw	r2,40(r2)
  8019d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8019d4:	e0bffb17 	ldw	r2,-20(fp)
  8019d8:	10800b17 	ldw	r2,44(r2)
  8019dc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  8019e0:	e0fff717 	ldw	r3,-36(fp)
  8019e4:	e0bff617 	ldw	r2,-40(fp)
  8019e8:	18800536 	bltu	r3,r2,801a00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8019ec:	e0bff717 	ldw	r2,-36(fp)
  8019f0:	e0fff617 	ldw	r3,-40(fp)
  8019f4:	10c5c83a 	sub	r2,r2,r3
  8019f8:	e0bff815 	stw	r2,-32(fp)
  8019fc:	00000406 	br	801a10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  801a00:	00820004 	movi	r2,2048
  801a04:	e0fff617 	ldw	r3,-40(fp)
  801a08:	10c5c83a 	sub	r2,r2,r3
  801a0c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  801a10:	e0bff817 	ldw	r2,-32(fp)
  801a14:	1005003a 	cmpeq	r2,r2,zero
  801a18:	10001f1e 	bne	r2,zero,801a98 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  801a1c:	e0fffd17 	ldw	r3,-12(fp)
  801a20:	e0bff817 	ldw	r2,-32(fp)
  801a24:	1880022e 	bgeu	r3,r2,801a30 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  801a28:	e0bffd17 	ldw	r2,-12(fp)
  801a2c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  801a30:	e0bffb17 	ldw	r2,-20(fp)
  801a34:	10c00e04 	addi	r3,r2,56
  801a38:	e0bff617 	ldw	r2,-40(fp)
  801a3c:	1887883a 	add	r3,r3,r2
  801a40:	e0bffa17 	ldw	r2,-24(fp)
  801a44:	1009883a 	mov	r4,r2
  801a48:	180b883a 	mov	r5,r3
  801a4c:	e1bff817 	ldw	r6,-32(fp)
  801a50:	080484c0 	call	80484c <memcpy>
      ptr   += n;
  801a54:	e0fff817 	ldw	r3,-32(fp)
  801a58:	e0bffa17 	ldw	r2,-24(fp)
  801a5c:	10c5883a 	add	r2,r2,r3
  801a60:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  801a64:	e0fffd17 	ldw	r3,-12(fp)
  801a68:	e0bff817 	ldw	r2,-32(fp)
  801a6c:	1885c83a 	sub	r2,r3,r2
  801a70:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  801a74:	e0fff617 	ldw	r3,-40(fp)
  801a78:	e0bff817 	ldw	r2,-32(fp)
  801a7c:	1885883a 	add	r2,r3,r2
  801a80:	10c1ffcc 	andi	r3,r2,2047
  801a84:	e0bffb17 	ldw	r2,-20(fp)
  801a88:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  801a8c:	e0bffd17 	ldw	r2,-12(fp)
  801a90:	10800048 	cmpgei	r2,r2,1
  801a94:	103fcc1e 	bne	r2,zero,8019c8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  801a98:	e0fffa17 	ldw	r3,-24(fp)
  801a9c:	e0bffc17 	ldw	r2,-16(fp)
  801aa0:	1880141e 	bne	r3,r2,801af4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  801aa4:	e0bffe17 	ldw	r2,-8(fp)
  801aa8:	1090000c 	andi	r2,r2,16384
  801aac:	1004c03a 	cmpne	r2,r2,zero
  801ab0:	1000101e 	bne	r2,zero,801af4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  801ab4:	e0bffb17 	ldw	r2,-20(fp)
  801ab8:	10c00a17 	ldw	r3,40(r2)
  801abc:	e0bff717 	ldw	r2,-36(fp)
  801ac0:	1880051e 	bne	r3,r2,801ad8 <altera_avalon_jtag_uart_read+0x13c>
  801ac4:	e0bffb17 	ldw	r2,-20(fp)
  801ac8:	10c00917 	ldw	r3,36(r2)
  801acc:	e0bffb17 	ldw	r2,-20(fp)
  801ad0:	10800117 	ldw	r2,4(r2)
  801ad4:	18bff736 	bltu	r3,r2,801ab4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  801ad8:	e0bffb17 	ldw	r2,-20(fp)
  801adc:	10c00a17 	ldw	r3,40(r2)
  801ae0:	e0bff717 	ldw	r2,-36(fp)
  801ae4:	18800326 	beq	r3,r2,801af4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  801ae8:	e0bffd17 	ldw	r2,-12(fp)
  801aec:	10800048 	cmpgei	r2,r2,1
  801af0:	103fb51e 	bne	r2,zero,8019c8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  801af4:	e0fffa17 	ldw	r3,-24(fp)
  801af8:	e0bffc17 	ldw	r2,-16(fp)
  801afc:	18801926 	beq	r3,r2,801b64 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801b00:	0005303a 	rdctl	r2,status
  801b04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801b08:	e0fff517 	ldw	r3,-44(fp)
  801b0c:	00bfff84 	movi	r2,-2
  801b10:	1884703a 	and	r2,r3,r2
  801b14:	1001703a 	wrctl	status,r2
  
  return context;
  801b18:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  801b1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  801b20:	e0bffb17 	ldw	r2,-20(fp)
  801b24:	10800817 	ldw	r2,32(r2)
  801b28:	10c00054 	ori	r3,r2,1
  801b2c:	e0bffb17 	ldw	r2,-20(fp)
  801b30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801b34:	e0bffb17 	ldw	r2,-20(fp)
  801b38:	10800017 	ldw	r2,0(r2)
  801b3c:	11000104 	addi	r4,r2,4
  801b40:	e0bffb17 	ldw	r2,-20(fp)
  801b44:	10800817 	ldw	r2,32(r2)
  801b48:	1007883a 	mov	r3,r2
  801b4c:	2005883a 	mov	r2,r4
  801b50:	10c00035 	stwio	r3,0(r2)
  801b54:	e0bff917 	ldw	r2,-28(fp)
  801b58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801b5c:	e0bff417 	ldw	r2,-48(fp)
  801b60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  801b64:	e0fffa17 	ldw	r3,-24(fp)
  801b68:	e0bffc17 	ldw	r2,-16(fp)
  801b6c:	18800526 	beq	r3,r2,801b84 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  801b70:	e0fffa17 	ldw	r3,-24(fp)
  801b74:	e0bffc17 	ldw	r2,-16(fp)
  801b78:	1887c83a 	sub	r3,r3,r2
  801b7c:	e0ffff15 	stw	r3,-4(fp)
  801b80:	00000906 	br	801ba8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  801b84:	e0bffe17 	ldw	r2,-8(fp)
  801b88:	1090000c 	andi	r2,r2,16384
  801b8c:	1005003a 	cmpeq	r2,r2,zero
  801b90:	1000031e 	bne	r2,zero,801ba0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  801b94:	00bffd44 	movi	r2,-11
  801b98:	e0bfff15 	stw	r2,-4(fp)
  801b9c:	00000206 	br	801ba8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  801ba0:	00bffec4 	movi	r2,-5
  801ba4:	e0bfff15 	stw	r2,-4(fp)
  801ba8:	e0bfff17 	ldw	r2,-4(fp)
}
  801bac:	e037883a 	mov	sp,fp
  801bb0:	dfc00117 	ldw	ra,4(sp)
  801bb4:	df000017 	ldw	fp,0(sp)
  801bb8:	dec00204 	addi	sp,sp,8
  801bbc:	f800283a 	ret

00801bc0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  801bc0:	defff204 	addi	sp,sp,-56
  801bc4:	dfc00d15 	stw	ra,52(sp)
  801bc8:	df000c15 	stw	fp,48(sp)
  801bcc:	df000c04 	addi	fp,sp,48
  801bd0:	e13ffb15 	stw	r4,-20(fp)
  801bd4:	e17ffc15 	stw	r5,-16(fp)
  801bd8:	e1bffd15 	stw	r6,-12(fp)
  801bdc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  801be0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  801be4:	e0bffc17 	ldw	r2,-16(fp)
  801be8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801bec:	00003a06 	br	801cd8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  801bf0:	e0bffb17 	ldw	r2,-20(fp)
  801bf4:	10800c17 	ldw	r2,48(r2)
  801bf8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  801bfc:	e0bffb17 	ldw	r2,-20(fp)
  801c00:	10800d17 	ldw	r2,52(r2)
  801c04:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  801c08:	e0fffa17 	ldw	r3,-24(fp)
  801c0c:	e0bff917 	ldw	r2,-28(fp)
  801c10:	1880062e 	bgeu	r3,r2,801c2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  801c14:	e0fff917 	ldw	r3,-28(fp)
  801c18:	e0bffa17 	ldw	r2,-24(fp)
  801c1c:	1885c83a 	sub	r2,r3,r2
  801c20:	10bfffc4 	addi	r2,r2,-1
  801c24:	e0bff815 	stw	r2,-32(fp)
  801c28:	00000c06 	br	801c5c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  801c2c:	e0bff917 	ldw	r2,-28(fp)
  801c30:	1005003a 	cmpeq	r2,r2,zero
  801c34:	1000051e 	bne	r2,zero,801c4c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  801c38:	00820004 	movi	r2,2048
  801c3c:	e0fffa17 	ldw	r3,-24(fp)
  801c40:	10c5c83a 	sub	r2,r2,r3
  801c44:	e0bff815 	stw	r2,-32(fp)
  801c48:	00000406 	br	801c5c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  801c4c:	0081ffc4 	movi	r2,2047
  801c50:	e0fffa17 	ldw	r3,-24(fp)
  801c54:	10c5c83a 	sub	r2,r2,r3
  801c58:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  801c5c:	e0bff817 	ldw	r2,-32(fp)
  801c60:	1005003a 	cmpeq	r2,r2,zero
  801c64:	10001f1e 	bne	r2,zero,801ce4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  801c68:	e0fffd17 	ldw	r3,-12(fp)
  801c6c:	e0bff817 	ldw	r2,-32(fp)
  801c70:	1880022e 	bgeu	r3,r2,801c7c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  801c74:	e0bffd17 	ldw	r2,-12(fp)
  801c78:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  801c7c:	e0bffb17 	ldw	r2,-20(fp)
  801c80:	10c20e04 	addi	r3,r2,2104
  801c84:	e0bffa17 	ldw	r2,-24(fp)
  801c88:	1885883a 	add	r2,r3,r2
  801c8c:	e0fffc17 	ldw	r3,-16(fp)
  801c90:	1009883a 	mov	r4,r2
  801c94:	180b883a 	mov	r5,r3
  801c98:	e1bff817 	ldw	r6,-32(fp)
  801c9c:	080484c0 	call	80484c <memcpy>
      ptr   += n;
  801ca0:	e0fff817 	ldw	r3,-32(fp)
  801ca4:	e0bffc17 	ldw	r2,-16(fp)
  801ca8:	10c5883a 	add	r2,r2,r3
  801cac:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  801cb0:	e0fffd17 	ldw	r3,-12(fp)
  801cb4:	e0bff817 	ldw	r2,-32(fp)
  801cb8:	1885c83a 	sub	r2,r3,r2
  801cbc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  801cc0:	e0fffa17 	ldw	r3,-24(fp)
  801cc4:	e0bff817 	ldw	r2,-32(fp)
  801cc8:	1885883a 	add	r2,r3,r2
  801ccc:	10c1ffcc 	andi	r3,r2,2047
  801cd0:	e0bffb17 	ldw	r2,-20(fp)
  801cd4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  801cd8:	e0bffd17 	ldw	r2,-12(fp)
  801cdc:	10800048 	cmpgei	r2,r2,1
  801ce0:	103fc31e 	bne	r2,zero,801bf0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801ce4:	0005303a 	rdctl	r2,status
  801ce8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801cec:	e0fff517 	ldw	r3,-44(fp)
  801cf0:	00bfff84 	movi	r2,-2
  801cf4:	1884703a 	and	r2,r3,r2
  801cf8:	1001703a 	wrctl	status,r2
  
  return context;
  801cfc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  801d00:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  801d04:	e0bffb17 	ldw	r2,-20(fp)
  801d08:	10800817 	ldw	r2,32(r2)
  801d0c:	10c00094 	ori	r3,r2,2
  801d10:	e0bffb17 	ldw	r2,-20(fp)
  801d14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  801d18:	e0bffb17 	ldw	r2,-20(fp)
  801d1c:	10800017 	ldw	r2,0(r2)
  801d20:	11000104 	addi	r4,r2,4
  801d24:	e0bffb17 	ldw	r2,-20(fp)
  801d28:	10800817 	ldw	r2,32(r2)
  801d2c:	1007883a 	mov	r3,r2
  801d30:	2005883a 	mov	r2,r4
  801d34:	10c00035 	stwio	r3,0(r2)
  801d38:	e0bff717 	ldw	r2,-36(fp)
  801d3c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801d40:	e0bff417 	ldw	r2,-48(fp)
  801d44:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  801d48:	e0bffd17 	ldw	r2,-12(fp)
  801d4c:	10800050 	cmplti	r2,r2,1
  801d50:	1000111e 	bne	r2,zero,801d98 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  801d54:	e0bffe17 	ldw	r2,-8(fp)
  801d58:	1090000c 	andi	r2,r2,16384
  801d5c:	1004c03a 	cmpne	r2,r2,zero
  801d60:	1000101e 	bne	r2,zero,801da4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  801d64:	e0bffb17 	ldw	r2,-20(fp)
  801d68:	10c00d17 	ldw	r3,52(r2)
  801d6c:	e0bff917 	ldw	r2,-28(fp)
  801d70:	1880051e 	bne	r3,r2,801d88 <altera_avalon_jtag_uart_write+0x1c8>
  801d74:	e0bffb17 	ldw	r2,-20(fp)
  801d78:	10c00917 	ldw	r3,36(r2)
  801d7c:	e0bffb17 	ldw	r2,-20(fp)
  801d80:	10800117 	ldw	r2,4(r2)
  801d84:	18bff736 	bltu	r3,r2,801d64 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  801d88:	e0bffb17 	ldw	r2,-20(fp)
  801d8c:	10c00d17 	ldw	r3,52(r2)
  801d90:	e0bff917 	ldw	r2,-28(fp)
  801d94:	18800326 	beq	r3,r2,801da4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  801d98:	e0bffd17 	ldw	r2,-12(fp)
  801d9c:	10800048 	cmpgei	r2,r2,1
  801da0:	103fcd1e 	bne	r2,zero,801cd8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  801da4:	e0fffc17 	ldw	r3,-16(fp)
  801da8:	e0bff617 	ldw	r2,-40(fp)
  801dac:	18800526 	beq	r3,r2,801dc4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  801db0:	e0fffc17 	ldw	r3,-16(fp)
  801db4:	e0bff617 	ldw	r2,-40(fp)
  801db8:	1887c83a 	sub	r3,r3,r2
  801dbc:	e0ffff15 	stw	r3,-4(fp)
  801dc0:	00000906 	br	801de8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  801dc4:	e0bffe17 	ldw	r2,-8(fp)
  801dc8:	1090000c 	andi	r2,r2,16384
  801dcc:	1005003a 	cmpeq	r2,r2,zero
  801dd0:	1000031e 	bne	r2,zero,801de0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  801dd4:	00bffd44 	movi	r2,-11
  801dd8:	e0bfff15 	stw	r2,-4(fp)
  801ddc:	00000206 	br	801de8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  801de0:	00bffec4 	movi	r2,-5
  801de4:	e0bfff15 	stw	r2,-4(fp)
  801de8:	e0bfff17 	ldw	r2,-4(fp)
}
  801dec:	e037883a 	mov	sp,fp
  801df0:	dfc00117 	ldw	ra,4(sp)
  801df4:	df000017 	ldw	fp,0(sp)
  801df8:	dec00204 	addi	sp,sp,8
  801dfc:	f800283a 	ret

00801e00 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  801e00:	defffa04 	addi	sp,sp,-24
  801e04:	dfc00515 	stw	ra,20(sp)
  801e08:	df000415 	stw	fp,16(sp)
  801e0c:	df000404 	addi	fp,sp,16
  801e10:	e13ffe15 	stw	r4,-8(fp)
  801e14:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  801e18:	e0bffe17 	ldw	r2,-8(fp)
  801e1c:	10800017 	ldw	r2,0(r2)
  801e20:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801e24:	008003f4 	movhi	r2,15
  801e28:	10909004 	addi	r2,r2,16960
  801e2c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801e30:	e0bffe17 	ldw	r2,-8(fp)
  801e34:	10800803 	ldbu	r2,32(r2)
  801e38:	10803fcc 	andi	r2,r2,255
  801e3c:	1080201c 	xori	r2,r2,128
  801e40:	10bfe004 	addi	r2,r2,-128
  801e44:	1004c03a 	cmpne	r2,r2,zero
  801e48:	1000161e 	bne	r2,zero,801ea4 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801e4c:	00000a06 	br	801e78 <lcd_write_command+0x78>
    if (--i == 0)
  801e50:	e0bffc17 	ldw	r2,-16(fp)
  801e54:	10bfffc4 	addi	r2,r2,-1
  801e58:	e0bffc15 	stw	r2,-16(fp)
  801e5c:	e0bffc17 	ldw	r2,-16(fp)
  801e60:	1004c03a 	cmpne	r2,r2,zero
  801e64:	1000041e 	bne	r2,zero,801e78 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  801e68:	e0fffe17 	ldw	r3,-8(fp)
  801e6c:	00800044 	movi	r2,1
  801e70:	18800805 	stb	r2,32(r3)
      return;
  801e74:	00000b06 	br	801ea4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801e78:	e0bffd17 	ldw	r2,-12(fp)
  801e7c:	10800104 	addi	r2,r2,4
  801e80:	10800037 	ldwio	r2,0(r2)
  801e84:	1080200c 	andi	r2,r2,128
  801e88:	1004c03a 	cmpne	r2,r2,zero
  801e8c:	103ff01e 	bne	r2,zero,801e50 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801e90:	01001904 	movi	r4,100
  801e94:	08042f40 	call	8042f4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  801e98:	e0bffd17 	ldw	r2,-12(fp)
  801e9c:	e0ffff03 	ldbu	r3,-4(fp)
  801ea0:	10c00035 	stwio	r3,0(r2)
}
  801ea4:	e037883a 	mov	sp,fp
  801ea8:	dfc00117 	ldw	ra,4(sp)
  801eac:	df000017 	ldw	fp,0(sp)
  801eb0:	dec00204 	addi	sp,sp,8
  801eb4:	f800283a 	ret

00801eb8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801eb8:	defffa04 	addi	sp,sp,-24
  801ebc:	dfc00515 	stw	ra,20(sp)
  801ec0:	df000415 	stw	fp,16(sp)
  801ec4:	df000404 	addi	fp,sp,16
  801ec8:	e13ffe15 	stw	r4,-8(fp)
  801ecc:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  801ed0:	e0bffe17 	ldw	r2,-8(fp)
  801ed4:	10800017 	ldw	r2,0(r2)
  801ed8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801edc:	008003f4 	movhi	r2,15
  801ee0:	10909004 	addi	r2,r2,16960
  801ee4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801ee8:	e0bffe17 	ldw	r2,-8(fp)
  801eec:	10800803 	ldbu	r2,32(r2)
  801ef0:	10803fcc 	andi	r2,r2,255
  801ef4:	1080201c 	xori	r2,r2,128
  801ef8:	10bfe004 	addi	r2,r2,-128
  801efc:	1004c03a 	cmpne	r2,r2,zero
  801f00:	10001d1e 	bne	r2,zero,801f78 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801f04:	00000a06 	br	801f30 <lcd_write_data+0x78>
    if (--i == 0)
  801f08:	e0bffc17 	ldw	r2,-16(fp)
  801f0c:	10bfffc4 	addi	r2,r2,-1
  801f10:	e0bffc15 	stw	r2,-16(fp)
  801f14:	e0bffc17 	ldw	r2,-16(fp)
  801f18:	1004c03a 	cmpne	r2,r2,zero
  801f1c:	1000041e 	bne	r2,zero,801f30 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  801f20:	e0fffe17 	ldw	r3,-8(fp)
  801f24:	00800044 	movi	r2,1
  801f28:	18800805 	stb	r2,32(r3)
      return;
  801f2c:	00001206 	br	801f78 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801f30:	e0bffd17 	ldw	r2,-12(fp)
  801f34:	10800104 	addi	r2,r2,4
  801f38:	10800037 	ldwio	r2,0(r2)
  801f3c:	1080200c 	andi	r2,r2,128
  801f40:	1004c03a 	cmpne	r2,r2,zero
  801f44:	103ff01e 	bne	r2,zero,801f08 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801f48:	01001904 	movi	r4,100
  801f4c:	08042f40 	call	8042f4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  801f50:	e0bffd17 	ldw	r2,-12(fp)
  801f54:	10800204 	addi	r2,r2,8
  801f58:	e0ffff03 	ldbu	r3,-4(fp)
  801f5c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  801f60:	e0bffe17 	ldw	r2,-8(fp)
  801f64:	108008c3 	ldbu	r2,35(r2)
  801f68:	10800044 	addi	r2,r2,1
  801f6c:	1007883a 	mov	r3,r2
  801f70:	e0bffe17 	ldw	r2,-8(fp)
  801f74:	10c008c5 	stb	r3,35(r2)
}
  801f78:	e037883a 	mov	sp,fp
  801f7c:	dfc00117 	ldw	ra,4(sp)
  801f80:	df000017 	ldw	fp,0(sp)
  801f84:	dec00204 	addi	sp,sp,8
  801f88:	f800283a 	ret

00801f8c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  801f8c:	defffc04 	addi	sp,sp,-16
  801f90:	dfc00315 	stw	ra,12(sp)
  801f94:	df000215 	stw	fp,8(sp)
  801f98:	df000204 	addi	fp,sp,8
  801f9c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  801fa0:	e13fff17 	ldw	r4,-4(fp)
  801fa4:	01400044 	movi	r5,1
  801fa8:	0801e000 	call	801e00 <lcd_write_command>

  sp->x = 0;
  801fac:	e0bfff17 	ldw	r2,-4(fp)
  801fb0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  801fb4:	e0bfff17 	ldw	r2,-4(fp)
  801fb8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  801fbc:	e0bfff17 	ldw	r2,-4(fp)
  801fc0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801fc4:	e03ffe15 	stw	zero,-8(fp)
  801fc8:	00001906 	br	802030 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  801fcc:	e0bffe17 	ldw	r2,-8(fp)
  801fd0:	10801924 	muli	r2,r2,100
  801fd4:	10c01004 	addi	r3,r2,64
  801fd8:	e0bfff17 	ldw	r2,-4(fp)
  801fdc:	1889883a 	add	r4,r3,r2
  801fe0:	01400804 	movi	r5,32
  801fe4:	01801444 	movi	r6,81
  801fe8:	08048ec0 	call	8048ec <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  801fec:	e0bffe17 	ldw	r2,-8(fp)
  801ff0:	10801924 	muli	r2,r2,100
  801ff4:	10c00c04 	addi	r3,r2,48
  801ff8:	e0bfff17 	ldw	r2,-4(fp)
  801ffc:	1889883a 	add	r4,r3,r2
  802000:	01400804 	movi	r5,32
  802004:	01800404 	movi	r6,16
  802008:	08048ec0 	call	8048ec <memset>
    sp->line[y].width = 0;
  80200c:	e0bffe17 	ldw	r2,-8(fp)
  802010:	e0ffff17 	ldw	r3,-4(fp)
  802014:	10801924 	muli	r2,r2,100
  802018:	10c5883a 	add	r2,r2,r3
  80201c:	10802404 	addi	r2,r2,144
  802020:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  802024:	e0bffe17 	ldw	r2,-8(fp)
  802028:	10800044 	addi	r2,r2,1
  80202c:	e0bffe15 	stw	r2,-8(fp)
  802030:	e0bffe17 	ldw	r2,-8(fp)
  802034:	10800090 	cmplti	r2,r2,2
  802038:	103fe41e 	bne	r2,zero,801fcc <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80203c:	e037883a 	mov	sp,fp
  802040:	dfc00117 	ldw	ra,4(sp)
  802044:	df000017 	ldw	fp,0(sp)
  802048:	dec00204 	addi	sp,sp,8
  80204c:	f800283a 	ret

00802050 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  802050:	defff604 	addi	sp,sp,-40
  802054:	dfc00915 	stw	ra,36(sp)
  802058:	df000815 	stw	fp,32(sp)
  80205c:	dc000715 	stw	r16,28(sp)
  802060:	df000704 	addi	fp,sp,28
  802064:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  802068:	e0bfff17 	ldw	r2,-4(fp)
  80206c:	10800943 	ldbu	r2,37(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  802080:	e03ffe15 	stw	zero,-8(fp)
  802084:	00006406 	br	802218 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  802088:	e0bffe17 	ldw	r2,-8(fp)
  80208c:	e0ffff17 	ldw	r3,-4(fp)
  802090:	10801924 	muli	r2,r2,100
  802094:	10c5883a 	add	r2,r2,r3
  802098:	10802404 	addi	r2,r2,144
  80209c:	10800043 	ldbu	r2,1(r2)
  8020a0:	10803fcc 	andi	r2,r2,255
  8020a4:	1080201c 	xori	r2,r2,128
  8020a8:	10bfe004 	addi	r2,r2,-128
  8020ac:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8020b0:	e0bffe17 	ldw	r2,-8(fp)
  8020b4:	e0ffff17 	ldw	r3,-4(fp)
  8020b8:	10801924 	muli	r2,r2,100
  8020bc:	10c5883a 	add	r2,r2,r3
  8020c0:	10802404 	addi	r2,r2,144
  8020c4:	10800083 	ldbu	r2,2(r2)
  8020c8:	10c03fcc 	andi	r3,r2,255
  8020cc:	e0bffc17 	ldw	r2,-16(fp)
  8020d0:	1885383a 	mul	r2,r3,r2
  8020d4:	1005d23a 	srai	r2,r2,8
  8020d8:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  8020dc:	e0fffa17 	ldw	r3,-24(fp)
  8020e0:	e0bffb17 	ldw	r2,-20(fp)
  8020e4:	18800116 	blt	r3,r2,8020ec <lcd_repaint_screen+0x9c>
      offset = 0;
  8020e8:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8020ec:	e03ffd15 	stw	zero,-12(fp)
  8020f0:	00004306 	br	802200 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8020f4:	e43ffe17 	ldw	r16,-8(fp)
  8020f8:	e0fffd17 	ldw	r3,-12(fp)
  8020fc:	e0bffa17 	ldw	r2,-24(fp)
  802100:	1889883a 	add	r4,r3,r2
  802104:	e17ffb17 	ldw	r5,-20(fp)
  802108:	0804dbc0 	call	804dbc <__modsi3>
  80210c:	1009883a 	mov	r4,r2
  802110:	e0ffff17 	ldw	r3,-4(fp)
  802114:	80801924 	muli	r2,r16,100
  802118:	10c5883a 	add	r2,r2,r3
  80211c:	1105883a 	add	r2,r2,r4
  802120:	10801004 	addi	r2,r2,64
  802124:	10800003 	ldbu	r2,0(r2)
  802128:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80212c:	e0bffe17 	ldw	r2,-8(fp)
  802130:	e13ffd17 	ldw	r4,-12(fp)
  802134:	e0ffff17 	ldw	r3,-4(fp)
  802138:	10801924 	muli	r2,r2,100
  80213c:	10c5883a 	add	r2,r2,r3
  802140:	1105883a 	add	r2,r2,r4
  802144:	10800c04 	addi	r2,r2,48
  802148:	10800003 	ldbu	r2,0(r2)
  80214c:	10c03fcc 	andi	r3,r2,255
  802150:	18c0201c 	xori	r3,r3,128
  802154:	18ffe004 	addi	r3,r3,-128
  802158:	e0bff947 	ldb	r2,-27(fp)
  80215c:	18802526 	beq	r3,r2,8021f4 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  802160:	e0fffe17 	ldw	r3,-8(fp)
  802164:	d0a00204 	addi	r2,gp,-32760
  802168:	1885883a 	add	r2,r3,r2
  80216c:	10800003 	ldbu	r2,0(r2)
  802170:	1007883a 	mov	r3,r2
  802174:	e0bffd17 	ldw	r2,-12(fp)
  802178:	1885883a 	add	r2,r3,r2
  80217c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  802180:	e0fff903 	ldbu	r3,-28(fp)
  802184:	e0bfff17 	ldw	r2,-4(fp)
  802188:	108008c3 	ldbu	r2,35(r2)
  80218c:	10803fcc 	andi	r2,r2,255
  802190:	1080201c 	xori	r2,r2,128
  802194:	10bfe004 	addi	r2,r2,-128
  802198:	18800926 	beq	r3,r2,8021c0 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80219c:	e0fff903 	ldbu	r3,-28(fp)
  8021a0:	00bfe004 	movi	r2,-128
  8021a4:	1884b03a 	or	r2,r3,r2
  8021a8:	11403fcc 	andi	r5,r2,255
  8021ac:	e13fff17 	ldw	r4,-4(fp)
  8021b0:	0801e000 	call	801e00 <lcd_write_command>
          sp->address = address;
  8021b4:	e0fff903 	ldbu	r3,-28(fp)
  8021b8:	e0bfff17 	ldw	r2,-4(fp)
  8021bc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8021c0:	e0bff943 	ldbu	r2,-27(fp)
  8021c4:	11403fcc 	andi	r5,r2,255
  8021c8:	e13fff17 	ldw	r4,-4(fp)
  8021cc:	0801eb80 	call	801eb8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8021d0:	e0bffe17 	ldw	r2,-8(fp)
  8021d4:	e13ffd17 	ldw	r4,-12(fp)
  8021d8:	e0ffff17 	ldw	r3,-4(fp)
  8021dc:	10801924 	muli	r2,r2,100
  8021e0:	10c5883a 	add	r2,r2,r3
  8021e4:	1105883a 	add	r2,r2,r4
  8021e8:	10c00c04 	addi	r3,r2,48
  8021ec:	e0bff943 	ldbu	r2,-27(fp)
  8021f0:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8021f4:	e0bffd17 	ldw	r2,-12(fp)
  8021f8:	10800044 	addi	r2,r2,1
  8021fc:	e0bffd15 	stw	r2,-12(fp)
  802200:	e0bffd17 	ldw	r2,-12(fp)
  802204:	10800410 	cmplti	r2,r2,16
  802208:	103fba1e 	bne	r2,zero,8020f4 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80220c:	e0bffe17 	ldw	r2,-8(fp)
  802210:	10800044 	addi	r2,r2,1
  802214:	e0bffe15 	stw	r2,-8(fp)
  802218:	e0bffe17 	ldw	r2,-8(fp)
  80221c:	10800090 	cmplti	r2,r2,2
  802220:	103f991e 	bne	r2,zero,802088 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  802224:	e037883a 	mov	sp,fp
  802228:	dfc00217 	ldw	ra,8(sp)
  80222c:	df000117 	ldw	fp,4(sp)
  802230:	dc000017 	ldw	r16,0(sp)
  802234:	dec00304 	addi	sp,sp,12
  802238:	f800283a 	ret

0080223c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80223c:	defffc04 	addi	sp,sp,-16
  802240:	dfc00315 	stw	ra,12(sp)
  802244:	df000215 	stw	fp,8(sp)
  802248:	df000204 	addi	fp,sp,8
  80224c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  802250:	e03ffe15 	stw	zero,-8(fp)
  802254:	00001d06 	br	8022cc <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  802258:	e0bffe17 	ldw	r2,-8(fp)
  80225c:	10800048 	cmpgei	r2,r2,1
  802260:	10000f1e 	bne	r2,zero,8022a0 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  802264:	e0bffe17 	ldw	r2,-8(fp)
  802268:	10801924 	muli	r2,r2,100
  80226c:	10c01004 	addi	r3,r2,64
  802270:	e0bfff17 	ldw	r2,-4(fp)
  802274:	1889883a 	add	r4,r3,r2
  802278:	e0bffe17 	ldw	r2,-8(fp)
  80227c:	10800044 	addi	r2,r2,1
  802280:	10801924 	muli	r2,r2,100
  802284:	10c01004 	addi	r3,r2,64
  802288:	e0bfff17 	ldw	r2,-4(fp)
  80228c:	1885883a 	add	r2,r3,r2
  802290:	100b883a 	mov	r5,r2
  802294:	01801404 	movi	r6,80
  802298:	080484c0 	call	80484c <memcpy>
  80229c:	00000806 	br	8022c0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8022a0:	e0bffe17 	ldw	r2,-8(fp)
  8022a4:	10801924 	muli	r2,r2,100
  8022a8:	10c01004 	addi	r3,r2,64
  8022ac:	e0bfff17 	ldw	r2,-4(fp)
  8022b0:	1889883a 	add	r4,r3,r2
  8022b4:	01400804 	movi	r5,32
  8022b8:	01801404 	movi	r6,80
  8022bc:	08048ec0 	call	8048ec <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8022c0:	e0bffe17 	ldw	r2,-8(fp)
  8022c4:	10800044 	addi	r2,r2,1
  8022c8:	e0bffe15 	stw	r2,-8(fp)
  8022cc:	e0bffe17 	ldw	r2,-8(fp)
  8022d0:	10800090 	cmplti	r2,r2,2
  8022d4:	103fe01e 	bne	r2,zero,802258 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8022d8:	e0bfff17 	ldw	r2,-4(fp)
  8022dc:	10800883 	ldbu	r2,34(r2)
  8022e0:	10bfffc4 	addi	r2,r2,-1
  8022e4:	1007883a 	mov	r3,r2
  8022e8:	e0bfff17 	ldw	r2,-4(fp)
  8022ec:	10c00885 	stb	r3,34(r2)
}
  8022f0:	e037883a 	mov	sp,fp
  8022f4:	dfc00117 	ldw	ra,4(sp)
  8022f8:	df000017 	ldw	fp,0(sp)
  8022fc:	dec00204 	addi	sp,sp,8
  802300:	f800283a 	ret

00802304 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  802304:	defff804 	addi	sp,sp,-32
  802308:	dfc00715 	stw	ra,28(sp)
  80230c:	df000615 	stw	fp,24(sp)
  802310:	df000604 	addi	fp,sp,24
  802314:	e13ffd15 	stw	r4,-12(fp)
  802318:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80231c:	e03ffc15 	stw	zero,-16(fp)
  802320:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  802324:	e0bffd17 	ldw	r2,-12(fp)
  802328:	10800a03 	ldbu	r2,40(r2)
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	1080201c 	xori	r2,r2,128
  802334:	10bfe004 	addi	r2,r2,-128
  802338:	108016d8 	cmpnei	r2,r2,91
  80233c:	1000491e 	bne	r2,zero,802464 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  802340:	e0bffd17 	ldw	r2,-12(fp)
  802344:	10800a04 	addi	r2,r2,40
  802348:	10800044 	addi	r2,r2,1
  80234c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  802350:	00000d06 	br	802388 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  802354:	e0bffc17 	ldw	r2,-16(fp)
  802358:	10c002a4 	muli	r3,r2,10
  80235c:	e0bffa17 	ldw	r2,-24(fp)
  802360:	10800003 	ldbu	r2,0(r2)
  802364:	10803fcc 	andi	r2,r2,255
  802368:	1080201c 	xori	r2,r2,128
  80236c:	10bfe004 	addi	r2,r2,-128
  802370:	1885883a 	add	r2,r3,r2
  802374:	10bff404 	addi	r2,r2,-48
  802378:	e0bffc15 	stw	r2,-16(fp)
  80237c:	e0bffa17 	ldw	r2,-24(fp)
  802380:	10800044 	addi	r2,r2,1
  802384:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  802388:	e0bffa17 	ldw	r2,-24(fp)
  80238c:	10800003 	ldbu	r2,0(r2)
  802390:	10803fcc 	andi	r2,r2,255
  802394:	1080201c 	xori	r2,r2,128
  802398:	10bfe004 	addi	r2,r2,-128
  80239c:	1007883a 	mov	r3,r2
  8023a0:	00802034 	movhi	r2,128
  8023a4:	109a5c04 	addi	r2,r2,26992
  8023a8:	10800017 	ldw	r2,0(r2)
  8023ac:	1885883a 	add	r2,r3,r2
  8023b0:	10800003 	ldbu	r2,0(r2)
  8023b4:	10803fcc 	andi	r2,r2,255
  8023b8:	1080010c 	andi	r2,r2,4
  8023bc:	1004c03a 	cmpne	r2,r2,zero
  8023c0:	103fe41e 	bne	r2,zero,802354 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8023c4:	e0bffa17 	ldw	r2,-24(fp)
  8023c8:	10800003 	ldbu	r2,0(r2)
  8023cc:	10803fcc 	andi	r2,r2,255
  8023d0:	1080201c 	xori	r2,r2,128
  8023d4:	10bfe004 	addi	r2,r2,-128
  8023d8:	10800ed8 	cmpnei	r2,r2,59
  8023dc:	1000231e 	bne	r2,zero,80246c <lcd_handle_escape+0x168>
    {
      ptr++;
  8023e0:	e0bffa17 	ldw	r2,-24(fp)
  8023e4:	10800044 	addi	r2,r2,1
  8023e8:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  8023ec:	00000d06 	br	802424 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8023f0:	e0bffb17 	ldw	r2,-20(fp)
  8023f4:	10c002a4 	muli	r3,r2,10
  8023f8:	e0bffa17 	ldw	r2,-24(fp)
  8023fc:	10800003 	ldbu	r2,0(r2)
  802400:	10803fcc 	andi	r2,r2,255
  802404:	1080201c 	xori	r2,r2,128
  802408:	10bfe004 	addi	r2,r2,-128
  80240c:	1885883a 	add	r2,r3,r2
  802410:	10bff404 	addi	r2,r2,-48
  802414:	e0bffb15 	stw	r2,-20(fp)
  802418:	e0bffa17 	ldw	r2,-24(fp)
  80241c:	10800044 	addi	r2,r2,1
  802420:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  802424:	e0bffa17 	ldw	r2,-24(fp)
  802428:	10800003 	ldbu	r2,0(r2)
  80242c:	10803fcc 	andi	r2,r2,255
  802430:	1080201c 	xori	r2,r2,128
  802434:	10bfe004 	addi	r2,r2,-128
  802438:	1007883a 	mov	r3,r2
  80243c:	00802034 	movhi	r2,128
  802440:	109a5c04 	addi	r2,r2,26992
  802444:	10800017 	ldw	r2,0(r2)
  802448:	1885883a 	add	r2,r3,r2
  80244c:	10800003 	ldbu	r2,0(r2)
  802450:	10803fcc 	andi	r2,r2,255
  802454:	1080010c 	andi	r2,r2,4
  802458:	1004c03a 	cmpne	r2,r2,zero
  80245c:	103fe41e 	bne	r2,zero,8023f0 <lcd_handle_escape+0xec>
  802460:	00000206 	br	80246c <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  802464:	00bfffc4 	movi	r2,-1
  802468:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80246c:	e0bffe07 	ldb	r2,-8(fp)
  802470:	e0bfff15 	stw	r2,-4(fp)
  802474:	e0ffff17 	ldw	r3,-4(fp)
  802478:	188012a0 	cmpeqi	r2,r3,74
  80247c:	10002f1e 	bne	r2,zero,80253c <lcd_handle_escape+0x238>
  802480:	e0ffff17 	ldw	r3,-4(fp)
  802484:	188012c8 	cmpgei	r2,r3,75
  802488:	1000041e 	bne	r2,zero,80249c <lcd_handle_escape+0x198>
  80248c:	e0ffff17 	ldw	r3,-4(fp)
  802490:	18801220 	cmpeqi	r2,r3,72
  802494:	1000081e 	bne	r2,zero,8024b8 <lcd_handle_escape+0x1b4>
  802498:	00004906 	br	8025c0 <lcd_handle_escape+0x2bc>
  80249c:	e0ffff17 	ldw	r3,-4(fp)
  8024a0:	188012e0 	cmpeqi	r2,r3,75
  8024a4:	10002b1e 	bne	r2,zero,802554 <lcd_handle_escape+0x250>
  8024a8:	e0ffff17 	ldw	r3,-4(fp)
  8024ac:	188019a0 	cmpeqi	r2,r3,102
  8024b0:	1000011e 	bne	r2,zero,8024b8 <lcd_handle_escape+0x1b4>
  8024b4:	00004206 	br	8025c0 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8024b8:	e0bffb17 	ldw	r2,-20(fp)
  8024bc:	10800050 	cmplti	r2,r2,1
  8024c0:	1000051e 	bne	r2,zero,8024d8 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  8024c4:	e0bffb17 	ldw	r2,-20(fp)
  8024c8:	10bfffc4 	addi	r2,r2,-1
  8024cc:	1007883a 	mov	r3,r2
  8024d0:	e0bffd17 	ldw	r2,-12(fp)
  8024d4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	10800050 	cmplti	r2,r2,1
  8024e0:	1000371e 	bne	r2,zero,8025c0 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  8024e4:	e0bffc17 	ldw	r2,-16(fp)
  8024e8:	10bfffc4 	addi	r2,r2,-1
  8024ec:	1007883a 	mov	r3,r2
  8024f0:	e0bffd17 	ldw	r2,-12(fp)
  8024f4:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8024f8:	e0bffd17 	ldw	r2,-12(fp)
  8024fc:	10800883 	ldbu	r2,34(r2)
  802500:	10803fcc 	andi	r2,r2,255
  802504:	10800170 	cmpltui	r2,r2,5
  802508:	1000061e 	bne	r2,zero,802524 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  80250c:	e0fffd17 	ldw	r3,-12(fp)
  802510:	00800104 	movi	r2,4
  802514:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  802518:	00000206 	br	802524 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  80251c:	e13ffd17 	ldw	r4,-12(fp)
  802520:	080223c0 	call	80223c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  802524:	e0bffd17 	ldw	r2,-12(fp)
  802528:	10800883 	ldbu	r2,34(r2)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	108000e8 	cmpgeui	r2,r2,3
  802534:	103ff91e 	bne	r2,zero,80251c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  802538:	00002106 	br	8025c0 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80253c:	e0bffc17 	ldw	r2,-16(fp)
  802540:	10800098 	cmpnei	r2,r2,2
  802544:	10001e1e 	bne	r2,zero,8025c0 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  802548:	e13ffd17 	ldw	r4,-12(fp)
  80254c:	0801f8c0 	call	801f8c <lcd_clear_screen>
    break;
  802550:	00001b06 	br	8025c0 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  802554:	e0bffc17 	ldw	r2,-16(fp)
  802558:	10800048 	cmpgei	r2,r2,1
  80255c:	1000181e 	bne	r2,zero,8025c0 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  802560:	e0bffd17 	ldw	r2,-12(fp)
  802564:	10800843 	ldbu	r2,33(r2)
  802568:	10803fcc 	andi	r2,r2,255
  80256c:	10801428 	cmpgeui	r2,r2,80
  802570:	1000131e 	bne	r2,zero,8025c0 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  802574:	e0bffd17 	ldw	r2,-12(fp)
  802578:	10800883 	ldbu	r2,34(r2)
  80257c:	10803fcc 	andi	r2,r2,255
  802580:	10801924 	muli	r2,r2,100
  802584:	10c01004 	addi	r3,r2,64
  802588:	e0bffd17 	ldw	r2,-12(fp)
  80258c:	1887883a 	add	r3,r3,r2
  802590:	e0bffd17 	ldw	r2,-12(fp)
  802594:	10800843 	ldbu	r2,33(r2)
  802598:	10803fcc 	andi	r2,r2,255
  80259c:	1889883a 	add	r4,r3,r2
  8025a0:	e0bffd17 	ldw	r2,-12(fp)
  8025a4:	10800843 	ldbu	r2,33(r2)
  8025a8:	10c03fcc 	andi	r3,r2,255
  8025ac:	00801404 	movi	r2,80
  8025b0:	10c5c83a 	sub	r2,r2,r3
  8025b4:	100d883a 	mov	r6,r2
  8025b8:	01400804 	movi	r5,32
  8025bc:	08048ec0 	call	8048ec <memset>
    }
    break;
  }
}
  8025c0:	e037883a 	mov	sp,fp
  8025c4:	dfc00117 	ldw	ra,4(sp)
  8025c8:	df000017 	ldw	fp,0(sp)
  8025cc:	dec00204 	addi	sp,sp,8
  8025d0:	f800283a 	ret

008025d4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8025d4:	defff204 	addi	sp,sp,-56
  8025d8:	dfc00d15 	stw	ra,52(sp)
  8025dc:	df000c15 	stw	fp,48(sp)
  8025e0:	dc000b15 	stw	r16,44(sp)
  8025e4:	df000b04 	addi	fp,sp,44
  8025e8:	e13ffc15 	stw	r4,-16(fp)
  8025ec:	e17ffd15 	stw	r5,-12(fp)
  8025f0:	e1bffe15 	stw	r6,-8(fp)
  8025f4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8025f8:	e0bffe17 	ldw	r2,-8(fp)
  8025fc:	1007883a 	mov	r3,r2
  802600:	e0bffd17 	ldw	r2,-12(fp)
  802604:	10c5883a 	add	r2,r2,r3
  802608:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80260c:	e0fffc17 	ldw	r3,-16(fp)
  802610:	00800044 	movi	r2,1
  802614:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  802618:	0000a206 	br	8028a4 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  80261c:	e0bffd17 	ldw	r2,-12(fp)
  802620:	10800003 	ldbu	r2,0(r2)
  802624:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  802628:	e0bffc17 	ldw	r2,-16(fp)
  80262c:	10800903 	ldbu	r2,36(r2)
  802630:	10803fcc 	andi	r2,r2,255
  802634:	1080201c 	xori	r2,r2,128
  802638:	10bfe004 	addi	r2,r2,-128
  80263c:	1004803a 	cmplt	r2,r2,zero
  802640:	10003b1e 	bne	r2,zero,802730 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  802644:	e0bffc17 	ldw	r2,-16(fp)
  802648:	10800903 	ldbu	r2,36(r2)
  80264c:	10803fcc 	andi	r2,r2,255
  802650:	1080201c 	xori	r2,r2,128
  802654:	10bfe004 	addi	r2,r2,-128
  802658:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80265c:	e0bff717 	ldw	r2,-36(fp)
  802660:	1004c03a 	cmpne	r2,r2,zero
  802664:	1000031e 	bne	r2,zero,802674 <altera_avalon_lcd_16207_write+0xa0>
  802668:	e0bff807 	ldb	r2,-32(fp)
  80266c:	108016d8 	cmpnei	r2,r2,91
  802670:	1000111e 	bne	r2,zero,8026b8 <altera_avalon_lcd_16207_write+0xe4>
  802674:	e0bff717 	ldw	r2,-36(fp)
  802678:	1005003a 	cmpeq	r2,r2,zero
  80267c:	10001a1e 	bne	r2,zero,8026e8 <altera_avalon_lcd_16207_write+0x114>
  802680:	e0bff807 	ldb	r2,-32(fp)
  802684:	1007883a 	mov	r3,r2
  802688:	00802034 	movhi	r2,128
  80268c:	109a5c04 	addi	r2,r2,26992
  802690:	10800017 	ldw	r2,0(r2)
  802694:	1885883a 	add	r2,r3,r2
  802698:	10800003 	ldbu	r2,0(r2)
  80269c:	10803fcc 	andi	r2,r2,255
  8026a0:	1080010c 	andi	r2,r2,4
  8026a4:	1004c03a 	cmpne	r2,r2,zero
  8026a8:	10000f1e 	bne	r2,zero,8026e8 <altera_avalon_lcd_16207_write+0x114>
  8026ac:	e0bff807 	ldb	r2,-32(fp)
  8026b0:	10800ee0 	cmpeqi	r2,r2,59
  8026b4:	10000c1e 	bne	r2,zero,8026e8 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  8026b8:	e0fff717 	ldw	r3,-36(fp)
  8026bc:	e0bffc17 	ldw	r2,-16(fp)
  8026c0:	1885883a 	add	r2,r3,r2
  8026c4:	10800a04 	addi	r2,r2,40
  8026c8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8026cc:	e17ff807 	ldb	r5,-32(fp)
  8026d0:	e13ffc17 	ldw	r4,-16(fp)
  8026d4:	08023040 	call	802304 <lcd_handle_escape>

        sp->esccount = -1;
  8026d8:	e0fffc17 	ldw	r3,-16(fp)
  8026dc:	00bfffc4 	movi	r2,-1
  8026e0:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8026e4:	00006c06 	br	802898 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  8026e8:	e0bffc17 	ldw	r2,-16(fp)
  8026ec:	10800903 	ldbu	r2,36(r2)
  8026f0:	10803fcc 	andi	r2,r2,255
  8026f4:	108001e8 	cmpgeui	r2,r2,7
  8026f8:	1000671e 	bne	r2,zero,802898 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  8026fc:	e0fff717 	ldw	r3,-36(fp)
  802700:	e0bffc17 	ldw	r2,-16(fp)
  802704:	1885883a 	add	r2,r3,r2
  802708:	10c00a04 	addi	r3,r2,40
  80270c:	e0bff803 	ldbu	r2,-32(fp)
  802710:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  802714:	e0bffc17 	ldw	r2,-16(fp)
  802718:	10800903 	ldbu	r2,36(r2)
  80271c:	10800044 	addi	r2,r2,1
  802720:	1007883a 	mov	r3,r2
  802724:	e0bffc17 	ldw	r2,-16(fp)
  802728:	10c00905 	stb	r3,36(r2)
  80272c:	00005a06 	br	802898 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  802730:	e0bff807 	ldb	r2,-32(fp)
  802734:	108006d8 	cmpnei	r2,r2,27
  802738:	1000031e 	bne	r2,zero,802748 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  80273c:	e0bffc17 	ldw	r2,-16(fp)
  802740:	10000905 	stb	zero,36(r2)
  802744:	00005406 	br	802898 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  802748:	e0bff807 	ldb	r2,-32(fp)
  80274c:	10800358 	cmpnei	r2,r2,13
  802750:	1000031e 	bne	r2,zero,802760 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  802754:	e0bffc17 	ldw	r2,-16(fp)
  802758:	10000845 	stb	zero,33(r2)
  80275c:	00004e06 	br	802898 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  802760:	e0bff807 	ldb	r2,-32(fp)
  802764:	10800298 	cmpnei	r2,r2,10
  802768:	1000101e 	bne	r2,zero,8027ac <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  80276c:	e0bffc17 	ldw	r2,-16(fp)
  802770:	10000845 	stb	zero,33(r2)
      sp->y++;
  802774:	e0bffc17 	ldw	r2,-16(fp)
  802778:	10800883 	ldbu	r2,34(r2)
  80277c:	10800044 	addi	r2,r2,1
  802780:	1007883a 	mov	r3,r2
  802784:	e0bffc17 	ldw	r2,-16(fp)
  802788:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80278c:	e0bffc17 	ldw	r2,-16(fp)
  802790:	10800883 	ldbu	r2,34(r2)
  802794:	10803fcc 	andi	r2,r2,255
  802798:	108000f0 	cmpltui	r2,r2,3
  80279c:	10003e1e 	bne	r2,zero,802898 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  8027a0:	e13ffc17 	ldw	r4,-16(fp)
  8027a4:	080223c0 	call	80223c <lcd_scroll_up>
  8027a8:	00003b06 	br	802898 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  8027ac:	e0bff807 	ldb	r2,-32(fp)
  8027b0:	10800218 	cmpnei	r2,r2,8
  8027b4:	10000c1e 	bne	r2,zero,8027e8 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  8027b8:	e0bffc17 	ldw	r2,-16(fp)
  8027bc:	10800843 	ldbu	r2,33(r2)
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1005003a 	cmpeq	r2,r2,zero
  8027c8:	1000331e 	bne	r2,zero,802898 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  8027cc:	e0bffc17 	ldw	r2,-16(fp)
  8027d0:	10800843 	ldbu	r2,33(r2)
  8027d4:	10bfffc4 	addi	r2,r2,-1
  8027d8:	1007883a 	mov	r3,r2
  8027dc:	e0bffc17 	ldw	r2,-16(fp)
  8027e0:	10c00845 	stb	r3,33(r2)
  8027e4:	00002c06 	br	802898 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  8027e8:	e0bff807 	ldb	r2,-32(fp)
  8027ec:	1007883a 	mov	r3,r2
  8027f0:	00802034 	movhi	r2,128
  8027f4:	109a5c04 	addi	r2,r2,26992
  8027f8:	10800017 	ldw	r2,0(r2)
  8027fc:	1885883a 	add	r2,r3,r2
  802800:	10800003 	ldbu	r2,0(r2)
  802804:	10803fcc 	andi	r2,r2,255
  802808:	1080201c 	xori	r2,r2,128
  80280c:	10bfe004 	addi	r2,r2,-128
  802810:	108025cc 	andi	r2,r2,151
  802814:	1005003a 	cmpeq	r2,r2,zero
  802818:	10001f1e 	bne	r2,zero,802898 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80281c:	e0bffc17 	ldw	r2,-16(fp)
  802820:	10800883 	ldbu	r2,34(r2)
  802824:	10803fcc 	andi	r2,r2,255
  802828:	108000b0 	cmpltui	r2,r2,2
  80282c:	1000021e 	bne	r2,zero,802838 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  802830:	e13ffc17 	ldw	r4,-16(fp)
  802834:	080223c0 	call	80223c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  802838:	e0bffc17 	ldw	r2,-16(fp)
  80283c:	10800843 	ldbu	r2,33(r2)
  802840:	10803fcc 	andi	r2,r2,255
  802844:	10801428 	cmpgeui	r2,r2,80
  802848:	10000d1e 	bne	r2,zero,802880 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  80284c:	e0bffc17 	ldw	r2,-16(fp)
  802850:	10800883 	ldbu	r2,34(r2)
  802854:	11003fcc 	andi	r4,r2,255
  802858:	e0bffc17 	ldw	r2,-16(fp)
  80285c:	10800843 	ldbu	r2,33(r2)
  802860:	11403fcc 	andi	r5,r2,255
  802864:	e0fffc17 	ldw	r3,-16(fp)
  802868:	20801924 	muli	r2,r4,100
  80286c:	10c5883a 	add	r2,r2,r3
  802870:	1145883a 	add	r2,r2,r5
  802874:	10c01004 	addi	r3,r2,64
  802878:	e0bff803 	ldbu	r2,-32(fp)
  80287c:	18800005 	stb	r2,0(r3)

      sp->x++;
  802880:	e0bffc17 	ldw	r2,-16(fp)
  802884:	10800843 	ldbu	r2,33(r2)
  802888:	10800044 	addi	r2,r2,1
  80288c:	1007883a 	mov	r3,r2
  802890:	e0bffc17 	ldw	r2,-16(fp)
  802894:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  802898:	e0bffd17 	ldw	r2,-12(fp)
  80289c:	10800044 	addi	r2,r2,1
  8028a0:	e0bffd15 	stw	r2,-12(fp)
  8028a4:	e0fffd17 	ldw	r3,-12(fp)
  8028a8:	e0bffb17 	ldw	r2,-20(fp)
  8028ac:	18bf5b36 	bltu	r3,r2,80261c <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8028b0:	00800404 	movi	r2,16
  8028b4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8028b8:	e03ffa15 	stw	zero,-24(fp)
  8028bc:	00003606 	br	802998 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8028c0:	00801404 	movi	r2,80
  8028c4:	e0bff615 	stw	r2,-40(fp)
  8028c8:	00001106 	br	802910 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  8028cc:	e13ffa17 	ldw	r4,-24(fp)
  8028d0:	e0bff617 	ldw	r2,-40(fp)
  8028d4:	117fffc4 	addi	r5,r2,-1
  8028d8:	e0fffc17 	ldw	r3,-16(fp)
  8028dc:	20801924 	muli	r2,r4,100
  8028e0:	10c5883a 	add	r2,r2,r3
  8028e4:	1145883a 	add	r2,r2,r5
  8028e8:	10801004 	addi	r2,r2,64
  8028ec:	10800003 	ldbu	r2,0(r2)
  8028f0:	10803fcc 	andi	r2,r2,255
  8028f4:	1080201c 	xori	r2,r2,128
  8028f8:	10bfe004 	addi	r2,r2,-128
  8028fc:	10800818 	cmpnei	r2,r2,32
  802900:	1000061e 	bne	r2,zero,80291c <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  802904:	e0bff617 	ldw	r2,-40(fp)
  802908:	10bfffc4 	addi	r2,r2,-1
  80290c:	e0bff615 	stw	r2,-40(fp)
  802910:	e0bff617 	ldw	r2,-40(fp)
  802914:	10800048 	cmpgei	r2,r2,1
  802918:	103fec1e 	bne	r2,zero,8028cc <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80291c:	e0bff617 	ldw	r2,-40(fp)
  802920:	10800448 	cmpgei	r2,r2,17
  802924:	1000031e 	bne	r2,zero,802934 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  802928:	00800404 	movi	r2,16
  80292c:	e0bff615 	stw	r2,-40(fp)
  802930:	00000306 	br	802940 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  802934:	e0bff617 	ldw	r2,-40(fp)
  802938:	10800044 	addi	r2,r2,1
  80293c:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  802940:	e13ffa17 	ldw	r4,-24(fp)
  802944:	e0bff617 	ldw	r2,-40(fp)
  802948:	100b883a 	mov	r5,r2
  80294c:	e0fffc17 	ldw	r3,-16(fp)
  802950:	20801924 	muli	r2,r4,100
  802954:	10c5883a 	add	r2,r2,r3
  802958:	10802404 	addi	r2,r2,144
  80295c:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  802960:	e0fff917 	ldw	r3,-28(fp)
  802964:	e0bff617 	ldw	r2,-40(fp)
  802968:	1880020e 	bge	r3,r2,802974 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  80296c:	e0bff617 	ldw	r2,-40(fp)
  802970:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  802974:	e0bffa17 	ldw	r2,-24(fp)
  802978:	e0fffc17 	ldw	r3,-16(fp)
  80297c:	10801924 	muli	r2,r2,100
  802980:	10c5883a 	add	r2,r2,r3
  802984:	10802404 	addi	r2,r2,144
  802988:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80298c:	e0bffa17 	ldw	r2,-24(fp)
  802990:	10800044 	addi	r2,r2,1
  802994:	e0bffa15 	stw	r2,-24(fp)
  802998:	e0bffa17 	ldw	r2,-24(fp)
  80299c:	10800090 	cmplti	r2,r2,2
  8029a0:	103fc71e 	bne	r2,zero,8028c0 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8029a4:	e0bff917 	ldw	r2,-28(fp)
  8029a8:	10800448 	cmpgei	r2,r2,17
  8029ac:	1000031e 	bne	r2,zero,8029bc <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  8029b0:	e0bffc17 	ldw	r2,-16(fp)
  8029b4:	10000985 	stb	zero,38(r2)
  8029b8:	00002d06 	br	802a70 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  8029bc:	e0bff917 	ldw	r2,-28(fp)
  8029c0:	1085883a 	add	r2,r2,r2
  8029c4:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  8029c8:	e0bff917 	ldw	r2,-28(fp)
  8029cc:	1007883a 	mov	r3,r2
  8029d0:	e0bffc17 	ldw	r2,-16(fp)
  8029d4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8029d8:	e03ffa15 	stw	zero,-24(fp)
  8029dc:	00002106 	br	802a64 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8029e0:	e0bffa17 	ldw	r2,-24(fp)
  8029e4:	e0fffc17 	ldw	r3,-16(fp)
  8029e8:	10801924 	muli	r2,r2,100
  8029ec:	10c5883a 	add	r2,r2,r3
  8029f0:	10802404 	addi	r2,r2,144
  8029f4:	10800043 	ldbu	r2,1(r2)
  8029f8:	10803fcc 	andi	r2,r2,255
  8029fc:	1080201c 	xori	r2,r2,128
  802a00:	10bfe004 	addi	r2,r2,-128
  802a04:	10800450 	cmplti	r2,r2,17
  802a08:	1000131e 	bne	r2,zero,802a58 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  802a0c:	e43ffa17 	ldw	r16,-24(fp)
  802a10:	e0bffa17 	ldw	r2,-24(fp)
  802a14:	e0fffc17 	ldw	r3,-16(fp)
  802a18:	10801924 	muli	r2,r2,100
  802a1c:	10c5883a 	add	r2,r2,r3
  802a20:	10802404 	addi	r2,r2,144
  802a24:	10800043 	ldbu	r2,1(r2)
  802a28:	10803fcc 	andi	r2,r2,255
  802a2c:	1080201c 	xori	r2,r2,128
  802a30:	10bfe004 	addi	r2,r2,-128
  802a34:	1008923a 	slli	r4,r2,8
  802a38:	e17ff917 	ldw	r5,-28(fp)
  802a3c:	0804d5c0 	call	804d5c <__divsi3>
  802a40:	1009883a 	mov	r4,r2
  802a44:	e0fffc17 	ldw	r3,-16(fp)
  802a48:	80801924 	muli	r2,r16,100
  802a4c:	10c5883a 	add	r2,r2,r3
  802a50:	10802404 	addi	r2,r2,144
  802a54:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  802a58:	e0bffa17 	ldw	r2,-24(fp)
  802a5c:	10800044 	addi	r2,r2,1
  802a60:	e0bffa15 	stw	r2,-24(fp)
  802a64:	e0bffa17 	ldw	r2,-24(fp)
  802a68:	10800090 	cmplti	r2,r2,2
  802a6c:	103fdc1e 	bne	r2,zero,8029e0 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  802a70:	e0bffc17 	ldw	r2,-16(fp)
  802a74:	10800943 	ldbu	r2,37(r2)
  802a78:	10803fcc 	andi	r2,r2,255
  802a7c:	1080201c 	xori	r2,r2,128
  802a80:	10bfe004 	addi	r2,r2,-128
  802a84:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  802a88:	e13ffc17 	ldw	r4,-16(fp)
  802a8c:	08020500 	call	802050 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  802a90:	e0bffc17 	ldw	r2,-16(fp)
  802a94:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  802a98:	e0bffc17 	ldw	r2,-16(fp)
  802a9c:	10800943 	ldbu	r2,37(r2)
  802aa0:	10c03fcc 	andi	r3,r2,255
  802aa4:	18c0201c 	xori	r3,r3,128
  802aa8:	18ffe004 	addi	r3,r3,-128
  802aac:	e0bff517 	ldw	r2,-44(fp)
  802ab0:	18800426 	beq	r3,r2,802ac4 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  802ab4:	e0fffc17 	ldw	r3,-16(fp)
  802ab8:	00800044 	movi	r2,1
  802abc:	188009c5 	stb	r2,39(r3)
  }
  802ac0:	003feb06 	br	802a70 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  802ac4:	e0bffe17 	ldw	r2,-8(fp)
}
  802ac8:	e037883a 	mov	sp,fp
  802acc:	dfc00217 	ldw	ra,8(sp)
  802ad0:	df000117 	ldw	fp,4(sp)
  802ad4:	dc000017 	ldw	r16,0(sp)
  802ad8:	dec00304 	addi	sp,sp,12
  802adc:	f800283a 	ret

00802ae0 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  802ae0:	defffc04 	addi	sp,sp,-16
  802ae4:	dfc00315 	stw	ra,12(sp)
  802ae8:	df000215 	stw	fp,8(sp)
  802aec:	df000204 	addi	fp,sp,8
  802af0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  802af4:	e0bfff17 	ldw	r2,-4(fp)
  802af8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  802afc:	e0bffe17 	ldw	r2,-8(fp)
  802b00:	10800943 	ldbu	r2,37(r2)
  802b04:	10803fcc 	andi	r2,r2,255
  802b08:	1080201c 	xori	r2,r2,128
  802b0c:	10bfe004 	addi	r2,r2,-128
  802b10:	10c00044 	addi	r3,r2,1
  802b14:	e0bffe17 	ldw	r2,-8(fp)
  802b18:	10800983 	ldbu	r2,38(r2)
  802b1c:	10803fcc 	andi	r2,r2,255
  802b20:	1080201c 	xori	r2,r2,128
  802b24:	10bfe004 	addi	r2,r2,-128
  802b28:	18800316 	blt	r3,r2,802b38 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  802b2c:	e0bffe17 	ldw	r2,-8(fp)
  802b30:	10000945 	stb	zero,37(r2)
  802b34:	00000606 	br	802b50 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  802b38:	e0bffe17 	ldw	r2,-8(fp)
  802b3c:	10800943 	ldbu	r2,37(r2)
  802b40:	10800044 	addi	r2,r2,1
  802b44:	1007883a 	mov	r3,r2
  802b48:	e0bffe17 	ldw	r2,-8(fp)
  802b4c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  802b50:	e0bffe17 	ldw	r2,-8(fp)
  802b54:	10800983 	ldbu	r2,38(r2)
  802b58:	10803fcc 	andi	r2,r2,255
  802b5c:	1080201c 	xori	r2,r2,128
  802b60:	10bfe004 	addi	r2,r2,-128
  802b64:	10800050 	cmplti	r2,r2,1
  802b68:	1000091e 	bne	r2,zero,802b90 <alt_lcd_16207_timeout+0xb0>
  802b6c:	e0bffe17 	ldw	r2,-8(fp)
  802b70:	108009c3 	ldbu	r2,39(r2)
  802b74:	10803fcc 	andi	r2,r2,255
  802b78:	1080201c 	xori	r2,r2,128
  802b7c:	10bfe004 	addi	r2,r2,-128
  802b80:	1004c03a 	cmpne	r2,r2,zero
  802b84:	1000021e 	bne	r2,zero,802b90 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  802b88:	e13ffe17 	ldw	r4,-8(fp)
  802b8c:	08020500 	call	802050 <lcd_repaint_screen>

  return sp->period;
  802b90:	e0bffe17 	ldw	r2,-8(fp)
  802b94:	10800717 	ldw	r2,28(r2)
}
  802b98:	e037883a 	mov	sp,fp
  802b9c:	dfc00117 	ldw	ra,4(sp)
  802ba0:	df000017 	ldw	fp,0(sp)
  802ba4:	dec00204 	addi	sp,sp,8
  802ba8:	f800283a 	ret

00802bac <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  802bac:	defffc04 	addi	sp,sp,-16
  802bb0:	dfc00315 	stw	ra,12(sp)
  802bb4:	df000215 	stw	fp,8(sp)
  802bb8:	df000204 	addi	fp,sp,8
  802bbc:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  802bc0:	e0bfff17 	ldw	r2,-4(fp)
  802bc4:	10800017 	ldw	r2,0(r2)
  802bc8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  802bcc:	e0bfff17 	ldw	r2,-4(fp)
  802bd0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  802bd4:	010ea604 	movi	r4,15000
  802bd8:	08042f40 	call	8042f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802bdc:	e0bffe17 	ldw	r2,-8(fp)
  802be0:	1007883a 	mov	r3,r2
  802be4:	00800c04 	movi	r2,48
  802be8:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  802bec:	01040104 	movi	r4,4100
  802bf0:	08042f40 	call	8042f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802bf4:	e0bffe17 	ldw	r2,-8(fp)
  802bf8:	1007883a 	mov	r3,r2
  802bfc:	00800c04 	movi	r2,48
  802c00:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  802c04:	0100fa04 	movi	r4,1000
  802c08:	08042f40 	call	8042f4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  802c0c:	e0bffe17 	ldw	r2,-8(fp)
  802c10:	1007883a 	mov	r3,r2
  802c14:	00800c04 	movi	r2,48
  802c18:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  802c1c:	e13fff17 	ldw	r4,-4(fp)
  802c20:	01400e04 	movi	r5,56
  802c24:	0801e000 	call	801e00 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  802c28:	e13fff17 	ldw	r4,-4(fp)
  802c2c:	01400204 	movi	r5,8
  802c30:	0801e000 	call	801e00 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  802c34:	e13fff17 	ldw	r4,-4(fp)
  802c38:	0801f8c0 	call	801f8c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  802c3c:	e13fff17 	ldw	r4,-4(fp)
  802c40:	01400184 	movi	r5,6
  802c44:	0801e000 	call	801e00 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  802c48:	e13fff17 	ldw	r4,-4(fp)
  802c4c:	01400304 	movi	r5,12
  802c50:	0801e000 	call	801e00 <lcd_write_command>

  sp->esccount = -1;
  802c54:	e0ffff17 	ldw	r3,-4(fp)
  802c58:	00bfffc4 	movi	r2,-1
  802c5c:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  802c60:	e0bfff17 	ldw	r2,-4(fp)
  802c64:	11000a04 	addi	r4,r2,40
  802c68:	000b883a 	mov	r5,zero
  802c6c:	01800204 	movi	r6,8
  802c70:	08048ec0 	call	8048ec <memset>

  sp->scrollpos = 0;
  802c74:	e0bfff17 	ldw	r2,-4(fp)
  802c78:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  802c7c:	e0bfff17 	ldw	r2,-4(fp)
  802c80:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  802c84:	e0bfff17 	ldw	r2,-4(fp)
  802c88:	100009c5 	stb	zero,39(r2)
  802c8c:	00802074 	movhi	r2,129
  802c90:	10a07b04 	addi	r2,r2,-32276
  802c94:	10800017 	ldw	r2,0(r2)
  802c98:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  802c9c:	01400284 	movi	r5,10
  802ca0:	0804e1c0 	call	804e1c <__udivsi3>
  802ca4:	1007883a 	mov	r3,r2
  802ca8:	e0bfff17 	ldw	r2,-4(fp)
  802cac:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  802cb0:	e0bfff17 	ldw	r2,-4(fp)
  802cb4:	11000104 	addi	r4,r2,4
  802cb8:	e0bfff17 	ldw	r2,-4(fp)
  802cbc:	10800717 	ldw	r2,28(r2)
  802cc0:	100b883a 	mov	r5,r2
  802cc4:	01802034 	movhi	r6,128
  802cc8:	318ab804 	addi	r6,r6,10976
  802ccc:	e1ffff17 	ldw	r7,-4(fp)
  802cd0:	0800e040 	call	800e04 <alt_alarm_start>
}
  802cd4:	e037883a 	mov	sp,fp
  802cd8:	dfc00117 	ldw	ra,4(sp)
  802cdc:	df000017 	ldw	fp,0(sp)
  802ce0:	dec00204 	addi	sp,sp,8
  802ce4:	f800283a 	ret

00802ce8 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  802ce8:	defffa04 	addi	sp,sp,-24
  802cec:	dfc00515 	stw	ra,20(sp)
  802cf0:	df000415 	stw	fp,16(sp)
  802cf4:	df000404 	addi	fp,sp,16
  802cf8:	e13ffd15 	stw	r4,-12(fp)
  802cfc:	e17ffe15 	stw	r5,-8(fp)
  802d00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  802d04:	e0bffd17 	ldw	r2,-12(fp)
  802d08:	10800017 	ldw	r2,0(r2)
  802d0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  802d10:	e0bffc17 	ldw	r2,-16(fp)
  802d14:	11000a04 	addi	r4,r2,40
  802d18:	e0bffd17 	ldw	r2,-12(fp)
  802d1c:	11c00217 	ldw	r7,8(r2)
  802d20:	e17ffe17 	ldw	r5,-8(fp)
  802d24:	e1bfff17 	ldw	r6,-4(fp)
  802d28:	08025d40 	call	8025d4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  802d2c:	e037883a 	mov	sp,fp
  802d30:	dfc00117 	ldw	ra,4(sp)
  802d34:	df000017 	ldw	fp,0(sp)
  802d38:	dec00204 	addi	sp,sp,8
  802d3c:	f800283a 	ret

00802d40 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  802d40:	defffa04 	addi	sp,sp,-24
  802d44:	dfc00515 	stw	ra,20(sp)
  802d48:	df000415 	stw	fp,16(sp)
  802d4c:	df000404 	addi	fp,sp,16
  802d50:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  802d54:	e0bfff17 	ldw	r2,-4(fp)
  802d58:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  802d5c:	e0bfff17 	ldw	r2,-4(fp)
  802d60:	10800104 	addi	r2,r2,4
  802d64:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802d68:	0005303a 	rdctl	r2,status
  802d6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802d70:	e0fffd17 	ldw	r3,-12(fp)
  802d74:	00bfff84 	movi	r2,-2
  802d78:	1884703a 	and	r2,r3,r2
  802d7c:	1001703a 	wrctl	status,r2
  
  return context;
  802d80:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  802d84:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  802d88:	08011480 	call	801148 <alt_tick>
  802d8c:	e0bffe17 	ldw	r2,-8(fp)
  802d90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802d94:	e0bffc17 	ldw	r2,-16(fp)
  802d98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  802d9c:	e037883a 	mov	sp,fp
  802da0:	dfc00117 	ldw	ra,4(sp)
  802da4:	df000017 	ldw	fp,0(sp)
  802da8:	dec00204 	addi	sp,sp,8
  802dac:	f800283a 	ret

00802db0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  802db0:	defff804 	addi	sp,sp,-32
  802db4:	dfc00715 	stw	ra,28(sp)
  802db8:	df000615 	stw	fp,24(sp)
  802dbc:	df000604 	addi	fp,sp,24
  802dc0:	e13ffc15 	stw	r4,-16(fp)
  802dc4:	e17ffd15 	stw	r5,-12(fp)
  802dc8:	e1bffe15 	stw	r6,-8(fp)
  802dcc:	e1ffff15 	stw	r7,-4(fp)
  802dd0:	e0bfff17 	ldw	r2,-4(fp)
  802dd4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  802dd8:	00802074 	movhi	r2,129
  802ddc:	10a07b04 	addi	r2,r2,-32276
  802de0:	10800017 	ldw	r2,0(r2)
  802de4:	1004c03a 	cmpne	r2,r2,zero
  802de8:	1000041e 	bne	r2,zero,802dfc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  802dec:	00c02074 	movhi	r3,129
  802df0:	18e07b04 	addi	r3,r3,-32276
  802df4:	e0bffb17 	ldw	r2,-20(fp)
  802df8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  802dfc:	e0bffc17 	ldw	r2,-16(fp)
  802e00:	10800104 	addi	r2,r2,4
  802e04:	1007883a 	mov	r3,r2
  802e08:	008001c4 	movi	r2,7
  802e0c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  802e10:	d8000015 	stw	zero,0(sp)
  802e14:	e13ffd17 	ldw	r4,-12(fp)
  802e18:	e17ffe17 	ldw	r5,-8(fp)
  802e1c:	01802034 	movhi	r6,128
  802e20:	318b5004 	addi	r6,r6,11584
  802e24:	e1fffc17 	ldw	r7,-16(fp)
  802e28:	0803bc80 	call	803bc8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  802e2c:	e037883a 	mov	sp,fp
  802e30:	dfc00117 	ldw	ra,4(sp)
  802e34:	df000017 	ldw	fp,0(sp)
  802e38:	dec00204 	addi	sp,sp,8
  802e3c:	f800283a 	ret

00802e40 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  802e40:	defffa04 	addi	sp,sp,-24
  802e44:	dfc00515 	stw	ra,20(sp)
  802e48:	df000415 	stw	fp,16(sp)
  802e4c:	df000404 	addi	fp,sp,16
  802e50:	e13ffd15 	stw	r4,-12(fp)
  802e54:	e17ffe15 	stw	r5,-8(fp)
  802e58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802e5c:	e0bffd17 	ldw	r2,-12(fp)
  802e60:	10800017 	ldw	r2,0(r2)
  802e64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  802e68:	e0bffc17 	ldw	r2,-16(fp)
  802e6c:	11000a04 	addi	r4,r2,40
  802e70:	e0bffd17 	ldw	r2,-12(fp)
  802e74:	11c00217 	ldw	r7,8(r2)
  802e78:	e17ffe17 	ldw	r5,-8(fp)
  802e7c:	e1bfff17 	ldw	r6,-4(fp)
  802e80:	08033380 	call	803338 <altera_avalon_uart_read>
      fd->fd_flags);
}
  802e84:	e037883a 	mov	sp,fp
  802e88:	dfc00117 	ldw	ra,4(sp)
  802e8c:	df000017 	ldw	fp,0(sp)
  802e90:	dec00204 	addi	sp,sp,8
  802e94:	f800283a 	ret

00802e98 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  802e98:	defffa04 	addi	sp,sp,-24
  802e9c:	dfc00515 	stw	ra,20(sp)
  802ea0:	df000415 	stw	fp,16(sp)
  802ea4:	df000404 	addi	fp,sp,16
  802ea8:	e13ffd15 	stw	r4,-12(fp)
  802eac:	e17ffe15 	stw	r5,-8(fp)
  802eb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802eb4:	e0bffd17 	ldw	r2,-12(fp)
  802eb8:	10800017 	ldw	r2,0(r2)
  802ebc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  802ec0:	e0bffc17 	ldw	r2,-16(fp)
  802ec4:	11000a04 	addi	r4,r2,40
  802ec8:	e0bffd17 	ldw	r2,-12(fp)
  802ecc:	11c00217 	ldw	r7,8(r2)
  802ed0:	e17ffe17 	ldw	r5,-8(fp)
  802ed4:	e1bfff17 	ldw	r6,-4(fp)
  802ed8:	08035c80 	call	8035c8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  802edc:	e037883a 	mov	sp,fp
  802ee0:	dfc00117 	ldw	ra,4(sp)
  802ee4:	df000017 	ldw	fp,0(sp)
  802ee8:	dec00204 	addi	sp,sp,8
  802eec:	f800283a 	ret

00802ef0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  802ef0:	defffc04 	addi	sp,sp,-16
  802ef4:	dfc00315 	stw	ra,12(sp)
  802ef8:	df000215 	stw	fp,8(sp)
  802efc:	df000204 	addi	fp,sp,8
  802f00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802f04:	e0bfff17 	ldw	r2,-4(fp)
  802f08:	10800017 	ldw	r2,0(r2)
  802f0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  802f10:	e0bffe17 	ldw	r2,-8(fp)
  802f14:	11000a04 	addi	r4,r2,40
  802f18:	e0bfff17 	ldw	r2,-4(fp)
  802f1c:	11400217 	ldw	r5,8(r2)
  802f20:	08032d80 	call	8032d8 <altera_avalon_uart_close>
}
  802f24:	e037883a 	mov	sp,fp
  802f28:	dfc00117 	ldw	ra,4(sp)
  802f2c:	df000017 	ldw	fp,0(sp)
  802f30:	dec00204 	addi	sp,sp,8
  802f34:	f800283a 	ret

00802f38 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  802f38:	defff704 	addi	sp,sp,-36
  802f3c:	dfc00815 	stw	ra,32(sp)
  802f40:	df000715 	stw	fp,28(sp)
  802f44:	df000704 	addi	fp,sp,28
  802f48:	e13ffc15 	stw	r4,-16(fp)
  802f4c:	e17ffd15 	stw	r5,-12(fp)
  802f50:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  802f54:	e0bffc17 	ldw	r2,-16(fp)
  802f58:	10800017 	ldw	r2,0(r2)
  802f5c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  802f60:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  802f64:	1004c03a 	cmpne	r2,r2,zero
  802f68:	1000061e 	bne	r2,zero,802f84 <altera_avalon_uart_init+0x4c>
  802f6c:	0005883a 	mov	r2,zero
  802f70:	1004c03a 	cmpne	r2,r2,zero
  802f74:	1000031e 	bne	r2,zero,802f84 <altera_avalon_uart_init+0x4c>
  802f78:	0005883a 	mov	r2,zero
  802f7c:	1005003a 	cmpeq	r2,r2,zero
  802f80:	1000031e 	bne	r2,zero,802f90 <altera_avalon_uart_init+0x58>
  802f84:	00800044 	movi	r2,1
  802f88:	e0bfff15 	stw	r2,-4(fp)
  802f8c:	00000106 	br	802f94 <altera_avalon_uart_init+0x5c>
  802f90:	e03fff15 	stw	zero,-4(fp)
  802f94:	e0bfff17 	ldw	r2,-4(fp)
  802f98:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  802f9c:	e0bffa17 	ldw	r2,-24(fp)
  802fa0:	1004c03a 	cmpne	r2,r2,zero
  802fa4:	1000111e 	bne	r2,zero,802fec <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  802fa8:	e0fffc17 	ldw	r3,-16(fp)
  802fac:	00832004 	movi	r2,3200
  802fb0:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  802fb4:	e0bffb17 	ldw	r2,-20(fp)
  802fb8:	11000304 	addi	r4,r2,12
  802fbc:	e0bffc17 	ldw	r2,-16(fp)
  802fc0:	10800117 	ldw	r2,4(r2)
  802fc4:	1007883a 	mov	r3,r2
  802fc8:	2005883a 	mov	r2,r4
  802fcc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  802fd0:	d8000015 	stw	zero,0(sp)
  802fd4:	e13ffd17 	ldw	r4,-12(fp)
  802fd8:	e17ffe17 	ldw	r5,-8(fp)
  802fdc:	01802034 	movhi	r6,128
  802fe0:	318c0004 	addi	r6,r6,12288
  802fe4:	e1fffc17 	ldw	r7,-16(fp)
  802fe8:	0803bc80 	call	803bc8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  802fec:	e037883a 	mov	sp,fp
  802ff0:	dfc00117 	ldw	ra,4(sp)
  802ff4:	df000017 	ldw	fp,0(sp)
  802ff8:	dec00204 	addi	sp,sp,8
  802ffc:	f800283a 	ret

00803000 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  803000:	defffa04 	addi	sp,sp,-24
  803004:	dfc00515 	stw	ra,20(sp)
  803008:	df000415 	stw	fp,16(sp)
  80300c:	df000404 	addi	fp,sp,16
  803010:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  803014:	e0bfff17 	ldw	r2,-4(fp)
  803018:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80301c:	e0bffd17 	ldw	r2,-12(fp)
  803020:	10800017 	ldw	r2,0(r2)
  803024:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  803028:	e0bffc17 	ldw	r2,-16(fp)
  80302c:	10800204 	addi	r2,r2,8
  803030:	10800037 	ldwio	r2,0(r2)
  803034:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  803038:	e0bffc17 	ldw	r2,-16(fp)
  80303c:	10800204 	addi	r2,r2,8
  803040:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  803044:	e0bffc17 	ldw	r2,-16(fp)
  803048:	10800204 	addi	r2,r2,8
  80304c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  803050:	e0bffe17 	ldw	r2,-8(fp)
  803054:	1080200c 	andi	r2,r2,128
  803058:	1005003a 	cmpeq	r2,r2,zero
  80305c:	1000031e 	bne	r2,zero,80306c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  803060:	e13ffd17 	ldw	r4,-12(fp)
  803064:	e17ffe17 	ldw	r5,-8(fp)
  803068:	080309c0 	call	80309c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80306c:	e0bffe17 	ldw	r2,-8(fp)
  803070:	1081100c 	andi	r2,r2,1088
  803074:	1005003a 	cmpeq	r2,r2,zero
  803078:	1000031e 	bne	r2,zero,803088 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80307c:	e13ffd17 	ldw	r4,-12(fp)
  803080:	e17ffe17 	ldw	r5,-8(fp)
  803084:	080317c0 	call	80317c <altera_avalon_uart_txirq>
  }
  

}
  803088:	e037883a 	mov	sp,fp
  80308c:	dfc00117 	ldw	ra,4(sp)
  803090:	df000017 	ldw	fp,0(sp)
  803094:	dec00204 	addi	sp,sp,8
  803098:	f800283a 	ret

0080309c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80309c:	defffc04 	addi	sp,sp,-16
  8030a0:	df000315 	stw	fp,12(sp)
  8030a4:	df000304 	addi	fp,sp,12
  8030a8:	e13ffe15 	stw	r4,-8(fp)
  8030ac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8030b0:	e0bfff17 	ldw	r2,-4(fp)
  8030b4:	108000cc 	andi	r2,r2,3
  8030b8:	1004c03a 	cmpne	r2,r2,zero
  8030bc:	10002b1e 	bne	r2,zero,80316c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8030c0:	e0bffe17 	ldw	r2,-8(fp)
  8030c4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8030c8:	e0bffe17 	ldw	r2,-8(fp)
  8030cc:	10800317 	ldw	r2,12(r2)
  8030d0:	10800044 	addi	r2,r2,1
  8030d4:	10800fcc 	andi	r2,r2,63
  8030d8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8030dc:	e0bffe17 	ldw	r2,-8(fp)
  8030e0:	11000317 	ldw	r4,12(r2)
  8030e4:	e0bffe17 	ldw	r2,-8(fp)
  8030e8:	10800017 	ldw	r2,0(r2)
  8030ec:	10800037 	ldwio	r2,0(r2)
  8030f0:	1007883a 	mov	r3,r2
  8030f4:	e0bffe17 	ldw	r2,-8(fp)
  8030f8:	2085883a 	add	r2,r4,r2
  8030fc:	10800704 	addi	r2,r2,28
  803100:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  803104:	e0fffe17 	ldw	r3,-8(fp)
  803108:	e0bffd17 	ldw	r2,-12(fp)
  80310c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  803110:	e0bffe17 	ldw	r2,-8(fp)
  803114:	10800317 	ldw	r2,12(r2)
  803118:	10800044 	addi	r2,r2,1
  80311c:	10800fcc 	andi	r2,r2,63
  803120:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  803124:	e0bffe17 	ldw	r2,-8(fp)
  803128:	10c00217 	ldw	r3,8(r2)
  80312c:	e0bffd17 	ldw	r2,-12(fp)
  803130:	18800e1e 	bne	r3,r2,80316c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  803134:	e0bffe17 	ldw	r2,-8(fp)
  803138:	10c00117 	ldw	r3,4(r2)
  80313c:	00bfdfc4 	movi	r2,-129
  803140:	1886703a 	and	r3,r3,r2
  803144:	e0bffe17 	ldw	r2,-8(fp)
  803148:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80314c:	e0bffe17 	ldw	r2,-8(fp)
  803150:	10800017 	ldw	r2,0(r2)
  803154:	11000304 	addi	r4,r2,12
  803158:	e0bffe17 	ldw	r2,-8(fp)
  80315c:	10800117 	ldw	r2,4(r2)
  803160:	1007883a 	mov	r3,r2
  803164:	2005883a 	mov	r2,r4
  803168:	10c00035 	stwio	r3,0(r2)
  }   
}
  80316c:	e037883a 	mov	sp,fp
  803170:	df000017 	ldw	fp,0(sp)
  803174:	dec00104 	addi	sp,sp,4
  803178:	f800283a 	ret

0080317c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80317c:	defffd04 	addi	sp,sp,-12
  803180:	df000215 	stw	fp,8(sp)
  803184:	df000204 	addi	fp,sp,8
  803188:	e13ffe15 	stw	r4,-8(fp)
  80318c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  803190:	e0bffe17 	ldw	r2,-8(fp)
  803194:	10c00417 	ldw	r3,16(r2)
  803198:	e0bffe17 	ldw	r2,-8(fp)
  80319c:	10800517 	ldw	r2,20(r2)
  8031a0:	18803626 	beq	r3,r2,80327c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8031a4:	e0bffe17 	ldw	r2,-8(fp)
  8031a8:	10800617 	ldw	r2,24(r2)
  8031ac:	1080008c 	andi	r2,r2,2
  8031b0:	1005003a 	cmpeq	r2,r2,zero
  8031b4:	1000041e 	bne	r2,zero,8031c8 <altera_avalon_uart_txirq+0x4c>
  8031b8:	e0bfff17 	ldw	r2,-4(fp)
  8031bc:	1082000c 	andi	r2,r2,2048
  8031c0:	1005003a 	cmpeq	r2,r2,zero
  8031c4:	10001e1e 	bne	r2,zero,803240 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8031c8:	e0bffe17 	ldw	r2,-8(fp)
  8031cc:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8031d0:	e0bffe17 	ldw	r2,-8(fp)
  8031d4:	10800017 	ldw	r2,0(r2)
  8031d8:	11000104 	addi	r4,r2,4
  8031dc:	e0bffe17 	ldw	r2,-8(fp)
  8031e0:	10c00417 	ldw	r3,16(r2)
  8031e4:	e0bffe17 	ldw	r2,-8(fp)
  8031e8:	1885883a 	add	r2,r3,r2
  8031ec:	10801704 	addi	r2,r2,92
  8031f0:	10800003 	ldbu	r2,0(r2)
  8031f4:	10c03fcc 	andi	r3,r2,255
  8031f8:	2005883a 	mov	r2,r4
  8031fc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  803200:	e0bffe17 	ldw	r2,-8(fp)
  803204:	10800417 	ldw	r2,16(r2)
  803208:	10c00044 	addi	r3,r2,1
  80320c:	e0bffe17 	ldw	r2,-8(fp)
  803210:	10c00415 	stw	r3,16(r2)
  803214:	e0bffe17 	ldw	r2,-8(fp)
  803218:	10800417 	ldw	r2,16(r2)
  80321c:	10c00fcc 	andi	r3,r2,63
  803220:	e0bffe17 	ldw	r2,-8(fp)
  803224:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  803228:	e0bffe17 	ldw	r2,-8(fp)
  80322c:	10800117 	ldw	r2,4(r2)
  803230:	10c01014 	ori	r3,r2,64
  803234:	e0bffe17 	ldw	r2,-8(fp)
  803238:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80323c:	00000f06 	br	80327c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  803240:	e0bffe17 	ldw	r2,-8(fp)
  803244:	10800017 	ldw	r2,0(r2)
  803248:	10800204 	addi	r2,r2,8
  80324c:	10800037 	ldwio	r2,0(r2)
  803250:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  803254:	e0bfff17 	ldw	r2,-4(fp)
  803258:	1082000c 	andi	r2,r2,2048
  80325c:	1004c03a 	cmpne	r2,r2,zero
  803260:	1000061e 	bne	r2,zero,80327c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  803264:	e0bffe17 	ldw	r2,-8(fp)
  803268:	10c00117 	ldw	r3,4(r2)
  80326c:	00bfefc4 	movi	r2,-65
  803270:	1886703a 	and	r3,r3,r2
  803274:	e0bffe17 	ldw	r2,-8(fp)
  803278:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80327c:	e0bffe17 	ldw	r2,-8(fp)
  803280:	10c00417 	ldw	r3,16(r2)
  803284:	e0bffe17 	ldw	r2,-8(fp)
  803288:	10800517 	ldw	r2,20(r2)
  80328c:	1880061e 	bne	r3,r2,8032a8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  803290:	e0bffe17 	ldw	r2,-8(fp)
  803294:	10c00117 	ldw	r3,4(r2)
  803298:	00beefc4 	movi	r2,-1089
  80329c:	1886703a 	and	r3,r3,r2
  8032a0:	e0bffe17 	ldw	r2,-8(fp)
  8032a4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8032a8:	e0bffe17 	ldw	r2,-8(fp)
  8032ac:	10800017 	ldw	r2,0(r2)
  8032b0:	11000304 	addi	r4,r2,12
  8032b4:	e0bffe17 	ldw	r2,-8(fp)
  8032b8:	10800117 	ldw	r2,4(r2)
  8032bc:	1007883a 	mov	r3,r2
  8032c0:	2005883a 	mov	r2,r4
  8032c4:	10c00035 	stwio	r3,0(r2)
}
  8032c8:	e037883a 	mov	sp,fp
  8032cc:	df000017 	ldw	fp,0(sp)
  8032d0:	dec00104 	addi	sp,sp,4
  8032d4:	f800283a 	ret

008032d8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8032d8:	defffc04 	addi	sp,sp,-16
  8032dc:	df000315 	stw	fp,12(sp)
  8032e0:	df000304 	addi	fp,sp,12
  8032e4:	e13ffd15 	stw	r4,-12(fp)
  8032e8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8032ec:	00000706 	br	80330c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8032f0:	e0bffe17 	ldw	r2,-8(fp)
  8032f4:	1090000c 	andi	r2,r2,16384
  8032f8:	1005003a 	cmpeq	r2,r2,zero
  8032fc:	1000031e 	bne	r2,zero,80330c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  803300:	00bffd44 	movi	r2,-11
  803304:	e0bfff15 	stw	r2,-4(fp)
  803308:	00000606 	br	803324 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80330c:	e0bffd17 	ldw	r2,-12(fp)
  803310:	10c00417 	ldw	r3,16(r2)
  803314:	e0bffd17 	ldw	r2,-12(fp)
  803318:	10800517 	ldw	r2,20(r2)
  80331c:	18bff41e 	bne	r3,r2,8032f0 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  803320:	e03fff15 	stw	zero,-4(fp)
  803324:	e0bfff17 	ldw	r2,-4(fp)
}
  803328:	e037883a 	mov	sp,fp
  80332c:	df000017 	ldw	fp,0(sp)
  803330:	dec00104 	addi	sp,sp,4
  803334:	f800283a 	ret

00803338 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  803338:	defff004 	addi	sp,sp,-64
  80333c:	dfc00f15 	stw	ra,60(sp)
  803340:	df000e15 	stw	fp,56(sp)
  803344:	df000e04 	addi	fp,sp,56
  803348:	e13ffb15 	stw	r4,-20(fp)
  80334c:	e17ffc15 	stw	r5,-16(fp)
  803350:	e1bffd15 	stw	r6,-12(fp)
  803354:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  803358:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80335c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  803360:	e0bffe17 	ldw	r2,-8(fp)
  803364:	1090000c 	andi	r2,r2,16384
  803368:	1005003a 	cmpeq	r2,r2,zero
  80336c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  803370:	e0bffb17 	ldw	r2,-20(fp)
  803374:	10800217 	ldw	r2,8(r2)
  803378:	10800044 	addi	r2,r2,1
  80337c:	10800fcc 	andi	r2,r2,63
  803380:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  803384:	00001906 	br	8033ec <altera_avalon_uart_read+0xb4>
    {
      count++;
  803388:	e0bff617 	ldw	r2,-40(fp)
  80338c:	10800044 	addi	r2,r2,1
  803390:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  803394:	e0bffb17 	ldw	r2,-20(fp)
  803398:	10c00217 	ldw	r3,8(r2)
  80339c:	e0bffb17 	ldw	r2,-20(fp)
  8033a0:	1885883a 	add	r2,r3,r2
  8033a4:	10800704 	addi	r2,r2,28
  8033a8:	10800003 	ldbu	r2,0(r2)
  8033ac:	1007883a 	mov	r3,r2
  8033b0:	e0bffc17 	ldw	r2,-16(fp)
  8033b4:	10c00005 	stb	r3,0(r2)
  8033b8:	e0bffc17 	ldw	r2,-16(fp)
  8033bc:	10800044 	addi	r2,r2,1
  8033c0:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  8033c4:	e0bffb17 	ldw	r2,-20(fp)
  8033c8:	10800217 	ldw	r2,8(r2)
  8033cc:	10c00044 	addi	r3,r2,1
  8033d0:	e0bffb17 	ldw	r2,-20(fp)
  8033d4:	10c00215 	stw	r3,8(r2)
  8033d8:	e0bffb17 	ldw	r2,-20(fp)
  8033dc:	10800217 	ldw	r2,8(r2)
  8033e0:	10c00fcc 	andi	r3,r2,63
  8033e4:	e0bffb17 	ldw	r2,-20(fp)
  8033e8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8033ec:	e0fff617 	ldw	r3,-40(fp)
  8033f0:	e0bffd17 	ldw	r2,-12(fp)
  8033f4:	1880050e 	bge	r3,r2,80340c <altera_avalon_uart_read+0xd4>
  8033f8:	e0bffb17 	ldw	r2,-20(fp)
  8033fc:	10c00217 	ldw	r3,8(r2)
  803400:	e0bffb17 	ldw	r2,-20(fp)
  803404:	10800317 	ldw	r2,12(r2)
  803408:	18bfdf1e 	bne	r3,r2,803388 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80340c:	e0bff617 	ldw	r2,-40(fp)
  803410:	1004c03a 	cmpne	r2,r2,zero
  803414:	1000271e 	bne	r2,zero,8034b4 <altera_avalon_uart_read+0x17c>
  803418:	e0bffb17 	ldw	r2,-20(fp)
  80341c:	10c00217 	ldw	r3,8(r2)
  803420:	e0bffb17 	ldw	r2,-20(fp)
  803424:	10800317 	ldw	r2,12(r2)
  803428:	1880221e 	bne	r3,r2,8034b4 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80342c:	e0bff917 	ldw	r2,-28(fp)
  803430:	1004c03a 	cmpne	r2,r2,zero
  803434:	1000061e 	bne	r2,zero,803450 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  803438:	08035680 	call	803568 <alt_get_errno>
  80343c:	00c002c4 	movi	r3,11
  803440:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  803444:	00800044 	movi	r2,1
  803448:	e0bff705 	stb	r2,-36(fp)
        break;
  80344c:	00001f06 	br	8034cc <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803450:	0005303a 	rdctl	r2,status
  803454:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803458:	e0fff517 	ldw	r3,-44(fp)
  80345c:	00bfff84 	movi	r2,-2
  803460:	1884703a 	and	r2,r3,r2
  803464:	1001703a 	wrctl	status,r2
  
  return context;
  803468:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80346c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  803470:	e0bffb17 	ldw	r2,-20(fp)
  803474:	10800117 	ldw	r2,4(r2)
  803478:	10c02014 	ori	r3,r2,128
  80347c:	e0bffb17 	ldw	r2,-20(fp)
  803480:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  803484:	e0bffb17 	ldw	r2,-20(fp)
  803488:	10800017 	ldw	r2,0(r2)
  80348c:	11000304 	addi	r4,r2,12
  803490:	e0bffb17 	ldw	r2,-20(fp)
  803494:	10800117 	ldw	r2,4(r2)
  803498:	1007883a 	mov	r3,r2
  80349c:	2005883a 	mov	r2,r4
  8034a0:	10c00035 	stwio	r3,0(r2)
  8034a4:	e0bffa17 	ldw	r2,-24(fp)
  8034a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8034ac:	e0bff417 	ldw	r2,-48(fp)
  8034b0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8034b4:	e0bff617 	ldw	r2,-40(fp)
  8034b8:	1004c03a 	cmpne	r2,r2,zero
  8034bc:	1000031e 	bne	r2,zero,8034cc <altera_avalon_uart_read+0x194>
  8034c0:	e0bffd17 	ldw	r2,-12(fp)
  8034c4:	1004c03a 	cmpne	r2,r2,zero
  8034c8:	103fc81e 	bne	r2,zero,8033ec <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8034cc:	0005303a 	rdctl	r2,status
  8034d0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8034d4:	e0fff317 	ldw	r3,-52(fp)
  8034d8:	00bfff84 	movi	r2,-2
  8034dc:	1884703a 	and	r2,r3,r2
  8034e0:	1001703a 	wrctl	status,r2
  
  return context;
  8034e4:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8034e8:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8034ec:	e0bffb17 	ldw	r2,-20(fp)
  8034f0:	10800117 	ldw	r2,4(r2)
  8034f4:	10c02014 	ori	r3,r2,128
  8034f8:	e0bffb17 	ldw	r2,-20(fp)
  8034fc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  803500:	e0bffb17 	ldw	r2,-20(fp)
  803504:	10800017 	ldw	r2,0(r2)
  803508:	11000304 	addi	r4,r2,12
  80350c:	e0bffb17 	ldw	r2,-20(fp)
  803510:	10800117 	ldw	r2,4(r2)
  803514:	1007883a 	mov	r3,r2
  803518:	2005883a 	mov	r2,r4
  80351c:	10c00035 	stwio	r3,0(r2)
  803520:	e0bffa17 	ldw	r2,-24(fp)
  803524:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803528:	e0bff217 	ldw	r2,-56(fp)
  80352c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  803530:	e0bff703 	ldbu	r2,-36(fp)
  803534:	1005003a 	cmpeq	r2,r2,zero
  803538:	1000031e 	bne	r2,zero,803548 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80353c:	00bffd04 	movi	r2,-12
  803540:	e0bfff15 	stw	r2,-4(fp)
  803544:	00000206 	br	803550 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  803548:	e0bff617 	ldw	r2,-40(fp)
  80354c:	e0bfff15 	stw	r2,-4(fp)
  803550:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  803554:	e037883a 	mov	sp,fp
  803558:	dfc00117 	ldw	ra,4(sp)
  80355c:	df000017 	ldw	fp,0(sp)
  803560:	dec00204 	addi	sp,sp,8
  803564:	f800283a 	ret

00803568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803568:	defffd04 	addi	sp,sp,-12
  80356c:	dfc00215 	stw	ra,8(sp)
  803570:	df000115 	stw	fp,4(sp)
  803574:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803578:	00802034 	movhi	r2,128
  80357c:	109a5a04 	addi	r2,r2,26984
  803580:	10800017 	ldw	r2,0(r2)
  803584:	1005003a 	cmpeq	r2,r2,zero
  803588:	1000061e 	bne	r2,zero,8035a4 <alt_get_errno+0x3c>
  80358c:	00802034 	movhi	r2,128
  803590:	109a5a04 	addi	r2,r2,26984
  803594:	10800017 	ldw	r2,0(r2)
  803598:	103ee83a 	callr	r2
  80359c:	e0bfff15 	stw	r2,-4(fp)
  8035a0:	00000306 	br	8035b0 <alt_get_errno+0x48>
  8035a4:	00802074 	movhi	r2,129
  8035a8:	10a07e04 	addi	r2,r2,-32264
  8035ac:	e0bfff15 	stw	r2,-4(fp)
  8035b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8035b4:	e037883a 	mov	sp,fp
  8035b8:	dfc00117 	ldw	ra,4(sp)
  8035bc:	df000017 	ldw	fp,0(sp)
  8035c0:	dec00204 	addi	sp,sp,8
  8035c4:	f800283a 	ret

008035c8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8035c8:	defff204 	addi	sp,sp,-56
  8035cc:	dfc00d15 	stw	ra,52(sp)
  8035d0:	df000c15 	stw	fp,48(sp)
  8035d4:	df000c04 	addi	fp,sp,48
  8035d8:	e13ffc15 	stw	r4,-16(fp)
  8035dc:	e17ffd15 	stw	r5,-12(fp)
  8035e0:	e1bffe15 	stw	r6,-8(fp)
  8035e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8035e8:	e0bffe17 	ldw	r2,-8(fp)
  8035ec:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8035f0:	e0bfff17 	ldw	r2,-4(fp)
  8035f4:	1090000c 	andi	r2,r2,16384
  8035f8:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8035fc:	00004006 	br	803700 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  803600:	e0bffc17 	ldw	r2,-16(fp)
  803604:	10800517 	ldw	r2,20(r2)
  803608:	10800044 	addi	r2,r2,1
  80360c:	10800fcc 	andi	r2,r2,63
  803610:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  803614:	e0bffc17 	ldw	r2,-16(fp)
  803618:	10c00417 	ldw	r3,16(r2)
  80361c:	e0bff917 	ldw	r2,-28(fp)
  803620:	1880251e 	bne	r3,r2,8036b8 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  803624:	e0bffa17 	ldw	r2,-24(fp)
  803628:	1005003a 	cmpeq	r2,r2,zero
  80362c:	1000051e 	bne	r2,zero,803644 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  803630:	08037900 	call	803790 <alt_get_errno>
  803634:	1007883a 	mov	r3,r2
  803638:	008002c4 	movi	r2,11
  80363c:	18800015 	stw	r2,0(r3)
        break;
  803640:	00003206 	br	80370c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803644:	0005303a 	rdctl	r2,status
  803648:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80364c:	e0fff717 	ldw	r3,-36(fp)
  803650:	00bfff84 	movi	r2,-2
  803654:	1884703a 	and	r2,r3,r2
  803658:	1001703a 	wrctl	status,r2
  
  return context;
  80365c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  803660:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  803664:	e0bffc17 	ldw	r2,-16(fp)
  803668:	10800117 	ldw	r2,4(r2)
  80366c:	10c11014 	ori	r3,r2,1088
  803670:	e0bffc17 	ldw	r2,-16(fp)
  803674:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  803678:	e0bffc17 	ldw	r2,-16(fp)
  80367c:	10800017 	ldw	r2,0(r2)
  803680:	11000304 	addi	r4,r2,12
  803684:	e0bffc17 	ldw	r2,-16(fp)
  803688:	10800117 	ldw	r2,4(r2)
  80368c:	1007883a 	mov	r3,r2
  803690:	2005883a 	mov	r2,r4
  803694:	10c00035 	stwio	r3,0(r2)
  803698:	e0bffb17 	ldw	r2,-20(fp)
  80369c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8036a0:	e0bff617 	ldw	r2,-40(fp)
  8036a4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8036a8:	e0bffc17 	ldw	r2,-16(fp)
  8036ac:	10c00417 	ldw	r3,16(r2)
  8036b0:	e0bff917 	ldw	r2,-28(fp)
  8036b4:	18bffc26 	beq	r3,r2,8036a8 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  8036b8:	e0bff817 	ldw	r2,-32(fp)
  8036bc:	10bfffc4 	addi	r2,r2,-1
  8036c0:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8036c4:	e0bffc17 	ldw	r2,-16(fp)
  8036c8:	10c00517 	ldw	r3,20(r2)
  8036cc:	e0bffd17 	ldw	r2,-12(fp)
  8036d0:	10800003 	ldbu	r2,0(r2)
  8036d4:	1009883a 	mov	r4,r2
  8036d8:	e0bffc17 	ldw	r2,-16(fp)
  8036dc:	1885883a 	add	r2,r3,r2
  8036e0:	10801704 	addi	r2,r2,92
  8036e4:	11000005 	stb	r4,0(r2)
  8036e8:	e0bffd17 	ldw	r2,-12(fp)
  8036ec:	10800044 	addi	r2,r2,1
  8036f0:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  8036f4:	e0fffc17 	ldw	r3,-16(fp)
  8036f8:	e0bff917 	ldw	r2,-28(fp)
  8036fc:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  803700:	e0bff817 	ldw	r2,-32(fp)
  803704:	1004c03a 	cmpne	r2,r2,zero
  803708:	103fbd1e 	bne	r2,zero,803600 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80370c:	0005303a 	rdctl	r2,status
  803710:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803714:	e0fff517 	ldw	r3,-44(fp)
  803718:	00bfff84 	movi	r2,-2
  80371c:	1884703a 	and	r2,r3,r2
  803720:	1001703a 	wrctl	status,r2
  
  return context;
  803724:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  803728:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80372c:	e0bffc17 	ldw	r2,-16(fp)
  803730:	10800117 	ldw	r2,4(r2)
  803734:	10c11014 	ori	r3,r2,1088
  803738:	e0bffc17 	ldw	r2,-16(fp)
  80373c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  803740:	e0bffc17 	ldw	r2,-16(fp)
  803744:	10800017 	ldw	r2,0(r2)
  803748:	11000304 	addi	r4,r2,12
  80374c:	e0bffc17 	ldw	r2,-16(fp)
  803750:	10800117 	ldw	r2,4(r2)
  803754:	1007883a 	mov	r3,r2
  803758:	2005883a 	mov	r2,r4
  80375c:	10c00035 	stwio	r3,0(r2)
  803760:	e0bffb17 	ldw	r2,-20(fp)
  803764:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803768:	e0bff417 	ldw	r2,-48(fp)
  80376c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  803770:	e0fffe17 	ldw	r3,-8(fp)
  803774:	e0bff817 	ldw	r2,-32(fp)
  803778:	1885c83a 	sub	r2,r3,r2
}
  80377c:	e037883a 	mov	sp,fp
  803780:	dfc00117 	ldw	ra,4(sp)
  803784:	df000017 	ldw	fp,0(sp)
  803788:	dec00204 	addi	sp,sp,8
  80378c:	f800283a 	ret

00803790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803790:	defffd04 	addi	sp,sp,-12
  803794:	dfc00215 	stw	ra,8(sp)
  803798:	df000115 	stw	fp,4(sp)
  80379c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8037a0:	00802034 	movhi	r2,128
  8037a4:	109a5a04 	addi	r2,r2,26984
  8037a8:	10800017 	ldw	r2,0(r2)
  8037ac:	1005003a 	cmpeq	r2,r2,zero
  8037b0:	1000061e 	bne	r2,zero,8037cc <alt_get_errno+0x3c>
  8037b4:	00802034 	movhi	r2,128
  8037b8:	109a5a04 	addi	r2,r2,26984
  8037bc:	10800017 	ldw	r2,0(r2)
  8037c0:	103ee83a 	callr	r2
  8037c4:	e0bfff15 	stw	r2,-4(fp)
  8037c8:	00000306 	br	8037d8 <alt_get_errno+0x48>
  8037cc:	00802074 	movhi	r2,129
  8037d0:	10a07e04 	addi	r2,r2,-32264
  8037d4:	e0bfff15 	stw	r2,-4(fp)
  8037d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8037dc:	e037883a 	mov	sp,fp
  8037e0:	dfc00117 	ldw	ra,4(sp)
  8037e4:	df000017 	ldw	fp,0(sp)
  8037e8:	dec00204 	addi	sp,sp,8
  8037ec:	f800283a 	ret

008037f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8037f0:	defff804 	addi	sp,sp,-32
  8037f4:	dfc00715 	stw	ra,28(sp)
  8037f8:	df000615 	stw	fp,24(sp)
  8037fc:	df000604 	addi	fp,sp,24
  803800:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  803804:	e0bffc17 	ldw	r2,-16(fp)
  803808:	1004803a 	cmplt	r2,r2,zero
  80380c:	1000081e 	bne	r2,zero,803830 <close+0x40>
  803810:	e0bffc17 	ldw	r2,-16(fp)
  803814:	10800324 	muli	r2,r2,12
  803818:	1007883a 	mov	r3,r2
  80381c:	00802034 	movhi	r2,128
  803820:	1098f204 	addi	r2,r2,25544
  803824:	1887883a 	add	r3,r3,r2
  803828:	e0ffff15 	stw	r3,-4(fp)
  80382c:	00000106 	br	803834 <close+0x44>
  803830:	e03fff15 	stw	zero,-4(fp)
  803834:	e0bfff17 	ldw	r2,-4(fp)
  803838:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80383c:	e0bffb17 	ldw	r2,-20(fp)
  803840:	1005003a 	cmpeq	r2,r2,zero
  803844:	10001d1e 	bne	r2,zero,8038bc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  803848:	e0bffb17 	ldw	r2,-20(fp)
  80384c:	10800017 	ldw	r2,0(r2)
  803850:	10800417 	ldw	r2,16(r2)
  803854:	1005003a 	cmpeq	r2,r2,zero
  803858:	1000071e 	bne	r2,zero,803878 <close+0x88>
  80385c:	e0bffb17 	ldw	r2,-20(fp)
  803860:	10800017 	ldw	r2,0(r2)
  803864:	10800417 	ldw	r2,16(r2)
  803868:	e13ffb17 	ldw	r4,-20(fp)
  80386c:	103ee83a 	callr	r2
  803870:	e0bffe15 	stw	r2,-8(fp)
  803874:	00000106 	br	80387c <close+0x8c>
  803878:	e03ffe15 	stw	zero,-8(fp)
  80387c:	e0bffe17 	ldw	r2,-8(fp)
  803880:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  803884:	e13ffc17 	ldw	r4,-16(fp)
  803888:	08042940 	call	804294 <alt_release_fd>
    if (rval < 0)
  80388c:	e0bffa17 	ldw	r2,-24(fp)
  803890:	1004403a 	cmpge	r2,r2,zero
  803894:	1000071e 	bne	r2,zero,8038b4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  803898:	08038ec0 	call	8038ec <alt_get_errno>
  80389c:	e0fffa17 	ldw	r3,-24(fp)
  8038a0:	00c7c83a 	sub	r3,zero,r3
  8038a4:	10c00015 	stw	r3,0(r2)
      return -1;
  8038a8:	00bfffc4 	movi	r2,-1
  8038ac:	e0bffd15 	stw	r2,-12(fp)
  8038b0:	00000806 	br	8038d4 <close+0xe4>
    }
    return 0;
  8038b4:	e03ffd15 	stw	zero,-12(fp)
  8038b8:	00000606 	br	8038d4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8038bc:	08038ec0 	call	8038ec <alt_get_errno>
  8038c0:	1007883a 	mov	r3,r2
  8038c4:	00801444 	movi	r2,81
  8038c8:	18800015 	stw	r2,0(r3)
    return -1;
  8038cc:	00bfffc4 	movi	r2,-1
  8038d0:	e0bffd15 	stw	r2,-12(fp)
  8038d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8038d8:	e037883a 	mov	sp,fp
  8038dc:	dfc00117 	ldw	ra,4(sp)
  8038e0:	df000017 	ldw	fp,0(sp)
  8038e4:	dec00204 	addi	sp,sp,8
  8038e8:	f800283a 	ret

008038ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8038ec:	defffd04 	addi	sp,sp,-12
  8038f0:	dfc00215 	stw	ra,8(sp)
  8038f4:	df000115 	stw	fp,4(sp)
  8038f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8038fc:	00802034 	movhi	r2,128
  803900:	109a5a04 	addi	r2,r2,26984
  803904:	10800017 	ldw	r2,0(r2)
  803908:	1005003a 	cmpeq	r2,r2,zero
  80390c:	1000061e 	bne	r2,zero,803928 <alt_get_errno+0x3c>
  803910:	00802034 	movhi	r2,128
  803914:	109a5a04 	addi	r2,r2,26984
  803918:	10800017 	ldw	r2,0(r2)
  80391c:	103ee83a 	callr	r2
  803920:	e0bfff15 	stw	r2,-4(fp)
  803924:	00000306 	br	803934 <alt_get_errno+0x48>
  803928:	00802074 	movhi	r2,129
  80392c:	10a07e04 	addi	r2,r2,-32264
  803930:	e0bfff15 	stw	r2,-4(fp)
  803934:	e0bfff17 	ldw	r2,-4(fp)
}
  803938:	e037883a 	mov	sp,fp
  80393c:	dfc00117 	ldw	ra,4(sp)
  803940:	df000017 	ldw	fp,0(sp)
  803944:	dec00204 	addi	sp,sp,8
  803948:	f800283a 	ret

0080394c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80394c:	defffe04 	addi	sp,sp,-8
  803950:	df000115 	stw	fp,4(sp)
  803954:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  803958:	e03fff15 	stw	zero,-4(fp)
  80395c:	00000506 	br	803974 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  803960:	e0bfff17 	ldw	r2,-4(fp)
  803964:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  803968:	e0bfff17 	ldw	r2,-4(fp)
  80396c:	10800804 	addi	r2,r2,32
  803970:	e0bfff15 	stw	r2,-4(fp)
  803974:	e0bfff17 	ldw	r2,-4(fp)
  803978:	10820030 	cmpltui	r2,r2,2048
  80397c:	103ff81e 	bne	r2,zero,803960 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  803980:	e037883a 	mov	sp,fp
  803984:	df000017 	ldw	fp,0(sp)
  803988:	dec00104 	addi	sp,sp,4
  80398c:	f800283a 	ret

00803990 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  803990:	defffc04 	addi	sp,sp,-16
  803994:	df000315 	stw	fp,12(sp)
  803998:	df000304 	addi	fp,sp,12
  80399c:	e13ffd15 	stw	r4,-12(fp)
  8039a0:	e17ffe15 	stw	r5,-8(fp)
  8039a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8039a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8039ac:	e037883a 	mov	sp,fp
  8039b0:	df000017 	ldw	fp,0(sp)
  8039b4:	dec00104 	addi	sp,sp,4
  8039b8:	f800283a 	ret

008039bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8039bc:	defff904 	addi	sp,sp,-28
  8039c0:	dfc00615 	stw	ra,24(sp)
  8039c4:	df000515 	stw	fp,20(sp)
  8039c8:	df000504 	addi	fp,sp,20
  8039cc:	e13ffd15 	stw	r4,-12(fp)
  8039d0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8039d4:	e0bffd17 	ldw	r2,-12(fp)
  8039d8:	1005003a 	cmpeq	r2,r2,zero
  8039dc:	1000041e 	bne	r2,zero,8039f0 <alt_dev_llist_insert+0x34>
  8039e0:	e0bffd17 	ldw	r2,-12(fp)
  8039e4:	10800217 	ldw	r2,8(r2)
  8039e8:	1004c03a 	cmpne	r2,r2,zero
  8039ec:	1000071e 	bne	r2,zero,803a0c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8039f0:	0803a700 	call	803a70 <alt_get_errno>
  8039f4:	1007883a 	mov	r3,r2
  8039f8:	00800584 	movi	r2,22
  8039fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  803a00:	00bffa84 	movi	r2,-22
  803a04:	e0bfff15 	stw	r2,-4(fp)
  803a08:	00001306 	br	803a58 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  803a0c:	e0fffd17 	ldw	r3,-12(fp)
  803a10:	e0bffe17 	ldw	r2,-8(fp)
  803a14:	e0bffb15 	stw	r2,-20(fp)
  803a18:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803a1c:	e0fffc17 	ldw	r3,-16(fp)
  803a20:	e0bffb17 	ldw	r2,-20(fp)
  803a24:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  803a28:	e0bffb17 	ldw	r2,-20(fp)
  803a2c:	10c00017 	ldw	r3,0(r2)
  803a30:	e0bffc17 	ldw	r2,-16(fp)
  803a34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  803a38:	e0bffb17 	ldw	r2,-20(fp)
  803a3c:	10c00017 	ldw	r3,0(r2)
  803a40:	e0bffc17 	ldw	r2,-16(fp)
  803a44:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  803a48:	e0fffb17 	ldw	r3,-20(fp)
  803a4c:	e0bffc17 	ldw	r2,-16(fp)
  803a50:	18800015 	stw	r2,0(r3)

  return 0;  
  803a54:	e03fff15 	stw	zero,-4(fp)
  803a58:	e0bfff17 	ldw	r2,-4(fp)
}
  803a5c:	e037883a 	mov	sp,fp
  803a60:	dfc00117 	ldw	ra,4(sp)
  803a64:	df000017 	ldw	fp,0(sp)
  803a68:	dec00204 	addi	sp,sp,8
  803a6c:	f800283a 	ret

00803a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  803a70:	defffd04 	addi	sp,sp,-12
  803a74:	dfc00215 	stw	ra,8(sp)
  803a78:	df000115 	stw	fp,4(sp)
  803a7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  803a80:	00802034 	movhi	r2,128
  803a84:	109a5a04 	addi	r2,r2,26984
  803a88:	10800017 	ldw	r2,0(r2)
  803a8c:	1005003a 	cmpeq	r2,r2,zero
  803a90:	1000061e 	bne	r2,zero,803aac <alt_get_errno+0x3c>
  803a94:	00802034 	movhi	r2,128
  803a98:	109a5a04 	addi	r2,r2,26984
  803a9c:	10800017 	ldw	r2,0(r2)
  803aa0:	103ee83a 	callr	r2
  803aa4:	e0bfff15 	stw	r2,-4(fp)
  803aa8:	00000306 	br	803ab8 <alt_get_errno+0x48>
  803aac:	00802074 	movhi	r2,129
  803ab0:	10a07e04 	addi	r2,r2,-32264
  803ab4:	e0bfff15 	stw	r2,-4(fp)
  803ab8:	e0bfff17 	ldw	r2,-4(fp)
}
  803abc:	e037883a 	mov	sp,fp
  803ac0:	dfc00117 	ldw	ra,4(sp)
  803ac4:	df000017 	ldw	fp,0(sp)
  803ac8:	dec00204 	addi	sp,sp,8
  803acc:	f800283a 	ret

00803ad0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  803ad0:	defffd04 	addi	sp,sp,-12
  803ad4:	dfc00215 	stw	ra,8(sp)
  803ad8:	df000115 	stw	fp,4(sp)
  803adc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  803ae0:	00bfff04 	movi	r2,-4
  803ae4:	00c02034 	movhi	r3,128
  803ae8:	18d3a404 	addi	r3,r3,20112
  803aec:	1885883a 	add	r2,r3,r2
  803af0:	e0bfff15 	stw	r2,-4(fp)
  803af4:	00000606 	br	803b10 <_do_ctors+0x40>
        (*ctor) (); 
  803af8:	e0bfff17 	ldw	r2,-4(fp)
  803afc:	10800017 	ldw	r2,0(r2)
  803b00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  803b04:	e0bfff17 	ldw	r2,-4(fp)
  803b08:	10bfff04 	addi	r2,r2,-4
  803b0c:	e0bfff15 	stw	r2,-4(fp)
  803b10:	e0ffff17 	ldw	r3,-4(fp)
  803b14:	00802034 	movhi	r2,128
  803b18:	1093a304 	addi	r2,r2,20108
  803b1c:	18bff62e 	bgeu	r3,r2,803af8 <_do_ctors+0x28>
        (*ctor) (); 
}
  803b20:	e037883a 	mov	sp,fp
  803b24:	dfc00117 	ldw	ra,4(sp)
  803b28:	df000017 	ldw	fp,0(sp)
  803b2c:	dec00204 	addi	sp,sp,8
  803b30:	f800283a 	ret

00803b34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  803b34:	defffd04 	addi	sp,sp,-12
  803b38:	dfc00215 	stw	ra,8(sp)
  803b3c:	df000115 	stw	fp,4(sp)
  803b40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  803b44:	00bfff04 	movi	r2,-4
  803b48:	00c02034 	movhi	r3,128
  803b4c:	18d3a404 	addi	r3,r3,20112
  803b50:	1885883a 	add	r2,r3,r2
  803b54:	e0bfff15 	stw	r2,-4(fp)
  803b58:	00000606 	br	803b74 <_do_dtors+0x40>
        (*dtor) (); 
  803b5c:	e0bfff17 	ldw	r2,-4(fp)
  803b60:	10800017 	ldw	r2,0(r2)
  803b64:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  803b68:	e0bfff17 	ldw	r2,-4(fp)
  803b6c:	10bfff04 	addi	r2,r2,-4
  803b70:	e0bfff15 	stw	r2,-4(fp)
  803b74:	e0ffff17 	ldw	r3,-4(fp)
  803b78:	00802034 	movhi	r2,128
  803b7c:	1093a404 	addi	r2,r2,20112
  803b80:	18bff62e 	bgeu	r3,r2,803b5c <_do_dtors+0x28>
        (*dtor) (); 
}
  803b84:	e037883a 	mov	sp,fp
  803b88:	dfc00117 	ldw	ra,4(sp)
  803b8c:	df000017 	ldw	fp,0(sp)
  803b90:	dec00204 	addi	sp,sp,8
  803b94:	f800283a 	ret

00803b98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  803b98:	defffe04 	addi	sp,sp,-8
  803b9c:	dfc00115 	stw	ra,4(sp)
  803ba0:	df000015 	stw	fp,0(sp)
  803ba4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  803ba8:	0009883a 	mov	r4,zero
  803bac:	01440004 	movi	r5,4096
  803bb0:	08046fc0 	call	8046fc <alt_icache_flush>
#endif
}
  803bb4:	e037883a 	mov	sp,fp
  803bb8:	dfc00117 	ldw	ra,4(sp)
  803bbc:	df000017 	ldw	fp,0(sp)
  803bc0:	dec00204 	addi	sp,sp,8
  803bc4:	f800283a 	ret

00803bc8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803bc8:	defff904 	addi	sp,sp,-28
  803bcc:	dfc00615 	stw	ra,24(sp)
  803bd0:	df000515 	stw	fp,20(sp)
  803bd4:	df000504 	addi	fp,sp,20
  803bd8:	e13ffc15 	stw	r4,-16(fp)
  803bdc:	e17ffd15 	stw	r5,-12(fp)
  803be0:	e1bffe15 	stw	r6,-8(fp)
  803be4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  803be8:	e0800217 	ldw	r2,8(fp)
  803bec:	d8800015 	stw	r2,0(sp)
  803bf0:	e13ffc17 	ldw	r4,-16(fp)
  803bf4:	e17ffd17 	ldw	r5,-12(fp)
  803bf8:	e1bffe17 	ldw	r6,-8(fp)
  803bfc:	e1ffff17 	ldw	r7,-4(fp)
  803c00:	0803d9c0 	call	803d9c <alt_iic_isr_register>
}  
  803c04:	e037883a 	mov	sp,fp
  803c08:	dfc00117 	ldw	ra,4(sp)
  803c0c:	df000017 	ldw	fp,0(sp)
  803c10:	dec00204 	addi	sp,sp,8
  803c14:	f800283a 	ret

00803c18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  803c18:	defff904 	addi	sp,sp,-28
  803c1c:	df000615 	stw	fp,24(sp)
  803c20:	df000604 	addi	fp,sp,24
  803c24:	e13ffe15 	stw	r4,-8(fp)
  803c28:	e17fff15 	stw	r5,-4(fp)
  803c2c:	e0bfff17 	ldw	r2,-4(fp)
  803c30:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803c34:	0005303a 	rdctl	r2,status
  803c38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803c3c:	e0fffb17 	ldw	r3,-20(fp)
  803c40:	00bfff84 	movi	r2,-2
  803c44:	1884703a 	and	r2,r3,r2
  803c48:	1001703a 	wrctl	status,r2
  
  return context;
  803c4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803c50:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  803c54:	e0fffc17 	ldw	r3,-16(fp)
  803c58:	00800044 	movi	r2,1
  803c5c:	10c4983a 	sll	r2,r2,r3
  803c60:	1007883a 	mov	r3,r2
  803c64:	00802074 	movhi	r2,129
  803c68:	10a07d04 	addi	r2,r2,-32268
  803c6c:	10800017 	ldw	r2,0(r2)
  803c70:	1886b03a 	or	r3,r3,r2
  803c74:	00802074 	movhi	r2,129
  803c78:	10a07d04 	addi	r2,r2,-32268
  803c7c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803c80:	00802074 	movhi	r2,129
  803c84:	10a07d04 	addi	r2,r2,-32268
  803c88:	10800017 	ldw	r2,0(r2)
  803c8c:	100170fa 	wrctl	ienable,r2
  803c90:	e0bffd17 	ldw	r2,-12(fp)
  803c94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803c98:	e0bffa17 	ldw	r2,-24(fp)
  803c9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803ca0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  803ca4:	e037883a 	mov	sp,fp
  803ca8:	df000017 	ldw	fp,0(sp)
  803cac:	dec00104 	addi	sp,sp,4
  803cb0:	f800283a 	ret

00803cb4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  803cb4:	defff904 	addi	sp,sp,-28
  803cb8:	df000615 	stw	fp,24(sp)
  803cbc:	df000604 	addi	fp,sp,24
  803cc0:	e13ffe15 	stw	r4,-8(fp)
  803cc4:	e17fff15 	stw	r5,-4(fp)
  803cc8:	e0bfff17 	ldw	r2,-4(fp)
  803ccc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803cd0:	0005303a 	rdctl	r2,status
  803cd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803cd8:	e0fffb17 	ldw	r3,-20(fp)
  803cdc:	00bfff84 	movi	r2,-2
  803ce0:	1884703a 	and	r2,r3,r2
  803ce4:	1001703a 	wrctl	status,r2
  
  return context;
  803ce8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  803cec:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  803cf0:	e0fffc17 	ldw	r3,-16(fp)
  803cf4:	00800044 	movi	r2,1
  803cf8:	10c4983a 	sll	r2,r2,r3
  803cfc:	0084303a 	nor	r2,zero,r2
  803d00:	1007883a 	mov	r3,r2
  803d04:	00802074 	movhi	r2,129
  803d08:	10a07d04 	addi	r2,r2,-32268
  803d0c:	10800017 	ldw	r2,0(r2)
  803d10:	1886703a 	and	r3,r3,r2
  803d14:	00802074 	movhi	r2,129
  803d18:	10a07d04 	addi	r2,r2,-32268
  803d1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  803d20:	00802074 	movhi	r2,129
  803d24:	10a07d04 	addi	r2,r2,-32268
  803d28:	10800017 	ldw	r2,0(r2)
  803d2c:	100170fa 	wrctl	ienable,r2
  803d30:	e0bffd17 	ldw	r2,-12(fp)
  803d34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803d38:	e0bffa17 	ldw	r2,-24(fp)
  803d3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  803d40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  803d44:	e037883a 	mov	sp,fp
  803d48:	df000017 	ldw	fp,0(sp)
  803d4c:	dec00104 	addi	sp,sp,4
  803d50:	f800283a 	ret

00803d54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  803d54:	defffc04 	addi	sp,sp,-16
  803d58:	df000315 	stw	fp,12(sp)
  803d5c:	df000304 	addi	fp,sp,12
  803d60:	e13ffe15 	stw	r4,-8(fp)
  803d64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  803d68:	000530fa 	rdctl	r2,ienable
  803d6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  803d70:	e0ffff17 	ldw	r3,-4(fp)
  803d74:	00800044 	movi	r2,1
  803d78:	10c4983a 	sll	r2,r2,r3
  803d7c:	1007883a 	mov	r3,r2
  803d80:	e0bffd17 	ldw	r2,-12(fp)
  803d84:	1884703a 	and	r2,r3,r2
  803d88:	1004c03a 	cmpne	r2,r2,zero
}
  803d8c:	e037883a 	mov	sp,fp
  803d90:	df000017 	ldw	fp,0(sp)
  803d94:	dec00104 	addi	sp,sp,4
  803d98:	f800283a 	ret

00803d9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  803d9c:	defff404 	addi	sp,sp,-48
  803da0:	dfc00b15 	stw	ra,44(sp)
  803da4:	df000a15 	stw	fp,40(sp)
  803da8:	df000a04 	addi	fp,sp,40
  803dac:	e13ffb15 	stw	r4,-20(fp)
  803db0:	e17ffc15 	stw	r5,-16(fp)
  803db4:	e1bffd15 	stw	r6,-12(fp)
  803db8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  803dbc:	00bffa84 	movi	r2,-22
  803dc0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  803dc4:	e0bffc17 	ldw	r2,-16(fp)
  803dc8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  803dcc:	e0bff917 	ldw	r2,-28(fp)
  803dd0:	10800808 	cmpgei	r2,r2,32
  803dd4:	1000291e 	bne	r2,zero,803e7c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803dd8:	0005303a 	rdctl	r2,status
  803ddc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803de0:	e0fff717 	ldw	r3,-36(fp)
  803de4:	00bfff84 	movi	r2,-2
  803de8:	1884703a 	and	r2,r3,r2
  803dec:	1001703a 	wrctl	status,r2
  
  return context;
  803df0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  803df4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  803df8:	e0bff917 	ldw	r2,-28(fp)
  803dfc:	00c02074 	movhi	r3,129
  803e00:	18e0a304 	addi	r3,r3,-32116
  803e04:	100490fa 	slli	r2,r2,3
  803e08:	10c7883a 	add	r3,r2,r3
  803e0c:	e0bffd17 	ldw	r2,-12(fp)
  803e10:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  803e14:	e0bff917 	ldw	r2,-28(fp)
  803e18:	00c02074 	movhi	r3,129
  803e1c:	18e0a304 	addi	r3,r3,-32116
  803e20:	100490fa 	slli	r2,r2,3
  803e24:	10c5883a 	add	r2,r2,r3
  803e28:	10c00104 	addi	r3,r2,4
  803e2c:	e0bffe17 	ldw	r2,-8(fp)
  803e30:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  803e34:	e0bffd17 	ldw	r2,-12(fp)
  803e38:	1005003a 	cmpeq	r2,r2,zero
  803e3c:	1000051e 	bne	r2,zero,803e54 <alt_iic_isr_register+0xb8>
  803e40:	e17ff917 	ldw	r5,-28(fp)
  803e44:	e13ffb17 	ldw	r4,-20(fp)
  803e48:	0803c180 	call	803c18 <alt_ic_irq_enable>
  803e4c:	e0bfff15 	stw	r2,-4(fp)
  803e50:	00000406 	br	803e64 <alt_iic_isr_register+0xc8>
  803e54:	e17ff917 	ldw	r5,-28(fp)
  803e58:	e13ffb17 	ldw	r4,-20(fp)
  803e5c:	0803cb40 	call	803cb4 <alt_ic_irq_disable>
  803e60:	e0bfff15 	stw	r2,-4(fp)
  803e64:	e0bfff17 	ldw	r2,-4(fp)
  803e68:	e0bffa15 	stw	r2,-24(fp)
  803e6c:	e0bff817 	ldw	r2,-32(fp)
  803e70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803e74:	e0bff617 	ldw	r2,-40(fp)
  803e78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  803e7c:	e0bffa17 	ldw	r2,-24(fp)
}
  803e80:	e037883a 	mov	sp,fp
  803e84:	dfc00117 	ldw	ra,4(sp)
  803e88:	df000017 	ldw	fp,0(sp)
  803e8c:	dec00204 	addi	sp,sp,8
  803e90:	f800283a 	ret

00803e94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  803e94:	defff904 	addi	sp,sp,-28
  803e98:	dfc00615 	stw	ra,24(sp)
  803e9c:	df000515 	stw	fp,20(sp)
  803ea0:	df000504 	addi	fp,sp,20
  803ea4:	e13ffc15 	stw	r4,-16(fp)
  803ea8:	e17ffd15 	stw	r5,-12(fp)
  803eac:	e1bffe15 	stw	r6,-8(fp)
  803eb0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  803eb4:	e13ffd17 	ldw	r4,-12(fp)
  803eb8:	e17ffe17 	ldw	r5,-8(fp)
  803ebc:	e1bfff17 	ldw	r6,-4(fp)
  803ec0:	08040ac0 	call	8040ac <open>
  803ec4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  803ec8:	e0bffb17 	ldw	r2,-20(fp)
  803ecc:	1004803a 	cmplt	r2,r2,zero
  803ed0:	10001c1e 	bne	r2,zero,803f44 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  803ed4:	e0bffb17 	ldw	r2,-20(fp)
  803ed8:	00c02034 	movhi	r3,128
  803edc:	18d8f204 	addi	r3,r3,25544
  803ee0:	10800324 	muli	r2,r2,12
  803ee4:	10c5883a 	add	r2,r2,r3
  803ee8:	10c00017 	ldw	r3,0(r2)
  803eec:	e0bffc17 	ldw	r2,-16(fp)
  803ef0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  803ef4:	e0bffb17 	ldw	r2,-20(fp)
  803ef8:	00c02034 	movhi	r3,128
  803efc:	18d8f204 	addi	r3,r3,25544
  803f00:	10800324 	muli	r2,r2,12
  803f04:	10c5883a 	add	r2,r2,r3
  803f08:	10800104 	addi	r2,r2,4
  803f0c:	10c00017 	ldw	r3,0(r2)
  803f10:	e0bffc17 	ldw	r2,-16(fp)
  803f14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  803f18:	e0bffb17 	ldw	r2,-20(fp)
  803f1c:	00c02034 	movhi	r3,128
  803f20:	18d8f204 	addi	r3,r3,25544
  803f24:	10800324 	muli	r2,r2,12
  803f28:	10c5883a 	add	r2,r2,r3
  803f2c:	10800204 	addi	r2,r2,8
  803f30:	10c00017 	ldw	r3,0(r2)
  803f34:	e0bffc17 	ldw	r2,-16(fp)
  803f38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  803f3c:	e13ffb17 	ldw	r4,-20(fp)
  803f40:	08042940 	call	804294 <alt_release_fd>
  }
} 
  803f44:	e037883a 	mov	sp,fp
  803f48:	dfc00117 	ldw	ra,4(sp)
  803f4c:	df000017 	ldw	fp,0(sp)
  803f50:	dec00204 	addi	sp,sp,8
  803f54:	f800283a 	ret

00803f58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  803f58:	defffb04 	addi	sp,sp,-20
  803f5c:	dfc00415 	stw	ra,16(sp)
  803f60:	df000315 	stw	fp,12(sp)
  803f64:	df000304 	addi	fp,sp,12
  803f68:	e13ffd15 	stw	r4,-12(fp)
  803f6c:	e17ffe15 	stw	r5,-8(fp)
  803f70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  803f74:	01002034 	movhi	r4,128
  803f78:	2118f504 	addi	r4,r4,25556
  803f7c:	e17ffd17 	ldw	r5,-12(fp)
  803f80:	01800044 	movi	r6,1
  803f84:	01c07fc4 	movi	r7,511
  803f88:	0803e940 	call	803e94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  803f8c:	01002034 	movhi	r4,128
  803f90:	2118f204 	addi	r4,r4,25544
  803f94:	e17ffe17 	ldw	r5,-8(fp)
  803f98:	000d883a 	mov	r6,zero
  803f9c:	01c07fc4 	movi	r7,511
  803fa0:	0803e940 	call	803e94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  803fa4:	01002034 	movhi	r4,128
  803fa8:	2118f804 	addi	r4,r4,25568
  803fac:	e17fff17 	ldw	r5,-4(fp)
  803fb0:	01800044 	movi	r6,1
  803fb4:	01c07fc4 	movi	r7,511
  803fb8:	0803e940 	call	803e94 <alt_open_fd>
}  
  803fbc:	e037883a 	mov	sp,fp
  803fc0:	dfc00117 	ldw	ra,4(sp)
  803fc4:	df000017 	ldw	fp,0(sp)
  803fc8:	dec00204 	addi	sp,sp,8
  803fcc:	f800283a 	ret

00803fd0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803fd0:	defffc04 	addi	sp,sp,-16
  803fd4:	df000315 	stw	fp,12(sp)
  803fd8:	df000304 	addi	fp,sp,12
  803fdc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803fe0:	e0bffe17 	ldw	r2,-8(fp)
  803fe4:	10800217 	ldw	r2,8(r2)
  803fe8:	10d00034 	orhi	r3,r2,16384
  803fec:	e0bffe17 	ldw	r2,-8(fp)
  803ff0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803ff4:	e03ffd15 	stw	zero,-12(fp)
  803ff8:	00002006 	br	80407c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803ffc:	e0bffd17 	ldw	r2,-12(fp)
  804000:	00c02034 	movhi	r3,128
  804004:	18d8f204 	addi	r3,r3,25544
  804008:	10800324 	muli	r2,r2,12
  80400c:	10c5883a 	add	r2,r2,r3
  804010:	10c00017 	ldw	r3,0(r2)
  804014:	e0bffe17 	ldw	r2,-8(fp)
  804018:	10800017 	ldw	r2,0(r2)
  80401c:	1880141e 	bne	r3,r2,804070 <alt_file_locked+0xa0>
  804020:	e0bffd17 	ldw	r2,-12(fp)
  804024:	00c02034 	movhi	r3,128
  804028:	18d8f204 	addi	r3,r3,25544
  80402c:	10800324 	muli	r2,r2,12
  804030:	10c5883a 	add	r2,r2,r3
  804034:	10800204 	addi	r2,r2,8
  804038:	10800017 	ldw	r2,0(r2)
  80403c:	1004403a 	cmpge	r2,r2,zero
  804040:	10000b1e 	bne	r2,zero,804070 <alt_file_locked+0xa0>
  804044:	e0bffd17 	ldw	r2,-12(fp)
  804048:	10800324 	muli	r2,r2,12
  80404c:	1007883a 	mov	r3,r2
  804050:	00802034 	movhi	r2,128
  804054:	1098f204 	addi	r2,r2,25544
  804058:	1887883a 	add	r3,r3,r2
  80405c:	e0bffe17 	ldw	r2,-8(fp)
  804060:	18800326 	beq	r3,r2,804070 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804064:	00bffcc4 	movi	r2,-13
  804068:	e0bfff15 	stw	r2,-4(fp)
  80406c:	00000a06 	br	804098 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804070:	e0bffd17 	ldw	r2,-12(fp)
  804074:	10800044 	addi	r2,r2,1
  804078:	e0bffd15 	stw	r2,-12(fp)
  80407c:	00802034 	movhi	r2,128
  804080:	109a5904 	addi	r2,r2,26980
  804084:	10800017 	ldw	r2,0(r2)
  804088:	1007883a 	mov	r3,r2
  80408c:	e0bffd17 	ldw	r2,-12(fp)
  804090:	18bfda2e 	bgeu	r3,r2,803ffc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804094:	e03fff15 	stw	zero,-4(fp)
  804098:	e0bfff17 	ldw	r2,-4(fp)
}
  80409c:	e037883a 	mov	sp,fp
  8040a0:	df000017 	ldw	fp,0(sp)
  8040a4:	dec00104 	addi	sp,sp,4
  8040a8:	f800283a 	ret

008040ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8040ac:	defff404 	addi	sp,sp,-48
  8040b0:	dfc00b15 	stw	ra,44(sp)
  8040b4:	df000a15 	stw	fp,40(sp)
  8040b8:	df000a04 	addi	fp,sp,40
  8040bc:	e13ffb15 	stw	r4,-20(fp)
  8040c0:	e17ffc15 	stw	r5,-16(fp)
  8040c4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8040c8:	00bfffc4 	movi	r2,-1
  8040cc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8040d0:	00bffb44 	movi	r2,-19
  8040d4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8040d8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8040dc:	e13ffb17 	ldw	r4,-20(fp)
  8040e0:	01402034 	movhi	r5,128
  8040e4:	295a5704 	addi	r5,r5,26972
  8040e8:	08044900 	call	804490 <alt_find_dev>
  8040ec:	e0bffa15 	stw	r2,-24(fp)
  8040f0:	e0bffa17 	ldw	r2,-24(fp)
  8040f4:	1004c03a 	cmpne	r2,r2,zero
  8040f8:	1000051e 	bne	r2,zero,804110 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8040fc:	e13ffb17 	ldw	r4,-20(fp)
  804100:	08045240 	call	804524 <alt_find_file>
  804104:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  804108:	00800044 	movi	r2,1
  80410c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804110:	e0bffa17 	ldw	r2,-24(fp)
  804114:	1005003a 	cmpeq	r2,r2,zero
  804118:	1000301e 	bne	r2,zero,8041dc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80411c:	e13ffa17 	ldw	r4,-24(fp)
  804120:	08046440 	call	804644 <alt_get_fd>
  804124:	e0bff815 	stw	r2,-32(fp)
  804128:	e0bff817 	ldw	r2,-32(fp)
  80412c:	1004403a 	cmpge	r2,r2,zero
  804130:	1000031e 	bne	r2,zero,804140 <open+0x94>
    {
      status = index;
  804134:	e0bff817 	ldw	r2,-32(fp)
  804138:	e0bff715 	stw	r2,-36(fp)
  80413c:	00002906 	br	8041e4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  804140:	e0bff817 	ldw	r2,-32(fp)
  804144:	10800324 	muli	r2,r2,12
  804148:	1007883a 	mov	r3,r2
  80414c:	00802034 	movhi	r2,128
  804150:	1098f204 	addi	r2,r2,25544
  804154:	1885883a 	add	r2,r3,r2
  804158:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80415c:	e0fffc17 	ldw	r3,-16(fp)
  804160:	00900034 	movhi	r2,16384
  804164:	10bfffc4 	addi	r2,r2,-1
  804168:	1886703a 	and	r3,r3,r2
  80416c:	e0bff917 	ldw	r2,-28(fp)
  804170:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804174:	e0bff617 	ldw	r2,-40(fp)
  804178:	1004c03a 	cmpne	r2,r2,zero
  80417c:	1000061e 	bne	r2,zero,804198 <open+0xec>
  804180:	e13ff917 	ldw	r4,-28(fp)
  804184:	0803fd00 	call	803fd0 <alt_file_locked>
  804188:	e0bff715 	stw	r2,-36(fp)
  80418c:	e0bff717 	ldw	r2,-36(fp)
  804190:	1004803a 	cmplt	r2,r2,zero
  804194:	1000131e 	bne	r2,zero,8041e4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804198:	e0bffa17 	ldw	r2,-24(fp)
  80419c:	10800317 	ldw	r2,12(r2)
  8041a0:	1005003a 	cmpeq	r2,r2,zero
  8041a4:	1000091e 	bne	r2,zero,8041cc <open+0x120>
  8041a8:	e0bffa17 	ldw	r2,-24(fp)
  8041ac:	10800317 	ldw	r2,12(r2)
  8041b0:	e13ff917 	ldw	r4,-28(fp)
  8041b4:	e17ffb17 	ldw	r5,-20(fp)
  8041b8:	e1bffc17 	ldw	r6,-16(fp)
  8041bc:	e1fffd17 	ldw	r7,-12(fp)
  8041c0:	103ee83a 	callr	r2
  8041c4:	e0bfff15 	stw	r2,-4(fp)
  8041c8:	00000106 	br	8041d0 <open+0x124>
  8041cc:	e03fff15 	stw	zero,-4(fp)
  8041d0:	e0bfff17 	ldw	r2,-4(fp)
  8041d4:	e0bff715 	stw	r2,-36(fp)
  8041d8:	00000206 	br	8041e4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8041dc:	00bffb44 	movi	r2,-19
  8041e0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8041e4:	e0bff717 	ldw	r2,-36(fp)
  8041e8:	1004403a 	cmpge	r2,r2,zero
  8041ec:	1000091e 	bne	r2,zero,804214 <open+0x168>
  {
    alt_release_fd (index);  
  8041f0:	e13ff817 	ldw	r4,-32(fp)
  8041f4:	08042940 	call	804294 <alt_release_fd>
    ALT_ERRNO = -status;
  8041f8:	08042340 	call	804234 <alt_get_errno>
  8041fc:	e0fff717 	ldw	r3,-36(fp)
  804200:	00c7c83a 	sub	r3,zero,r3
  804204:	10c00015 	stw	r3,0(r2)
    return -1;
  804208:	00bfffc4 	movi	r2,-1
  80420c:	e0bffe15 	stw	r2,-8(fp)
  804210:	00000206 	br	80421c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  804214:	e0bff817 	ldw	r2,-32(fp)
  804218:	e0bffe15 	stw	r2,-8(fp)
  80421c:	e0bffe17 	ldw	r2,-8(fp)
}
  804220:	e037883a 	mov	sp,fp
  804224:	dfc00117 	ldw	ra,4(sp)
  804228:	df000017 	ldw	fp,0(sp)
  80422c:	dec00204 	addi	sp,sp,8
  804230:	f800283a 	ret

00804234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804234:	defffd04 	addi	sp,sp,-12
  804238:	dfc00215 	stw	ra,8(sp)
  80423c:	df000115 	stw	fp,4(sp)
  804240:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804244:	00802034 	movhi	r2,128
  804248:	109a5a04 	addi	r2,r2,26984
  80424c:	10800017 	ldw	r2,0(r2)
  804250:	1005003a 	cmpeq	r2,r2,zero
  804254:	1000061e 	bne	r2,zero,804270 <alt_get_errno+0x3c>
  804258:	00802034 	movhi	r2,128
  80425c:	109a5a04 	addi	r2,r2,26984
  804260:	10800017 	ldw	r2,0(r2)
  804264:	103ee83a 	callr	r2
  804268:	e0bfff15 	stw	r2,-4(fp)
  80426c:	00000306 	br	80427c <alt_get_errno+0x48>
  804270:	00802074 	movhi	r2,129
  804274:	10a07e04 	addi	r2,r2,-32264
  804278:	e0bfff15 	stw	r2,-4(fp)
  80427c:	e0bfff17 	ldw	r2,-4(fp)
}
  804280:	e037883a 	mov	sp,fp
  804284:	dfc00117 	ldw	ra,4(sp)
  804288:	df000017 	ldw	fp,0(sp)
  80428c:	dec00204 	addi	sp,sp,8
  804290:	f800283a 	ret

00804294 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  804294:	defffe04 	addi	sp,sp,-8
  804298:	df000115 	stw	fp,4(sp)
  80429c:	df000104 	addi	fp,sp,4
  8042a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8042a4:	e0bfff17 	ldw	r2,-4(fp)
  8042a8:	108000d0 	cmplti	r2,r2,3
  8042ac:	10000d1e 	bne	r2,zero,8042e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8042b0:	e0bfff17 	ldw	r2,-4(fp)
  8042b4:	00c02034 	movhi	r3,128
  8042b8:	18d8f204 	addi	r3,r3,25544
  8042bc:	10800324 	muli	r2,r2,12
  8042c0:	10c5883a 	add	r2,r2,r3
  8042c4:	10800204 	addi	r2,r2,8
  8042c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8042cc:	e0bfff17 	ldw	r2,-4(fp)
  8042d0:	00c02034 	movhi	r3,128
  8042d4:	18d8f204 	addi	r3,r3,25544
  8042d8:	10800324 	muli	r2,r2,12
  8042dc:	10c5883a 	add	r2,r2,r3
  8042e0:	10000015 	stw	zero,0(r2)
  }
}
  8042e4:	e037883a 	mov	sp,fp
  8042e8:	df000017 	ldw	fp,0(sp)
  8042ec:	dec00104 	addi	sp,sp,4
  8042f0:	f800283a 	ret

008042f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8042f4:	defffd04 	addi	sp,sp,-12
  8042f8:	dfc00215 	stw	ra,8(sp)
  8042fc:	df000115 	stw	fp,4(sp)
  804300:	df000104 	addi	fp,sp,4
  804304:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  804308:	e13fff17 	ldw	r4,-4(fp)
  80430c:	08043440 	call	804344 <alt_busy_sleep>
}
  804310:	e037883a 	mov	sp,fp
  804314:	dfc00117 	ldw	ra,4(sp)
  804318:	df000017 	ldw	fp,0(sp)
  80431c:	dec00204 	addi	sp,sp,8
  804320:	f800283a 	ret

00804324 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  804324:	deffff04 	addi	sp,sp,-4
  804328:	df000015 	stw	fp,0(sp)
  80432c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  804330:	000170fa 	wrctl	ienable,zero
}
  804334:	e037883a 	mov	sp,fp
  804338:	df000017 	ldw	fp,0(sp)
  80433c:	dec00104 	addi	sp,sp,4
  804340:	f800283a 	ret

00804344 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  804344:	defffa04 	addi	sp,sp,-24
  804348:	dfc00515 	stw	ra,20(sp)
  80434c:	df000415 	stw	fp,16(sp)
  804350:	df000404 	addi	fp,sp,16
  804354:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  804358:	008000c4 	movi	r2,3
  80435c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  804360:	e0fffc17 	ldw	r3,-16(fp)
  804364:	008003f4 	movhi	r2,15
  804368:	10909004 	addi	r2,r2,16960
  80436c:	188b383a 	mul	r5,r3,r2
  804370:	0100bef4 	movhi	r4,763
  804374:	213c2004 	addi	r4,r4,-3968
  804378:	0804e1c0 	call	804e1c <__udivsi3>
  80437c:	100b883a 	mov	r5,r2
  804380:	01200034 	movhi	r4,32768
  804384:	213fffc4 	addi	r4,r4,-1
  804388:	0804e1c0 	call	804e1c <__udivsi3>
  80438c:	100b883a 	mov	r5,r2
  804390:	e13fff17 	ldw	r4,-4(fp)
  804394:	0804e1c0 	call	804e1c <__udivsi3>
  804398:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80439c:	e0bffd17 	ldw	r2,-12(fp)
  8043a0:	1005003a 	cmpeq	r2,r2,zero
  8043a4:	1000281e 	bne	r2,zero,804448 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  8043a8:	e03ffe15 	stw	zero,-8(fp)
  8043ac:	00001606 	br	804408 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8043b0:	00a00034 	movhi	r2,32768
  8043b4:	10bfffc4 	addi	r2,r2,-1
  8043b8:	10bfffc4 	addi	r2,r2,-1
  8043bc:	103ffe1e 	bne	r2,zero,8043b8 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8043c0:	e0fffc17 	ldw	r3,-16(fp)
  8043c4:	008003f4 	movhi	r2,15
  8043c8:	10909004 	addi	r2,r2,16960
  8043cc:	188b383a 	mul	r5,r3,r2
  8043d0:	0100bef4 	movhi	r4,763
  8043d4:	213c2004 	addi	r4,r4,-3968
  8043d8:	0804e1c0 	call	804e1c <__udivsi3>
  8043dc:	100b883a 	mov	r5,r2
  8043e0:	01200034 	movhi	r4,32768
  8043e4:	213fffc4 	addi	r4,r4,-1
  8043e8:	0804e1c0 	call	804e1c <__udivsi3>
  8043ec:	1007883a 	mov	r3,r2
  8043f0:	e0bfff17 	ldw	r2,-4(fp)
  8043f4:	10c5c83a 	sub	r2,r2,r3
  8043f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8043fc:	e0bffe17 	ldw	r2,-8(fp)
  804400:	10800044 	addi	r2,r2,1
  804404:	e0bffe15 	stw	r2,-8(fp)
  804408:	e0fffe17 	ldw	r3,-8(fp)
  80440c:	e0bffd17 	ldw	r2,-12(fp)
  804410:	18bfe716 	blt	r3,r2,8043b0 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  804414:	e0fffc17 	ldw	r3,-16(fp)
  804418:	008003f4 	movhi	r2,15
  80441c:	10909004 	addi	r2,r2,16960
  804420:	188b383a 	mul	r5,r3,r2
  804424:	0100bef4 	movhi	r4,763
  804428:	213c2004 	addi	r4,r4,-3968
  80442c:	0804e1c0 	call	804e1c <__udivsi3>
  804430:	1007883a 	mov	r3,r2
  804434:	e0bfff17 	ldw	r2,-4(fp)
  804438:	1885383a 	mul	r2,r3,r2
  80443c:	10bfffc4 	addi	r2,r2,-1
  804440:	103ffe1e 	bne	r2,zero,80443c <alt_busy_sleep+0xf8>
  804444:	00000c06 	br	804478 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  804448:	e0fffc17 	ldw	r3,-16(fp)
  80444c:	008003f4 	movhi	r2,15
  804450:	10909004 	addi	r2,r2,16960
  804454:	188b383a 	mul	r5,r3,r2
  804458:	0100bef4 	movhi	r4,763
  80445c:	213c2004 	addi	r4,r4,-3968
  804460:	0804e1c0 	call	804e1c <__udivsi3>
  804464:	1007883a 	mov	r3,r2
  804468:	e0bfff17 	ldw	r2,-4(fp)
  80446c:	1885383a 	mul	r2,r3,r2
  804470:	10bfffc4 	addi	r2,r2,-1
  804474:	00bffe16 	blt	zero,r2,804470 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  804478:	0005883a 	mov	r2,zero
}
  80447c:	e037883a 	mov	sp,fp
  804480:	dfc00117 	ldw	ra,4(sp)
  804484:	df000017 	ldw	fp,0(sp)
  804488:	dec00204 	addi	sp,sp,8
  80448c:	f800283a 	ret

00804490 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  804490:	defff904 	addi	sp,sp,-28
  804494:	dfc00615 	stw	ra,24(sp)
  804498:	df000515 	stw	fp,20(sp)
  80449c:	df000504 	addi	fp,sp,20
  8044a0:	e13ffd15 	stw	r4,-12(fp)
  8044a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8044a8:	e0bffe17 	ldw	r2,-8(fp)
  8044ac:	10800017 	ldw	r2,0(r2)
  8044b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8044b4:	e13ffd17 	ldw	r4,-12(fp)
  8044b8:	08049840 	call	804984 <strlen>
  8044bc:	10800044 	addi	r2,r2,1
  8044c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8044c4:	00000d06 	br	8044fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8044c8:	e0bffc17 	ldw	r2,-16(fp)
  8044cc:	11000217 	ldw	r4,8(r2)
  8044d0:	e1bffb17 	ldw	r6,-20(fp)
  8044d4:	e17ffd17 	ldw	r5,-12(fp)
  8044d8:	08047d80 	call	8047d8 <memcmp>
  8044dc:	1004c03a 	cmpne	r2,r2,zero
  8044e0:	1000031e 	bne	r2,zero,8044f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8044e4:	e0bffc17 	ldw	r2,-16(fp)
  8044e8:	e0bfff15 	stw	r2,-4(fp)
  8044ec:	00000706 	br	80450c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8044f0:	e0bffc17 	ldw	r2,-16(fp)
  8044f4:	10800017 	ldw	r2,0(r2)
  8044f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8044fc:	e0fffe17 	ldw	r3,-8(fp)
  804500:	e0bffc17 	ldw	r2,-16(fp)
  804504:	10fff01e 	bne	r2,r3,8044c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  804508:	e03fff15 	stw	zero,-4(fp)
  80450c:	e0bfff17 	ldw	r2,-4(fp)
}
  804510:	e037883a 	mov	sp,fp
  804514:	dfc00117 	ldw	ra,4(sp)
  804518:	df000017 	ldw	fp,0(sp)
  80451c:	dec00204 	addi	sp,sp,8
  804520:	f800283a 	ret

00804524 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  804524:	defffa04 	addi	sp,sp,-24
  804528:	dfc00515 	stw	ra,20(sp)
  80452c:	df000415 	stw	fp,16(sp)
  804530:	df000404 	addi	fp,sp,16
  804534:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  804538:	00802034 	movhi	r2,128
  80453c:	109a5504 	addi	r2,r2,26964
  804540:	10800017 	ldw	r2,0(r2)
  804544:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  804548:	00003306 	br	804618 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80454c:	e0bffd17 	ldw	r2,-12(fp)
  804550:	11000217 	ldw	r4,8(r2)
  804554:	08049840 	call	804984 <strlen>
  804558:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80455c:	e0bffd17 	ldw	r2,-12(fp)
  804560:	10c00217 	ldw	r3,8(r2)
  804564:	e0bffc17 	ldw	r2,-16(fp)
  804568:	1885883a 	add	r2,r3,r2
  80456c:	10bfffc4 	addi	r2,r2,-1
  804570:	10800003 	ldbu	r2,0(r2)
  804574:	10803fcc 	andi	r2,r2,255
  804578:	1080201c 	xori	r2,r2,128
  80457c:	10bfe004 	addi	r2,r2,-128
  804580:	10800bd8 	cmpnei	r2,r2,47
  804584:	1000031e 	bne	r2,zero,804594 <alt_find_file+0x70>
    {
      len -= 1;
  804588:	e0bffc17 	ldw	r2,-16(fp)
  80458c:	10bfffc4 	addi	r2,r2,-1
  804590:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  804594:	e0bffc17 	ldw	r2,-16(fp)
  804598:	1007883a 	mov	r3,r2
  80459c:	e0bffe17 	ldw	r2,-8(fp)
  8045a0:	1885883a 	add	r2,r3,r2
  8045a4:	10800003 	ldbu	r2,0(r2)
  8045a8:	10803fcc 	andi	r2,r2,255
  8045ac:	1080201c 	xori	r2,r2,128
  8045b0:	10bfe004 	addi	r2,r2,-128
  8045b4:	10800be0 	cmpeqi	r2,r2,47
  8045b8:	10000a1e 	bne	r2,zero,8045e4 <alt_find_file+0xc0>
  8045bc:	e0bffc17 	ldw	r2,-16(fp)
  8045c0:	1007883a 	mov	r3,r2
  8045c4:	e0bffe17 	ldw	r2,-8(fp)
  8045c8:	1885883a 	add	r2,r3,r2
  8045cc:	10800003 	ldbu	r2,0(r2)
  8045d0:	10803fcc 	andi	r2,r2,255
  8045d4:	1080201c 	xori	r2,r2,128
  8045d8:	10bfe004 	addi	r2,r2,-128
  8045dc:	1004c03a 	cmpne	r2,r2,zero
  8045e0:	10000a1e 	bne	r2,zero,80460c <alt_find_file+0xe8>
  8045e4:	e0bffd17 	ldw	r2,-12(fp)
  8045e8:	11000217 	ldw	r4,8(r2)
  8045ec:	e1bffc17 	ldw	r6,-16(fp)
  8045f0:	e17ffe17 	ldw	r5,-8(fp)
  8045f4:	08047d80 	call	8047d8 <memcmp>
  8045f8:	1004c03a 	cmpne	r2,r2,zero
  8045fc:	1000031e 	bne	r2,zero,80460c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  804600:	e0bffd17 	ldw	r2,-12(fp)
  804604:	e0bfff15 	stw	r2,-4(fp)
  804608:	00000806 	br	80462c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80460c:	e0bffd17 	ldw	r2,-12(fp)
  804610:	10800017 	ldw	r2,0(r2)
  804614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  804618:	00c02034 	movhi	r3,128
  80461c:	18da5504 	addi	r3,r3,26964
  804620:	e0bffd17 	ldw	r2,-12(fp)
  804624:	10ffc91e 	bne	r2,r3,80454c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  804628:	e03fff15 	stw	zero,-4(fp)
  80462c:	e0bfff17 	ldw	r2,-4(fp)
}
  804630:	e037883a 	mov	sp,fp
  804634:	dfc00117 	ldw	ra,4(sp)
  804638:	df000017 	ldw	fp,0(sp)
  80463c:	dec00204 	addi	sp,sp,8
  804640:	f800283a 	ret

00804644 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  804644:	defffc04 	addi	sp,sp,-16
  804648:	df000315 	stw	fp,12(sp)
  80464c:	df000304 	addi	fp,sp,12
  804650:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  804654:	00bffa04 	movi	r2,-24
  804658:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80465c:	e03ffe15 	stw	zero,-8(fp)
  804660:	00001e06 	br	8046dc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  804664:	e0bffe17 	ldw	r2,-8(fp)
  804668:	00c02034 	movhi	r3,128
  80466c:	18d8f204 	addi	r3,r3,25544
  804670:	10800324 	muli	r2,r2,12
  804674:	10c5883a 	add	r2,r2,r3
  804678:	10800017 	ldw	r2,0(r2)
  80467c:	1004c03a 	cmpne	r2,r2,zero
  804680:	1000131e 	bne	r2,zero,8046d0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  804684:	e0bffe17 	ldw	r2,-8(fp)
  804688:	00c02034 	movhi	r3,128
  80468c:	18d8f204 	addi	r3,r3,25544
  804690:	10800324 	muli	r2,r2,12
  804694:	10c7883a 	add	r3,r2,r3
  804698:	e0bfff17 	ldw	r2,-4(fp)
  80469c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8046a0:	00802034 	movhi	r2,128
  8046a4:	109a5904 	addi	r2,r2,26980
  8046a8:	10c00017 	ldw	r3,0(r2)
  8046ac:	e0bffe17 	ldw	r2,-8(fp)
  8046b0:	1880040e 	bge	r3,r2,8046c4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  8046b4:	00c02034 	movhi	r3,128
  8046b8:	18da5904 	addi	r3,r3,26980
  8046bc:	e0bffe17 	ldw	r2,-8(fp)
  8046c0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  8046c4:	e0bffe17 	ldw	r2,-8(fp)
  8046c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  8046cc:	00000606 	br	8046e8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8046d0:	e0bffe17 	ldw	r2,-8(fp)
  8046d4:	10800044 	addi	r2,r2,1
  8046d8:	e0bffe15 	stw	r2,-8(fp)
  8046dc:	e0bffe17 	ldw	r2,-8(fp)
  8046e0:	10800810 	cmplti	r2,r2,32
  8046e4:	103fdf1e 	bne	r2,zero,804664 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8046e8:	e0bffd17 	ldw	r2,-12(fp)
}
  8046ec:	e037883a 	mov	sp,fp
  8046f0:	df000017 	ldw	fp,0(sp)
  8046f4:	dec00104 	addi	sp,sp,4
  8046f8:	f800283a 	ret

008046fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8046fc:	defffb04 	addi	sp,sp,-20
  804700:	df000415 	stw	fp,16(sp)
  804704:	df000404 	addi	fp,sp,16
  804708:	e13ffe15 	stw	r4,-8(fp)
  80470c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  804710:	e0bfff17 	ldw	r2,-4(fp)
  804714:	10840070 	cmpltui	r2,r2,4097
  804718:	1000021e 	bne	r2,zero,804724 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80471c:	00840004 	movi	r2,4096
  804720:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  804724:	e0fffe17 	ldw	r3,-8(fp)
  804728:	e0bfff17 	ldw	r2,-4(fp)
  80472c:	1885883a 	add	r2,r3,r2
  804730:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  804734:	e0bffe17 	ldw	r2,-8(fp)
  804738:	e0bffd15 	stw	r2,-12(fp)
  80473c:	00000506 	br	804754 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  804740:	e0bffd17 	ldw	r2,-12(fp)
  804744:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  804748:	e0bffd17 	ldw	r2,-12(fp)
  80474c:	10800804 	addi	r2,r2,32
  804750:	e0bffd15 	stw	r2,-12(fp)
  804754:	e0fffd17 	ldw	r3,-12(fp)
  804758:	e0bffc17 	ldw	r2,-16(fp)
  80475c:	18bff836 	bltu	r3,r2,804740 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  804760:	e0bffe17 	ldw	r2,-8(fp)
  804764:	108007cc 	andi	r2,r2,31
  804768:	1005003a 	cmpeq	r2,r2,zero
  80476c:	1000021e 	bne	r2,zero,804778 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  804770:	e0bffd17 	ldw	r2,-12(fp)
  804774:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  804778:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80477c:	e037883a 	mov	sp,fp
  804780:	df000017 	ldw	fp,0(sp)
  804784:	dec00104 	addi	sp,sp,4
  804788:	f800283a 	ret

0080478c <atexit>:
  80478c:	200b883a 	mov	r5,r4
  804790:	000d883a 	mov	r6,zero
  804794:	0009883a 	mov	r4,zero
  804798:	000f883a 	mov	r7,zero
  80479c:	08049f81 	jmpi	8049f8 <__register_exitproc>

008047a0 <exit>:
  8047a0:	defffe04 	addi	sp,sp,-8
  8047a4:	000b883a 	mov	r5,zero
  8047a8:	dc000015 	stw	r16,0(sp)
  8047ac:	dfc00115 	stw	ra,4(sp)
  8047b0:	2021883a 	mov	r16,r4
  8047b4:	0804b300 	call	804b30 <__call_exitprocs>
  8047b8:	00802034 	movhi	r2,128
  8047bc:	109a5e04 	addi	r2,r2,27000
  8047c0:	11000017 	ldw	r4,0(r2)
  8047c4:	20800f17 	ldw	r2,60(r4)
  8047c8:	10000126 	beq	r2,zero,8047d0 <exit+0x30>
  8047cc:	103ee83a 	callr	r2
  8047d0:	8009883a 	mov	r4,r16
  8047d4:	0804e6c0 	call	804e6c <_exit>

008047d8 <memcmp>:
  8047d8:	00c000c4 	movi	r3,3
  8047dc:	1980032e 	bgeu	r3,r6,8047ec <memcmp+0x14>
  8047e0:	2144b03a 	or	r2,r4,r5
  8047e4:	10c4703a 	and	r2,r2,r3
  8047e8:	10000f26 	beq	r2,zero,804828 <memcmp+0x50>
  8047ec:	31ffffc4 	addi	r7,r6,-1
  8047f0:	3000061e 	bne	r6,zero,80480c <memcmp+0x34>
  8047f4:	00000a06 	br	804820 <memcmp+0x48>
  8047f8:	39ffffc4 	addi	r7,r7,-1
  8047fc:	00bfffc4 	movi	r2,-1
  804800:	21000044 	addi	r4,r4,1
  804804:	29400044 	addi	r5,r5,1
  804808:	38800526 	beq	r7,r2,804820 <memcmp+0x48>
  80480c:	20c00003 	ldbu	r3,0(r4)
  804810:	28800003 	ldbu	r2,0(r5)
  804814:	18bff826 	beq	r3,r2,8047f8 <memcmp+0x20>
  804818:	1885c83a 	sub	r2,r3,r2
  80481c:	f800283a 	ret
  804820:	0005883a 	mov	r2,zero
  804824:	f800283a 	ret
  804828:	180f883a 	mov	r7,r3
  80482c:	20c00017 	ldw	r3,0(r4)
  804830:	28800017 	ldw	r2,0(r5)
  804834:	18bfed1e 	bne	r3,r2,8047ec <memcmp+0x14>
  804838:	31bfff04 	addi	r6,r6,-4
  80483c:	21000104 	addi	r4,r4,4
  804840:	29400104 	addi	r5,r5,4
  804844:	39bff936 	bltu	r7,r6,80482c <memcmp+0x54>
  804848:	003fe806 	br	8047ec <memcmp+0x14>

0080484c <memcpy>:
  80484c:	01c003c4 	movi	r7,15
  804850:	2007883a 	mov	r3,r4
  804854:	3980032e 	bgeu	r7,r6,804864 <memcpy+0x18>
  804858:	2904b03a 	or	r2,r5,r4
  80485c:	108000cc 	andi	r2,r2,3
  804860:	10000926 	beq	r2,zero,804888 <memcpy+0x3c>
  804864:	30000626 	beq	r6,zero,804880 <memcpy+0x34>
  804868:	30cd883a 	add	r6,r6,r3
  80486c:	28800003 	ldbu	r2,0(r5)
  804870:	29400044 	addi	r5,r5,1
  804874:	18800005 	stb	r2,0(r3)
  804878:	18c00044 	addi	r3,r3,1
  80487c:	30fffb1e 	bne	r6,r3,80486c <memcpy+0x20>
  804880:	2005883a 	mov	r2,r4
  804884:	f800283a 	ret
  804888:	3811883a 	mov	r8,r7
  80488c:	200f883a 	mov	r7,r4
  804890:	28c00017 	ldw	r3,0(r5)
  804894:	31bffc04 	addi	r6,r6,-16
  804898:	38c00015 	stw	r3,0(r7)
  80489c:	28800117 	ldw	r2,4(r5)
  8048a0:	38800115 	stw	r2,4(r7)
  8048a4:	28c00217 	ldw	r3,8(r5)
  8048a8:	38c00215 	stw	r3,8(r7)
  8048ac:	28800317 	ldw	r2,12(r5)
  8048b0:	29400404 	addi	r5,r5,16
  8048b4:	38800315 	stw	r2,12(r7)
  8048b8:	39c00404 	addi	r7,r7,16
  8048bc:	41bff436 	bltu	r8,r6,804890 <memcpy+0x44>
  8048c0:	008000c4 	movi	r2,3
  8048c4:	1180072e 	bgeu	r2,r6,8048e4 <memcpy+0x98>
  8048c8:	1007883a 	mov	r3,r2
  8048cc:	28800017 	ldw	r2,0(r5)
  8048d0:	31bfff04 	addi	r6,r6,-4
  8048d4:	29400104 	addi	r5,r5,4
  8048d8:	38800015 	stw	r2,0(r7)
  8048dc:	39c00104 	addi	r7,r7,4
  8048e0:	19bffa36 	bltu	r3,r6,8048cc <memcpy+0x80>
  8048e4:	3807883a 	mov	r3,r7
  8048e8:	003fde06 	br	804864 <memcpy+0x18>

008048ec <memset>:
  8048ec:	008000c4 	movi	r2,3
  8048f0:	29403fcc 	andi	r5,r5,255
  8048f4:	2007883a 	mov	r3,r4
  8048f8:	1180022e 	bgeu	r2,r6,804904 <memset+0x18>
  8048fc:	2084703a 	and	r2,r4,r2
  804900:	10000826 	beq	r2,zero,804924 <memset+0x38>
  804904:	30000526 	beq	r6,zero,80491c <memset+0x30>
  804908:	2805883a 	mov	r2,r5
  80490c:	30cd883a 	add	r6,r6,r3
  804910:	18800005 	stb	r2,0(r3)
  804914:	18c00044 	addi	r3,r3,1
  804918:	19bffd1e 	bne	r3,r6,804910 <memset+0x24>
  80491c:	2005883a 	mov	r2,r4
  804920:	f800283a 	ret
  804924:	2804923a 	slli	r2,r5,8
  804928:	020003c4 	movi	r8,15
  80492c:	200f883a 	mov	r7,r4
  804930:	2884b03a 	or	r2,r5,r2
  804934:	1006943a 	slli	r3,r2,16
  804938:	10c6b03a 	or	r3,r2,r3
  80493c:	41800a2e 	bgeu	r8,r6,804968 <memset+0x7c>
  804940:	4005883a 	mov	r2,r8
  804944:	31bffc04 	addi	r6,r6,-16
  804948:	38c00015 	stw	r3,0(r7)
  80494c:	38c00115 	stw	r3,4(r7)
  804950:	38c00215 	stw	r3,8(r7)
  804954:	38c00315 	stw	r3,12(r7)
  804958:	39c00404 	addi	r7,r7,16
  80495c:	11bff936 	bltu	r2,r6,804944 <memset+0x58>
  804960:	008000c4 	movi	r2,3
  804964:	1180052e 	bgeu	r2,r6,80497c <memset+0x90>
  804968:	31bfff04 	addi	r6,r6,-4
  80496c:	008000c4 	movi	r2,3
  804970:	38c00015 	stw	r3,0(r7)
  804974:	39c00104 	addi	r7,r7,4
  804978:	11bffb36 	bltu	r2,r6,804968 <memset+0x7c>
  80497c:	3807883a 	mov	r3,r7
  804980:	003fe006 	br	804904 <memset+0x18>

00804984 <strlen>:
  804984:	208000cc 	andi	r2,r4,3
  804988:	2011883a 	mov	r8,r4
  80498c:	1000161e 	bne	r2,zero,8049e8 <strlen+0x64>
  804990:	20c00017 	ldw	r3,0(r4)
  804994:	017fbff4 	movhi	r5,65279
  804998:	297fbfc4 	addi	r5,r5,-257
  80499c:	01e02074 	movhi	r7,32897
  8049a0:	39e02004 	addi	r7,r7,-32640
  8049a4:	1945883a 	add	r2,r3,r5
  8049a8:	11c4703a 	and	r2,r2,r7
  8049ac:	00c6303a 	nor	r3,zero,r3
  8049b0:	1886703a 	and	r3,r3,r2
  8049b4:	18000c1e 	bne	r3,zero,8049e8 <strlen+0x64>
  8049b8:	280d883a 	mov	r6,r5
  8049bc:	380b883a 	mov	r5,r7
  8049c0:	21000104 	addi	r4,r4,4
  8049c4:	20800017 	ldw	r2,0(r4)
  8049c8:	1187883a 	add	r3,r2,r6
  8049cc:	1946703a 	and	r3,r3,r5
  8049d0:	0084303a 	nor	r2,zero,r2
  8049d4:	10c4703a 	and	r2,r2,r3
  8049d8:	103ff926 	beq	r2,zero,8049c0 <strlen+0x3c>
  8049dc:	20800007 	ldb	r2,0(r4)
  8049e0:	10000326 	beq	r2,zero,8049f0 <strlen+0x6c>
  8049e4:	21000044 	addi	r4,r4,1
  8049e8:	20800007 	ldb	r2,0(r4)
  8049ec:	103ffd1e 	bne	r2,zero,8049e4 <strlen+0x60>
  8049f0:	2205c83a 	sub	r2,r4,r8
  8049f4:	f800283a 	ret

008049f8 <__register_exitproc>:
  8049f8:	defffa04 	addi	sp,sp,-24
  8049fc:	00802034 	movhi	r2,128
  804a00:	109a5e04 	addi	r2,r2,27000
  804a04:	dc000015 	stw	r16,0(sp)
  804a08:	14000017 	ldw	r16,0(r2)
  804a0c:	dd000415 	stw	r20,16(sp)
  804a10:	2829883a 	mov	r20,r5
  804a14:	81405217 	ldw	r5,328(r16)
  804a18:	dcc00315 	stw	r19,12(sp)
  804a1c:	dc800215 	stw	r18,8(sp)
  804a20:	dc400115 	stw	r17,4(sp)
  804a24:	dfc00515 	stw	ra,20(sp)
  804a28:	2023883a 	mov	r17,r4
  804a2c:	3027883a 	mov	r19,r6
  804a30:	3825883a 	mov	r18,r7
  804a34:	28002526 	beq	r5,zero,804acc <__register_exitproc+0xd4>
  804a38:	29000117 	ldw	r4,4(r5)
  804a3c:	008007c4 	movi	r2,31
  804a40:	11002716 	blt	r2,r4,804ae0 <__register_exitproc+0xe8>
  804a44:	8800101e 	bne	r17,zero,804a88 <__register_exitproc+0x90>
  804a48:	2105883a 	add	r2,r4,r4
  804a4c:	1085883a 	add	r2,r2,r2
  804a50:	20c00044 	addi	r3,r4,1
  804a54:	1145883a 	add	r2,r2,r5
  804a58:	0009883a 	mov	r4,zero
  804a5c:	15000215 	stw	r20,8(r2)
  804a60:	28c00115 	stw	r3,4(r5)
  804a64:	2005883a 	mov	r2,r4
  804a68:	dfc00517 	ldw	ra,20(sp)
  804a6c:	dd000417 	ldw	r20,16(sp)
  804a70:	dcc00317 	ldw	r19,12(sp)
  804a74:	dc800217 	ldw	r18,8(sp)
  804a78:	dc400117 	ldw	r17,4(sp)
  804a7c:	dc000017 	ldw	r16,0(sp)
  804a80:	dec00604 	addi	sp,sp,24
  804a84:	f800283a 	ret
  804a88:	29802204 	addi	r6,r5,136
  804a8c:	00800044 	movi	r2,1
  804a90:	110e983a 	sll	r7,r2,r4
  804a94:	30c04017 	ldw	r3,256(r6)
  804a98:	2105883a 	add	r2,r4,r4
  804a9c:	1085883a 	add	r2,r2,r2
  804aa0:	1185883a 	add	r2,r2,r6
  804aa4:	19c6b03a 	or	r3,r3,r7
  804aa8:	14802015 	stw	r18,128(r2)
  804aac:	14c00015 	stw	r19,0(r2)
  804ab0:	00800084 	movi	r2,2
  804ab4:	30c04015 	stw	r3,256(r6)
  804ab8:	88bfe31e 	bne	r17,r2,804a48 <__register_exitproc+0x50>
  804abc:	30804117 	ldw	r2,260(r6)
  804ac0:	11c4b03a 	or	r2,r2,r7
  804ac4:	30804115 	stw	r2,260(r6)
  804ac8:	003fdf06 	br	804a48 <__register_exitproc+0x50>
  804acc:	00802074 	movhi	r2,129
  804ad0:	10a0e304 	addi	r2,r2,-31860
  804ad4:	100b883a 	mov	r5,r2
  804ad8:	80805215 	stw	r2,328(r16)
  804adc:	003fd606 	br	804a38 <__register_exitproc+0x40>
  804ae0:	00800034 	movhi	r2,0
  804ae4:	10800004 	addi	r2,r2,0
  804ae8:	1000021e 	bne	r2,zero,804af4 <__register_exitproc+0xfc>
  804aec:	013fffc4 	movi	r4,-1
  804af0:	003fdc06 	br	804a64 <__register_exitproc+0x6c>
  804af4:	01006404 	movi	r4,400
  804af8:	103ee83a 	callr	r2
  804afc:	1007883a 	mov	r3,r2
  804b00:	103ffa26 	beq	r2,zero,804aec <__register_exitproc+0xf4>
  804b04:	80805217 	ldw	r2,328(r16)
  804b08:	180b883a 	mov	r5,r3
  804b0c:	18000115 	stw	zero,4(r3)
  804b10:	18800015 	stw	r2,0(r3)
  804b14:	80c05215 	stw	r3,328(r16)
  804b18:	18006215 	stw	zero,392(r3)
  804b1c:	18006315 	stw	zero,396(r3)
  804b20:	0009883a 	mov	r4,zero
  804b24:	883fc826 	beq	r17,zero,804a48 <__register_exitproc+0x50>
  804b28:	003fd706 	br	804a88 <__register_exitproc+0x90>

00804b2c <register_fini>:
  804b2c:	f800283a 	ret

00804b30 <__call_exitprocs>:
  804b30:	00802034 	movhi	r2,128
  804b34:	109a5e04 	addi	r2,r2,27000
  804b38:	10800017 	ldw	r2,0(r2)
  804b3c:	defff304 	addi	sp,sp,-52
  804b40:	df000b15 	stw	fp,44(sp)
  804b44:	d8800115 	stw	r2,4(sp)
  804b48:	00800034 	movhi	r2,0
  804b4c:	10800004 	addi	r2,r2,0
  804b50:	1005003a 	cmpeq	r2,r2,zero
  804b54:	d8800215 	stw	r2,8(sp)
  804b58:	d8800117 	ldw	r2,4(sp)
  804b5c:	dd400815 	stw	r21,32(sp)
  804b60:	dd000715 	stw	r20,28(sp)
  804b64:	10805204 	addi	r2,r2,328
  804b68:	dfc00c15 	stw	ra,48(sp)
  804b6c:	ddc00a15 	stw	r23,40(sp)
  804b70:	dd800915 	stw	r22,36(sp)
  804b74:	dcc00615 	stw	r19,24(sp)
  804b78:	dc800515 	stw	r18,20(sp)
  804b7c:	dc400415 	stw	r17,16(sp)
  804b80:	dc000315 	stw	r16,12(sp)
  804b84:	282b883a 	mov	r21,r5
  804b88:	2039883a 	mov	fp,r4
  804b8c:	d8800015 	stw	r2,0(sp)
  804b90:	2829003a 	cmpeq	r20,r5,zero
  804b94:	d8800117 	ldw	r2,4(sp)
  804b98:	14405217 	ldw	r17,328(r2)
  804b9c:	88001026 	beq	r17,zero,804be0 <__call_exitprocs+0xb0>
  804ba0:	ddc00017 	ldw	r23,0(sp)
  804ba4:	88800117 	ldw	r2,4(r17)
  804ba8:	8c802204 	addi	r18,r17,136
  804bac:	143fffc4 	addi	r16,r2,-1
  804bb0:	80000916 	blt	r16,zero,804bd8 <__call_exitprocs+0xa8>
  804bb4:	05bfffc4 	movi	r22,-1
  804bb8:	a000151e 	bne	r20,zero,804c10 <__call_exitprocs+0xe0>
  804bbc:	8409883a 	add	r4,r16,r16
  804bc0:	2105883a 	add	r2,r4,r4
  804bc4:	1485883a 	add	r2,r2,r18
  804bc8:	10c02017 	ldw	r3,128(r2)
  804bcc:	a8c01126 	beq	r21,r3,804c14 <__call_exitprocs+0xe4>
  804bd0:	843fffc4 	addi	r16,r16,-1
  804bd4:	85bff81e 	bne	r16,r22,804bb8 <__call_exitprocs+0x88>
  804bd8:	d8800217 	ldw	r2,8(sp)
  804bdc:	10003126 	beq	r2,zero,804ca4 <__call_exitprocs+0x174>
  804be0:	dfc00c17 	ldw	ra,48(sp)
  804be4:	df000b17 	ldw	fp,44(sp)
  804be8:	ddc00a17 	ldw	r23,40(sp)
  804bec:	dd800917 	ldw	r22,36(sp)
  804bf0:	dd400817 	ldw	r21,32(sp)
  804bf4:	dd000717 	ldw	r20,28(sp)
  804bf8:	dcc00617 	ldw	r19,24(sp)
  804bfc:	dc800517 	ldw	r18,20(sp)
  804c00:	dc400417 	ldw	r17,16(sp)
  804c04:	dc000317 	ldw	r16,12(sp)
  804c08:	dec00d04 	addi	sp,sp,52
  804c0c:	f800283a 	ret
  804c10:	8409883a 	add	r4,r16,r16
  804c14:	88c00117 	ldw	r3,4(r17)
  804c18:	2105883a 	add	r2,r4,r4
  804c1c:	1445883a 	add	r2,r2,r17
  804c20:	18ffffc4 	addi	r3,r3,-1
  804c24:	11800217 	ldw	r6,8(r2)
  804c28:	1c001526 	beq	r3,r16,804c80 <__call_exitprocs+0x150>
  804c2c:	10000215 	stw	zero,8(r2)
  804c30:	303fe726 	beq	r6,zero,804bd0 <__call_exitprocs+0xa0>
  804c34:	00c00044 	movi	r3,1
  804c38:	1c06983a 	sll	r3,r3,r16
  804c3c:	90804017 	ldw	r2,256(r18)
  804c40:	8cc00117 	ldw	r19,4(r17)
  804c44:	1884703a 	and	r2,r3,r2
  804c48:	10001426 	beq	r2,zero,804c9c <__call_exitprocs+0x16c>
  804c4c:	90804117 	ldw	r2,260(r18)
  804c50:	1884703a 	and	r2,r3,r2
  804c54:	10000c1e 	bne	r2,zero,804c88 <__call_exitprocs+0x158>
  804c58:	2105883a 	add	r2,r4,r4
  804c5c:	1485883a 	add	r2,r2,r18
  804c60:	11400017 	ldw	r5,0(r2)
  804c64:	e009883a 	mov	r4,fp
  804c68:	303ee83a 	callr	r6
  804c6c:	88800117 	ldw	r2,4(r17)
  804c70:	98bfc81e 	bne	r19,r2,804b94 <__call_exitprocs+0x64>
  804c74:	b8800017 	ldw	r2,0(r23)
  804c78:	147fd526 	beq	r2,r17,804bd0 <__call_exitprocs+0xa0>
  804c7c:	003fc506 	br	804b94 <__call_exitprocs+0x64>
  804c80:	8c000115 	stw	r16,4(r17)
  804c84:	003fea06 	br	804c30 <__call_exitprocs+0x100>
  804c88:	2105883a 	add	r2,r4,r4
  804c8c:	1485883a 	add	r2,r2,r18
  804c90:	11000017 	ldw	r4,0(r2)
  804c94:	303ee83a 	callr	r6
  804c98:	003ff406 	br	804c6c <__call_exitprocs+0x13c>
  804c9c:	303ee83a 	callr	r6
  804ca0:	003ff206 	br	804c6c <__call_exitprocs+0x13c>
  804ca4:	88800117 	ldw	r2,4(r17)
  804ca8:	1000081e 	bne	r2,zero,804ccc <__call_exitprocs+0x19c>
  804cac:	89000017 	ldw	r4,0(r17)
  804cb0:	20000726 	beq	r4,zero,804cd0 <__call_exitprocs+0x1a0>
  804cb4:	b9000015 	stw	r4,0(r23)
  804cb8:	8809883a 	mov	r4,r17
  804cbc:	00000000 	call	0 <__reset-0x800000>
  804cc0:	bc400017 	ldw	r17,0(r23)
  804cc4:	883fb71e 	bne	r17,zero,804ba4 <__call_exitprocs+0x74>
  804cc8:	003fc506 	br	804be0 <__call_exitprocs+0xb0>
  804ccc:	89000017 	ldw	r4,0(r17)
  804cd0:	882f883a 	mov	r23,r17
  804cd4:	2023883a 	mov	r17,r4
  804cd8:	883fb21e 	bne	r17,zero,804ba4 <__call_exitprocs+0x74>
  804cdc:	003fc006 	br	804be0 <__call_exitprocs+0xb0>

00804ce0 <udivmodsi4>:
  804ce0:	29001b2e 	bgeu	r5,r4,804d50 <udivmodsi4+0x70>
  804ce4:	28001a16 	blt	r5,zero,804d50 <udivmodsi4+0x70>
  804ce8:	00800044 	movi	r2,1
  804cec:	0007883a 	mov	r3,zero
  804cf0:	01c007c4 	movi	r7,31
  804cf4:	00000306 	br	804d04 <udivmodsi4+0x24>
  804cf8:	19c01326 	beq	r3,r7,804d48 <udivmodsi4+0x68>
  804cfc:	18c00044 	addi	r3,r3,1
  804d00:	28000416 	blt	r5,zero,804d14 <udivmodsi4+0x34>
  804d04:	294b883a 	add	r5,r5,r5
  804d08:	1085883a 	add	r2,r2,r2
  804d0c:	293ffa36 	bltu	r5,r4,804cf8 <udivmodsi4+0x18>
  804d10:	10000d26 	beq	r2,zero,804d48 <udivmodsi4+0x68>
  804d14:	0007883a 	mov	r3,zero
  804d18:	21400236 	bltu	r4,r5,804d24 <udivmodsi4+0x44>
  804d1c:	2149c83a 	sub	r4,r4,r5
  804d20:	1886b03a 	or	r3,r3,r2
  804d24:	1004d07a 	srli	r2,r2,1
  804d28:	280ad07a 	srli	r5,r5,1
  804d2c:	103ffa1e 	bne	r2,zero,804d18 <udivmodsi4+0x38>
  804d30:	30000226 	beq	r6,zero,804d3c <udivmodsi4+0x5c>
  804d34:	2005883a 	mov	r2,r4
  804d38:	f800283a 	ret
  804d3c:	1809883a 	mov	r4,r3
  804d40:	2005883a 	mov	r2,r4
  804d44:	f800283a 	ret
  804d48:	0007883a 	mov	r3,zero
  804d4c:	003ff806 	br	804d30 <udivmodsi4+0x50>
  804d50:	00800044 	movi	r2,1
  804d54:	0007883a 	mov	r3,zero
  804d58:	003fef06 	br	804d18 <udivmodsi4+0x38>

00804d5c <__divsi3>:
  804d5c:	defffe04 	addi	sp,sp,-8
  804d60:	dc000015 	stw	r16,0(sp)
  804d64:	dfc00115 	stw	ra,4(sp)
  804d68:	0021883a 	mov	r16,zero
  804d6c:	20000c16 	blt	r4,zero,804da0 <__divsi3+0x44>
  804d70:	000d883a 	mov	r6,zero
  804d74:	28000e16 	blt	r5,zero,804db0 <__divsi3+0x54>
  804d78:	0804ce00 	call	804ce0 <udivmodsi4>
  804d7c:	1007883a 	mov	r3,r2
  804d80:	8005003a 	cmpeq	r2,r16,zero
  804d84:	1000011e 	bne	r2,zero,804d8c <__divsi3+0x30>
  804d88:	00c7c83a 	sub	r3,zero,r3
  804d8c:	1805883a 	mov	r2,r3
  804d90:	dfc00117 	ldw	ra,4(sp)
  804d94:	dc000017 	ldw	r16,0(sp)
  804d98:	dec00204 	addi	sp,sp,8
  804d9c:	f800283a 	ret
  804da0:	0109c83a 	sub	r4,zero,r4
  804da4:	04000044 	movi	r16,1
  804da8:	000d883a 	mov	r6,zero
  804dac:	283ff20e 	bge	r5,zero,804d78 <__divsi3+0x1c>
  804db0:	014bc83a 	sub	r5,zero,r5
  804db4:	8021003a 	cmpeq	r16,r16,zero
  804db8:	003fef06 	br	804d78 <__divsi3+0x1c>

00804dbc <__modsi3>:
  804dbc:	deffff04 	addi	sp,sp,-4
  804dc0:	dfc00015 	stw	ra,0(sp)
  804dc4:	01800044 	movi	r6,1
  804dc8:	2807883a 	mov	r3,r5
  804dcc:	20000416 	blt	r4,zero,804de0 <__modsi3+0x24>
  804dd0:	28000c16 	blt	r5,zero,804e04 <__modsi3+0x48>
  804dd4:	dfc00017 	ldw	ra,0(sp)
  804dd8:	dec00104 	addi	sp,sp,4
  804ddc:	0804ce01 	jmpi	804ce0 <udivmodsi4>
  804de0:	0109c83a 	sub	r4,zero,r4
  804de4:	28000b16 	blt	r5,zero,804e14 <__modsi3+0x58>
  804de8:	180b883a 	mov	r5,r3
  804dec:	01800044 	movi	r6,1
  804df0:	0804ce00 	call	804ce0 <udivmodsi4>
  804df4:	0085c83a 	sub	r2,zero,r2
  804df8:	dfc00017 	ldw	ra,0(sp)
  804dfc:	dec00104 	addi	sp,sp,4
  804e00:	f800283a 	ret
  804e04:	014bc83a 	sub	r5,zero,r5
  804e08:	dfc00017 	ldw	ra,0(sp)
  804e0c:	dec00104 	addi	sp,sp,4
  804e10:	0804ce01 	jmpi	804ce0 <udivmodsi4>
  804e14:	0147c83a 	sub	r3,zero,r5
  804e18:	003ff306 	br	804de8 <__modsi3+0x2c>

00804e1c <__udivsi3>:
  804e1c:	000d883a 	mov	r6,zero
  804e20:	0804ce01 	jmpi	804ce0 <udivmodsi4>

00804e24 <__umodsi3>:
  804e24:	01800044 	movi	r6,1
  804e28:	0804ce01 	jmpi	804ce0 <udivmodsi4>

00804e2c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  804e2c:	defffd04 	addi	sp,sp,-12
  804e30:	df000215 	stw	fp,8(sp)
  804e34:	df000204 	addi	fp,sp,8
  804e38:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  804e3c:	e0bfff17 	ldw	r2,-4(fp)
  804e40:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  804e44:	e0bffe17 	ldw	r2,-8(fp)
  804e48:	1005003a 	cmpeq	r2,r2,zero
  804e4c:	1000021e 	bne	r2,zero,804e58 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  804e50:	002af070 	cmpltui	zero,zero,43969
  804e54:	00000106 	br	804e5c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  804e58:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  804e5c:	e037883a 	mov	sp,fp
  804e60:	df000017 	ldw	fp,0(sp)
  804e64:	dec00104 	addi	sp,sp,4
  804e68:	f800283a 	ret

00804e6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  804e6c:	defffd04 	addi	sp,sp,-12
  804e70:	dfc00215 	stw	ra,8(sp)
  804e74:	df000115 	stw	fp,4(sp)
  804e78:	df000104 	addi	fp,sp,4
  804e7c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  804e80:	e13fff17 	ldw	r4,-4(fp)
  804e84:	0804e2c0 	call	804e2c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  804e88:	003fff06 	br	804e88 <_exit+0x1c>
  804e8c:	00804b2c 	andhi	r2,zero,300
