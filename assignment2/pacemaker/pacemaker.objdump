
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00008dd4 memsz 0x00008dd4 flags r-x
    LOAD off    0x00009df4 vaddr 0x00808df4 paddr 0x0080aa28 align 2**12
         filesz 0x00001c34 memsz 0x00001c34 flags rw-
    LOAD off    0x0000c65c vaddr 0x0080c65c paddr 0x0080c65c align 2**12
         filesz 0x00000000 memsz 0x00000504 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008930  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000310  00808ae4  00808ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c34  00808df4  0080aa28  00009df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000504  0080c65c  0080c65c  0000c65c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000ba28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b38  00000000  00000000  0000ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001521  00000000  00000000  0000c588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000223ea  00000000  00000000  0000daa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000678c  00000000  00000000  0002fe93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000103db  00000000  00000000  0003661f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001730  00000000  00000000  000469fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ae4  00000000  00000000  0004812c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f10  00000000  00000000  00049c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0004eb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0004eb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000523eb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000523ee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000523f1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000523f2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000523f3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000523f7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000523fb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000523ff  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00052408  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00052411  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0005241a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  00052420  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  00052439  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00808ae4 l    d  .rodata	00000000 .rodata
00808df4 l    d  .rwdata	00000000 .rwdata
0080c65c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0080c778 l     O .bss	00000018 led0_timer
0080c790 l     O .bss	00000018 led1_timer
0080c760 l     O .bss	00000018 URI_timer
0080c6e8 l     O .bss	00000018 LRI_timer
0080c700 l     O .bss	00000018 PVARP_timer
0080c718 l     O .bss	00000018 VRP_timer
0080c730 l     O .bss	00000018 AEI_timer
0080c748 l     O .bss	00000018 AVI_timer
00000000 l    df *ABS*	00000000 pacemaker_fsm.c
00000000 l    df *ABS*	00000000 fdopen.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801480 l     F .text	00000058 std
0080158c l     F .text	00000008 __fp_lock
00801594 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00808df4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00804364 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
008046b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00804714 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00804814 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00804934 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00804a14 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00804b70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00804c7c l     F .text	000000dc alt_file_locked
00804ee0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00805060 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080aa10 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008054a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008097a4 l     O .rwdata	00001060 jtag_uart
0080a804 l     O .rwdata	00000120 lcd
0080a924 l     O .rwdata	000000c4 uart
008055c8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00805808 l     F .text	00000228 altera_avalon_jtag_uart_irq
00805a30 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080aa1c l     O .rwdata	00000004 colstart
008060ac l     F .text	000000b8 lcd_write_command
00806164 l     F .text	000000d4 lcd_write_data
00806238 l     F .text	000000c4 lcd_clear_screen
008062fc l     F .text	000001ec lcd_repaint_screen
008064e8 l     F .text	000000c8 lcd_scroll_up
008065b0 l     F .text	000002d0 lcd_handle_escape
00806d8c l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00806fec l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008072ac l     F .text	0000009c altera_avalon_uart_irq
00807348 l     F .text	000000e0 altera_avalon_uart_rxirq
00807428 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00807814 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00807a3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00807b94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00808224 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00808c74 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808780 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00808934 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00808a80 l     F .text	00000040 alt_sim_halt
0080c684 g     O .bss	00000001 PRE_g2
0080c685 g     O .bss	00000001 g3b
008043f4 g     F .text	00000070 _isatty_r
00804bd0 g     F .text	0000006c alt_main
008023e0 g     F .text	000000a0 _puts_r
0080c8d0 g     O .bss	00000100 alt_irq
008036c4 g     F .text	00000078 _lseek_r
0080c686 g     O .bss	00000001 g4
0080aa28 g       *ABS*	00000000 __flash_rwdata_start
0080c687 g     O .bss	00000001 g19
00801740 g     F .text	000000a0 __sflags
0080c664 g     O .bss	00000001 URI_t
0080cb60 g       *ABS*	00000000 __alt_heap_start
0080c688 g     O .bss	00000001 g25_e1
0080256c g     F .text	00000068 __sseek
008014e8 g     F .text	000000a4 __sinit
00802724 g     F .text	00000130 __swbuf_r
0080c689 g     O .bss	00000001 g27
008015e8 g     F .text	00000068 __sfmoreglue
00804c5c g     F .text	00000020 __malloc_unlock
0080c660 g     O .bss	00000004 uart_rx_count
0080c68a g     O .bss	00000001 g3
00800280 g     F .text	00000040 LRI_timer_isr
00803a54 g     F .text	000000e0 memmove
0080c68b g     O .bss	00000001 PRE_g27
008015d8 g     F .text	00000010 _cleanup
0080c68c g     O .bss	00000001 g9
0080c68d g     O .bss	00000001 _cg7
0080c690 g     O .bss	00000004 _PRE_GO
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
0080c694 g     O .bss	00000001 _cg15
00800020 g       *ABS*	00000000 __flash_exceptions_start
00804380 g     F .text	00000074 _fstat_r
0080c6cc g     O .bss	00000004 errno
008024e0 g     F .text	00000014 __srget
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080c695 g     O .bss	00000001 _cg12
0080c6d4 g     O .bss	00000004 alt_argv
008129e8 g       *ABS*	00000000 _gp
00808360 g     F .text	00000030 usleep
00800810 g     F .text	00000044 reset
0080c696 g     O .bss	00000001 g1
008003e8 g     F .text	00000064 process_button_input
00809624 g     O .rwdata	00000180 alt_fd_list
00807cbc g     F .text	00000094 alt_find_dev
008039b4 g     F .text	000000a0 memcpy
008015cc g     F .text	0000000c _cleanup_r
008082e8 g     F .text	00000078 alt_io_redirect
00808ae4 g       *ABS*	00000000 __DTOR_END__
0080c697 g     O .bss	00000001 g12
00802480 g     F .text	00000014 puts
0080c665 g     O .bss	00000001 VS
0080c666 g     O .bss	00000001 AEI_t
00800200 g     F .text	00000040 URI_timer_isr
00805c48 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00808a70 g     F .text	00000008 __udivsi3
00804874 g     F .text	000000c0 isatty
0080c698 g     O .bss	00000001 g17
008084fc g     F .text	00000090 alt_icache_flush
0080c6c0 g     O .bss	00000004 __malloc_top_pad
00803228 g     F .text	0000049c __sfvwrite_r
008024f4 g     F .text	00000070 _sbrk_r
00803b34 g     F .text	00000078 _read_r
008002c0 g     F .text	00000040 PVARP_timer_isr
0080aa08 g     O .rwdata	00000004 alt_max_fd
0080c699 g     O .bss	00000001 PRE_g8
00802a94 g     F .text	00000110 _fclose_r
00802db4 g     F .text	00000034 fflush
0080c6c4 g     O .bss	00000004 __malloc_max_sbrked_mem
0080c69a g     O .bss	00000001 g18
008013f0 g     F .text	00000090 _fgetc_r
00804a80 g     F .text	000000f0 lseek
0080c65c g     O .bss	00000004 led_reg
0080a9ec g     O .rwdata	00000004 _global_impure_ptr
00803bac g     F .text	000005f4 _realloc_r
0080cb60 g       *ABS*	00000000 __bss_end
0080812c g     F .text	000000f8 alt_iic_isr_register
00805274 g     F .text	0000010c alt_tick
00800520 g     F .text	000000b4 process_led_output
008071e4 g     F .text	000000c8 altera_avalon_uart_init
0080aa24 g     O .rwdata	00000004 __ctype_ptr
008015b4 g     F .text	00000018 __fp_lock_all
008080e4 g     F .text	00000048 alt_ic_irq_enabled
0080c69b g     O .bss	00000001 _cg21
008051dc g     F .text	00000098 alt_alarm_stop
0080c6e4 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
008095fc g     O .rwdata	00000028 alt_dev_null
00807a9c g     F .text	00000044 alt_dcache_flush_all
0080c69c g     O .bss	00000001 g21
0080aa28 g       *ABS*	00000000 __ram_rwdata_end
0080c69d g     O .bss	00000001 g5
0080aa00 g     O .rwdata	00000008 alt_dev_list
00801844 g     F .text	00000058 _fputc_r
00805380 g     F .text	00000120 write
008022f8 g     F .text	000000e8 _putc_r
0080c69e g     O .bss	00000001 g2
0080c69f g     O .bss	00000001 g7
00808df4 g       *ABS*	00000000 __ram_rodata_end
00804740 g     F .text	000000d4 fstat
00808a78 g     F .text	00000008 __umodsi3
00800240 g     F .text	00000040 AVI_timer_isr
00800300 g     F .text	00000040 VRP_timer_isr
0080cb60 g       *ABS*	00000000 end
0080c6a0 g     O .bss	00000001 PRE_g4
00806880 g     F .text	0000050c altera_avalon_lcd_16207_write
0080c668 g     O .bss	00000004 fdterm
00807874 g     F .text	000001c8 altera_avalon_uart_write
0080c6a1 g     O .bss	00000001 g23
00805748 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080c66c g     O .bss	00000001 StartAVI
00808ae0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080705c g     F .text	00000090 alt_avalon_timer_sc_init
00807144 g     F .text	00000058 altera_avalon_uart_write_fd
0080719c g     F .text	00000048 altera_avalon_uart_close_fd
00805e6c g     F .text	00000240 altera_avalon_jtag_uart_write
008014d8 g     F .text	00000004 __sfp_lock_acquire
008038d0 g     F .text	000000e4 memchr
0080c6a2 g     O .bss	00000001 g14
00802f14 g     F .text	00000314 _free_r
00808784 g     F .text	000001b0 __call_exitprocs
00802494 g     F .text	0000004c __srget_r
0080a9f4 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
0080c6dc g     O .bss	00000004 _alt_tick_rate
0080c6e0 g     O .bss	00000004 _alt_nticks
0080c6a3 g     O .bss	00000001 PRE_g6
00804f40 g     F .text	00000120 read
00805534 g     F .text	00000094 alt_sys_init
0080864c g     F .text	00000134 __register_exitproc
0080c670 g     O .bss	00000004 uart_fp
00805ae0 g     F .text	00000074 altera_avalon_jtag_uart_close
0080c6a4 g     O .bss	00000001 PRE_g22
00808df4 g       *ABS*	00000000 __ram_rwdata_start
00808ae4 g       *ABS*	00000000 __ram_rodata_start
0080c7a8 g     O .bss	00000028 __malloc_current_mallinfo
0080c674 g     O .bss	00000001 PVARP_t
0080c6a5 g     O .bss	00000001 _cg5
00805600 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080129c g     F .text	000000a0 _fdopen_r
00807e70 g     F .text	000000b8 alt_get_fd
008083b0 g     F .text	0000014c alt_busy_sleep
0080c6a6 g     O .bss	00000001 g15
00802a24 g     F .text	00000070 _close_r
0080c6a7 g     O .bss	00000001 _GO
008085d8 g     F .text	00000074 memcmp
008056b0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080c6a8 g     O .bss	00000001 PRE_g11
0080cb60 g       *ABS*	00000000 __alt_stack_base
008056f8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008004b4 g     F .text	0000006c process_uart_output
0080133c g     F .text	0000001c fdopen
00800340 g     F .text	00000040 AEI_timer_isr
008028e8 g     F .text	0000013c __swsetup_r
00800854 g     F .text	00000a48 tick
00801650 g     F .text	000000f0 __sfp
0080c6a9 g     O .bss	00000001 g20
008091f4 g     O .rwdata	00000408 __malloc_av_
008014e4 g     F .text	00000004 __sinit_lock_release
0080c675 g     O .bss	00000001 VRP_t
00802650 g     F .text	00000060 __sread
00807d50 g     F .text	00000120 alt_find_file
00807ae0 g     F .text	000000b4 alt_dev_llist_insert
00804c3c g     F .text	00000020 __malloc_lock
00805120 g     F .text	000000bc sbrk
00802bb8 g     F .text	000001fc _fflush_r
0080c65c g       *ABS*	00000000 __bss_start
0080215c g     F .text	00000098 memset
008005d4 g     F .text	0000023c main
0080c6d8 g     O .bss	00000004 alt_envp
0080c6c8 g     O .bss	00000004 __malloc_max_total_mem
0080044c g     F .text	00000068 process_uart_input
00805658 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0080c678 g     O .bss	00000004 buttons
00802854 g     F .text	0000001c __swbuf
00806e58 g     F .text	0000013c altera_avalon_lcd_16207_init
00802564 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00802ba4 g     F .text	00000014 fclose
0080c9d0 g     O .bss	00000190 _atexit0
00801a1c g     F .text	00000740 _malloc_r
0080aa0c g     O .rwdata	00000004 alt_errno
00801964 g     F .text	000000b8 _fwalk
008021f4 g     F .text	00000104 putc
008089b0 g     F .text	00000060 __divsi3
00802de8 g     F .text	0000012c _malloc_trim_r
00808ae4 g       *ABS*	00000000 __CTOR_END__
00808ae4 g       *ABS*	00000000 __flash_rodata_start
00808ae4 g       *ABS*	00000000 __DTOR_LIST__
00805500 g     F .text	00000034 alt_irq_init
008050c0 g     F .text	00000060 alt_release_fd
00801358 g     F .text	00000098 fgetc
0080c6aa g     O .bss	00000001 g13
0080c6ab g     O .bss	00000001 g8
0080858c g     F .text	00000014 atexit
00802870 g     F .text	00000078 _write_r
0080a9e8 g     O .rwdata	00000004 _impure_ptr
0080c6d0 g     O .bss	00000004 alt_argc
0080c6ac g     O .bss	00000001 g6
0080c6ad g     O .bss	00000001 _cg19
00807c58 g     F .text	00000064 _do_dtors
0080c67c g     O .bss	00000001 AVI_t
008041a0 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
0080159c g     F .text	00000018 __fp_unlock_all
00806f94 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
008017e0 g     F .text	00000064 fputc
0080c6ae g     O .bss	00000001 _cg13
0080c6af g     O .bss	00000001 _cg9
0080a9f8 g     O .rwdata	00000008 alt_fs_list
0080c6b0 g     O .bss	00000001 g0
0080c67d g     O .bss	00000001 VP
0080c6b1 g     O .bss	00000001 _cg17
0080c6b2 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080c6b3 g     O .bss	00000001 g16
0080c6b4 g     O .bss	00000001 _cg24
00807f58 g     F .text	00000050 alt_ic_isr_register
0080c6b5 g     O .bss	00000001 g25
0080aa28 g       *ABS*	00000000 _edata
008070ec g     F .text	00000058 altera_avalon_uart_read_fd
0080cb60 g       *ABS*	00000000 _end
0080c6b6 g     O .bss	00000001 g11
008001b4 g       *ABS*	00000000 __ram_exceptions_end
00805b54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080c6b7 g     O .bss	00000001 g22
00800380 g     F .text	00000034 led0_timer_isr
0080c6b8 g     O .bss	00000001 g28
0080c6b9 g     O .bss	00000001 g16b
00808044 g     F .text	000000a0 alt_ic_irq_disable
008025d4 g     F .text	0000007c __swrite
0080a9f0 g     O .rwdata	00000004 __malloc_trim_threshold
00808390 g     F .text	00000020 altera_nios2_qsys_irq_init
008085a0 g     F .text	00000038 exit
0080189c g     F .text	000000c8 _fwalk_reent
0080c67e g     O .bss	00000001 AS
00808a10 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008014dc g     F .text	00000004 __sfp_lock_release
0080c6ba g     O .bss	00000001 _cg23
0080c6bb g     O .bss	00000001 g29_e2
00808b70 g     O .rodata	00000101 _ctype_
00807584 g     F .text	00000060 altera_avalon_uart_close
0080c67f g     O .bss	00000001 StartRI
00808ac0 g     F .text	00000020 _exit
00804464 g     F .text	00000154 alt_alarm_start
0080373c g     F .text	00000194 __smakebuf_r
0080c680 g     O .bss	00000001 AP
008026b0 g     F .text	00000074 strlen
00804d58 g     F .text	00000188 open
00807f28 g     F .text	00000030 alt_icache_flush_all
0080c6bc g     O .bss	00000001 g29
0080c6bd g     O .bss	00000001 g24
0080c7d0 g     O .bss	000000ff uart_rx_buffer
008003b4 g     F .text	00000034 led1_timer_isr
0080aa20 g     O .rwdata	00000004 alt_priority_mask
0080c681 g     O .bss	00000001 LRI_t
00807fa8 g     F .text	0000009c alt_ic_irq_enable
008075e4 g     F .text	00000230 altera_avalon_uart_read
0080c6be g     O .bss	00000001 g10
0080aa14 g     O .rwdata	00000008 alt_alarm_list
00807bf4 g     F .text	00000064 _do_ctors
0080c6bf g     O .bss	00000001 g26
008045b8 g     F .text	000000fc close
00804994 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
008014e0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18f23404 	addi	r3,r3,-14128
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18f23404 	addi	r3,r3,-14128
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d68a7a14 	ori	gp,gp,10728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10b19714 	ori	r2,r2,50780

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18f2d814 	ori	r3,r3,52064

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08049940 	call	804994 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0804bd00 	call	804bd0 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <URI_timer_isr>:
int fdterm;

/************************************************FUNCTION DECLARATIONS*****************************/

//timer ISR declarations
DECLARE_TIMER_ISR (URI)
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13fff15 	stw	r4,-4(fp)
  800210:	e0bfff17 	ldw	r2,-4(fp)
  800214:	e0bffe15 	stw	r2,-8(fp)
  800218:	e0fffe17 	ldw	r3,-8(fp)
  80021c:	00800044 	movi	r2,1
  800220:	18800015 	stw	r2,0(r3)
  800224:	00800044 	movi	r2,1
  800228:	d0a71f05 	stb	r2,-25476(gp)
  80022c:	0005883a 	mov	r2,zero
  800230:	e037883a 	mov	sp,fp
  800234:	df000017 	ldw	fp,0(sp)
  800238:	dec00104 	addi	sp,sp,4
  80023c:	f800283a 	ret

00800240 <AVI_timer_isr>:
DECLARE_TIMER_ISR (AVI)
  800240:	defffd04 	addi	sp,sp,-12
  800244:	df000215 	stw	fp,8(sp)
  800248:	df000204 	addi	fp,sp,8
  80024c:	e13fff15 	stw	r4,-4(fp)
  800250:	e0bfff17 	ldw	r2,-4(fp)
  800254:	e0bffe15 	stw	r2,-8(fp)
  800258:	e0fffe17 	ldw	r3,-8(fp)
  80025c:	00800044 	movi	r2,1
  800260:	18800015 	stw	r2,0(r3)
  800264:	00800044 	movi	r2,1
  800268:	d0a72505 	stb	r2,-25452(gp)
  80026c:	0005883a 	mov	r2,zero
  800270:	e037883a 	mov	sp,fp
  800274:	df000017 	ldw	fp,0(sp)
  800278:	dec00104 	addi	sp,sp,4
  80027c:	f800283a 	ret

00800280 <LRI_timer_isr>:
DECLARE_TIMER_ISR (LRI)
  800280:	defffd04 	addi	sp,sp,-12
  800284:	df000215 	stw	fp,8(sp)
  800288:	df000204 	addi	fp,sp,8
  80028c:	e13fff15 	stw	r4,-4(fp)
  800290:	e0bfff17 	ldw	r2,-4(fp)
  800294:	e0bffe15 	stw	r2,-8(fp)
  800298:	e0fffe17 	ldw	r3,-8(fp)
  80029c:	00800044 	movi	r2,1
  8002a0:	18800015 	stw	r2,0(r3)
  8002a4:	00800044 	movi	r2,1
  8002a8:	d0a72645 	stb	r2,-25447(gp)
  8002ac:	0005883a 	mov	r2,zero
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	df000017 	ldw	fp,0(sp)
  8002b8:	dec00104 	addi	sp,sp,4
  8002bc:	f800283a 	ret

008002c0 <PVARP_timer_isr>:
DECLARE_TIMER_ISR (PVARP)
  8002c0:	defffd04 	addi	sp,sp,-12
  8002c4:	df000215 	stw	fp,8(sp)
  8002c8:	df000204 	addi	fp,sp,8
  8002cc:	e13fff15 	stw	r4,-4(fp)
  8002d0:	e0bfff17 	ldw	r2,-4(fp)
  8002d4:	e0bffe15 	stw	r2,-8(fp)
  8002d8:	e0fffe17 	ldw	r3,-8(fp)
  8002dc:	00800044 	movi	r2,1
  8002e0:	18800015 	stw	r2,0(r3)
  8002e4:	00800044 	movi	r2,1
  8002e8:	d0a72305 	stb	r2,-25460(gp)
  8002ec:	0005883a 	mov	r2,zero
  8002f0:	e037883a 	mov	sp,fp
  8002f4:	df000017 	ldw	fp,0(sp)
  8002f8:	dec00104 	addi	sp,sp,4
  8002fc:	f800283a 	ret

00800300 <VRP_timer_isr>:
DECLARE_TIMER_ISR (VRP)
  800300:	defffd04 	addi	sp,sp,-12
  800304:	df000215 	stw	fp,8(sp)
  800308:	df000204 	addi	fp,sp,8
  80030c:	e13fff15 	stw	r4,-4(fp)
  800310:	e0bfff17 	ldw	r2,-4(fp)
  800314:	e0bffe15 	stw	r2,-8(fp)
  800318:	e0fffe17 	ldw	r3,-8(fp)
  80031c:	00800044 	movi	r2,1
  800320:	18800015 	stw	r2,0(r3)
  800324:	00800044 	movi	r2,1
  800328:	d0a72345 	stb	r2,-25459(gp)
  80032c:	0005883a 	mov	r2,zero
  800330:	e037883a 	mov	sp,fp
  800334:	df000017 	ldw	fp,0(sp)
  800338:	dec00104 	addi	sp,sp,4
  80033c:	f800283a 	ret

00800340 <AEI_timer_isr>:
DECLARE_TIMER_ISR (AEI)
  800340:	defffd04 	addi	sp,sp,-12
  800344:	df000215 	stw	fp,8(sp)
  800348:	df000204 	addi	fp,sp,8
  80034c:	e13fff15 	stw	r4,-4(fp)
  800350:	e0bfff17 	ldw	r2,-4(fp)
  800354:	e0bffe15 	stw	r2,-8(fp)
  800358:	e0fffe17 	ldw	r3,-8(fp)
  80035c:	00800044 	movi	r2,1
  800360:	18800015 	stw	r2,0(r3)
  800364:	00800044 	movi	r2,1
  800368:	d0a71f85 	stb	r2,-25474(gp)
  80036c:	0005883a 	mov	r2,zero
  800370:	e037883a 	mov	sp,fp
  800374:	df000017 	ldw	fp,0(sp)
  800378:	dec00104 	addi	sp,sp,4
  80037c:	f800283a 	ret

00800380 <led0_timer_isr>:

DECLARE_LED_TIMER_ISR(0)
  800380:	defffe04 	addi	sp,sp,-8
  800384:	df000115 	stw	fp,4(sp)
  800388:	df000104 	addi	fp,sp,4
  80038c:	e13fff15 	stw	r4,-4(fp)
  800390:	d0e71d17 	ldw	r3,-25484(gp)
  800394:	00bfff84 	movi	r2,-2
  800398:	1884703a 	and	r2,r3,r2
  80039c:	d0a71d15 	stw	r2,-25484(gp)
  8003a0:	0005883a 	mov	r2,zero
  8003a4:	e037883a 	mov	sp,fp
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00104 	addi	sp,sp,4
  8003b0:	f800283a 	ret

008003b4 <led1_timer_isr>:
DECLARE_LED_TIMER_ISR(1)
  8003b4:	defffe04 	addi	sp,sp,-8
  8003b8:	df000115 	stw	fp,4(sp)
  8003bc:	df000104 	addi	fp,sp,4
  8003c0:	e13fff15 	stw	r4,-4(fp)
  8003c4:	d0e71d17 	ldw	r3,-25484(gp)
  8003c8:	00bfff44 	movi	r2,-3
  8003cc:	1884703a 	and	r2,r3,r2
  8003d0:	d0a71d15 	stw	r2,-25484(gp)
  8003d4:	0005883a 	mov	r2,zero
  8003d8:	e037883a 	mov	sp,fp
  8003dc:	df000017 	ldw	fp,0(sp)
  8003e0:	dec00104 	addi	sp,sp,4
  8003e4:	f800283a 	ret

008003e8 <process_button_input>:

//Populate AS and VS with input from the buttons
void process_button_input() {
  8003e8:	defffe04 	addi	sp,sp,-8
  8003ec:	df000115 	stw	fp,4(sp)
  8003f0:	df000104 	addi	fp,sp,4
	//Button handling. An atrial sense is mapped to KEY0 and a ventricular sense is mapped
	//to KEY1
	int newbuttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  8003f4:	00804074 	movhi	r2,257
  8003f8:	10842804 	addi	r2,r2,4256
  8003fc:	10800037 	ldwio	r2,0(r2)
  800400:	e0bfff15 	stw	r2,-4(fp)
	if (newbuttons != buttons) {
  800404:	d0e72417 	ldw	r3,-25456(gp)
  800408:	e0bfff17 	ldw	r2,-4(fp)
  80040c:	10c00b26 	beq	r2,r3,80043c <process_button_input+0x54>
		buttons = newbuttons;
  800410:	e0bfff17 	ldw	r2,-4(fp)
  800414:	d0a72415 	stw	r2,-25456(gp)

		AS = (~buttons & (1 << 0)) >> 0;
  800418:	d0a72417 	ldw	r2,-25456(gp)
  80041c:	0084303a 	nor	r2,zero,r2
  800420:	1080004c 	andi	r2,r2,1
  800424:	d0a72585 	stb	r2,-25450(gp)
		VS = (~buttons & (1 << 1)) >> 1;
  800428:	d0a72417 	ldw	r2,-25456(gp)
  80042c:	0084303a 	nor	r2,zero,r2
  800430:	1080008c 	andi	r2,r2,2
  800434:	1005d07a 	srai	r2,r2,1
  800438:	d0a71f45 	stb	r2,-25475(gp)
	}
}
  80043c:	e037883a 	mov	sp,fp
  800440:	df000017 	ldw	fp,0(sp)
  800444:	dec00104 	addi	sp,sp,4
  800448:	f800283a 	ret

0080044c <process_uart_input>:

//Populate AS and VS with input from the UART
void process_uart_input() {
  80044c:	defffd04 	addi	sp,sp,-12
  800450:	dfc00215 	stw	ra,8(sp)
  800454:	df000115 	stw	fp,4(sp)
  800458:	df000104 	addi	fp,sp,4
	char c= fgetc(uart_fp);
  80045c:	d1272217 	ldw	r4,-25464(gp)
  800460:	08013580 	call	801358 <fgetc>
  800464:	e0bfff05 	stb	r2,-4(fp)
	if (c == 'A') {
  800468:	e0bfff07 	ldb	r2,-4(fp)
  80046c:	10801058 	cmpnei	r2,r2,65
  800470:	1000031e 	bne	r2,zero,800480 <process_uart_input+0x34>
		AS = 1;
  800474:	00800044 	movi	r2,1
  800478:	d0a72585 	stb	r2,-25450(gp)
  80047c:	00000806 	br	8004a0 <process_uart_input+0x54>
	} else if (c == 'V') {
  800480:	e0bfff07 	ldb	r2,-4(fp)
  800484:	10801598 	cmpnei	r2,r2,86
  800488:	1000031e 	bne	r2,zero,800498 <process_uart_input+0x4c>
		VS = 1;
  80048c:	00800044 	movi	r2,1
  800490:	d0a71f45 	stb	r2,-25475(gp)
  800494:	00000206 	br	8004a0 <process_uart_input+0x54>
	}
	else {
		VS = 0;
  800498:	d0271f45 	stb	zero,-25475(gp)
		AS = 0;
  80049c:	d0272585 	stb	zero,-25450(gp)
	}
}
  8004a0:	e037883a 	mov	sp,fp
  8004a4:	dfc00117 	ldw	ra,4(sp)
  8004a8:	df000017 	ldw	fp,0(sp)
  8004ac:	dec00204 	addi	sp,sp,8
  8004b0:	f800283a 	ret

008004b4 <process_uart_output>:

//Output AP and VP to the UART terminal
void process_uart_output() {
  8004b4:	defffe04 	addi	sp,sp,-8
  8004b8:	dfc00115 	stw	ra,4(sp)
  8004bc:	df000015 	stw	fp,0(sp)
  8004c0:	d839883a 	mov	fp,sp
	if (AP) {
  8004c4:	d0a72603 	ldbu	r2,-25448(gp)
  8004c8:	10803fcc 	andi	r2,r2,255
  8004cc:	1080201c 	xori	r2,r2,128
  8004d0:	10bfe004 	addi	r2,r2,-128
  8004d4:	1005003a 	cmpeq	r2,r2,zero
  8004d8:	1000031e 	bne	r2,zero,8004e8 <process_uart_output+0x34>
		fputc('A', uart_fp);
  8004dc:	d1672217 	ldw	r5,-25464(gp)
  8004e0:	01001044 	movi	r4,65
  8004e4:	08017e00 	call	8017e0 <fputc>
	}
	if (VP) {
  8004e8:	d0a72543 	ldbu	r2,-25451(gp)
  8004ec:	10803fcc 	andi	r2,r2,255
  8004f0:	1080201c 	xori	r2,r2,128
  8004f4:	10bfe004 	addi	r2,r2,-128
  8004f8:	1005003a 	cmpeq	r2,r2,zero
  8004fc:	1000031e 	bne	r2,zero,80050c <process_uart_output+0x58>
		fputc('V', uart_fp);
  800500:	d1672217 	ldw	r5,-25464(gp)
  800504:	01001584 	movi	r4,86
  800508:	08017e00 	call	8017e0 <fputc>
	}
}
  80050c:	e037883a 	mov	sp,fp
  800510:	dfc00117 	ldw	ra,4(sp)
  800514:	df000017 	ldw	fp,0(sp)
  800518:	dec00204 	addi	sp,sp,8
  80051c:	f800283a 	ret

00800520 <process_led_output>:

//Output AP and VP to the LED's
void process_led_output() {
  800520:	defffe04 	addi	sp,sp,-8
  800524:	dfc00115 	stw	ra,4(sp)
  800528:	df000015 	stw	fp,0(sp)
  80052c:	d839883a 	mov	fp,sp
	if (AP) {
  800530:	d0a72603 	ldbu	r2,-25448(gp)
  800534:	10803fcc 	andi	r2,r2,255
  800538:	1080201c 	xori	r2,r2,128
  80053c:	10bfe004 	addi	r2,r2,-128
  800540:	1005003a 	cmpeq	r2,r2,zero
  800544:	10000a1e 	bne	r2,zero,800570 <process_led_output+0x50>
		PULSE_LED(0);
  800548:	d0a71d17 	ldw	r2,-25484(gp)
  80054c:	10800054 	ori	r2,r2,1
  800550:	d0a71d15 	stw	r2,-25484(gp)
  800554:	01002074 	movhi	r4,129
  800558:	2131de04 	addi	r4,r4,-14472
  80055c:	01400c84 	movi	r5,50
  800560:	01802034 	movhi	r6,128
  800564:	3180e004 	addi	r6,r6,896
  800568:	d1e71d04 	addi	r7,gp,-25484
  80056c:	08044640 	call	804464 <alt_alarm_start>
	}
	if (VP) {
  800570:	d0a72543 	ldbu	r2,-25451(gp)
  800574:	10803fcc 	andi	r2,r2,255
  800578:	1080201c 	xori	r2,r2,128
  80057c:	10bfe004 	addi	r2,r2,-128
  800580:	1005003a 	cmpeq	r2,r2,zero
  800584:	10000a1e 	bne	r2,zero,8005b0 <process_led_output+0x90>
		PULSE_LED(1);
  800588:	d0a71d17 	ldw	r2,-25484(gp)
  80058c:	10800094 	ori	r2,r2,2
  800590:	d0a71d15 	stw	r2,-25484(gp)
  800594:	01002074 	movhi	r4,129
  800598:	2131e404 	addi	r4,r4,-14448
  80059c:	01400c84 	movi	r5,50
  8005a0:	01802034 	movhi	r6,128
  8005a4:	3180ed04 	addi	r6,r6,948
  8005a8:	d1e71d04 	addi	r7,gp,-25484
  8005ac:	08044640 	call	804464 <alt_alarm_start>
	}
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,led_reg);
  8005b0:	d0e71d17 	ldw	r3,-25484(gp)
  8005b4:	00804074 	movhi	r2,257
  8005b8:	10841804 	addi	r2,r2,4192
  8005bc:	10c00035 	stwio	r3,0(r2)
}
  8005c0:	e037883a 	mov	sp,fp
  8005c4:	dfc00117 	ldw	ra,4(sp)
  8005c8:	df000017 	ldw	fp,0(sp)
  8005cc:	dec00204 	addi	sp,sp,8
  8005d0:	f800283a 	ret

008005d4 <main>:

int main()
{
  8005d4:	defffc04 	addi	sp,sp,-16
  8005d8:	dfc00315 	stw	ra,12(sp)
  8005dc:	df000215 	stw	fp,8(sp)
  8005e0:	df000204 	addi	fp,sp,8
	reset();
  8005e4:	08008100 	call	800810 <reset>

	printf("Initializing pacemaker...\n");
  8005e8:	01002074 	movhi	r4,129
  8005ec:	2122b904 	addi	r4,r4,-29980
  8005f0:	08024800 	call	802480 <puts>
	//get the initial mode from the switches
	int mode = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3;
  8005f4:	00804074 	movhi	r2,257
  8005f8:	10842404 	addi	r2,r2,4240
  8005fc:	10800037 	ldwio	r2,0(r2)
  800600:	108000cc 	andi	r2,r2,3
  800604:	e0bffe15 	stw	r2,-8(fp)

	//initialise the button registers
	IOWR_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE, 0);
  800608:	00804074 	movhi	r2,257
  80060c:	10842804 	addi	r2,r2,4256
  800610:	10000035 	stwio	zero,0(r2)
	buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800614:	00804074 	movhi	r2,257
  800618:	10842804 	addi	r2,r2,4256
  80061c:	10800037 	ldwio	r2,0(r2)
  800620:	d0a72415 	stw	r2,-25456(gp)

	//Set up NON_BLOCKING UART
	fdterm = open(UART_NAME, O_RDWR | O_NONBLOCK, "rw+");
  800624:	01002074 	movhi	r4,129
  800628:	2122c004 	addi	r4,r4,-29952
  80062c:	01500084 	movi	r5,16386
  800630:	01802074 	movhi	r6,129
  800634:	31a2c304 	addi	r6,r6,-29940
  800638:	0804d580 	call	804d58 <open>
  80063c:	d0a72015 	stw	r2,-25472(gp)
	uart_fp = fdopen(fdterm, "rw+");
  800640:	d1272017 	ldw	r4,-25472(gp)
  800644:	01402074 	movhi	r5,129
  800648:	2962c304 	addi	r5,r5,-29940
  80064c:	080133c0 	call	80133c <fdopen>
  800650:	d0a72215 	stw	r2,-25464(gp)
  800654:	00000006 	br	800658 <main+0x84>

	while (1) {
		// if Mode switches change:
		if (mode != (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3)) {
  800658:	00804074 	movhi	r2,257
  80065c:	10842404 	addi	r2,r2,4240
  800660:	10800037 	ldwio	r2,0(r2)
  800664:	10c000cc 	andi	r3,r2,3
  800668:	e0bffe17 	ldw	r2,-8(fp)
  80066c:	18800826 	beq	r3,r2,800690 <main+0xbc>
			printf("Switching mode...\n");
  800670:	01002074 	movhi	r4,129
  800674:	2122c404 	addi	r4,r4,-29936
  800678:	08024800 	call	802480 <puts>
			mode = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x3;
  80067c:	00804074 	movhi	r2,257
  800680:	10842404 	addi	r2,r2,4240
  800684:	10800037 	ldwio	r2,0(r2)
  800688:	108000cc 	andi	r2,r2,3
  80068c:	e0bffe15 	stw	r2,-8(fp)
		}

		//Reset and start URI and LRI timers if necessary
		//Also restart PVARP, VRP, and AEI
		if (FSMVAR(StartRI)) {
  800690:	d0a725c3 	ldbu	r2,-25449(gp)
  800694:	10803fcc 	andi	r2,r2,255
  800698:	1080201c 	xori	r2,r2,128
  80069c:	10bfe004 	addi	r2,r2,-128
  8006a0:	1005003a 	cmpeq	r2,r2,zero
  8006a4:	1000371e 	bne	r2,zero,800784 <main+0x1b0>
			RESTART_TIMER(URI);
  8006a8:	d0271f05 	stb	zero,-25476(gp)
  8006ac:	01002074 	movhi	r4,129
  8006b0:	2131d804 	addi	r4,r4,-14496
  8006b4:	08051dc0 	call	8051dc <alt_alarm_stop>
  8006b8:	01002074 	movhi	r4,129
  8006bc:	2131d804 	addi	r4,r4,-14496
  8006c0:	01409604 	movi	r5,600
  8006c4:	01802034 	movhi	r6,128
  8006c8:	31808004 	addi	r6,r6,512
  8006cc:	d1e71f04 	addi	r7,gp,-25476
  8006d0:	08044640 	call	804464 <alt_alarm_start>
			RESTART_TIMER(LRI);
  8006d4:	d0272645 	stb	zero,-25447(gp)
  8006d8:	01002074 	movhi	r4,129
  8006dc:	2131ba04 	addi	r4,r4,-14616
  8006e0:	08051dc0 	call	8051dc <alt_alarm_stop>
  8006e4:	01002074 	movhi	r4,129
  8006e8:	2131ba04 	addi	r4,r4,-14616
  8006ec:	0140ed84 	movi	r5,950
  8006f0:	01802034 	movhi	r6,128
  8006f4:	3180a004 	addi	r6,r6,640
  8006f8:	d1e72644 	addi	r7,gp,-25447
  8006fc:	08044640 	call	804464 <alt_alarm_start>
			RESTART_TIMER(PVARP);
  800700:	d0272305 	stb	zero,-25460(gp)
  800704:	01002074 	movhi	r4,129
  800708:	2131c004 	addi	r4,r4,-14592
  80070c:	08051dc0 	call	8051dc <alt_alarm_stop>
  800710:	01002074 	movhi	r4,129
  800714:	2131c004 	addi	r4,r4,-14592
  800718:	01400c84 	movi	r5,50
  80071c:	01802034 	movhi	r6,128
  800720:	3180b004 	addi	r6,r6,704
  800724:	d1e72304 	addi	r7,gp,-25460
  800728:	08044640 	call	804464 <alt_alarm_start>
			RESTART_TIMER(VRP);
  80072c:	d0272345 	stb	zero,-25459(gp)
  800730:	01002074 	movhi	r4,129
  800734:	2131c604 	addi	r4,r4,-14568
  800738:	08051dc0 	call	8051dc <alt_alarm_stop>
  80073c:	01002074 	movhi	r4,129
  800740:	2131c604 	addi	r4,r4,-14568
  800744:	01402584 	movi	r5,150
  800748:	01802034 	movhi	r6,128
  80074c:	3180c004 	addi	r6,r6,768
  800750:	d1e72344 	addi	r7,gp,-25459
  800754:	08044640 	call	804464 <alt_alarm_start>
			RESTART_TIMER(AEI);
  800758:	d0271f85 	stb	zero,-25474(gp)
  80075c:	01002074 	movhi	r4,129
  800760:	2131cc04 	addi	r4,r4,-14544
  800764:	08051dc0 	call	8051dc <alt_alarm_stop>
  800768:	01002074 	movhi	r4,129
  80076c:	2131cc04 	addi	r4,r4,-14544
  800770:	0140c804 	movi	r5,800
  800774:	01802034 	movhi	r6,128
  800778:	3180d004 	addi	r6,r6,832
  80077c:	d1e71f84 	addi	r7,gp,-25474
  800780:	08044640 	call	804464 <alt_alarm_start>
		}

		//Restart AVI timer.
		if (FSMVAR(StartAVI)) {
  800784:	d0a72103 	ldbu	r2,-25468(gp)
  800788:	10803fcc 	andi	r2,r2,255
  80078c:	1080201c 	xori	r2,r2,128
  800790:	10bfe004 	addi	r2,r2,-128
  800794:	1005003a 	cmpeq	r2,r2,zero
  800798:	10000b1e 	bne	r2,zero,8007c8 <main+0x1f4>
			RESTART_TIMER(AVI);
  80079c:	d0272505 	stb	zero,-25452(gp)
  8007a0:	01002074 	movhi	r4,129
  8007a4:	2131d204 	addi	r4,r4,-14520
  8007a8:	08051dc0 	call	8051dc <alt_alarm_stop>
  8007ac:	01002074 	movhi	r4,129
  8007b0:	2131d204 	addi	r4,r4,-14520
  8007b4:	01404b04 	movi	r5,300
  8007b8:	01802034 	movhi	r6,128
  8007bc:	31809004 	addi	r6,r6,576
  8007c0:	d1e72504 	addi	r7,gp,-25452
  8007c4:	08044640 	call	804464 <alt_alarm_start>
		}

		switch(mode) {
  8007c8:	e0bffe17 	ldw	r2,-8(fp)
  8007cc:	e0bfff15 	stw	r2,-4(fp)
  8007d0:	e0ffff17 	ldw	r3,-4(fp)
  8007d4:	1805003a 	cmpeq	r2,r3,zero
  8007d8:	1000041e 	bne	r2,zero,8007ec <main+0x218>
  8007dc:	e0ffff17 	ldw	r3,-4(fp)
  8007e0:	18800060 	cmpeqi	r2,r3,1
  8007e4:	1000051e 	bne	r2,zero,8007fc <main+0x228>
  8007e8:	003f9b06 	br	800658 <main+0x84>
		case 0:		//Mode 0
			process_button_input();
  8007ec:	08003e80 	call	8003e8 <process_button_input>
			tick();
  8007f0:	08008540 	call	800854 <tick>
			process_led_output();
  8007f4:	08005200 	call	800520 <process_led_output>
			break;
  8007f8:	003f9706 	br	800658 <main+0x84>
		case 1:		//Mode 1
			process_uart_input();
  8007fc:	080044c0 	call	80044c <process_uart_input>
			tick();
  800800:	08008540 	call	800854 <tick>
			process_led_output();
  800804:	08005200 	call	800520 <process_led_output>
			process_uart_output();
  800808:	08004b40 	call	8004b4 <process_uart_output>
			break;
		}
	}
  80080c:	003f9206 	br	800658 <main+0x84>

00800810 <reset>:
char _cg13;
char _cg15;
char g25_e1;
char g29_e2;
int _PRE_GO;
void reset(){
  800810:	deffff04 	addi	sp,sp,-4
  800814:	df000015 	stw	fp,0(sp)
  800818:	d839883a 	mov	fp,sp
   _GO = 1;
  80081c:	00800044 	movi	r2,1
  800820:	d0a72fc5 	stb	r2,-25409(gp)
   _PRE_GO = 0;
  800824:	d0272a15 	stw	zero,-25432(gp)
   PRE_g2 = 0;
  800828:	d0272705 	stb	zero,-25444(gp)
   PRE_g4 = 0;
  80082c:	d0272e05 	stb	zero,-25416(gp)
   PRE_g6 = 0;
  800830:	d0272ec5 	stb	zero,-25413(gp)
   PRE_g8 = 0;
  800834:	d0272c45 	stb	zero,-25423(gp)
   PRE_g11 = 0;
  800838:	d0273005 	stb	zero,-25408(gp)
   PRE_g22 = 0;
  80083c:	d0272f05 	stb	zero,-25412(gp)
   PRE_g27 = 0;
  800840:	d02728c5 	stb	zero,-25437(gp)
   return;
}
  800844:	e037883a 	mov	sp,fp
  800848:	df000017 	ldw	fp,0(sp)
  80084c:	dec00104 	addi	sp,sp,4
  800850:	f800283a 	ret

00800854 <tick>:
void tick(){
  800854:	deffeb04 	addi	sp,sp,-84
  800858:	df001415 	stw	fp,80(sp)
  80085c:	df001404 	addi	fp,sp,80
   if(_PRE_GO == 1){
  800860:	d0a72a17 	ldw	r2,-25432(gp)
  800864:	10800058 	cmpnei	r2,r2,1
  800868:	1000011e 	bne	r2,zero,800870 <tick+0x1c>
      _GO = 0;
  80086c:	d0272fc5 	stb	zero,-25409(gp)
   }
   {
      g0 = _GO;
  800870:	d0a72fc3 	ldbu	r2,-25409(gp)
  800874:	d0a73205 	stb	r2,-25400(gp)
      g1 = g0;
  800878:	d0a73203 	ldbu	r2,-25400(gp)
  80087c:	d0a72b85 	stb	r2,-25426(gp)
      g28 =(PRE_g27);
  800880:	d0a728c3 	ldbu	r2,-25437(gp)
  800884:	d0a73405 	stb	r2,-25392(gp)
      g26 = g0;
  800888:	d0a73203 	ldbu	r2,-25400(gp)
  80088c:	d0a735c5 	stb	r2,-25385(gp)
      g27 =(g28||g26);
  800890:	d0a73403 	ldbu	r2,-25392(gp)
  800894:	10803fcc 	andi	r2,r2,255
  800898:	1080201c 	xori	r2,r2,128
  80089c:	10bfe004 	addi	r2,r2,-128
  8008a0:	1004c03a 	cmpne	r2,r2,zero
  8008a4:	1000061e 	bne	r2,zero,8008c0 <tick+0x6c>
  8008a8:	d0a735c3 	ldbu	r2,-25385(gp)
  8008ac:	10803fcc 	andi	r2,r2,255
  8008b0:	1080201c 	xori	r2,r2,128
  8008b4:	10bfe004 	addi	r2,r2,-128
  8008b8:	1005003a 	cmpeq	r2,r2,zero
  8008bc:	1000031e 	bne	r2,zero,8008cc <tick+0x78>
  8008c0:	00800044 	movi	r2,1
  8008c4:	e0bfff15 	stw	r2,-4(fp)
  8008c8:	00000106 	br	8008d0 <tick+0x7c>
  8008cc:	e03fff15 	stw	zero,-4(fp)
  8008d0:	e0ffff17 	ldw	r3,-4(fp)
  8008d4:	1805883a 	mov	r2,r3
  8008d8:	d0a72845 	stb	r2,-25439(gp)
      if(g27){
  8008dc:	d0a72843 	ldbu	r2,-25439(gp)
  8008e0:	10803fcc 	andi	r2,r2,255
  8008e4:	1080201c 	xori	r2,r2,128
  8008e8:	10bfe004 	addi	r2,r2,-128
  8008ec:	1005003a 	cmpeq	r2,r2,zero
  8008f0:	1000041e 	bne	r2,zero,800904 <tick+0xb0>
         VP = 0;
  8008f4:	d0272545 	stb	zero,-25451(gp)
         AP = 0;
  8008f8:	d0272605 	stb	zero,-25448(gp)
         StartRI = 0;
  8008fc:	d02725c5 	stb	zero,-25449(gp)
         StartAVI = 0;
  800900:	d0272105 	stb	zero,-25468(gp)
      }
      g9 =(PRE_g8);
  800904:	d0a72c43 	ldbu	r2,-25423(gp)
  800908:	d0a72905 	stb	r2,-25436(gp)
      _cg9 = AS;
  80090c:	d0a72583 	ldbu	r2,-25450(gp)
  800910:	d0a731c5 	stb	r2,-25401(gp)
      g15 =(g9&&(!(_cg9)));
  800914:	d0a72903 	ldbu	r2,-25436(gp)
  800918:	10803fcc 	andi	r2,r2,255
  80091c:	1080201c 	xori	r2,r2,128
  800920:	10bfe004 	addi	r2,r2,-128
  800924:	1005003a 	cmpeq	r2,r2,zero
  800928:	1000091e 	bne	r2,zero,800950 <tick+0xfc>
  80092c:	d0a731c3 	ldbu	r2,-25401(gp)
  800930:	10803fcc 	andi	r2,r2,255
  800934:	1080201c 	xori	r2,r2,128
  800938:	10bfe004 	addi	r2,r2,-128
  80093c:	1004c03a 	cmpne	r2,r2,zero
  800940:	1000031e 	bne	r2,zero,800950 <tick+0xfc>
  800944:	00800044 	movi	r2,1
  800948:	e0bffe15 	stw	r2,-8(fp)
  80094c:	00000106 	br	800954 <tick+0x100>
  800950:	e03ffe15 	stw	zero,-8(fp)
  800954:	e0fffe17 	ldw	r3,-8(fp)
  800958:	1805883a 	mov	r2,r3
  80095c:	d0a72f85 	stb	r2,-25410(gp)
      _cg15 = AEI_t;
  800960:	d0a71f83 	ldbu	r2,-25474(gp)
  800964:	d0a72b05 	stb	r2,-25428(gp)
      g17 =(g15&&(!(_cg15)));
  800968:	d0a72f83 	ldbu	r2,-25410(gp)
  80096c:	10803fcc 	andi	r2,r2,255
  800970:	1080201c 	xori	r2,r2,128
  800974:	10bfe004 	addi	r2,r2,-128
  800978:	1005003a 	cmpeq	r2,r2,zero
  80097c:	1000091e 	bne	r2,zero,8009a4 <tick+0x150>
  800980:	d0a72b03 	ldbu	r2,-25428(gp)
  800984:	10803fcc 	andi	r2,r2,255
  800988:	1080201c 	xori	r2,r2,128
  80098c:	10bfe004 	addi	r2,r2,-128
  800990:	1004c03a 	cmpne	r2,r2,zero
  800994:	1000031e 	bne	r2,zero,8009a4 <tick+0x150>
  800998:	00800044 	movi	r2,1
  80099c:	e0bffd15 	stw	r2,-12(fp)
  8009a0:	00000106 	br	8009a8 <tick+0x154>
  8009a4:	e03ffd15 	stw	zero,-12(fp)
  8009a8:	e0fffd17 	ldw	r3,-12(fp)
  8009ac:	1805883a 	mov	r2,r3
  8009b0:	d0a72c05 	stb	r2,-25424(gp)
      _cg17 = LRI_t;
  8009b4:	d0a72643 	ldbu	r2,-25447(gp)
  8009b8:	d0a73245 	stb	r2,-25399(gp)
      g18 =(g17&&_cg17);
  8009bc:	d0a72c03 	ldbu	r2,-25424(gp)
  8009c0:	10803fcc 	andi	r2,r2,255
  8009c4:	1080201c 	xori	r2,r2,128
  8009c8:	10bfe004 	addi	r2,r2,-128
  8009cc:	1005003a 	cmpeq	r2,r2,zero
  8009d0:	1000091e 	bne	r2,zero,8009f8 <tick+0x1a4>
  8009d4:	d0a73243 	ldbu	r2,-25399(gp)
  8009d8:	10803fcc 	andi	r2,r2,255
  8009dc:	1080201c 	xori	r2,r2,128
  8009e0:	10bfe004 	addi	r2,r2,-128
  8009e4:	1005003a 	cmpeq	r2,r2,zero
  8009e8:	1000031e 	bne	r2,zero,8009f8 <tick+0x1a4>
  8009ec:	00800044 	movi	r2,1
  8009f0:	e0bffc15 	stw	r2,-16(fp)
  8009f4:	00000106 	br	8009fc <tick+0x1a8>
  8009f8:	e03ffc15 	stw	zero,-16(fp)
  8009fc:	e0fffc17 	ldw	r3,-16(fp)
  800a00:	1805883a 	mov	r2,r3
  800a04:	d0a72c85 	stb	r2,-25422(gp)
      if(g18){
  800a08:	d0a72c83 	ldbu	r2,-25422(gp)
  800a0c:	10803fcc 	andi	r2,r2,255
  800a10:	1080201c 	xori	r2,r2,128
  800a14:	10bfe004 	addi	r2,r2,-128
  800a18:	1005003a 	cmpeq	r2,r2,zero
  800a1c:	1000021e 	bne	r2,zero,800a28 <tick+0x1d4>
         VP =(VP||1);
  800a20:	00800044 	movi	r2,1
  800a24:	d0a72545 	stb	r2,-25451(gp)
      }
      g12 =(PRE_g11);
  800a28:	d0a73003 	ldbu	r2,-25408(gp)
  800a2c:	d0a72bc5 	stb	r2,-25425(gp)
      _cg12 = VS;
  800a30:	d0a71f43 	ldbu	r2,-25475(gp)
  800a34:	d0a72b45 	stb	r2,-25427(gp)
      g23 =(PRE_g22);
  800a38:	d0a72f03 	ldbu	r2,-25412(gp)
  800a3c:	d0a72e45 	stb	r2,-25415(gp)
      _cg23 = PVARP_t;
  800a40:	d0a72303 	ldbu	r2,-25460(gp)
  800a44:	d0a73485 	stb	r2,-25390(gp)
      g24 =(g23&&(!(_cg23)));
  800a48:	d0a72e43 	ldbu	r2,-25415(gp)
  800a4c:	10803fcc 	andi	r2,r2,255
  800a50:	1080201c 	xori	r2,r2,128
  800a54:	10bfe004 	addi	r2,r2,-128
  800a58:	1005003a 	cmpeq	r2,r2,zero
  800a5c:	1000091e 	bne	r2,zero,800a84 <tick+0x230>
  800a60:	d0a73483 	ldbu	r2,-25390(gp)
  800a64:	10803fcc 	andi	r2,r2,255
  800a68:	1080201c 	xori	r2,r2,128
  800a6c:	10bfe004 	addi	r2,r2,-128
  800a70:	1004c03a 	cmpne	r2,r2,zero
  800a74:	1000031e 	bne	r2,zero,800a84 <tick+0x230>
  800a78:	00800044 	movi	r2,1
  800a7c:	e0bffb15 	stw	r2,-20(fp)
  800a80:	00000106 	br	800a88 <tick+0x234>
  800a84:	e03ffb15 	stw	zero,-20(fp)
  800a88:	e0fffb17 	ldw	r3,-20(fp)
  800a8c:	1805883a 	mov	r2,r3
  800a90:	d0a73545 	stb	r2,-25387(gp)
      _cg24 = VS;
  800a94:	d0a71f43 	ldbu	r2,-25475(gp)
  800a98:	d0a73305 	stb	r2,-25396(gp)
      g13 =(g12&&(!(_cg12)));
  800a9c:	d0a72bc3 	ldbu	r2,-25425(gp)
  800aa0:	10803fcc 	andi	r2,r2,255
  800aa4:	1080201c 	xori	r2,r2,128
  800aa8:	10bfe004 	addi	r2,r2,-128
  800aac:	1005003a 	cmpeq	r2,r2,zero
  800ab0:	1000091e 	bne	r2,zero,800ad8 <tick+0x284>
  800ab4:	d0a72b43 	ldbu	r2,-25427(gp)
  800ab8:	10803fcc 	andi	r2,r2,255
  800abc:	1080201c 	xori	r2,r2,128
  800ac0:	10bfe004 	addi	r2,r2,-128
  800ac4:	1004c03a 	cmpne	r2,r2,zero
  800ac8:	1000031e 	bne	r2,zero,800ad8 <tick+0x284>
  800acc:	00800044 	movi	r2,1
  800ad0:	e0bffa15 	stw	r2,-24(fp)
  800ad4:	00000106 	br	800adc <tick+0x288>
  800ad8:	e03ffa15 	stw	zero,-24(fp)
  800adc:	e0fffa17 	ldw	r3,-24(fp)
  800ae0:	1805883a 	mov	r2,r3
  800ae4:	d0a73085 	stb	r2,-25406(gp)
      _cg13 =((AVI_t&&URI_t)||LRI_t);
  800ae8:	d0a72503 	ldbu	r2,-25452(gp)
  800aec:	10803fcc 	andi	r2,r2,255
  800af0:	1080201c 	xori	r2,r2,128
  800af4:	10bfe004 	addi	r2,r2,-128
  800af8:	1005003a 	cmpeq	r2,r2,zero
  800afc:	1000061e 	bne	r2,zero,800b18 <tick+0x2c4>
  800b00:	d0a71f03 	ldbu	r2,-25476(gp)
  800b04:	10803fcc 	andi	r2,r2,255
  800b08:	1080201c 	xori	r2,r2,128
  800b0c:	10bfe004 	addi	r2,r2,-128
  800b10:	1004c03a 	cmpne	r2,r2,zero
  800b14:	1000061e 	bne	r2,zero,800b30 <tick+0x2dc>
  800b18:	d0a72643 	ldbu	r2,-25447(gp)
  800b1c:	10803fcc 	andi	r2,r2,255
  800b20:	1080201c 	xori	r2,r2,128
  800b24:	10bfe004 	addi	r2,r2,-128
  800b28:	1005003a 	cmpeq	r2,r2,zero
  800b2c:	1000031e 	bne	r2,zero,800b3c <tick+0x2e8>
  800b30:	00800044 	movi	r2,1
  800b34:	e0bff915 	stw	r2,-28(fp)
  800b38:	00000106 	br	800b40 <tick+0x2ec>
  800b3c:	e03ff915 	stw	zero,-28(fp)
  800b40:	e0fff917 	ldw	r3,-28(fp)
  800b44:	1805883a 	mov	r2,r3
  800b48:	d0a73185 	stb	r2,-25402(gp)
      g14 =(g13&&_cg13);
  800b4c:	d0a73083 	ldbu	r2,-25406(gp)
  800b50:	10803fcc 	andi	r2,r2,255
  800b54:	1080201c 	xori	r2,r2,128
  800b58:	10bfe004 	addi	r2,r2,-128
  800b5c:	1005003a 	cmpeq	r2,r2,zero
  800b60:	1000091e 	bne	r2,zero,800b88 <tick+0x334>
  800b64:	d0a73183 	ldbu	r2,-25402(gp)
  800b68:	10803fcc 	andi	r2,r2,255
  800b6c:	1080201c 	xori	r2,r2,128
  800b70:	10bfe004 	addi	r2,r2,-128
  800b74:	1005003a 	cmpeq	r2,r2,zero
  800b78:	1000031e 	bne	r2,zero,800b88 <tick+0x334>
  800b7c:	00800044 	movi	r2,1
  800b80:	e0bff815 	stw	r2,-32(fp)
  800b84:	00000106 	br	800b8c <tick+0x338>
  800b88:	e03ff815 	stw	zero,-32(fp)
  800b8c:	e0fff817 	ldw	r3,-32(fp)
  800b90:	1805883a 	mov	r2,r3
  800b94:	d0a72e85 	stb	r2,-25414(gp)
      if(g14){
  800b98:	d0a72e83 	ldbu	r2,-25414(gp)
  800b9c:	10803fcc 	andi	r2,r2,255
  800ba0:	1080201c 	xori	r2,r2,128
  800ba4:	10bfe004 	addi	r2,r2,-128
  800ba8:	1005003a 	cmpeq	r2,r2,zero
  800bac:	1000021e 	bne	r2,zero,800bb8 <tick+0x364>
         VP =(VP||1);
  800bb0:	00800044 	movi	r2,1
  800bb4:	d0a72545 	stb	r2,-25451(gp)
      }
      g2 =(g18||(g12&&_cg12)||g1||(g24&&_cg24)||g14);
  800bb8:	d0a72c83 	ldbu	r2,-25422(gp)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	1080201c 	xori	r2,r2,128
  800bc4:	10bfe004 	addi	r2,r2,-128
  800bc8:	1004c03a 	cmpne	r2,r2,zero
  800bcc:	1000241e 	bne	r2,zero,800c60 <tick+0x40c>
  800bd0:	d0a72bc3 	ldbu	r2,-25425(gp)
  800bd4:	10803fcc 	andi	r2,r2,255
  800bd8:	1080201c 	xori	r2,r2,128
  800bdc:	10bfe004 	addi	r2,r2,-128
  800be0:	1005003a 	cmpeq	r2,r2,zero
  800be4:	1000061e 	bne	r2,zero,800c00 <tick+0x3ac>
  800be8:	d0a72b43 	ldbu	r2,-25427(gp)
  800bec:	10803fcc 	andi	r2,r2,255
  800bf0:	1080201c 	xori	r2,r2,128
  800bf4:	10bfe004 	addi	r2,r2,-128
  800bf8:	1004c03a 	cmpne	r2,r2,zero
  800bfc:	1000181e 	bne	r2,zero,800c60 <tick+0x40c>
  800c00:	d0a72b83 	ldbu	r2,-25426(gp)
  800c04:	10803fcc 	andi	r2,r2,255
  800c08:	1080201c 	xori	r2,r2,128
  800c0c:	10bfe004 	addi	r2,r2,-128
  800c10:	1004c03a 	cmpne	r2,r2,zero
  800c14:	1000121e 	bne	r2,zero,800c60 <tick+0x40c>
  800c18:	d0a73543 	ldbu	r2,-25387(gp)
  800c1c:	10803fcc 	andi	r2,r2,255
  800c20:	1080201c 	xori	r2,r2,128
  800c24:	10bfe004 	addi	r2,r2,-128
  800c28:	1005003a 	cmpeq	r2,r2,zero
  800c2c:	1000061e 	bne	r2,zero,800c48 <tick+0x3f4>
  800c30:	d0a73303 	ldbu	r2,-25396(gp)
  800c34:	10803fcc 	andi	r2,r2,255
  800c38:	1080201c 	xori	r2,r2,128
  800c3c:	10bfe004 	addi	r2,r2,-128
  800c40:	1004c03a 	cmpne	r2,r2,zero
  800c44:	1000061e 	bne	r2,zero,800c60 <tick+0x40c>
  800c48:	d0a72e83 	ldbu	r2,-25414(gp)
  800c4c:	10803fcc 	andi	r2,r2,255
  800c50:	1080201c 	xori	r2,r2,128
  800c54:	10bfe004 	addi	r2,r2,-128
  800c58:	1005003a 	cmpeq	r2,r2,zero
  800c5c:	1000031e 	bne	r2,zero,800c6c <tick+0x418>
  800c60:	00800044 	movi	r2,1
  800c64:	e0bff715 	stw	r2,-36(fp)
  800c68:	00000106 	br	800c70 <tick+0x41c>
  800c6c:	e03ff715 	stw	zero,-36(fp)
  800c70:	e0fff717 	ldw	r3,-36(fp)
  800c74:	1805883a 	mov	r2,r3
  800c78:	d0a72d85 	stb	r2,-25418(gp)
      g3 =(PRE_g2);
  800c7c:	d0a72703 	ldbu	r2,-25444(gp)
  800c80:	d0a72885 	stb	r2,-25438(gp)
      g3b = g3;
  800c84:	d0a72883 	ldbu	r2,-25438(gp)
  800c88:	d0a72745 	stb	r2,-25443(gp)
      if(g3b){
  800c8c:	d0a72743 	ldbu	r2,-25443(gp)
  800c90:	10803fcc 	andi	r2,r2,255
  800c94:	1080201c 	xori	r2,r2,128
  800c98:	10bfe004 	addi	r2,r2,-128
  800c9c:	1005003a 	cmpeq	r2,r2,zero
  800ca0:	1000021e 	bne	r2,zero,800cac <tick+0x458>
         StartRI =(StartRI||1);
  800ca4:	00800044 	movi	r2,1
  800ca8:	d0a725c5 	stb	r2,-25449(gp)
      }
      g5 =(PRE_g4);
  800cac:	d0a72e03 	ldbu	r2,-25416(gp)
  800cb0:	d0a72d45 	stb	r2,-25419(gp)
      _cg5 = PVARP_t;
  800cb4:	d0a72303 	ldbu	r2,-25460(gp)
  800cb8:	d0a72f45 	stb	r2,-25411(gp)
      g21 =(g5&&(!(_cg5)));
  800cbc:	d0a72d43 	ldbu	r2,-25419(gp)
  800cc0:	10803fcc 	andi	r2,r2,255
  800cc4:	1080201c 	xori	r2,r2,128
  800cc8:	10bfe004 	addi	r2,r2,-128
  800ccc:	1005003a 	cmpeq	r2,r2,zero
  800cd0:	1000091e 	bne	r2,zero,800cf8 <tick+0x4a4>
  800cd4:	d0a72f43 	ldbu	r2,-25411(gp)
  800cd8:	10803fcc 	andi	r2,r2,255
  800cdc:	1080201c 	xori	r2,r2,128
  800ce0:	10bfe004 	addi	r2,r2,-128
  800ce4:	1004c03a 	cmpne	r2,r2,zero
  800ce8:	1000031e 	bne	r2,zero,800cf8 <tick+0x4a4>
  800cec:	00800044 	movi	r2,1
  800cf0:	e0bff615 	stw	r2,-40(fp)
  800cf4:	00000106 	br	800cfc <tick+0x4a8>
  800cf8:	e03ff615 	stw	zero,-40(fp)
  800cfc:	e0fff617 	ldw	r3,-40(fp)
  800d00:	1805883a 	mov	r2,r3
  800d04:	d0a72d05 	stb	r2,-25420(gp)
      _cg21 = VRP_t;
  800d08:	d0a72343 	ldbu	r2,-25459(gp)
  800d0c:	d0a72cc5 	stb	r2,-25421(gp)
      g4 =((g21&&(!(_cg21)))||g3b);
  800d10:	d0a72d03 	ldbu	r2,-25420(gp)
  800d14:	10803fcc 	andi	r2,r2,255
  800d18:	1080201c 	xori	r2,r2,128
  800d1c:	10bfe004 	addi	r2,r2,-128
  800d20:	1005003a 	cmpeq	r2,r2,zero
  800d24:	1000061e 	bne	r2,zero,800d40 <tick+0x4ec>
  800d28:	d0a72cc3 	ldbu	r2,-25421(gp)
  800d2c:	10803fcc 	andi	r2,r2,255
  800d30:	1080201c 	xori	r2,r2,128
  800d34:	10bfe004 	addi	r2,r2,-128
  800d38:	1005003a 	cmpeq	r2,r2,zero
  800d3c:	1000061e 	bne	r2,zero,800d58 <tick+0x504>
  800d40:	d0a72743 	ldbu	r2,-25443(gp)
  800d44:	10803fcc 	andi	r2,r2,255
  800d48:	1080201c 	xori	r2,r2,128
  800d4c:	10bfe004 	addi	r2,r2,-128
  800d50:	1005003a 	cmpeq	r2,r2,zero
  800d54:	1000031e 	bne	r2,zero,800d64 <tick+0x510>
  800d58:	00800044 	movi	r2,1
  800d5c:	e0bff515 	stw	r2,-44(fp)
  800d60:	00000106 	br	800d68 <tick+0x514>
  800d64:	e03ff515 	stw	zero,-44(fp)
  800d68:	e0fff517 	ldw	r3,-44(fp)
  800d6c:	1805883a 	mov	r2,r3
  800d70:	d0a72785 	stb	r2,-25442(gp)
      g7 =(PRE_g6);
  800d74:	d0a72ec3 	ldbu	r2,-25413(gp)
  800d78:	d0a72dc5 	stb	r2,-25417(gp)
      _cg7 = VRP_t;
  800d7c:	d0a72343 	ldbu	r2,-25459(gp)
  800d80:	d0a72945 	stb	r2,-25435(gp)
      g19 =(g7&&(!(_cg7)));
  800d84:	d0a72dc3 	ldbu	r2,-25417(gp)
  800d88:	10803fcc 	andi	r2,r2,255
  800d8c:	1080201c 	xori	r2,r2,128
  800d90:	10bfe004 	addi	r2,r2,-128
  800d94:	1005003a 	cmpeq	r2,r2,zero
  800d98:	1000091e 	bne	r2,zero,800dc0 <tick+0x56c>
  800d9c:	d0a72943 	ldbu	r2,-25435(gp)
  800da0:	10803fcc 	andi	r2,r2,255
  800da4:	1080201c 	xori	r2,r2,128
  800da8:	10bfe004 	addi	r2,r2,-128
  800dac:	1004c03a 	cmpne	r2,r2,zero
  800db0:	1000031e 	bne	r2,zero,800dc0 <tick+0x56c>
  800db4:	00800044 	movi	r2,1
  800db8:	e0bff415 	stw	r2,-48(fp)
  800dbc:	00000106 	br	800dc4 <tick+0x570>
  800dc0:	e03ff415 	stw	zero,-48(fp)
  800dc4:	e0fff417 	ldw	r3,-48(fp)
  800dc8:	1805883a 	mov	r2,r3
  800dcc:	d0a727c5 	stb	r2,-25441(gp)
      _cg19 = AS;
  800dd0:	d0a72583 	ldbu	r2,-25450(gp)
  800dd4:	d0a73145 	stb	r2,-25403(gp)
      g6 =((g5&&_cg5)||(g19&&(!(_cg19))));
  800dd8:	d0a72d43 	ldbu	r2,-25419(gp)
  800ddc:	10803fcc 	andi	r2,r2,255
  800de0:	1080201c 	xori	r2,r2,128
  800de4:	10bfe004 	addi	r2,r2,-128
  800de8:	1005003a 	cmpeq	r2,r2,zero
  800dec:	1000061e 	bne	r2,zero,800e08 <tick+0x5b4>
  800df0:	d0a72f43 	ldbu	r2,-25411(gp)
  800df4:	10803fcc 	andi	r2,r2,255
  800df8:	1080201c 	xori	r2,r2,128
  800dfc:	10bfe004 	addi	r2,r2,-128
  800e00:	1004c03a 	cmpne	r2,r2,zero
  800e04:	10000c1e 	bne	r2,zero,800e38 <tick+0x5e4>
  800e08:	d0a727c3 	ldbu	r2,-25441(gp)
  800e0c:	10803fcc 	andi	r2,r2,255
  800e10:	1080201c 	xori	r2,r2,128
  800e14:	10bfe004 	addi	r2,r2,-128
  800e18:	1005003a 	cmpeq	r2,r2,zero
  800e1c:	1000091e 	bne	r2,zero,800e44 <tick+0x5f0>
  800e20:	d0a73143 	ldbu	r2,-25403(gp)
  800e24:	10803fcc 	andi	r2,r2,255
  800e28:	1080201c 	xori	r2,r2,128
  800e2c:	10bfe004 	addi	r2,r2,-128
  800e30:	1004c03a 	cmpne	r2,r2,zero
  800e34:	1000031e 	bne	r2,zero,800e44 <tick+0x5f0>
  800e38:	00800044 	movi	r2,1
  800e3c:	e0bff315 	stw	r2,-52(fp)
  800e40:	00000106 	br	800e48 <tick+0x5f4>
  800e44:	e03ff315 	stw	zero,-52(fp)
  800e48:	e0fff317 	ldw	r3,-52(fp)
  800e4c:	1805883a 	mov	r2,r3
  800e50:	d0a73105 	stb	r2,-25404(gp)
      g8 =((g7&&_cg7)||(g23&&_cg23)||(g17&&(!(_cg17))));
  800e54:	d0a72dc3 	ldbu	r2,-25417(gp)
  800e58:	10803fcc 	andi	r2,r2,255
  800e5c:	1080201c 	xori	r2,r2,128
  800e60:	10bfe004 	addi	r2,r2,-128
  800e64:	1005003a 	cmpeq	r2,r2,zero
  800e68:	1000061e 	bne	r2,zero,800e84 <tick+0x630>
  800e6c:	d0a72943 	ldbu	r2,-25435(gp)
  800e70:	10803fcc 	andi	r2,r2,255
  800e74:	1080201c 	xori	r2,r2,128
  800e78:	10bfe004 	addi	r2,r2,-128
  800e7c:	1004c03a 	cmpne	r2,r2,zero
  800e80:	1000181e 	bne	r2,zero,800ee4 <tick+0x690>
  800e84:	d0a72e43 	ldbu	r2,-25415(gp)
  800e88:	10803fcc 	andi	r2,r2,255
  800e8c:	1080201c 	xori	r2,r2,128
  800e90:	10bfe004 	addi	r2,r2,-128
  800e94:	1005003a 	cmpeq	r2,r2,zero
  800e98:	1000061e 	bne	r2,zero,800eb4 <tick+0x660>
  800e9c:	d0a73483 	ldbu	r2,-25390(gp)
  800ea0:	10803fcc 	andi	r2,r2,255
  800ea4:	1080201c 	xori	r2,r2,128
  800ea8:	10bfe004 	addi	r2,r2,-128
  800eac:	1004c03a 	cmpne	r2,r2,zero
  800eb0:	10000c1e 	bne	r2,zero,800ee4 <tick+0x690>
  800eb4:	d0a72c03 	ldbu	r2,-25424(gp)
  800eb8:	10803fcc 	andi	r2,r2,255
  800ebc:	1080201c 	xori	r2,r2,128
  800ec0:	10bfe004 	addi	r2,r2,-128
  800ec4:	1005003a 	cmpeq	r2,r2,zero
  800ec8:	1000091e 	bne	r2,zero,800ef0 <tick+0x69c>
  800ecc:	d0a73243 	ldbu	r2,-25399(gp)
  800ed0:	10803fcc 	andi	r2,r2,255
  800ed4:	1080201c 	xori	r2,r2,128
  800ed8:	10bfe004 	addi	r2,r2,-128
  800edc:	1004c03a 	cmpne	r2,r2,zero
  800ee0:	1000031e 	bne	r2,zero,800ef0 <tick+0x69c>
  800ee4:	00800044 	movi	r2,1
  800ee8:	e0bff215 	stw	r2,-56(fp)
  800eec:	00000106 	br	800ef4 <tick+0x6a0>
  800ef0:	e03ff215 	stw	zero,-56(fp)
  800ef4:	e0fff217 	ldw	r3,-56(fp)
  800ef8:	1805883a 	mov	r2,r3
  800efc:	d0a730c5 	stb	r2,-25405(gp)
      g10 =(g9&&_cg9);
  800f00:	d0a72903 	ldbu	r2,-25436(gp)
  800f04:	10803fcc 	andi	r2,r2,255
  800f08:	1080201c 	xori	r2,r2,128
  800f0c:	10bfe004 	addi	r2,r2,-128
  800f10:	1005003a 	cmpeq	r2,r2,zero
  800f14:	1000091e 	bne	r2,zero,800f3c <tick+0x6e8>
  800f18:	d0a731c3 	ldbu	r2,-25401(gp)
  800f1c:	10803fcc 	andi	r2,r2,255
  800f20:	1080201c 	xori	r2,r2,128
  800f24:	10bfe004 	addi	r2,r2,-128
  800f28:	1005003a 	cmpeq	r2,r2,zero
  800f2c:	1000031e 	bne	r2,zero,800f3c <tick+0x6e8>
  800f30:	00800044 	movi	r2,1
  800f34:	e0bff115 	stw	r2,-60(fp)
  800f38:	00000106 	br	800f40 <tick+0x6ec>
  800f3c:	e03ff115 	stw	zero,-60(fp)
  800f40:	e0fff117 	ldw	r3,-60(fp)
  800f44:	1805883a 	mov	r2,r3
  800f48:	d0a73585 	stb	r2,-25386(gp)
      if(g10){
  800f4c:	d0a73583 	ldbu	r2,-25386(gp)
  800f50:	10803fcc 	andi	r2,r2,255
  800f54:	1080201c 	xori	r2,r2,128
  800f58:	10bfe004 	addi	r2,r2,-128
  800f5c:	1005003a 	cmpeq	r2,r2,zero
  800f60:	1000021e 	bne	r2,zero,800f6c <tick+0x718>
         StartAVI =(StartAVI||1);
  800f64:	00800044 	movi	r2,1
  800f68:	d0a72105 	stb	r2,-25468(gp)
      }
      g16 =(g15&&_cg15);
  800f6c:	d0a72f83 	ldbu	r2,-25410(gp)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	1005003a 	cmpeq	r2,r2,zero
  800f80:	1000091e 	bne	r2,zero,800fa8 <tick+0x754>
  800f84:	d0a72b03 	ldbu	r2,-25428(gp)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	1080201c 	xori	r2,r2,128
  800f90:	10bfe004 	addi	r2,r2,-128
  800f94:	1005003a 	cmpeq	r2,r2,zero
  800f98:	1000031e 	bne	r2,zero,800fa8 <tick+0x754>
  800f9c:	00800044 	movi	r2,1
  800fa0:	e0bff015 	stw	r2,-64(fp)
  800fa4:	00000106 	br	800fac <tick+0x758>
  800fa8:	e03ff015 	stw	zero,-64(fp)
  800fac:	e0fff017 	ldw	r3,-64(fp)
  800fb0:	1805883a 	mov	r2,r3
  800fb4:	d0a732c5 	stb	r2,-25397(gp)
      if(g16){
  800fb8:	d0a732c3 	ldbu	r2,-25397(gp)
  800fbc:	10803fcc 	andi	r2,r2,255
  800fc0:	1080201c 	xori	r2,r2,128
  800fc4:	10bfe004 	addi	r2,r2,-128
  800fc8:	1005003a 	cmpeq	r2,r2,zero
  800fcc:	1000021e 	bne	r2,zero,800fd8 <tick+0x784>
         AP =(AP||1);
  800fd0:	00800044 	movi	r2,1
  800fd4:	d0a72605 	stb	r2,-25448(gp)
      }
      g16b = g16;
  800fd8:	d0a732c3 	ldbu	r2,-25397(gp)
  800fdc:	d0a73445 	stb	r2,-25391(gp)
      if(g16b){
  800fe0:	d0a73443 	ldbu	r2,-25391(gp)
  800fe4:	10803fcc 	andi	r2,r2,255
  800fe8:	1080201c 	xori	r2,r2,128
  800fec:	10bfe004 	addi	r2,r2,-128
  800ff0:	1005003a 	cmpeq	r2,r2,zero
  800ff4:	1000021e 	bne	r2,zero,801000 <tick+0x7ac>
         StartAVI =(StartAVI||1);
  800ff8:	00800044 	movi	r2,1
  800ffc:	d0a72105 	stb	r2,-25468(gp)
      }
      g20 =(g19&&_cg19);
  801000:	d0a727c3 	ldbu	r2,-25441(gp)
  801004:	10803fcc 	andi	r2,r2,255
  801008:	1080201c 	xori	r2,r2,128
  80100c:	10bfe004 	addi	r2,r2,-128
  801010:	1005003a 	cmpeq	r2,r2,zero
  801014:	1000091e 	bne	r2,zero,80103c <tick+0x7e8>
  801018:	d0a73143 	ldbu	r2,-25403(gp)
  80101c:	10803fcc 	andi	r2,r2,255
  801020:	1080201c 	xori	r2,r2,128
  801024:	10bfe004 	addi	r2,r2,-128
  801028:	1005003a 	cmpeq	r2,r2,zero
  80102c:	1000031e 	bne	r2,zero,80103c <tick+0x7e8>
  801030:	00800044 	movi	r2,1
  801034:	e0bfef15 	stw	r2,-68(fp)
  801038:	00000106 	br	801040 <tick+0x7ec>
  80103c:	e03fef15 	stw	zero,-68(fp)
  801040:	e0ffef17 	ldw	r3,-68(fp)
  801044:	1805883a 	mov	r2,r3
  801048:	d0a73045 	stb	r2,-25407(gp)
      if(g20){
  80104c:	d0a73043 	ldbu	r2,-25407(gp)
  801050:	10803fcc 	andi	r2,r2,255
  801054:	1080201c 	xori	r2,r2,128
  801058:	10bfe004 	addi	r2,r2,-128
  80105c:	1005003a 	cmpeq	r2,r2,zero
  801060:	1000021e 	bne	r2,zero,80106c <tick+0x818>
         StartAVI =(StartAVI||1);
  801064:	00800044 	movi	r2,1
  801068:	d0a72105 	stb	r2,-25468(gp)
      }
      g11 =(g16b||g10||g20||(g13&&(!(_cg13))));
  80106c:	d0a73443 	ldbu	r2,-25391(gp)
  801070:	10803fcc 	andi	r2,r2,255
  801074:	1080201c 	xori	r2,r2,128
  801078:	10bfe004 	addi	r2,r2,-128
  80107c:	1004c03a 	cmpne	r2,r2,zero
  801080:	1000181e 	bne	r2,zero,8010e4 <tick+0x890>
  801084:	d0a73583 	ldbu	r2,-25386(gp)
  801088:	10803fcc 	andi	r2,r2,255
  80108c:	1080201c 	xori	r2,r2,128
  801090:	10bfe004 	addi	r2,r2,-128
  801094:	1004c03a 	cmpne	r2,r2,zero
  801098:	1000121e 	bne	r2,zero,8010e4 <tick+0x890>
  80109c:	d0a73043 	ldbu	r2,-25407(gp)
  8010a0:	10803fcc 	andi	r2,r2,255
  8010a4:	1080201c 	xori	r2,r2,128
  8010a8:	10bfe004 	addi	r2,r2,-128
  8010ac:	1004c03a 	cmpne	r2,r2,zero
  8010b0:	10000c1e 	bne	r2,zero,8010e4 <tick+0x890>
  8010b4:	d0a73083 	ldbu	r2,-25406(gp)
  8010b8:	10803fcc 	andi	r2,r2,255
  8010bc:	1080201c 	xori	r2,r2,128
  8010c0:	10bfe004 	addi	r2,r2,-128
  8010c4:	1005003a 	cmpeq	r2,r2,zero
  8010c8:	1000091e 	bne	r2,zero,8010f0 <tick+0x89c>
  8010cc:	d0a73183 	ldbu	r2,-25402(gp)
  8010d0:	10803fcc 	andi	r2,r2,255
  8010d4:	1080201c 	xori	r2,r2,128
  8010d8:	10bfe004 	addi	r2,r2,-128
  8010dc:	1004c03a 	cmpne	r2,r2,zero
  8010e0:	1000031e 	bne	r2,zero,8010f0 <tick+0x89c>
  8010e4:	00800044 	movi	r2,1
  8010e8:	e0bfee15 	stw	r2,-72(fp)
  8010ec:	00000106 	br	8010f4 <tick+0x8a0>
  8010f0:	e03fee15 	stw	zero,-72(fp)
  8010f4:	e0ffee17 	ldw	r3,-72(fp)
  8010f8:	1805883a 	mov	r2,r3
  8010fc:	d0a73385 	stb	r2,-25394(gp)
      g22 =((g21&&_cg21)||(g24&&(!(_cg24))));
  801100:	d0a72d03 	ldbu	r2,-25420(gp)
  801104:	10803fcc 	andi	r2,r2,255
  801108:	1080201c 	xori	r2,r2,128
  80110c:	10bfe004 	addi	r2,r2,-128
  801110:	1005003a 	cmpeq	r2,r2,zero
  801114:	1000061e 	bne	r2,zero,801130 <tick+0x8dc>
  801118:	d0a72cc3 	ldbu	r2,-25421(gp)
  80111c:	10803fcc 	andi	r2,r2,255
  801120:	1080201c 	xori	r2,r2,128
  801124:	10bfe004 	addi	r2,r2,-128
  801128:	1004c03a 	cmpne	r2,r2,zero
  80112c:	10000c1e 	bne	r2,zero,801160 <tick+0x90c>
  801130:	d0a73543 	ldbu	r2,-25387(gp)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	1005003a 	cmpeq	r2,r2,zero
  801144:	1000091e 	bne	r2,zero,80116c <tick+0x918>
  801148:	d0a73303 	ldbu	r2,-25396(gp)
  80114c:	10803fcc 	andi	r2,r2,255
  801150:	1080201c 	xori	r2,r2,128
  801154:	10bfe004 	addi	r2,r2,-128
  801158:	1004c03a 	cmpne	r2,r2,zero
  80115c:	1000031e 	bne	r2,zero,80116c <tick+0x918>
  801160:	00800044 	movi	r2,1
  801164:	e0bfed15 	stw	r2,-76(fp)
  801168:	00000106 	br	801170 <tick+0x91c>
  80116c:	e03fed15 	stw	zero,-76(fp)
  801170:	e0ffed17 	ldw	r3,-76(fp)
  801174:	1805883a 	mov	r2,r3
  801178:	d0a733c5 	stb	r2,-25393(gp)
      g25_e1 =(!((g3||g5||g7||g23||g9||g12)));
  80117c:	d0a72883 	ldbu	r2,-25438(gp)
  801180:	10803fcc 	andi	r2,r2,255
  801184:	1080201c 	xori	r2,r2,128
  801188:	10bfe004 	addi	r2,r2,-128
  80118c:	1004c03a 	cmpne	r2,r2,zero
  801190:	1000211e 	bne	r2,zero,801218 <tick+0x9c4>
  801194:	d0a72d43 	ldbu	r2,-25419(gp)
  801198:	10803fcc 	andi	r2,r2,255
  80119c:	1080201c 	xori	r2,r2,128
  8011a0:	10bfe004 	addi	r2,r2,-128
  8011a4:	1004c03a 	cmpne	r2,r2,zero
  8011a8:	10001b1e 	bne	r2,zero,801218 <tick+0x9c4>
  8011ac:	d0a72dc3 	ldbu	r2,-25417(gp)
  8011b0:	10803fcc 	andi	r2,r2,255
  8011b4:	1080201c 	xori	r2,r2,128
  8011b8:	10bfe004 	addi	r2,r2,-128
  8011bc:	1004c03a 	cmpne	r2,r2,zero
  8011c0:	1000151e 	bne	r2,zero,801218 <tick+0x9c4>
  8011c4:	d0a72e43 	ldbu	r2,-25415(gp)
  8011c8:	10803fcc 	andi	r2,r2,255
  8011cc:	1080201c 	xori	r2,r2,128
  8011d0:	10bfe004 	addi	r2,r2,-128
  8011d4:	1004c03a 	cmpne	r2,r2,zero
  8011d8:	10000f1e 	bne	r2,zero,801218 <tick+0x9c4>
  8011dc:	d0a72903 	ldbu	r2,-25436(gp)
  8011e0:	10803fcc 	andi	r2,r2,255
  8011e4:	1080201c 	xori	r2,r2,128
  8011e8:	10bfe004 	addi	r2,r2,-128
  8011ec:	1004c03a 	cmpne	r2,r2,zero
  8011f0:	1000091e 	bne	r2,zero,801218 <tick+0x9c4>
  8011f4:	d0a72bc3 	ldbu	r2,-25425(gp)
  8011f8:	10803fcc 	andi	r2,r2,255
  8011fc:	1080201c 	xori	r2,r2,128
  801200:	10bfe004 	addi	r2,r2,-128
  801204:	1004c03a 	cmpne	r2,r2,zero
  801208:	1000031e 	bne	r2,zero,801218 <tick+0x9c4>
  80120c:	00800044 	movi	r2,1
  801210:	e0bfec15 	stw	r2,-80(fp)
  801214:	00000106 	br	80121c <tick+0x9c8>
  801218:	e03fec15 	stw	zero,-80(fp)
  80121c:	e0ffec17 	ldw	r3,-80(fp)
  801220:	1805883a 	mov	r2,r3
  801224:	d0a72805 	stb	r2,-25440(gp)
      g29_e2 =(!(g28));
  801228:	d0a73403 	ldbu	r2,-25392(gp)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1080201c 	xori	r2,r2,128
  801234:	10bfe004 	addi	r2,r2,-128
  801238:	1005003a 	cmpeq	r2,r2,zero
  80123c:	d0a734c5 	stb	r2,-25389(gp)
   }
   PRE_g2 = g2;
  801240:	d0a72d83 	ldbu	r2,-25418(gp)
  801244:	d0a72705 	stb	r2,-25444(gp)
   PRE_g4 = g4;
  801248:	d0a72783 	ldbu	r2,-25442(gp)
  80124c:	d0a72e05 	stb	r2,-25416(gp)
   PRE_g6 = g6;
  801250:	d0a73103 	ldbu	r2,-25404(gp)
  801254:	d0a72ec5 	stb	r2,-25413(gp)
   PRE_g8 = g8;
  801258:	d0a730c3 	ldbu	r2,-25405(gp)
  80125c:	d0a72c45 	stb	r2,-25423(gp)
   PRE_g11 = g11;
  801260:	d0a73383 	ldbu	r2,-25394(gp)
  801264:	d0a73005 	stb	r2,-25408(gp)
   PRE_g22 = g22;
  801268:	d0a733c3 	ldbu	r2,-25393(gp)
  80126c:	d0a72f05 	stb	r2,-25412(gp)
   PRE_g27 = g27;
  801270:	d0a72843 	ldbu	r2,-25439(gp)
  801274:	d0a728c5 	stb	r2,-25437(gp)
   _PRE_GO = _GO;
  801278:	d0a72fc3 	ldbu	r2,-25409(gp)
  80127c:	10803fcc 	andi	r2,r2,255
  801280:	1080201c 	xori	r2,r2,128
  801284:	10bfe004 	addi	r2,r2,-128
  801288:	d0a72a15 	stw	r2,-25432(gp)
   return;
}
  80128c:	e037883a 	mov	sp,fp
  801290:	df000017 	ldw	fp,0(sp)
  801294:	dec00104 	addi	sp,sp,4
  801298:	f800283a 	ret

0080129c <_fdopen_r>:
  80129c:	defffb04 	addi	sp,sp,-20
  8012a0:	dc800315 	stw	r18,12(sp)
  8012a4:	2825883a 	mov	r18,r5
  8012a8:	300b883a 	mov	r5,r6
  8012ac:	d80d883a 	mov	r6,sp
  8012b0:	dc400215 	stw	r17,8(sp)
  8012b4:	dc000115 	stw	r16,4(sp)
  8012b8:	2023883a 	mov	r17,r4
  8012bc:	dfc00415 	stw	ra,16(sp)
  8012c0:	08017400 	call	801740 <__sflags>
  8012c4:	1021883a 	mov	r16,r2
  8012c8:	8809883a 	mov	r4,r17
  8012cc:	000b883a 	mov	r5,zero
  8012d0:	1000071e 	bne	r2,zero,8012f0 <_fdopen_r+0x54>
  8012d4:	2805883a 	mov	r2,r5
  8012d8:	dfc00417 	ldw	ra,16(sp)
  8012dc:	dc800317 	ldw	r18,12(sp)
  8012e0:	dc400217 	ldw	r17,8(sp)
  8012e4:	dc000117 	ldw	r16,4(sp)
  8012e8:	dec00504 	addi	sp,sp,20
  8012ec:	f800283a 	ret
  8012f0:	08016500 	call	801650 <__sfp>
  8012f4:	100b883a 	mov	r5,r2
  8012f8:	103ff626 	beq	r2,zero,8012d4 <_fdopen_r+0x38>
  8012fc:	00c02034 	movhi	r3,128
  801300:	18c97504 	addi	r3,r3,9684
  801304:	1400030d 	sth	r16,12(r2)
  801308:	1480038d 	sth	r18,14(r2)
  80130c:	00802034 	movhi	r2,128
  801310:	10899404 	addi	r2,r2,9808
  801314:	28800815 	stw	r2,32(r5)
  801318:	28c00915 	stw	r3,36(r5)
  80131c:	00802034 	movhi	r2,128
  801320:	10895b04 	addi	r2,r2,9580
  801324:	00c02034 	movhi	r3,128
  801328:	18c95904 	addi	r3,r3,9572
  80132c:	28800a15 	stw	r2,40(r5)
  801330:	28c00b15 	stw	r3,44(r5)
  801334:	29400715 	stw	r5,28(r5)
  801338:	003fe606 	br	8012d4 <_fdopen_r+0x38>

0080133c <fdopen>:
  80133c:	01802074 	movhi	r6,129
  801340:	31aa7a04 	addi	r6,r6,-22040
  801344:	2007883a 	mov	r3,r4
  801348:	31000017 	ldw	r4,0(r6)
  80134c:	280d883a 	mov	r6,r5
  801350:	180b883a 	mov	r5,r3
  801354:	080129c1 	jmpi	80129c <_fdopen_r>

00801358 <fgetc>:
  801358:	defffd04 	addi	sp,sp,-12
  80135c:	dc400115 	stw	r17,4(sp)
  801360:	04402074 	movhi	r17,129
  801364:	8c6a7a04 	addi	r17,r17,-22040
  801368:	88c00017 	ldw	r3,0(r17)
  80136c:	dc000015 	stw	r16,0(sp)
  801370:	dfc00215 	stw	ra,8(sp)
  801374:	2021883a 	mov	r16,r4
  801378:	18000326 	beq	r3,zero,801388 <fgetc+0x30>
  80137c:	18800e17 	ldw	r2,56(r3)
  801380:	1809883a 	mov	r4,r3
  801384:	10000e26 	beq	r2,zero,8013c0 <fgetc+0x68>
  801388:	80800117 	ldw	r2,4(r16)
  80138c:	800b883a 	mov	r5,r16
  801390:	10bfffc4 	addi	r2,r2,-1
  801394:	80800115 	stw	r2,4(r16)
  801398:	10000f16 	blt	r2,zero,8013d8 <fgetc+0x80>
  80139c:	80c00017 	ldw	r3,0(r16)
  8013a0:	18800003 	ldbu	r2,0(r3)
  8013a4:	18c00044 	addi	r3,r3,1
  8013a8:	80c00015 	stw	r3,0(r16)
  8013ac:	dfc00217 	ldw	ra,8(sp)
  8013b0:	dc400117 	ldw	r17,4(sp)
  8013b4:	dc000017 	ldw	r16,0(sp)
  8013b8:	dec00304 	addi	sp,sp,12
  8013bc:	f800283a 	ret
  8013c0:	08014e80 	call	8014e8 <__sinit>
  8013c4:	80800117 	ldw	r2,4(r16)
  8013c8:	800b883a 	mov	r5,r16
  8013cc:	10bfffc4 	addi	r2,r2,-1
  8013d0:	80800115 	stw	r2,4(r16)
  8013d4:	103ff10e 	bge	r2,zero,80139c <fgetc+0x44>
  8013d8:	89000017 	ldw	r4,0(r17)
  8013dc:	dfc00217 	ldw	ra,8(sp)
  8013e0:	dc400117 	ldw	r17,4(sp)
  8013e4:	dc000017 	ldw	r16,0(sp)
  8013e8:	dec00304 	addi	sp,sp,12
  8013ec:	08024941 	jmpi	802494 <__srget_r>

008013f0 <_fgetc_r>:
  8013f0:	defffd04 	addi	sp,sp,-12
  8013f4:	dc400115 	stw	r17,4(sp)
  8013f8:	dc000015 	stw	r16,0(sp)
  8013fc:	dfc00215 	stw	ra,8(sp)
  801400:	2021883a 	mov	r16,r4
  801404:	2823883a 	mov	r17,r5
  801408:	20000226 	beq	r4,zero,801414 <_fgetc_r+0x24>
  80140c:	20800e17 	ldw	r2,56(r4)
  801410:	10000f26 	beq	r2,zero,801450 <_fgetc_r+0x60>
  801414:	88800117 	ldw	r2,4(r17)
  801418:	8009883a 	mov	r4,r16
  80141c:	880b883a 	mov	r5,r17
  801420:	10bfffc4 	addi	r2,r2,-1
  801424:	88800115 	stw	r2,4(r17)
  801428:	10001016 	blt	r2,zero,80146c <_fgetc_r+0x7c>
  80142c:	88c00017 	ldw	r3,0(r17)
  801430:	18800003 	ldbu	r2,0(r3)
  801434:	18c00044 	addi	r3,r3,1
  801438:	88c00015 	stw	r3,0(r17)
  80143c:	dfc00217 	ldw	ra,8(sp)
  801440:	dc400117 	ldw	r17,4(sp)
  801444:	dc000017 	ldw	r16,0(sp)
  801448:	dec00304 	addi	sp,sp,12
  80144c:	f800283a 	ret
  801450:	08014e80 	call	8014e8 <__sinit>
  801454:	88800117 	ldw	r2,4(r17)
  801458:	8009883a 	mov	r4,r16
  80145c:	880b883a 	mov	r5,r17
  801460:	10bfffc4 	addi	r2,r2,-1
  801464:	88800115 	stw	r2,4(r17)
  801468:	103ff00e 	bge	r2,zero,80142c <_fgetc_r+0x3c>
  80146c:	dfc00217 	ldw	ra,8(sp)
  801470:	dc400117 	ldw	r17,4(sp)
  801474:	dc000017 	ldw	r16,0(sp)
  801478:	dec00304 	addi	sp,sp,12
  80147c:	08024941 	jmpi	802494 <__srget_r>

00801480 <std>:
  801480:	00802034 	movhi	r2,128
  801484:	10895904 	addi	r2,r2,9572
  801488:	20800b15 	stw	r2,44(r4)
  80148c:	00802034 	movhi	r2,128
  801490:	10899404 	addi	r2,r2,9808
  801494:	20800815 	stw	r2,32(r4)
  801498:	00c02034 	movhi	r3,128
  80149c:	18c97504 	addi	r3,r3,9684
  8014a0:	00802034 	movhi	r2,128
  8014a4:	10895b04 	addi	r2,r2,9580
  8014a8:	2140030d 	sth	r5,12(r4)
  8014ac:	2180038d 	sth	r6,14(r4)
  8014b0:	20c00915 	stw	r3,36(r4)
  8014b4:	20800a15 	stw	r2,40(r4)
  8014b8:	20000015 	stw	zero,0(r4)
  8014bc:	20000115 	stw	zero,4(r4)
  8014c0:	20000215 	stw	zero,8(r4)
  8014c4:	20000415 	stw	zero,16(r4)
  8014c8:	20000515 	stw	zero,20(r4)
  8014cc:	20000615 	stw	zero,24(r4)
  8014d0:	21000715 	stw	r4,28(r4)
  8014d4:	f800283a 	ret

008014d8 <__sfp_lock_acquire>:
  8014d8:	f800283a 	ret

008014dc <__sfp_lock_release>:
  8014dc:	f800283a 	ret

008014e0 <__sinit_lock_acquire>:
  8014e0:	f800283a 	ret

008014e4 <__sinit_lock_release>:
  8014e4:	f800283a 	ret

008014e8 <__sinit>:
  8014e8:	20800e17 	ldw	r2,56(r4)
  8014ec:	defffd04 	addi	sp,sp,-12
  8014f0:	dc400115 	stw	r17,4(sp)
  8014f4:	dc000015 	stw	r16,0(sp)
  8014f8:	dfc00215 	stw	ra,8(sp)
  8014fc:	04400044 	movi	r17,1
  801500:	01400104 	movi	r5,4
  801504:	000d883a 	mov	r6,zero
  801508:	2021883a 	mov	r16,r4
  80150c:	2200bb04 	addi	r8,r4,748
  801510:	200f883a 	mov	r7,r4
  801514:	10000526 	beq	r2,zero,80152c <__sinit+0x44>
  801518:	dfc00217 	ldw	ra,8(sp)
  80151c:	dc400117 	ldw	r17,4(sp)
  801520:	dc000017 	ldw	r16,0(sp)
  801524:	dec00304 	addi	sp,sp,12
  801528:	f800283a 	ret
  80152c:	21000117 	ldw	r4,4(r4)
  801530:	00802034 	movhi	r2,128
  801534:	10857304 	addi	r2,r2,5580
  801538:	00c000c4 	movi	r3,3
  80153c:	80800f15 	stw	r2,60(r16)
  801540:	80c0b915 	stw	r3,740(r16)
  801544:	8200ba15 	stw	r8,744(r16)
  801548:	84400e15 	stw	r17,56(r16)
  80154c:	8000b815 	stw	zero,736(r16)
  801550:	08014800 	call	801480 <std>
  801554:	81000217 	ldw	r4,8(r16)
  801558:	880d883a 	mov	r6,r17
  80155c:	800f883a 	mov	r7,r16
  801560:	01400284 	movi	r5,10
  801564:	08014800 	call	801480 <std>
  801568:	81000317 	ldw	r4,12(r16)
  80156c:	800f883a 	mov	r7,r16
  801570:	01400484 	movi	r5,18
  801574:	01800084 	movi	r6,2
  801578:	dfc00217 	ldw	ra,8(sp)
  80157c:	dc400117 	ldw	r17,4(sp)
  801580:	dc000017 	ldw	r16,0(sp)
  801584:	dec00304 	addi	sp,sp,12
  801588:	08014801 	jmpi	801480 <std>

0080158c <__fp_lock>:
  80158c:	0005883a 	mov	r2,zero
  801590:	f800283a 	ret

00801594 <__fp_unlock>:
  801594:	0005883a 	mov	r2,zero
  801598:	f800283a 	ret

0080159c <__fp_unlock_all>:
  80159c:	00802074 	movhi	r2,129
  8015a0:	10aa7a04 	addi	r2,r2,-22040
  8015a4:	11000017 	ldw	r4,0(r2)
  8015a8:	01402034 	movhi	r5,128
  8015ac:	29456504 	addi	r5,r5,5524
  8015b0:	08019641 	jmpi	801964 <_fwalk>

008015b4 <__fp_lock_all>:
  8015b4:	00802074 	movhi	r2,129
  8015b8:	10aa7a04 	addi	r2,r2,-22040
  8015bc:	11000017 	ldw	r4,0(r2)
  8015c0:	01402034 	movhi	r5,128
  8015c4:	29456304 	addi	r5,r5,5516
  8015c8:	08019641 	jmpi	801964 <_fwalk>

008015cc <_cleanup_r>:
  8015cc:	01402034 	movhi	r5,128
  8015d0:	294ae904 	addi	r5,r5,11172
  8015d4:	08019641 	jmpi	801964 <_fwalk>

008015d8 <_cleanup>:
  8015d8:	00802074 	movhi	r2,129
  8015dc:	10aa7b04 	addi	r2,r2,-22036
  8015e0:	11000017 	ldw	r4,0(r2)
  8015e4:	08015cc1 	jmpi	8015cc <_cleanup_r>

008015e8 <__sfmoreglue>:
  8015e8:	defffc04 	addi	sp,sp,-16
  8015ec:	dc400115 	stw	r17,4(sp)
  8015f0:	2c401724 	muli	r17,r5,92
  8015f4:	dc800215 	stw	r18,8(sp)
  8015f8:	2825883a 	mov	r18,r5
  8015fc:	89400304 	addi	r5,r17,12
  801600:	dc000015 	stw	r16,0(sp)
  801604:	dfc00315 	stw	ra,12(sp)
  801608:	0801a1c0 	call	801a1c <_malloc_r>
  80160c:	0021883a 	mov	r16,zero
  801610:	880d883a 	mov	r6,r17
  801614:	000b883a 	mov	r5,zero
  801618:	10000626 	beq	r2,zero,801634 <__sfmoreglue+0x4c>
  80161c:	11000304 	addi	r4,r2,12
  801620:	14800115 	stw	r18,4(r2)
  801624:	10000015 	stw	zero,0(r2)
  801628:	11000215 	stw	r4,8(r2)
  80162c:	1021883a 	mov	r16,r2
  801630:	080215c0 	call	80215c <memset>
  801634:	8005883a 	mov	r2,r16
  801638:	dfc00317 	ldw	ra,12(sp)
  80163c:	dc800217 	ldw	r18,8(sp)
  801640:	dc400117 	ldw	r17,4(sp)
  801644:	dc000017 	ldw	r16,0(sp)
  801648:	dec00404 	addi	sp,sp,16
  80164c:	f800283a 	ret

00801650 <__sfp>:
  801650:	defffd04 	addi	sp,sp,-12
  801654:	00802074 	movhi	r2,129
  801658:	10aa7b04 	addi	r2,r2,-22036
  80165c:	dc000015 	stw	r16,0(sp)
  801660:	14000017 	ldw	r16,0(r2)
  801664:	dc400115 	stw	r17,4(sp)
  801668:	dfc00215 	stw	ra,8(sp)
  80166c:	80800e17 	ldw	r2,56(r16)
  801670:	2023883a 	mov	r17,r4
  801674:	10002626 	beq	r2,zero,801710 <__sfp+0xc0>
  801678:	8400b804 	addi	r16,r16,736
  80167c:	80800117 	ldw	r2,4(r16)
  801680:	81000217 	ldw	r4,8(r16)
  801684:	10ffffc4 	addi	r3,r2,-1
  801688:	18000916 	blt	r3,zero,8016b0 <__sfp+0x60>
  80168c:	2080030f 	ldh	r2,12(r4)
  801690:	10000b26 	beq	r2,zero,8016c0 <__sfp+0x70>
  801694:	017fffc4 	movi	r5,-1
  801698:	00000206 	br	8016a4 <__sfp+0x54>
  80169c:	2080030f 	ldh	r2,12(r4)
  8016a0:	10000726 	beq	r2,zero,8016c0 <__sfp+0x70>
  8016a4:	18ffffc4 	addi	r3,r3,-1
  8016a8:	21001704 	addi	r4,r4,92
  8016ac:	197ffb1e 	bne	r3,r5,80169c <__sfp+0x4c>
  8016b0:	80800017 	ldw	r2,0(r16)
  8016b4:	10001926 	beq	r2,zero,80171c <__sfp+0xcc>
  8016b8:	1021883a 	mov	r16,r2
  8016bc:	003fef06 	br	80167c <__sfp+0x2c>
  8016c0:	00bfffc4 	movi	r2,-1
  8016c4:	00c00044 	movi	r3,1
  8016c8:	2080038d 	sth	r2,14(r4)
  8016cc:	20c0030d 	sth	r3,12(r4)
  8016d0:	20000015 	stw	zero,0(r4)
  8016d4:	20000215 	stw	zero,8(r4)
  8016d8:	20000115 	stw	zero,4(r4)
  8016dc:	20000415 	stw	zero,16(r4)
  8016e0:	20000515 	stw	zero,20(r4)
  8016e4:	20000615 	stw	zero,24(r4)
  8016e8:	20000c15 	stw	zero,48(r4)
  8016ec:	20000d15 	stw	zero,52(r4)
  8016f0:	20001115 	stw	zero,68(r4)
  8016f4:	20001215 	stw	zero,72(r4)
  8016f8:	2005883a 	mov	r2,r4
  8016fc:	dfc00217 	ldw	ra,8(sp)
  801700:	dc400117 	ldw	r17,4(sp)
  801704:	dc000017 	ldw	r16,0(sp)
  801708:	dec00304 	addi	sp,sp,12
  80170c:	f800283a 	ret
  801710:	8009883a 	mov	r4,r16
  801714:	08014e80 	call	8014e8 <__sinit>
  801718:	003fd706 	br	801678 <__sfp+0x28>
  80171c:	8809883a 	mov	r4,r17
  801720:	01400104 	movi	r5,4
  801724:	08015e80 	call	8015e8 <__sfmoreglue>
  801728:	80800015 	stw	r2,0(r16)
  80172c:	103fe21e 	bne	r2,zero,8016b8 <__sfp+0x68>
  801730:	00800304 	movi	r2,12
  801734:	0009883a 	mov	r4,zero
  801738:	88800015 	stw	r2,0(r17)
  80173c:	003fee06 	br	8016f8 <__sfp+0xa8>

00801740 <__sflags>:
  801740:	28c00007 	ldb	r3,0(r5)
  801744:	00801c84 	movi	r2,114
  801748:	18800926 	beq	r3,r2,801770 <__sflags+0x30>
  80174c:	00801dc4 	movi	r2,119
  801750:	18801426 	beq	r3,r2,8017a4 <__sflags+0x64>
  801754:	00801844 	movi	r2,97
  801758:	18801626 	beq	r3,r2,8017b4 <__sflags+0x74>
  80175c:	0007883a 	mov	r3,zero
  801760:	00800584 	movi	r2,22
  801764:	20800015 	stw	r2,0(r4)
  801768:	1805883a 	mov	r2,r3
  80176c:	f800283a 	ret
  801770:	000f883a 	mov	r7,zero
  801774:	0011883a 	mov	r8,zero
  801778:	00c00104 	movi	r3,4
  80177c:	28800047 	ldb	r2,1(r5)
  801780:	10000426 	beq	r2,zero,801794 <__sflags+0x54>
  801784:	01000ac4 	movi	r4,43
  801788:	11000e26 	beq	r2,r4,8017c4 <__sflags+0x84>
  80178c:	28800087 	ldb	r2,2(r5)
  801790:	11000c26 	beq	r2,r4,8017c4 <__sflags+0x84>
  801794:	3a04b03a 	or	r2,r7,r8
  801798:	30800015 	stw	r2,0(r6)
  80179c:	1805883a 	mov	r2,r3
  8017a0:	f800283a 	ret
  8017a4:	01c00044 	movi	r7,1
  8017a8:	02018004 	movi	r8,1536
  8017ac:	00c00204 	movi	r3,8
  8017b0:	003ff206 	br	80177c <__sflags+0x3c>
  8017b4:	01c00044 	movi	r7,1
  8017b8:	02008204 	movi	r8,520
  8017bc:	00c04204 	movi	r3,264
  8017c0:	003fee06 	br	80177c <__sflags+0x3c>
  8017c4:	00bffcc4 	movi	r2,-13
  8017c8:	1884703a 	and	r2,r3,r2
  8017cc:	01c00084 	movi	r7,2
  8017d0:	10c00414 	ori	r3,r2,16
  8017d4:	3a04b03a 	or	r2,r7,r8
  8017d8:	30800015 	stw	r2,0(r6)
  8017dc:	003fef06 	br	80179c <__sflags+0x5c>

008017e0 <fputc>:
  8017e0:	defffc04 	addi	sp,sp,-16
  8017e4:	dc800215 	stw	r18,8(sp)
  8017e8:	04802074 	movhi	r18,129
  8017ec:	94aa7a04 	addi	r18,r18,-22040
  8017f0:	90c00017 	ldw	r3,0(r18)
  8017f4:	dc400115 	stw	r17,4(sp)
  8017f8:	dc000015 	stw	r16,0(sp)
  8017fc:	dfc00315 	stw	ra,12(sp)
  801800:	2021883a 	mov	r16,r4
  801804:	2823883a 	mov	r17,r5
  801808:	18000326 	beq	r3,zero,801818 <fputc+0x38>
  80180c:	18800e17 	ldw	r2,56(r3)
  801810:	1809883a 	mov	r4,r3
  801814:	10000926 	beq	r2,zero,80183c <fputc+0x5c>
  801818:	91000017 	ldw	r4,0(r18)
  80181c:	800b883a 	mov	r5,r16
  801820:	880d883a 	mov	r6,r17
  801824:	dfc00317 	ldw	ra,12(sp)
  801828:	dc800217 	ldw	r18,8(sp)
  80182c:	dc400117 	ldw	r17,4(sp)
  801830:	dc000017 	ldw	r16,0(sp)
  801834:	dec00404 	addi	sp,sp,16
  801838:	08022f81 	jmpi	8022f8 <_putc_r>
  80183c:	08014e80 	call	8014e8 <__sinit>
  801840:	003ff506 	br	801818 <fputc+0x38>

00801844 <_fputc_r>:
  801844:	defffc04 	addi	sp,sp,-16
  801848:	dc800215 	stw	r18,8(sp)
  80184c:	dc400115 	stw	r17,4(sp)
  801850:	dc000015 	stw	r16,0(sp)
  801854:	dfc00315 	stw	ra,12(sp)
  801858:	2021883a 	mov	r16,r4
  80185c:	2823883a 	mov	r17,r5
  801860:	3025883a 	mov	r18,r6
  801864:	20000226 	beq	r4,zero,801870 <_fputc_r+0x2c>
  801868:	20800e17 	ldw	r2,56(r4)
  80186c:	10000926 	beq	r2,zero,801894 <_fputc_r+0x50>
  801870:	8009883a 	mov	r4,r16
  801874:	880b883a 	mov	r5,r17
  801878:	900d883a 	mov	r6,r18
  80187c:	dfc00317 	ldw	ra,12(sp)
  801880:	dc800217 	ldw	r18,8(sp)
  801884:	dc400117 	ldw	r17,4(sp)
  801888:	dc000017 	ldw	r16,0(sp)
  80188c:	dec00404 	addi	sp,sp,16
  801890:	08022f81 	jmpi	8022f8 <_putc_r>
  801894:	08014e80 	call	8014e8 <__sinit>
  801898:	003ff506 	br	801870 <_fputc_r+0x2c>

0080189c <_fwalk_reent>:
  80189c:	defff704 	addi	sp,sp,-36
  8018a0:	dcc00315 	stw	r19,12(sp)
  8018a4:	24c0b804 	addi	r19,r4,736
  8018a8:	dd800615 	stw	r22,24(sp)
  8018ac:	dd400515 	stw	r21,20(sp)
  8018b0:	dfc00815 	stw	ra,32(sp)
  8018b4:	ddc00715 	stw	r23,28(sp)
  8018b8:	dd000415 	stw	r20,16(sp)
  8018bc:	dc800215 	stw	r18,8(sp)
  8018c0:	dc400115 	stw	r17,4(sp)
  8018c4:	dc000015 	stw	r16,0(sp)
  8018c8:	202b883a 	mov	r21,r4
  8018cc:	282d883a 	mov	r22,r5
  8018d0:	08014d80 	call	8014d8 <__sfp_lock_acquire>
  8018d4:	98002126 	beq	r19,zero,80195c <_fwalk_reent+0xc0>
  8018d8:	002f883a 	mov	r23,zero
  8018dc:	9c800117 	ldw	r18,4(r19)
  8018e0:	9c000217 	ldw	r16,8(r19)
  8018e4:	90bfffc4 	addi	r2,r18,-1
  8018e8:	10000d16 	blt	r2,zero,801920 <_fwalk_reent+0x84>
  8018ec:	0023883a 	mov	r17,zero
  8018f0:	053fffc4 	movi	r20,-1
  8018f4:	8080030f 	ldh	r2,12(r16)
  8018f8:	8c400044 	addi	r17,r17,1
  8018fc:	10000626 	beq	r2,zero,801918 <_fwalk_reent+0x7c>
  801900:	8080038f 	ldh	r2,14(r16)
  801904:	800b883a 	mov	r5,r16
  801908:	a809883a 	mov	r4,r21
  80190c:	15000226 	beq	r2,r20,801918 <_fwalk_reent+0x7c>
  801910:	b03ee83a 	callr	r22
  801914:	b8aeb03a 	or	r23,r23,r2
  801918:	84001704 	addi	r16,r16,92
  80191c:	947ff51e 	bne	r18,r17,8018f4 <_fwalk_reent+0x58>
  801920:	9cc00017 	ldw	r19,0(r19)
  801924:	983fed1e 	bne	r19,zero,8018dc <_fwalk_reent+0x40>
  801928:	08014dc0 	call	8014dc <__sfp_lock_release>
  80192c:	b805883a 	mov	r2,r23
  801930:	dfc00817 	ldw	ra,32(sp)
  801934:	ddc00717 	ldw	r23,28(sp)
  801938:	dd800617 	ldw	r22,24(sp)
  80193c:	dd400517 	ldw	r21,20(sp)
  801940:	dd000417 	ldw	r20,16(sp)
  801944:	dcc00317 	ldw	r19,12(sp)
  801948:	dc800217 	ldw	r18,8(sp)
  80194c:	dc400117 	ldw	r17,4(sp)
  801950:	dc000017 	ldw	r16,0(sp)
  801954:	dec00904 	addi	sp,sp,36
  801958:	f800283a 	ret
  80195c:	002f883a 	mov	r23,zero
  801960:	003ff106 	br	801928 <_fwalk_reent+0x8c>

00801964 <_fwalk>:
  801964:	defff804 	addi	sp,sp,-32
  801968:	dcc00315 	stw	r19,12(sp)
  80196c:	24c0b804 	addi	r19,r4,736
  801970:	dd400515 	stw	r21,20(sp)
  801974:	dfc00715 	stw	ra,28(sp)
  801978:	dd800615 	stw	r22,24(sp)
  80197c:	dd000415 	stw	r20,16(sp)
  801980:	dc800215 	stw	r18,8(sp)
  801984:	dc400115 	stw	r17,4(sp)
  801988:	dc000015 	stw	r16,0(sp)
  80198c:	282b883a 	mov	r21,r5
  801990:	08014d80 	call	8014d8 <__sfp_lock_acquire>
  801994:	98001f26 	beq	r19,zero,801a14 <_fwalk+0xb0>
  801998:	002d883a 	mov	r22,zero
  80199c:	9c800117 	ldw	r18,4(r19)
  8019a0:	9c000217 	ldw	r16,8(r19)
  8019a4:	90bfffc4 	addi	r2,r18,-1
  8019a8:	10000c16 	blt	r2,zero,8019dc <_fwalk+0x78>
  8019ac:	0023883a 	mov	r17,zero
  8019b0:	053fffc4 	movi	r20,-1
  8019b4:	8080030f 	ldh	r2,12(r16)
  8019b8:	8c400044 	addi	r17,r17,1
  8019bc:	10000526 	beq	r2,zero,8019d4 <_fwalk+0x70>
  8019c0:	8080038f 	ldh	r2,14(r16)
  8019c4:	8009883a 	mov	r4,r16
  8019c8:	15000226 	beq	r2,r20,8019d4 <_fwalk+0x70>
  8019cc:	a83ee83a 	callr	r21
  8019d0:	b0acb03a 	or	r22,r22,r2
  8019d4:	84001704 	addi	r16,r16,92
  8019d8:	947ff61e 	bne	r18,r17,8019b4 <_fwalk+0x50>
  8019dc:	9cc00017 	ldw	r19,0(r19)
  8019e0:	983fee1e 	bne	r19,zero,80199c <_fwalk+0x38>
  8019e4:	08014dc0 	call	8014dc <__sfp_lock_release>
  8019e8:	b005883a 	mov	r2,r22
  8019ec:	dfc00717 	ldw	ra,28(sp)
  8019f0:	dd800617 	ldw	r22,24(sp)
  8019f4:	dd400517 	ldw	r21,20(sp)
  8019f8:	dd000417 	ldw	r20,16(sp)
  8019fc:	dcc00317 	ldw	r19,12(sp)
  801a00:	dc800217 	ldw	r18,8(sp)
  801a04:	dc400117 	ldw	r17,4(sp)
  801a08:	dc000017 	ldw	r16,0(sp)
  801a0c:	dec00804 	addi	sp,sp,32
  801a10:	f800283a 	ret
  801a14:	002d883a 	mov	r22,zero
  801a18:	003ff206 	br	8019e4 <_fwalk+0x80>

00801a1c <_malloc_r>:
  801a1c:	defff604 	addi	sp,sp,-40
  801a20:	28c002c4 	addi	r3,r5,11
  801a24:	00800584 	movi	r2,22
  801a28:	dc800215 	stw	r18,8(sp)
  801a2c:	dfc00915 	stw	ra,36(sp)
  801a30:	df000815 	stw	fp,32(sp)
  801a34:	ddc00715 	stw	r23,28(sp)
  801a38:	dd800615 	stw	r22,24(sp)
  801a3c:	dd400515 	stw	r21,20(sp)
  801a40:	dd000415 	stw	r20,16(sp)
  801a44:	dcc00315 	stw	r19,12(sp)
  801a48:	dc400115 	stw	r17,4(sp)
  801a4c:	dc000015 	stw	r16,0(sp)
  801a50:	2025883a 	mov	r18,r4
  801a54:	10c01236 	bltu	r2,r3,801aa0 <_malloc_r+0x84>
  801a58:	04400404 	movi	r17,16
  801a5c:	8940142e 	bgeu	r17,r5,801ab0 <_malloc_r+0x94>
  801a60:	00800304 	movi	r2,12
  801a64:	0007883a 	mov	r3,zero
  801a68:	90800015 	stw	r2,0(r18)
  801a6c:	1805883a 	mov	r2,r3
  801a70:	dfc00917 	ldw	ra,36(sp)
  801a74:	df000817 	ldw	fp,32(sp)
  801a78:	ddc00717 	ldw	r23,28(sp)
  801a7c:	dd800617 	ldw	r22,24(sp)
  801a80:	dd400517 	ldw	r21,20(sp)
  801a84:	dd000417 	ldw	r20,16(sp)
  801a88:	dcc00317 	ldw	r19,12(sp)
  801a8c:	dc800217 	ldw	r18,8(sp)
  801a90:	dc400117 	ldw	r17,4(sp)
  801a94:	dc000017 	ldw	r16,0(sp)
  801a98:	dec00a04 	addi	sp,sp,40
  801a9c:	f800283a 	ret
  801aa0:	00bffe04 	movi	r2,-8
  801aa4:	18a2703a 	and	r17,r3,r2
  801aa8:	883fed16 	blt	r17,zero,801a60 <_malloc_r+0x44>
  801aac:	897fec36 	bltu	r17,r5,801a60 <_malloc_r+0x44>
  801ab0:	9009883a 	mov	r4,r18
  801ab4:	0804c3c0 	call	804c3c <__malloc_lock>
  801ab8:	00807dc4 	movi	r2,503
  801abc:	14402b2e 	bgeu	r2,r17,801b6c <_malloc_r+0x150>
  801ac0:	8806d27a 	srli	r3,r17,9
  801ac4:	18003f1e 	bne	r3,zero,801bc4 <_malloc_r+0x1a8>
  801ac8:	880cd0fa 	srli	r6,r17,3
  801acc:	300490fa 	slli	r2,r6,3
  801ad0:	02c02074 	movhi	r11,129
  801ad4:	5ae47d04 	addi	r11,r11,-28172
  801ad8:	12cb883a 	add	r5,r2,r11
  801adc:	2c000317 	ldw	r16,12(r5)
  801ae0:	580f883a 	mov	r7,r11
  801ae4:	2c00041e 	bne	r5,r16,801af8 <_malloc_r+0xdc>
  801ae8:	00000a06 	br	801b14 <_malloc_r+0xf8>
  801aec:	1800860e 	bge	r3,zero,801d08 <_malloc_r+0x2ec>
  801af0:	84000317 	ldw	r16,12(r16)
  801af4:	2c000726 	beq	r5,r16,801b14 <_malloc_r+0xf8>
  801af8:	80800117 	ldw	r2,4(r16)
  801afc:	00ffff04 	movi	r3,-4
  801b00:	10c8703a 	and	r4,r2,r3
  801b04:	2447c83a 	sub	r3,r4,r17
  801b08:	008003c4 	movi	r2,15
  801b0c:	10fff70e 	bge	r2,r3,801aec <_malloc_r+0xd0>
  801b10:	31bfffc4 	addi	r6,r6,-1
  801b14:	32400044 	addi	r9,r6,1
  801b18:	02802074 	movhi	r10,129
  801b1c:	52a47f04 	addi	r10,r10,-28164
  801b20:	54000217 	ldw	r16,8(r10)
  801b24:	8280a026 	beq	r16,r10,801da8 <_malloc_r+0x38c>
  801b28:	80800117 	ldw	r2,4(r16)
  801b2c:	00ffff04 	movi	r3,-4
  801b30:	10ca703a 	and	r5,r2,r3
  801b34:	2c4dc83a 	sub	r6,r5,r17
  801b38:	008003c4 	movi	r2,15
  801b3c:	11808316 	blt	r2,r6,801d4c <_malloc_r+0x330>
  801b40:	52800315 	stw	r10,12(r10)
  801b44:	52800215 	stw	r10,8(r10)
  801b48:	30002916 	blt	r6,zero,801bf0 <_malloc_r+0x1d4>
  801b4c:	8147883a 	add	r3,r16,r5
  801b50:	18800117 	ldw	r2,4(r3)
  801b54:	9009883a 	mov	r4,r18
  801b58:	10800054 	ori	r2,r2,1
  801b5c:	18800115 	stw	r2,4(r3)
  801b60:	0804c5c0 	call	804c5c <__malloc_unlock>
  801b64:	80c00204 	addi	r3,r16,8
  801b68:	003fc006 	br	801a6c <_malloc_r+0x50>
  801b6c:	02c02074 	movhi	r11,129
  801b70:	5ae47d04 	addi	r11,r11,-28172
  801b74:	8ac5883a 	add	r2,r17,r11
  801b78:	14000317 	ldw	r16,12(r2)
  801b7c:	580f883a 	mov	r7,r11
  801b80:	8806d0fa 	srli	r3,r17,3
  801b84:	14006c26 	beq	r2,r16,801d38 <_malloc_r+0x31c>
  801b88:	80c00117 	ldw	r3,4(r16)
  801b8c:	00bfff04 	movi	r2,-4
  801b90:	81800317 	ldw	r6,12(r16)
  801b94:	1886703a 	and	r3,r3,r2
  801b98:	80c7883a 	add	r3,r16,r3
  801b9c:	18800117 	ldw	r2,4(r3)
  801ba0:	81400217 	ldw	r5,8(r16)
  801ba4:	9009883a 	mov	r4,r18
  801ba8:	10800054 	ori	r2,r2,1
  801bac:	18800115 	stw	r2,4(r3)
  801bb0:	31400215 	stw	r5,8(r6)
  801bb4:	29800315 	stw	r6,12(r5)
  801bb8:	0804c5c0 	call	804c5c <__malloc_unlock>
  801bbc:	80c00204 	addi	r3,r16,8
  801bc0:	003faa06 	br	801a6c <_malloc_r+0x50>
  801bc4:	00800104 	movi	r2,4
  801bc8:	10c0052e 	bgeu	r2,r3,801be0 <_malloc_r+0x1c4>
  801bcc:	00800504 	movi	r2,20
  801bd0:	10c07836 	bltu	r2,r3,801db4 <_malloc_r+0x398>
  801bd4:	198016c4 	addi	r6,r3,91
  801bd8:	300490fa 	slli	r2,r6,3
  801bdc:	003fbc06 	br	801ad0 <_malloc_r+0xb4>
  801be0:	8804d1ba 	srli	r2,r17,6
  801be4:	11800e04 	addi	r6,r2,56
  801be8:	300490fa 	slli	r2,r6,3
  801bec:	003fb806 	br	801ad0 <_malloc_r+0xb4>
  801bf0:	00807fc4 	movi	r2,511
  801bf4:	1140bb36 	bltu	r2,r5,801ee4 <_malloc_r+0x4c8>
  801bf8:	2806d0fa 	srli	r3,r5,3
  801bfc:	573ffe04 	addi	fp,r10,-8
  801c00:	00800044 	movi	r2,1
  801c04:	180890fa 	slli	r4,r3,3
  801c08:	1807d0ba 	srai	r3,r3,2
  801c0c:	e1c00117 	ldw	r7,4(fp)
  801c10:	5909883a 	add	r4,r11,r4
  801c14:	21400217 	ldw	r5,8(r4)
  801c18:	10c4983a 	sll	r2,r2,r3
  801c1c:	81000315 	stw	r4,12(r16)
  801c20:	81400215 	stw	r5,8(r16)
  801c24:	388eb03a 	or	r7,r7,r2
  801c28:	2c000315 	stw	r16,12(r5)
  801c2c:	24000215 	stw	r16,8(r4)
  801c30:	e1c00115 	stw	r7,4(fp)
  801c34:	4807883a 	mov	r3,r9
  801c38:	4800cd16 	blt	r9,zero,801f70 <_malloc_r+0x554>
  801c3c:	1807d0ba 	srai	r3,r3,2
  801c40:	00800044 	movi	r2,1
  801c44:	10c8983a 	sll	r4,r2,r3
  801c48:	39004436 	bltu	r7,r4,801d5c <_malloc_r+0x340>
  801c4c:	21c4703a 	and	r2,r4,r7
  801c50:	10000a1e 	bne	r2,zero,801c7c <_malloc_r+0x260>
  801c54:	2109883a 	add	r4,r4,r4
  801c58:	00bfff04 	movi	r2,-4
  801c5c:	4884703a 	and	r2,r9,r2
  801c60:	3906703a 	and	r3,r7,r4
  801c64:	12400104 	addi	r9,r2,4
  801c68:	1800041e 	bne	r3,zero,801c7c <_malloc_r+0x260>
  801c6c:	2109883a 	add	r4,r4,r4
  801c70:	3904703a 	and	r2,r7,r4
  801c74:	4a400104 	addi	r9,r9,4
  801c78:	103ffc26 	beq	r2,zero,801c6c <_malloc_r+0x250>
  801c7c:	480490fa 	slli	r2,r9,3
  801c80:	4819883a 	mov	r12,r9
  801c84:	023fff04 	movi	r8,-4
  801c88:	589b883a 	add	r13,r11,r2
  801c8c:	6807883a 	mov	r3,r13
  801c90:	014003c4 	movi	r5,15
  801c94:	1c000317 	ldw	r16,12(r3)
  801c98:	1c00041e 	bne	r3,r16,801cac <_malloc_r+0x290>
  801c9c:	0000a706 	br	801f3c <_malloc_r+0x520>
  801ca0:	3000ab0e 	bge	r6,zero,801f50 <_malloc_r+0x534>
  801ca4:	84000317 	ldw	r16,12(r16)
  801ca8:	1c00a426 	beq	r3,r16,801f3c <_malloc_r+0x520>
  801cac:	80800117 	ldw	r2,4(r16)
  801cb0:	1204703a 	and	r2,r2,r8
  801cb4:	144dc83a 	sub	r6,r2,r17
  801cb8:	29bff90e 	bge	r5,r6,801ca0 <_malloc_r+0x284>
  801cbc:	81000317 	ldw	r4,12(r16)
  801cc0:	80c00217 	ldw	r3,8(r16)
  801cc4:	89400054 	ori	r5,r17,1
  801cc8:	8445883a 	add	r2,r16,r17
  801ccc:	20c00215 	stw	r3,8(r4)
  801cd0:	19000315 	stw	r4,12(r3)
  801cd4:	81400115 	stw	r5,4(r16)
  801cd8:	1187883a 	add	r3,r2,r6
  801cdc:	31000054 	ori	r4,r6,1
  801ce0:	50800315 	stw	r2,12(r10)
  801ce4:	50800215 	stw	r2,8(r10)
  801ce8:	19800015 	stw	r6,0(r3)
  801cec:	11000115 	stw	r4,4(r2)
  801cf0:	12800215 	stw	r10,8(r2)
  801cf4:	12800315 	stw	r10,12(r2)
  801cf8:	9009883a 	mov	r4,r18
  801cfc:	0804c5c0 	call	804c5c <__malloc_unlock>
  801d00:	80c00204 	addi	r3,r16,8
  801d04:	003f5906 	br	801a6c <_malloc_r+0x50>
  801d08:	8109883a 	add	r4,r16,r4
  801d0c:	20800117 	ldw	r2,4(r4)
  801d10:	80c00217 	ldw	r3,8(r16)
  801d14:	81400317 	ldw	r5,12(r16)
  801d18:	10800054 	ori	r2,r2,1
  801d1c:	20800115 	stw	r2,4(r4)
  801d20:	28c00215 	stw	r3,8(r5)
  801d24:	19400315 	stw	r5,12(r3)
  801d28:	9009883a 	mov	r4,r18
  801d2c:	0804c5c0 	call	804c5c <__malloc_unlock>
  801d30:	80c00204 	addi	r3,r16,8
  801d34:	003f4d06 	br	801a6c <_malloc_r+0x50>
  801d38:	80800204 	addi	r2,r16,8
  801d3c:	14000317 	ldw	r16,12(r2)
  801d40:	143f911e 	bne	r2,r16,801b88 <_malloc_r+0x16c>
  801d44:	1a400084 	addi	r9,r3,2
  801d48:	003f7306 	br	801b18 <_malloc_r+0xfc>
  801d4c:	88c00054 	ori	r3,r17,1
  801d50:	8445883a 	add	r2,r16,r17
  801d54:	80c00115 	stw	r3,4(r16)
  801d58:	003fdf06 	br	801cd8 <_malloc_r+0x2bc>
  801d5c:	e4000217 	ldw	r16,8(fp)
  801d60:	00bfff04 	movi	r2,-4
  801d64:	80c00117 	ldw	r3,4(r16)
  801d68:	802d883a 	mov	r22,r16
  801d6c:	18aa703a 	and	r21,r3,r2
  801d70:	ac401636 	bltu	r21,r17,801dcc <_malloc_r+0x3b0>
  801d74:	ac49c83a 	sub	r4,r21,r17
  801d78:	008003c4 	movi	r2,15
  801d7c:	1100130e 	bge	r2,r4,801dcc <_malloc_r+0x3b0>
  801d80:	88800054 	ori	r2,r17,1
  801d84:	8447883a 	add	r3,r16,r17
  801d88:	80800115 	stw	r2,4(r16)
  801d8c:	20800054 	ori	r2,r4,1
  801d90:	18800115 	stw	r2,4(r3)
  801d94:	e0c00215 	stw	r3,8(fp)
  801d98:	9009883a 	mov	r4,r18
  801d9c:	0804c5c0 	call	804c5c <__malloc_unlock>
  801da0:	80c00204 	addi	r3,r16,8
  801da4:	003f3106 	br	801a6c <_malloc_r+0x50>
  801da8:	39c00117 	ldw	r7,4(r7)
  801dac:	573ffe04 	addi	fp,r10,-8
  801db0:	003fa006 	br	801c34 <_malloc_r+0x218>
  801db4:	00801504 	movi	r2,84
  801db8:	10c06736 	bltu	r2,r3,801f58 <_malloc_r+0x53c>
  801dbc:	8804d33a 	srli	r2,r17,12
  801dc0:	11801b84 	addi	r6,r2,110
  801dc4:	300490fa 	slli	r2,r6,3
  801dc8:	003f4106 	br	801ad0 <_malloc_r+0xb4>
  801dcc:	d0a73617 	ldw	r2,-25384(gp)
  801dd0:	d0e00317 	ldw	r3,-32756(gp)
  801dd4:	053fffc4 	movi	r20,-1
  801dd8:	10800404 	addi	r2,r2,16
  801ddc:	88a7883a 	add	r19,r17,r2
  801de0:	1d000326 	beq	r3,r20,801df0 <_malloc_r+0x3d4>
  801de4:	98c3ffc4 	addi	r3,r19,4095
  801de8:	00bc0004 	movi	r2,-4096
  801dec:	18a6703a 	and	r19,r3,r2
  801df0:	9009883a 	mov	r4,r18
  801df4:	980b883a 	mov	r5,r19
  801df8:	08024f40 	call	8024f4 <_sbrk_r>
  801dfc:	1009883a 	mov	r4,r2
  801e00:	15000426 	beq	r2,r20,801e14 <_malloc_r+0x3f8>
  801e04:	854b883a 	add	r5,r16,r21
  801e08:	1029883a 	mov	r20,r2
  801e0c:	11405a2e 	bgeu	r2,r5,801f78 <_malloc_r+0x55c>
  801e10:	87000c26 	beq	r16,fp,801e44 <_malloc_r+0x428>
  801e14:	e4000217 	ldw	r16,8(fp)
  801e18:	80c00117 	ldw	r3,4(r16)
  801e1c:	00bfff04 	movi	r2,-4
  801e20:	1884703a 	and	r2,r3,r2
  801e24:	14400336 	bltu	r2,r17,801e34 <_malloc_r+0x418>
  801e28:	1449c83a 	sub	r4,r2,r17
  801e2c:	008003c4 	movi	r2,15
  801e30:	113fd316 	blt	r2,r4,801d80 <_malloc_r+0x364>
  801e34:	9009883a 	mov	r4,r18
  801e38:	0804c5c0 	call	804c5c <__malloc_unlock>
  801e3c:	0007883a 	mov	r3,zero
  801e40:	003f0a06 	br	801a6c <_malloc_r+0x50>
  801e44:	05c02074 	movhi	r23,129
  801e48:	bdf1ea04 	addi	r23,r23,-14424
  801e4c:	b8800017 	ldw	r2,0(r23)
  801e50:	988d883a 	add	r6,r19,r2
  801e54:	b9800015 	stw	r6,0(r23)
  801e58:	d0e00317 	ldw	r3,-32756(gp)
  801e5c:	00bfffc4 	movi	r2,-1
  801e60:	18808e26 	beq	r3,r2,80209c <_malloc_r+0x680>
  801e64:	2145c83a 	sub	r2,r4,r5
  801e68:	3085883a 	add	r2,r6,r2
  801e6c:	b8800015 	stw	r2,0(r23)
  801e70:	20c001cc 	andi	r3,r4,7
  801e74:	18005f1e 	bne	r3,zero,801ff4 <_malloc_r+0x5d8>
  801e78:	000b883a 	mov	r5,zero
  801e7c:	a4c5883a 	add	r2,r20,r19
  801e80:	1083ffcc 	andi	r2,r2,4095
  801e84:	00c40004 	movi	r3,4096
  801e88:	1887c83a 	sub	r3,r3,r2
  801e8c:	28e7883a 	add	r19,r5,r3
  801e90:	9009883a 	mov	r4,r18
  801e94:	980b883a 	mov	r5,r19
  801e98:	08024f40 	call	8024f4 <_sbrk_r>
  801e9c:	1007883a 	mov	r3,r2
  801ea0:	00bfffc4 	movi	r2,-1
  801ea4:	18807a26 	beq	r3,r2,802090 <_malloc_r+0x674>
  801ea8:	1d05c83a 	sub	r2,r3,r20
  801eac:	9885883a 	add	r2,r19,r2
  801eb0:	10c00054 	ori	r3,r2,1
  801eb4:	b8800017 	ldw	r2,0(r23)
  801eb8:	a021883a 	mov	r16,r20
  801ebc:	a0c00115 	stw	r3,4(r20)
  801ec0:	9885883a 	add	r2,r19,r2
  801ec4:	b8800015 	stw	r2,0(r23)
  801ec8:	e5000215 	stw	r20,8(fp)
  801ecc:	b7003626 	beq	r22,fp,801fa8 <_malloc_r+0x58c>
  801ed0:	018003c4 	movi	r6,15
  801ed4:	35404b36 	bltu	r6,r21,802004 <_malloc_r+0x5e8>
  801ed8:	00800044 	movi	r2,1
  801edc:	a0800115 	stw	r2,4(r20)
  801ee0:	003fcd06 	br	801e18 <_malloc_r+0x3fc>
  801ee4:	2808d27a 	srli	r4,r5,9
  801ee8:	2000371e 	bne	r4,zero,801fc8 <_malloc_r+0x5ac>
  801eec:	2808d0fa 	srli	r4,r5,3
  801ef0:	200690fa 	slli	r3,r4,3
  801ef4:	1ad1883a 	add	r8,r3,r11
  801ef8:	41800217 	ldw	r6,8(r8)
  801efc:	41805b26 	beq	r8,r6,80206c <_malloc_r+0x650>
  801f00:	30800117 	ldw	r2,4(r6)
  801f04:	00ffff04 	movi	r3,-4
  801f08:	10c4703a 	and	r2,r2,r3
  801f0c:	2880022e 	bgeu	r5,r2,801f18 <_malloc_r+0x4fc>
  801f10:	31800217 	ldw	r6,8(r6)
  801f14:	41bffa1e 	bne	r8,r6,801f00 <_malloc_r+0x4e4>
  801f18:	32000317 	ldw	r8,12(r6)
  801f1c:	39c00117 	ldw	r7,4(r7)
  801f20:	82000315 	stw	r8,12(r16)
  801f24:	81800215 	stw	r6,8(r16)
  801f28:	07002074 	movhi	fp,129
  801f2c:	e7247d04 	addi	fp,fp,-28172
  801f30:	34000315 	stw	r16,12(r6)
  801f34:	44000215 	stw	r16,8(r8)
  801f38:	003f3e06 	br	801c34 <_malloc_r+0x218>
  801f3c:	63000044 	addi	r12,r12,1
  801f40:	608000cc 	andi	r2,r12,3
  801f44:	10005d26 	beq	r2,zero,8020bc <_malloc_r+0x6a0>
  801f48:	18c00204 	addi	r3,r3,8
  801f4c:	003f5106 	br	801c94 <_malloc_r+0x278>
  801f50:	8089883a 	add	r4,r16,r2
  801f54:	003f6d06 	br	801d0c <_malloc_r+0x2f0>
  801f58:	00805504 	movi	r2,340
  801f5c:	10c02036 	bltu	r2,r3,801fe0 <_malloc_r+0x5c4>
  801f60:	8804d3fa 	srli	r2,r17,15
  801f64:	11801dc4 	addi	r6,r2,119
  801f68:	300490fa 	slli	r2,r6,3
  801f6c:	003ed806 	br	801ad0 <_malloc_r+0xb4>
  801f70:	48c000c4 	addi	r3,r9,3
  801f74:	003f3106 	br	801c3c <_malloc_r+0x220>
  801f78:	05c02074 	movhi	r23,129
  801f7c:	bdf1ea04 	addi	r23,r23,-14424
  801f80:	b8800017 	ldw	r2,0(r23)
  801f84:	988d883a 	add	r6,r19,r2
  801f88:	b9800015 	stw	r6,0(r23)
  801f8c:	293fb21e 	bne	r5,r4,801e58 <_malloc_r+0x43c>
  801f90:	2083ffcc 	andi	r2,r4,4095
  801f94:	103fb01e 	bne	r2,zero,801e58 <_malloc_r+0x43c>
  801f98:	e4000217 	ldw	r16,8(fp)
  801f9c:	9d45883a 	add	r2,r19,r21
  801fa0:	10800054 	ori	r2,r2,1
  801fa4:	80800115 	stw	r2,4(r16)
  801fa8:	b8c00017 	ldw	r3,0(r23)
  801fac:	d0a73717 	ldw	r2,-25380(gp)
  801fb0:	10c0012e 	bgeu	r2,r3,801fb8 <_malloc_r+0x59c>
  801fb4:	d0e73715 	stw	r3,-25380(gp)
  801fb8:	d0a73817 	ldw	r2,-25376(gp)
  801fbc:	10ff962e 	bgeu	r2,r3,801e18 <_malloc_r+0x3fc>
  801fc0:	d0e73815 	stw	r3,-25376(gp)
  801fc4:	003f9406 	br	801e18 <_malloc_r+0x3fc>
  801fc8:	00800104 	movi	r2,4
  801fcc:	11001e36 	bltu	r2,r4,802048 <_malloc_r+0x62c>
  801fd0:	2804d1ba 	srli	r2,r5,6
  801fd4:	11000e04 	addi	r4,r2,56
  801fd8:	200690fa 	slli	r3,r4,3
  801fdc:	003fc506 	br	801ef4 <_malloc_r+0x4d8>
  801fe0:	00815504 	movi	r2,1364
  801fe4:	10c01d2e 	bgeu	r2,r3,80205c <_malloc_r+0x640>
  801fe8:	01801f84 	movi	r6,126
  801fec:	0080fc04 	movi	r2,1008
  801ff0:	003eb706 	br	801ad0 <_malloc_r+0xb4>
  801ff4:	00800204 	movi	r2,8
  801ff8:	10cbc83a 	sub	r5,r2,r3
  801ffc:	2169883a 	add	r20,r4,r5
  802000:	003f9e06 	br	801e7c <_malloc_r+0x460>
  802004:	00bffe04 	movi	r2,-8
  802008:	a93ffd04 	addi	r4,r21,-12
  80200c:	2088703a 	and	r4,r4,r2
  802010:	b10b883a 	add	r5,r22,r4
  802014:	00c00144 	movi	r3,5
  802018:	28c00215 	stw	r3,8(r5)
  80201c:	28c00115 	stw	r3,4(r5)
  802020:	b0800117 	ldw	r2,4(r22)
  802024:	1080004c 	andi	r2,r2,1
  802028:	2084b03a 	or	r2,r4,r2
  80202c:	b0800115 	stw	r2,4(r22)
  802030:	313fdd2e 	bgeu	r6,r4,801fa8 <_malloc_r+0x58c>
  802034:	b1400204 	addi	r5,r22,8
  802038:	9009883a 	mov	r4,r18
  80203c:	0802f140 	call	802f14 <_free_r>
  802040:	e4000217 	ldw	r16,8(fp)
  802044:	003fd806 	br	801fa8 <_malloc_r+0x58c>
  802048:	00800504 	movi	r2,20
  80204c:	11001536 	bltu	r2,r4,8020a4 <_malloc_r+0x688>
  802050:	210016c4 	addi	r4,r4,91
  802054:	200690fa 	slli	r3,r4,3
  802058:	003fa606 	br	801ef4 <_malloc_r+0x4d8>
  80205c:	8804d4ba 	srli	r2,r17,18
  802060:	11801f04 	addi	r6,r2,124
  802064:	300490fa 	slli	r2,r6,3
  802068:	003e9906 	br	801ad0 <_malloc_r+0xb4>
  80206c:	2009d0ba 	srai	r4,r4,2
  802070:	01402074 	movhi	r5,129
  802074:	29647d04 	addi	r5,r5,-28172
  802078:	00c00044 	movi	r3,1
  80207c:	28800117 	ldw	r2,4(r5)
  802080:	1906983a 	sll	r3,r3,r4
  802084:	10c4b03a 	or	r2,r2,r3
  802088:	28800115 	stw	r2,4(r5)
  80208c:	003fa306 	br	801f1c <_malloc_r+0x500>
  802090:	0027883a 	mov	r19,zero
  802094:	00c00044 	movi	r3,1
  802098:	003f8606 	br	801eb4 <_malloc_r+0x498>
  80209c:	d1200315 	stw	r4,-32756(gp)
  8020a0:	003f7306 	br	801e70 <_malloc_r+0x454>
  8020a4:	00801504 	movi	r2,84
  8020a8:	11001936 	bltu	r2,r4,802110 <_malloc_r+0x6f4>
  8020ac:	2804d33a 	srli	r2,r5,12
  8020b0:	11001b84 	addi	r4,r2,110
  8020b4:	200690fa 	slli	r3,r4,3
  8020b8:	003f8e06 	br	801ef4 <_malloc_r+0x4d8>
  8020bc:	480b883a 	mov	r5,r9
  8020c0:	6807883a 	mov	r3,r13
  8020c4:	288000cc 	andi	r2,r5,3
  8020c8:	18fffe04 	addi	r3,r3,-8
  8020cc:	297fffc4 	addi	r5,r5,-1
  8020d0:	10001526 	beq	r2,zero,802128 <_malloc_r+0x70c>
  8020d4:	18800217 	ldw	r2,8(r3)
  8020d8:	10fffa26 	beq	r2,r3,8020c4 <_malloc_r+0x6a8>
  8020dc:	2109883a 	add	r4,r4,r4
  8020e0:	393f1e36 	bltu	r7,r4,801d5c <_malloc_r+0x340>
  8020e4:	203f1d26 	beq	r4,zero,801d5c <_malloc_r+0x340>
  8020e8:	21c4703a 	and	r2,r4,r7
  8020ec:	10000226 	beq	r2,zero,8020f8 <_malloc_r+0x6dc>
  8020f0:	6013883a 	mov	r9,r12
  8020f4:	003ee106 	br	801c7c <_malloc_r+0x260>
  8020f8:	2109883a 	add	r4,r4,r4
  8020fc:	3904703a 	and	r2,r7,r4
  802100:	63000104 	addi	r12,r12,4
  802104:	103ffc26 	beq	r2,zero,8020f8 <_malloc_r+0x6dc>
  802108:	6013883a 	mov	r9,r12
  80210c:	003edb06 	br	801c7c <_malloc_r+0x260>
  802110:	00805504 	movi	r2,340
  802114:	11000836 	bltu	r2,r4,802138 <_malloc_r+0x71c>
  802118:	2804d3fa 	srli	r2,r5,15
  80211c:	11001dc4 	addi	r4,r2,119
  802120:	200690fa 	slli	r3,r4,3
  802124:	003f7306 	br	801ef4 <_malloc_r+0x4d8>
  802128:	0104303a 	nor	r2,zero,r4
  80212c:	388e703a 	and	r7,r7,r2
  802130:	e1c00115 	stw	r7,4(fp)
  802134:	003fe906 	br	8020dc <_malloc_r+0x6c0>
  802138:	00815504 	movi	r2,1364
  80213c:	1100032e 	bgeu	r2,r4,80214c <_malloc_r+0x730>
  802140:	01001f84 	movi	r4,126
  802144:	00c0fc04 	movi	r3,1008
  802148:	003f6a06 	br	801ef4 <_malloc_r+0x4d8>
  80214c:	2804d4ba 	srli	r2,r5,18
  802150:	11001f04 	addi	r4,r2,124
  802154:	200690fa 	slli	r3,r4,3
  802158:	003f6606 	br	801ef4 <_malloc_r+0x4d8>

0080215c <memset>:
  80215c:	008000c4 	movi	r2,3
  802160:	29403fcc 	andi	r5,r5,255
  802164:	2007883a 	mov	r3,r4
  802168:	1180022e 	bgeu	r2,r6,802174 <memset+0x18>
  80216c:	2084703a 	and	r2,r4,r2
  802170:	10000826 	beq	r2,zero,802194 <memset+0x38>
  802174:	30000526 	beq	r6,zero,80218c <memset+0x30>
  802178:	2805883a 	mov	r2,r5
  80217c:	30cd883a 	add	r6,r6,r3
  802180:	18800005 	stb	r2,0(r3)
  802184:	18c00044 	addi	r3,r3,1
  802188:	19bffd1e 	bne	r3,r6,802180 <memset+0x24>
  80218c:	2005883a 	mov	r2,r4
  802190:	f800283a 	ret
  802194:	2804923a 	slli	r2,r5,8
  802198:	020003c4 	movi	r8,15
  80219c:	200f883a 	mov	r7,r4
  8021a0:	2884b03a 	or	r2,r5,r2
  8021a4:	1006943a 	slli	r3,r2,16
  8021a8:	10c6b03a 	or	r3,r2,r3
  8021ac:	41800a2e 	bgeu	r8,r6,8021d8 <memset+0x7c>
  8021b0:	4005883a 	mov	r2,r8
  8021b4:	31bffc04 	addi	r6,r6,-16
  8021b8:	38c00015 	stw	r3,0(r7)
  8021bc:	38c00115 	stw	r3,4(r7)
  8021c0:	38c00215 	stw	r3,8(r7)
  8021c4:	38c00315 	stw	r3,12(r7)
  8021c8:	39c00404 	addi	r7,r7,16
  8021cc:	11bff936 	bltu	r2,r6,8021b4 <memset+0x58>
  8021d0:	008000c4 	movi	r2,3
  8021d4:	1180052e 	bgeu	r2,r6,8021ec <memset+0x90>
  8021d8:	31bfff04 	addi	r6,r6,-4
  8021dc:	008000c4 	movi	r2,3
  8021e0:	38c00015 	stw	r3,0(r7)
  8021e4:	39c00104 	addi	r7,r7,4
  8021e8:	11bffb36 	bltu	r2,r6,8021d8 <memset+0x7c>
  8021ec:	3807883a 	mov	r3,r7
  8021f0:	003fe006 	br	802174 <memset+0x18>

008021f4 <putc>:
  8021f4:	defffc04 	addi	sp,sp,-16
  8021f8:	dc800215 	stw	r18,8(sp)
  8021fc:	04802074 	movhi	r18,129
  802200:	94aa7a04 	addi	r18,r18,-22040
  802204:	90c00017 	ldw	r3,0(r18)
  802208:	dc400115 	stw	r17,4(sp)
  80220c:	dc000015 	stw	r16,0(sp)
  802210:	dfc00315 	stw	ra,12(sp)
  802214:	2023883a 	mov	r17,r4
  802218:	2821883a 	mov	r16,r5
  80221c:	18000226 	beq	r3,zero,802228 <putc+0x34>
  802220:	18800e17 	ldw	r2,56(r3)
  802224:	10001126 	beq	r2,zero,80226c <putc+0x78>
  802228:	80800217 	ldw	r2,8(r16)
  80222c:	10ffffc4 	addi	r3,r2,-1
  802230:	80c00215 	stw	r3,8(r16)
  802234:	18001316 	blt	r3,zero,802284 <putc+0x90>
  802238:	80800017 	ldw	r2,0(r16)
  80223c:	14400005 	stb	r17,0(r2)
  802240:	80c00017 	ldw	r3,0(r16)
  802244:	18800044 	addi	r2,r3,1
  802248:	18c00003 	ldbu	r3,0(r3)
  80224c:	80800015 	stw	r2,0(r16)
  802250:	1805883a 	mov	r2,r3
  802254:	dfc00317 	ldw	ra,12(sp)
  802258:	dc800217 	ldw	r18,8(sp)
  80225c:	dc400117 	ldw	r17,4(sp)
  802260:	dc000017 	ldw	r16,0(sp)
  802264:	dec00404 	addi	sp,sp,16
  802268:	f800283a 	ret
  80226c:	1809883a 	mov	r4,r3
  802270:	08014e80 	call	8014e8 <__sinit>
  802274:	80800217 	ldw	r2,8(r16)
  802278:	10ffffc4 	addi	r3,r2,-1
  80227c:	80c00215 	stw	r3,8(r16)
  802280:	183fed0e 	bge	r3,zero,802238 <putc+0x44>
  802284:	80800617 	ldw	r2,24(r16)
  802288:	18800f16 	blt	r3,r2,8022c8 <putc+0xd4>
  80228c:	80800017 	ldw	r2,0(r16)
  802290:	14400005 	stb	r17,0(r2)
  802294:	81000017 	ldw	r4,0(r16)
  802298:	00800284 	movi	r2,10
  80229c:	20c00003 	ldbu	r3,0(r4)
  8022a0:	18801226 	beq	r3,r2,8022ec <putc+0xf8>
  8022a4:	20800044 	addi	r2,r4,1
  8022a8:	80800015 	stw	r2,0(r16)
  8022ac:	1805883a 	mov	r2,r3
  8022b0:	dfc00317 	ldw	ra,12(sp)
  8022b4:	dc800217 	ldw	r18,8(sp)
  8022b8:	dc400117 	ldw	r17,4(sp)
  8022bc:	dc000017 	ldw	r16,0(sp)
  8022c0:	dec00404 	addi	sp,sp,16
  8022c4:	f800283a 	ret
  8022c8:	91000017 	ldw	r4,0(r18)
  8022cc:	880b883a 	mov	r5,r17
  8022d0:	800d883a 	mov	r6,r16
  8022d4:	dfc00317 	ldw	ra,12(sp)
  8022d8:	dc800217 	ldw	r18,8(sp)
  8022dc:	dc400117 	ldw	r17,4(sp)
  8022e0:	dc000017 	ldw	r16,0(sp)
  8022e4:	dec00404 	addi	sp,sp,16
  8022e8:	08027241 	jmpi	802724 <__swbuf_r>
  8022ec:	91000017 	ldw	r4,0(r18)
  8022f0:	180b883a 	mov	r5,r3
  8022f4:	003ff606 	br	8022d0 <putc+0xdc>

008022f8 <_putc_r>:
  8022f8:	defffc04 	addi	sp,sp,-16
  8022fc:	dc400215 	stw	r17,8(sp)
  802300:	dc000115 	stw	r16,4(sp)
  802304:	dfc00315 	stw	ra,12(sp)
  802308:	2021883a 	mov	r16,r4
  80230c:	2823883a 	mov	r17,r5
  802310:	20000226 	beq	r4,zero,80231c <_putc_r+0x24>
  802314:	20800e17 	ldw	r2,56(r4)
  802318:	10001026 	beq	r2,zero,80235c <_putc_r+0x64>
  80231c:	30800217 	ldw	r2,8(r6)
  802320:	10ffffc4 	addi	r3,r2,-1
  802324:	30c00215 	stw	r3,8(r6)
  802328:	18001316 	blt	r3,zero,802378 <_putc_r+0x80>
  80232c:	30800017 	ldw	r2,0(r6)
  802330:	14400005 	stb	r17,0(r2)
  802334:	30c00017 	ldw	r3,0(r6)
  802338:	18800044 	addi	r2,r3,1
  80233c:	18c00003 	ldbu	r3,0(r3)
  802340:	30800015 	stw	r2,0(r6)
  802344:	1805883a 	mov	r2,r3
  802348:	dfc00317 	ldw	ra,12(sp)
  80234c:	dc400217 	ldw	r17,8(sp)
  802350:	dc000117 	ldw	r16,4(sp)
  802354:	dec00404 	addi	sp,sp,16
  802358:	f800283a 	ret
  80235c:	d9800015 	stw	r6,0(sp)
  802360:	08014e80 	call	8014e8 <__sinit>
  802364:	d9800017 	ldw	r6,0(sp)
  802368:	30800217 	ldw	r2,8(r6)
  80236c:	10ffffc4 	addi	r3,r2,-1
  802370:	30c00215 	stw	r3,8(r6)
  802374:	183fed0e 	bge	r3,zero,80232c <_putc_r+0x34>
  802378:	30800617 	ldw	r2,24(r6)
  80237c:	18800e16 	blt	r3,r2,8023b8 <_putc_r+0xc0>
  802380:	30800017 	ldw	r2,0(r6)
  802384:	14400005 	stb	r17,0(r2)
  802388:	31000017 	ldw	r4,0(r6)
  80238c:	00800284 	movi	r2,10
  802390:	20c00003 	ldbu	r3,0(r4)
  802394:	18800f26 	beq	r3,r2,8023d4 <_putc_r+0xdc>
  802398:	20800044 	addi	r2,r4,1
  80239c:	30800015 	stw	r2,0(r6)
  8023a0:	1805883a 	mov	r2,r3
  8023a4:	dfc00317 	ldw	ra,12(sp)
  8023a8:	dc400217 	ldw	r17,8(sp)
  8023ac:	dc000117 	ldw	r16,4(sp)
  8023b0:	dec00404 	addi	sp,sp,16
  8023b4:	f800283a 	ret
  8023b8:	8009883a 	mov	r4,r16
  8023bc:	880b883a 	mov	r5,r17
  8023c0:	dfc00317 	ldw	ra,12(sp)
  8023c4:	dc400217 	ldw	r17,8(sp)
  8023c8:	dc000117 	ldw	r16,4(sp)
  8023cc:	dec00404 	addi	sp,sp,16
  8023d0:	08027241 	jmpi	802724 <__swbuf_r>
  8023d4:	8009883a 	mov	r4,r16
  8023d8:	180b883a 	mov	r5,r3
  8023dc:	003ff806 	br	8023c0 <_putc_r+0xc8>

008023e0 <_puts_r>:
  8023e0:	defff604 	addi	sp,sp,-40
  8023e4:	dc400715 	stw	r17,28(sp)
  8023e8:	2023883a 	mov	r17,r4
  8023ec:	2809883a 	mov	r4,r5
  8023f0:	dfc00915 	stw	ra,36(sp)
  8023f4:	dcc00815 	stw	r19,32(sp)
  8023f8:	2827883a 	mov	r19,r5
  8023fc:	08026b00 	call	8026b0 <strlen>
  802400:	89400217 	ldw	r5,8(r17)
  802404:	00c02074 	movhi	r3,129
  802408:	18e2ca04 	addi	r3,r3,-29912
  80240c:	01c00044 	movi	r7,1
  802410:	12000044 	addi	r8,r2,1
  802414:	d8c00515 	stw	r3,20(sp)
  802418:	d9c00615 	stw	r7,24(sp)
  80241c:	d8c00304 	addi	r3,sp,12
  802420:	01c00084 	movi	r7,2
  802424:	8809883a 	mov	r4,r17
  802428:	d80d883a 	mov	r6,sp
  80242c:	d8c00015 	stw	r3,0(sp)
  802430:	dcc00315 	stw	r19,12(sp)
  802434:	da000215 	stw	r8,8(sp)
  802438:	d9c00115 	stw	r7,4(sp)
  80243c:	d8800415 	stw	r2,16(sp)
  802440:	08032280 	call	803228 <__sfvwrite_r>
  802444:	00ffffc4 	movi	r3,-1
  802448:	10000626 	beq	r2,zero,802464 <_puts_r+0x84>
  80244c:	1805883a 	mov	r2,r3
  802450:	dfc00917 	ldw	ra,36(sp)
  802454:	dcc00817 	ldw	r19,32(sp)
  802458:	dc400717 	ldw	r17,28(sp)
  80245c:	dec00a04 	addi	sp,sp,40
  802460:	f800283a 	ret
  802464:	00c00284 	movi	r3,10
  802468:	1805883a 	mov	r2,r3
  80246c:	dfc00917 	ldw	ra,36(sp)
  802470:	dcc00817 	ldw	r19,32(sp)
  802474:	dc400717 	ldw	r17,28(sp)
  802478:	dec00a04 	addi	sp,sp,40
  80247c:	f800283a 	ret

00802480 <puts>:
  802480:	00802074 	movhi	r2,129
  802484:	10aa7a04 	addi	r2,r2,-22040
  802488:	200b883a 	mov	r5,r4
  80248c:	11000017 	ldw	r4,0(r2)
  802490:	08023e01 	jmpi	8023e0 <_puts_r>

00802494 <__srget_r>:
  802494:	defffe04 	addi	sp,sp,-8
  802498:	dc000015 	stw	r16,0(sp)
  80249c:	dfc00115 	stw	ra,4(sp)
  8024a0:	2821883a 	mov	r16,r5
  8024a4:	08041a00 	call	8041a0 <__srefill_r>
  8024a8:	013fffc4 	movi	r4,-1
  8024ac:	1000071e 	bne	r2,zero,8024cc <__srget_r+0x38>
  8024b0:	80800117 	ldw	r2,4(r16)
  8024b4:	81000017 	ldw	r4,0(r16)
  8024b8:	10bfffc4 	addi	r2,r2,-1
  8024bc:	20c00044 	addi	r3,r4,1
  8024c0:	80800115 	stw	r2,4(r16)
  8024c4:	21000003 	ldbu	r4,0(r4)
  8024c8:	80c00015 	stw	r3,0(r16)
  8024cc:	2005883a 	mov	r2,r4
  8024d0:	dfc00117 	ldw	ra,4(sp)
  8024d4:	dc000017 	ldw	r16,0(sp)
  8024d8:	dec00204 	addi	sp,sp,8
  8024dc:	f800283a 	ret

008024e0 <__srget>:
  8024e0:	00802074 	movhi	r2,129
  8024e4:	10aa7a04 	addi	r2,r2,-22040
  8024e8:	200b883a 	mov	r5,r4
  8024ec:	11000017 	ldw	r4,0(r2)
  8024f0:	08024941 	jmpi	802494 <__srget_r>

008024f4 <_sbrk_r>:
  8024f4:	defffd04 	addi	sp,sp,-12
  8024f8:	dc000015 	stw	r16,0(sp)
  8024fc:	04002074 	movhi	r16,129
  802500:	8431b304 	addi	r16,r16,-14644
  802504:	dc400115 	stw	r17,4(sp)
  802508:	80000015 	stw	zero,0(r16)
  80250c:	2023883a 	mov	r17,r4
  802510:	2809883a 	mov	r4,r5
  802514:	dfc00215 	stw	ra,8(sp)
  802518:	08051200 	call	805120 <sbrk>
  80251c:	1007883a 	mov	r3,r2
  802520:	00bfffc4 	movi	r2,-1
  802524:	18800626 	beq	r3,r2,802540 <_sbrk_r+0x4c>
  802528:	1805883a 	mov	r2,r3
  80252c:	dfc00217 	ldw	ra,8(sp)
  802530:	dc400117 	ldw	r17,4(sp)
  802534:	dc000017 	ldw	r16,0(sp)
  802538:	dec00304 	addi	sp,sp,12
  80253c:	f800283a 	ret
  802540:	80800017 	ldw	r2,0(r16)
  802544:	103ff826 	beq	r2,zero,802528 <_sbrk_r+0x34>
  802548:	88800015 	stw	r2,0(r17)
  80254c:	1805883a 	mov	r2,r3
  802550:	dfc00217 	ldw	ra,8(sp)
  802554:	dc400117 	ldw	r17,4(sp)
  802558:	dc000017 	ldw	r16,0(sp)
  80255c:	dec00304 	addi	sp,sp,12
  802560:	f800283a 	ret

00802564 <__sclose>:
  802564:	2940038f 	ldh	r5,14(r5)
  802568:	0802a241 	jmpi	802a24 <_close_r>

0080256c <__sseek>:
  80256c:	defffe04 	addi	sp,sp,-8
  802570:	dc000015 	stw	r16,0(sp)
  802574:	2821883a 	mov	r16,r5
  802578:	2940038f 	ldh	r5,14(r5)
  80257c:	dfc00115 	stw	ra,4(sp)
  802580:	08036c40 	call	8036c4 <_lseek_r>
  802584:	1007883a 	mov	r3,r2
  802588:	00bfffc4 	movi	r2,-1
  80258c:	18800926 	beq	r3,r2,8025b4 <__sseek+0x48>
  802590:	8080030b 	ldhu	r2,12(r16)
  802594:	80c01415 	stw	r3,80(r16)
  802598:	10840014 	ori	r2,r2,4096
  80259c:	8080030d 	sth	r2,12(r16)
  8025a0:	1805883a 	mov	r2,r3
  8025a4:	dfc00117 	ldw	ra,4(sp)
  8025a8:	dc000017 	ldw	r16,0(sp)
  8025ac:	dec00204 	addi	sp,sp,8
  8025b0:	f800283a 	ret
  8025b4:	8080030b 	ldhu	r2,12(r16)
  8025b8:	10bbffcc 	andi	r2,r2,61439
  8025bc:	8080030d 	sth	r2,12(r16)
  8025c0:	1805883a 	mov	r2,r3
  8025c4:	dfc00117 	ldw	ra,4(sp)
  8025c8:	dc000017 	ldw	r16,0(sp)
  8025cc:	dec00204 	addi	sp,sp,8
  8025d0:	f800283a 	ret

008025d4 <__swrite>:
  8025d4:	2880030b 	ldhu	r2,12(r5)
  8025d8:	defffb04 	addi	sp,sp,-20
  8025dc:	dcc00315 	stw	r19,12(sp)
  8025e0:	1080400c 	andi	r2,r2,256
  8025e4:	dc800215 	stw	r18,8(sp)
  8025e8:	dc400115 	stw	r17,4(sp)
  8025ec:	dc000015 	stw	r16,0(sp)
  8025f0:	3027883a 	mov	r19,r6
  8025f4:	3825883a 	mov	r18,r7
  8025f8:	dfc00415 	stw	ra,16(sp)
  8025fc:	2821883a 	mov	r16,r5
  802600:	000d883a 	mov	r6,zero
  802604:	01c00084 	movi	r7,2
  802608:	2023883a 	mov	r17,r4
  80260c:	10000226 	beq	r2,zero,802618 <__swrite+0x44>
  802610:	2940038f 	ldh	r5,14(r5)
  802614:	08036c40 	call	8036c4 <_lseek_r>
  802618:	8080030b 	ldhu	r2,12(r16)
  80261c:	8140038f 	ldh	r5,14(r16)
  802620:	8809883a 	mov	r4,r17
  802624:	10bbffcc 	andi	r2,r2,61439
  802628:	980d883a 	mov	r6,r19
  80262c:	900f883a 	mov	r7,r18
  802630:	8080030d 	sth	r2,12(r16)
  802634:	dfc00417 	ldw	ra,16(sp)
  802638:	dcc00317 	ldw	r19,12(sp)
  80263c:	dc800217 	ldw	r18,8(sp)
  802640:	dc400117 	ldw	r17,4(sp)
  802644:	dc000017 	ldw	r16,0(sp)
  802648:	dec00504 	addi	sp,sp,20
  80264c:	08028701 	jmpi	802870 <_write_r>

00802650 <__sread>:
  802650:	defffe04 	addi	sp,sp,-8
  802654:	dc000015 	stw	r16,0(sp)
  802658:	2821883a 	mov	r16,r5
  80265c:	2940038f 	ldh	r5,14(r5)
  802660:	dfc00115 	stw	ra,4(sp)
  802664:	0803b340 	call	803b34 <_read_r>
  802668:	1007883a 	mov	r3,r2
  80266c:	10000816 	blt	r2,zero,802690 <__sread+0x40>
  802670:	80801417 	ldw	r2,80(r16)
  802674:	10c5883a 	add	r2,r2,r3
  802678:	80801415 	stw	r2,80(r16)
  80267c:	1805883a 	mov	r2,r3
  802680:	dfc00117 	ldw	ra,4(sp)
  802684:	dc000017 	ldw	r16,0(sp)
  802688:	dec00204 	addi	sp,sp,8
  80268c:	f800283a 	ret
  802690:	8080030b 	ldhu	r2,12(r16)
  802694:	10bbffcc 	andi	r2,r2,61439
  802698:	8080030d 	sth	r2,12(r16)
  80269c:	1805883a 	mov	r2,r3
  8026a0:	dfc00117 	ldw	ra,4(sp)
  8026a4:	dc000017 	ldw	r16,0(sp)
  8026a8:	dec00204 	addi	sp,sp,8
  8026ac:	f800283a 	ret

008026b0 <strlen>:
  8026b0:	208000cc 	andi	r2,r4,3
  8026b4:	2011883a 	mov	r8,r4
  8026b8:	1000161e 	bne	r2,zero,802714 <strlen+0x64>
  8026bc:	20c00017 	ldw	r3,0(r4)
  8026c0:	017fbff4 	movhi	r5,65279
  8026c4:	297fbfc4 	addi	r5,r5,-257
  8026c8:	01e02074 	movhi	r7,32897
  8026cc:	39e02004 	addi	r7,r7,-32640
  8026d0:	1945883a 	add	r2,r3,r5
  8026d4:	11c4703a 	and	r2,r2,r7
  8026d8:	00c6303a 	nor	r3,zero,r3
  8026dc:	1886703a 	and	r3,r3,r2
  8026e0:	18000c1e 	bne	r3,zero,802714 <strlen+0x64>
  8026e4:	280d883a 	mov	r6,r5
  8026e8:	380b883a 	mov	r5,r7
  8026ec:	21000104 	addi	r4,r4,4
  8026f0:	20800017 	ldw	r2,0(r4)
  8026f4:	1187883a 	add	r3,r2,r6
  8026f8:	1946703a 	and	r3,r3,r5
  8026fc:	0084303a 	nor	r2,zero,r2
  802700:	10c4703a 	and	r2,r2,r3
  802704:	103ff926 	beq	r2,zero,8026ec <strlen+0x3c>
  802708:	20800007 	ldb	r2,0(r4)
  80270c:	10000326 	beq	r2,zero,80271c <strlen+0x6c>
  802710:	21000044 	addi	r4,r4,1
  802714:	20800007 	ldb	r2,0(r4)
  802718:	103ffd1e 	bne	r2,zero,802710 <strlen+0x60>
  80271c:	2205c83a 	sub	r2,r4,r8
  802720:	f800283a 	ret

00802724 <__swbuf_r>:
  802724:	defffc04 	addi	sp,sp,-16
  802728:	dc400215 	stw	r17,8(sp)
  80272c:	dc000115 	stw	r16,4(sp)
  802730:	dfc00315 	stw	ra,12(sp)
  802734:	2023883a 	mov	r17,r4
  802738:	2821883a 	mov	r16,r5
  80273c:	20000226 	beq	r4,zero,802748 <__swbuf_r+0x24>
  802740:	20800e17 	ldw	r2,56(r4)
  802744:	10002f26 	beq	r2,zero,802804 <__swbuf_r+0xe0>
  802748:	3080030b 	ldhu	r2,12(r6)
  80274c:	30c00617 	ldw	r3,24(r6)
  802750:	1080020c 	andi	r2,r2,8
  802754:	30c00215 	stw	r3,8(r6)
  802758:	10002226 	beq	r2,zero,8027e4 <__swbuf_r+0xc0>
  80275c:	30c00417 	ldw	r3,16(r6)
  802760:	18002026 	beq	r3,zero,8027e4 <__swbuf_r+0xc0>
  802764:	31000017 	ldw	r4,0(r6)
  802768:	30800517 	ldw	r2,20(r6)
  80276c:	20c7c83a 	sub	r3,r4,r3
  802770:	18802f0e 	bge	r3,r2,802830 <__swbuf_r+0x10c>
  802774:	19400044 	addi	r5,r3,1
  802778:	30800217 	ldw	r2,8(r6)
  80277c:	84003fcc 	andi	r16,r16,255
  802780:	20c00044 	addi	r3,r4,1
  802784:	10bfffc4 	addi	r2,r2,-1
  802788:	30800215 	stw	r2,8(r6)
  80278c:	24000005 	stb	r16,0(r4)
  802790:	30800517 	ldw	r2,20(r6)
  802794:	30c00015 	stw	r3,0(r6)
  802798:	11400c26 	beq	r2,r5,8027cc <__swbuf_r+0xa8>
  80279c:	3080030b 	ldhu	r2,12(r6)
  8027a0:	1080004c 	andi	r2,r2,1
  8027a4:	1005003a 	cmpeq	r2,r2,zero
  8027a8:	10000626 	beq	r2,zero,8027c4 <__swbuf_r+0xa0>
  8027ac:	8005883a 	mov	r2,r16
  8027b0:	dfc00317 	ldw	ra,12(sp)
  8027b4:	dc400217 	ldw	r17,8(sp)
  8027b8:	dc000117 	ldw	r16,4(sp)
  8027bc:	dec00404 	addi	sp,sp,16
  8027c0:	f800283a 	ret
  8027c4:	00800284 	movi	r2,10
  8027c8:	80bff81e 	bne	r16,r2,8027ac <__swbuf_r+0x88>
  8027cc:	8809883a 	mov	r4,r17
  8027d0:	300b883a 	mov	r5,r6
  8027d4:	0802bb80 	call	802bb8 <_fflush_r>
  8027d8:	103ff426 	beq	r2,zero,8027ac <__swbuf_r+0x88>
  8027dc:	043fffc4 	movi	r16,-1
  8027e0:	003ff206 	br	8027ac <__swbuf_r+0x88>
  8027e4:	300b883a 	mov	r5,r6
  8027e8:	8809883a 	mov	r4,r17
  8027ec:	d9800015 	stw	r6,0(sp)
  8027f0:	08028e80 	call	8028e8 <__swsetup_r>
  8027f4:	d9800017 	ldw	r6,0(sp)
  8027f8:	1000061e 	bne	r2,zero,802814 <__swbuf_r+0xf0>
  8027fc:	30c00417 	ldw	r3,16(r6)
  802800:	003fd806 	br	802764 <__swbuf_r+0x40>
  802804:	d9800015 	stw	r6,0(sp)
  802808:	08014e80 	call	8014e8 <__sinit>
  80280c:	d9800017 	ldw	r6,0(sp)
  802810:	003fcd06 	br	802748 <__swbuf_r+0x24>
  802814:	3080030b 	ldhu	r2,12(r6)
  802818:	00c00244 	movi	r3,9
  80281c:	043fffc4 	movi	r16,-1
  802820:	10801014 	ori	r2,r2,64
  802824:	3080030d 	sth	r2,12(r6)
  802828:	88c00015 	stw	r3,0(r17)
  80282c:	003fdf06 	br	8027ac <__swbuf_r+0x88>
  802830:	300b883a 	mov	r5,r6
  802834:	8809883a 	mov	r4,r17
  802838:	d9800015 	stw	r6,0(sp)
  80283c:	0802bb80 	call	802bb8 <_fflush_r>
  802840:	d9800017 	ldw	r6,0(sp)
  802844:	103fe51e 	bne	r2,zero,8027dc <__swbuf_r+0xb8>
  802848:	31000017 	ldw	r4,0(r6)
  80284c:	01400044 	movi	r5,1
  802850:	003fc906 	br	802778 <__swbuf_r+0x54>

00802854 <__swbuf>:
  802854:	01802074 	movhi	r6,129
  802858:	31aa7a04 	addi	r6,r6,-22040
  80285c:	2007883a 	mov	r3,r4
  802860:	31000017 	ldw	r4,0(r6)
  802864:	280d883a 	mov	r6,r5
  802868:	180b883a 	mov	r5,r3
  80286c:	08027241 	jmpi	802724 <__swbuf_r>

00802870 <_write_r>:
  802870:	defffd04 	addi	sp,sp,-12
  802874:	dc000015 	stw	r16,0(sp)
  802878:	04002074 	movhi	r16,129
  80287c:	8431b304 	addi	r16,r16,-14644
  802880:	dc400115 	stw	r17,4(sp)
  802884:	80000015 	stw	zero,0(r16)
  802888:	2023883a 	mov	r17,r4
  80288c:	2809883a 	mov	r4,r5
  802890:	300b883a 	mov	r5,r6
  802894:	380d883a 	mov	r6,r7
  802898:	dfc00215 	stw	ra,8(sp)
  80289c:	08053800 	call	805380 <write>
  8028a0:	1007883a 	mov	r3,r2
  8028a4:	00bfffc4 	movi	r2,-1
  8028a8:	18800626 	beq	r3,r2,8028c4 <_write_r+0x54>
  8028ac:	1805883a 	mov	r2,r3
  8028b0:	dfc00217 	ldw	ra,8(sp)
  8028b4:	dc400117 	ldw	r17,4(sp)
  8028b8:	dc000017 	ldw	r16,0(sp)
  8028bc:	dec00304 	addi	sp,sp,12
  8028c0:	f800283a 	ret
  8028c4:	80800017 	ldw	r2,0(r16)
  8028c8:	103ff826 	beq	r2,zero,8028ac <_write_r+0x3c>
  8028cc:	88800015 	stw	r2,0(r17)
  8028d0:	1805883a 	mov	r2,r3
  8028d4:	dfc00217 	ldw	ra,8(sp)
  8028d8:	dc400117 	ldw	r17,4(sp)
  8028dc:	dc000017 	ldw	r16,0(sp)
  8028e0:	dec00304 	addi	sp,sp,12
  8028e4:	f800283a 	ret

008028e8 <__swsetup_r>:
  8028e8:	00802074 	movhi	r2,129
  8028ec:	10aa7a04 	addi	r2,r2,-22040
  8028f0:	10c00017 	ldw	r3,0(r2)
  8028f4:	defffd04 	addi	sp,sp,-12
  8028f8:	dc400115 	stw	r17,4(sp)
  8028fc:	dc000015 	stw	r16,0(sp)
  802900:	dfc00215 	stw	ra,8(sp)
  802904:	2023883a 	mov	r17,r4
  802908:	2821883a 	mov	r16,r5
  80290c:	18000226 	beq	r3,zero,802918 <__swsetup_r+0x30>
  802910:	18800e17 	ldw	r2,56(r3)
  802914:	10001f26 	beq	r2,zero,802994 <__swsetup_r+0xac>
  802918:	8100030b 	ldhu	r4,12(r16)
  80291c:	2080020c 	andi	r2,r4,8
  802920:	10002826 	beq	r2,zero,8029c4 <__swsetup_r+0xdc>
  802924:	81400417 	ldw	r5,16(r16)
  802928:	28001d26 	beq	r5,zero,8029a0 <__swsetup_r+0xb8>
  80292c:	2080004c 	andi	r2,r4,1
  802930:	1005003a 	cmpeq	r2,r2,zero
  802934:	10000b26 	beq	r2,zero,802964 <__swsetup_r+0x7c>
  802938:	2080008c 	andi	r2,r4,2
  80293c:	10001226 	beq	r2,zero,802988 <__swsetup_r+0xa0>
  802940:	0005883a 	mov	r2,zero
  802944:	80800215 	stw	r2,8(r16)
  802948:	28000b26 	beq	r5,zero,802978 <__swsetup_r+0x90>
  80294c:	0005883a 	mov	r2,zero
  802950:	dfc00217 	ldw	ra,8(sp)
  802954:	dc400117 	ldw	r17,4(sp)
  802958:	dc000017 	ldw	r16,0(sp)
  80295c:	dec00304 	addi	sp,sp,12
  802960:	f800283a 	ret
  802964:	80800517 	ldw	r2,20(r16)
  802968:	80000215 	stw	zero,8(r16)
  80296c:	0085c83a 	sub	r2,zero,r2
  802970:	80800615 	stw	r2,24(r16)
  802974:	283ff51e 	bne	r5,zero,80294c <__swsetup_r+0x64>
  802978:	2080200c 	andi	r2,r4,128
  80297c:	103ff326 	beq	r2,zero,80294c <__swsetup_r+0x64>
  802980:	00bfffc4 	movi	r2,-1
  802984:	003ff206 	br	802950 <__swsetup_r+0x68>
  802988:	80800517 	ldw	r2,20(r16)
  80298c:	80800215 	stw	r2,8(r16)
  802990:	003fed06 	br	802948 <__swsetup_r+0x60>
  802994:	1809883a 	mov	r4,r3
  802998:	08014e80 	call	8014e8 <__sinit>
  80299c:	003fde06 	br	802918 <__swsetup_r+0x30>
  8029a0:	20c0a00c 	andi	r3,r4,640
  8029a4:	00808004 	movi	r2,512
  8029a8:	18bfe026 	beq	r3,r2,80292c <__swsetup_r+0x44>
  8029ac:	8809883a 	mov	r4,r17
  8029b0:	800b883a 	mov	r5,r16
  8029b4:	080373c0 	call	80373c <__smakebuf_r>
  8029b8:	8100030b 	ldhu	r4,12(r16)
  8029bc:	81400417 	ldw	r5,16(r16)
  8029c0:	003fda06 	br	80292c <__swsetup_r+0x44>
  8029c4:	2080040c 	andi	r2,r4,16
  8029c8:	103fed26 	beq	r2,zero,802980 <__swsetup_r+0x98>
  8029cc:	2080010c 	andi	r2,r4,4
  8029d0:	10001226 	beq	r2,zero,802a1c <__swsetup_r+0x134>
  8029d4:	81400c17 	ldw	r5,48(r16)
  8029d8:	28000526 	beq	r5,zero,8029f0 <__swsetup_r+0x108>
  8029dc:	80801004 	addi	r2,r16,64
  8029e0:	28800226 	beq	r5,r2,8029ec <__swsetup_r+0x104>
  8029e4:	8809883a 	mov	r4,r17
  8029e8:	0802f140 	call	802f14 <_free_r>
  8029ec:	80000c15 	stw	zero,48(r16)
  8029f0:	8080030b 	ldhu	r2,12(r16)
  8029f4:	81400417 	ldw	r5,16(r16)
  8029f8:	80000115 	stw	zero,4(r16)
  8029fc:	10bff6cc 	andi	r2,r2,65499
  802a00:	8080030d 	sth	r2,12(r16)
  802a04:	81400015 	stw	r5,0(r16)
  802a08:	8080030b 	ldhu	r2,12(r16)
  802a0c:	10800214 	ori	r2,r2,8
  802a10:	113fffcc 	andi	r4,r2,65535
  802a14:	8080030d 	sth	r2,12(r16)
  802a18:	003fc306 	br	802928 <__swsetup_r+0x40>
  802a1c:	81400417 	ldw	r5,16(r16)
  802a20:	003ff906 	br	802a08 <__swsetup_r+0x120>

00802a24 <_close_r>:
  802a24:	defffd04 	addi	sp,sp,-12
  802a28:	dc000015 	stw	r16,0(sp)
  802a2c:	04002074 	movhi	r16,129
  802a30:	8431b304 	addi	r16,r16,-14644
  802a34:	dc400115 	stw	r17,4(sp)
  802a38:	80000015 	stw	zero,0(r16)
  802a3c:	2023883a 	mov	r17,r4
  802a40:	2809883a 	mov	r4,r5
  802a44:	dfc00215 	stw	ra,8(sp)
  802a48:	08045b80 	call	8045b8 <close>
  802a4c:	1007883a 	mov	r3,r2
  802a50:	00bfffc4 	movi	r2,-1
  802a54:	18800626 	beq	r3,r2,802a70 <_close_r+0x4c>
  802a58:	1805883a 	mov	r2,r3
  802a5c:	dfc00217 	ldw	ra,8(sp)
  802a60:	dc400117 	ldw	r17,4(sp)
  802a64:	dc000017 	ldw	r16,0(sp)
  802a68:	dec00304 	addi	sp,sp,12
  802a6c:	f800283a 	ret
  802a70:	80800017 	ldw	r2,0(r16)
  802a74:	103ff826 	beq	r2,zero,802a58 <_close_r+0x34>
  802a78:	88800015 	stw	r2,0(r17)
  802a7c:	1805883a 	mov	r2,r3
  802a80:	dfc00217 	ldw	ra,8(sp)
  802a84:	dc400117 	ldw	r17,4(sp)
  802a88:	dc000017 	ldw	r16,0(sp)
  802a8c:	dec00304 	addi	sp,sp,12
  802a90:	f800283a 	ret

00802a94 <_fclose_r>:
  802a94:	defffc04 	addi	sp,sp,-16
  802a98:	dc400115 	stw	r17,4(sp)
  802a9c:	dc000015 	stw	r16,0(sp)
  802aa0:	dfc00315 	stw	ra,12(sp)
  802aa4:	dc800215 	stw	r18,8(sp)
  802aa8:	2821883a 	mov	r16,r5
  802aac:	2023883a 	mov	r17,r4
  802ab0:	28002926 	beq	r5,zero,802b58 <_fclose_r+0xc4>
  802ab4:	08014d80 	call	8014d8 <__sfp_lock_acquire>
  802ab8:	88000226 	beq	r17,zero,802ac4 <_fclose_r+0x30>
  802abc:	88800e17 	ldw	r2,56(r17)
  802ac0:	10002d26 	beq	r2,zero,802b78 <_fclose_r+0xe4>
  802ac4:	8080030f 	ldh	r2,12(r16)
  802ac8:	10002226 	beq	r2,zero,802b54 <_fclose_r+0xc0>
  802acc:	8809883a 	mov	r4,r17
  802ad0:	800b883a 	mov	r5,r16
  802ad4:	0802bb80 	call	802bb8 <_fflush_r>
  802ad8:	1025883a 	mov	r18,r2
  802adc:	80800b17 	ldw	r2,44(r16)
  802ae0:	10000426 	beq	r2,zero,802af4 <_fclose_r+0x60>
  802ae4:	81400717 	ldw	r5,28(r16)
  802ae8:	8809883a 	mov	r4,r17
  802aec:	103ee83a 	callr	r2
  802af0:	10002a16 	blt	r2,zero,802b9c <_fclose_r+0x108>
  802af4:	8080030b 	ldhu	r2,12(r16)
  802af8:	1080200c 	andi	r2,r2,128
  802afc:	1000231e 	bne	r2,zero,802b8c <_fclose_r+0xf8>
  802b00:	81400c17 	ldw	r5,48(r16)
  802b04:	28000526 	beq	r5,zero,802b1c <_fclose_r+0x88>
  802b08:	80801004 	addi	r2,r16,64
  802b0c:	28800226 	beq	r5,r2,802b18 <_fclose_r+0x84>
  802b10:	8809883a 	mov	r4,r17
  802b14:	0802f140 	call	802f14 <_free_r>
  802b18:	80000c15 	stw	zero,48(r16)
  802b1c:	81401117 	ldw	r5,68(r16)
  802b20:	28000326 	beq	r5,zero,802b30 <_fclose_r+0x9c>
  802b24:	8809883a 	mov	r4,r17
  802b28:	0802f140 	call	802f14 <_free_r>
  802b2c:	80001115 	stw	zero,68(r16)
  802b30:	8000030d 	sth	zero,12(r16)
  802b34:	08014dc0 	call	8014dc <__sfp_lock_release>
  802b38:	9005883a 	mov	r2,r18
  802b3c:	dfc00317 	ldw	ra,12(sp)
  802b40:	dc800217 	ldw	r18,8(sp)
  802b44:	dc400117 	ldw	r17,4(sp)
  802b48:	dc000017 	ldw	r16,0(sp)
  802b4c:	dec00404 	addi	sp,sp,16
  802b50:	f800283a 	ret
  802b54:	08014dc0 	call	8014dc <__sfp_lock_release>
  802b58:	0025883a 	mov	r18,zero
  802b5c:	9005883a 	mov	r2,r18
  802b60:	dfc00317 	ldw	ra,12(sp)
  802b64:	dc800217 	ldw	r18,8(sp)
  802b68:	dc400117 	ldw	r17,4(sp)
  802b6c:	dc000017 	ldw	r16,0(sp)
  802b70:	dec00404 	addi	sp,sp,16
  802b74:	f800283a 	ret
  802b78:	8809883a 	mov	r4,r17
  802b7c:	08014e80 	call	8014e8 <__sinit>
  802b80:	8080030f 	ldh	r2,12(r16)
  802b84:	103fd11e 	bne	r2,zero,802acc <_fclose_r+0x38>
  802b88:	003ff206 	br	802b54 <_fclose_r+0xc0>
  802b8c:	81400417 	ldw	r5,16(r16)
  802b90:	8809883a 	mov	r4,r17
  802b94:	0802f140 	call	802f14 <_free_r>
  802b98:	003fd906 	br	802b00 <_fclose_r+0x6c>
  802b9c:	04bfffc4 	movi	r18,-1
  802ba0:	003fd406 	br	802af4 <_fclose_r+0x60>

00802ba4 <fclose>:
  802ba4:	00802074 	movhi	r2,129
  802ba8:	10aa7a04 	addi	r2,r2,-22040
  802bac:	200b883a 	mov	r5,r4
  802bb0:	11000017 	ldw	r4,0(r2)
  802bb4:	0802a941 	jmpi	802a94 <_fclose_r>

00802bb8 <_fflush_r>:
  802bb8:	defffb04 	addi	sp,sp,-20
  802bbc:	dcc00315 	stw	r19,12(sp)
  802bc0:	dc800215 	stw	r18,8(sp)
  802bc4:	dfc00415 	stw	ra,16(sp)
  802bc8:	dc400115 	stw	r17,4(sp)
  802bcc:	dc000015 	stw	r16,0(sp)
  802bd0:	2027883a 	mov	r19,r4
  802bd4:	2825883a 	mov	r18,r5
  802bd8:	20000226 	beq	r4,zero,802be4 <_fflush_r+0x2c>
  802bdc:	20800e17 	ldw	r2,56(r4)
  802be0:	10005626 	beq	r2,zero,802d3c <_fflush_r+0x184>
  802be4:	9100030b 	ldhu	r4,12(r18)
  802be8:	20ffffcc 	andi	r3,r4,65535
  802bec:	18e0001c 	xori	r3,r3,32768
  802bf0:	18e00004 	addi	r3,r3,-32768
  802bf4:	1880020c 	andi	r2,r3,8
  802bf8:	1000261e 	bne	r2,zero,802c94 <_fflush_r+0xdc>
  802bfc:	90c00117 	ldw	r3,4(r18)
  802c00:	20820014 	ori	r2,r4,2048
  802c04:	9080030d 	sth	r2,12(r18)
  802c08:	1009883a 	mov	r4,r2
  802c0c:	00c0400e 	bge	zero,r3,802d10 <_fflush_r+0x158>
  802c10:	92000a17 	ldw	r8,40(r18)
  802c14:	40004026 	beq	r8,zero,802d18 <_fflush_r+0x160>
  802c18:	2084000c 	andi	r2,r4,4096
  802c1c:	10005326 	beq	r2,zero,802d6c <_fflush_r+0x1b4>
  802c20:	94001417 	ldw	r16,80(r18)
  802c24:	9080030b 	ldhu	r2,12(r18)
  802c28:	1080010c 	andi	r2,r2,4
  802c2c:	1000481e 	bne	r2,zero,802d50 <_fflush_r+0x198>
  802c30:	91400717 	ldw	r5,28(r18)
  802c34:	9809883a 	mov	r4,r19
  802c38:	800d883a 	mov	r6,r16
  802c3c:	000f883a 	mov	r7,zero
  802c40:	403ee83a 	callr	r8
  802c44:	8080261e 	bne	r16,r2,802ce0 <_fflush_r+0x128>
  802c48:	9080030b 	ldhu	r2,12(r18)
  802c4c:	91000417 	ldw	r4,16(r18)
  802c50:	90000115 	stw	zero,4(r18)
  802c54:	10bdffcc 	andi	r2,r2,63487
  802c58:	10ffffcc 	andi	r3,r2,65535
  802c5c:	18c4000c 	andi	r3,r3,4096
  802c60:	9080030d 	sth	r2,12(r18)
  802c64:	91000015 	stw	r4,0(r18)
  802c68:	18002b26 	beq	r3,zero,802d18 <_fflush_r+0x160>
  802c6c:	0007883a 	mov	r3,zero
  802c70:	1805883a 	mov	r2,r3
  802c74:	94001415 	stw	r16,80(r18)
  802c78:	dfc00417 	ldw	ra,16(sp)
  802c7c:	dcc00317 	ldw	r19,12(sp)
  802c80:	dc800217 	ldw	r18,8(sp)
  802c84:	dc400117 	ldw	r17,4(sp)
  802c88:	dc000017 	ldw	r16,0(sp)
  802c8c:	dec00504 	addi	sp,sp,20
  802c90:	f800283a 	ret
  802c94:	94400417 	ldw	r17,16(r18)
  802c98:	88001f26 	beq	r17,zero,802d18 <_fflush_r+0x160>
  802c9c:	90800017 	ldw	r2,0(r18)
  802ca0:	18c000cc 	andi	r3,r3,3
  802ca4:	94400015 	stw	r17,0(r18)
  802ca8:	1461c83a 	sub	r16,r2,r17
  802cac:	18002526 	beq	r3,zero,802d44 <_fflush_r+0x18c>
  802cb0:	0005883a 	mov	r2,zero
  802cb4:	90800215 	stw	r2,8(r18)
  802cb8:	0400170e 	bge	zero,r16,802d18 <_fflush_r+0x160>
  802cbc:	90c00917 	ldw	r3,36(r18)
  802cc0:	91400717 	ldw	r5,28(r18)
  802cc4:	880d883a 	mov	r6,r17
  802cc8:	800f883a 	mov	r7,r16
  802ccc:	9809883a 	mov	r4,r19
  802cd0:	183ee83a 	callr	r3
  802cd4:	88a3883a 	add	r17,r17,r2
  802cd8:	80a1c83a 	sub	r16,r16,r2
  802cdc:	00bff616 	blt	zero,r2,802cb8 <_fflush_r+0x100>
  802ce0:	9080030b 	ldhu	r2,12(r18)
  802ce4:	00ffffc4 	movi	r3,-1
  802ce8:	10801014 	ori	r2,r2,64
  802cec:	9080030d 	sth	r2,12(r18)
  802cf0:	1805883a 	mov	r2,r3
  802cf4:	dfc00417 	ldw	ra,16(sp)
  802cf8:	dcc00317 	ldw	r19,12(sp)
  802cfc:	dc800217 	ldw	r18,8(sp)
  802d00:	dc400117 	ldw	r17,4(sp)
  802d04:	dc000017 	ldw	r16,0(sp)
  802d08:	dec00504 	addi	sp,sp,20
  802d0c:	f800283a 	ret
  802d10:	90800f17 	ldw	r2,60(r18)
  802d14:	00bfbe16 	blt	zero,r2,802c10 <_fflush_r+0x58>
  802d18:	0007883a 	mov	r3,zero
  802d1c:	1805883a 	mov	r2,r3
  802d20:	dfc00417 	ldw	ra,16(sp)
  802d24:	dcc00317 	ldw	r19,12(sp)
  802d28:	dc800217 	ldw	r18,8(sp)
  802d2c:	dc400117 	ldw	r17,4(sp)
  802d30:	dc000017 	ldw	r16,0(sp)
  802d34:	dec00504 	addi	sp,sp,20
  802d38:	f800283a 	ret
  802d3c:	08014e80 	call	8014e8 <__sinit>
  802d40:	003fa806 	br	802be4 <_fflush_r+0x2c>
  802d44:	90800517 	ldw	r2,20(r18)
  802d48:	90800215 	stw	r2,8(r18)
  802d4c:	003fda06 	br	802cb8 <_fflush_r+0x100>
  802d50:	90800117 	ldw	r2,4(r18)
  802d54:	90c00c17 	ldw	r3,48(r18)
  802d58:	80a1c83a 	sub	r16,r16,r2
  802d5c:	183fb426 	beq	r3,zero,802c30 <_fflush_r+0x78>
  802d60:	90800f17 	ldw	r2,60(r18)
  802d64:	80a1c83a 	sub	r16,r16,r2
  802d68:	003fb106 	br	802c30 <_fflush_r+0x78>
  802d6c:	91400717 	ldw	r5,28(r18)
  802d70:	9809883a 	mov	r4,r19
  802d74:	000d883a 	mov	r6,zero
  802d78:	01c00044 	movi	r7,1
  802d7c:	403ee83a 	callr	r8
  802d80:	1021883a 	mov	r16,r2
  802d84:	00bfffc4 	movi	r2,-1
  802d88:	80800226 	beq	r16,r2,802d94 <_fflush_r+0x1dc>
  802d8c:	92000a17 	ldw	r8,40(r18)
  802d90:	003fa406 	br	802c24 <_fflush_r+0x6c>
  802d94:	98c00017 	ldw	r3,0(r19)
  802d98:	00800744 	movi	r2,29
  802d9c:	18bfde26 	beq	r3,r2,802d18 <_fflush_r+0x160>
  802da0:	9080030b 	ldhu	r2,12(r18)
  802da4:	8007883a 	mov	r3,r16
  802da8:	10801014 	ori	r2,r2,64
  802dac:	9080030d 	sth	r2,12(r18)
  802db0:	003fcf06 	br	802cf0 <_fflush_r+0x138>

00802db4 <fflush>:
  802db4:	01402034 	movhi	r5,128
  802db8:	294aee04 	addi	r5,r5,11192
  802dbc:	2007883a 	mov	r3,r4
  802dc0:	20000526 	beq	r4,zero,802dd8 <fflush+0x24>
  802dc4:	00802074 	movhi	r2,129
  802dc8:	10aa7a04 	addi	r2,r2,-22040
  802dcc:	11000017 	ldw	r4,0(r2)
  802dd0:	180b883a 	mov	r5,r3
  802dd4:	0802bb81 	jmpi	802bb8 <_fflush_r>
  802dd8:	00802074 	movhi	r2,129
  802ddc:	10aa7b04 	addi	r2,r2,-22036
  802de0:	11000017 	ldw	r4,0(r2)
  802de4:	080189c1 	jmpi	80189c <_fwalk_reent>

00802de8 <_malloc_trim_r>:
  802de8:	defffb04 	addi	sp,sp,-20
  802dec:	dcc00315 	stw	r19,12(sp)
  802df0:	04c02074 	movhi	r19,129
  802df4:	9ce47d04 	addi	r19,r19,-28172
  802df8:	dc800215 	stw	r18,8(sp)
  802dfc:	dc400115 	stw	r17,4(sp)
  802e00:	dc000015 	stw	r16,0(sp)
  802e04:	2823883a 	mov	r17,r5
  802e08:	2025883a 	mov	r18,r4
  802e0c:	dfc00415 	stw	ra,16(sp)
  802e10:	0804c3c0 	call	804c3c <__malloc_lock>
  802e14:	98800217 	ldw	r2,8(r19)
  802e18:	9009883a 	mov	r4,r18
  802e1c:	000b883a 	mov	r5,zero
  802e20:	10c00117 	ldw	r3,4(r2)
  802e24:	00bfff04 	movi	r2,-4
  802e28:	18a0703a 	and	r16,r3,r2
  802e2c:	8463c83a 	sub	r17,r16,r17
  802e30:	8c43fbc4 	addi	r17,r17,4079
  802e34:	8822d33a 	srli	r17,r17,12
  802e38:	0083ffc4 	movi	r2,4095
  802e3c:	8c7fffc4 	addi	r17,r17,-1
  802e40:	8822933a 	slli	r17,r17,12
  802e44:	1440060e 	bge	r2,r17,802e60 <_malloc_trim_r+0x78>
  802e48:	08024f40 	call	8024f4 <_sbrk_r>
  802e4c:	98c00217 	ldw	r3,8(r19)
  802e50:	9009883a 	mov	r4,r18
  802e54:	044bc83a 	sub	r5,zero,r17
  802e58:	80c7883a 	add	r3,r16,r3
  802e5c:	10c00926 	beq	r2,r3,802e84 <_malloc_trim_r+0x9c>
  802e60:	0804c5c0 	call	804c5c <__malloc_unlock>
  802e64:	0005883a 	mov	r2,zero
  802e68:	dfc00417 	ldw	ra,16(sp)
  802e6c:	dcc00317 	ldw	r19,12(sp)
  802e70:	dc800217 	ldw	r18,8(sp)
  802e74:	dc400117 	ldw	r17,4(sp)
  802e78:	dc000017 	ldw	r16,0(sp)
  802e7c:	dec00504 	addi	sp,sp,20
  802e80:	f800283a 	ret
  802e84:	9009883a 	mov	r4,r18
  802e88:	08024f40 	call	8024f4 <_sbrk_r>
  802e8c:	844dc83a 	sub	r6,r16,r17
  802e90:	00ffffc4 	movi	r3,-1
  802e94:	9009883a 	mov	r4,r18
  802e98:	000b883a 	mov	r5,zero
  802e9c:	01c02074 	movhi	r7,129
  802ea0:	39f1ea04 	addi	r7,r7,-14424
  802ea4:	31800054 	ori	r6,r6,1
  802ea8:	10c00926 	beq	r2,r3,802ed0 <_malloc_trim_r+0xe8>
  802eac:	38800017 	ldw	r2,0(r7)
  802eb0:	98c00217 	ldw	r3,8(r19)
  802eb4:	9009883a 	mov	r4,r18
  802eb8:	1445c83a 	sub	r2,r2,r17
  802ebc:	38800015 	stw	r2,0(r7)
  802ec0:	19800115 	stw	r6,4(r3)
  802ec4:	0804c5c0 	call	804c5c <__malloc_unlock>
  802ec8:	00800044 	movi	r2,1
  802ecc:	003fe606 	br	802e68 <_malloc_trim_r+0x80>
  802ed0:	08024f40 	call	8024f4 <_sbrk_r>
  802ed4:	99800217 	ldw	r6,8(r19)
  802ed8:	100f883a 	mov	r7,r2
  802edc:	9009883a 	mov	r4,r18
  802ee0:	1187c83a 	sub	r3,r2,r6
  802ee4:	008003c4 	movi	r2,15
  802ee8:	19400054 	ori	r5,r3,1
  802eec:	10ffdc0e 	bge	r2,r3,802e60 <_malloc_trim_r+0x78>
  802ef0:	00802074 	movhi	r2,129
  802ef4:	10aa7d04 	addi	r2,r2,-22028
  802ef8:	10c00017 	ldw	r3,0(r2)
  802efc:	00802074 	movhi	r2,129
  802f00:	10b1ea04 	addi	r2,r2,-14424
  802f04:	31400115 	stw	r5,4(r6)
  802f08:	38c7c83a 	sub	r3,r7,r3
  802f0c:	10c00015 	stw	r3,0(r2)
  802f10:	003fd306 	br	802e60 <_malloc_trim_r+0x78>

00802f14 <_free_r>:
  802f14:	defffd04 	addi	sp,sp,-12
  802f18:	dc400115 	stw	r17,4(sp)
  802f1c:	dc000015 	stw	r16,0(sp)
  802f20:	dfc00215 	stw	ra,8(sp)
  802f24:	2821883a 	mov	r16,r5
  802f28:	2023883a 	mov	r17,r4
  802f2c:	28005a26 	beq	r5,zero,803098 <_free_r+0x184>
  802f30:	0804c3c0 	call	804c3c <__malloc_lock>
  802f34:	823ffe04 	addi	r8,r16,-8
  802f38:	41400117 	ldw	r5,4(r8)
  802f3c:	00bfff84 	movi	r2,-2
  802f40:	02802074 	movhi	r10,129
  802f44:	52a47d04 	addi	r10,r10,-28172
  802f48:	288e703a 	and	r7,r5,r2
  802f4c:	41cd883a 	add	r6,r8,r7
  802f50:	30c00117 	ldw	r3,4(r6)
  802f54:	51000217 	ldw	r4,8(r10)
  802f58:	00bfff04 	movi	r2,-4
  802f5c:	1892703a 	and	r9,r3,r2
  802f60:	5017883a 	mov	r11,r10
  802f64:	31006726 	beq	r6,r4,803104 <_free_r+0x1f0>
  802f68:	2880004c 	andi	r2,r5,1
  802f6c:	1005003a 	cmpeq	r2,r2,zero
  802f70:	32400115 	stw	r9,4(r6)
  802f74:	10001a1e 	bne	r2,zero,802fe0 <_free_r+0xcc>
  802f78:	000b883a 	mov	r5,zero
  802f7c:	3247883a 	add	r3,r6,r9
  802f80:	18800117 	ldw	r2,4(r3)
  802f84:	1080004c 	andi	r2,r2,1
  802f88:	1000231e 	bne	r2,zero,803018 <_free_r+0x104>
  802f8c:	280ac03a 	cmpne	r5,r5,zero
  802f90:	3a4f883a 	add	r7,r7,r9
  802f94:	2800451e 	bne	r5,zero,8030ac <_free_r+0x198>
  802f98:	31000217 	ldw	r4,8(r6)
  802f9c:	00802074 	movhi	r2,129
  802fa0:	10a47f04 	addi	r2,r2,-28164
  802fa4:	20807b26 	beq	r4,r2,803194 <_free_r+0x280>
  802fa8:	30800317 	ldw	r2,12(r6)
  802fac:	3a07883a 	add	r3,r7,r8
  802fb0:	19c00015 	stw	r7,0(r3)
  802fb4:	11000215 	stw	r4,8(r2)
  802fb8:	20800315 	stw	r2,12(r4)
  802fbc:	38800054 	ori	r2,r7,1
  802fc0:	40800115 	stw	r2,4(r8)
  802fc4:	28001a26 	beq	r5,zero,803030 <_free_r+0x11c>
  802fc8:	8809883a 	mov	r4,r17
  802fcc:	dfc00217 	ldw	ra,8(sp)
  802fd0:	dc400117 	ldw	r17,4(sp)
  802fd4:	dc000017 	ldw	r16,0(sp)
  802fd8:	dec00304 	addi	sp,sp,12
  802fdc:	0804c5c1 	jmpi	804c5c <__malloc_unlock>
  802fe0:	80bffe17 	ldw	r2,-8(r16)
  802fe4:	50c00204 	addi	r3,r10,8
  802fe8:	4091c83a 	sub	r8,r8,r2
  802fec:	41000217 	ldw	r4,8(r8)
  802ff0:	388f883a 	add	r7,r7,r2
  802ff4:	20c06126 	beq	r4,r3,80317c <_free_r+0x268>
  802ff8:	40800317 	ldw	r2,12(r8)
  802ffc:	3247883a 	add	r3,r6,r9
  803000:	000b883a 	mov	r5,zero
  803004:	11000215 	stw	r4,8(r2)
  803008:	20800315 	stw	r2,12(r4)
  80300c:	18800117 	ldw	r2,4(r3)
  803010:	1080004c 	andi	r2,r2,1
  803014:	103fdd26 	beq	r2,zero,802f8c <_free_r+0x78>
  803018:	38800054 	ori	r2,r7,1
  80301c:	3a07883a 	add	r3,r7,r8
  803020:	280ac03a 	cmpne	r5,r5,zero
  803024:	40800115 	stw	r2,4(r8)
  803028:	19c00015 	stw	r7,0(r3)
  80302c:	283fe61e 	bne	r5,zero,802fc8 <_free_r+0xb4>
  803030:	00807fc4 	movi	r2,511
  803034:	11c01f2e 	bgeu	r2,r7,8030b4 <_free_r+0x1a0>
  803038:	3806d27a 	srli	r3,r7,9
  80303c:	1800481e 	bne	r3,zero,803160 <_free_r+0x24c>
  803040:	3804d0fa 	srli	r2,r7,3
  803044:	100690fa 	slli	r3,r2,3
  803048:	1acd883a 	add	r6,r3,r11
  80304c:	31400217 	ldw	r5,8(r6)
  803050:	31405926 	beq	r6,r5,8031b8 <_free_r+0x2a4>
  803054:	28800117 	ldw	r2,4(r5)
  803058:	00ffff04 	movi	r3,-4
  80305c:	10c4703a 	and	r2,r2,r3
  803060:	3880022e 	bgeu	r7,r2,80306c <_free_r+0x158>
  803064:	29400217 	ldw	r5,8(r5)
  803068:	317ffa1e 	bne	r6,r5,803054 <_free_r+0x140>
  80306c:	29800317 	ldw	r6,12(r5)
  803070:	41800315 	stw	r6,12(r8)
  803074:	41400215 	stw	r5,8(r8)
  803078:	8809883a 	mov	r4,r17
  80307c:	2a000315 	stw	r8,12(r5)
  803080:	32000215 	stw	r8,8(r6)
  803084:	dfc00217 	ldw	ra,8(sp)
  803088:	dc400117 	ldw	r17,4(sp)
  80308c:	dc000017 	ldw	r16,0(sp)
  803090:	dec00304 	addi	sp,sp,12
  803094:	0804c5c1 	jmpi	804c5c <__malloc_unlock>
  803098:	dfc00217 	ldw	ra,8(sp)
  80309c:	dc400117 	ldw	r17,4(sp)
  8030a0:	dc000017 	ldw	r16,0(sp)
  8030a4:	dec00304 	addi	sp,sp,12
  8030a8:	f800283a 	ret
  8030ac:	31000217 	ldw	r4,8(r6)
  8030b0:	003fbd06 	br	802fa8 <_free_r+0x94>
  8030b4:	3806d0fa 	srli	r3,r7,3
  8030b8:	00800044 	movi	r2,1
  8030bc:	51400117 	ldw	r5,4(r10)
  8030c0:	180890fa 	slli	r4,r3,3
  8030c4:	1807d0ba 	srai	r3,r3,2
  8030c8:	22c9883a 	add	r4,r4,r11
  8030cc:	21800217 	ldw	r6,8(r4)
  8030d0:	10c4983a 	sll	r2,r2,r3
  8030d4:	41000315 	stw	r4,12(r8)
  8030d8:	41800215 	stw	r6,8(r8)
  8030dc:	288ab03a 	or	r5,r5,r2
  8030e0:	22000215 	stw	r8,8(r4)
  8030e4:	8809883a 	mov	r4,r17
  8030e8:	51400115 	stw	r5,4(r10)
  8030ec:	32000315 	stw	r8,12(r6)
  8030f0:	dfc00217 	ldw	ra,8(sp)
  8030f4:	dc400117 	ldw	r17,4(sp)
  8030f8:	dc000017 	ldw	r16,0(sp)
  8030fc:	dec00304 	addi	sp,sp,12
  803100:	0804c5c1 	jmpi	804c5c <__malloc_unlock>
  803104:	2880004c 	andi	r2,r5,1
  803108:	3a4d883a 	add	r6,r7,r9
  80310c:	1000071e 	bne	r2,zero,80312c <_free_r+0x218>
  803110:	80bffe17 	ldw	r2,-8(r16)
  803114:	4091c83a 	sub	r8,r8,r2
  803118:	41000317 	ldw	r4,12(r8)
  80311c:	40c00217 	ldw	r3,8(r8)
  803120:	308d883a 	add	r6,r6,r2
  803124:	20c00215 	stw	r3,8(r4)
  803128:	19000315 	stw	r4,12(r3)
  80312c:	00802074 	movhi	r2,129
  803130:	10aa7c04 	addi	r2,r2,-22032
  803134:	11000017 	ldw	r4,0(r2)
  803138:	30c00054 	ori	r3,r6,1
  80313c:	52000215 	stw	r8,8(r10)
  803140:	40c00115 	stw	r3,4(r8)
  803144:	313fa036 	bltu	r6,r4,802fc8 <_free_r+0xb4>
  803148:	00802074 	movhi	r2,129
  80314c:	10b1b004 	addi	r2,r2,-14656
  803150:	11400017 	ldw	r5,0(r2)
  803154:	8809883a 	mov	r4,r17
  803158:	0802de80 	call	802de8 <_malloc_trim_r>
  80315c:	003f9a06 	br	802fc8 <_free_r+0xb4>
  803160:	00800104 	movi	r2,4
  803164:	10c0072e 	bgeu	r2,r3,803184 <_free_r+0x270>
  803168:	00800504 	movi	r2,20
  80316c:	10c01936 	bltu	r2,r3,8031d4 <_free_r+0x2c0>
  803170:	188016c4 	addi	r2,r3,91
  803174:	100690fa 	slli	r3,r2,3
  803178:	003fb306 	br	803048 <_free_r+0x134>
  80317c:	01400044 	movi	r5,1
  803180:	003f7e06 	br	802f7c <_free_r+0x68>
  803184:	3804d1ba 	srli	r2,r7,6
  803188:	10800e04 	addi	r2,r2,56
  80318c:	100690fa 	slli	r3,r2,3
  803190:	003fad06 	br	803048 <_free_r+0x134>
  803194:	22000315 	stw	r8,12(r4)
  803198:	22000215 	stw	r8,8(r4)
  80319c:	3a05883a 	add	r2,r7,r8
  8031a0:	38c00054 	ori	r3,r7,1
  8031a4:	11c00015 	stw	r7,0(r2)
  8031a8:	41000215 	stw	r4,8(r8)
  8031ac:	40c00115 	stw	r3,4(r8)
  8031b0:	41000315 	stw	r4,12(r8)
  8031b4:	003f8406 	br	802fc8 <_free_r+0xb4>
  8031b8:	1005d0ba 	srai	r2,r2,2
  8031bc:	00c00044 	movi	r3,1
  8031c0:	51000117 	ldw	r4,4(r10)
  8031c4:	1886983a 	sll	r3,r3,r2
  8031c8:	20c8b03a 	or	r4,r4,r3
  8031cc:	51000115 	stw	r4,4(r10)
  8031d0:	003fa706 	br	803070 <_free_r+0x15c>
  8031d4:	00801504 	movi	r2,84
  8031d8:	10c00436 	bltu	r2,r3,8031ec <_free_r+0x2d8>
  8031dc:	3804d33a 	srli	r2,r7,12
  8031e0:	10801b84 	addi	r2,r2,110
  8031e4:	100690fa 	slli	r3,r2,3
  8031e8:	003f9706 	br	803048 <_free_r+0x134>
  8031ec:	00805504 	movi	r2,340
  8031f0:	10c00436 	bltu	r2,r3,803204 <_free_r+0x2f0>
  8031f4:	3804d3fa 	srli	r2,r7,15
  8031f8:	10801dc4 	addi	r2,r2,119
  8031fc:	100690fa 	slli	r3,r2,3
  803200:	003f9106 	br	803048 <_free_r+0x134>
  803204:	00815504 	movi	r2,1364
  803208:	10c0032e 	bgeu	r2,r3,803218 <_free_r+0x304>
  80320c:	00801f84 	movi	r2,126
  803210:	00c0fc04 	movi	r3,1008
  803214:	003f8c06 	br	803048 <_free_r+0x134>
  803218:	3804d4ba 	srli	r2,r7,18
  80321c:	10801f04 	addi	r2,r2,124
  803220:	100690fa 	slli	r3,r2,3
  803224:	003f8806 	br	803048 <_free_r+0x134>

00803228 <__sfvwrite_r>:
  803228:	30800217 	ldw	r2,8(r6)
  80322c:	defff504 	addi	sp,sp,-44
  803230:	df000915 	stw	fp,36(sp)
  803234:	dd800715 	stw	r22,28(sp)
  803238:	dc800315 	stw	r18,12(sp)
  80323c:	dfc00a15 	stw	ra,40(sp)
  803240:	ddc00815 	stw	r23,32(sp)
  803244:	dd400615 	stw	r21,24(sp)
  803248:	dd000515 	stw	r20,20(sp)
  80324c:	dcc00415 	stw	r19,16(sp)
  803250:	dc400215 	stw	r17,8(sp)
  803254:	dc000115 	stw	r16,4(sp)
  803258:	302d883a 	mov	r22,r6
  80325c:	2039883a 	mov	fp,r4
  803260:	2825883a 	mov	r18,r5
  803264:	10001c26 	beq	r2,zero,8032d8 <__sfvwrite_r+0xb0>
  803268:	29c0030b 	ldhu	r7,12(r5)
  80326c:	3880020c 	andi	r2,r7,8
  803270:	10002726 	beq	r2,zero,803310 <__sfvwrite_r+0xe8>
  803274:	28800417 	ldw	r2,16(r5)
  803278:	10002526 	beq	r2,zero,803310 <__sfvwrite_r+0xe8>
  80327c:	3880008c 	andi	r2,r7,2
  803280:	b5400017 	ldw	r21,0(r22)
  803284:	10002826 	beq	r2,zero,803328 <__sfvwrite_r+0x100>
  803288:	0021883a 	mov	r16,zero
  80328c:	0023883a 	mov	r17,zero
  803290:	880d883a 	mov	r6,r17
  803294:	e009883a 	mov	r4,fp
  803298:	00810004 	movi	r2,1024
  80329c:	80006e26 	beq	r16,zero,803458 <__sfvwrite_r+0x230>
  8032a0:	800f883a 	mov	r7,r16
  8032a4:	91400717 	ldw	r5,28(r18)
  8032a8:	1400012e 	bgeu	r2,r16,8032b0 <__sfvwrite_r+0x88>
  8032ac:	100f883a 	mov	r7,r2
  8032b0:	90c00917 	ldw	r3,36(r18)
  8032b4:	183ee83a 	callr	r3
  8032b8:	1007883a 	mov	r3,r2
  8032bc:	80a1c83a 	sub	r16,r16,r2
  8032c0:	88a3883a 	add	r17,r17,r2
  8032c4:	00806d0e 	bge	zero,r2,80347c <__sfvwrite_r+0x254>
  8032c8:	b0800217 	ldw	r2,8(r22)
  8032cc:	10c5c83a 	sub	r2,r2,r3
  8032d0:	b0800215 	stw	r2,8(r22)
  8032d4:	103fee1e 	bne	r2,zero,803290 <__sfvwrite_r+0x68>
  8032d8:	0009883a 	mov	r4,zero
  8032dc:	2005883a 	mov	r2,r4
  8032e0:	dfc00a17 	ldw	ra,40(sp)
  8032e4:	df000917 	ldw	fp,36(sp)
  8032e8:	ddc00817 	ldw	r23,32(sp)
  8032ec:	dd800717 	ldw	r22,28(sp)
  8032f0:	dd400617 	ldw	r21,24(sp)
  8032f4:	dd000517 	ldw	r20,20(sp)
  8032f8:	dcc00417 	ldw	r19,16(sp)
  8032fc:	dc800317 	ldw	r18,12(sp)
  803300:	dc400217 	ldw	r17,8(sp)
  803304:	dc000117 	ldw	r16,4(sp)
  803308:	dec00b04 	addi	sp,sp,44
  80330c:	f800283a 	ret
  803310:	08028e80 	call	8028e8 <__swsetup_r>
  803314:	1000e41e 	bne	r2,zero,8036a8 <__sfvwrite_r+0x480>
  803318:	91c0030b 	ldhu	r7,12(r18)
  80331c:	b5400017 	ldw	r21,0(r22)
  803320:	3880008c 	andi	r2,r7,2
  803324:	103fd81e 	bne	r2,zero,803288 <__sfvwrite_r+0x60>
  803328:	3880004c 	andi	r2,r7,1
  80332c:	1005003a 	cmpeq	r2,r2,zero
  803330:	10005726 	beq	r2,zero,803490 <__sfvwrite_r+0x268>
  803334:	0029883a 	mov	r20,zero
  803338:	002f883a 	mov	r23,zero
  80333c:	a0004226 	beq	r20,zero,803448 <__sfvwrite_r+0x220>
  803340:	3880800c 	andi	r2,r7,512
  803344:	94000217 	ldw	r16,8(r18)
  803348:	10008b26 	beq	r2,zero,803578 <__sfvwrite_r+0x350>
  80334c:	800d883a 	mov	r6,r16
  803350:	a400a536 	bltu	r20,r16,8035e8 <__sfvwrite_r+0x3c0>
  803354:	3881200c 	andi	r2,r7,1152
  803358:	10002726 	beq	r2,zero,8033f8 <__sfvwrite_r+0x1d0>
  80335c:	90800517 	ldw	r2,20(r18)
  803360:	92000417 	ldw	r8,16(r18)
  803364:	91400017 	ldw	r5,0(r18)
  803368:	1087883a 	add	r3,r2,r2
  80336c:	1887883a 	add	r3,r3,r2
  803370:	1808d7fa 	srli	r4,r3,31
  803374:	2a21c83a 	sub	r16,r5,r8
  803378:	80800044 	addi	r2,r16,1
  80337c:	20c9883a 	add	r4,r4,r3
  803380:	2027d07a 	srai	r19,r4,1
  803384:	a085883a 	add	r2,r20,r2
  803388:	980d883a 	mov	r6,r19
  80338c:	9880022e 	bgeu	r19,r2,803398 <__sfvwrite_r+0x170>
  803390:	1027883a 	mov	r19,r2
  803394:	100d883a 	mov	r6,r2
  803398:	3881000c 	andi	r2,r7,1024
  80339c:	1000b826 	beq	r2,zero,803680 <__sfvwrite_r+0x458>
  8033a0:	300b883a 	mov	r5,r6
  8033a4:	e009883a 	mov	r4,fp
  8033a8:	0801a1c0 	call	801a1c <_malloc_r>
  8033ac:	10003126 	beq	r2,zero,803474 <__sfvwrite_r+0x24c>
  8033b0:	91400417 	ldw	r5,16(r18)
  8033b4:	1009883a 	mov	r4,r2
  8033b8:	800d883a 	mov	r6,r16
  8033bc:	1023883a 	mov	r17,r2
  8033c0:	08039b40 	call	8039b4 <memcpy>
  8033c4:	90c0030b 	ldhu	r3,12(r18)
  8033c8:	00beffc4 	movi	r2,-1025
  8033cc:	1886703a 	and	r3,r3,r2
  8033d0:	18c02014 	ori	r3,r3,128
  8033d4:	90c0030d 	sth	r3,12(r18)
  8033d8:	9c07c83a 	sub	r3,r19,r16
  8033dc:	8c05883a 	add	r2,r17,r16
  8033e0:	a00d883a 	mov	r6,r20
  8033e4:	a021883a 	mov	r16,r20
  8033e8:	90800015 	stw	r2,0(r18)
  8033ec:	90c00215 	stw	r3,8(r18)
  8033f0:	94400415 	stw	r17,16(r18)
  8033f4:	94c00515 	stw	r19,20(r18)
  8033f8:	91000017 	ldw	r4,0(r18)
  8033fc:	b80b883a 	mov	r5,r23
  803400:	a023883a 	mov	r17,r20
  803404:	0803a540 	call	803a54 <memmove>
  803408:	90c00217 	ldw	r3,8(r18)
  80340c:	90800017 	ldw	r2,0(r18)
  803410:	a027883a 	mov	r19,r20
  803414:	1c07c83a 	sub	r3,r3,r16
  803418:	1405883a 	add	r2,r2,r16
  80341c:	90c00215 	stw	r3,8(r18)
  803420:	a021883a 	mov	r16,r20
  803424:	90800015 	stw	r2,0(r18)
  803428:	b0800217 	ldw	r2,8(r22)
  80342c:	1405c83a 	sub	r2,r2,r16
  803430:	b0800215 	stw	r2,8(r22)
  803434:	103fa826 	beq	r2,zero,8032d8 <__sfvwrite_r+0xb0>
  803438:	a469c83a 	sub	r20,r20,r17
  80343c:	91c0030b 	ldhu	r7,12(r18)
  803440:	bcef883a 	add	r23,r23,r19
  803444:	a03fbe1e 	bne	r20,zero,803340 <__sfvwrite_r+0x118>
  803448:	adc00017 	ldw	r23,0(r21)
  80344c:	ad000117 	ldw	r20,4(r21)
  803450:	ad400204 	addi	r21,r21,8
  803454:	003fb906 	br	80333c <__sfvwrite_r+0x114>
  803458:	ac400017 	ldw	r17,0(r21)
  80345c:	ac000117 	ldw	r16,4(r21)
  803460:	ad400204 	addi	r21,r21,8
  803464:	003f8a06 	br	803290 <__sfvwrite_r+0x68>
  803468:	91400417 	ldw	r5,16(r18)
  80346c:	e009883a 	mov	r4,fp
  803470:	0802f140 	call	802f14 <_free_r>
  803474:	00800304 	movi	r2,12
  803478:	e0800015 	stw	r2,0(fp)
  80347c:	9080030b 	ldhu	r2,12(r18)
  803480:	013fffc4 	movi	r4,-1
  803484:	10801014 	ori	r2,r2,64
  803488:	9080030d 	sth	r2,12(r18)
  80348c:	003f9306 	br	8032dc <__sfvwrite_r+0xb4>
  803490:	0027883a 	mov	r19,zero
  803494:	002f883a 	mov	r23,zero
  803498:	d8000015 	stw	zero,0(sp)
  80349c:	0029883a 	mov	r20,zero
  8034a0:	98001e26 	beq	r19,zero,80351c <__sfvwrite_r+0x2f4>
  8034a4:	d8c00017 	ldw	r3,0(sp)
  8034a8:	1804c03a 	cmpne	r2,r3,zero
  8034ac:	10005e26 	beq	r2,zero,803628 <__sfvwrite_r+0x400>
  8034b0:	9821883a 	mov	r16,r19
  8034b4:	a4c0012e 	bgeu	r20,r19,8034bc <__sfvwrite_r+0x294>
  8034b8:	a021883a 	mov	r16,r20
  8034bc:	91000017 	ldw	r4,0(r18)
  8034c0:	90800417 	ldw	r2,16(r18)
  8034c4:	91800217 	ldw	r6,8(r18)
  8034c8:	91c00517 	ldw	r7,20(r18)
  8034cc:	1100022e 	bgeu	r2,r4,8034d8 <__sfvwrite_r+0x2b0>
  8034d0:	31e3883a 	add	r17,r6,r7
  8034d4:	8c001616 	blt	r17,r16,803530 <__sfvwrite_r+0x308>
  8034d8:	81c03816 	blt	r16,r7,8035bc <__sfvwrite_r+0x394>
  8034dc:	90c00917 	ldw	r3,36(r18)
  8034e0:	91400717 	ldw	r5,28(r18)
  8034e4:	e009883a 	mov	r4,fp
  8034e8:	b80d883a 	mov	r6,r23
  8034ec:	183ee83a 	callr	r3
  8034f0:	1023883a 	mov	r17,r2
  8034f4:	00bfe10e 	bge	zero,r2,80347c <__sfvwrite_r+0x254>
  8034f8:	a469c83a 	sub	r20,r20,r17
  8034fc:	a0001826 	beq	r20,zero,803560 <__sfvwrite_r+0x338>
  803500:	b0800217 	ldw	r2,8(r22)
  803504:	1445c83a 	sub	r2,r2,r17
  803508:	b0800215 	stw	r2,8(r22)
  80350c:	103f7226 	beq	r2,zero,8032d8 <__sfvwrite_r+0xb0>
  803510:	9c67c83a 	sub	r19,r19,r17
  803514:	bc6f883a 	add	r23,r23,r17
  803518:	983fe21e 	bne	r19,zero,8034a4 <__sfvwrite_r+0x27c>
  80351c:	adc00017 	ldw	r23,0(r21)
  803520:	acc00117 	ldw	r19,4(r21)
  803524:	ad400204 	addi	r21,r21,8
  803528:	d8000015 	stw	zero,0(sp)
  80352c:	003fdc06 	br	8034a0 <__sfvwrite_r+0x278>
  803530:	b80b883a 	mov	r5,r23
  803534:	880d883a 	mov	r6,r17
  803538:	0803a540 	call	803a54 <memmove>
  80353c:	90c00017 	ldw	r3,0(r18)
  803540:	e009883a 	mov	r4,fp
  803544:	900b883a 	mov	r5,r18
  803548:	1c47883a 	add	r3,r3,r17
  80354c:	90c00015 	stw	r3,0(r18)
  803550:	0802bb80 	call	802bb8 <_fflush_r>
  803554:	103fc91e 	bne	r2,zero,80347c <__sfvwrite_r+0x254>
  803558:	a469c83a 	sub	r20,r20,r17
  80355c:	a03fe81e 	bne	r20,zero,803500 <__sfvwrite_r+0x2d8>
  803560:	e009883a 	mov	r4,fp
  803564:	900b883a 	mov	r5,r18
  803568:	0802bb80 	call	802bb8 <_fflush_r>
  80356c:	103fc31e 	bne	r2,zero,80347c <__sfvwrite_r+0x254>
  803570:	d8000015 	stw	zero,0(sp)
  803574:	003fe206 	br	803500 <__sfvwrite_r+0x2d8>
  803578:	91000017 	ldw	r4,0(r18)
  80357c:	90800417 	ldw	r2,16(r18)
  803580:	1100022e 	bgeu	r2,r4,80358c <__sfvwrite_r+0x364>
  803584:	8023883a 	mov	r17,r16
  803588:	85003136 	bltu	r16,r20,803650 <__sfvwrite_r+0x428>
  80358c:	91c00517 	ldw	r7,20(r18)
  803590:	a1c01836 	bltu	r20,r7,8035f4 <__sfvwrite_r+0x3cc>
  803594:	90c00917 	ldw	r3,36(r18)
  803598:	91400717 	ldw	r5,28(r18)
  80359c:	e009883a 	mov	r4,fp
  8035a0:	b80d883a 	mov	r6,r23
  8035a4:	183ee83a 	callr	r3
  8035a8:	1021883a 	mov	r16,r2
  8035ac:	00bfb30e 	bge	zero,r2,80347c <__sfvwrite_r+0x254>
  8035b0:	1023883a 	mov	r17,r2
  8035b4:	1027883a 	mov	r19,r2
  8035b8:	003f9b06 	br	803428 <__sfvwrite_r+0x200>
  8035bc:	b80b883a 	mov	r5,r23
  8035c0:	800d883a 	mov	r6,r16
  8035c4:	0803a540 	call	803a54 <memmove>
  8035c8:	90c00217 	ldw	r3,8(r18)
  8035cc:	90800017 	ldw	r2,0(r18)
  8035d0:	8023883a 	mov	r17,r16
  8035d4:	1c07c83a 	sub	r3,r3,r16
  8035d8:	1405883a 	add	r2,r2,r16
  8035dc:	90c00215 	stw	r3,8(r18)
  8035e0:	90800015 	stw	r2,0(r18)
  8035e4:	003fc406 	br	8034f8 <__sfvwrite_r+0x2d0>
  8035e8:	a00d883a 	mov	r6,r20
  8035ec:	a021883a 	mov	r16,r20
  8035f0:	003f8106 	br	8033f8 <__sfvwrite_r+0x1d0>
  8035f4:	b80b883a 	mov	r5,r23
  8035f8:	a00d883a 	mov	r6,r20
  8035fc:	0803a540 	call	803a54 <memmove>
  803600:	90c00217 	ldw	r3,8(r18)
  803604:	90800017 	ldw	r2,0(r18)
  803608:	a021883a 	mov	r16,r20
  80360c:	1d07c83a 	sub	r3,r3,r20
  803610:	1505883a 	add	r2,r2,r20
  803614:	a023883a 	mov	r17,r20
  803618:	a027883a 	mov	r19,r20
  80361c:	90c00215 	stw	r3,8(r18)
  803620:	90800015 	stw	r2,0(r18)
  803624:	003f8006 	br	803428 <__sfvwrite_r+0x200>
  803628:	b809883a 	mov	r4,r23
  80362c:	01400284 	movi	r5,10
  803630:	980d883a 	mov	r6,r19
  803634:	08038d00 	call	8038d0 <memchr>
  803638:	10001726 	beq	r2,zero,803698 <__sfvwrite_r+0x470>
  80363c:	15c5c83a 	sub	r2,r2,r23
  803640:	15000044 	addi	r20,r2,1
  803644:	00800044 	movi	r2,1
  803648:	d8800015 	stw	r2,0(sp)
  80364c:	003f9806 	br	8034b0 <__sfvwrite_r+0x288>
  803650:	b80b883a 	mov	r5,r23
  803654:	800d883a 	mov	r6,r16
  803658:	0803a540 	call	803a54 <memmove>
  80365c:	90c00017 	ldw	r3,0(r18)
  803660:	e009883a 	mov	r4,fp
  803664:	900b883a 	mov	r5,r18
  803668:	1c07883a 	add	r3,r3,r16
  80366c:	90c00015 	stw	r3,0(r18)
  803670:	8027883a 	mov	r19,r16
  803674:	0802bb80 	call	802bb8 <_fflush_r>
  803678:	103f6b26 	beq	r2,zero,803428 <__sfvwrite_r+0x200>
  80367c:	003f7f06 	br	80347c <__sfvwrite_r+0x254>
  803680:	400b883a 	mov	r5,r8
  803684:	e009883a 	mov	r4,fp
  803688:	0803bac0 	call	803bac <_realloc_r>
  80368c:	103f7626 	beq	r2,zero,803468 <__sfvwrite_r+0x240>
  803690:	1023883a 	mov	r17,r2
  803694:	003f5006 	br	8033d8 <__sfvwrite_r+0x1b0>
  803698:	00c00044 	movi	r3,1
  80369c:	9d000044 	addi	r20,r19,1
  8036a0:	d8c00015 	stw	r3,0(sp)
  8036a4:	003f8206 	br	8034b0 <__sfvwrite_r+0x288>
  8036a8:	9080030b 	ldhu	r2,12(r18)
  8036ac:	00c00244 	movi	r3,9
  8036b0:	013fffc4 	movi	r4,-1
  8036b4:	10801014 	ori	r2,r2,64
  8036b8:	9080030d 	sth	r2,12(r18)
  8036bc:	e0c00015 	stw	r3,0(fp)
  8036c0:	003f0606 	br	8032dc <__sfvwrite_r+0xb4>

008036c4 <_lseek_r>:
  8036c4:	defffd04 	addi	sp,sp,-12
  8036c8:	dc000015 	stw	r16,0(sp)
  8036cc:	04002074 	movhi	r16,129
  8036d0:	8431b304 	addi	r16,r16,-14644
  8036d4:	dc400115 	stw	r17,4(sp)
  8036d8:	80000015 	stw	zero,0(r16)
  8036dc:	2023883a 	mov	r17,r4
  8036e0:	2809883a 	mov	r4,r5
  8036e4:	300b883a 	mov	r5,r6
  8036e8:	380d883a 	mov	r6,r7
  8036ec:	dfc00215 	stw	ra,8(sp)
  8036f0:	0804a800 	call	804a80 <lseek>
  8036f4:	1007883a 	mov	r3,r2
  8036f8:	00bfffc4 	movi	r2,-1
  8036fc:	18800626 	beq	r3,r2,803718 <_lseek_r+0x54>
  803700:	1805883a 	mov	r2,r3
  803704:	dfc00217 	ldw	ra,8(sp)
  803708:	dc400117 	ldw	r17,4(sp)
  80370c:	dc000017 	ldw	r16,0(sp)
  803710:	dec00304 	addi	sp,sp,12
  803714:	f800283a 	ret
  803718:	80800017 	ldw	r2,0(r16)
  80371c:	103ff826 	beq	r2,zero,803700 <_lseek_r+0x3c>
  803720:	88800015 	stw	r2,0(r17)
  803724:	1805883a 	mov	r2,r3
  803728:	dfc00217 	ldw	ra,8(sp)
  80372c:	dc400117 	ldw	r17,4(sp)
  803730:	dc000017 	ldw	r16,0(sp)
  803734:	dec00304 	addi	sp,sp,12
  803738:	f800283a 	ret

0080373c <__smakebuf_r>:
  80373c:	2880030b 	ldhu	r2,12(r5)
  803740:	deffed04 	addi	sp,sp,-76
  803744:	dc401015 	stw	r17,64(sp)
  803748:	1080008c 	andi	r2,r2,2
  80374c:	dc000f15 	stw	r16,60(sp)
  803750:	dfc01215 	stw	ra,72(sp)
  803754:	dc801115 	stw	r18,68(sp)
  803758:	2821883a 	mov	r16,r5
  80375c:	2023883a 	mov	r17,r4
  803760:	10000b26 	beq	r2,zero,803790 <__smakebuf_r+0x54>
  803764:	28c010c4 	addi	r3,r5,67
  803768:	00800044 	movi	r2,1
  80376c:	28800515 	stw	r2,20(r5)
  803770:	28c00415 	stw	r3,16(r5)
  803774:	28c00015 	stw	r3,0(r5)
  803778:	dfc01217 	ldw	ra,72(sp)
  80377c:	dc801117 	ldw	r18,68(sp)
  803780:	dc401017 	ldw	r17,64(sp)
  803784:	dc000f17 	ldw	r16,60(sp)
  803788:	dec01304 	addi	sp,sp,76
  80378c:	f800283a 	ret
  803790:	2940038f 	ldh	r5,14(r5)
  803794:	28002116 	blt	r5,zero,80381c <__smakebuf_r+0xe0>
  803798:	d80d883a 	mov	r6,sp
  80379c:	08043800 	call	804380 <_fstat_r>
  8037a0:	10001e16 	blt	r2,zero,80381c <__smakebuf_r+0xe0>
  8037a4:	d8800117 	ldw	r2,4(sp)
  8037a8:	00e00014 	movui	r3,32768
  8037ac:	113c000c 	andi	r4,r2,61440
  8037b0:	20c03126 	beq	r4,r3,803878 <__smakebuf_r+0x13c>
  8037b4:	8080030b 	ldhu	r2,12(r16)
  8037b8:	00c80004 	movi	r3,8192
  8037bc:	10820014 	ori	r2,r2,2048
  8037c0:	8080030d 	sth	r2,12(r16)
  8037c4:	20c01e26 	beq	r4,r3,803840 <__smakebuf_r+0x104>
  8037c8:	04810004 	movi	r18,1024
  8037cc:	8809883a 	mov	r4,r17
  8037d0:	900b883a 	mov	r5,r18
  8037d4:	0801a1c0 	call	801a1c <_malloc_r>
  8037d8:	1009883a 	mov	r4,r2
  8037dc:	10003126 	beq	r2,zero,8038a4 <__smakebuf_r+0x168>
  8037e0:	80c0030b 	ldhu	r3,12(r16)
  8037e4:	00802034 	movhi	r2,128
  8037e8:	10857304 	addi	r2,r2,5580
  8037ec:	88800f15 	stw	r2,60(r17)
  8037f0:	18c02014 	ori	r3,r3,128
  8037f4:	84800515 	stw	r18,20(r16)
  8037f8:	80c0030d 	sth	r3,12(r16)
  8037fc:	81000415 	stw	r4,16(r16)
  803800:	81000015 	stw	r4,0(r16)
  803804:	dfc01217 	ldw	ra,72(sp)
  803808:	dc801117 	ldw	r18,68(sp)
  80380c:	dc401017 	ldw	r17,64(sp)
  803810:	dc000f17 	ldw	r16,60(sp)
  803814:	dec01304 	addi	sp,sp,76
  803818:	f800283a 	ret
  80381c:	80c0030b 	ldhu	r3,12(r16)
  803820:	1880200c 	andi	r2,r3,128
  803824:	10000426 	beq	r2,zero,803838 <__smakebuf_r+0xfc>
  803828:	04801004 	movi	r18,64
  80382c:	18820014 	ori	r2,r3,2048
  803830:	8080030d 	sth	r2,12(r16)
  803834:	003fe506 	br	8037cc <__smakebuf_r+0x90>
  803838:	04810004 	movi	r18,1024
  80383c:	003ffb06 	br	80382c <__smakebuf_r+0xf0>
  803840:	8140038f 	ldh	r5,14(r16)
  803844:	8809883a 	mov	r4,r17
  803848:	08043f40 	call	8043f4 <_isatty_r>
  80384c:	103fde26 	beq	r2,zero,8037c8 <__smakebuf_r+0x8c>
  803850:	8080030b 	ldhu	r2,12(r16)
  803854:	80c010c4 	addi	r3,r16,67
  803858:	04810004 	movi	r18,1024
  80385c:	10800054 	ori	r2,r2,1
  803860:	8080030d 	sth	r2,12(r16)
  803864:	00800044 	movi	r2,1
  803868:	80c00415 	stw	r3,16(r16)
  80386c:	80800515 	stw	r2,20(r16)
  803870:	80c00015 	stw	r3,0(r16)
  803874:	003fd506 	br	8037cc <__smakebuf_r+0x90>
  803878:	80c00a17 	ldw	r3,40(r16)
  80387c:	00802034 	movhi	r2,128
  803880:	10895b04 	addi	r2,r2,9580
  803884:	18bfcb1e 	bne	r3,r2,8037b4 <__smakebuf_r+0x78>
  803888:	8080030b 	ldhu	r2,12(r16)
  80388c:	00c10004 	movi	r3,1024
  803890:	1825883a 	mov	r18,r3
  803894:	10c4b03a 	or	r2,r2,r3
  803898:	8080030d 	sth	r2,12(r16)
  80389c:	80c01315 	stw	r3,76(r16)
  8038a0:	003fca06 	br	8037cc <__smakebuf_r+0x90>
  8038a4:	8100030b 	ldhu	r4,12(r16)
  8038a8:	2080800c 	andi	r2,r4,512
  8038ac:	103fb21e 	bne	r2,zero,803778 <__smakebuf_r+0x3c>
  8038b0:	80c010c4 	addi	r3,r16,67
  8038b4:	21000094 	ori	r4,r4,2
  8038b8:	00800044 	movi	r2,1
  8038bc:	80800515 	stw	r2,20(r16)
  8038c0:	8100030d 	sth	r4,12(r16)
  8038c4:	80c00415 	stw	r3,16(r16)
  8038c8:	80c00015 	stw	r3,0(r16)
  8038cc:	003faa06 	br	803778 <__smakebuf_r+0x3c>

008038d0 <memchr>:
  8038d0:	008000c4 	movi	r2,3
  8038d4:	29403fcc 	andi	r5,r5,255
  8038d8:	2007883a 	mov	r3,r4
  8038dc:	1180022e 	bgeu	r2,r6,8038e8 <memchr+0x18>
  8038e0:	2084703a 	and	r2,r4,r2
  8038e4:	10000b26 	beq	r2,zero,803914 <memchr+0x44>
  8038e8:	313fffc4 	addi	r4,r6,-1
  8038ec:	3000051e 	bne	r6,zero,803904 <memchr+0x34>
  8038f0:	00002c06 	br	8039a4 <memchr+0xd4>
  8038f4:	213fffc4 	addi	r4,r4,-1
  8038f8:	00bfffc4 	movi	r2,-1
  8038fc:	18c00044 	addi	r3,r3,1
  803900:	20802826 	beq	r4,r2,8039a4 <memchr+0xd4>
  803904:	18800003 	ldbu	r2,0(r3)
  803908:	28bffa1e 	bne	r5,r2,8038f4 <memchr+0x24>
  80390c:	1805883a 	mov	r2,r3
  803910:	f800283a 	ret
  803914:	0011883a 	mov	r8,zero
  803918:	0007883a 	mov	r3,zero
  80391c:	01c00104 	movi	r7,4
  803920:	4004923a 	slli	r2,r8,8
  803924:	18c00044 	addi	r3,r3,1
  803928:	1151883a 	add	r8,r2,r5
  80392c:	19fffc1e 	bne	r3,r7,803920 <memchr+0x50>
  803930:	02bfbff4 	movhi	r10,65279
  803934:	52bfbfc4 	addi	r10,r10,-257
  803938:	02602074 	movhi	r9,32897
  80393c:	4a602004 	addi	r9,r9,-32640
  803940:	02c000c4 	movi	r11,3
  803944:	20800017 	ldw	r2,0(r4)
  803948:	31bfff04 	addi	r6,r6,-4
  80394c:	200f883a 	mov	r7,r4
  803950:	1204f03a 	xor	r2,r2,r8
  803954:	1287883a 	add	r3,r2,r10
  803958:	1a46703a 	and	r3,r3,r9
  80395c:	0084303a 	nor	r2,zero,r2
  803960:	10c4703a 	and	r2,r2,r3
  803964:	10000b26 	beq	r2,zero,803994 <memchr+0xc4>
  803968:	20800003 	ldbu	r2,0(r4)
  80396c:	28800f26 	beq	r5,r2,8039ac <memchr+0xdc>
  803970:	20800043 	ldbu	r2,1(r4)
  803974:	21c00044 	addi	r7,r4,1
  803978:	28800c26 	beq	r5,r2,8039ac <memchr+0xdc>
  80397c:	20800083 	ldbu	r2,2(r4)
  803980:	21c00084 	addi	r7,r4,2
  803984:	28800926 	beq	r5,r2,8039ac <memchr+0xdc>
  803988:	208000c3 	ldbu	r2,3(r4)
  80398c:	21c000c4 	addi	r7,r4,3
  803990:	28800626 	beq	r5,r2,8039ac <memchr+0xdc>
  803994:	21000104 	addi	r4,r4,4
  803998:	59bfea36 	bltu	r11,r6,803944 <memchr+0x74>
  80399c:	2007883a 	mov	r3,r4
  8039a0:	003fd106 	br	8038e8 <memchr+0x18>
  8039a4:	0005883a 	mov	r2,zero
  8039a8:	f800283a 	ret
  8039ac:	3805883a 	mov	r2,r7
  8039b0:	f800283a 	ret

008039b4 <memcpy>:
  8039b4:	01c003c4 	movi	r7,15
  8039b8:	2007883a 	mov	r3,r4
  8039bc:	3980032e 	bgeu	r7,r6,8039cc <memcpy+0x18>
  8039c0:	2904b03a 	or	r2,r5,r4
  8039c4:	108000cc 	andi	r2,r2,3
  8039c8:	10000926 	beq	r2,zero,8039f0 <memcpy+0x3c>
  8039cc:	30000626 	beq	r6,zero,8039e8 <memcpy+0x34>
  8039d0:	30cd883a 	add	r6,r6,r3
  8039d4:	28800003 	ldbu	r2,0(r5)
  8039d8:	29400044 	addi	r5,r5,1
  8039dc:	18800005 	stb	r2,0(r3)
  8039e0:	18c00044 	addi	r3,r3,1
  8039e4:	30fffb1e 	bne	r6,r3,8039d4 <memcpy+0x20>
  8039e8:	2005883a 	mov	r2,r4
  8039ec:	f800283a 	ret
  8039f0:	3811883a 	mov	r8,r7
  8039f4:	200f883a 	mov	r7,r4
  8039f8:	28c00017 	ldw	r3,0(r5)
  8039fc:	31bffc04 	addi	r6,r6,-16
  803a00:	38c00015 	stw	r3,0(r7)
  803a04:	28800117 	ldw	r2,4(r5)
  803a08:	38800115 	stw	r2,4(r7)
  803a0c:	28c00217 	ldw	r3,8(r5)
  803a10:	38c00215 	stw	r3,8(r7)
  803a14:	28800317 	ldw	r2,12(r5)
  803a18:	29400404 	addi	r5,r5,16
  803a1c:	38800315 	stw	r2,12(r7)
  803a20:	39c00404 	addi	r7,r7,16
  803a24:	41bff436 	bltu	r8,r6,8039f8 <memcpy+0x44>
  803a28:	008000c4 	movi	r2,3
  803a2c:	1180072e 	bgeu	r2,r6,803a4c <memcpy+0x98>
  803a30:	1007883a 	mov	r3,r2
  803a34:	28800017 	ldw	r2,0(r5)
  803a38:	31bfff04 	addi	r6,r6,-4
  803a3c:	29400104 	addi	r5,r5,4
  803a40:	38800015 	stw	r2,0(r7)
  803a44:	39c00104 	addi	r7,r7,4
  803a48:	19bffa36 	bltu	r3,r6,803a34 <memcpy+0x80>
  803a4c:	3807883a 	mov	r3,r7
  803a50:	003fde06 	br	8039cc <memcpy+0x18>

00803a54 <memmove>:
  803a54:	2807883a 	mov	r3,r5
  803a58:	2011883a 	mov	r8,r4
  803a5c:	29000c2e 	bgeu	r5,r4,803a90 <memmove+0x3c>
  803a60:	298f883a 	add	r7,r5,r6
  803a64:	21c00a2e 	bgeu	r4,r7,803a90 <memmove+0x3c>
  803a68:	30000726 	beq	r6,zero,803a88 <memmove+0x34>
  803a6c:	2187883a 	add	r3,r4,r6
  803a70:	198dc83a 	sub	r6,r3,r6
  803a74:	39ffffc4 	addi	r7,r7,-1
  803a78:	38800003 	ldbu	r2,0(r7)
  803a7c:	18ffffc4 	addi	r3,r3,-1
  803a80:	18800005 	stb	r2,0(r3)
  803a84:	19bffb1e 	bne	r3,r6,803a74 <memmove+0x20>
  803a88:	2005883a 	mov	r2,r4
  803a8c:	f800283a 	ret
  803a90:	01c003c4 	movi	r7,15
  803a94:	39800a36 	bltu	r7,r6,803ac0 <memmove+0x6c>
  803a98:	303ffb26 	beq	r6,zero,803a88 <memmove+0x34>
  803a9c:	400f883a 	mov	r7,r8
  803aa0:	320d883a 	add	r6,r6,r8
  803aa4:	28800003 	ldbu	r2,0(r5)
  803aa8:	29400044 	addi	r5,r5,1
  803aac:	38800005 	stb	r2,0(r7)
  803ab0:	39c00044 	addi	r7,r7,1
  803ab4:	39bffb1e 	bne	r7,r6,803aa4 <memmove+0x50>
  803ab8:	2005883a 	mov	r2,r4
  803abc:	f800283a 	ret
  803ac0:	1904b03a 	or	r2,r3,r4
  803ac4:	108000cc 	andi	r2,r2,3
  803ac8:	103ff31e 	bne	r2,zero,803a98 <memmove+0x44>
  803acc:	3811883a 	mov	r8,r7
  803ad0:	180b883a 	mov	r5,r3
  803ad4:	200f883a 	mov	r7,r4
  803ad8:	28c00017 	ldw	r3,0(r5)
  803adc:	31bffc04 	addi	r6,r6,-16
  803ae0:	38c00015 	stw	r3,0(r7)
  803ae4:	28800117 	ldw	r2,4(r5)
  803ae8:	38800115 	stw	r2,4(r7)
  803aec:	28c00217 	ldw	r3,8(r5)
  803af0:	38c00215 	stw	r3,8(r7)
  803af4:	28800317 	ldw	r2,12(r5)
  803af8:	29400404 	addi	r5,r5,16
  803afc:	38800315 	stw	r2,12(r7)
  803b00:	39c00404 	addi	r7,r7,16
  803b04:	41bff436 	bltu	r8,r6,803ad8 <memmove+0x84>
  803b08:	008000c4 	movi	r2,3
  803b0c:	1180072e 	bgeu	r2,r6,803b2c <memmove+0xd8>
  803b10:	1007883a 	mov	r3,r2
  803b14:	28800017 	ldw	r2,0(r5)
  803b18:	31bfff04 	addi	r6,r6,-4
  803b1c:	29400104 	addi	r5,r5,4
  803b20:	38800015 	stw	r2,0(r7)
  803b24:	39c00104 	addi	r7,r7,4
  803b28:	19bffa36 	bltu	r3,r6,803b14 <memmove+0xc0>
  803b2c:	3811883a 	mov	r8,r7
  803b30:	003fd906 	br	803a98 <memmove+0x44>

00803b34 <_read_r>:
  803b34:	defffd04 	addi	sp,sp,-12
  803b38:	dc000015 	stw	r16,0(sp)
  803b3c:	04002074 	movhi	r16,129
  803b40:	8431b304 	addi	r16,r16,-14644
  803b44:	dc400115 	stw	r17,4(sp)
  803b48:	80000015 	stw	zero,0(r16)
  803b4c:	2023883a 	mov	r17,r4
  803b50:	2809883a 	mov	r4,r5
  803b54:	300b883a 	mov	r5,r6
  803b58:	380d883a 	mov	r6,r7
  803b5c:	dfc00215 	stw	ra,8(sp)
  803b60:	0804f400 	call	804f40 <read>
  803b64:	1007883a 	mov	r3,r2
  803b68:	00bfffc4 	movi	r2,-1
  803b6c:	18800626 	beq	r3,r2,803b88 <_read_r+0x54>
  803b70:	1805883a 	mov	r2,r3
  803b74:	dfc00217 	ldw	ra,8(sp)
  803b78:	dc400117 	ldw	r17,4(sp)
  803b7c:	dc000017 	ldw	r16,0(sp)
  803b80:	dec00304 	addi	sp,sp,12
  803b84:	f800283a 	ret
  803b88:	80800017 	ldw	r2,0(r16)
  803b8c:	103ff826 	beq	r2,zero,803b70 <_read_r+0x3c>
  803b90:	88800015 	stw	r2,0(r17)
  803b94:	1805883a 	mov	r2,r3
  803b98:	dfc00217 	ldw	ra,8(sp)
  803b9c:	dc400117 	ldw	r17,4(sp)
  803ba0:	dc000017 	ldw	r16,0(sp)
  803ba4:	dec00304 	addi	sp,sp,12
  803ba8:	f800283a 	ret

00803bac <_realloc_r>:
  803bac:	defff404 	addi	sp,sp,-48
  803bb0:	dd800815 	stw	r22,32(sp)
  803bb4:	dc800415 	stw	r18,16(sp)
  803bb8:	dc400315 	stw	r17,12(sp)
  803bbc:	dfc00b15 	stw	ra,44(sp)
  803bc0:	df000a15 	stw	fp,40(sp)
  803bc4:	ddc00915 	stw	r23,36(sp)
  803bc8:	dd400715 	stw	r21,28(sp)
  803bcc:	dd000615 	stw	r20,24(sp)
  803bd0:	dcc00515 	stw	r19,20(sp)
  803bd4:	dc000215 	stw	r16,8(sp)
  803bd8:	2825883a 	mov	r18,r5
  803bdc:	3023883a 	mov	r17,r6
  803be0:	202d883a 	mov	r22,r4
  803be4:	2800c926 	beq	r5,zero,803f0c <_realloc_r+0x360>
  803be8:	0804c3c0 	call	804c3c <__malloc_lock>
  803bec:	943ffe04 	addi	r16,r18,-8
  803bf0:	88c002c4 	addi	r3,r17,11
  803bf4:	00800584 	movi	r2,22
  803bf8:	82000117 	ldw	r8,4(r16)
  803bfc:	10c01b2e 	bgeu	r2,r3,803c6c <_realloc_r+0xc0>
  803c00:	00bffe04 	movi	r2,-8
  803c04:	188e703a 	and	r7,r3,r2
  803c08:	3839883a 	mov	fp,r7
  803c0c:	38001a16 	blt	r7,zero,803c78 <_realloc_r+0xcc>
  803c10:	e4401936 	bltu	fp,r17,803c78 <_realloc_r+0xcc>
  803c14:	013fff04 	movi	r4,-4
  803c18:	4126703a 	and	r19,r8,r4
  803c1c:	99c02616 	blt	r19,r7,803cb8 <_realloc_r+0x10c>
  803c20:	802b883a 	mov	r21,r16
  803c24:	9829883a 	mov	r20,r19
  803c28:	84000204 	addi	r16,r16,8
  803c2c:	a80f883a 	mov	r7,r21
  803c30:	a70dc83a 	sub	r6,r20,fp
  803c34:	008003c4 	movi	r2,15
  803c38:	1180c136 	bltu	r2,r6,803f40 <_realloc_r+0x394>
  803c3c:	38800117 	ldw	r2,4(r7)
  803c40:	a549883a 	add	r4,r20,r21
  803c44:	1080004c 	andi	r2,r2,1
  803c48:	a084b03a 	or	r2,r20,r2
  803c4c:	38800115 	stw	r2,4(r7)
  803c50:	20c00117 	ldw	r3,4(r4)
  803c54:	18c00054 	ori	r3,r3,1
  803c58:	20c00115 	stw	r3,4(r4)
  803c5c:	b009883a 	mov	r4,r22
  803c60:	0804c5c0 	call	804c5c <__malloc_unlock>
  803c64:	8023883a 	mov	r17,r16
  803c68:	00000606 	br	803c84 <_realloc_r+0xd8>
  803c6c:	01c00404 	movi	r7,16
  803c70:	3839883a 	mov	fp,r7
  803c74:	e47fe72e 	bgeu	fp,r17,803c14 <_realloc_r+0x68>
  803c78:	00800304 	movi	r2,12
  803c7c:	0023883a 	mov	r17,zero
  803c80:	b0800015 	stw	r2,0(r22)
  803c84:	8805883a 	mov	r2,r17
  803c88:	dfc00b17 	ldw	ra,44(sp)
  803c8c:	df000a17 	ldw	fp,40(sp)
  803c90:	ddc00917 	ldw	r23,36(sp)
  803c94:	dd800817 	ldw	r22,32(sp)
  803c98:	dd400717 	ldw	r21,28(sp)
  803c9c:	dd000617 	ldw	r20,24(sp)
  803ca0:	dcc00517 	ldw	r19,20(sp)
  803ca4:	dc800417 	ldw	r18,16(sp)
  803ca8:	dc400317 	ldw	r17,12(sp)
  803cac:	dc000217 	ldw	r16,8(sp)
  803cb0:	dec00c04 	addi	sp,sp,48
  803cb4:	f800283a 	ret
  803cb8:	00802074 	movhi	r2,129
  803cbc:	10a47d04 	addi	r2,r2,-28172
  803cc0:	12400217 	ldw	r9,8(r2)
  803cc4:	84cd883a 	add	r6,r16,r19
  803cc8:	802b883a 	mov	r21,r16
  803ccc:	3240b926 	beq	r6,r9,803fb4 <_realloc_r+0x408>
  803cd0:	31400117 	ldw	r5,4(r6)
  803cd4:	00bfff84 	movi	r2,-2
  803cd8:	2884703a 	and	r2,r5,r2
  803cdc:	1185883a 	add	r2,r2,r6
  803ce0:	10c00117 	ldw	r3,4(r2)
  803ce4:	18c0004c 	andi	r3,r3,1
  803ce8:	1807003a 	cmpeq	r3,r3,zero
  803cec:	1800a326 	beq	r3,zero,803f7c <_realloc_r+0x3d0>
  803cf0:	2908703a 	and	r4,r5,r4
  803cf4:	9929883a 	add	r20,r19,r4
  803cf8:	a1c0a30e 	bge	r20,r7,803f88 <_realloc_r+0x3dc>
  803cfc:	4080004c 	andi	r2,r8,1
  803d00:	1000551e 	bne	r2,zero,803e58 <_realloc_r+0x2ac>
  803d04:	80800017 	ldw	r2,0(r16)
  803d08:	80afc83a 	sub	r23,r16,r2
  803d0c:	b8c00117 	ldw	r3,4(r23)
  803d10:	00bfff04 	movi	r2,-4
  803d14:	1884703a 	and	r2,r3,r2
  803d18:	30002e26 	beq	r6,zero,803dd4 <_realloc_r+0x228>
  803d1c:	3240b926 	beq	r6,r9,804004 <_realloc_r+0x458>
  803d20:	98a9883a 	add	r20,r19,r2
  803d24:	2509883a 	add	r4,r4,r20
  803d28:	d9000015 	stw	r4,0(sp)
  803d2c:	21c02a16 	blt	r4,r7,803dd8 <_realloc_r+0x22c>
  803d30:	30800317 	ldw	r2,12(r6)
  803d34:	30c00217 	ldw	r3,8(r6)
  803d38:	01400904 	movi	r5,36
  803d3c:	99bfff04 	addi	r6,r19,-4
  803d40:	18800315 	stw	r2,12(r3)
  803d44:	10c00215 	stw	r3,8(r2)
  803d48:	b9000317 	ldw	r4,12(r23)
  803d4c:	b8800217 	ldw	r2,8(r23)
  803d50:	b82b883a 	mov	r21,r23
  803d54:	bc000204 	addi	r16,r23,8
  803d58:	20800215 	stw	r2,8(r4)
  803d5c:	11000315 	stw	r4,12(r2)
  803d60:	2980e436 	bltu	r5,r6,8040f4 <_realloc_r+0x548>
  803d64:	008004c4 	movi	r2,19
  803d68:	9009883a 	mov	r4,r18
  803d6c:	8011883a 	mov	r8,r16
  803d70:	11800f2e 	bgeu	r2,r6,803db0 <_realloc_r+0x204>
  803d74:	90800017 	ldw	r2,0(r18)
  803d78:	ba000404 	addi	r8,r23,16
  803d7c:	91000204 	addi	r4,r18,8
  803d80:	b8800215 	stw	r2,8(r23)
  803d84:	90c00117 	ldw	r3,4(r18)
  803d88:	008006c4 	movi	r2,27
  803d8c:	b8c00315 	stw	r3,12(r23)
  803d90:	1180072e 	bgeu	r2,r6,803db0 <_realloc_r+0x204>
  803d94:	90c00217 	ldw	r3,8(r18)
  803d98:	ba000604 	addi	r8,r23,24
  803d9c:	91000404 	addi	r4,r18,16
  803da0:	b8c00415 	stw	r3,16(r23)
  803da4:	90800317 	ldw	r2,12(r18)
  803da8:	b8800515 	stw	r2,20(r23)
  803dac:	3140e726 	beq	r6,r5,80414c <_realloc_r+0x5a0>
  803db0:	20800017 	ldw	r2,0(r4)
  803db4:	dd000017 	ldw	r20,0(sp)
  803db8:	b80f883a 	mov	r7,r23
  803dbc:	40800015 	stw	r2,0(r8)
  803dc0:	20c00117 	ldw	r3,4(r4)
  803dc4:	40c00115 	stw	r3,4(r8)
  803dc8:	20800217 	ldw	r2,8(r4)
  803dcc:	40800215 	stw	r2,8(r8)
  803dd0:	003f9706 	br	803c30 <_realloc_r+0x84>
  803dd4:	98a9883a 	add	r20,r19,r2
  803dd8:	a1c01f16 	blt	r20,r7,803e58 <_realloc_r+0x2ac>
  803ddc:	b8c00317 	ldw	r3,12(r23)
  803de0:	b8800217 	ldw	r2,8(r23)
  803de4:	99bfff04 	addi	r6,r19,-4
  803de8:	01400904 	movi	r5,36
  803dec:	b82b883a 	mov	r21,r23
  803df0:	18800215 	stw	r2,8(r3)
  803df4:	10c00315 	stw	r3,12(r2)
  803df8:	bc000204 	addi	r16,r23,8
  803dfc:	2980c336 	bltu	r5,r6,80410c <_realloc_r+0x560>
  803e00:	008004c4 	movi	r2,19
  803e04:	9009883a 	mov	r4,r18
  803e08:	8011883a 	mov	r8,r16
  803e0c:	11800f2e 	bgeu	r2,r6,803e4c <_realloc_r+0x2a0>
  803e10:	90800017 	ldw	r2,0(r18)
  803e14:	ba000404 	addi	r8,r23,16
  803e18:	91000204 	addi	r4,r18,8
  803e1c:	b8800215 	stw	r2,8(r23)
  803e20:	90c00117 	ldw	r3,4(r18)
  803e24:	008006c4 	movi	r2,27
  803e28:	b8c00315 	stw	r3,12(r23)
  803e2c:	1180072e 	bgeu	r2,r6,803e4c <_realloc_r+0x2a0>
  803e30:	90c00217 	ldw	r3,8(r18)
  803e34:	ba000604 	addi	r8,r23,24
  803e38:	91000404 	addi	r4,r18,16
  803e3c:	b8c00415 	stw	r3,16(r23)
  803e40:	90800317 	ldw	r2,12(r18)
  803e44:	b8800515 	stw	r2,20(r23)
  803e48:	3140c726 	beq	r6,r5,804168 <_realloc_r+0x5bc>
  803e4c:	20800017 	ldw	r2,0(r4)
  803e50:	b80f883a 	mov	r7,r23
  803e54:	003fd906 	br	803dbc <_realloc_r+0x210>
  803e58:	880b883a 	mov	r5,r17
  803e5c:	b009883a 	mov	r4,r22
  803e60:	0801a1c0 	call	801a1c <_malloc_r>
  803e64:	1023883a 	mov	r17,r2
  803e68:	10002526 	beq	r2,zero,803f00 <_realloc_r+0x354>
  803e6c:	80800117 	ldw	r2,4(r16)
  803e70:	00ffff84 	movi	r3,-2
  803e74:	893ffe04 	addi	r4,r17,-8
  803e78:	10c4703a 	and	r2,r2,r3
  803e7c:	8085883a 	add	r2,r16,r2
  803e80:	20809526 	beq	r4,r2,8040d8 <_realloc_r+0x52c>
  803e84:	99bfff04 	addi	r6,r19,-4
  803e88:	01c00904 	movi	r7,36
  803e8c:	39804536 	bltu	r7,r6,803fa4 <_realloc_r+0x3f8>
  803e90:	008004c4 	movi	r2,19
  803e94:	9009883a 	mov	r4,r18
  803e98:	880b883a 	mov	r5,r17
  803e9c:	11800f2e 	bgeu	r2,r6,803edc <_realloc_r+0x330>
  803ea0:	90800017 	ldw	r2,0(r18)
  803ea4:	89400204 	addi	r5,r17,8
  803ea8:	91000204 	addi	r4,r18,8
  803eac:	88800015 	stw	r2,0(r17)
  803eb0:	90c00117 	ldw	r3,4(r18)
  803eb4:	008006c4 	movi	r2,27
  803eb8:	88c00115 	stw	r3,4(r17)
  803ebc:	1180072e 	bgeu	r2,r6,803edc <_realloc_r+0x330>
  803ec0:	90c00217 	ldw	r3,8(r18)
  803ec4:	89400404 	addi	r5,r17,16
  803ec8:	91000404 	addi	r4,r18,16
  803ecc:	88c00215 	stw	r3,8(r17)
  803ed0:	90800317 	ldw	r2,12(r18)
  803ed4:	88800315 	stw	r2,12(r17)
  803ed8:	31c09126 	beq	r6,r7,804120 <_realloc_r+0x574>
  803edc:	20800017 	ldw	r2,0(r4)
  803ee0:	28800015 	stw	r2,0(r5)
  803ee4:	20c00117 	ldw	r3,4(r4)
  803ee8:	28c00115 	stw	r3,4(r5)
  803eec:	20800217 	ldw	r2,8(r4)
  803ef0:	28800215 	stw	r2,8(r5)
  803ef4:	900b883a 	mov	r5,r18
  803ef8:	b009883a 	mov	r4,r22
  803efc:	0802f140 	call	802f14 <_free_r>
  803f00:	b009883a 	mov	r4,r22
  803f04:	0804c5c0 	call	804c5c <__malloc_unlock>
  803f08:	003f5e06 	br	803c84 <_realloc_r+0xd8>
  803f0c:	300b883a 	mov	r5,r6
  803f10:	dfc00b17 	ldw	ra,44(sp)
  803f14:	df000a17 	ldw	fp,40(sp)
  803f18:	ddc00917 	ldw	r23,36(sp)
  803f1c:	dd800817 	ldw	r22,32(sp)
  803f20:	dd400717 	ldw	r21,28(sp)
  803f24:	dd000617 	ldw	r20,24(sp)
  803f28:	dcc00517 	ldw	r19,20(sp)
  803f2c:	dc800417 	ldw	r18,16(sp)
  803f30:	dc400317 	ldw	r17,12(sp)
  803f34:	dc000217 	ldw	r16,8(sp)
  803f38:	dec00c04 	addi	sp,sp,48
  803f3c:	0801a1c1 	jmpi	801a1c <_malloc_r>
  803f40:	38800117 	ldw	r2,4(r7)
  803f44:	e54b883a 	add	r5,fp,r21
  803f48:	31000054 	ori	r4,r6,1
  803f4c:	1080004c 	andi	r2,r2,1
  803f50:	1704b03a 	or	r2,r2,fp
  803f54:	38800115 	stw	r2,4(r7)
  803f58:	29000115 	stw	r4,4(r5)
  803f5c:	2987883a 	add	r3,r5,r6
  803f60:	18800117 	ldw	r2,4(r3)
  803f64:	29400204 	addi	r5,r5,8
  803f68:	b009883a 	mov	r4,r22
  803f6c:	10800054 	ori	r2,r2,1
  803f70:	18800115 	stw	r2,4(r3)
  803f74:	0802f140 	call	802f14 <_free_r>
  803f78:	003f3806 	br	803c5c <_realloc_r+0xb0>
  803f7c:	000d883a 	mov	r6,zero
  803f80:	0009883a 	mov	r4,zero
  803f84:	003f5d06 	br	803cfc <_realloc_r+0x150>
  803f88:	30c00217 	ldw	r3,8(r6)
  803f8c:	30800317 	ldw	r2,12(r6)
  803f90:	800f883a 	mov	r7,r16
  803f94:	84000204 	addi	r16,r16,8
  803f98:	10c00215 	stw	r3,8(r2)
  803f9c:	18800315 	stw	r2,12(r3)
  803fa0:	003f2306 	br	803c30 <_realloc_r+0x84>
  803fa4:	8809883a 	mov	r4,r17
  803fa8:	900b883a 	mov	r5,r18
  803fac:	0803a540 	call	803a54 <memmove>
  803fb0:	003fd006 	br	803ef4 <_realloc_r+0x348>
  803fb4:	30800117 	ldw	r2,4(r6)
  803fb8:	e0c00404 	addi	r3,fp,16
  803fbc:	1108703a 	and	r4,r2,r4
  803fc0:	9905883a 	add	r2,r19,r4
  803fc4:	10ff4d16 	blt	r2,r3,803cfc <_realloc_r+0x150>
  803fc8:	1705c83a 	sub	r2,r2,fp
  803fcc:	870b883a 	add	r5,r16,fp
  803fd0:	10800054 	ori	r2,r2,1
  803fd4:	28800115 	stw	r2,4(r5)
  803fd8:	80c00117 	ldw	r3,4(r16)
  803fdc:	00802074 	movhi	r2,129
  803fe0:	10a47d04 	addi	r2,r2,-28172
  803fe4:	b009883a 	mov	r4,r22
  803fe8:	18c0004c 	andi	r3,r3,1
  803fec:	e0c6b03a 	or	r3,fp,r3
  803ff0:	11400215 	stw	r5,8(r2)
  803ff4:	80c00115 	stw	r3,4(r16)
  803ff8:	0804c5c0 	call	804c5c <__malloc_unlock>
  803ffc:	84400204 	addi	r17,r16,8
  804000:	003f2006 	br	803c84 <_realloc_r+0xd8>
  804004:	98a9883a 	add	r20,r19,r2
  804008:	2509883a 	add	r4,r4,r20
  80400c:	e0800404 	addi	r2,fp,16
  804010:	d9000115 	stw	r4,4(sp)
  804014:	20bf7016 	blt	r4,r2,803dd8 <_realloc_r+0x22c>
  804018:	b8c00317 	ldw	r3,12(r23)
  80401c:	b8800217 	ldw	r2,8(r23)
  804020:	99bfff04 	addi	r6,r19,-4
  804024:	01400904 	movi	r5,36
  804028:	18800215 	stw	r2,8(r3)
  80402c:	10c00315 	stw	r3,12(r2)
  804030:	bc400204 	addi	r17,r23,8
  804034:	29804136 	bltu	r5,r6,80413c <_realloc_r+0x590>
  804038:	008004c4 	movi	r2,19
  80403c:	9009883a 	mov	r4,r18
  804040:	880f883a 	mov	r7,r17
  804044:	11800f2e 	bgeu	r2,r6,804084 <_realloc_r+0x4d8>
  804048:	90800017 	ldw	r2,0(r18)
  80404c:	b9c00404 	addi	r7,r23,16
  804050:	91000204 	addi	r4,r18,8
  804054:	b8800215 	stw	r2,8(r23)
  804058:	90c00117 	ldw	r3,4(r18)
  80405c:	008006c4 	movi	r2,27
  804060:	b8c00315 	stw	r3,12(r23)
  804064:	1180072e 	bgeu	r2,r6,804084 <_realloc_r+0x4d8>
  804068:	90c00217 	ldw	r3,8(r18)
  80406c:	b9c00604 	addi	r7,r23,24
  804070:	91000404 	addi	r4,r18,16
  804074:	b8c00415 	stw	r3,16(r23)
  804078:	90800317 	ldw	r2,12(r18)
  80407c:	b8800515 	stw	r2,20(r23)
  804080:	31404026 	beq	r6,r5,804184 <_realloc_r+0x5d8>
  804084:	20800017 	ldw	r2,0(r4)
  804088:	38800015 	stw	r2,0(r7)
  80408c:	20c00117 	ldw	r3,4(r4)
  804090:	38c00115 	stw	r3,4(r7)
  804094:	20800217 	ldw	r2,8(r4)
  804098:	38800215 	stw	r2,8(r7)
  80409c:	d8c00117 	ldw	r3,4(sp)
  8040a0:	bf0b883a 	add	r5,r23,fp
  8040a4:	b009883a 	mov	r4,r22
  8040a8:	1f05c83a 	sub	r2,r3,fp
  8040ac:	10800054 	ori	r2,r2,1
  8040b0:	28800115 	stw	r2,4(r5)
  8040b4:	b8c00117 	ldw	r3,4(r23)
  8040b8:	00802074 	movhi	r2,129
  8040bc:	10a47d04 	addi	r2,r2,-28172
  8040c0:	11400215 	stw	r5,8(r2)
  8040c4:	18c0004c 	andi	r3,r3,1
  8040c8:	e0c6b03a 	or	r3,fp,r3
  8040cc:	b8c00115 	stw	r3,4(r23)
  8040d0:	0804c5c0 	call	804c5c <__malloc_unlock>
  8040d4:	003eeb06 	br	803c84 <_realloc_r+0xd8>
  8040d8:	20800117 	ldw	r2,4(r4)
  8040dc:	00ffff04 	movi	r3,-4
  8040e0:	800f883a 	mov	r7,r16
  8040e4:	10c4703a 	and	r2,r2,r3
  8040e8:	98a9883a 	add	r20,r19,r2
  8040ec:	84000204 	addi	r16,r16,8
  8040f0:	003ecf06 	br	803c30 <_realloc_r+0x84>
  8040f4:	900b883a 	mov	r5,r18
  8040f8:	8009883a 	mov	r4,r16
  8040fc:	0803a540 	call	803a54 <memmove>
  804100:	dd000017 	ldw	r20,0(sp)
  804104:	b80f883a 	mov	r7,r23
  804108:	003ec906 	br	803c30 <_realloc_r+0x84>
  80410c:	900b883a 	mov	r5,r18
  804110:	8009883a 	mov	r4,r16
  804114:	0803a540 	call	803a54 <memmove>
  804118:	b80f883a 	mov	r7,r23
  80411c:	003ec406 	br	803c30 <_realloc_r+0x84>
  804120:	90c00417 	ldw	r3,16(r18)
  804124:	89400604 	addi	r5,r17,24
  804128:	91000604 	addi	r4,r18,24
  80412c:	88c00415 	stw	r3,16(r17)
  804130:	90800517 	ldw	r2,20(r18)
  804134:	88800515 	stw	r2,20(r17)
  804138:	003f6806 	br	803edc <_realloc_r+0x330>
  80413c:	900b883a 	mov	r5,r18
  804140:	8809883a 	mov	r4,r17
  804144:	0803a540 	call	803a54 <memmove>
  804148:	003fd406 	br	80409c <_realloc_r+0x4f0>
  80414c:	90c00417 	ldw	r3,16(r18)
  804150:	91000604 	addi	r4,r18,24
  804154:	ba000804 	addi	r8,r23,32
  804158:	b8c00615 	stw	r3,24(r23)
  80415c:	90800517 	ldw	r2,20(r18)
  804160:	b8800715 	stw	r2,28(r23)
  804164:	003f1206 	br	803db0 <_realloc_r+0x204>
  804168:	90c00417 	ldw	r3,16(r18)
  80416c:	91000604 	addi	r4,r18,24
  804170:	ba000804 	addi	r8,r23,32
  804174:	b8c00615 	stw	r3,24(r23)
  804178:	90800517 	ldw	r2,20(r18)
  80417c:	b8800715 	stw	r2,28(r23)
  804180:	003f3206 	br	803e4c <_realloc_r+0x2a0>
  804184:	90c00417 	ldw	r3,16(r18)
  804188:	91000604 	addi	r4,r18,24
  80418c:	b9c00804 	addi	r7,r23,32
  804190:	b8c00615 	stw	r3,24(r23)
  804194:	90800517 	ldw	r2,20(r18)
  804198:	b8800715 	stw	r2,28(r23)
  80419c:	003fb906 	br	804084 <_realloc_r+0x4d8>

008041a0 <__srefill_r>:
  8041a0:	defffd04 	addi	sp,sp,-12
  8041a4:	dc400115 	stw	r17,4(sp)
  8041a8:	dc000015 	stw	r16,0(sp)
  8041ac:	dfc00215 	stw	ra,8(sp)
  8041b0:	2023883a 	mov	r17,r4
  8041b4:	2821883a 	mov	r16,r5
  8041b8:	20000226 	beq	r4,zero,8041c4 <__srefill_r+0x24>
  8041bc:	20800e17 	ldw	r2,56(r4)
  8041c0:	10004126 	beq	r2,zero,8042c8 <__srefill_r+0x128>
  8041c4:	80c0030b 	ldhu	r3,12(r16)
  8041c8:	80000115 	stw	zero,4(r16)
  8041cc:	1880080c 	andi	r2,r3,32
  8041d0:	1000361e 	bne	r2,zero,8042ac <__srefill_r+0x10c>
  8041d4:	1880010c 	andi	r2,r3,4
  8041d8:	1000211e 	bne	r2,zero,804260 <__srefill_r+0xc0>
  8041dc:	1880040c 	andi	r2,r3,16
  8041e0:	10005026 	beq	r2,zero,804324 <__srefill_r+0x184>
  8041e4:	1880020c 	andi	r2,r3,8
  8041e8:	1000541e 	bne	r2,zero,80433c <__srefill_r+0x19c>
  8041ec:	8080030b 	ldhu	r2,12(r16)
  8041f0:	10800114 	ori	r2,r2,4
  8041f4:	8080030d 	sth	r2,12(r16)
  8041f8:	80800417 	ldw	r2,16(r16)
  8041fc:	10004526 	beq	r2,zero,804314 <__srefill_r+0x174>
  804200:	8080030b 	ldhu	r2,12(r16)
  804204:	108000cc 	andi	r2,r2,3
  804208:	1000361e 	bne	r2,zero,8042e4 <__srefill_r+0x144>
  80420c:	81800417 	ldw	r6,16(r16)
  804210:	80c00817 	ldw	r3,32(r16)
  804214:	81400717 	ldw	r5,28(r16)
  804218:	81c00517 	ldw	r7,20(r16)
  80421c:	8809883a 	mov	r4,r17
  804220:	81800015 	stw	r6,0(r16)
  804224:	183ee83a 	callr	r3
  804228:	80c0030b 	ldhu	r3,12(r16)
  80422c:	1009883a 	mov	r4,r2
  804230:	80800115 	stw	r2,4(r16)
  804234:	00b7ffc4 	movi	r2,-8193
  804238:	1884703a 	and	r2,r3,r2
  80423c:	8080030d 	sth	r2,12(r16)
  804240:	0100230e 	bge	zero,r4,8042d0 <__srefill_r+0x130>
  804244:	0009883a 	mov	r4,zero
  804248:	2005883a 	mov	r2,r4
  80424c:	dfc00217 	ldw	ra,8(sp)
  804250:	dc400117 	ldw	r17,4(sp)
  804254:	dc000017 	ldw	r16,0(sp)
  804258:	dec00304 	addi	sp,sp,12
  80425c:	f800283a 	ret
  804260:	81400c17 	ldw	r5,48(r16)
  804264:	283fe426 	beq	r5,zero,8041f8 <__srefill_r+0x58>
  804268:	80801004 	addi	r2,r16,64
  80426c:	28800226 	beq	r5,r2,804278 <__srefill_r+0xd8>
  804270:	8809883a 	mov	r4,r17
  804274:	0802f140 	call	802f14 <_free_r>
  804278:	80800f17 	ldw	r2,60(r16)
  80427c:	80000c15 	stw	zero,48(r16)
  804280:	80800115 	stw	r2,4(r16)
  804284:	103fdc26 	beq	r2,zero,8041f8 <__srefill_r+0x58>
  804288:	80800e17 	ldw	r2,56(r16)
  80428c:	0009883a 	mov	r4,zero
  804290:	80800015 	stw	r2,0(r16)
  804294:	2005883a 	mov	r2,r4
  804298:	dfc00217 	ldw	ra,8(sp)
  80429c:	dc400117 	ldw	r17,4(sp)
  8042a0:	dc000017 	ldw	r16,0(sp)
  8042a4:	dec00304 	addi	sp,sp,12
  8042a8:	f800283a 	ret
  8042ac:	013fffc4 	movi	r4,-1
  8042b0:	2005883a 	mov	r2,r4
  8042b4:	dfc00217 	ldw	ra,8(sp)
  8042b8:	dc400117 	ldw	r17,4(sp)
  8042bc:	dc000017 	ldw	r16,0(sp)
  8042c0:	dec00304 	addi	sp,sp,12
  8042c4:	f800283a 	ret
  8042c8:	08014e80 	call	8014e8 <__sinit>
  8042cc:	003fbd06 	br	8041c4 <__srefill_r+0x24>
  8042d0:	20000b1e 	bne	r4,zero,804300 <__srefill_r+0x160>
  8042d4:	10800814 	ori	r2,r2,32
  8042d8:	013fffc4 	movi	r4,-1
  8042dc:	8080030d 	sth	r2,12(r16)
  8042e0:	003fd906 	br	804248 <__srefill_r+0xa8>
  8042e4:	00802074 	movhi	r2,129
  8042e8:	10aa7b04 	addi	r2,r2,-22036
  8042ec:	11000017 	ldw	r4,0(r2)
  8042f0:	01402034 	movhi	r5,128
  8042f4:	2950d904 	addi	r5,r5,17252
  8042f8:	08019640 	call	801964 <_fwalk>
  8042fc:	003fc306 	br	80420c <__srefill_r+0x6c>
  804300:	10801014 	ori	r2,r2,64
  804304:	013fffc4 	movi	r4,-1
  804308:	8080030d 	sth	r2,12(r16)
  80430c:	80000115 	stw	zero,4(r16)
  804310:	003fcd06 	br	804248 <__srefill_r+0xa8>
  804314:	8809883a 	mov	r4,r17
  804318:	800b883a 	mov	r5,r16
  80431c:	080373c0 	call	80373c <__smakebuf_r>
  804320:	003fb706 	br	804200 <__srefill_r+0x60>
  804324:	18c01014 	ori	r3,r3,64
  804328:	00800244 	movi	r2,9
  80432c:	013fffc4 	movi	r4,-1
  804330:	88800015 	stw	r2,0(r17)
  804334:	80c0030d 	sth	r3,12(r16)
  804338:	003fc306 	br	804248 <__srefill_r+0xa8>
  80433c:	8809883a 	mov	r4,r17
  804340:	800b883a 	mov	r5,r16
  804344:	0802bb80 	call	802bb8 <_fflush_r>
  804348:	103fd81e 	bne	r2,zero,8042ac <__srefill_r+0x10c>
  80434c:	8080030b 	ldhu	r2,12(r16)
  804350:	80000215 	stw	zero,8(r16)
  804354:	80000615 	stw	zero,24(r16)
  804358:	10bffdcc 	andi	r2,r2,65527
  80435c:	8080030d 	sth	r2,12(r16)
  804360:	003fa206 	br	8041ec <__srefill_r+0x4c>

00804364 <lflush>:
  804364:	20c0030b 	ldhu	r3,12(r4)
  804368:	01400244 	movi	r5,9
  80436c:	0005883a 	mov	r2,zero
  804370:	18c0024c 	andi	r3,r3,9
  804374:	19400126 	beq	r3,r5,80437c <lflush+0x18>
  804378:	f800283a 	ret
  80437c:	0802db41 	jmpi	802db4 <fflush>

00804380 <_fstat_r>:
  804380:	defffd04 	addi	sp,sp,-12
  804384:	dc000015 	stw	r16,0(sp)
  804388:	04002074 	movhi	r16,129
  80438c:	8431b304 	addi	r16,r16,-14644
  804390:	dc400115 	stw	r17,4(sp)
  804394:	80000015 	stw	zero,0(r16)
  804398:	2023883a 	mov	r17,r4
  80439c:	2809883a 	mov	r4,r5
  8043a0:	300b883a 	mov	r5,r6
  8043a4:	dfc00215 	stw	ra,8(sp)
  8043a8:	08047400 	call	804740 <fstat>
  8043ac:	1007883a 	mov	r3,r2
  8043b0:	00bfffc4 	movi	r2,-1
  8043b4:	18800626 	beq	r3,r2,8043d0 <_fstat_r+0x50>
  8043b8:	1805883a 	mov	r2,r3
  8043bc:	dfc00217 	ldw	ra,8(sp)
  8043c0:	dc400117 	ldw	r17,4(sp)
  8043c4:	dc000017 	ldw	r16,0(sp)
  8043c8:	dec00304 	addi	sp,sp,12
  8043cc:	f800283a 	ret
  8043d0:	80800017 	ldw	r2,0(r16)
  8043d4:	103ff826 	beq	r2,zero,8043b8 <_fstat_r+0x38>
  8043d8:	88800015 	stw	r2,0(r17)
  8043dc:	1805883a 	mov	r2,r3
  8043e0:	dfc00217 	ldw	ra,8(sp)
  8043e4:	dc400117 	ldw	r17,4(sp)
  8043e8:	dc000017 	ldw	r16,0(sp)
  8043ec:	dec00304 	addi	sp,sp,12
  8043f0:	f800283a 	ret

008043f4 <_isatty_r>:
  8043f4:	defffd04 	addi	sp,sp,-12
  8043f8:	dc000015 	stw	r16,0(sp)
  8043fc:	04002074 	movhi	r16,129
  804400:	8431b304 	addi	r16,r16,-14644
  804404:	dc400115 	stw	r17,4(sp)
  804408:	80000015 	stw	zero,0(r16)
  80440c:	2023883a 	mov	r17,r4
  804410:	2809883a 	mov	r4,r5
  804414:	dfc00215 	stw	ra,8(sp)
  804418:	08048740 	call	804874 <isatty>
  80441c:	1007883a 	mov	r3,r2
  804420:	00bfffc4 	movi	r2,-1
  804424:	18800626 	beq	r3,r2,804440 <_isatty_r+0x4c>
  804428:	1805883a 	mov	r2,r3
  80442c:	dfc00217 	ldw	ra,8(sp)
  804430:	dc400117 	ldw	r17,4(sp)
  804434:	dc000017 	ldw	r16,0(sp)
  804438:	dec00304 	addi	sp,sp,12
  80443c:	f800283a 	ret
  804440:	80800017 	ldw	r2,0(r16)
  804444:	103ff826 	beq	r2,zero,804428 <_isatty_r+0x34>
  804448:	88800015 	stw	r2,0(r17)
  80444c:	1805883a 	mov	r2,r3
  804450:	dfc00217 	ldw	ra,8(sp)
  804454:	dc400117 	ldw	r17,4(sp)
  804458:	dc000017 	ldw	r16,0(sp)
  80445c:	dec00304 	addi	sp,sp,12
  804460:	f800283a 	ret

00804464 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  804464:	defff404 	addi	sp,sp,-48
  804468:	df000b15 	stw	fp,44(sp)
  80446c:	df000b04 	addi	fp,sp,44
  804470:	e13ffb15 	stw	r4,-20(fp)
  804474:	e17ffc15 	stw	r5,-16(fp)
  804478:	e1bffd15 	stw	r6,-12(fp)
  80447c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  804480:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  804484:	00802074 	movhi	r2,129
  804488:	10b1b704 	addi	r2,r2,-14628
  80448c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  804490:	1005003a 	cmpeq	r2,r2,zero
  804494:	1000411e 	bne	r2,zero,80459c <alt_alarm_start+0x138>
  {
    if (alarm)
  804498:	e0bffb17 	ldw	r2,-20(fp)
  80449c:	1005003a 	cmpeq	r2,r2,zero
  8044a0:	10003b1e 	bne	r2,zero,804590 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8044a4:	e0fffb17 	ldw	r3,-20(fp)
  8044a8:	e0bffd17 	ldw	r2,-12(fp)
  8044ac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  8044b0:	e0fffb17 	ldw	r3,-20(fp)
  8044b4:	e0bffe17 	ldw	r2,-8(fp)
  8044b8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8044bc:	0005303a 	rdctl	r2,status
  8044c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8044c4:	e0fff817 	ldw	r3,-32(fp)
  8044c8:	00bfff84 	movi	r2,-2
  8044cc:	1884703a 	and	r2,r3,r2
  8044d0:	1001703a 	wrctl	status,r2
  
  return context;
  8044d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8044d8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8044dc:	00802074 	movhi	r2,129
  8044e0:	10b1b804 	addi	r2,r2,-14624
  8044e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8044e8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8044ec:	e0fffc17 	ldw	r3,-16(fp)
  8044f0:	e0bff917 	ldw	r2,-28(fp)
  8044f4:	1885883a 	add	r2,r3,r2
  8044f8:	10c00044 	addi	r3,r2,1
  8044fc:	e0bffb17 	ldw	r2,-20(fp)
  804500:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804504:	e0bffb17 	ldw	r2,-20(fp)
  804508:	10c00217 	ldw	r3,8(r2)
  80450c:	e0bff917 	ldw	r2,-28(fp)
  804510:	1880042e 	bgeu	r3,r2,804524 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  804514:	e0fffb17 	ldw	r3,-20(fp)
  804518:	00800044 	movi	r2,1
  80451c:	18800405 	stb	r2,16(r3)
  804520:	00000206 	br	80452c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  804524:	e0bffb17 	ldw	r2,-20(fp)
  804528:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80452c:	e0fffb17 	ldw	r3,-20(fp)
  804530:	00802074 	movhi	r2,129
  804534:	10aa8504 	addi	r2,r2,-21996
  804538:	e0bff615 	stw	r2,-40(fp)
  80453c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804540:	e0fff717 	ldw	r3,-36(fp)
  804544:	e0bff617 	ldw	r2,-40(fp)
  804548:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80454c:	e0bff617 	ldw	r2,-40(fp)
  804550:	10c00017 	ldw	r3,0(r2)
  804554:	e0bff717 	ldw	r2,-36(fp)
  804558:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80455c:	e0bff617 	ldw	r2,-40(fp)
  804560:	10c00017 	ldw	r3,0(r2)
  804564:	e0bff717 	ldw	r2,-36(fp)
  804568:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80456c:	e0fff617 	ldw	r3,-40(fp)
  804570:	e0bff717 	ldw	r2,-36(fp)
  804574:	18800015 	stw	r2,0(r3)
  804578:	e0bffa17 	ldw	r2,-24(fp)
  80457c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804580:	e0bff517 	ldw	r2,-44(fp)
  804584:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  804588:	e03fff15 	stw	zero,-4(fp)
  80458c:	00000506 	br	8045a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  804590:	00bffa84 	movi	r2,-22
  804594:	e0bfff15 	stw	r2,-4(fp)
  804598:	00000206 	br	8045a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80459c:	00bfde84 	movi	r2,-134
  8045a0:	e0bfff15 	stw	r2,-4(fp)
  8045a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8045a8:	e037883a 	mov	sp,fp
  8045ac:	df000017 	ldw	fp,0(sp)
  8045b0:	dec00104 	addi	sp,sp,4
  8045b4:	f800283a 	ret

008045b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8045b8:	defff804 	addi	sp,sp,-32
  8045bc:	dfc00715 	stw	ra,28(sp)
  8045c0:	df000615 	stw	fp,24(sp)
  8045c4:	df000604 	addi	fp,sp,24
  8045c8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8045cc:	e0bffc17 	ldw	r2,-16(fp)
  8045d0:	1004803a 	cmplt	r2,r2,zero
  8045d4:	1000081e 	bne	r2,zero,8045f8 <close+0x40>
  8045d8:	e0bffc17 	ldw	r2,-16(fp)
  8045dc:	10800324 	muli	r2,r2,12
  8045e0:	1007883a 	mov	r3,r2
  8045e4:	00802074 	movhi	r2,129
  8045e8:	10a58904 	addi	r2,r2,-27100
  8045ec:	1887883a 	add	r3,r3,r2
  8045f0:	e0ffff15 	stw	r3,-4(fp)
  8045f4:	00000106 	br	8045fc <close+0x44>
  8045f8:	e03fff15 	stw	zero,-4(fp)
  8045fc:	e0bfff17 	ldw	r2,-4(fp)
  804600:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  804604:	e0bffb17 	ldw	r2,-20(fp)
  804608:	1005003a 	cmpeq	r2,r2,zero
  80460c:	10001d1e 	bne	r2,zero,804684 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  804610:	e0bffb17 	ldw	r2,-20(fp)
  804614:	10800017 	ldw	r2,0(r2)
  804618:	10800417 	ldw	r2,16(r2)
  80461c:	1005003a 	cmpeq	r2,r2,zero
  804620:	1000071e 	bne	r2,zero,804640 <close+0x88>
  804624:	e0bffb17 	ldw	r2,-20(fp)
  804628:	10800017 	ldw	r2,0(r2)
  80462c:	10800417 	ldw	r2,16(r2)
  804630:	e13ffb17 	ldw	r4,-20(fp)
  804634:	103ee83a 	callr	r2
  804638:	e0bffe15 	stw	r2,-8(fp)
  80463c:	00000106 	br	804644 <close+0x8c>
  804640:	e03ffe15 	stw	zero,-8(fp)
  804644:	e0bffe17 	ldw	r2,-8(fp)
  804648:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80464c:	e13ffc17 	ldw	r4,-16(fp)
  804650:	08050c00 	call	8050c0 <alt_release_fd>
    if (rval < 0)
  804654:	e0bffa17 	ldw	r2,-24(fp)
  804658:	1004403a 	cmpge	r2,r2,zero
  80465c:	1000071e 	bne	r2,zero,80467c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  804660:	08046b40 	call	8046b4 <alt_get_errno>
  804664:	e0fffa17 	ldw	r3,-24(fp)
  804668:	00c7c83a 	sub	r3,zero,r3
  80466c:	10c00015 	stw	r3,0(r2)
      return -1;
  804670:	00bfffc4 	movi	r2,-1
  804674:	e0bffd15 	stw	r2,-12(fp)
  804678:	00000806 	br	80469c <close+0xe4>
    }
    return 0;
  80467c:	e03ffd15 	stw	zero,-12(fp)
  804680:	00000606 	br	80469c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804684:	08046b40 	call	8046b4 <alt_get_errno>
  804688:	1007883a 	mov	r3,r2
  80468c:	00801444 	movi	r2,81
  804690:	18800015 	stw	r2,0(r3)
    return -1;
  804694:	00bfffc4 	movi	r2,-1
  804698:	e0bffd15 	stw	r2,-12(fp)
  80469c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8046a0:	e037883a 	mov	sp,fp
  8046a4:	dfc00117 	ldw	ra,4(sp)
  8046a8:	df000017 	ldw	fp,0(sp)
  8046ac:	dec00204 	addi	sp,sp,8
  8046b0:	f800283a 	ret

008046b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8046b4:	defffd04 	addi	sp,sp,-12
  8046b8:	dfc00215 	stw	ra,8(sp)
  8046bc:	df000115 	stw	fp,4(sp)
  8046c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8046c4:	00802074 	movhi	r2,129
  8046c8:	10aa8304 	addi	r2,r2,-22004
  8046cc:	10800017 	ldw	r2,0(r2)
  8046d0:	1005003a 	cmpeq	r2,r2,zero
  8046d4:	1000061e 	bne	r2,zero,8046f0 <alt_get_errno+0x3c>
  8046d8:	00802074 	movhi	r2,129
  8046dc:	10aa8304 	addi	r2,r2,-22004
  8046e0:	10800017 	ldw	r2,0(r2)
  8046e4:	103ee83a 	callr	r2
  8046e8:	e0bfff15 	stw	r2,-4(fp)
  8046ec:	00000306 	br	8046fc <alt_get_errno+0x48>
  8046f0:	00802074 	movhi	r2,129
  8046f4:	10b1b304 	addi	r2,r2,-14644
  8046f8:	e0bfff15 	stw	r2,-4(fp)
  8046fc:	e0bfff17 	ldw	r2,-4(fp)
}
  804700:	e037883a 	mov	sp,fp
  804704:	dfc00117 	ldw	ra,4(sp)
  804708:	df000017 	ldw	fp,0(sp)
  80470c:	dec00204 	addi	sp,sp,8
  804710:	f800283a 	ret

00804714 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  804714:	defffc04 	addi	sp,sp,-16
  804718:	df000315 	stw	fp,12(sp)
  80471c:	df000304 	addi	fp,sp,12
  804720:	e13ffd15 	stw	r4,-12(fp)
  804724:	e17ffe15 	stw	r5,-8(fp)
  804728:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80472c:	e0bfff17 	ldw	r2,-4(fp)
}
  804730:	e037883a 	mov	sp,fp
  804734:	df000017 	ldw	fp,0(sp)
  804738:	dec00104 	addi	sp,sp,4
  80473c:	f800283a 	ret

00804740 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  804740:	defff904 	addi	sp,sp,-28
  804744:	dfc00615 	stw	ra,24(sp)
  804748:	df000515 	stw	fp,20(sp)
  80474c:	df000504 	addi	fp,sp,20
  804750:	e13ffc15 	stw	r4,-16(fp)
  804754:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804758:	e0bffc17 	ldw	r2,-16(fp)
  80475c:	1004803a 	cmplt	r2,r2,zero
  804760:	1000081e 	bne	r2,zero,804784 <fstat+0x44>
  804764:	e0bffc17 	ldw	r2,-16(fp)
  804768:	10800324 	muli	r2,r2,12
  80476c:	1007883a 	mov	r3,r2
  804770:	00802074 	movhi	r2,129
  804774:	10a58904 	addi	r2,r2,-27100
  804778:	1887883a 	add	r3,r3,r2
  80477c:	e0ffff15 	stw	r3,-4(fp)
  804780:	00000106 	br	804788 <fstat+0x48>
  804784:	e03fff15 	stw	zero,-4(fp)
  804788:	e0bfff17 	ldw	r2,-4(fp)
  80478c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804790:	e0bffb17 	ldw	r2,-20(fp)
  804794:	1005003a 	cmpeq	r2,r2,zero
  804798:	1000121e 	bne	r2,zero,8047e4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80479c:	e0bffb17 	ldw	r2,-20(fp)
  8047a0:	10800017 	ldw	r2,0(r2)
  8047a4:	10800817 	ldw	r2,32(r2)
  8047a8:	1005003a 	cmpeq	r2,r2,zero
  8047ac:	1000081e 	bne	r2,zero,8047d0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  8047b0:	e0bffb17 	ldw	r2,-20(fp)
  8047b4:	10800017 	ldw	r2,0(r2)
  8047b8:	10800817 	ldw	r2,32(r2)
  8047bc:	e13ffb17 	ldw	r4,-20(fp)
  8047c0:	e17ffd17 	ldw	r5,-12(fp)
  8047c4:	103ee83a 	callr	r2
  8047c8:	e0bffe15 	stw	r2,-8(fp)
  8047cc:	00000b06 	br	8047fc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  8047d0:	e0fffd17 	ldw	r3,-12(fp)
  8047d4:	00880004 	movi	r2,8192
  8047d8:	18800115 	stw	r2,4(r3)
      return 0;
  8047dc:	e03ffe15 	stw	zero,-8(fp)
  8047e0:	00000606 	br	8047fc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8047e4:	08048140 	call	804814 <alt_get_errno>
  8047e8:	1007883a 	mov	r3,r2
  8047ec:	00801444 	movi	r2,81
  8047f0:	18800015 	stw	r2,0(r3)
    return -1;
  8047f4:	00bfffc4 	movi	r2,-1
  8047f8:	e0bffe15 	stw	r2,-8(fp)
  8047fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  804800:	e037883a 	mov	sp,fp
  804804:	dfc00117 	ldw	ra,4(sp)
  804808:	df000017 	ldw	fp,0(sp)
  80480c:	dec00204 	addi	sp,sp,8
  804810:	f800283a 	ret

00804814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804814:	defffd04 	addi	sp,sp,-12
  804818:	dfc00215 	stw	ra,8(sp)
  80481c:	df000115 	stw	fp,4(sp)
  804820:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804824:	00802074 	movhi	r2,129
  804828:	10aa8304 	addi	r2,r2,-22004
  80482c:	10800017 	ldw	r2,0(r2)
  804830:	1005003a 	cmpeq	r2,r2,zero
  804834:	1000061e 	bne	r2,zero,804850 <alt_get_errno+0x3c>
  804838:	00802074 	movhi	r2,129
  80483c:	10aa8304 	addi	r2,r2,-22004
  804840:	10800017 	ldw	r2,0(r2)
  804844:	103ee83a 	callr	r2
  804848:	e0bfff15 	stw	r2,-4(fp)
  80484c:	00000306 	br	80485c <alt_get_errno+0x48>
  804850:	00802074 	movhi	r2,129
  804854:	10b1b304 	addi	r2,r2,-14644
  804858:	e0bfff15 	stw	r2,-4(fp)
  80485c:	e0bfff17 	ldw	r2,-4(fp)
}
  804860:	e037883a 	mov	sp,fp
  804864:	dfc00117 	ldw	ra,4(sp)
  804868:	df000017 	ldw	fp,0(sp)
  80486c:	dec00204 	addi	sp,sp,8
  804870:	f800283a 	ret

00804874 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  804874:	deffeb04 	addi	sp,sp,-84
  804878:	dfc01415 	stw	ra,80(sp)
  80487c:	df001315 	stw	fp,76(sp)
  804880:	df001304 	addi	fp,sp,76
  804884:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804888:	e0bffd17 	ldw	r2,-12(fp)
  80488c:	1004803a 	cmplt	r2,r2,zero
  804890:	1000081e 	bne	r2,zero,8048b4 <isatty+0x40>
  804894:	e0bffd17 	ldw	r2,-12(fp)
  804898:	10800324 	muli	r2,r2,12
  80489c:	1007883a 	mov	r3,r2
  8048a0:	00802074 	movhi	r2,129
  8048a4:	10a58904 	addi	r2,r2,-27100
  8048a8:	1887883a 	add	r3,r3,r2
  8048ac:	e0ffff15 	stw	r3,-4(fp)
  8048b0:	00000106 	br	8048b8 <isatty+0x44>
  8048b4:	e03fff15 	stw	zero,-4(fp)
  8048b8:	e0bfff17 	ldw	r2,-4(fp)
  8048bc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  8048c0:	e0bfed17 	ldw	r2,-76(fp)
  8048c4:	1005003a 	cmpeq	r2,r2,zero
  8048c8:	10000f1e 	bne	r2,zero,804908 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  8048cc:	e0bfed17 	ldw	r2,-76(fp)
  8048d0:	10800017 	ldw	r2,0(r2)
  8048d4:	10800817 	ldw	r2,32(r2)
  8048d8:	1004c03a 	cmpne	r2,r2,zero
  8048dc:	1000031e 	bne	r2,zero,8048ec <isatty+0x78>
    {
      return 1;
  8048e0:	00800044 	movi	r2,1
  8048e4:	e0bffe15 	stw	r2,-8(fp)
  8048e8:	00000c06 	br	80491c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  8048ec:	e17fee04 	addi	r5,fp,-72
  8048f0:	e13ffd17 	ldw	r4,-12(fp)
  8048f4:	08047400 	call	804740 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  8048f8:	e0bfef17 	ldw	r2,-68(fp)
  8048fc:	10880020 	cmpeqi	r2,r2,8192
  804900:	e0bffe15 	stw	r2,-8(fp)
  804904:	00000506 	br	80491c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804908:	08049340 	call	804934 <alt_get_errno>
  80490c:	1007883a 	mov	r3,r2
  804910:	00801444 	movi	r2,81
  804914:	18800015 	stw	r2,0(r3)
    return 0;
  804918:	e03ffe15 	stw	zero,-8(fp)
  80491c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  804920:	e037883a 	mov	sp,fp
  804924:	dfc00117 	ldw	ra,4(sp)
  804928:	df000017 	ldw	fp,0(sp)
  80492c:	dec00204 	addi	sp,sp,8
  804930:	f800283a 	ret

00804934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804934:	defffd04 	addi	sp,sp,-12
  804938:	dfc00215 	stw	ra,8(sp)
  80493c:	df000115 	stw	fp,4(sp)
  804940:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804944:	00802074 	movhi	r2,129
  804948:	10aa8304 	addi	r2,r2,-22004
  80494c:	10800017 	ldw	r2,0(r2)
  804950:	1005003a 	cmpeq	r2,r2,zero
  804954:	1000061e 	bne	r2,zero,804970 <alt_get_errno+0x3c>
  804958:	00802074 	movhi	r2,129
  80495c:	10aa8304 	addi	r2,r2,-22004
  804960:	10800017 	ldw	r2,0(r2)
  804964:	103ee83a 	callr	r2
  804968:	e0bfff15 	stw	r2,-4(fp)
  80496c:	00000306 	br	80497c <alt_get_errno+0x48>
  804970:	00802074 	movhi	r2,129
  804974:	10b1b304 	addi	r2,r2,-14644
  804978:	e0bfff15 	stw	r2,-4(fp)
  80497c:	e0bfff17 	ldw	r2,-4(fp)
}
  804980:	e037883a 	mov	sp,fp
  804984:	dfc00117 	ldw	ra,4(sp)
  804988:	df000017 	ldw	fp,0(sp)
  80498c:	dec00204 	addi	sp,sp,8
  804990:	f800283a 	ret

00804994 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804994:	defffe04 	addi	sp,sp,-8
  804998:	dfc00115 	stw	ra,4(sp)
  80499c:	df000015 	stw	fp,0(sp)
  8049a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8049a4:	01002074 	movhi	r4,129
  8049a8:	212a8a04 	addi	r4,r4,-21976
  8049ac:	01402074 	movhi	r5,129
  8049b0:	29637d04 	addi	r5,r5,-29196
  8049b4:	01802074 	movhi	r6,129
  8049b8:	31aa8a04 	addi	r6,r6,-21976
  8049bc:	0804a140 	call	804a14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8049c0:	01002034 	movhi	r4,128
  8049c4:	21000804 	addi	r4,r4,32
  8049c8:	01402034 	movhi	r5,128
  8049cc:	29400804 	addi	r5,r5,32
  8049d0:	01802034 	movhi	r6,128
  8049d4:	31806d04 	addi	r6,r6,436
  8049d8:	0804a140 	call	804a14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8049dc:	01002074 	movhi	r4,129
  8049e0:	2122b904 	addi	r4,r4,-29980
  8049e4:	01402074 	movhi	r5,129
  8049e8:	2962b904 	addi	r5,r5,-29980
  8049ec:	01802074 	movhi	r6,129
  8049f0:	31a37d04 	addi	r6,r6,-29196
  8049f4:	0804a140 	call	804a14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8049f8:	0807a9c0 	call	807a9c <alt_dcache_flush_all>
  alt_icache_flush_all();
  8049fc:	0807f280 	call	807f28 <alt_icache_flush_all>
}
  804a00:	e037883a 	mov	sp,fp
  804a04:	dfc00117 	ldw	ra,4(sp)
  804a08:	df000017 	ldw	fp,0(sp)
  804a0c:	dec00204 	addi	sp,sp,8
  804a10:	f800283a 	ret

00804a14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  804a14:	defffc04 	addi	sp,sp,-16
  804a18:	df000315 	stw	fp,12(sp)
  804a1c:	df000304 	addi	fp,sp,12
  804a20:	e13ffd15 	stw	r4,-12(fp)
  804a24:	e17ffe15 	stw	r5,-8(fp)
  804a28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  804a2c:	e0fffe17 	ldw	r3,-8(fp)
  804a30:	e0bffd17 	ldw	r2,-12(fp)
  804a34:	18800e26 	beq	r3,r2,804a70 <alt_load_section+0x5c>
  {
    while( to != end )
  804a38:	00000a06 	br	804a64 <alt_load_section+0x50>
    {
      *to++ = *from++;
  804a3c:	e0bffd17 	ldw	r2,-12(fp)
  804a40:	10c00017 	ldw	r3,0(r2)
  804a44:	e0bffe17 	ldw	r2,-8(fp)
  804a48:	10c00015 	stw	r3,0(r2)
  804a4c:	e0bffe17 	ldw	r2,-8(fp)
  804a50:	10800104 	addi	r2,r2,4
  804a54:	e0bffe15 	stw	r2,-8(fp)
  804a58:	e0bffd17 	ldw	r2,-12(fp)
  804a5c:	10800104 	addi	r2,r2,4
  804a60:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  804a64:	e0fffe17 	ldw	r3,-8(fp)
  804a68:	e0bfff17 	ldw	r2,-4(fp)
  804a6c:	18bff31e 	bne	r3,r2,804a3c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  804a70:	e037883a 	mov	sp,fp
  804a74:	df000017 	ldw	fp,0(sp)
  804a78:	dec00104 	addi	sp,sp,4
  804a7c:	f800283a 	ret

00804a80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  804a80:	defff804 	addi	sp,sp,-32
  804a84:	dfc00715 	stw	ra,28(sp)
  804a88:	df000615 	stw	fp,24(sp)
  804a8c:	df000604 	addi	fp,sp,24
  804a90:	e13ffc15 	stw	r4,-16(fp)
  804a94:	e17ffd15 	stw	r5,-12(fp)
  804a98:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  804a9c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804aa0:	e0bffc17 	ldw	r2,-16(fp)
  804aa4:	1004803a 	cmplt	r2,r2,zero
  804aa8:	1000081e 	bne	r2,zero,804acc <lseek+0x4c>
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10800324 	muli	r2,r2,12
  804ab4:	1007883a 	mov	r3,r2
  804ab8:	00802074 	movhi	r2,129
  804abc:	10a58904 	addi	r2,r2,-27100
  804ac0:	1887883a 	add	r3,r3,r2
  804ac4:	e0ffff15 	stw	r3,-4(fp)
  804ac8:	00000106 	br	804ad0 <lseek+0x50>
  804acc:	e03fff15 	stw	zero,-4(fp)
  804ad0:	e0bfff17 	ldw	r2,-4(fp)
  804ad4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  804ad8:	e0bffb17 	ldw	r2,-20(fp)
  804adc:	1005003a 	cmpeq	r2,r2,zero
  804ae0:	1000111e 	bne	r2,zero,804b28 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  804ae4:	e0bffb17 	ldw	r2,-20(fp)
  804ae8:	10800017 	ldw	r2,0(r2)
  804aec:	10800717 	ldw	r2,28(r2)
  804af0:	1005003a 	cmpeq	r2,r2,zero
  804af4:	1000091e 	bne	r2,zero,804b1c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  804af8:	e0bffb17 	ldw	r2,-20(fp)
  804afc:	10800017 	ldw	r2,0(r2)
  804b00:	10800717 	ldw	r2,28(r2)
  804b04:	e13ffb17 	ldw	r4,-20(fp)
  804b08:	e17ffd17 	ldw	r5,-12(fp)
  804b0c:	e1bffe17 	ldw	r6,-8(fp)
  804b10:	103ee83a 	callr	r2
  804b14:	e0bffa15 	stw	r2,-24(fp)
  804b18:	00000506 	br	804b30 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  804b1c:	00bfde84 	movi	r2,-134
  804b20:	e0bffa15 	stw	r2,-24(fp)
  804b24:	00000206 	br	804b30 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  804b28:	00bfebc4 	movi	r2,-81
  804b2c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  804b30:	e0bffa17 	ldw	r2,-24(fp)
  804b34:	1004403a 	cmpge	r2,r2,zero
  804b38:	1000071e 	bne	r2,zero,804b58 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  804b3c:	0804b700 	call	804b70 <alt_get_errno>
  804b40:	1007883a 	mov	r3,r2
  804b44:	e0bffa17 	ldw	r2,-24(fp)
  804b48:	0085c83a 	sub	r2,zero,r2
  804b4c:	18800015 	stw	r2,0(r3)
    rc = -1;
  804b50:	00bfffc4 	movi	r2,-1
  804b54:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  804b58:	e0bffa17 	ldw	r2,-24(fp)
}
  804b5c:	e037883a 	mov	sp,fp
  804b60:	dfc00117 	ldw	ra,4(sp)
  804b64:	df000017 	ldw	fp,0(sp)
  804b68:	dec00204 	addi	sp,sp,8
  804b6c:	f800283a 	ret

00804b70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804b70:	defffd04 	addi	sp,sp,-12
  804b74:	dfc00215 	stw	ra,8(sp)
  804b78:	df000115 	stw	fp,4(sp)
  804b7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804b80:	00802074 	movhi	r2,129
  804b84:	10aa8304 	addi	r2,r2,-22004
  804b88:	10800017 	ldw	r2,0(r2)
  804b8c:	1005003a 	cmpeq	r2,r2,zero
  804b90:	1000061e 	bne	r2,zero,804bac <alt_get_errno+0x3c>
  804b94:	00802074 	movhi	r2,129
  804b98:	10aa8304 	addi	r2,r2,-22004
  804b9c:	10800017 	ldw	r2,0(r2)
  804ba0:	103ee83a 	callr	r2
  804ba4:	e0bfff15 	stw	r2,-4(fp)
  804ba8:	00000306 	br	804bb8 <alt_get_errno+0x48>
  804bac:	00802074 	movhi	r2,129
  804bb0:	10b1b304 	addi	r2,r2,-14644
  804bb4:	e0bfff15 	stw	r2,-4(fp)
  804bb8:	e0bfff17 	ldw	r2,-4(fp)
}
  804bbc:	e037883a 	mov	sp,fp
  804bc0:	dfc00117 	ldw	ra,4(sp)
  804bc4:	df000017 	ldw	fp,0(sp)
  804bc8:	dec00204 	addi	sp,sp,8
  804bcc:	f800283a 	ret

00804bd0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804bd0:	defffd04 	addi	sp,sp,-12
  804bd4:	dfc00215 	stw	ra,8(sp)
  804bd8:	df000115 	stw	fp,4(sp)
  804bdc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804be0:	0009883a 	mov	r4,zero
  804be4:	08055000 	call	805500 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804be8:	08055340 	call	805534 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  804bec:	01002074 	movhi	r4,129
  804bf0:	2122ce04 	addi	r4,r4,-29896
  804bf4:	01402074 	movhi	r5,129
  804bf8:	2962ce04 	addi	r5,r5,-29896
  804bfc:	01802074 	movhi	r6,129
  804c00:	31a2ce04 	addi	r6,r6,-29896
  804c04:	08082e80 	call	8082e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  804c08:	0807bf40 	call	807bf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  804c0c:	01002034 	movhi	r4,128
  804c10:	211f1604 	addi	r4,r4,31832
  804c14:	080858c0 	call	80858c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  804c18:	d1273a17 	ldw	r4,-25368(gp)
  804c1c:	d1673b17 	ldw	r5,-25364(gp)
  804c20:	d1a73c17 	ldw	r6,-25360(gp)
  804c24:	08005d40 	call	8005d4 <main>
  804c28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  804c2c:	01000044 	movi	r4,1
  804c30:	08045b80 	call	8045b8 <close>
  exit (result);
  804c34:	e13fff17 	ldw	r4,-4(fp)
  804c38:	08085a00 	call	8085a0 <exit>

00804c3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  804c3c:	defffe04 	addi	sp,sp,-8
  804c40:	df000115 	stw	fp,4(sp)
  804c44:	df000104 	addi	fp,sp,4
  804c48:	e13fff15 	stw	r4,-4(fp)
}
  804c4c:	e037883a 	mov	sp,fp
  804c50:	df000017 	ldw	fp,0(sp)
  804c54:	dec00104 	addi	sp,sp,4
  804c58:	f800283a 	ret

00804c5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  804c5c:	defffe04 	addi	sp,sp,-8
  804c60:	df000115 	stw	fp,4(sp)
  804c64:	df000104 	addi	fp,sp,4
  804c68:	e13fff15 	stw	r4,-4(fp)
}
  804c6c:	e037883a 	mov	sp,fp
  804c70:	df000017 	ldw	fp,0(sp)
  804c74:	dec00104 	addi	sp,sp,4
  804c78:	f800283a 	ret

00804c7c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804c7c:	defffc04 	addi	sp,sp,-16
  804c80:	df000315 	stw	fp,12(sp)
  804c84:	df000304 	addi	fp,sp,12
  804c88:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804c8c:	e0bffe17 	ldw	r2,-8(fp)
  804c90:	10800217 	ldw	r2,8(r2)
  804c94:	10d00034 	orhi	r3,r2,16384
  804c98:	e0bffe17 	ldw	r2,-8(fp)
  804c9c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804ca0:	e03ffd15 	stw	zero,-12(fp)
  804ca4:	00002006 	br	804d28 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804ca8:	e0bffd17 	ldw	r2,-12(fp)
  804cac:	00c02074 	movhi	r3,129
  804cb0:	18e58904 	addi	r3,r3,-27100
  804cb4:	10800324 	muli	r2,r2,12
  804cb8:	10c5883a 	add	r2,r2,r3
  804cbc:	10c00017 	ldw	r3,0(r2)
  804cc0:	e0bffe17 	ldw	r2,-8(fp)
  804cc4:	10800017 	ldw	r2,0(r2)
  804cc8:	1880141e 	bne	r3,r2,804d1c <alt_file_locked+0xa0>
  804ccc:	e0bffd17 	ldw	r2,-12(fp)
  804cd0:	00c02074 	movhi	r3,129
  804cd4:	18e58904 	addi	r3,r3,-27100
  804cd8:	10800324 	muli	r2,r2,12
  804cdc:	10c5883a 	add	r2,r2,r3
  804ce0:	10800204 	addi	r2,r2,8
  804ce4:	10800017 	ldw	r2,0(r2)
  804ce8:	1004403a 	cmpge	r2,r2,zero
  804cec:	10000b1e 	bne	r2,zero,804d1c <alt_file_locked+0xa0>
  804cf0:	e0bffd17 	ldw	r2,-12(fp)
  804cf4:	10800324 	muli	r2,r2,12
  804cf8:	1007883a 	mov	r3,r2
  804cfc:	00802074 	movhi	r2,129
  804d00:	10a58904 	addi	r2,r2,-27100
  804d04:	1887883a 	add	r3,r3,r2
  804d08:	e0bffe17 	ldw	r2,-8(fp)
  804d0c:	18800326 	beq	r3,r2,804d1c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804d10:	00bffcc4 	movi	r2,-13
  804d14:	e0bfff15 	stw	r2,-4(fp)
  804d18:	00000a06 	br	804d44 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804d1c:	e0bffd17 	ldw	r2,-12(fp)
  804d20:	10800044 	addi	r2,r2,1
  804d24:	e0bffd15 	stw	r2,-12(fp)
  804d28:	00802074 	movhi	r2,129
  804d2c:	10aa8204 	addi	r2,r2,-22008
  804d30:	10800017 	ldw	r2,0(r2)
  804d34:	1007883a 	mov	r3,r2
  804d38:	e0bffd17 	ldw	r2,-12(fp)
  804d3c:	18bfda2e 	bgeu	r3,r2,804ca8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804d40:	e03fff15 	stw	zero,-4(fp)
  804d44:	e0bfff17 	ldw	r2,-4(fp)
}
  804d48:	e037883a 	mov	sp,fp
  804d4c:	df000017 	ldw	fp,0(sp)
  804d50:	dec00104 	addi	sp,sp,4
  804d54:	f800283a 	ret

00804d58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804d58:	defff404 	addi	sp,sp,-48
  804d5c:	dfc00b15 	stw	ra,44(sp)
  804d60:	df000a15 	stw	fp,40(sp)
  804d64:	df000a04 	addi	fp,sp,40
  804d68:	e13ffb15 	stw	r4,-20(fp)
  804d6c:	e17ffc15 	stw	r5,-16(fp)
  804d70:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804d74:	00bfffc4 	movi	r2,-1
  804d78:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  804d7c:	00bffb44 	movi	r2,-19
  804d80:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  804d84:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804d88:	e13ffb17 	ldw	r4,-20(fp)
  804d8c:	01402074 	movhi	r5,129
  804d90:	296a8004 	addi	r5,r5,-22016
  804d94:	0807cbc0 	call	807cbc <alt_find_dev>
  804d98:	e0bffa15 	stw	r2,-24(fp)
  804d9c:	e0bffa17 	ldw	r2,-24(fp)
  804da0:	1004c03a 	cmpne	r2,r2,zero
  804da4:	1000051e 	bne	r2,zero,804dbc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804da8:	e13ffb17 	ldw	r4,-20(fp)
  804dac:	0807d500 	call	807d50 <alt_find_file>
  804db0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  804db4:	00800044 	movi	r2,1
  804db8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804dbc:	e0bffa17 	ldw	r2,-24(fp)
  804dc0:	1005003a 	cmpeq	r2,r2,zero
  804dc4:	1000301e 	bne	r2,zero,804e88 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804dc8:	e13ffa17 	ldw	r4,-24(fp)
  804dcc:	0807e700 	call	807e70 <alt_get_fd>
  804dd0:	e0bff815 	stw	r2,-32(fp)
  804dd4:	e0bff817 	ldw	r2,-32(fp)
  804dd8:	1004403a 	cmpge	r2,r2,zero
  804ddc:	1000031e 	bne	r2,zero,804dec <open+0x94>
    {
      status = index;
  804de0:	e0bff817 	ldw	r2,-32(fp)
  804de4:	e0bff715 	stw	r2,-36(fp)
  804de8:	00002906 	br	804e90 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  804dec:	e0bff817 	ldw	r2,-32(fp)
  804df0:	10800324 	muli	r2,r2,12
  804df4:	1007883a 	mov	r3,r2
  804df8:	00802074 	movhi	r2,129
  804dfc:	10a58904 	addi	r2,r2,-27100
  804e00:	1885883a 	add	r2,r3,r2
  804e04:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  804e08:	e0fffc17 	ldw	r3,-16(fp)
  804e0c:	00900034 	movhi	r2,16384
  804e10:	10bfffc4 	addi	r2,r2,-1
  804e14:	1886703a 	and	r3,r3,r2
  804e18:	e0bff917 	ldw	r2,-28(fp)
  804e1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804e20:	e0bff617 	ldw	r2,-40(fp)
  804e24:	1004c03a 	cmpne	r2,r2,zero
  804e28:	1000061e 	bne	r2,zero,804e44 <open+0xec>
  804e2c:	e13ff917 	ldw	r4,-28(fp)
  804e30:	0804c7c0 	call	804c7c <alt_file_locked>
  804e34:	e0bff715 	stw	r2,-36(fp)
  804e38:	e0bff717 	ldw	r2,-36(fp)
  804e3c:	1004803a 	cmplt	r2,r2,zero
  804e40:	1000131e 	bne	r2,zero,804e90 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804e44:	e0bffa17 	ldw	r2,-24(fp)
  804e48:	10800317 	ldw	r2,12(r2)
  804e4c:	1005003a 	cmpeq	r2,r2,zero
  804e50:	1000091e 	bne	r2,zero,804e78 <open+0x120>
  804e54:	e0bffa17 	ldw	r2,-24(fp)
  804e58:	10800317 	ldw	r2,12(r2)
  804e5c:	e13ff917 	ldw	r4,-28(fp)
  804e60:	e17ffb17 	ldw	r5,-20(fp)
  804e64:	e1bffc17 	ldw	r6,-16(fp)
  804e68:	e1fffd17 	ldw	r7,-12(fp)
  804e6c:	103ee83a 	callr	r2
  804e70:	e0bfff15 	stw	r2,-4(fp)
  804e74:	00000106 	br	804e7c <open+0x124>
  804e78:	e03fff15 	stw	zero,-4(fp)
  804e7c:	e0bfff17 	ldw	r2,-4(fp)
  804e80:	e0bff715 	stw	r2,-36(fp)
  804e84:	00000206 	br	804e90 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  804e88:	00bffb44 	movi	r2,-19
  804e8c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804e90:	e0bff717 	ldw	r2,-36(fp)
  804e94:	1004403a 	cmpge	r2,r2,zero
  804e98:	1000091e 	bne	r2,zero,804ec0 <open+0x168>
  {
    alt_release_fd (index);  
  804e9c:	e13ff817 	ldw	r4,-32(fp)
  804ea0:	08050c00 	call	8050c0 <alt_release_fd>
    ALT_ERRNO = -status;
  804ea4:	0804ee00 	call	804ee0 <alt_get_errno>
  804ea8:	e0fff717 	ldw	r3,-36(fp)
  804eac:	00c7c83a 	sub	r3,zero,r3
  804eb0:	10c00015 	stw	r3,0(r2)
    return -1;
  804eb4:	00bfffc4 	movi	r2,-1
  804eb8:	e0bffe15 	stw	r2,-8(fp)
  804ebc:	00000206 	br	804ec8 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  804ec0:	e0bff817 	ldw	r2,-32(fp)
  804ec4:	e0bffe15 	stw	r2,-8(fp)
  804ec8:	e0bffe17 	ldw	r2,-8(fp)
}
  804ecc:	e037883a 	mov	sp,fp
  804ed0:	dfc00117 	ldw	ra,4(sp)
  804ed4:	df000017 	ldw	fp,0(sp)
  804ed8:	dec00204 	addi	sp,sp,8
  804edc:	f800283a 	ret

00804ee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804ee0:	defffd04 	addi	sp,sp,-12
  804ee4:	dfc00215 	stw	ra,8(sp)
  804ee8:	df000115 	stw	fp,4(sp)
  804eec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804ef0:	00802074 	movhi	r2,129
  804ef4:	10aa8304 	addi	r2,r2,-22004
  804ef8:	10800017 	ldw	r2,0(r2)
  804efc:	1005003a 	cmpeq	r2,r2,zero
  804f00:	1000061e 	bne	r2,zero,804f1c <alt_get_errno+0x3c>
  804f04:	00802074 	movhi	r2,129
  804f08:	10aa8304 	addi	r2,r2,-22004
  804f0c:	10800017 	ldw	r2,0(r2)
  804f10:	103ee83a 	callr	r2
  804f14:	e0bfff15 	stw	r2,-4(fp)
  804f18:	00000306 	br	804f28 <alt_get_errno+0x48>
  804f1c:	00802074 	movhi	r2,129
  804f20:	10b1b304 	addi	r2,r2,-14644
  804f24:	e0bfff15 	stw	r2,-4(fp)
  804f28:	e0bfff17 	ldw	r2,-4(fp)
}
  804f2c:	e037883a 	mov	sp,fp
  804f30:	dfc00117 	ldw	ra,4(sp)
  804f34:	df000017 	ldw	fp,0(sp)
  804f38:	dec00204 	addi	sp,sp,8
  804f3c:	f800283a 	ret

00804f40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  804f40:	defff704 	addi	sp,sp,-36
  804f44:	dfc00815 	stw	ra,32(sp)
  804f48:	df000715 	stw	fp,28(sp)
  804f4c:	df000704 	addi	fp,sp,28
  804f50:	e13ffb15 	stw	r4,-20(fp)
  804f54:	e17ffc15 	stw	r5,-16(fp)
  804f58:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804f5c:	e0bffb17 	ldw	r2,-20(fp)
  804f60:	1004803a 	cmplt	r2,r2,zero
  804f64:	1000081e 	bne	r2,zero,804f88 <read+0x48>
  804f68:	e0bffb17 	ldw	r2,-20(fp)
  804f6c:	10800324 	muli	r2,r2,12
  804f70:	1007883a 	mov	r3,r2
  804f74:	00802074 	movhi	r2,129
  804f78:	10a58904 	addi	r2,r2,-27100
  804f7c:	1887883a 	add	r3,r3,r2
  804f80:	e0ffff15 	stw	r3,-4(fp)
  804f84:	00000106 	br	804f8c <read+0x4c>
  804f88:	e03fff15 	stw	zero,-4(fp)
  804f8c:	e0bfff17 	ldw	r2,-4(fp)
  804f90:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  804f94:	e0bffa17 	ldw	r2,-24(fp)
  804f98:	1005003a 	cmpeq	r2,r2,zero
  804f9c:	1000241e 	bne	r2,zero,805030 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  804fa0:	e0bffa17 	ldw	r2,-24(fp)
  804fa4:	10800217 	ldw	r2,8(r2)
  804fa8:	108000cc 	andi	r2,r2,3
  804fac:	10800060 	cmpeqi	r2,r2,1
  804fb0:	10001a1e 	bne	r2,zero,80501c <read+0xdc>
  804fb4:	e0bffa17 	ldw	r2,-24(fp)
  804fb8:	10800017 	ldw	r2,0(r2)
  804fbc:	10800517 	ldw	r2,20(r2)
  804fc0:	1005003a 	cmpeq	r2,r2,zero
  804fc4:	1000151e 	bne	r2,zero,80501c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  804fc8:	e0bffa17 	ldw	r2,-24(fp)
  804fcc:	10800017 	ldw	r2,0(r2)
  804fd0:	10800517 	ldw	r2,20(r2)
  804fd4:	e17ffc17 	ldw	r5,-16(fp)
  804fd8:	e1bffd17 	ldw	r6,-12(fp)
  804fdc:	e13ffa17 	ldw	r4,-24(fp)
  804fe0:	103ee83a 	callr	r2
  804fe4:	e0bff915 	stw	r2,-28(fp)
  804fe8:	e0bff917 	ldw	r2,-28(fp)
  804fec:	1004403a 	cmpge	r2,r2,zero
  804ff0:	1000071e 	bne	r2,zero,805010 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  804ff4:	08050600 	call	805060 <alt_get_errno>
  804ff8:	e0fff917 	ldw	r3,-28(fp)
  804ffc:	00c7c83a 	sub	r3,zero,r3
  805000:	10c00015 	stw	r3,0(r2)
          return -1;
  805004:	00bfffc4 	movi	r2,-1
  805008:	e0bffe15 	stw	r2,-8(fp)
  80500c:	00000e06 	br	805048 <read+0x108>
        }
        return rval;
  805010:	e0bff917 	ldw	r2,-28(fp)
  805014:	e0bffe15 	stw	r2,-8(fp)
  805018:	00000b06 	br	805048 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80501c:	08050600 	call	805060 <alt_get_errno>
  805020:	1007883a 	mov	r3,r2
  805024:	00800344 	movi	r2,13
  805028:	18800015 	stw	r2,0(r3)
  80502c:	00000406 	br	805040 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  805030:	08050600 	call	805060 <alt_get_errno>
  805034:	1007883a 	mov	r3,r2
  805038:	00801444 	movi	r2,81
  80503c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  805040:	00bfffc4 	movi	r2,-1
  805044:	e0bffe15 	stw	r2,-8(fp)
  805048:	e0bffe17 	ldw	r2,-8(fp)
}
  80504c:	e037883a 	mov	sp,fp
  805050:	dfc00117 	ldw	ra,4(sp)
  805054:	df000017 	ldw	fp,0(sp)
  805058:	dec00204 	addi	sp,sp,8
  80505c:	f800283a 	ret

00805060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805060:	defffd04 	addi	sp,sp,-12
  805064:	dfc00215 	stw	ra,8(sp)
  805068:	df000115 	stw	fp,4(sp)
  80506c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805070:	00802074 	movhi	r2,129
  805074:	10aa8304 	addi	r2,r2,-22004
  805078:	10800017 	ldw	r2,0(r2)
  80507c:	1005003a 	cmpeq	r2,r2,zero
  805080:	1000061e 	bne	r2,zero,80509c <alt_get_errno+0x3c>
  805084:	00802074 	movhi	r2,129
  805088:	10aa8304 	addi	r2,r2,-22004
  80508c:	10800017 	ldw	r2,0(r2)
  805090:	103ee83a 	callr	r2
  805094:	e0bfff15 	stw	r2,-4(fp)
  805098:	00000306 	br	8050a8 <alt_get_errno+0x48>
  80509c:	00802074 	movhi	r2,129
  8050a0:	10b1b304 	addi	r2,r2,-14644
  8050a4:	e0bfff15 	stw	r2,-4(fp)
  8050a8:	e0bfff17 	ldw	r2,-4(fp)
}
  8050ac:	e037883a 	mov	sp,fp
  8050b0:	dfc00117 	ldw	ra,4(sp)
  8050b4:	df000017 	ldw	fp,0(sp)
  8050b8:	dec00204 	addi	sp,sp,8
  8050bc:	f800283a 	ret

008050c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8050c0:	defffe04 	addi	sp,sp,-8
  8050c4:	df000115 	stw	fp,4(sp)
  8050c8:	df000104 	addi	fp,sp,4
  8050cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8050d0:	e0bfff17 	ldw	r2,-4(fp)
  8050d4:	108000d0 	cmplti	r2,r2,3
  8050d8:	10000d1e 	bne	r2,zero,805110 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8050dc:	e0bfff17 	ldw	r2,-4(fp)
  8050e0:	00c02074 	movhi	r3,129
  8050e4:	18e58904 	addi	r3,r3,-27100
  8050e8:	10800324 	muli	r2,r2,12
  8050ec:	10c5883a 	add	r2,r2,r3
  8050f0:	10800204 	addi	r2,r2,8
  8050f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8050f8:	e0bfff17 	ldw	r2,-4(fp)
  8050fc:	00c02074 	movhi	r3,129
  805100:	18e58904 	addi	r3,r3,-27100
  805104:	10800324 	muli	r2,r2,12
  805108:	10c5883a 	add	r2,r2,r3
  80510c:	10000015 	stw	zero,0(r2)
  }
}
  805110:	e037883a 	mov	sp,fp
  805114:	df000017 	ldw	fp,0(sp)
  805118:	dec00104 	addi	sp,sp,4
  80511c:	f800283a 	ret

00805120 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  805120:	defff804 	addi	sp,sp,-32
  805124:	df000715 	stw	fp,28(sp)
  805128:	df000704 	addi	fp,sp,28
  80512c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805130:	0005303a 	rdctl	r2,status
  805134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805138:	e0fffb17 	ldw	r3,-20(fp)
  80513c:	00bfff84 	movi	r2,-2
  805140:	1884703a 	and	r2,r3,r2
  805144:	1001703a 	wrctl	status,r2
  
  return context;
  805148:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80514c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  805150:	d0a00a17 	ldw	r2,-32728(gp)
  805154:	10c000c4 	addi	r3,r2,3
  805158:	00bfff04 	movi	r2,-4
  80515c:	1884703a 	and	r2,r3,r2
  805160:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  805164:	d0e00a17 	ldw	r3,-32728(gp)
  805168:	e0bffe17 	ldw	r2,-8(fp)
  80516c:	1887883a 	add	r3,r3,r2
  805170:	00804034 	movhi	r2,256
  805174:	10800004 	addi	r2,r2,0
  805178:	10c0072e 	bgeu	r2,r3,805198 <sbrk+0x78>
  80517c:	e0bffd17 	ldw	r2,-12(fp)
  805180:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805184:	e0bffa17 	ldw	r2,-24(fp)
  805188:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80518c:	00bfffc4 	movi	r2,-1
  805190:	e0bfff15 	stw	r2,-4(fp)
  805194:	00000c06 	br	8051c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  805198:	d0a00a17 	ldw	r2,-32728(gp)
  80519c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  8051a0:	d0e00a17 	ldw	r3,-32728(gp)
  8051a4:	e0bffe17 	ldw	r2,-8(fp)
  8051a8:	1885883a 	add	r2,r3,r2
  8051ac:	d0a00a15 	stw	r2,-32728(gp)
  8051b0:	e0bffd17 	ldw	r2,-12(fp)
  8051b4:	e0bff915 	stw	r2,-28(fp)
  8051b8:	e0bff917 	ldw	r2,-28(fp)
  8051bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8051c0:	e0bffc17 	ldw	r2,-16(fp)
  8051c4:	e0bfff15 	stw	r2,-4(fp)
  8051c8:	e0bfff17 	ldw	r2,-4(fp)
} 
  8051cc:	e037883a 	mov	sp,fp
  8051d0:	df000017 	ldw	fp,0(sp)
  8051d4:	dec00104 	addi	sp,sp,4
  8051d8:	f800283a 	ret

008051dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8051dc:	defffa04 	addi	sp,sp,-24
  8051e0:	df000515 	stw	fp,20(sp)
  8051e4:	df000504 	addi	fp,sp,20
  8051e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8051ec:	0005303a 	rdctl	r2,status
  8051f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8051f4:	e0fffd17 	ldw	r3,-12(fp)
  8051f8:	00bfff84 	movi	r2,-2
  8051fc:	1884703a 	and	r2,r3,r2
  805200:	1001703a 	wrctl	status,r2
  
  return context;
  805204:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805208:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80520c:	e0bfff17 	ldw	r2,-4(fp)
  805210:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805214:	e0bffc17 	ldw	r2,-16(fp)
  805218:	10c00017 	ldw	r3,0(r2)
  80521c:	e0bffc17 	ldw	r2,-16(fp)
  805220:	10800117 	ldw	r2,4(r2)
  805224:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  805228:	e0bffc17 	ldw	r2,-16(fp)
  80522c:	10c00117 	ldw	r3,4(r2)
  805230:	e0bffc17 	ldw	r2,-16(fp)
  805234:	10800017 	ldw	r2,0(r2)
  805238:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80523c:	e0fffc17 	ldw	r3,-16(fp)
  805240:	e0bffc17 	ldw	r2,-16(fp)
  805244:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  805248:	e0fffc17 	ldw	r3,-16(fp)
  80524c:	e0bffc17 	ldw	r2,-16(fp)
  805250:	18800015 	stw	r2,0(r3)
  805254:	e0bffe17 	ldw	r2,-8(fp)
  805258:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80525c:	e0bffb17 	ldw	r2,-20(fp)
  805260:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  805264:	e037883a 	mov	sp,fp
  805268:	df000017 	ldw	fp,0(sp)
  80526c:	dec00104 	addi	sp,sp,4
  805270:	f800283a 	ret

00805274 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  805274:	defffb04 	addi	sp,sp,-20
  805278:	dfc00415 	stw	ra,16(sp)
  80527c:	df000315 	stw	fp,12(sp)
  805280:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  805284:	d0a00b17 	ldw	r2,-32724(gp)
  805288:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80528c:	d0a73e17 	ldw	r2,-25352(gp)
  805290:	10800044 	addi	r2,r2,1
  805294:	d0a73e15 	stw	r2,-25352(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805298:	00003106 	br	805360 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80529c:	e0bffe17 	ldw	r2,-8(fp)
  8052a0:	10800017 	ldw	r2,0(r2)
  8052a4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8052a8:	e0bffe17 	ldw	r2,-8(fp)
  8052ac:	10800403 	ldbu	r2,16(r2)
  8052b0:	10803fcc 	andi	r2,r2,255
  8052b4:	1005003a 	cmpeq	r2,r2,zero
  8052b8:	1000051e 	bne	r2,zero,8052d0 <alt_tick+0x5c>
  8052bc:	d0a73e17 	ldw	r2,-25352(gp)
  8052c0:	1004c03a 	cmpne	r2,r2,zero
  8052c4:	1000021e 	bne	r2,zero,8052d0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  8052c8:	e0bffe17 	ldw	r2,-8(fp)
  8052cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8052d0:	e0bffe17 	ldw	r2,-8(fp)
  8052d4:	10c00217 	ldw	r3,8(r2)
  8052d8:	d0a73e17 	ldw	r2,-25352(gp)
  8052dc:	10c01e36 	bltu	r2,r3,805358 <alt_tick+0xe4>
  8052e0:	e0bffe17 	ldw	r2,-8(fp)
  8052e4:	10800403 	ldbu	r2,16(r2)
  8052e8:	10803fcc 	andi	r2,r2,255
  8052ec:	1004c03a 	cmpne	r2,r2,zero
  8052f0:	1000191e 	bne	r2,zero,805358 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  8052f4:	e0bffe17 	ldw	r2,-8(fp)
  8052f8:	10c00317 	ldw	r3,12(r2)
  8052fc:	e0bffe17 	ldw	r2,-8(fp)
  805300:	11000517 	ldw	r4,20(r2)
  805304:	183ee83a 	callr	r3
  805308:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80530c:	e0bffd17 	ldw	r2,-12(fp)
  805310:	1004c03a 	cmpne	r2,r2,zero
  805314:	1000031e 	bne	r2,zero,805324 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  805318:	e13ffe17 	ldw	r4,-8(fp)
  80531c:	08051dc0 	call	8051dc <alt_alarm_stop>
  805320:	00000d06 	br	805358 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  805324:	e0bffe17 	ldw	r2,-8(fp)
  805328:	10c00217 	ldw	r3,8(r2)
  80532c:	e0bffd17 	ldw	r2,-12(fp)
  805330:	1887883a 	add	r3,r3,r2
  805334:	e0bffe17 	ldw	r2,-8(fp)
  805338:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80533c:	e0bffe17 	ldw	r2,-8(fp)
  805340:	10c00217 	ldw	r3,8(r2)
  805344:	d0a73e17 	ldw	r2,-25352(gp)
  805348:	1880032e 	bgeu	r3,r2,805358 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80534c:	e0fffe17 	ldw	r3,-8(fp)
  805350:	00800044 	movi	r2,1
  805354:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  805358:	e0bfff17 	ldw	r2,-4(fp)
  80535c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  805360:	d0e00b04 	addi	r3,gp,-32724
  805364:	e0bffe17 	ldw	r2,-8(fp)
  805368:	10ffcc1e 	bne	r2,r3,80529c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80536c:	e037883a 	mov	sp,fp
  805370:	dfc00117 	ldw	ra,4(sp)
  805374:	df000017 	ldw	fp,0(sp)
  805378:	dec00204 	addi	sp,sp,8
  80537c:	f800283a 	ret

00805380 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  805380:	defff704 	addi	sp,sp,-36
  805384:	dfc00815 	stw	ra,32(sp)
  805388:	df000715 	stw	fp,28(sp)
  80538c:	df000704 	addi	fp,sp,28
  805390:	e13ffb15 	stw	r4,-20(fp)
  805394:	e17ffc15 	stw	r5,-16(fp)
  805398:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80539c:	e0bffb17 	ldw	r2,-20(fp)
  8053a0:	1004803a 	cmplt	r2,r2,zero
  8053a4:	1000081e 	bne	r2,zero,8053c8 <write+0x48>
  8053a8:	e0bffb17 	ldw	r2,-20(fp)
  8053ac:	10800324 	muli	r2,r2,12
  8053b0:	1007883a 	mov	r3,r2
  8053b4:	00802074 	movhi	r2,129
  8053b8:	10a58904 	addi	r2,r2,-27100
  8053bc:	1887883a 	add	r3,r3,r2
  8053c0:	e0ffff15 	stw	r3,-4(fp)
  8053c4:	00000106 	br	8053cc <write+0x4c>
  8053c8:	e03fff15 	stw	zero,-4(fp)
  8053cc:	e0bfff17 	ldw	r2,-4(fp)
  8053d0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  8053d4:	e0bffa17 	ldw	r2,-24(fp)
  8053d8:	1005003a 	cmpeq	r2,r2,zero
  8053dc:	1000241e 	bne	r2,zero,805470 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8053e0:	e0bffa17 	ldw	r2,-24(fp)
  8053e4:	10800217 	ldw	r2,8(r2)
  8053e8:	108000cc 	andi	r2,r2,3
  8053ec:	1005003a 	cmpeq	r2,r2,zero
  8053f0:	10001a1e 	bne	r2,zero,80545c <write+0xdc>
  8053f4:	e0bffa17 	ldw	r2,-24(fp)
  8053f8:	10800017 	ldw	r2,0(r2)
  8053fc:	10800617 	ldw	r2,24(r2)
  805400:	1005003a 	cmpeq	r2,r2,zero
  805404:	1000151e 	bne	r2,zero,80545c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  805408:	e0bffa17 	ldw	r2,-24(fp)
  80540c:	10800017 	ldw	r2,0(r2)
  805410:	10800617 	ldw	r2,24(r2)
  805414:	e17ffc17 	ldw	r5,-16(fp)
  805418:	e1bffd17 	ldw	r6,-12(fp)
  80541c:	e13ffa17 	ldw	r4,-24(fp)
  805420:	103ee83a 	callr	r2
  805424:	e0bff915 	stw	r2,-28(fp)
  805428:	e0bff917 	ldw	r2,-28(fp)
  80542c:	1004403a 	cmpge	r2,r2,zero
  805430:	1000071e 	bne	r2,zero,805450 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  805434:	08054a00 	call	8054a0 <alt_get_errno>
  805438:	e0fff917 	ldw	r3,-28(fp)
  80543c:	00c7c83a 	sub	r3,zero,r3
  805440:	10c00015 	stw	r3,0(r2)
        return -1;
  805444:	00bfffc4 	movi	r2,-1
  805448:	e0bffe15 	stw	r2,-8(fp)
  80544c:	00000e06 	br	805488 <write+0x108>
      }
      return rval;
  805450:	e0bff917 	ldw	r2,-28(fp)
  805454:	e0bffe15 	stw	r2,-8(fp)
  805458:	00000b06 	br	805488 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80545c:	08054a00 	call	8054a0 <alt_get_errno>
  805460:	1007883a 	mov	r3,r2
  805464:	00800344 	movi	r2,13
  805468:	18800015 	stw	r2,0(r3)
  80546c:	00000406 	br	805480 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  805470:	08054a00 	call	8054a0 <alt_get_errno>
  805474:	1007883a 	mov	r3,r2
  805478:	00801444 	movi	r2,81
  80547c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  805480:	00bfffc4 	movi	r2,-1
  805484:	e0bffe15 	stw	r2,-8(fp)
  805488:	e0bffe17 	ldw	r2,-8(fp)
}
  80548c:	e037883a 	mov	sp,fp
  805490:	dfc00117 	ldw	ra,4(sp)
  805494:	df000017 	ldw	fp,0(sp)
  805498:	dec00204 	addi	sp,sp,8
  80549c:	f800283a 	ret

008054a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8054a0:	defffd04 	addi	sp,sp,-12
  8054a4:	dfc00215 	stw	ra,8(sp)
  8054a8:	df000115 	stw	fp,4(sp)
  8054ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8054b0:	00802074 	movhi	r2,129
  8054b4:	10aa8304 	addi	r2,r2,-22004
  8054b8:	10800017 	ldw	r2,0(r2)
  8054bc:	1005003a 	cmpeq	r2,r2,zero
  8054c0:	1000061e 	bne	r2,zero,8054dc <alt_get_errno+0x3c>
  8054c4:	00802074 	movhi	r2,129
  8054c8:	10aa8304 	addi	r2,r2,-22004
  8054cc:	10800017 	ldw	r2,0(r2)
  8054d0:	103ee83a 	callr	r2
  8054d4:	e0bfff15 	stw	r2,-4(fp)
  8054d8:	00000306 	br	8054e8 <alt_get_errno+0x48>
  8054dc:	00802074 	movhi	r2,129
  8054e0:	10b1b304 	addi	r2,r2,-14644
  8054e4:	e0bfff15 	stw	r2,-4(fp)
  8054e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8054ec:	e037883a 	mov	sp,fp
  8054f0:	dfc00117 	ldw	ra,4(sp)
  8054f4:	df000017 	ldw	fp,0(sp)
  8054f8:	dec00204 	addi	sp,sp,8
  8054fc:	f800283a 	ret

00805500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  805500:	defffd04 	addi	sp,sp,-12
  805504:	dfc00215 	stw	ra,8(sp)
  805508:	df000115 	stw	fp,4(sp)
  80550c:	df000104 	addi	fp,sp,4
  805510:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  805514:	08083900 	call	808390 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  805518:	00800044 	movi	r2,1
  80551c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  805520:	e037883a 	mov	sp,fp
  805524:	dfc00117 	ldw	ra,4(sp)
  805528:	df000017 	ldw	fp,0(sp)
  80552c:	dec00204 	addi	sp,sp,8
  805530:	f800283a 	ret

00805534 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  805534:	defffe04 	addi	sp,sp,-8
  805538:	dfc00115 	stw	ra,4(sp)
  80553c:	df000015 	stw	fp,0(sp)
  805540:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  805544:	01004074 	movhi	r4,257
  805548:	21040804 	addi	r4,r4,4128
  80554c:	000b883a 	mov	r5,zero
  805550:	01800084 	movi	r6,2
  805554:	01c0fa04 	movi	r7,1000
  805558:	080705c0 	call	80705c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80555c:	01002074 	movhi	r4,129
  805560:	2125f304 	addi	r4,r4,-26676
  805564:	000b883a 	mov	r5,zero
  805568:	01800044 	movi	r6,1
  80556c:	08057480 	call	805748 <altera_avalon_jtag_uart_init>
  805570:	01002074 	movhi	r4,129
  805574:	2125e904 	addi	r4,r4,-26716
  805578:	08055c80 	call	8055c8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80557c:	01002074 	movhi	r4,129
  805580:	212a0b04 	addi	r4,r4,-22484
  805584:	0806e580 	call	806e58 <altera_avalon_lcd_16207_init>
  805588:	01002074 	movhi	r4,129
  80558c:	212a0104 	addi	r4,r4,-22524
  805590:	08055c80 	call	8055c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  805594:	01002074 	movhi	r4,129
  805598:	212a5304 	addi	r4,r4,-22196
  80559c:	000b883a 	mov	r5,zero
  8055a0:	000d883a 	mov	r6,zero
  8055a4:	08071e40 	call	8071e4 <altera_avalon_uart_init>
  8055a8:	01002074 	movhi	r4,129
  8055ac:	212a4904 	addi	r4,r4,-22236
  8055b0:	08055c80 	call	8055c8 <alt_dev_reg>
}
  8055b4:	e037883a 	mov	sp,fp
  8055b8:	dfc00117 	ldw	ra,4(sp)
  8055bc:	df000017 	ldw	fp,0(sp)
  8055c0:	dec00204 	addi	sp,sp,8
  8055c4:	f800283a 	ret

008055c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8055c8:	defffd04 	addi	sp,sp,-12
  8055cc:	dfc00215 	stw	ra,8(sp)
  8055d0:	df000115 	stw	fp,4(sp)
  8055d4:	df000104 	addi	fp,sp,4
  8055d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8055dc:	e13fff17 	ldw	r4,-4(fp)
  8055e0:	01402074 	movhi	r5,129
  8055e4:	296a8004 	addi	r5,r5,-22016
  8055e8:	0807ae00 	call	807ae0 <alt_dev_llist_insert>
}
  8055ec:	e037883a 	mov	sp,fp
  8055f0:	dfc00117 	ldw	ra,4(sp)
  8055f4:	df000017 	ldw	fp,0(sp)
  8055f8:	dec00204 	addi	sp,sp,8
  8055fc:	f800283a 	ret

00805600 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  805600:	defffa04 	addi	sp,sp,-24
  805604:	dfc00515 	stw	ra,20(sp)
  805608:	df000415 	stw	fp,16(sp)
  80560c:	df000404 	addi	fp,sp,16
  805610:	e13ffd15 	stw	r4,-12(fp)
  805614:	e17ffe15 	stw	r5,-8(fp)
  805618:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80561c:	e0bffd17 	ldw	r2,-12(fp)
  805620:	10800017 	ldw	r2,0(r2)
  805624:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  805628:	e0bffc17 	ldw	r2,-16(fp)
  80562c:	11000a04 	addi	r4,r2,40
  805630:	e0bffd17 	ldw	r2,-12(fp)
  805634:	11c00217 	ldw	r7,8(r2)
  805638:	e17ffe17 	ldw	r5,-8(fp)
  80563c:	e1bfff17 	ldw	r6,-4(fp)
  805640:	0805c480 	call	805c48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  805644:	e037883a 	mov	sp,fp
  805648:	dfc00117 	ldw	ra,4(sp)
  80564c:	df000017 	ldw	fp,0(sp)
  805650:	dec00204 	addi	sp,sp,8
  805654:	f800283a 	ret

00805658 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  805658:	defffa04 	addi	sp,sp,-24
  80565c:	dfc00515 	stw	ra,20(sp)
  805660:	df000415 	stw	fp,16(sp)
  805664:	df000404 	addi	fp,sp,16
  805668:	e13ffd15 	stw	r4,-12(fp)
  80566c:	e17ffe15 	stw	r5,-8(fp)
  805670:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  805674:	e0bffd17 	ldw	r2,-12(fp)
  805678:	10800017 	ldw	r2,0(r2)
  80567c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  805680:	e0bffc17 	ldw	r2,-16(fp)
  805684:	11000a04 	addi	r4,r2,40
  805688:	e0bffd17 	ldw	r2,-12(fp)
  80568c:	11c00217 	ldw	r7,8(r2)
  805690:	e17ffe17 	ldw	r5,-8(fp)
  805694:	e1bfff17 	ldw	r6,-4(fp)
  805698:	0805e6c0 	call	805e6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80569c:	e037883a 	mov	sp,fp
  8056a0:	dfc00117 	ldw	ra,4(sp)
  8056a4:	df000017 	ldw	fp,0(sp)
  8056a8:	dec00204 	addi	sp,sp,8
  8056ac:	f800283a 	ret

008056b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8056b0:	defffc04 	addi	sp,sp,-16
  8056b4:	dfc00315 	stw	ra,12(sp)
  8056b8:	df000215 	stw	fp,8(sp)
  8056bc:	df000204 	addi	fp,sp,8
  8056c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8056c4:	e0bfff17 	ldw	r2,-4(fp)
  8056c8:	10800017 	ldw	r2,0(r2)
  8056cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8056d0:	e0bffe17 	ldw	r2,-8(fp)
  8056d4:	11000a04 	addi	r4,r2,40
  8056d8:	e0bfff17 	ldw	r2,-4(fp)
  8056dc:	11400217 	ldw	r5,8(r2)
  8056e0:	0805ae00 	call	805ae0 <altera_avalon_jtag_uart_close>
}
  8056e4:	e037883a 	mov	sp,fp
  8056e8:	dfc00117 	ldw	ra,4(sp)
  8056ec:	df000017 	ldw	fp,0(sp)
  8056f0:	dec00204 	addi	sp,sp,8
  8056f4:	f800283a 	ret

008056f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8056f8:	defffa04 	addi	sp,sp,-24
  8056fc:	dfc00515 	stw	ra,20(sp)
  805700:	df000415 	stw	fp,16(sp)
  805704:	df000404 	addi	fp,sp,16
  805708:	e13ffd15 	stw	r4,-12(fp)
  80570c:	e17ffe15 	stw	r5,-8(fp)
  805710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  805714:	e0bffd17 	ldw	r2,-12(fp)
  805718:	10800017 	ldw	r2,0(r2)
  80571c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  805720:	e0bffc17 	ldw	r2,-16(fp)
  805724:	11000a04 	addi	r4,r2,40
  805728:	e17ffe17 	ldw	r5,-8(fp)
  80572c:	e1bfff17 	ldw	r6,-4(fp)
  805730:	0805b540 	call	805b54 <altera_avalon_jtag_uart_ioctl>
}
  805734:	e037883a 	mov	sp,fp
  805738:	dfc00117 	ldw	ra,4(sp)
  80573c:	df000017 	ldw	fp,0(sp)
  805740:	dec00204 	addi	sp,sp,8
  805744:	f800283a 	ret

00805748 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  805748:	defffa04 	addi	sp,sp,-24
  80574c:	dfc00515 	stw	ra,20(sp)
  805750:	df000415 	stw	fp,16(sp)
  805754:	df000404 	addi	fp,sp,16
  805758:	e13ffd15 	stw	r4,-12(fp)
  80575c:	e17ffe15 	stw	r5,-8(fp)
  805760:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805764:	e0fffd17 	ldw	r3,-12(fp)
  805768:	00800044 	movi	r2,1
  80576c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  805770:	e0bffd17 	ldw	r2,-12(fp)
  805774:	10800017 	ldw	r2,0(r2)
  805778:	11000104 	addi	r4,r2,4
  80577c:	e0bffd17 	ldw	r2,-12(fp)
  805780:	10800817 	ldw	r2,32(r2)
  805784:	1007883a 	mov	r3,r2
  805788:	2005883a 	mov	r2,r4
  80578c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  805790:	e13ffe17 	ldw	r4,-8(fp)
  805794:	e17fff17 	ldw	r5,-4(fp)
  805798:	d8000015 	stw	zero,0(sp)
  80579c:	01802034 	movhi	r6,128
  8057a0:	31960204 	addi	r6,r6,22536
  8057a4:	e1fffd17 	ldw	r7,-12(fp)
  8057a8:	0807f580 	call	807f58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8057ac:	e0bffd17 	ldw	r2,-12(fp)
  8057b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8057b4:	e0bffd17 	ldw	r2,-12(fp)
  8057b8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8057bc:	00802074 	movhi	r2,129
  8057c0:	10b1b704 	addi	r2,r2,-14628
  8057c4:	10800017 	ldw	r2,0(r2)
  8057c8:	100b883a 	mov	r5,r2
  8057cc:	01802034 	movhi	r6,128
  8057d0:	31968c04 	addi	r6,r6,23088
  8057d4:	e1fffd17 	ldw	r7,-12(fp)
  8057d8:	08044640 	call	804464 <alt_alarm_start>
  8057dc:	1004403a 	cmpge	r2,r2,zero
  8057e0:	1000041e 	bne	r2,zero,8057f4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8057e4:	e0fffd17 	ldw	r3,-12(fp)
  8057e8:	00a00034 	movhi	r2,32768
  8057ec:	10bfffc4 	addi	r2,r2,-1
  8057f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8057f4:	e037883a 	mov	sp,fp
  8057f8:	dfc00117 	ldw	ra,4(sp)
  8057fc:	df000017 	ldw	fp,0(sp)
  805800:	dec00204 	addi	sp,sp,8
  805804:	f800283a 	ret

00805808 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  805808:	defff804 	addi	sp,sp,-32
  80580c:	df000715 	stw	fp,28(sp)
  805810:	df000704 	addi	fp,sp,28
  805814:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  805818:	e0bfff17 	ldw	r2,-4(fp)
  80581c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  805820:	e0bffe17 	ldw	r2,-8(fp)
  805824:	10800017 	ldw	r2,0(r2)
  805828:	e0bffd15 	stw	r2,-12(fp)
  80582c:	00000006 	br	805830 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805830:	e0bffd17 	ldw	r2,-12(fp)
  805834:	10800104 	addi	r2,r2,4
  805838:	10800037 	ldwio	r2,0(r2)
  80583c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  805840:	e0bffc17 	ldw	r2,-16(fp)
  805844:	1080c00c 	andi	r2,r2,768
  805848:	1005003a 	cmpeq	r2,r2,zero
  80584c:	1000741e 	bne	r2,zero,805a20 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  805850:	e0bffc17 	ldw	r2,-16(fp)
  805854:	1080400c 	andi	r2,r2,256
  805858:	1005003a 	cmpeq	r2,r2,zero
  80585c:	1000351e 	bne	r2,zero,805934 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  805860:	00800074 	movhi	r2,1
  805864:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805868:	e0bffe17 	ldw	r2,-8(fp)
  80586c:	10800a17 	ldw	r2,40(r2)
  805870:	10800044 	addi	r2,r2,1
  805874:	1081ffcc 	andi	r2,r2,2047
  805878:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80587c:	e0bffe17 	ldw	r2,-8(fp)
  805880:	10c00b17 	ldw	r3,44(r2)
  805884:	e0bffa17 	ldw	r2,-24(fp)
  805888:	18801626 	beq	r3,r2,8058e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80588c:	e0bffd17 	ldw	r2,-12(fp)
  805890:	10800037 	ldwio	r2,0(r2)
  805894:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  805898:	e0bffb17 	ldw	r2,-20(fp)
  80589c:	10a0000c 	andi	r2,r2,32768
  8058a0:	1005003a 	cmpeq	r2,r2,zero
  8058a4:	10000f1e 	bne	r2,zero,8058e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8058a8:	e0bffe17 	ldw	r2,-8(fp)
  8058ac:	10c00a17 	ldw	r3,40(r2)
  8058b0:	e0bffb17 	ldw	r2,-20(fp)
  8058b4:	1009883a 	mov	r4,r2
  8058b8:	e0bffe17 	ldw	r2,-8(fp)
  8058bc:	1885883a 	add	r2,r3,r2
  8058c0:	10800e04 	addi	r2,r2,56
  8058c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8058c8:	e0bffe17 	ldw	r2,-8(fp)
  8058cc:	10800a17 	ldw	r2,40(r2)
  8058d0:	10800044 	addi	r2,r2,1
  8058d4:	10c1ffcc 	andi	r3,r2,2047
  8058d8:	e0bffe17 	ldw	r2,-8(fp)
  8058dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8058e0:	003fe106 	br	805868 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8058e4:	e0bffb17 	ldw	r2,-20(fp)
  8058e8:	10bfffec 	andhi	r2,r2,65535
  8058ec:	1005003a 	cmpeq	r2,r2,zero
  8058f0:	1000101e 	bne	r2,zero,805934 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8058f4:	e0bffe17 	ldw	r2,-8(fp)
  8058f8:	10c00817 	ldw	r3,32(r2)
  8058fc:	00bfff84 	movi	r2,-2
  805900:	1886703a 	and	r3,r3,r2
  805904:	e0bffe17 	ldw	r2,-8(fp)
  805908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80590c:	e0bffd17 	ldw	r2,-12(fp)
  805910:	11000104 	addi	r4,r2,4
  805914:	e0bffe17 	ldw	r2,-8(fp)
  805918:	10800817 	ldw	r2,32(r2)
  80591c:	1007883a 	mov	r3,r2
  805920:	2005883a 	mov	r2,r4
  805924:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805928:	e0bffd17 	ldw	r2,-12(fp)
  80592c:	10800104 	addi	r2,r2,4
  805930:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  805934:	e0bffc17 	ldw	r2,-16(fp)
  805938:	1080800c 	andi	r2,r2,512
  80593c:	1005003a 	cmpeq	r2,r2,zero
  805940:	103fbb1e 	bne	r2,zero,805830 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  805944:	e0bffc17 	ldw	r2,-16(fp)
  805948:	10bfffec 	andhi	r2,r2,65535
  80594c:	1004d43a 	srli	r2,r2,16
  805950:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  805954:	00001506 	br	8059ac <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  805958:	e13ffd17 	ldw	r4,-12(fp)
  80595c:	e0bffe17 	ldw	r2,-8(fp)
  805960:	10c00d17 	ldw	r3,52(r2)
  805964:	e0bffe17 	ldw	r2,-8(fp)
  805968:	1885883a 	add	r2,r3,r2
  80596c:	10820e04 	addi	r2,r2,2104
  805970:	10800003 	ldbu	r2,0(r2)
  805974:	10c03fcc 	andi	r3,r2,255
  805978:	18c0201c 	xori	r3,r3,128
  80597c:	18ffe004 	addi	r3,r3,-128
  805980:	2005883a 	mov	r2,r4
  805984:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805988:	e0bffe17 	ldw	r2,-8(fp)
  80598c:	10800d17 	ldw	r2,52(r2)
  805990:	10800044 	addi	r2,r2,1
  805994:	10c1ffcc 	andi	r3,r2,2047
  805998:	e0bffe17 	ldw	r2,-8(fp)
  80599c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8059a0:	e0bff917 	ldw	r2,-28(fp)
  8059a4:	10bfffc4 	addi	r2,r2,-1
  8059a8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8059ac:	e0bff917 	ldw	r2,-28(fp)
  8059b0:	1005003a 	cmpeq	r2,r2,zero
  8059b4:	1000051e 	bne	r2,zero,8059cc <altera_avalon_jtag_uart_irq+0x1c4>
  8059b8:	e0bffe17 	ldw	r2,-8(fp)
  8059bc:	10c00d17 	ldw	r3,52(r2)
  8059c0:	e0bffe17 	ldw	r2,-8(fp)
  8059c4:	10800c17 	ldw	r2,48(r2)
  8059c8:	18bfe31e 	bne	r3,r2,805958 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8059cc:	e0bff917 	ldw	r2,-28(fp)
  8059d0:	1005003a 	cmpeq	r2,r2,zero
  8059d4:	103f961e 	bne	r2,zero,805830 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8059d8:	e0bffe17 	ldw	r2,-8(fp)
  8059dc:	10c00817 	ldw	r3,32(r2)
  8059e0:	00bfff44 	movi	r2,-3
  8059e4:	1886703a 	and	r3,r3,r2
  8059e8:	e0bffe17 	ldw	r2,-8(fp)
  8059ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8059f0:	e0bffe17 	ldw	r2,-8(fp)
  8059f4:	10800017 	ldw	r2,0(r2)
  8059f8:	11000104 	addi	r4,r2,4
  8059fc:	e0bffe17 	ldw	r2,-8(fp)
  805a00:	10800817 	ldw	r2,32(r2)
  805a04:	1007883a 	mov	r3,r2
  805a08:	2005883a 	mov	r2,r4
  805a0c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805a10:	e0bffd17 	ldw	r2,-12(fp)
  805a14:	10800104 	addi	r2,r2,4
  805a18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  805a1c:	003f8406 	br	805830 <altera_avalon_jtag_uart_irq+0x28>
}
  805a20:	e037883a 	mov	sp,fp
  805a24:	df000017 	ldw	fp,0(sp)
  805a28:	dec00104 	addi	sp,sp,4
  805a2c:	f800283a 	ret

00805a30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  805a30:	defffc04 	addi	sp,sp,-16
  805a34:	df000315 	stw	fp,12(sp)
  805a38:	df000304 	addi	fp,sp,12
  805a3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  805a40:	e0bfff17 	ldw	r2,-4(fp)
  805a44:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  805a48:	e0bffe17 	ldw	r2,-8(fp)
  805a4c:	10800017 	ldw	r2,0(r2)
  805a50:	10800104 	addi	r2,r2,4
  805a54:	10800037 	ldwio	r2,0(r2)
  805a58:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  805a5c:	e0bffd17 	ldw	r2,-12(fp)
  805a60:	1081000c 	andi	r2,r2,1024
  805a64:	1005003a 	cmpeq	r2,r2,zero
  805a68:	10000c1e 	bne	r2,zero,805a9c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  805a6c:	e0bffe17 	ldw	r2,-8(fp)
  805a70:	10800017 	ldw	r2,0(r2)
  805a74:	11000104 	addi	r4,r2,4
  805a78:	e0bffe17 	ldw	r2,-8(fp)
  805a7c:	10800817 	ldw	r2,32(r2)
  805a80:	10810014 	ori	r2,r2,1024
  805a84:	1007883a 	mov	r3,r2
  805a88:	2005883a 	mov	r2,r4
  805a8c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  805a90:	e0bffe17 	ldw	r2,-8(fp)
  805a94:	10000915 	stw	zero,36(r2)
  805a98:	00000a06 	br	805ac4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  805a9c:	e0bffe17 	ldw	r2,-8(fp)
  805aa0:	10c00917 	ldw	r3,36(r2)
  805aa4:	00a00034 	movhi	r2,32768
  805aa8:	10bfff04 	addi	r2,r2,-4
  805aac:	10c00536 	bltu	r2,r3,805ac4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  805ab0:	e0bffe17 	ldw	r2,-8(fp)
  805ab4:	10800917 	ldw	r2,36(r2)
  805ab8:	10c00044 	addi	r3,r2,1
  805abc:	e0bffe17 	ldw	r2,-8(fp)
  805ac0:	10c00915 	stw	r3,36(r2)
  805ac4:	00802074 	movhi	r2,129
  805ac8:	10b1b704 	addi	r2,r2,-14628
  805acc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  805ad0:	e037883a 	mov	sp,fp
  805ad4:	df000017 	ldw	fp,0(sp)
  805ad8:	dec00104 	addi	sp,sp,4
  805adc:	f800283a 	ret

00805ae0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  805ae0:	defffc04 	addi	sp,sp,-16
  805ae4:	df000315 	stw	fp,12(sp)
  805ae8:	df000304 	addi	fp,sp,12
  805aec:	e13ffd15 	stw	r4,-12(fp)
  805af0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805af4:	00000706 	br	805b14 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  805af8:	e0bffe17 	ldw	r2,-8(fp)
  805afc:	1090000c 	andi	r2,r2,16384
  805b00:	1005003a 	cmpeq	r2,r2,zero
  805b04:	1000031e 	bne	r2,zero,805b14 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  805b08:	00bffd44 	movi	r2,-11
  805b0c:	e0bfff15 	stw	r2,-4(fp)
  805b10:	00000b06 	br	805b40 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805b14:	e0bffd17 	ldw	r2,-12(fp)
  805b18:	10c00d17 	ldw	r3,52(r2)
  805b1c:	e0bffd17 	ldw	r2,-12(fp)
  805b20:	10800c17 	ldw	r2,48(r2)
  805b24:	18800526 	beq	r3,r2,805b3c <altera_avalon_jtag_uart_close+0x5c>
  805b28:	e0bffd17 	ldw	r2,-12(fp)
  805b2c:	10c00917 	ldw	r3,36(r2)
  805b30:	e0bffd17 	ldw	r2,-12(fp)
  805b34:	10800117 	ldw	r2,4(r2)
  805b38:	18bfef36 	bltu	r3,r2,805af8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  805b3c:	e03fff15 	stw	zero,-4(fp)
  805b40:	e0bfff17 	ldw	r2,-4(fp)
}
  805b44:	e037883a 	mov	sp,fp
  805b48:	df000017 	ldw	fp,0(sp)
  805b4c:	dec00104 	addi	sp,sp,4
  805b50:	f800283a 	ret

00805b54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  805b54:	defff804 	addi	sp,sp,-32
  805b58:	df000715 	stw	fp,28(sp)
  805b5c:	df000704 	addi	fp,sp,28
  805b60:	e13ffb15 	stw	r4,-20(fp)
  805b64:	e17ffc15 	stw	r5,-16(fp)
  805b68:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  805b6c:	00bff9c4 	movi	r2,-25
  805b70:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  805b74:	e0bffc17 	ldw	r2,-16(fp)
  805b78:	e0bfff15 	stw	r2,-4(fp)
  805b7c:	e0ffff17 	ldw	r3,-4(fp)
  805b80:	189a8060 	cmpeqi	r2,r3,27137
  805b84:	1000041e 	bne	r2,zero,805b98 <altera_avalon_jtag_uart_ioctl+0x44>
  805b88:	e0ffff17 	ldw	r3,-4(fp)
  805b8c:	189a80a0 	cmpeqi	r2,r3,27138
  805b90:	10001b1e 	bne	r2,zero,805c00 <altera_avalon_jtag_uart_ioctl+0xac>
  805b94:	00002706 	br	805c34 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  805b98:	e0bffb17 	ldw	r2,-20(fp)
  805b9c:	10c00117 	ldw	r3,4(r2)
  805ba0:	00a00034 	movhi	r2,32768
  805ba4:	10bfffc4 	addi	r2,r2,-1
  805ba8:	18802226 	beq	r3,r2,805c34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  805bac:	e0bffd17 	ldw	r2,-12(fp)
  805bb0:	10800017 	ldw	r2,0(r2)
  805bb4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  805bb8:	e0bff917 	ldw	r2,-28(fp)
  805bbc:	10800090 	cmplti	r2,r2,2
  805bc0:	1000071e 	bne	r2,zero,805be0 <altera_avalon_jtag_uart_ioctl+0x8c>
  805bc4:	e0fff917 	ldw	r3,-28(fp)
  805bc8:	00a00034 	movhi	r2,32768
  805bcc:	10bfffc4 	addi	r2,r2,-1
  805bd0:	18800326 	beq	r3,r2,805be0 <altera_avalon_jtag_uart_ioctl+0x8c>
  805bd4:	e0bff917 	ldw	r2,-28(fp)
  805bd8:	e0bffe15 	stw	r2,-8(fp)
  805bdc:	00000306 	br	805bec <altera_avalon_jtag_uart_ioctl+0x98>
  805be0:	00e00034 	movhi	r3,32768
  805be4:	18ffff84 	addi	r3,r3,-2
  805be8:	e0fffe15 	stw	r3,-8(fp)
  805bec:	e0bffb17 	ldw	r2,-20(fp)
  805bf0:	e0fffe17 	ldw	r3,-8(fp)
  805bf4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  805bf8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  805bfc:	00000d06 	br	805c34 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  805c00:	e0bffb17 	ldw	r2,-20(fp)
  805c04:	10c00117 	ldw	r3,4(r2)
  805c08:	00a00034 	movhi	r2,32768
  805c0c:	10bfffc4 	addi	r2,r2,-1
  805c10:	18800826 	beq	r3,r2,805c34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  805c14:	e13ffd17 	ldw	r4,-12(fp)
  805c18:	e0bffb17 	ldw	r2,-20(fp)
  805c1c:	10c00917 	ldw	r3,36(r2)
  805c20:	e0bffb17 	ldw	r2,-20(fp)
  805c24:	10800117 	ldw	r2,4(r2)
  805c28:	1885803a 	cmpltu	r2,r3,r2
  805c2c:	20800015 	stw	r2,0(r4)
      rc = 0;
  805c30:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  805c34:	e0bffa17 	ldw	r2,-24(fp)
}
  805c38:	e037883a 	mov	sp,fp
  805c3c:	df000017 	ldw	fp,0(sp)
  805c40:	dec00104 	addi	sp,sp,4
  805c44:	f800283a 	ret

00805c48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  805c48:	defff204 	addi	sp,sp,-56
  805c4c:	dfc00d15 	stw	ra,52(sp)
  805c50:	df000c15 	stw	fp,48(sp)
  805c54:	df000c04 	addi	fp,sp,48
  805c58:	e13ffb15 	stw	r4,-20(fp)
  805c5c:	e17ffc15 	stw	r5,-16(fp)
  805c60:	e1bffd15 	stw	r6,-12(fp)
  805c64:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  805c68:	e0bffc17 	ldw	r2,-16(fp)
  805c6c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805c70:	00004806 	br	805d94 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  805c74:	e0bffb17 	ldw	r2,-20(fp)
  805c78:	10800a17 	ldw	r2,40(r2)
  805c7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  805c80:	e0bffb17 	ldw	r2,-20(fp)
  805c84:	10800b17 	ldw	r2,44(r2)
  805c88:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  805c8c:	e0fff717 	ldw	r3,-36(fp)
  805c90:	e0bff617 	ldw	r2,-40(fp)
  805c94:	18800536 	bltu	r3,r2,805cac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  805c98:	e0bff717 	ldw	r2,-36(fp)
  805c9c:	e0fff617 	ldw	r3,-40(fp)
  805ca0:	10c5c83a 	sub	r2,r2,r3
  805ca4:	e0bff815 	stw	r2,-32(fp)
  805ca8:	00000406 	br	805cbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  805cac:	00820004 	movi	r2,2048
  805cb0:	e0fff617 	ldw	r3,-40(fp)
  805cb4:	10c5c83a 	sub	r2,r2,r3
  805cb8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805cbc:	e0bff817 	ldw	r2,-32(fp)
  805cc0:	1005003a 	cmpeq	r2,r2,zero
  805cc4:	10001f1e 	bne	r2,zero,805d44 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  805cc8:	e0fffd17 	ldw	r3,-12(fp)
  805ccc:	e0bff817 	ldw	r2,-32(fp)
  805cd0:	1880022e 	bgeu	r3,r2,805cdc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  805cd4:	e0bffd17 	ldw	r2,-12(fp)
  805cd8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  805cdc:	e0bffb17 	ldw	r2,-20(fp)
  805ce0:	10c00e04 	addi	r3,r2,56
  805ce4:	e0bff617 	ldw	r2,-40(fp)
  805ce8:	1887883a 	add	r3,r3,r2
  805cec:	e0bffa17 	ldw	r2,-24(fp)
  805cf0:	1009883a 	mov	r4,r2
  805cf4:	180b883a 	mov	r5,r3
  805cf8:	e1bff817 	ldw	r6,-32(fp)
  805cfc:	08039b40 	call	8039b4 <memcpy>
      ptr   += n;
  805d00:	e0fff817 	ldw	r3,-32(fp)
  805d04:	e0bffa17 	ldw	r2,-24(fp)
  805d08:	10c5883a 	add	r2,r2,r3
  805d0c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  805d10:	e0fffd17 	ldw	r3,-12(fp)
  805d14:	e0bff817 	ldw	r2,-32(fp)
  805d18:	1885c83a 	sub	r2,r3,r2
  805d1c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805d20:	e0fff617 	ldw	r3,-40(fp)
  805d24:	e0bff817 	ldw	r2,-32(fp)
  805d28:	1885883a 	add	r2,r3,r2
  805d2c:	10c1ffcc 	andi	r3,r2,2047
  805d30:	e0bffb17 	ldw	r2,-20(fp)
  805d34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  805d38:	e0bffd17 	ldw	r2,-12(fp)
  805d3c:	10800048 	cmpgei	r2,r2,1
  805d40:	103fcc1e 	bne	r2,zero,805c74 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  805d44:	e0fffa17 	ldw	r3,-24(fp)
  805d48:	e0bffc17 	ldw	r2,-16(fp)
  805d4c:	1880141e 	bne	r3,r2,805da0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  805d50:	e0bffe17 	ldw	r2,-8(fp)
  805d54:	1090000c 	andi	r2,r2,16384
  805d58:	1004c03a 	cmpne	r2,r2,zero
  805d5c:	1000101e 	bne	r2,zero,805da0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  805d60:	e0bffb17 	ldw	r2,-20(fp)
  805d64:	10c00a17 	ldw	r3,40(r2)
  805d68:	e0bff717 	ldw	r2,-36(fp)
  805d6c:	1880051e 	bne	r3,r2,805d84 <altera_avalon_jtag_uart_read+0x13c>
  805d70:	e0bffb17 	ldw	r2,-20(fp)
  805d74:	10c00917 	ldw	r3,36(r2)
  805d78:	e0bffb17 	ldw	r2,-20(fp)
  805d7c:	10800117 	ldw	r2,4(r2)
  805d80:	18bff736 	bltu	r3,r2,805d60 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  805d84:	e0bffb17 	ldw	r2,-20(fp)
  805d88:	10c00a17 	ldw	r3,40(r2)
  805d8c:	e0bff717 	ldw	r2,-36(fp)
  805d90:	18800326 	beq	r3,r2,805da0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805d94:	e0bffd17 	ldw	r2,-12(fp)
  805d98:	10800048 	cmpgei	r2,r2,1
  805d9c:	103fb51e 	bne	r2,zero,805c74 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  805da0:	e0fffa17 	ldw	r3,-24(fp)
  805da4:	e0bffc17 	ldw	r2,-16(fp)
  805da8:	18801926 	beq	r3,r2,805e10 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805dac:	0005303a 	rdctl	r2,status
  805db0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805db4:	e0fff517 	ldw	r3,-44(fp)
  805db8:	00bfff84 	movi	r2,-2
  805dbc:	1884703a 	and	r2,r3,r2
  805dc0:	1001703a 	wrctl	status,r2
  
  return context;
  805dc4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  805dc8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805dcc:	e0bffb17 	ldw	r2,-20(fp)
  805dd0:	10800817 	ldw	r2,32(r2)
  805dd4:	10c00054 	ori	r3,r2,1
  805dd8:	e0bffb17 	ldw	r2,-20(fp)
  805ddc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805de0:	e0bffb17 	ldw	r2,-20(fp)
  805de4:	10800017 	ldw	r2,0(r2)
  805de8:	11000104 	addi	r4,r2,4
  805dec:	e0bffb17 	ldw	r2,-20(fp)
  805df0:	10800817 	ldw	r2,32(r2)
  805df4:	1007883a 	mov	r3,r2
  805df8:	2005883a 	mov	r2,r4
  805dfc:	10c00035 	stwio	r3,0(r2)
  805e00:	e0bff917 	ldw	r2,-28(fp)
  805e04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e08:	e0bff417 	ldw	r2,-48(fp)
  805e0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  805e10:	e0fffa17 	ldw	r3,-24(fp)
  805e14:	e0bffc17 	ldw	r2,-16(fp)
  805e18:	18800526 	beq	r3,r2,805e30 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  805e1c:	e0fffa17 	ldw	r3,-24(fp)
  805e20:	e0bffc17 	ldw	r2,-16(fp)
  805e24:	1887c83a 	sub	r3,r3,r2
  805e28:	e0ffff15 	stw	r3,-4(fp)
  805e2c:	00000906 	br	805e54 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  805e30:	e0bffe17 	ldw	r2,-8(fp)
  805e34:	1090000c 	andi	r2,r2,16384
  805e38:	1005003a 	cmpeq	r2,r2,zero
  805e3c:	1000031e 	bne	r2,zero,805e4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  805e40:	00bffd44 	movi	r2,-11
  805e44:	e0bfff15 	stw	r2,-4(fp)
  805e48:	00000206 	br	805e54 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  805e4c:	00bffec4 	movi	r2,-5
  805e50:	e0bfff15 	stw	r2,-4(fp)
  805e54:	e0bfff17 	ldw	r2,-4(fp)
}
  805e58:	e037883a 	mov	sp,fp
  805e5c:	dfc00117 	ldw	ra,4(sp)
  805e60:	df000017 	ldw	fp,0(sp)
  805e64:	dec00204 	addi	sp,sp,8
  805e68:	f800283a 	ret

00805e6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805e6c:	defff204 	addi	sp,sp,-56
  805e70:	dfc00d15 	stw	ra,52(sp)
  805e74:	df000c15 	stw	fp,48(sp)
  805e78:	df000c04 	addi	fp,sp,48
  805e7c:	e13ffb15 	stw	r4,-20(fp)
  805e80:	e17ffc15 	stw	r5,-16(fp)
  805e84:	e1bffd15 	stw	r6,-12(fp)
  805e88:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  805e8c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805e90:	e0bffc17 	ldw	r2,-16(fp)
  805e94:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805e98:	00003a06 	br	805f84 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  805e9c:	e0bffb17 	ldw	r2,-20(fp)
  805ea0:	10800c17 	ldw	r2,48(r2)
  805ea4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  805ea8:	e0bffb17 	ldw	r2,-20(fp)
  805eac:	10800d17 	ldw	r2,52(r2)
  805eb0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  805eb4:	e0fffa17 	ldw	r3,-24(fp)
  805eb8:	e0bff917 	ldw	r2,-28(fp)
  805ebc:	1880062e 	bgeu	r3,r2,805ed8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  805ec0:	e0fff917 	ldw	r3,-28(fp)
  805ec4:	e0bffa17 	ldw	r2,-24(fp)
  805ec8:	1885c83a 	sub	r2,r3,r2
  805ecc:	10bfffc4 	addi	r2,r2,-1
  805ed0:	e0bff815 	stw	r2,-32(fp)
  805ed4:	00000c06 	br	805f08 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  805ed8:	e0bff917 	ldw	r2,-28(fp)
  805edc:	1005003a 	cmpeq	r2,r2,zero
  805ee0:	1000051e 	bne	r2,zero,805ef8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  805ee4:	00820004 	movi	r2,2048
  805ee8:	e0fffa17 	ldw	r3,-24(fp)
  805eec:	10c5c83a 	sub	r2,r2,r3
  805ef0:	e0bff815 	stw	r2,-32(fp)
  805ef4:	00000406 	br	805f08 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  805ef8:	0081ffc4 	movi	r2,2047
  805efc:	e0fffa17 	ldw	r3,-24(fp)
  805f00:	10c5c83a 	sub	r2,r2,r3
  805f04:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805f08:	e0bff817 	ldw	r2,-32(fp)
  805f0c:	1005003a 	cmpeq	r2,r2,zero
  805f10:	10001f1e 	bne	r2,zero,805f90 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  805f14:	e0fffd17 	ldw	r3,-12(fp)
  805f18:	e0bff817 	ldw	r2,-32(fp)
  805f1c:	1880022e 	bgeu	r3,r2,805f28 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  805f20:	e0bffd17 	ldw	r2,-12(fp)
  805f24:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  805f28:	e0bffb17 	ldw	r2,-20(fp)
  805f2c:	10c20e04 	addi	r3,r2,2104
  805f30:	e0bffa17 	ldw	r2,-24(fp)
  805f34:	1885883a 	add	r2,r3,r2
  805f38:	e0fffc17 	ldw	r3,-16(fp)
  805f3c:	1009883a 	mov	r4,r2
  805f40:	180b883a 	mov	r5,r3
  805f44:	e1bff817 	ldw	r6,-32(fp)
  805f48:	08039b40 	call	8039b4 <memcpy>
      ptr   += n;
  805f4c:	e0fff817 	ldw	r3,-32(fp)
  805f50:	e0bffc17 	ldw	r2,-16(fp)
  805f54:	10c5883a 	add	r2,r2,r3
  805f58:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  805f5c:	e0fffd17 	ldw	r3,-12(fp)
  805f60:	e0bff817 	ldw	r2,-32(fp)
  805f64:	1885c83a 	sub	r2,r3,r2
  805f68:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805f6c:	e0fffa17 	ldw	r3,-24(fp)
  805f70:	e0bff817 	ldw	r2,-32(fp)
  805f74:	1885883a 	add	r2,r3,r2
  805f78:	10c1ffcc 	andi	r3,r2,2047
  805f7c:	e0bffb17 	ldw	r2,-20(fp)
  805f80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805f84:	e0bffd17 	ldw	r2,-12(fp)
  805f88:	10800048 	cmpgei	r2,r2,1
  805f8c:	103fc31e 	bne	r2,zero,805e9c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805f90:	0005303a 	rdctl	r2,status
  805f94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805f98:	e0fff517 	ldw	r3,-44(fp)
  805f9c:	00bfff84 	movi	r2,-2
  805fa0:	1884703a 	and	r2,r3,r2
  805fa4:	1001703a 	wrctl	status,r2
  
  return context;
  805fa8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  805fac:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  805fb0:	e0bffb17 	ldw	r2,-20(fp)
  805fb4:	10800817 	ldw	r2,32(r2)
  805fb8:	10c00094 	ori	r3,r2,2
  805fbc:	e0bffb17 	ldw	r2,-20(fp)
  805fc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805fc4:	e0bffb17 	ldw	r2,-20(fp)
  805fc8:	10800017 	ldw	r2,0(r2)
  805fcc:	11000104 	addi	r4,r2,4
  805fd0:	e0bffb17 	ldw	r2,-20(fp)
  805fd4:	10800817 	ldw	r2,32(r2)
  805fd8:	1007883a 	mov	r3,r2
  805fdc:	2005883a 	mov	r2,r4
  805fe0:	10c00035 	stwio	r3,0(r2)
  805fe4:	e0bff717 	ldw	r2,-36(fp)
  805fe8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805fec:	e0bff417 	ldw	r2,-48(fp)
  805ff0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  805ff4:	e0bffd17 	ldw	r2,-12(fp)
  805ff8:	10800050 	cmplti	r2,r2,1
  805ffc:	1000111e 	bne	r2,zero,806044 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  806000:	e0bffe17 	ldw	r2,-8(fp)
  806004:	1090000c 	andi	r2,r2,16384
  806008:	1004c03a 	cmpne	r2,r2,zero
  80600c:	1000101e 	bne	r2,zero,806050 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  806010:	e0bffb17 	ldw	r2,-20(fp)
  806014:	10c00d17 	ldw	r3,52(r2)
  806018:	e0bff917 	ldw	r2,-28(fp)
  80601c:	1880051e 	bne	r3,r2,806034 <altera_avalon_jtag_uart_write+0x1c8>
  806020:	e0bffb17 	ldw	r2,-20(fp)
  806024:	10c00917 	ldw	r3,36(r2)
  806028:	e0bffb17 	ldw	r2,-20(fp)
  80602c:	10800117 	ldw	r2,4(r2)
  806030:	18bff736 	bltu	r3,r2,806010 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  806034:	e0bffb17 	ldw	r2,-20(fp)
  806038:	10c00d17 	ldw	r3,52(r2)
  80603c:	e0bff917 	ldw	r2,-28(fp)
  806040:	18800326 	beq	r3,r2,806050 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  806044:	e0bffd17 	ldw	r2,-12(fp)
  806048:	10800048 	cmpgei	r2,r2,1
  80604c:	103fcd1e 	bne	r2,zero,805f84 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  806050:	e0fffc17 	ldw	r3,-16(fp)
  806054:	e0bff617 	ldw	r2,-40(fp)
  806058:	18800526 	beq	r3,r2,806070 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80605c:	e0fffc17 	ldw	r3,-16(fp)
  806060:	e0bff617 	ldw	r2,-40(fp)
  806064:	1887c83a 	sub	r3,r3,r2
  806068:	e0ffff15 	stw	r3,-4(fp)
  80606c:	00000906 	br	806094 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  806070:	e0bffe17 	ldw	r2,-8(fp)
  806074:	1090000c 	andi	r2,r2,16384
  806078:	1005003a 	cmpeq	r2,r2,zero
  80607c:	1000031e 	bne	r2,zero,80608c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  806080:	00bffd44 	movi	r2,-11
  806084:	e0bfff15 	stw	r2,-4(fp)
  806088:	00000206 	br	806094 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80608c:	00bffec4 	movi	r2,-5
  806090:	e0bfff15 	stw	r2,-4(fp)
  806094:	e0bfff17 	ldw	r2,-4(fp)
}
  806098:	e037883a 	mov	sp,fp
  80609c:	dfc00117 	ldw	ra,4(sp)
  8060a0:	df000017 	ldw	fp,0(sp)
  8060a4:	dec00204 	addi	sp,sp,8
  8060a8:	f800283a 	ret

008060ac <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8060ac:	defffa04 	addi	sp,sp,-24
  8060b0:	dfc00515 	stw	ra,20(sp)
  8060b4:	df000415 	stw	fp,16(sp)
  8060b8:	df000404 	addi	fp,sp,16
  8060bc:	e13ffe15 	stw	r4,-8(fp)
  8060c0:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  8060c4:	e0bffe17 	ldw	r2,-8(fp)
  8060c8:	10800017 	ldw	r2,0(r2)
  8060cc:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8060d0:	008003f4 	movhi	r2,15
  8060d4:	10909004 	addi	r2,r2,16960
  8060d8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8060dc:	e0bffe17 	ldw	r2,-8(fp)
  8060e0:	10800803 	ldbu	r2,32(r2)
  8060e4:	10803fcc 	andi	r2,r2,255
  8060e8:	1080201c 	xori	r2,r2,128
  8060ec:	10bfe004 	addi	r2,r2,-128
  8060f0:	1004c03a 	cmpne	r2,r2,zero
  8060f4:	1000161e 	bne	r2,zero,806150 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8060f8:	00000a06 	br	806124 <lcd_write_command+0x78>
    if (--i == 0)
  8060fc:	e0bffc17 	ldw	r2,-16(fp)
  806100:	10bfffc4 	addi	r2,r2,-1
  806104:	e0bffc15 	stw	r2,-16(fp)
  806108:	e0bffc17 	ldw	r2,-16(fp)
  80610c:	1004c03a 	cmpne	r2,r2,zero
  806110:	1000041e 	bne	r2,zero,806124 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  806114:	e0fffe17 	ldw	r3,-8(fp)
  806118:	00800044 	movi	r2,1
  80611c:	18800805 	stb	r2,32(r3)
      return;
  806120:	00000b06 	br	806150 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  806124:	e0bffd17 	ldw	r2,-12(fp)
  806128:	10800104 	addi	r2,r2,4
  80612c:	10800037 	ldwio	r2,0(r2)
  806130:	1080200c 	andi	r2,r2,128
  806134:	1004c03a 	cmpne	r2,r2,zero
  806138:	103ff01e 	bne	r2,zero,8060fc <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80613c:	01001904 	movi	r4,100
  806140:	08083600 	call	808360 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  806144:	e0bffd17 	ldw	r2,-12(fp)
  806148:	e0ffff03 	ldbu	r3,-4(fp)
  80614c:	10c00035 	stwio	r3,0(r2)
}
  806150:	e037883a 	mov	sp,fp
  806154:	dfc00117 	ldw	ra,4(sp)
  806158:	df000017 	ldw	fp,0(sp)
  80615c:	dec00204 	addi	sp,sp,8
  806160:	f800283a 	ret

00806164 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  806164:	defffa04 	addi	sp,sp,-24
  806168:	dfc00515 	stw	ra,20(sp)
  80616c:	df000415 	stw	fp,16(sp)
  806170:	df000404 	addi	fp,sp,16
  806174:	e13ffe15 	stw	r4,-8(fp)
  806178:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  80617c:	e0bffe17 	ldw	r2,-8(fp)
  806180:	10800017 	ldw	r2,0(r2)
  806184:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  806188:	008003f4 	movhi	r2,15
  80618c:	10909004 	addi	r2,r2,16960
  806190:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  806194:	e0bffe17 	ldw	r2,-8(fp)
  806198:	10800803 	ldbu	r2,32(r2)
  80619c:	10803fcc 	andi	r2,r2,255
  8061a0:	1080201c 	xori	r2,r2,128
  8061a4:	10bfe004 	addi	r2,r2,-128
  8061a8:	1004c03a 	cmpne	r2,r2,zero
  8061ac:	10001d1e 	bne	r2,zero,806224 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8061b0:	00000a06 	br	8061dc <lcd_write_data+0x78>
    if (--i == 0)
  8061b4:	e0bffc17 	ldw	r2,-16(fp)
  8061b8:	10bfffc4 	addi	r2,r2,-1
  8061bc:	e0bffc15 	stw	r2,-16(fp)
  8061c0:	e0bffc17 	ldw	r2,-16(fp)
  8061c4:	1004c03a 	cmpne	r2,r2,zero
  8061c8:	1000041e 	bne	r2,zero,8061dc <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8061cc:	e0fffe17 	ldw	r3,-8(fp)
  8061d0:	00800044 	movi	r2,1
  8061d4:	18800805 	stb	r2,32(r3)
      return;
  8061d8:	00001206 	br	806224 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8061dc:	e0bffd17 	ldw	r2,-12(fp)
  8061e0:	10800104 	addi	r2,r2,4
  8061e4:	10800037 	ldwio	r2,0(r2)
  8061e8:	1080200c 	andi	r2,r2,128
  8061ec:	1004c03a 	cmpne	r2,r2,zero
  8061f0:	103ff01e 	bne	r2,zero,8061b4 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8061f4:	01001904 	movi	r4,100
  8061f8:	08083600 	call	808360 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8061fc:	e0bffd17 	ldw	r2,-12(fp)
  806200:	10800204 	addi	r2,r2,8
  806204:	e0ffff03 	ldbu	r3,-4(fp)
  806208:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80620c:	e0bffe17 	ldw	r2,-8(fp)
  806210:	108008c3 	ldbu	r2,35(r2)
  806214:	10800044 	addi	r2,r2,1
  806218:	1007883a 	mov	r3,r2
  80621c:	e0bffe17 	ldw	r2,-8(fp)
  806220:	10c008c5 	stb	r3,35(r2)
}
  806224:	e037883a 	mov	sp,fp
  806228:	dfc00117 	ldw	ra,4(sp)
  80622c:	df000017 	ldw	fp,0(sp)
  806230:	dec00204 	addi	sp,sp,8
  806234:	f800283a 	ret

00806238 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  806238:	defffc04 	addi	sp,sp,-16
  80623c:	dfc00315 	stw	ra,12(sp)
  806240:	df000215 	stw	fp,8(sp)
  806244:	df000204 	addi	fp,sp,8
  806248:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80624c:	e13fff17 	ldw	r4,-4(fp)
  806250:	01400044 	movi	r5,1
  806254:	08060ac0 	call	8060ac <lcd_write_command>

  sp->x = 0;
  806258:	e0bfff17 	ldw	r2,-4(fp)
  80625c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  806260:	e0bfff17 	ldw	r2,-4(fp)
  806264:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  806268:	e0bfff17 	ldw	r2,-4(fp)
  80626c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806270:	e03ffe15 	stw	zero,-8(fp)
  806274:	00001906 	br	8062dc <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  806278:	e0bffe17 	ldw	r2,-8(fp)
  80627c:	10801924 	muli	r2,r2,100
  806280:	10c01004 	addi	r3,r2,64
  806284:	e0bfff17 	ldw	r2,-4(fp)
  806288:	1889883a 	add	r4,r3,r2
  80628c:	01400804 	movi	r5,32
  806290:	01801444 	movi	r6,81
  806294:	080215c0 	call	80215c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  806298:	e0bffe17 	ldw	r2,-8(fp)
  80629c:	10801924 	muli	r2,r2,100
  8062a0:	10c00c04 	addi	r3,r2,48
  8062a4:	e0bfff17 	ldw	r2,-4(fp)
  8062a8:	1889883a 	add	r4,r3,r2
  8062ac:	01400804 	movi	r5,32
  8062b0:	01800404 	movi	r6,16
  8062b4:	080215c0 	call	80215c <memset>
    sp->line[y].width = 0;
  8062b8:	e0bffe17 	ldw	r2,-8(fp)
  8062bc:	e0ffff17 	ldw	r3,-4(fp)
  8062c0:	10801924 	muli	r2,r2,100
  8062c4:	10c5883a 	add	r2,r2,r3
  8062c8:	10802404 	addi	r2,r2,144
  8062cc:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8062d0:	e0bffe17 	ldw	r2,-8(fp)
  8062d4:	10800044 	addi	r2,r2,1
  8062d8:	e0bffe15 	stw	r2,-8(fp)
  8062dc:	e0bffe17 	ldw	r2,-8(fp)
  8062e0:	10800090 	cmplti	r2,r2,2
  8062e4:	103fe41e 	bne	r2,zero,806278 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8062e8:	e037883a 	mov	sp,fp
  8062ec:	dfc00117 	ldw	ra,4(sp)
  8062f0:	df000017 	ldw	fp,0(sp)
  8062f4:	dec00204 	addi	sp,sp,8
  8062f8:	f800283a 	ret

008062fc <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8062fc:	defff604 	addi	sp,sp,-40
  806300:	dfc00915 	stw	ra,36(sp)
  806304:	df000815 	stw	fp,32(sp)
  806308:	dc000715 	stw	r16,28(sp)
  80630c:	df000704 	addi	fp,sp,28
  806310:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  806314:	e0bfff17 	ldw	r2,-4(fp)
  806318:	10800943 	ldbu	r2,37(r2)
  80631c:	10803fcc 	andi	r2,r2,255
  806320:	1080201c 	xori	r2,r2,128
  806324:	10bfe004 	addi	r2,r2,-128
  806328:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80632c:	e03ffe15 	stw	zero,-8(fp)
  806330:	00006406 	br	8064c4 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  806334:	e0bffe17 	ldw	r2,-8(fp)
  806338:	e0ffff17 	ldw	r3,-4(fp)
  80633c:	10801924 	muli	r2,r2,100
  806340:	10c5883a 	add	r2,r2,r3
  806344:	10802404 	addi	r2,r2,144
  806348:	10800043 	ldbu	r2,1(r2)
  80634c:	10803fcc 	andi	r2,r2,255
  806350:	1080201c 	xori	r2,r2,128
  806354:	10bfe004 	addi	r2,r2,-128
  806358:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80635c:	e0bffe17 	ldw	r2,-8(fp)
  806360:	e0ffff17 	ldw	r3,-4(fp)
  806364:	10801924 	muli	r2,r2,100
  806368:	10c5883a 	add	r2,r2,r3
  80636c:	10802404 	addi	r2,r2,144
  806370:	10800083 	ldbu	r2,2(r2)
  806374:	10c03fcc 	andi	r3,r2,255
  806378:	e0bffc17 	ldw	r2,-16(fp)
  80637c:	1885383a 	mul	r2,r3,r2
  806380:	1005d23a 	srai	r2,r2,8
  806384:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  806388:	e0fffa17 	ldw	r3,-24(fp)
  80638c:	e0bffb17 	ldw	r2,-20(fp)
  806390:	18800116 	blt	r3,r2,806398 <lcd_repaint_screen+0x9c>
      offset = 0;
  806394:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  806398:	e03ffd15 	stw	zero,-12(fp)
  80639c:	00004306 	br	8064ac <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8063a0:	e43ffe17 	ldw	r16,-8(fp)
  8063a4:	e0fffd17 	ldw	r3,-12(fp)
  8063a8:	e0bffa17 	ldw	r2,-24(fp)
  8063ac:	1889883a 	add	r4,r3,r2
  8063b0:	e17ffb17 	ldw	r5,-20(fp)
  8063b4:	0808a100 	call	808a10 <__modsi3>
  8063b8:	1009883a 	mov	r4,r2
  8063bc:	e0ffff17 	ldw	r3,-4(fp)
  8063c0:	80801924 	muli	r2,r16,100
  8063c4:	10c5883a 	add	r2,r2,r3
  8063c8:	1105883a 	add	r2,r2,r4
  8063cc:	10801004 	addi	r2,r2,64
  8063d0:	10800003 	ldbu	r2,0(r2)
  8063d4:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8063d8:	e0bffe17 	ldw	r2,-8(fp)
  8063dc:	e13ffd17 	ldw	r4,-12(fp)
  8063e0:	e0ffff17 	ldw	r3,-4(fp)
  8063e4:	10801924 	muli	r2,r2,100
  8063e8:	10c5883a 	add	r2,r2,r3
  8063ec:	1105883a 	add	r2,r2,r4
  8063f0:	10800c04 	addi	r2,r2,48
  8063f4:	10800003 	ldbu	r2,0(r2)
  8063f8:	10c03fcc 	andi	r3,r2,255
  8063fc:	18c0201c 	xori	r3,r3,128
  806400:	18ffe004 	addi	r3,r3,-128
  806404:	e0bff947 	ldb	r2,-27(fp)
  806408:	18802526 	beq	r3,r2,8064a0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80640c:	e0fffe17 	ldw	r3,-8(fp)
  806410:	d0a00d04 	addi	r2,gp,-32716
  806414:	1885883a 	add	r2,r3,r2
  806418:	10800003 	ldbu	r2,0(r2)
  80641c:	1007883a 	mov	r3,r2
  806420:	e0bffd17 	ldw	r2,-12(fp)
  806424:	1885883a 	add	r2,r3,r2
  806428:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80642c:	e0fff903 	ldbu	r3,-28(fp)
  806430:	e0bfff17 	ldw	r2,-4(fp)
  806434:	108008c3 	ldbu	r2,35(r2)
  806438:	10803fcc 	andi	r2,r2,255
  80643c:	1080201c 	xori	r2,r2,128
  806440:	10bfe004 	addi	r2,r2,-128
  806444:	18800926 	beq	r3,r2,80646c <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  806448:	e0fff903 	ldbu	r3,-28(fp)
  80644c:	00bfe004 	movi	r2,-128
  806450:	1884b03a 	or	r2,r3,r2
  806454:	11403fcc 	andi	r5,r2,255
  806458:	e13fff17 	ldw	r4,-4(fp)
  80645c:	08060ac0 	call	8060ac <lcd_write_command>
          sp->address = address;
  806460:	e0fff903 	ldbu	r3,-28(fp)
  806464:	e0bfff17 	ldw	r2,-4(fp)
  806468:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80646c:	e0bff943 	ldbu	r2,-27(fp)
  806470:	11403fcc 	andi	r5,r2,255
  806474:	e13fff17 	ldw	r4,-4(fp)
  806478:	08061640 	call	806164 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80647c:	e0bffe17 	ldw	r2,-8(fp)
  806480:	e13ffd17 	ldw	r4,-12(fp)
  806484:	e0ffff17 	ldw	r3,-4(fp)
  806488:	10801924 	muli	r2,r2,100
  80648c:	10c5883a 	add	r2,r2,r3
  806490:	1105883a 	add	r2,r2,r4
  806494:	10c00c04 	addi	r3,r2,48
  806498:	e0bff943 	ldbu	r2,-27(fp)
  80649c:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8064a0:	e0bffd17 	ldw	r2,-12(fp)
  8064a4:	10800044 	addi	r2,r2,1
  8064a8:	e0bffd15 	stw	r2,-12(fp)
  8064ac:	e0bffd17 	ldw	r2,-12(fp)
  8064b0:	10800410 	cmplti	r2,r2,16
  8064b4:	103fba1e 	bne	r2,zero,8063a0 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8064b8:	e0bffe17 	ldw	r2,-8(fp)
  8064bc:	10800044 	addi	r2,r2,1
  8064c0:	e0bffe15 	stw	r2,-8(fp)
  8064c4:	e0bffe17 	ldw	r2,-8(fp)
  8064c8:	10800090 	cmplti	r2,r2,2
  8064cc:	103f991e 	bne	r2,zero,806334 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8064d0:	e037883a 	mov	sp,fp
  8064d4:	dfc00217 	ldw	ra,8(sp)
  8064d8:	df000117 	ldw	fp,4(sp)
  8064dc:	dc000017 	ldw	r16,0(sp)
  8064e0:	dec00304 	addi	sp,sp,12
  8064e4:	f800283a 	ret

008064e8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8064e8:	defffc04 	addi	sp,sp,-16
  8064ec:	dfc00315 	stw	ra,12(sp)
  8064f0:	df000215 	stw	fp,8(sp)
  8064f4:	df000204 	addi	fp,sp,8
  8064f8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8064fc:	e03ffe15 	stw	zero,-8(fp)
  806500:	00001d06 	br	806578 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  806504:	e0bffe17 	ldw	r2,-8(fp)
  806508:	10800048 	cmpgei	r2,r2,1
  80650c:	10000f1e 	bne	r2,zero,80654c <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  806510:	e0bffe17 	ldw	r2,-8(fp)
  806514:	10801924 	muli	r2,r2,100
  806518:	10c01004 	addi	r3,r2,64
  80651c:	e0bfff17 	ldw	r2,-4(fp)
  806520:	1889883a 	add	r4,r3,r2
  806524:	e0bffe17 	ldw	r2,-8(fp)
  806528:	10800044 	addi	r2,r2,1
  80652c:	10801924 	muli	r2,r2,100
  806530:	10c01004 	addi	r3,r2,64
  806534:	e0bfff17 	ldw	r2,-4(fp)
  806538:	1885883a 	add	r2,r3,r2
  80653c:	100b883a 	mov	r5,r2
  806540:	01801404 	movi	r6,80
  806544:	08039b40 	call	8039b4 <memcpy>
  806548:	00000806 	br	80656c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80654c:	e0bffe17 	ldw	r2,-8(fp)
  806550:	10801924 	muli	r2,r2,100
  806554:	10c01004 	addi	r3,r2,64
  806558:	e0bfff17 	ldw	r2,-4(fp)
  80655c:	1889883a 	add	r4,r3,r2
  806560:	01400804 	movi	r5,32
  806564:	01801404 	movi	r6,80
  806568:	080215c0 	call	80215c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80656c:	e0bffe17 	ldw	r2,-8(fp)
  806570:	10800044 	addi	r2,r2,1
  806574:	e0bffe15 	stw	r2,-8(fp)
  806578:	e0bffe17 	ldw	r2,-8(fp)
  80657c:	10800090 	cmplti	r2,r2,2
  806580:	103fe01e 	bne	r2,zero,806504 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  806584:	e0bfff17 	ldw	r2,-4(fp)
  806588:	10800883 	ldbu	r2,34(r2)
  80658c:	10bfffc4 	addi	r2,r2,-1
  806590:	1007883a 	mov	r3,r2
  806594:	e0bfff17 	ldw	r2,-4(fp)
  806598:	10c00885 	stb	r3,34(r2)
}
  80659c:	e037883a 	mov	sp,fp
  8065a0:	dfc00117 	ldw	ra,4(sp)
  8065a4:	df000017 	ldw	fp,0(sp)
  8065a8:	dec00204 	addi	sp,sp,8
  8065ac:	f800283a 	ret

008065b0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  8065b0:	defff804 	addi	sp,sp,-32
  8065b4:	dfc00715 	stw	ra,28(sp)
  8065b8:	df000615 	stw	fp,24(sp)
  8065bc:	df000604 	addi	fp,sp,24
  8065c0:	e13ffd15 	stw	r4,-12(fp)
  8065c4:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  8065c8:	e03ffc15 	stw	zero,-16(fp)
  8065cc:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  8065d0:	e0bffd17 	ldw	r2,-12(fp)
  8065d4:	10800a03 	ldbu	r2,40(r2)
  8065d8:	10803fcc 	andi	r2,r2,255
  8065dc:	1080201c 	xori	r2,r2,128
  8065e0:	10bfe004 	addi	r2,r2,-128
  8065e4:	108016d8 	cmpnei	r2,r2,91
  8065e8:	1000491e 	bne	r2,zero,806710 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  8065ec:	e0bffd17 	ldw	r2,-12(fp)
  8065f0:	10800a04 	addi	r2,r2,40
  8065f4:	10800044 	addi	r2,r2,1
  8065f8:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  8065fc:	00000d06 	br	806634 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  806600:	e0bffc17 	ldw	r2,-16(fp)
  806604:	10c002a4 	muli	r3,r2,10
  806608:	e0bffa17 	ldw	r2,-24(fp)
  80660c:	10800003 	ldbu	r2,0(r2)
  806610:	10803fcc 	andi	r2,r2,255
  806614:	1080201c 	xori	r2,r2,128
  806618:	10bfe004 	addi	r2,r2,-128
  80661c:	1885883a 	add	r2,r3,r2
  806620:	10bff404 	addi	r2,r2,-48
  806624:	e0bffc15 	stw	r2,-16(fp)
  806628:	e0bffa17 	ldw	r2,-24(fp)
  80662c:	10800044 	addi	r2,r2,1
  806630:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  806634:	e0bffa17 	ldw	r2,-24(fp)
  806638:	10800003 	ldbu	r2,0(r2)
  80663c:	10803fcc 	andi	r2,r2,255
  806640:	1080201c 	xori	r2,r2,128
  806644:	10bfe004 	addi	r2,r2,-128
  806648:	1007883a 	mov	r3,r2
  80664c:	00802074 	movhi	r2,129
  806650:	10aa8904 	addi	r2,r2,-21980
  806654:	10800017 	ldw	r2,0(r2)
  806658:	1885883a 	add	r2,r3,r2
  80665c:	10800003 	ldbu	r2,0(r2)
  806660:	10803fcc 	andi	r2,r2,255
  806664:	1080010c 	andi	r2,r2,4
  806668:	1004c03a 	cmpne	r2,r2,zero
  80666c:	103fe41e 	bne	r2,zero,806600 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  806670:	e0bffa17 	ldw	r2,-24(fp)
  806674:	10800003 	ldbu	r2,0(r2)
  806678:	10803fcc 	andi	r2,r2,255
  80667c:	1080201c 	xori	r2,r2,128
  806680:	10bfe004 	addi	r2,r2,-128
  806684:	10800ed8 	cmpnei	r2,r2,59
  806688:	1000231e 	bne	r2,zero,806718 <lcd_handle_escape+0x168>
    {
      ptr++;
  80668c:	e0bffa17 	ldw	r2,-24(fp)
  806690:	10800044 	addi	r2,r2,1
  806694:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  806698:	00000d06 	br	8066d0 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80669c:	e0bffb17 	ldw	r2,-20(fp)
  8066a0:	10c002a4 	muli	r3,r2,10
  8066a4:	e0bffa17 	ldw	r2,-24(fp)
  8066a8:	10800003 	ldbu	r2,0(r2)
  8066ac:	10803fcc 	andi	r2,r2,255
  8066b0:	1080201c 	xori	r2,r2,128
  8066b4:	10bfe004 	addi	r2,r2,-128
  8066b8:	1885883a 	add	r2,r3,r2
  8066bc:	10bff404 	addi	r2,r2,-48
  8066c0:	e0bffb15 	stw	r2,-20(fp)
  8066c4:	e0bffa17 	ldw	r2,-24(fp)
  8066c8:	10800044 	addi	r2,r2,1
  8066cc:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8066d0:	e0bffa17 	ldw	r2,-24(fp)
  8066d4:	10800003 	ldbu	r2,0(r2)
  8066d8:	10803fcc 	andi	r2,r2,255
  8066dc:	1080201c 	xori	r2,r2,128
  8066e0:	10bfe004 	addi	r2,r2,-128
  8066e4:	1007883a 	mov	r3,r2
  8066e8:	00802074 	movhi	r2,129
  8066ec:	10aa8904 	addi	r2,r2,-21980
  8066f0:	10800017 	ldw	r2,0(r2)
  8066f4:	1885883a 	add	r2,r3,r2
  8066f8:	10800003 	ldbu	r2,0(r2)
  8066fc:	10803fcc 	andi	r2,r2,255
  806700:	1080010c 	andi	r2,r2,4
  806704:	1004c03a 	cmpne	r2,r2,zero
  806708:	103fe41e 	bne	r2,zero,80669c <lcd_handle_escape+0xec>
  80670c:	00000206 	br	806718 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  806710:	00bfffc4 	movi	r2,-1
  806714:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  806718:	e0bffe07 	ldb	r2,-8(fp)
  80671c:	e0bfff15 	stw	r2,-4(fp)
  806720:	e0ffff17 	ldw	r3,-4(fp)
  806724:	188012a0 	cmpeqi	r2,r3,74
  806728:	10002f1e 	bne	r2,zero,8067e8 <lcd_handle_escape+0x238>
  80672c:	e0ffff17 	ldw	r3,-4(fp)
  806730:	188012c8 	cmpgei	r2,r3,75
  806734:	1000041e 	bne	r2,zero,806748 <lcd_handle_escape+0x198>
  806738:	e0ffff17 	ldw	r3,-4(fp)
  80673c:	18801220 	cmpeqi	r2,r3,72
  806740:	1000081e 	bne	r2,zero,806764 <lcd_handle_escape+0x1b4>
  806744:	00004906 	br	80686c <lcd_handle_escape+0x2bc>
  806748:	e0ffff17 	ldw	r3,-4(fp)
  80674c:	188012e0 	cmpeqi	r2,r3,75
  806750:	10002b1e 	bne	r2,zero,806800 <lcd_handle_escape+0x250>
  806754:	e0ffff17 	ldw	r3,-4(fp)
  806758:	188019a0 	cmpeqi	r2,r3,102
  80675c:	1000011e 	bne	r2,zero,806764 <lcd_handle_escape+0x1b4>
  806760:	00004206 	br	80686c <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  806764:	e0bffb17 	ldw	r2,-20(fp)
  806768:	10800050 	cmplti	r2,r2,1
  80676c:	1000051e 	bne	r2,zero,806784 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  806770:	e0bffb17 	ldw	r2,-20(fp)
  806774:	10bfffc4 	addi	r2,r2,-1
  806778:	1007883a 	mov	r3,r2
  80677c:	e0bffd17 	ldw	r2,-12(fp)
  806780:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  806784:	e0bffc17 	ldw	r2,-16(fp)
  806788:	10800050 	cmplti	r2,r2,1
  80678c:	1000371e 	bne	r2,zero,80686c <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  806790:	e0bffc17 	ldw	r2,-16(fp)
  806794:	10bfffc4 	addi	r2,r2,-1
  806798:	1007883a 	mov	r3,r2
  80679c:	e0bffd17 	ldw	r2,-12(fp)
  8067a0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8067a4:	e0bffd17 	ldw	r2,-12(fp)
  8067a8:	10800883 	ldbu	r2,34(r2)
  8067ac:	10803fcc 	andi	r2,r2,255
  8067b0:	10800170 	cmpltui	r2,r2,5
  8067b4:	1000061e 	bne	r2,zero,8067d0 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  8067b8:	e0fffd17 	ldw	r3,-12(fp)
  8067bc:	00800104 	movi	r2,4
  8067c0:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  8067c4:	00000206 	br	8067d0 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  8067c8:	e13ffd17 	ldw	r4,-12(fp)
  8067cc:	08064e80 	call	8064e8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  8067d0:	e0bffd17 	ldw	r2,-12(fp)
  8067d4:	10800883 	ldbu	r2,34(r2)
  8067d8:	10803fcc 	andi	r2,r2,255
  8067dc:	108000e8 	cmpgeui	r2,r2,3
  8067e0:	103ff91e 	bne	r2,zero,8067c8 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  8067e4:	00002106 	br	80686c <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  8067e8:	e0bffc17 	ldw	r2,-16(fp)
  8067ec:	10800098 	cmpnei	r2,r2,2
  8067f0:	10001e1e 	bne	r2,zero,80686c <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  8067f4:	e13ffd17 	ldw	r4,-12(fp)
  8067f8:	08062380 	call	806238 <lcd_clear_screen>
    break;
  8067fc:	00001b06 	br	80686c <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  806800:	e0bffc17 	ldw	r2,-16(fp)
  806804:	10800048 	cmpgei	r2,r2,1
  806808:	1000181e 	bne	r2,zero,80686c <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80680c:	e0bffd17 	ldw	r2,-12(fp)
  806810:	10800843 	ldbu	r2,33(r2)
  806814:	10803fcc 	andi	r2,r2,255
  806818:	10801428 	cmpgeui	r2,r2,80
  80681c:	1000131e 	bne	r2,zero,80686c <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  806820:	e0bffd17 	ldw	r2,-12(fp)
  806824:	10800883 	ldbu	r2,34(r2)
  806828:	10803fcc 	andi	r2,r2,255
  80682c:	10801924 	muli	r2,r2,100
  806830:	10c01004 	addi	r3,r2,64
  806834:	e0bffd17 	ldw	r2,-12(fp)
  806838:	1887883a 	add	r3,r3,r2
  80683c:	e0bffd17 	ldw	r2,-12(fp)
  806840:	10800843 	ldbu	r2,33(r2)
  806844:	10803fcc 	andi	r2,r2,255
  806848:	1889883a 	add	r4,r3,r2
  80684c:	e0bffd17 	ldw	r2,-12(fp)
  806850:	10800843 	ldbu	r2,33(r2)
  806854:	10c03fcc 	andi	r3,r2,255
  806858:	00801404 	movi	r2,80
  80685c:	10c5c83a 	sub	r2,r2,r3
  806860:	100d883a 	mov	r6,r2
  806864:	01400804 	movi	r5,32
  806868:	080215c0 	call	80215c <memset>
    }
    break;
  }
}
  80686c:	e037883a 	mov	sp,fp
  806870:	dfc00117 	ldw	ra,4(sp)
  806874:	df000017 	ldw	fp,0(sp)
  806878:	dec00204 	addi	sp,sp,8
  80687c:	f800283a 	ret

00806880 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  806880:	defff204 	addi	sp,sp,-56
  806884:	dfc00d15 	stw	ra,52(sp)
  806888:	df000c15 	stw	fp,48(sp)
  80688c:	dc000b15 	stw	r16,44(sp)
  806890:	df000b04 	addi	fp,sp,44
  806894:	e13ffc15 	stw	r4,-16(fp)
  806898:	e17ffd15 	stw	r5,-12(fp)
  80689c:	e1bffe15 	stw	r6,-8(fp)
  8068a0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8068a4:	e0bffe17 	ldw	r2,-8(fp)
  8068a8:	1007883a 	mov	r3,r2
  8068ac:	e0bffd17 	ldw	r2,-12(fp)
  8068b0:	10c5883a 	add	r2,r2,r3
  8068b4:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  8068b8:	e0fffc17 	ldw	r3,-16(fp)
  8068bc:	00800044 	movi	r2,1
  8068c0:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  8068c4:	0000a206 	br	806b50 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  8068c8:	e0bffd17 	ldw	r2,-12(fp)
  8068cc:	10800003 	ldbu	r2,0(r2)
  8068d0:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  8068d4:	e0bffc17 	ldw	r2,-16(fp)
  8068d8:	10800903 	ldbu	r2,36(r2)
  8068dc:	10803fcc 	andi	r2,r2,255
  8068e0:	1080201c 	xori	r2,r2,128
  8068e4:	10bfe004 	addi	r2,r2,-128
  8068e8:	1004803a 	cmplt	r2,r2,zero
  8068ec:	10003b1e 	bne	r2,zero,8069dc <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  8068f0:	e0bffc17 	ldw	r2,-16(fp)
  8068f4:	10800903 	ldbu	r2,36(r2)
  8068f8:	10803fcc 	andi	r2,r2,255
  8068fc:	1080201c 	xori	r2,r2,128
  806900:	10bfe004 	addi	r2,r2,-128
  806904:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  806908:	e0bff717 	ldw	r2,-36(fp)
  80690c:	1004c03a 	cmpne	r2,r2,zero
  806910:	1000031e 	bne	r2,zero,806920 <altera_avalon_lcd_16207_write+0xa0>
  806914:	e0bff807 	ldb	r2,-32(fp)
  806918:	108016d8 	cmpnei	r2,r2,91
  80691c:	1000111e 	bne	r2,zero,806964 <altera_avalon_lcd_16207_write+0xe4>
  806920:	e0bff717 	ldw	r2,-36(fp)
  806924:	1005003a 	cmpeq	r2,r2,zero
  806928:	10001a1e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x114>
  80692c:	e0bff807 	ldb	r2,-32(fp)
  806930:	1007883a 	mov	r3,r2
  806934:	00802074 	movhi	r2,129
  806938:	10aa8904 	addi	r2,r2,-21980
  80693c:	10800017 	ldw	r2,0(r2)
  806940:	1885883a 	add	r2,r3,r2
  806944:	10800003 	ldbu	r2,0(r2)
  806948:	10803fcc 	andi	r2,r2,255
  80694c:	1080010c 	andi	r2,r2,4
  806950:	1004c03a 	cmpne	r2,r2,zero
  806954:	10000f1e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x114>
  806958:	e0bff807 	ldb	r2,-32(fp)
  80695c:	10800ee0 	cmpeqi	r2,r2,59
  806960:	10000c1e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  806964:	e0fff717 	ldw	r3,-36(fp)
  806968:	e0bffc17 	ldw	r2,-16(fp)
  80696c:	1885883a 	add	r2,r3,r2
  806970:	10800a04 	addi	r2,r2,40
  806974:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  806978:	e17ff807 	ldb	r5,-32(fp)
  80697c:	e13ffc17 	ldw	r4,-16(fp)
  806980:	08065b00 	call	8065b0 <lcd_handle_escape>

        sp->esccount = -1;
  806984:	e0fffc17 	ldw	r3,-16(fp)
  806988:	00bfffc4 	movi	r2,-1
  80698c:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  806990:	00006c06 	br	806b44 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  806994:	e0bffc17 	ldw	r2,-16(fp)
  806998:	10800903 	ldbu	r2,36(r2)
  80699c:	10803fcc 	andi	r2,r2,255
  8069a0:	108001e8 	cmpgeui	r2,r2,7
  8069a4:	1000671e 	bne	r2,zero,806b44 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  8069a8:	e0fff717 	ldw	r3,-36(fp)
  8069ac:	e0bffc17 	ldw	r2,-16(fp)
  8069b0:	1885883a 	add	r2,r3,r2
  8069b4:	10c00a04 	addi	r3,r2,40
  8069b8:	e0bff803 	ldbu	r2,-32(fp)
  8069bc:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  8069c0:	e0bffc17 	ldw	r2,-16(fp)
  8069c4:	10800903 	ldbu	r2,36(r2)
  8069c8:	10800044 	addi	r2,r2,1
  8069cc:	1007883a 	mov	r3,r2
  8069d0:	e0bffc17 	ldw	r2,-16(fp)
  8069d4:	10c00905 	stb	r3,36(r2)
  8069d8:	00005a06 	br	806b44 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  8069dc:	e0bff807 	ldb	r2,-32(fp)
  8069e0:	108006d8 	cmpnei	r2,r2,27
  8069e4:	1000031e 	bne	r2,zero,8069f4 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  8069e8:	e0bffc17 	ldw	r2,-16(fp)
  8069ec:	10000905 	stb	zero,36(r2)
  8069f0:	00005406 	br	806b44 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  8069f4:	e0bff807 	ldb	r2,-32(fp)
  8069f8:	10800358 	cmpnei	r2,r2,13
  8069fc:	1000031e 	bne	r2,zero,806a0c <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  806a00:	e0bffc17 	ldw	r2,-16(fp)
  806a04:	10000845 	stb	zero,33(r2)
  806a08:	00004e06 	br	806b44 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  806a0c:	e0bff807 	ldb	r2,-32(fp)
  806a10:	10800298 	cmpnei	r2,r2,10
  806a14:	1000101e 	bne	r2,zero,806a58 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  806a18:	e0bffc17 	ldw	r2,-16(fp)
  806a1c:	10000845 	stb	zero,33(r2)
      sp->y++;
  806a20:	e0bffc17 	ldw	r2,-16(fp)
  806a24:	10800883 	ldbu	r2,34(r2)
  806a28:	10800044 	addi	r2,r2,1
  806a2c:	1007883a 	mov	r3,r2
  806a30:	e0bffc17 	ldw	r2,-16(fp)
  806a34:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  806a38:	e0bffc17 	ldw	r2,-16(fp)
  806a3c:	10800883 	ldbu	r2,34(r2)
  806a40:	10803fcc 	andi	r2,r2,255
  806a44:	108000f0 	cmpltui	r2,r2,3
  806a48:	10003e1e 	bne	r2,zero,806b44 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  806a4c:	e13ffc17 	ldw	r4,-16(fp)
  806a50:	08064e80 	call	8064e8 <lcd_scroll_up>
  806a54:	00003b06 	br	806b44 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  806a58:	e0bff807 	ldb	r2,-32(fp)
  806a5c:	10800218 	cmpnei	r2,r2,8
  806a60:	10000c1e 	bne	r2,zero,806a94 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  806a64:	e0bffc17 	ldw	r2,-16(fp)
  806a68:	10800843 	ldbu	r2,33(r2)
  806a6c:	10803fcc 	andi	r2,r2,255
  806a70:	1005003a 	cmpeq	r2,r2,zero
  806a74:	1000331e 	bne	r2,zero,806b44 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  806a78:	e0bffc17 	ldw	r2,-16(fp)
  806a7c:	10800843 	ldbu	r2,33(r2)
  806a80:	10bfffc4 	addi	r2,r2,-1
  806a84:	1007883a 	mov	r3,r2
  806a88:	e0bffc17 	ldw	r2,-16(fp)
  806a8c:	10c00845 	stb	r3,33(r2)
  806a90:	00002c06 	br	806b44 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  806a94:	e0bff807 	ldb	r2,-32(fp)
  806a98:	1007883a 	mov	r3,r2
  806a9c:	00802074 	movhi	r2,129
  806aa0:	10aa8904 	addi	r2,r2,-21980
  806aa4:	10800017 	ldw	r2,0(r2)
  806aa8:	1885883a 	add	r2,r3,r2
  806aac:	10800003 	ldbu	r2,0(r2)
  806ab0:	10803fcc 	andi	r2,r2,255
  806ab4:	1080201c 	xori	r2,r2,128
  806ab8:	10bfe004 	addi	r2,r2,-128
  806abc:	108025cc 	andi	r2,r2,151
  806ac0:	1005003a 	cmpeq	r2,r2,zero
  806ac4:	10001f1e 	bne	r2,zero,806b44 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  806ac8:	e0bffc17 	ldw	r2,-16(fp)
  806acc:	10800883 	ldbu	r2,34(r2)
  806ad0:	10803fcc 	andi	r2,r2,255
  806ad4:	108000b0 	cmpltui	r2,r2,2
  806ad8:	1000021e 	bne	r2,zero,806ae4 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  806adc:	e13ffc17 	ldw	r4,-16(fp)
  806ae0:	08064e80 	call	8064e8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  806ae4:	e0bffc17 	ldw	r2,-16(fp)
  806ae8:	10800843 	ldbu	r2,33(r2)
  806aec:	10803fcc 	andi	r2,r2,255
  806af0:	10801428 	cmpgeui	r2,r2,80
  806af4:	10000d1e 	bne	r2,zero,806b2c <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  806af8:	e0bffc17 	ldw	r2,-16(fp)
  806afc:	10800883 	ldbu	r2,34(r2)
  806b00:	11003fcc 	andi	r4,r2,255
  806b04:	e0bffc17 	ldw	r2,-16(fp)
  806b08:	10800843 	ldbu	r2,33(r2)
  806b0c:	11403fcc 	andi	r5,r2,255
  806b10:	e0fffc17 	ldw	r3,-16(fp)
  806b14:	20801924 	muli	r2,r4,100
  806b18:	10c5883a 	add	r2,r2,r3
  806b1c:	1145883a 	add	r2,r2,r5
  806b20:	10c01004 	addi	r3,r2,64
  806b24:	e0bff803 	ldbu	r2,-32(fp)
  806b28:	18800005 	stb	r2,0(r3)

      sp->x++;
  806b2c:	e0bffc17 	ldw	r2,-16(fp)
  806b30:	10800843 	ldbu	r2,33(r2)
  806b34:	10800044 	addi	r2,r2,1
  806b38:	1007883a 	mov	r3,r2
  806b3c:	e0bffc17 	ldw	r2,-16(fp)
  806b40:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  806b44:	e0bffd17 	ldw	r2,-12(fp)
  806b48:	10800044 	addi	r2,r2,1
  806b4c:	e0bffd15 	stw	r2,-12(fp)
  806b50:	e0fffd17 	ldw	r3,-12(fp)
  806b54:	e0bffb17 	ldw	r2,-20(fp)
  806b58:	18bf5b36 	bltu	r3,r2,8068c8 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  806b5c:	00800404 	movi	r2,16
  806b60:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806b64:	e03ffa15 	stw	zero,-24(fp)
  806b68:	00003606 	br	806c44 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  806b6c:	00801404 	movi	r2,80
  806b70:	e0bff615 	stw	r2,-40(fp)
  806b74:	00001106 	br	806bbc <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  806b78:	e13ffa17 	ldw	r4,-24(fp)
  806b7c:	e0bff617 	ldw	r2,-40(fp)
  806b80:	117fffc4 	addi	r5,r2,-1
  806b84:	e0fffc17 	ldw	r3,-16(fp)
  806b88:	20801924 	muli	r2,r4,100
  806b8c:	10c5883a 	add	r2,r2,r3
  806b90:	1145883a 	add	r2,r2,r5
  806b94:	10801004 	addi	r2,r2,64
  806b98:	10800003 	ldbu	r2,0(r2)
  806b9c:	10803fcc 	andi	r2,r2,255
  806ba0:	1080201c 	xori	r2,r2,128
  806ba4:	10bfe004 	addi	r2,r2,-128
  806ba8:	10800818 	cmpnei	r2,r2,32
  806bac:	1000061e 	bne	r2,zero,806bc8 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  806bb0:	e0bff617 	ldw	r2,-40(fp)
  806bb4:	10bfffc4 	addi	r2,r2,-1
  806bb8:	e0bff615 	stw	r2,-40(fp)
  806bbc:	e0bff617 	ldw	r2,-40(fp)
  806bc0:	10800048 	cmpgei	r2,r2,1
  806bc4:	103fec1e 	bne	r2,zero,806b78 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  806bc8:	e0bff617 	ldw	r2,-40(fp)
  806bcc:	10800448 	cmpgei	r2,r2,17
  806bd0:	1000031e 	bne	r2,zero,806be0 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  806bd4:	00800404 	movi	r2,16
  806bd8:	e0bff615 	stw	r2,-40(fp)
  806bdc:	00000306 	br	806bec <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  806be0:	e0bff617 	ldw	r2,-40(fp)
  806be4:	10800044 	addi	r2,r2,1
  806be8:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  806bec:	e13ffa17 	ldw	r4,-24(fp)
  806bf0:	e0bff617 	ldw	r2,-40(fp)
  806bf4:	100b883a 	mov	r5,r2
  806bf8:	e0fffc17 	ldw	r3,-16(fp)
  806bfc:	20801924 	muli	r2,r4,100
  806c00:	10c5883a 	add	r2,r2,r3
  806c04:	10802404 	addi	r2,r2,144
  806c08:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  806c0c:	e0fff917 	ldw	r3,-28(fp)
  806c10:	e0bff617 	ldw	r2,-40(fp)
  806c14:	1880020e 	bge	r3,r2,806c20 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  806c18:	e0bff617 	ldw	r2,-40(fp)
  806c1c:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  806c20:	e0bffa17 	ldw	r2,-24(fp)
  806c24:	e0fffc17 	ldw	r3,-16(fp)
  806c28:	10801924 	muli	r2,r2,100
  806c2c:	10c5883a 	add	r2,r2,r3
  806c30:	10802404 	addi	r2,r2,144
  806c34:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806c38:	e0bffa17 	ldw	r2,-24(fp)
  806c3c:	10800044 	addi	r2,r2,1
  806c40:	e0bffa15 	stw	r2,-24(fp)
  806c44:	e0bffa17 	ldw	r2,-24(fp)
  806c48:	10800090 	cmplti	r2,r2,2
  806c4c:	103fc71e 	bne	r2,zero,806b6c <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  806c50:	e0bff917 	ldw	r2,-28(fp)
  806c54:	10800448 	cmpgei	r2,r2,17
  806c58:	1000031e 	bne	r2,zero,806c68 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  806c5c:	e0bffc17 	ldw	r2,-16(fp)
  806c60:	10000985 	stb	zero,38(r2)
  806c64:	00002d06 	br	806d1c <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  806c68:	e0bff917 	ldw	r2,-28(fp)
  806c6c:	1085883a 	add	r2,r2,r2
  806c70:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  806c74:	e0bff917 	ldw	r2,-28(fp)
  806c78:	1007883a 	mov	r3,r2
  806c7c:	e0bffc17 	ldw	r2,-16(fp)
  806c80:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806c84:	e03ffa15 	stw	zero,-24(fp)
  806c88:	00002106 	br	806d10 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  806c8c:	e0bffa17 	ldw	r2,-24(fp)
  806c90:	e0fffc17 	ldw	r3,-16(fp)
  806c94:	10801924 	muli	r2,r2,100
  806c98:	10c5883a 	add	r2,r2,r3
  806c9c:	10802404 	addi	r2,r2,144
  806ca0:	10800043 	ldbu	r2,1(r2)
  806ca4:	10803fcc 	andi	r2,r2,255
  806ca8:	1080201c 	xori	r2,r2,128
  806cac:	10bfe004 	addi	r2,r2,-128
  806cb0:	10800450 	cmplti	r2,r2,17
  806cb4:	1000131e 	bne	r2,zero,806d04 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  806cb8:	e43ffa17 	ldw	r16,-24(fp)
  806cbc:	e0bffa17 	ldw	r2,-24(fp)
  806cc0:	e0fffc17 	ldw	r3,-16(fp)
  806cc4:	10801924 	muli	r2,r2,100
  806cc8:	10c5883a 	add	r2,r2,r3
  806ccc:	10802404 	addi	r2,r2,144
  806cd0:	10800043 	ldbu	r2,1(r2)
  806cd4:	10803fcc 	andi	r2,r2,255
  806cd8:	1080201c 	xori	r2,r2,128
  806cdc:	10bfe004 	addi	r2,r2,-128
  806ce0:	1008923a 	slli	r4,r2,8
  806ce4:	e17ff917 	ldw	r5,-28(fp)
  806ce8:	08089b00 	call	8089b0 <__divsi3>
  806cec:	1009883a 	mov	r4,r2
  806cf0:	e0fffc17 	ldw	r3,-16(fp)
  806cf4:	80801924 	muli	r2,r16,100
  806cf8:	10c5883a 	add	r2,r2,r3
  806cfc:	10802404 	addi	r2,r2,144
  806d00:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806d04:	e0bffa17 	ldw	r2,-24(fp)
  806d08:	10800044 	addi	r2,r2,1
  806d0c:	e0bffa15 	stw	r2,-24(fp)
  806d10:	e0bffa17 	ldw	r2,-24(fp)
  806d14:	10800090 	cmplti	r2,r2,2
  806d18:	103fdc1e 	bne	r2,zero,806c8c <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  806d1c:	e0bffc17 	ldw	r2,-16(fp)
  806d20:	10800943 	ldbu	r2,37(r2)
  806d24:	10803fcc 	andi	r2,r2,255
  806d28:	1080201c 	xori	r2,r2,128
  806d2c:	10bfe004 	addi	r2,r2,-128
  806d30:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  806d34:	e13ffc17 	ldw	r4,-16(fp)
  806d38:	08062fc0 	call	8062fc <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  806d3c:	e0bffc17 	ldw	r2,-16(fp)
  806d40:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  806d44:	e0bffc17 	ldw	r2,-16(fp)
  806d48:	10800943 	ldbu	r2,37(r2)
  806d4c:	10c03fcc 	andi	r3,r2,255
  806d50:	18c0201c 	xori	r3,r3,128
  806d54:	18ffe004 	addi	r3,r3,-128
  806d58:	e0bff517 	ldw	r2,-44(fp)
  806d5c:	18800426 	beq	r3,r2,806d70 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  806d60:	e0fffc17 	ldw	r3,-16(fp)
  806d64:	00800044 	movi	r2,1
  806d68:	188009c5 	stb	r2,39(r3)
  }
  806d6c:	003feb06 	br	806d1c <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  806d70:	e0bffe17 	ldw	r2,-8(fp)
}
  806d74:	e037883a 	mov	sp,fp
  806d78:	dfc00217 	ldw	ra,8(sp)
  806d7c:	df000117 	ldw	fp,4(sp)
  806d80:	dc000017 	ldw	r16,0(sp)
  806d84:	dec00304 	addi	sp,sp,12
  806d88:	f800283a 	ret

00806d8c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  806d8c:	defffc04 	addi	sp,sp,-16
  806d90:	dfc00315 	stw	ra,12(sp)
  806d94:	df000215 	stw	fp,8(sp)
  806d98:	df000204 	addi	fp,sp,8
  806d9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  806da0:	e0bfff17 	ldw	r2,-4(fp)
  806da4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  806da8:	e0bffe17 	ldw	r2,-8(fp)
  806dac:	10800943 	ldbu	r2,37(r2)
  806db0:	10803fcc 	andi	r2,r2,255
  806db4:	1080201c 	xori	r2,r2,128
  806db8:	10bfe004 	addi	r2,r2,-128
  806dbc:	10c00044 	addi	r3,r2,1
  806dc0:	e0bffe17 	ldw	r2,-8(fp)
  806dc4:	10800983 	ldbu	r2,38(r2)
  806dc8:	10803fcc 	andi	r2,r2,255
  806dcc:	1080201c 	xori	r2,r2,128
  806dd0:	10bfe004 	addi	r2,r2,-128
  806dd4:	18800316 	blt	r3,r2,806de4 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  806dd8:	e0bffe17 	ldw	r2,-8(fp)
  806ddc:	10000945 	stb	zero,37(r2)
  806de0:	00000606 	br	806dfc <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  806de4:	e0bffe17 	ldw	r2,-8(fp)
  806de8:	10800943 	ldbu	r2,37(r2)
  806dec:	10800044 	addi	r2,r2,1
  806df0:	1007883a 	mov	r3,r2
  806df4:	e0bffe17 	ldw	r2,-8(fp)
  806df8:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  806dfc:	e0bffe17 	ldw	r2,-8(fp)
  806e00:	10800983 	ldbu	r2,38(r2)
  806e04:	10803fcc 	andi	r2,r2,255
  806e08:	1080201c 	xori	r2,r2,128
  806e0c:	10bfe004 	addi	r2,r2,-128
  806e10:	10800050 	cmplti	r2,r2,1
  806e14:	1000091e 	bne	r2,zero,806e3c <alt_lcd_16207_timeout+0xb0>
  806e18:	e0bffe17 	ldw	r2,-8(fp)
  806e1c:	108009c3 	ldbu	r2,39(r2)
  806e20:	10803fcc 	andi	r2,r2,255
  806e24:	1080201c 	xori	r2,r2,128
  806e28:	10bfe004 	addi	r2,r2,-128
  806e2c:	1004c03a 	cmpne	r2,r2,zero
  806e30:	1000021e 	bne	r2,zero,806e3c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  806e34:	e13ffe17 	ldw	r4,-8(fp)
  806e38:	08062fc0 	call	8062fc <lcd_repaint_screen>

  return sp->period;
  806e3c:	e0bffe17 	ldw	r2,-8(fp)
  806e40:	10800717 	ldw	r2,28(r2)
}
  806e44:	e037883a 	mov	sp,fp
  806e48:	dfc00117 	ldw	ra,4(sp)
  806e4c:	df000017 	ldw	fp,0(sp)
  806e50:	dec00204 	addi	sp,sp,8
  806e54:	f800283a 	ret

00806e58 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  806e58:	defffc04 	addi	sp,sp,-16
  806e5c:	dfc00315 	stw	ra,12(sp)
  806e60:	df000215 	stw	fp,8(sp)
  806e64:	df000204 	addi	fp,sp,8
  806e68:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  806e6c:	e0bfff17 	ldw	r2,-4(fp)
  806e70:	10800017 	ldw	r2,0(r2)
  806e74:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  806e78:	e0bfff17 	ldw	r2,-4(fp)
  806e7c:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  806e80:	010ea604 	movi	r4,15000
  806e84:	08083600 	call	808360 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806e88:	e0bffe17 	ldw	r2,-8(fp)
  806e8c:	1007883a 	mov	r3,r2
  806e90:	00800c04 	movi	r2,48
  806e94:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  806e98:	01040104 	movi	r4,4100
  806e9c:	08083600 	call	808360 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806ea0:	e0bffe17 	ldw	r2,-8(fp)
  806ea4:	1007883a 	mov	r3,r2
  806ea8:	00800c04 	movi	r2,48
  806eac:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  806eb0:	0100fa04 	movi	r4,1000
  806eb4:	08083600 	call	808360 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806eb8:	e0bffe17 	ldw	r2,-8(fp)
  806ebc:	1007883a 	mov	r3,r2
  806ec0:	00800c04 	movi	r2,48
  806ec4:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  806ec8:	e13fff17 	ldw	r4,-4(fp)
  806ecc:	01400e04 	movi	r5,56
  806ed0:	08060ac0 	call	8060ac <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  806ed4:	e13fff17 	ldw	r4,-4(fp)
  806ed8:	01400204 	movi	r5,8
  806edc:	08060ac0 	call	8060ac <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  806ee0:	e13fff17 	ldw	r4,-4(fp)
  806ee4:	08062380 	call	806238 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  806ee8:	e13fff17 	ldw	r4,-4(fp)
  806eec:	01400184 	movi	r5,6
  806ef0:	08060ac0 	call	8060ac <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  806ef4:	e13fff17 	ldw	r4,-4(fp)
  806ef8:	01400304 	movi	r5,12
  806efc:	08060ac0 	call	8060ac <lcd_write_command>

  sp->esccount = -1;
  806f00:	e0ffff17 	ldw	r3,-4(fp)
  806f04:	00bfffc4 	movi	r2,-1
  806f08:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  806f0c:	e0bfff17 	ldw	r2,-4(fp)
  806f10:	11000a04 	addi	r4,r2,40
  806f14:	000b883a 	mov	r5,zero
  806f18:	01800204 	movi	r6,8
  806f1c:	080215c0 	call	80215c <memset>

  sp->scrollpos = 0;
  806f20:	e0bfff17 	ldw	r2,-4(fp)
  806f24:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  806f28:	e0bfff17 	ldw	r2,-4(fp)
  806f2c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  806f30:	e0bfff17 	ldw	r2,-4(fp)
  806f34:	100009c5 	stb	zero,39(r2)
  806f38:	00802074 	movhi	r2,129
  806f3c:	10b1b704 	addi	r2,r2,-14628
  806f40:	10800017 	ldw	r2,0(r2)
  806f44:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  806f48:	01400284 	movi	r5,10
  806f4c:	0808a700 	call	808a70 <__udivsi3>
  806f50:	1007883a 	mov	r3,r2
  806f54:	e0bfff17 	ldw	r2,-4(fp)
  806f58:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  806f5c:	e0bfff17 	ldw	r2,-4(fp)
  806f60:	11000104 	addi	r4,r2,4
  806f64:	e0bfff17 	ldw	r2,-4(fp)
  806f68:	10800717 	ldw	r2,28(r2)
  806f6c:	100b883a 	mov	r5,r2
  806f70:	01802034 	movhi	r6,128
  806f74:	319b6304 	addi	r6,r6,28044
  806f78:	e1ffff17 	ldw	r7,-4(fp)
  806f7c:	08044640 	call	804464 <alt_alarm_start>
}
  806f80:	e037883a 	mov	sp,fp
  806f84:	dfc00117 	ldw	ra,4(sp)
  806f88:	df000017 	ldw	fp,0(sp)
  806f8c:	dec00204 	addi	sp,sp,8
  806f90:	f800283a 	ret

00806f94 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806f94:	defffa04 	addi	sp,sp,-24
  806f98:	dfc00515 	stw	ra,20(sp)
  806f9c:	df000415 	stw	fp,16(sp)
  806fa0:	df000404 	addi	fp,sp,16
  806fa4:	e13ffd15 	stw	r4,-12(fp)
  806fa8:	e17ffe15 	stw	r5,-8(fp)
  806fac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  806fb0:	e0bffd17 	ldw	r2,-12(fp)
  806fb4:	10800017 	ldw	r2,0(r2)
  806fb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  806fbc:	e0bffc17 	ldw	r2,-16(fp)
  806fc0:	11000a04 	addi	r4,r2,40
  806fc4:	e0bffd17 	ldw	r2,-12(fp)
  806fc8:	11c00217 	ldw	r7,8(r2)
  806fcc:	e17ffe17 	ldw	r5,-8(fp)
  806fd0:	e1bfff17 	ldw	r6,-4(fp)
  806fd4:	08068800 	call	806880 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  806fd8:	e037883a 	mov	sp,fp
  806fdc:	dfc00117 	ldw	ra,4(sp)
  806fe0:	df000017 	ldw	fp,0(sp)
  806fe4:	dec00204 	addi	sp,sp,8
  806fe8:	f800283a 	ret

00806fec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  806fec:	defffa04 	addi	sp,sp,-24
  806ff0:	dfc00515 	stw	ra,20(sp)
  806ff4:	df000415 	stw	fp,16(sp)
  806ff8:	df000404 	addi	fp,sp,16
  806ffc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  807000:	e0bfff17 	ldw	r2,-4(fp)
  807004:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  807008:	e0bfff17 	ldw	r2,-4(fp)
  80700c:	10800104 	addi	r2,r2,4
  807010:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807014:	0005303a 	rdctl	r2,status
  807018:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80701c:	e0fffd17 	ldw	r3,-12(fp)
  807020:	00bfff84 	movi	r2,-2
  807024:	1884703a 	and	r2,r3,r2
  807028:	1001703a 	wrctl	status,r2
  
  return context;
  80702c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  807030:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  807034:	08052740 	call	805274 <alt_tick>
  807038:	e0bffe17 	ldw	r2,-8(fp)
  80703c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807040:	e0bffc17 	ldw	r2,-16(fp)
  807044:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  807048:	e037883a 	mov	sp,fp
  80704c:	dfc00117 	ldw	ra,4(sp)
  807050:	df000017 	ldw	fp,0(sp)
  807054:	dec00204 	addi	sp,sp,8
  807058:	f800283a 	ret

0080705c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80705c:	defff804 	addi	sp,sp,-32
  807060:	dfc00715 	stw	ra,28(sp)
  807064:	df000615 	stw	fp,24(sp)
  807068:	df000604 	addi	fp,sp,24
  80706c:	e13ffc15 	stw	r4,-16(fp)
  807070:	e17ffd15 	stw	r5,-12(fp)
  807074:	e1bffe15 	stw	r6,-8(fp)
  807078:	e1ffff15 	stw	r7,-4(fp)
  80707c:	e0bfff17 	ldw	r2,-4(fp)
  807080:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  807084:	00802074 	movhi	r2,129
  807088:	10b1b704 	addi	r2,r2,-14628
  80708c:	10800017 	ldw	r2,0(r2)
  807090:	1004c03a 	cmpne	r2,r2,zero
  807094:	1000041e 	bne	r2,zero,8070a8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  807098:	00c02074 	movhi	r3,129
  80709c:	18f1b704 	addi	r3,r3,-14628
  8070a0:	e0bffb17 	ldw	r2,-20(fp)
  8070a4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8070a8:	e0bffc17 	ldw	r2,-16(fp)
  8070ac:	10800104 	addi	r2,r2,4
  8070b0:	1007883a 	mov	r3,r2
  8070b4:	008001c4 	movi	r2,7
  8070b8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8070bc:	d8000015 	stw	zero,0(sp)
  8070c0:	e13ffd17 	ldw	r4,-12(fp)
  8070c4:	e17ffe17 	ldw	r5,-8(fp)
  8070c8:	01802034 	movhi	r6,128
  8070cc:	319bfb04 	addi	r6,r6,28652
  8070d0:	e1fffc17 	ldw	r7,-16(fp)
  8070d4:	0807f580 	call	807f58 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8070d8:	e037883a 	mov	sp,fp
  8070dc:	dfc00117 	ldw	ra,4(sp)
  8070e0:	df000017 	ldw	fp,0(sp)
  8070e4:	dec00204 	addi	sp,sp,8
  8070e8:	f800283a 	ret

008070ec <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8070ec:	defffa04 	addi	sp,sp,-24
  8070f0:	dfc00515 	stw	ra,20(sp)
  8070f4:	df000415 	stw	fp,16(sp)
  8070f8:	df000404 	addi	fp,sp,16
  8070fc:	e13ffd15 	stw	r4,-12(fp)
  807100:	e17ffe15 	stw	r5,-8(fp)
  807104:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  807108:	e0bffd17 	ldw	r2,-12(fp)
  80710c:	10800017 	ldw	r2,0(r2)
  807110:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  807114:	e0bffc17 	ldw	r2,-16(fp)
  807118:	11000a04 	addi	r4,r2,40
  80711c:	e0bffd17 	ldw	r2,-12(fp)
  807120:	11c00217 	ldw	r7,8(r2)
  807124:	e17ffe17 	ldw	r5,-8(fp)
  807128:	e1bfff17 	ldw	r6,-4(fp)
  80712c:	08075e40 	call	8075e4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  807130:	e037883a 	mov	sp,fp
  807134:	dfc00117 	ldw	ra,4(sp)
  807138:	df000017 	ldw	fp,0(sp)
  80713c:	dec00204 	addi	sp,sp,8
  807140:	f800283a 	ret

00807144 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  807144:	defffa04 	addi	sp,sp,-24
  807148:	dfc00515 	stw	ra,20(sp)
  80714c:	df000415 	stw	fp,16(sp)
  807150:	df000404 	addi	fp,sp,16
  807154:	e13ffd15 	stw	r4,-12(fp)
  807158:	e17ffe15 	stw	r5,-8(fp)
  80715c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  807160:	e0bffd17 	ldw	r2,-12(fp)
  807164:	10800017 	ldw	r2,0(r2)
  807168:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80716c:	e0bffc17 	ldw	r2,-16(fp)
  807170:	11000a04 	addi	r4,r2,40
  807174:	e0bffd17 	ldw	r2,-12(fp)
  807178:	11c00217 	ldw	r7,8(r2)
  80717c:	e17ffe17 	ldw	r5,-8(fp)
  807180:	e1bfff17 	ldw	r6,-4(fp)
  807184:	08078740 	call	807874 <altera_avalon_uart_write>
      fd->fd_flags);
}
  807188:	e037883a 	mov	sp,fp
  80718c:	dfc00117 	ldw	ra,4(sp)
  807190:	df000017 	ldw	fp,0(sp)
  807194:	dec00204 	addi	sp,sp,8
  807198:	f800283a 	ret

0080719c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80719c:	defffc04 	addi	sp,sp,-16
  8071a0:	dfc00315 	stw	ra,12(sp)
  8071a4:	df000215 	stw	fp,8(sp)
  8071a8:	df000204 	addi	fp,sp,8
  8071ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8071b0:	e0bfff17 	ldw	r2,-4(fp)
  8071b4:	10800017 	ldw	r2,0(r2)
  8071b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8071bc:	e0bffe17 	ldw	r2,-8(fp)
  8071c0:	11000a04 	addi	r4,r2,40
  8071c4:	e0bfff17 	ldw	r2,-4(fp)
  8071c8:	11400217 	ldw	r5,8(r2)
  8071cc:	08075840 	call	807584 <altera_avalon_uart_close>
}
  8071d0:	e037883a 	mov	sp,fp
  8071d4:	dfc00117 	ldw	ra,4(sp)
  8071d8:	df000017 	ldw	fp,0(sp)
  8071dc:	dec00204 	addi	sp,sp,8
  8071e0:	f800283a 	ret

008071e4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8071e4:	defff704 	addi	sp,sp,-36
  8071e8:	dfc00815 	stw	ra,32(sp)
  8071ec:	df000715 	stw	fp,28(sp)
  8071f0:	df000704 	addi	fp,sp,28
  8071f4:	e13ffc15 	stw	r4,-16(fp)
  8071f8:	e17ffd15 	stw	r5,-12(fp)
  8071fc:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  807200:	e0bffc17 	ldw	r2,-16(fp)
  807204:	10800017 	ldw	r2,0(r2)
  807208:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80720c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  807210:	1004c03a 	cmpne	r2,r2,zero
  807214:	1000061e 	bne	r2,zero,807230 <altera_avalon_uart_init+0x4c>
  807218:	0005883a 	mov	r2,zero
  80721c:	1004c03a 	cmpne	r2,r2,zero
  807220:	1000031e 	bne	r2,zero,807230 <altera_avalon_uart_init+0x4c>
  807224:	0005883a 	mov	r2,zero
  807228:	1005003a 	cmpeq	r2,r2,zero
  80722c:	1000031e 	bne	r2,zero,80723c <altera_avalon_uart_init+0x58>
  807230:	00800044 	movi	r2,1
  807234:	e0bfff15 	stw	r2,-4(fp)
  807238:	00000106 	br	807240 <altera_avalon_uart_init+0x5c>
  80723c:	e03fff15 	stw	zero,-4(fp)
  807240:	e0bfff17 	ldw	r2,-4(fp)
  807244:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  807248:	e0bffa17 	ldw	r2,-24(fp)
  80724c:	1004c03a 	cmpne	r2,r2,zero
  807250:	1000111e 	bne	r2,zero,807298 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  807254:	e0fffc17 	ldw	r3,-16(fp)
  807258:	00832004 	movi	r2,3200
  80725c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  807260:	e0bffb17 	ldw	r2,-20(fp)
  807264:	11000304 	addi	r4,r2,12
  807268:	e0bffc17 	ldw	r2,-16(fp)
  80726c:	10800117 	ldw	r2,4(r2)
  807270:	1007883a 	mov	r3,r2
  807274:	2005883a 	mov	r2,r4
  807278:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80727c:	d8000015 	stw	zero,0(sp)
  807280:	e13ffd17 	ldw	r4,-12(fp)
  807284:	e17ffe17 	ldw	r5,-8(fp)
  807288:	01802034 	movhi	r6,128
  80728c:	319cab04 	addi	r6,r6,29356
  807290:	e1fffc17 	ldw	r7,-16(fp)
  807294:	0807f580 	call	807f58 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  807298:	e037883a 	mov	sp,fp
  80729c:	dfc00117 	ldw	ra,4(sp)
  8072a0:	df000017 	ldw	fp,0(sp)
  8072a4:	dec00204 	addi	sp,sp,8
  8072a8:	f800283a 	ret

008072ac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8072ac:	defffa04 	addi	sp,sp,-24
  8072b0:	dfc00515 	stw	ra,20(sp)
  8072b4:	df000415 	stw	fp,16(sp)
  8072b8:	df000404 	addi	fp,sp,16
  8072bc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8072c0:	e0bfff17 	ldw	r2,-4(fp)
  8072c4:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  8072c8:	e0bffd17 	ldw	r2,-12(fp)
  8072cc:	10800017 	ldw	r2,0(r2)
  8072d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8072d4:	e0bffc17 	ldw	r2,-16(fp)
  8072d8:	10800204 	addi	r2,r2,8
  8072dc:	10800037 	ldwio	r2,0(r2)
  8072e0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8072e4:	e0bffc17 	ldw	r2,-16(fp)
  8072e8:	10800204 	addi	r2,r2,8
  8072ec:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8072f0:	e0bffc17 	ldw	r2,-16(fp)
  8072f4:	10800204 	addi	r2,r2,8
  8072f8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8072fc:	e0bffe17 	ldw	r2,-8(fp)
  807300:	1080200c 	andi	r2,r2,128
  807304:	1005003a 	cmpeq	r2,r2,zero
  807308:	1000031e 	bne	r2,zero,807318 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80730c:	e13ffd17 	ldw	r4,-12(fp)
  807310:	e17ffe17 	ldw	r5,-8(fp)
  807314:	08073480 	call	807348 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  807318:	e0bffe17 	ldw	r2,-8(fp)
  80731c:	1081100c 	andi	r2,r2,1088
  807320:	1005003a 	cmpeq	r2,r2,zero
  807324:	1000031e 	bne	r2,zero,807334 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  807328:	e13ffd17 	ldw	r4,-12(fp)
  80732c:	e17ffe17 	ldw	r5,-8(fp)
  807330:	08074280 	call	807428 <altera_avalon_uart_txirq>
  }
  

}
  807334:	e037883a 	mov	sp,fp
  807338:	dfc00117 	ldw	ra,4(sp)
  80733c:	df000017 	ldw	fp,0(sp)
  807340:	dec00204 	addi	sp,sp,8
  807344:	f800283a 	ret

00807348 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  807348:	defffc04 	addi	sp,sp,-16
  80734c:	df000315 	stw	fp,12(sp)
  807350:	df000304 	addi	fp,sp,12
  807354:	e13ffe15 	stw	r4,-8(fp)
  807358:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80735c:	e0bfff17 	ldw	r2,-4(fp)
  807360:	108000cc 	andi	r2,r2,3
  807364:	1004c03a 	cmpne	r2,r2,zero
  807368:	10002b1e 	bne	r2,zero,807418 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80736c:	e0bffe17 	ldw	r2,-8(fp)
  807370:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  807374:	e0bffe17 	ldw	r2,-8(fp)
  807378:	10800317 	ldw	r2,12(r2)
  80737c:	10800044 	addi	r2,r2,1
  807380:	10800fcc 	andi	r2,r2,63
  807384:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  807388:	e0bffe17 	ldw	r2,-8(fp)
  80738c:	11000317 	ldw	r4,12(r2)
  807390:	e0bffe17 	ldw	r2,-8(fp)
  807394:	10800017 	ldw	r2,0(r2)
  807398:	10800037 	ldwio	r2,0(r2)
  80739c:	1007883a 	mov	r3,r2
  8073a0:	e0bffe17 	ldw	r2,-8(fp)
  8073a4:	2085883a 	add	r2,r4,r2
  8073a8:	10800704 	addi	r2,r2,28
  8073ac:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  8073b0:	e0fffe17 	ldw	r3,-8(fp)
  8073b4:	e0bffd17 	ldw	r2,-12(fp)
  8073b8:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8073bc:	e0bffe17 	ldw	r2,-8(fp)
  8073c0:	10800317 	ldw	r2,12(r2)
  8073c4:	10800044 	addi	r2,r2,1
  8073c8:	10800fcc 	andi	r2,r2,63
  8073cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8073d0:	e0bffe17 	ldw	r2,-8(fp)
  8073d4:	10c00217 	ldw	r3,8(r2)
  8073d8:	e0bffd17 	ldw	r2,-12(fp)
  8073dc:	18800e1e 	bne	r3,r2,807418 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8073e0:	e0bffe17 	ldw	r2,-8(fp)
  8073e4:	10c00117 	ldw	r3,4(r2)
  8073e8:	00bfdfc4 	movi	r2,-129
  8073ec:	1886703a 	and	r3,r3,r2
  8073f0:	e0bffe17 	ldw	r2,-8(fp)
  8073f4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8073f8:	e0bffe17 	ldw	r2,-8(fp)
  8073fc:	10800017 	ldw	r2,0(r2)
  807400:	11000304 	addi	r4,r2,12
  807404:	e0bffe17 	ldw	r2,-8(fp)
  807408:	10800117 	ldw	r2,4(r2)
  80740c:	1007883a 	mov	r3,r2
  807410:	2005883a 	mov	r2,r4
  807414:	10c00035 	stwio	r3,0(r2)
  }   
}
  807418:	e037883a 	mov	sp,fp
  80741c:	df000017 	ldw	fp,0(sp)
  807420:	dec00104 	addi	sp,sp,4
  807424:	f800283a 	ret

00807428 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  807428:	defffd04 	addi	sp,sp,-12
  80742c:	df000215 	stw	fp,8(sp)
  807430:	df000204 	addi	fp,sp,8
  807434:	e13ffe15 	stw	r4,-8(fp)
  807438:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80743c:	e0bffe17 	ldw	r2,-8(fp)
  807440:	10c00417 	ldw	r3,16(r2)
  807444:	e0bffe17 	ldw	r2,-8(fp)
  807448:	10800517 	ldw	r2,20(r2)
  80744c:	18803626 	beq	r3,r2,807528 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  807450:	e0bffe17 	ldw	r2,-8(fp)
  807454:	10800617 	ldw	r2,24(r2)
  807458:	1080008c 	andi	r2,r2,2
  80745c:	1005003a 	cmpeq	r2,r2,zero
  807460:	1000041e 	bne	r2,zero,807474 <altera_avalon_uart_txirq+0x4c>
  807464:	e0bfff17 	ldw	r2,-4(fp)
  807468:	1082000c 	andi	r2,r2,2048
  80746c:	1005003a 	cmpeq	r2,r2,zero
  807470:	10001e1e 	bne	r2,zero,8074ec <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  807474:	e0bffe17 	ldw	r2,-8(fp)
  807478:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80747c:	e0bffe17 	ldw	r2,-8(fp)
  807480:	10800017 	ldw	r2,0(r2)
  807484:	11000104 	addi	r4,r2,4
  807488:	e0bffe17 	ldw	r2,-8(fp)
  80748c:	10c00417 	ldw	r3,16(r2)
  807490:	e0bffe17 	ldw	r2,-8(fp)
  807494:	1885883a 	add	r2,r3,r2
  807498:	10801704 	addi	r2,r2,92
  80749c:	10800003 	ldbu	r2,0(r2)
  8074a0:	10c03fcc 	andi	r3,r2,255
  8074a4:	2005883a 	mov	r2,r4
  8074a8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8074ac:	e0bffe17 	ldw	r2,-8(fp)
  8074b0:	10800417 	ldw	r2,16(r2)
  8074b4:	10c00044 	addi	r3,r2,1
  8074b8:	e0bffe17 	ldw	r2,-8(fp)
  8074bc:	10c00415 	stw	r3,16(r2)
  8074c0:	e0bffe17 	ldw	r2,-8(fp)
  8074c4:	10800417 	ldw	r2,16(r2)
  8074c8:	10c00fcc 	andi	r3,r2,63
  8074cc:	e0bffe17 	ldw	r2,-8(fp)
  8074d0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8074d4:	e0bffe17 	ldw	r2,-8(fp)
  8074d8:	10800117 	ldw	r2,4(r2)
  8074dc:	10c01014 	ori	r3,r2,64
  8074e0:	e0bffe17 	ldw	r2,-8(fp)
  8074e4:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8074e8:	00000f06 	br	807528 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8074ec:	e0bffe17 	ldw	r2,-8(fp)
  8074f0:	10800017 	ldw	r2,0(r2)
  8074f4:	10800204 	addi	r2,r2,8
  8074f8:	10800037 	ldwio	r2,0(r2)
  8074fc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  807500:	e0bfff17 	ldw	r2,-4(fp)
  807504:	1082000c 	andi	r2,r2,2048
  807508:	1004c03a 	cmpne	r2,r2,zero
  80750c:	1000061e 	bne	r2,zero,807528 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  807510:	e0bffe17 	ldw	r2,-8(fp)
  807514:	10c00117 	ldw	r3,4(r2)
  807518:	00bfefc4 	movi	r2,-65
  80751c:	1886703a 	and	r3,r3,r2
  807520:	e0bffe17 	ldw	r2,-8(fp)
  807524:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  807528:	e0bffe17 	ldw	r2,-8(fp)
  80752c:	10c00417 	ldw	r3,16(r2)
  807530:	e0bffe17 	ldw	r2,-8(fp)
  807534:	10800517 	ldw	r2,20(r2)
  807538:	1880061e 	bne	r3,r2,807554 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80753c:	e0bffe17 	ldw	r2,-8(fp)
  807540:	10c00117 	ldw	r3,4(r2)
  807544:	00beefc4 	movi	r2,-1089
  807548:	1886703a 	and	r3,r3,r2
  80754c:	e0bffe17 	ldw	r2,-8(fp)
  807550:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807554:	e0bffe17 	ldw	r2,-8(fp)
  807558:	10800017 	ldw	r2,0(r2)
  80755c:	11000304 	addi	r4,r2,12
  807560:	e0bffe17 	ldw	r2,-8(fp)
  807564:	10800117 	ldw	r2,4(r2)
  807568:	1007883a 	mov	r3,r2
  80756c:	2005883a 	mov	r2,r4
  807570:	10c00035 	stwio	r3,0(r2)
}
  807574:	e037883a 	mov	sp,fp
  807578:	df000017 	ldw	fp,0(sp)
  80757c:	dec00104 	addi	sp,sp,4
  807580:	f800283a 	ret

00807584 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  807584:	defffc04 	addi	sp,sp,-16
  807588:	df000315 	stw	fp,12(sp)
  80758c:	df000304 	addi	fp,sp,12
  807590:	e13ffd15 	stw	r4,-12(fp)
  807594:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  807598:	00000706 	br	8075b8 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80759c:	e0bffe17 	ldw	r2,-8(fp)
  8075a0:	1090000c 	andi	r2,r2,16384
  8075a4:	1005003a 	cmpeq	r2,r2,zero
  8075a8:	1000031e 	bne	r2,zero,8075b8 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  8075ac:	00bffd44 	movi	r2,-11
  8075b0:	e0bfff15 	stw	r2,-4(fp)
  8075b4:	00000606 	br	8075d0 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8075b8:	e0bffd17 	ldw	r2,-12(fp)
  8075bc:	10c00417 	ldw	r3,16(r2)
  8075c0:	e0bffd17 	ldw	r2,-12(fp)
  8075c4:	10800517 	ldw	r2,20(r2)
  8075c8:	18bff41e 	bne	r3,r2,80759c <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8075cc:	e03fff15 	stw	zero,-4(fp)
  8075d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8075d4:	e037883a 	mov	sp,fp
  8075d8:	df000017 	ldw	fp,0(sp)
  8075dc:	dec00104 	addi	sp,sp,4
  8075e0:	f800283a 	ret

008075e4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8075e4:	defff004 	addi	sp,sp,-64
  8075e8:	dfc00f15 	stw	ra,60(sp)
  8075ec:	df000e15 	stw	fp,56(sp)
  8075f0:	df000e04 	addi	fp,sp,56
  8075f4:	e13ffb15 	stw	r4,-20(fp)
  8075f8:	e17ffc15 	stw	r5,-16(fp)
  8075fc:	e1bffd15 	stw	r6,-12(fp)
  807600:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  807604:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  807608:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80760c:	e0bffe17 	ldw	r2,-8(fp)
  807610:	1090000c 	andi	r2,r2,16384
  807614:	1005003a 	cmpeq	r2,r2,zero
  807618:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80761c:	e0bffb17 	ldw	r2,-20(fp)
  807620:	10800217 	ldw	r2,8(r2)
  807624:	10800044 	addi	r2,r2,1
  807628:	10800fcc 	andi	r2,r2,63
  80762c:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  807630:	00001906 	br	807698 <altera_avalon_uart_read+0xb4>
    {
      count++;
  807634:	e0bff617 	ldw	r2,-40(fp)
  807638:	10800044 	addi	r2,r2,1
  80763c:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  807640:	e0bffb17 	ldw	r2,-20(fp)
  807644:	10c00217 	ldw	r3,8(r2)
  807648:	e0bffb17 	ldw	r2,-20(fp)
  80764c:	1885883a 	add	r2,r3,r2
  807650:	10800704 	addi	r2,r2,28
  807654:	10800003 	ldbu	r2,0(r2)
  807658:	1007883a 	mov	r3,r2
  80765c:	e0bffc17 	ldw	r2,-16(fp)
  807660:	10c00005 	stb	r3,0(r2)
  807664:	e0bffc17 	ldw	r2,-16(fp)
  807668:	10800044 	addi	r2,r2,1
  80766c:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  807670:	e0bffb17 	ldw	r2,-20(fp)
  807674:	10800217 	ldw	r2,8(r2)
  807678:	10c00044 	addi	r3,r2,1
  80767c:	e0bffb17 	ldw	r2,-20(fp)
  807680:	10c00215 	stw	r3,8(r2)
  807684:	e0bffb17 	ldw	r2,-20(fp)
  807688:	10800217 	ldw	r2,8(r2)
  80768c:	10c00fcc 	andi	r3,r2,63
  807690:	e0bffb17 	ldw	r2,-20(fp)
  807694:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  807698:	e0fff617 	ldw	r3,-40(fp)
  80769c:	e0bffd17 	ldw	r2,-12(fp)
  8076a0:	1880050e 	bge	r3,r2,8076b8 <altera_avalon_uart_read+0xd4>
  8076a4:	e0bffb17 	ldw	r2,-20(fp)
  8076a8:	10c00217 	ldw	r3,8(r2)
  8076ac:	e0bffb17 	ldw	r2,-20(fp)
  8076b0:	10800317 	ldw	r2,12(r2)
  8076b4:	18bfdf1e 	bne	r3,r2,807634 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8076b8:	e0bff617 	ldw	r2,-40(fp)
  8076bc:	1004c03a 	cmpne	r2,r2,zero
  8076c0:	1000271e 	bne	r2,zero,807760 <altera_avalon_uart_read+0x17c>
  8076c4:	e0bffb17 	ldw	r2,-20(fp)
  8076c8:	10c00217 	ldw	r3,8(r2)
  8076cc:	e0bffb17 	ldw	r2,-20(fp)
  8076d0:	10800317 	ldw	r2,12(r2)
  8076d4:	1880221e 	bne	r3,r2,807760 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  8076d8:	e0bff917 	ldw	r2,-28(fp)
  8076dc:	1004c03a 	cmpne	r2,r2,zero
  8076e0:	1000061e 	bne	r2,zero,8076fc <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  8076e4:	08078140 	call	807814 <alt_get_errno>
  8076e8:	00c002c4 	movi	r3,11
  8076ec:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  8076f0:	00800044 	movi	r2,1
  8076f4:	e0bff705 	stb	r2,-36(fp)
        break;
  8076f8:	00001f06 	br	807778 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8076fc:	0005303a 	rdctl	r2,status
  807700:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807704:	e0fff517 	ldw	r3,-44(fp)
  807708:	00bfff84 	movi	r2,-2
  80770c:	1884703a 	and	r2,r3,r2
  807710:	1001703a 	wrctl	status,r2
  
  return context;
  807714:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  807718:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80771c:	e0bffb17 	ldw	r2,-20(fp)
  807720:	10800117 	ldw	r2,4(r2)
  807724:	10c02014 	ori	r3,r2,128
  807728:	e0bffb17 	ldw	r2,-20(fp)
  80772c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807730:	e0bffb17 	ldw	r2,-20(fp)
  807734:	10800017 	ldw	r2,0(r2)
  807738:	11000304 	addi	r4,r2,12
  80773c:	e0bffb17 	ldw	r2,-20(fp)
  807740:	10800117 	ldw	r2,4(r2)
  807744:	1007883a 	mov	r3,r2
  807748:	2005883a 	mov	r2,r4
  80774c:	10c00035 	stwio	r3,0(r2)
  807750:	e0bffa17 	ldw	r2,-24(fp)
  807754:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807758:	e0bff417 	ldw	r2,-48(fp)
  80775c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  807760:	e0bff617 	ldw	r2,-40(fp)
  807764:	1004c03a 	cmpne	r2,r2,zero
  807768:	1000031e 	bne	r2,zero,807778 <altera_avalon_uart_read+0x194>
  80776c:	e0bffd17 	ldw	r2,-12(fp)
  807770:	1004c03a 	cmpne	r2,r2,zero
  807774:	103fc81e 	bne	r2,zero,807698 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807778:	0005303a 	rdctl	r2,status
  80777c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807780:	e0fff317 	ldw	r3,-52(fp)
  807784:	00bfff84 	movi	r2,-2
  807788:	1884703a 	and	r2,r3,r2
  80778c:	1001703a 	wrctl	status,r2
  
  return context;
  807790:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  807794:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  807798:	e0bffb17 	ldw	r2,-20(fp)
  80779c:	10800117 	ldw	r2,4(r2)
  8077a0:	10c02014 	ori	r3,r2,128
  8077a4:	e0bffb17 	ldw	r2,-20(fp)
  8077a8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8077ac:	e0bffb17 	ldw	r2,-20(fp)
  8077b0:	10800017 	ldw	r2,0(r2)
  8077b4:	11000304 	addi	r4,r2,12
  8077b8:	e0bffb17 	ldw	r2,-20(fp)
  8077bc:	10800117 	ldw	r2,4(r2)
  8077c0:	1007883a 	mov	r3,r2
  8077c4:	2005883a 	mov	r2,r4
  8077c8:	10c00035 	stwio	r3,0(r2)
  8077cc:	e0bffa17 	ldw	r2,-24(fp)
  8077d0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8077d4:	e0bff217 	ldw	r2,-56(fp)
  8077d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8077dc:	e0bff703 	ldbu	r2,-36(fp)
  8077e0:	1005003a 	cmpeq	r2,r2,zero
  8077e4:	1000031e 	bne	r2,zero,8077f4 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  8077e8:	00bffd04 	movi	r2,-12
  8077ec:	e0bfff15 	stw	r2,-4(fp)
  8077f0:	00000206 	br	8077fc <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  8077f4:	e0bff617 	ldw	r2,-40(fp)
  8077f8:	e0bfff15 	stw	r2,-4(fp)
  8077fc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  807800:	e037883a 	mov	sp,fp
  807804:	dfc00117 	ldw	ra,4(sp)
  807808:	df000017 	ldw	fp,0(sp)
  80780c:	dec00204 	addi	sp,sp,8
  807810:	f800283a 	ret

00807814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807814:	defffd04 	addi	sp,sp,-12
  807818:	dfc00215 	stw	ra,8(sp)
  80781c:	df000115 	stw	fp,4(sp)
  807820:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807824:	00802074 	movhi	r2,129
  807828:	10aa8304 	addi	r2,r2,-22004
  80782c:	10800017 	ldw	r2,0(r2)
  807830:	1005003a 	cmpeq	r2,r2,zero
  807834:	1000061e 	bne	r2,zero,807850 <alt_get_errno+0x3c>
  807838:	00802074 	movhi	r2,129
  80783c:	10aa8304 	addi	r2,r2,-22004
  807840:	10800017 	ldw	r2,0(r2)
  807844:	103ee83a 	callr	r2
  807848:	e0bfff15 	stw	r2,-4(fp)
  80784c:	00000306 	br	80785c <alt_get_errno+0x48>
  807850:	00802074 	movhi	r2,129
  807854:	10b1b304 	addi	r2,r2,-14644
  807858:	e0bfff15 	stw	r2,-4(fp)
  80785c:	e0bfff17 	ldw	r2,-4(fp)
}
  807860:	e037883a 	mov	sp,fp
  807864:	dfc00117 	ldw	ra,4(sp)
  807868:	df000017 	ldw	fp,0(sp)
  80786c:	dec00204 	addi	sp,sp,8
  807870:	f800283a 	ret

00807874 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  807874:	defff204 	addi	sp,sp,-56
  807878:	dfc00d15 	stw	ra,52(sp)
  80787c:	df000c15 	stw	fp,48(sp)
  807880:	df000c04 	addi	fp,sp,48
  807884:	e13ffc15 	stw	r4,-16(fp)
  807888:	e17ffd15 	stw	r5,-12(fp)
  80788c:	e1bffe15 	stw	r6,-8(fp)
  807890:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  807894:	e0bffe17 	ldw	r2,-8(fp)
  807898:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80789c:	e0bfff17 	ldw	r2,-4(fp)
  8078a0:	1090000c 	andi	r2,r2,16384
  8078a4:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8078a8:	00004006 	br	8079ac <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8078ac:	e0bffc17 	ldw	r2,-16(fp)
  8078b0:	10800517 	ldw	r2,20(r2)
  8078b4:	10800044 	addi	r2,r2,1
  8078b8:	10800fcc 	andi	r2,r2,63
  8078bc:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8078c0:	e0bffc17 	ldw	r2,-16(fp)
  8078c4:	10c00417 	ldw	r3,16(r2)
  8078c8:	e0bff917 	ldw	r2,-28(fp)
  8078cc:	1880251e 	bne	r3,r2,807964 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  8078d0:	e0bffa17 	ldw	r2,-24(fp)
  8078d4:	1005003a 	cmpeq	r2,r2,zero
  8078d8:	1000051e 	bne	r2,zero,8078f0 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8078dc:	0807a3c0 	call	807a3c <alt_get_errno>
  8078e0:	1007883a 	mov	r3,r2
  8078e4:	008002c4 	movi	r2,11
  8078e8:	18800015 	stw	r2,0(r3)
        break;
  8078ec:	00003206 	br	8079b8 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8078f0:	0005303a 	rdctl	r2,status
  8078f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8078f8:	e0fff717 	ldw	r3,-36(fp)
  8078fc:	00bfff84 	movi	r2,-2
  807900:	1884703a 	and	r2,r3,r2
  807904:	1001703a 	wrctl	status,r2
  
  return context;
  807908:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80790c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  807910:	e0bffc17 	ldw	r2,-16(fp)
  807914:	10800117 	ldw	r2,4(r2)
  807918:	10c11014 	ori	r3,r2,1088
  80791c:	e0bffc17 	ldw	r2,-16(fp)
  807920:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807924:	e0bffc17 	ldw	r2,-16(fp)
  807928:	10800017 	ldw	r2,0(r2)
  80792c:	11000304 	addi	r4,r2,12
  807930:	e0bffc17 	ldw	r2,-16(fp)
  807934:	10800117 	ldw	r2,4(r2)
  807938:	1007883a 	mov	r3,r2
  80793c:	2005883a 	mov	r2,r4
  807940:	10c00035 	stwio	r3,0(r2)
  807944:	e0bffb17 	ldw	r2,-20(fp)
  807948:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80794c:	e0bff617 	ldw	r2,-40(fp)
  807950:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  807954:	e0bffc17 	ldw	r2,-16(fp)
  807958:	10c00417 	ldw	r3,16(r2)
  80795c:	e0bff917 	ldw	r2,-28(fp)
  807960:	18bffc26 	beq	r3,r2,807954 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  807964:	e0bff817 	ldw	r2,-32(fp)
  807968:	10bfffc4 	addi	r2,r2,-1
  80796c:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  807970:	e0bffc17 	ldw	r2,-16(fp)
  807974:	10c00517 	ldw	r3,20(r2)
  807978:	e0bffd17 	ldw	r2,-12(fp)
  80797c:	10800003 	ldbu	r2,0(r2)
  807980:	1009883a 	mov	r4,r2
  807984:	e0bffc17 	ldw	r2,-16(fp)
  807988:	1885883a 	add	r2,r3,r2
  80798c:	10801704 	addi	r2,r2,92
  807990:	11000005 	stb	r4,0(r2)
  807994:	e0bffd17 	ldw	r2,-12(fp)
  807998:	10800044 	addi	r2,r2,1
  80799c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  8079a0:	e0fffc17 	ldw	r3,-16(fp)
  8079a4:	e0bff917 	ldw	r2,-28(fp)
  8079a8:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8079ac:	e0bff817 	ldw	r2,-32(fp)
  8079b0:	1004c03a 	cmpne	r2,r2,zero
  8079b4:	103fbd1e 	bne	r2,zero,8078ac <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8079b8:	0005303a 	rdctl	r2,status
  8079bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8079c0:	e0fff517 	ldw	r3,-44(fp)
  8079c4:	00bfff84 	movi	r2,-2
  8079c8:	1884703a 	and	r2,r3,r2
  8079cc:	1001703a 	wrctl	status,r2
  
  return context;
  8079d0:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8079d4:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8079d8:	e0bffc17 	ldw	r2,-16(fp)
  8079dc:	10800117 	ldw	r2,4(r2)
  8079e0:	10c11014 	ori	r3,r2,1088
  8079e4:	e0bffc17 	ldw	r2,-16(fp)
  8079e8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8079ec:	e0bffc17 	ldw	r2,-16(fp)
  8079f0:	10800017 	ldw	r2,0(r2)
  8079f4:	11000304 	addi	r4,r2,12
  8079f8:	e0bffc17 	ldw	r2,-16(fp)
  8079fc:	10800117 	ldw	r2,4(r2)
  807a00:	1007883a 	mov	r3,r2
  807a04:	2005883a 	mov	r2,r4
  807a08:	10c00035 	stwio	r3,0(r2)
  807a0c:	e0bffb17 	ldw	r2,-20(fp)
  807a10:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807a14:	e0bff417 	ldw	r2,-48(fp)
  807a18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  807a1c:	e0fffe17 	ldw	r3,-8(fp)
  807a20:	e0bff817 	ldw	r2,-32(fp)
  807a24:	1885c83a 	sub	r2,r3,r2
}
  807a28:	e037883a 	mov	sp,fp
  807a2c:	dfc00117 	ldw	ra,4(sp)
  807a30:	df000017 	ldw	fp,0(sp)
  807a34:	dec00204 	addi	sp,sp,8
  807a38:	f800283a 	ret

00807a3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807a3c:	defffd04 	addi	sp,sp,-12
  807a40:	dfc00215 	stw	ra,8(sp)
  807a44:	df000115 	stw	fp,4(sp)
  807a48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807a4c:	00802074 	movhi	r2,129
  807a50:	10aa8304 	addi	r2,r2,-22004
  807a54:	10800017 	ldw	r2,0(r2)
  807a58:	1005003a 	cmpeq	r2,r2,zero
  807a5c:	1000061e 	bne	r2,zero,807a78 <alt_get_errno+0x3c>
  807a60:	00802074 	movhi	r2,129
  807a64:	10aa8304 	addi	r2,r2,-22004
  807a68:	10800017 	ldw	r2,0(r2)
  807a6c:	103ee83a 	callr	r2
  807a70:	e0bfff15 	stw	r2,-4(fp)
  807a74:	00000306 	br	807a84 <alt_get_errno+0x48>
  807a78:	00802074 	movhi	r2,129
  807a7c:	10b1b304 	addi	r2,r2,-14644
  807a80:	e0bfff15 	stw	r2,-4(fp)
  807a84:	e0bfff17 	ldw	r2,-4(fp)
}
  807a88:	e037883a 	mov	sp,fp
  807a8c:	dfc00117 	ldw	ra,4(sp)
  807a90:	df000017 	ldw	fp,0(sp)
  807a94:	dec00204 	addi	sp,sp,8
  807a98:	f800283a 	ret

00807a9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  807a9c:	defffe04 	addi	sp,sp,-8
  807aa0:	df000115 	stw	fp,4(sp)
  807aa4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  807aa8:	e03fff15 	stw	zero,-4(fp)
  807aac:	00000506 	br	807ac4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  807ab0:	e0bfff17 	ldw	r2,-4(fp)
  807ab4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  807ab8:	e0bfff17 	ldw	r2,-4(fp)
  807abc:	10800804 	addi	r2,r2,32
  807ac0:	e0bfff15 	stw	r2,-4(fp)
  807ac4:	e0bfff17 	ldw	r2,-4(fp)
  807ac8:	10820030 	cmpltui	r2,r2,2048
  807acc:	103ff81e 	bne	r2,zero,807ab0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807ad0:	e037883a 	mov	sp,fp
  807ad4:	df000017 	ldw	fp,0(sp)
  807ad8:	dec00104 	addi	sp,sp,4
  807adc:	f800283a 	ret

00807ae0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807ae0:	defff904 	addi	sp,sp,-28
  807ae4:	dfc00615 	stw	ra,24(sp)
  807ae8:	df000515 	stw	fp,20(sp)
  807aec:	df000504 	addi	fp,sp,20
  807af0:	e13ffd15 	stw	r4,-12(fp)
  807af4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  807af8:	e0bffd17 	ldw	r2,-12(fp)
  807afc:	1005003a 	cmpeq	r2,r2,zero
  807b00:	1000041e 	bne	r2,zero,807b14 <alt_dev_llist_insert+0x34>
  807b04:	e0bffd17 	ldw	r2,-12(fp)
  807b08:	10800217 	ldw	r2,8(r2)
  807b0c:	1004c03a 	cmpne	r2,r2,zero
  807b10:	1000071e 	bne	r2,zero,807b30 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  807b14:	0807b940 	call	807b94 <alt_get_errno>
  807b18:	1007883a 	mov	r3,r2
  807b1c:	00800584 	movi	r2,22
  807b20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  807b24:	00bffa84 	movi	r2,-22
  807b28:	e0bfff15 	stw	r2,-4(fp)
  807b2c:	00001306 	br	807b7c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  807b30:	e0fffd17 	ldw	r3,-12(fp)
  807b34:	e0bffe17 	ldw	r2,-8(fp)
  807b38:	e0bffb15 	stw	r2,-20(fp)
  807b3c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807b40:	e0fffc17 	ldw	r3,-16(fp)
  807b44:	e0bffb17 	ldw	r2,-20(fp)
  807b48:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  807b4c:	e0bffb17 	ldw	r2,-20(fp)
  807b50:	10c00017 	ldw	r3,0(r2)
  807b54:	e0bffc17 	ldw	r2,-16(fp)
  807b58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  807b5c:	e0bffb17 	ldw	r2,-20(fp)
  807b60:	10c00017 	ldw	r3,0(r2)
  807b64:	e0bffc17 	ldw	r2,-16(fp)
  807b68:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  807b6c:	e0fffb17 	ldw	r3,-20(fp)
  807b70:	e0bffc17 	ldw	r2,-16(fp)
  807b74:	18800015 	stw	r2,0(r3)

  return 0;  
  807b78:	e03fff15 	stw	zero,-4(fp)
  807b7c:	e0bfff17 	ldw	r2,-4(fp)
}
  807b80:	e037883a 	mov	sp,fp
  807b84:	dfc00117 	ldw	ra,4(sp)
  807b88:	df000017 	ldw	fp,0(sp)
  807b8c:	dec00204 	addi	sp,sp,8
  807b90:	f800283a 	ret

00807b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807b94:	defffd04 	addi	sp,sp,-12
  807b98:	dfc00215 	stw	ra,8(sp)
  807b9c:	df000115 	stw	fp,4(sp)
  807ba0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807ba4:	00802074 	movhi	r2,129
  807ba8:	10aa8304 	addi	r2,r2,-22004
  807bac:	10800017 	ldw	r2,0(r2)
  807bb0:	1005003a 	cmpeq	r2,r2,zero
  807bb4:	1000061e 	bne	r2,zero,807bd0 <alt_get_errno+0x3c>
  807bb8:	00802074 	movhi	r2,129
  807bbc:	10aa8304 	addi	r2,r2,-22004
  807bc0:	10800017 	ldw	r2,0(r2)
  807bc4:	103ee83a 	callr	r2
  807bc8:	e0bfff15 	stw	r2,-4(fp)
  807bcc:	00000306 	br	807bdc <alt_get_errno+0x48>
  807bd0:	00802074 	movhi	r2,129
  807bd4:	10b1b304 	addi	r2,r2,-14644
  807bd8:	e0bfff15 	stw	r2,-4(fp)
  807bdc:	e0bfff17 	ldw	r2,-4(fp)
}
  807be0:	e037883a 	mov	sp,fp
  807be4:	dfc00117 	ldw	ra,4(sp)
  807be8:	df000017 	ldw	fp,0(sp)
  807bec:	dec00204 	addi	sp,sp,8
  807bf0:	f800283a 	ret

00807bf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  807bf4:	defffd04 	addi	sp,sp,-12
  807bf8:	dfc00215 	stw	ra,8(sp)
  807bfc:	df000115 	stw	fp,4(sp)
  807c00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807c04:	00bfff04 	movi	r2,-4
  807c08:	00c02074 	movhi	r3,129
  807c0c:	18e2b904 	addi	r3,r3,-29980
  807c10:	1885883a 	add	r2,r3,r2
  807c14:	e0bfff15 	stw	r2,-4(fp)
  807c18:	00000606 	br	807c34 <_do_ctors+0x40>
        (*ctor) (); 
  807c1c:	e0bfff17 	ldw	r2,-4(fp)
  807c20:	10800017 	ldw	r2,0(r2)
  807c24:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807c28:	e0bfff17 	ldw	r2,-4(fp)
  807c2c:	10bfff04 	addi	r2,r2,-4
  807c30:	e0bfff15 	stw	r2,-4(fp)
  807c34:	e0ffff17 	ldw	r3,-4(fp)
  807c38:	00802074 	movhi	r2,129
  807c3c:	10a2b804 	addi	r2,r2,-29984
  807c40:	18bff62e 	bgeu	r3,r2,807c1c <_do_ctors+0x28>
        (*ctor) (); 
}
  807c44:	e037883a 	mov	sp,fp
  807c48:	dfc00117 	ldw	ra,4(sp)
  807c4c:	df000017 	ldw	fp,0(sp)
  807c50:	dec00204 	addi	sp,sp,8
  807c54:	f800283a 	ret

00807c58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  807c58:	defffd04 	addi	sp,sp,-12
  807c5c:	dfc00215 	stw	ra,8(sp)
  807c60:	df000115 	stw	fp,4(sp)
  807c64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  807c68:	00bfff04 	movi	r2,-4
  807c6c:	00c02074 	movhi	r3,129
  807c70:	18e2b904 	addi	r3,r3,-29980
  807c74:	1885883a 	add	r2,r3,r2
  807c78:	e0bfff15 	stw	r2,-4(fp)
  807c7c:	00000606 	br	807c98 <_do_dtors+0x40>
        (*dtor) (); 
  807c80:	e0bfff17 	ldw	r2,-4(fp)
  807c84:	10800017 	ldw	r2,0(r2)
  807c88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  807c8c:	e0bfff17 	ldw	r2,-4(fp)
  807c90:	10bfff04 	addi	r2,r2,-4
  807c94:	e0bfff15 	stw	r2,-4(fp)
  807c98:	e0ffff17 	ldw	r3,-4(fp)
  807c9c:	00802074 	movhi	r2,129
  807ca0:	10a2b904 	addi	r2,r2,-29980
  807ca4:	18bff62e 	bgeu	r3,r2,807c80 <_do_dtors+0x28>
        (*dtor) (); 
}
  807ca8:	e037883a 	mov	sp,fp
  807cac:	dfc00117 	ldw	ra,4(sp)
  807cb0:	df000017 	ldw	fp,0(sp)
  807cb4:	dec00204 	addi	sp,sp,8
  807cb8:	f800283a 	ret

00807cbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807cbc:	defff904 	addi	sp,sp,-28
  807cc0:	dfc00615 	stw	ra,24(sp)
  807cc4:	df000515 	stw	fp,20(sp)
  807cc8:	df000504 	addi	fp,sp,20
  807ccc:	e13ffd15 	stw	r4,-12(fp)
  807cd0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  807cd4:	e0bffe17 	ldw	r2,-8(fp)
  807cd8:	10800017 	ldw	r2,0(r2)
  807cdc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  807ce0:	e13ffd17 	ldw	r4,-12(fp)
  807ce4:	08026b00 	call	8026b0 <strlen>
  807ce8:	10800044 	addi	r2,r2,1
  807cec:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807cf0:	00000d06 	br	807d28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807cf4:	e0bffc17 	ldw	r2,-16(fp)
  807cf8:	11000217 	ldw	r4,8(r2)
  807cfc:	e1bffb17 	ldw	r6,-20(fp)
  807d00:	e17ffd17 	ldw	r5,-12(fp)
  807d04:	08085d80 	call	8085d8 <memcmp>
  807d08:	1004c03a 	cmpne	r2,r2,zero
  807d0c:	1000031e 	bne	r2,zero,807d1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  807d10:	e0bffc17 	ldw	r2,-16(fp)
  807d14:	e0bfff15 	stw	r2,-4(fp)
  807d18:	00000706 	br	807d38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  807d1c:	e0bffc17 	ldw	r2,-16(fp)
  807d20:	10800017 	ldw	r2,0(r2)
  807d24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807d28:	e0fffe17 	ldw	r3,-8(fp)
  807d2c:	e0bffc17 	ldw	r2,-16(fp)
  807d30:	10fff01e 	bne	r2,r3,807cf4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  807d34:	e03fff15 	stw	zero,-4(fp)
  807d38:	e0bfff17 	ldw	r2,-4(fp)
}
  807d3c:	e037883a 	mov	sp,fp
  807d40:	dfc00117 	ldw	ra,4(sp)
  807d44:	df000017 	ldw	fp,0(sp)
  807d48:	dec00204 	addi	sp,sp,8
  807d4c:	f800283a 	ret

00807d50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807d50:	defffa04 	addi	sp,sp,-24
  807d54:	dfc00515 	stw	ra,20(sp)
  807d58:	df000415 	stw	fp,16(sp)
  807d5c:	df000404 	addi	fp,sp,16
  807d60:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  807d64:	00802074 	movhi	r2,129
  807d68:	10aa7e04 	addi	r2,r2,-22024
  807d6c:	10800017 	ldw	r2,0(r2)
  807d70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807d74:	00003306 	br	807e44 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  807d78:	e0bffd17 	ldw	r2,-12(fp)
  807d7c:	11000217 	ldw	r4,8(r2)
  807d80:	08026b00 	call	8026b0 <strlen>
  807d84:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  807d88:	e0bffd17 	ldw	r2,-12(fp)
  807d8c:	10c00217 	ldw	r3,8(r2)
  807d90:	e0bffc17 	ldw	r2,-16(fp)
  807d94:	1885883a 	add	r2,r3,r2
  807d98:	10bfffc4 	addi	r2,r2,-1
  807d9c:	10800003 	ldbu	r2,0(r2)
  807da0:	10803fcc 	andi	r2,r2,255
  807da4:	1080201c 	xori	r2,r2,128
  807da8:	10bfe004 	addi	r2,r2,-128
  807dac:	10800bd8 	cmpnei	r2,r2,47
  807db0:	1000031e 	bne	r2,zero,807dc0 <alt_find_file+0x70>
    {
      len -= 1;
  807db4:	e0bffc17 	ldw	r2,-16(fp)
  807db8:	10bfffc4 	addi	r2,r2,-1
  807dbc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807dc0:	e0bffc17 	ldw	r2,-16(fp)
  807dc4:	1007883a 	mov	r3,r2
  807dc8:	e0bffe17 	ldw	r2,-8(fp)
  807dcc:	1885883a 	add	r2,r3,r2
  807dd0:	10800003 	ldbu	r2,0(r2)
  807dd4:	10803fcc 	andi	r2,r2,255
  807dd8:	1080201c 	xori	r2,r2,128
  807ddc:	10bfe004 	addi	r2,r2,-128
  807de0:	10800be0 	cmpeqi	r2,r2,47
  807de4:	10000a1e 	bne	r2,zero,807e10 <alt_find_file+0xc0>
  807de8:	e0bffc17 	ldw	r2,-16(fp)
  807dec:	1007883a 	mov	r3,r2
  807df0:	e0bffe17 	ldw	r2,-8(fp)
  807df4:	1885883a 	add	r2,r3,r2
  807df8:	10800003 	ldbu	r2,0(r2)
  807dfc:	10803fcc 	andi	r2,r2,255
  807e00:	1080201c 	xori	r2,r2,128
  807e04:	10bfe004 	addi	r2,r2,-128
  807e08:	1004c03a 	cmpne	r2,r2,zero
  807e0c:	10000a1e 	bne	r2,zero,807e38 <alt_find_file+0xe8>
  807e10:	e0bffd17 	ldw	r2,-12(fp)
  807e14:	11000217 	ldw	r4,8(r2)
  807e18:	e1bffc17 	ldw	r6,-16(fp)
  807e1c:	e17ffe17 	ldw	r5,-8(fp)
  807e20:	08085d80 	call	8085d8 <memcmp>
  807e24:	1004c03a 	cmpne	r2,r2,zero
  807e28:	1000031e 	bne	r2,zero,807e38 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  807e2c:	e0bffd17 	ldw	r2,-12(fp)
  807e30:	e0bfff15 	stw	r2,-4(fp)
  807e34:	00000806 	br	807e58 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  807e38:	e0bffd17 	ldw	r2,-12(fp)
  807e3c:	10800017 	ldw	r2,0(r2)
  807e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807e44:	00c02074 	movhi	r3,129
  807e48:	18ea7e04 	addi	r3,r3,-22024
  807e4c:	e0bffd17 	ldw	r2,-12(fp)
  807e50:	10ffc91e 	bne	r2,r3,807d78 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  807e54:	e03fff15 	stw	zero,-4(fp)
  807e58:	e0bfff17 	ldw	r2,-4(fp)
}
  807e5c:	e037883a 	mov	sp,fp
  807e60:	dfc00117 	ldw	ra,4(sp)
  807e64:	df000017 	ldw	fp,0(sp)
  807e68:	dec00204 	addi	sp,sp,8
  807e6c:	f800283a 	ret

00807e70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  807e70:	defffc04 	addi	sp,sp,-16
  807e74:	df000315 	stw	fp,12(sp)
  807e78:	df000304 	addi	fp,sp,12
  807e7c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  807e80:	00bffa04 	movi	r2,-24
  807e84:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807e88:	e03ffe15 	stw	zero,-8(fp)
  807e8c:	00001e06 	br	807f08 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  807e90:	e0bffe17 	ldw	r2,-8(fp)
  807e94:	00c02074 	movhi	r3,129
  807e98:	18e58904 	addi	r3,r3,-27100
  807e9c:	10800324 	muli	r2,r2,12
  807ea0:	10c5883a 	add	r2,r2,r3
  807ea4:	10800017 	ldw	r2,0(r2)
  807ea8:	1004c03a 	cmpne	r2,r2,zero
  807eac:	1000131e 	bne	r2,zero,807efc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  807eb0:	e0bffe17 	ldw	r2,-8(fp)
  807eb4:	00c02074 	movhi	r3,129
  807eb8:	18e58904 	addi	r3,r3,-27100
  807ebc:	10800324 	muli	r2,r2,12
  807ec0:	10c7883a 	add	r3,r2,r3
  807ec4:	e0bfff17 	ldw	r2,-4(fp)
  807ec8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  807ecc:	00802074 	movhi	r2,129
  807ed0:	10aa8204 	addi	r2,r2,-22008
  807ed4:	10c00017 	ldw	r3,0(r2)
  807ed8:	e0bffe17 	ldw	r2,-8(fp)
  807edc:	1880040e 	bge	r3,r2,807ef0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  807ee0:	00c02074 	movhi	r3,129
  807ee4:	18ea8204 	addi	r3,r3,-22008
  807ee8:	e0bffe17 	ldw	r2,-8(fp)
  807eec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  807ef0:	e0bffe17 	ldw	r2,-8(fp)
  807ef4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  807ef8:	00000606 	br	807f14 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807efc:	e0bffe17 	ldw	r2,-8(fp)
  807f00:	10800044 	addi	r2,r2,1
  807f04:	e0bffe15 	stw	r2,-8(fp)
  807f08:	e0bffe17 	ldw	r2,-8(fp)
  807f0c:	10800810 	cmplti	r2,r2,32
  807f10:	103fdf1e 	bne	r2,zero,807e90 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  807f14:	e0bffd17 	ldw	r2,-12(fp)
}
  807f18:	e037883a 	mov	sp,fp
  807f1c:	df000017 	ldw	fp,0(sp)
  807f20:	dec00104 	addi	sp,sp,4
  807f24:	f800283a 	ret

00807f28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  807f28:	defffe04 	addi	sp,sp,-8
  807f2c:	dfc00115 	stw	ra,4(sp)
  807f30:	df000015 	stw	fp,0(sp)
  807f34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807f38:	0009883a 	mov	r4,zero
  807f3c:	01440004 	movi	r5,4096
  807f40:	08084fc0 	call	8084fc <alt_icache_flush>
#endif
}
  807f44:	e037883a 	mov	sp,fp
  807f48:	dfc00117 	ldw	ra,4(sp)
  807f4c:	df000017 	ldw	fp,0(sp)
  807f50:	dec00204 	addi	sp,sp,8
  807f54:	f800283a 	ret

00807f58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807f58:	defff904 	addi	sp,sp,-28
  807f5c:	dfc00615 	stw	ra,24(sp)
  807f60:	df000515 	stw	fp,20(sp)
  807f64:	df000504 	addi	fp,sp,20
  807f68:	e13ffc15 	stw	r4,-16(fp)
  807f6c:	e17ffd15 	stw	r5,-12(fp)
  807f70:	e1bffe15 	stw	r6,-8(fp)
  807f74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807f78:	e0800217 	ldw	r2,8(fp)
  807f7c:	d8800015 	stw	r2,0(sp)
  807f80:	e13ffc17 	ldw	r4,-16(fp)
  807f84:	e17ffd17 	ldw	r5,-12(fp)
  807f88:	e1bffe17 	ldw	r6,-8(fp)
  807f8c:	e1ffff17 	ldw	r7,-4(fp)
  807f90:	080812c0 	call	80812c <alt_iic_isr_register>
}  
  807f94:	e037883a 	mov	sp,fp
  807f98:	dfc00117 	ldw	ra,4(sp)
  807f9c:	df000017 	ldw	fp,0(sp)
  807fa0:	dec00204 	addi	sp,sp,8
  807fa4:	f800283a 	ret

00807fa8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  807fa8:	defff904 	addi	sp,sp,-28
  807fac:	df000615 	stw	fp,24(sp)
  807fb0:	df000604 	addi	fp,sp,24
  807fb4:	e13ffe15 	stw	r4,-8(fp)
  807fb8:	e17fff15 	stw	r5,-4(fp)
  807fbc:	e0bfff17 	ldw	r2,-4(fp)
  807fc0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807fc4:	0005303a 	rdctl	r2,status
  807fc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807fcc:	e0fffb17 	ldw	r3,-20(fp)
  807fd0:	00bfff84 	movi	r2,-2
  807fd4:	1884703a 	and	r2,r3,r2
  807fd8:	1001703a 	wrctl	status,r2
  
  return context;
  807fdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807fe0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  807fe4:	e0fffc17 	ldw	r3,-16(fp)
  807fe8:	00800044 	movi	r2,1
  807fec:	10c4983a 	sll	r2,r2,r3
  807ff0:	1007883a 	mov	r3,r2
  807ff4:	00802074 	movhi	r2,129
  807ff8:	10b1b904 	addi	r2,r2,-14620
  807ffc:	10800017 	ldw	r2,0(r2)
  808000:	1886b03a 	or	r3,r3,r2
  808004:	00802074 	movhi	r2,129
  808008:	10b1b904 	addi	r2,r2,-14620
  80800c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  808010:	00802074 	movhi	r2,129
  808014:	10b1b904 	addi	r2,r2,-14620
  808018:	10800017 	ldw	r2,0(r2)
  80801c:	100170fa 	wrctl	ienable,r2
  808020:	e0bffd17 	ldw	r2,-12(fp)
  808024:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808028:	e0bffa17 	ldw	r2,-24(fp)
  80802c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  808030:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  808034:	e037883a 	mov	sp,fp
  808038:	df000017 	ldw	fp,0(sp)
  80803c:	dec00104 	addi	sp,sp,4
  808040:	f800283a 	ret

00808044 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  808044:	defff904 	addi	sp,sp,-28
  808048:	df000615 	stw	fp,24(sp)
  80804c:	df000604 	addi	fp,sp,24
  808050:	e13ffe15 	stw	r4,-8(fp)
  808054:	e17fff15 	stw	r5,-4(fp)
  808058:	e0bfff17 	ldw	r2,-4(fp)
  80805c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808060:	0005303a 	rdctl	r2,status
  808064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808068:	e0fffb17 	ldw	r3,-20(fp)
  80806c:	00bfff84 	movi	r2,-2
  808070:	1884703a 	and	r2,r3,r2
  808074:	1001703a 	wrctl	status,r2
  
  return context;
  808078:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80807c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  808080:	e0fffc17 	ldw	r3,-16(fp)
  808084:	00800044 	movi	r2,1
  808088:	10c4983a 	sll	r2,r2,r3
  80808c:	0084303a 	nor	r2,zero,r2
  808090:	1007883a 	mov	r3,r2
  808094:	00802074 	movhi	r2,129
  808098:	10b1b904 	addi	r2,r2,-14620
  80809c:	10800017 	ldw	r2,0(r2)
  8080a0:	1886703a 	and	r3,r3,r2
  8080a4:	00802074 	movhi	r2,129
  8080a8:	10b1b904 	addi	r2,r2,-14620
  8080ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8080b0:	00802074 	movhi	r2,129
  8080b4:	10b1b904 	addi	r2,r2,-14620
  8080b8:	10800017 	ldw	r2,0(r2)
  8080bc:	100170fa 	wrctl	ienable,r2
  8080c0:	e0bffd17 	ldw	r2,-12(fp)
  8080c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8080c8:	e0bffa17 	ldw	r2,-24(fp)
  8080cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8080d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8080d4:	e037883a 	mov	sp,fp
  8080d8:	df000017 	ldw	fp,0(sp)
  8080dc:	dec00104 	addi	sp,sp,4
  8080e0:	f800283a 	ret

008080e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8080e4:	defffc04 	addi	sp,sp,-16
  8080e8:	df000315 	stw	fp,12(sp)
  8080ec:	df000304 	addi	fp,sp,12
  8080f0:	e13ffe15 	stw	r4,-8(fp)
  8080f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8080f8:	000530fa 	rdctl	r2,ienable
  8080fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  808100:	e0ffff17 	ldw	r3,-4(fp)
  808104:	00800044 	movi	r2,1
  808108:	10c4983a 	sll	r2,r2,r3
  80810c:	1007883a 	mov	r3,r2
  808110:	e0bffd17 	ldw	r2,-12(fp)
  808114:	1884703a 	and	r2,r3,r2
  808118:	1004c03a 	cmpne	r2,r2,zero
}
  80811c:	e037883a 	mov	sp,fp
  808120:	df000017 	ldw	fp,0(sp)
  808124:	dec00104 	addi	sp,sp,4
  808128:	f800283a 	ret

0080812c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80812c:	defff404 	addi	sp,sp,-48
  808130:	dfc00b15 	stw	ra,44(sp)
  808134:	df000a15 	stw	fp,40(sp)
  808138:	df000a04 	addi	fp,sp,40
  80813c:	e13ffb15 	stw	r4,-20(fp)
  808140:	e17ffc15 	stw	r5,-16(fp)
  808144:	e1bffd15 	stw	r6,-12(fp)
  808148:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80814c:	00bffa84 	movi	r2,-22
  808150:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  808154:	e0bffc17 	ldw	r2,-16(fp)
  808158:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80815c:	e0bff917 	ldw	r2,-28(fp)
  808160:	10800808 	cmpgei	r2,r2,32
  808164:	1000291e 	bne	r2,zero,80820c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  808168:	0005303a 	rdctl	r2,status
  80816c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  808170:	e0fff717 	ldw	r3,-36(fp)
  808174:	00bfff84 	movi	r2,-2
  808178:	1884703a 	and	r2,r3,r2
  80817c:	1001703a 	wrctl	status,r2
  
  return context;
  808180:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  808184:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  808188:	e0bff917 	ldw	r2,-28(fp)
  80818c:	00c02074 	movhi	r3,129
  808190:	18f23404 	addi	r3,r3,-14128
  808194:	100490fa 	slli	r2,r2,3
  808198:	10c7883a 	add	r3,r2,r3
  80819c:	e0bffd17 	ldw	r2,-12(fp)
  8081a0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8081a4:	e0bff917 	ldw	r2,-28(fp)
  8081a8:	00c02074 	movhi	r3,129
  8081ac:	18f23404 	addi	r3,r3,-14128
  8081b0:	100490fa 	slli	r2,r2,3
  8081b4:	10c5883a 	add	r2,r2,r3
  8081b8:	10c00104 	addi	r3,r2,4
  8081bc:	e0bffe17 	ldw	r2,-8(fp)
  8081c0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8081c4:	e0bffd17 	ldw	r2,-12(fp)
  8081c8:	1005003a 	cmpeq	r2,r2,zero
  8081cc:	1000051e 	bne	r2,zero,8081e4 <alt_iic_isr_register+0xb8>
  8081d0:	e17ff917 	ldw	r5,-28(fp)
  8081d4:	e13ffb17 	ldw	r4,-20(fp)
  8081d8:	0807fa80 	call	807fa8 <alt_ic_irq_enable>
  8081dc:	e0bfff15 	stw	r2,-4(fp)
  8081e0:	00000406 	br	8081f4 <alt_iic_isr_register+0xc8>
  8081e4:	e17ff917 	ldw	r5,-28(fp)
  8081e8:	e13ffb17 	ldw	r4,-20(fp)
  8081ec:	08080440 	call	808044 <alt_ic_irq_disable>
  8081f0:	e0bfff15 	stw	r2,-4(fp)
  8081f4:	e0bfff17 	ldw	r2,-4(fp)
  8081f8:	e0bffa15 	stw	r2,-24(fp)
  8081fc:	e0bff817 	ldw	r2,-32(fp)
  808200:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808204:	e0bff617 	ldw	r2,-40(fp)
  808208:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80820c:	e0bffa17 	ldw	r2,-24(fp)
}
  808210:	e037883a 	mov	sp,fp
  808214:	dfc00117 	ldw	ra,4(sp)
  808218:	df000017 	ldw	fp,0(sp)
  80821c:	dec00204 	addi	sp,sp,8
  808220:	f800283a 	ret

00808224 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  808224:	defff904 	addi	sp,sp,-28
  808228:	dfc00615 	stw	ra,24(sp)
  80822c:	df000515 	stw	fp,20(sp)
  808230:	df000504 	addi	fp,sp,20
  808234:	e13ffc15 	stw	r4,-16(fp)
  808238:	e17ffd15 	stw	r5,-12(fp)
  80823c:	e1bffe15 	stw	r6,-8(fp)
  808240:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  808244:	e13ffd17 	ldw	r4,-12(fp)
  808248:	e17ffe17 	ldw	r5,-8(fp)
  80824c:	e1bfff17 	ldw	r6,-4(fp)
  808250:	0804d580 	call	804d58 <open>
  808254:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  808258:	e0bffb17 	ldw	r2,-20(fp)
  80825c:	1004803a 	cmplt	r2,r2,zero
  808260:	10001c1e 	bne	r2,zero,8082d4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  808264:	e0bffb17 	ldw	r2,-20(fp)
  808268:	00c02074 	movhi	r3,129
  80826c:	18e58904 	addi	r3,r3,-27100
  808270:	10800324 	muli	r2,r2,12
  808274:	10c5883a 	add	r2,r2,r3
  808278:	10c00017 	ldw	r3,0(r2)
  80827c:	e0bffc17 	ldw	r2,-16(fp)
  808280:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  808284:	e0bffb17 	ldw	r2,-20(fp)
  808288:	00c02074 	movhi	r3,129
  80828c:	18e58904 	addi	r3,r3,-27100
  808290:	10800324 	muli	r2,r2,12
  808294:	10c5883a 	add	r2,r2,r3
  808298:	10800104 	addi	r2,r2,4
  80829c:	10c00017 	ldw	r3,0(r2)
  8082a0:	e0bffc17 	ldw	r2,-16(fp)
  8082a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8082a8:	e0bffb17 	ldw	r2,-20(fp)
  8082ac:	00c02074 	movhi	r3,129
  8082b0:	18e58904 	addi	r3,r3,-27100
  8082b4:	10800324 	muli	r2,r2,12
  8082b8:	10c5883a 	add	r2,r2,r3
  8082bc:	10800204 	addi	r2,r2,8
  8082c0:	10c00017 	ldw	r3,0(r2)
  8082c4:	e0bffc17 	ldw	r2,-16(fp)
  8082c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8082cc:	e13ffb17 	ldw	r4,-20(fp)
  8082d0:	08050c00 	call	8050c0 <alt_release_fd>
  }
} 
  8082d4:	e037883a 	mov	sp,fp
  8082d8:	dfc00117 	ldw	ra,4(sp)
  8082dc:	df000017 	ldw	fp,0(sp)
  8082e0:	dec00204 	addi	sp,sp,8
  8082e4:	f800283a 	ret

008082e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8082e8:	defffb04 	addi	sp,sp,-20
  8082ec:	dfc00415 	stw	ra,16(sp)
  8082f0:	df000315 	stw	fp,12(sp)
  8082f4:	df000304 	addi	fp,sp,12
  8082f8:	e13ffd15 	stw	r4,-12(fp)
  8082fc:	e17ffe15 	stw	r5,-8(fp)
  808300:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  808304:	01002074 	movhi	r4,129
  808308:	21258c04 	addi	r4,r4,-27088
  80830c:	e17ffd17 	ldw	r5,-12(fp)
  808310:	01800044 	movi	r6,1
  808314:	01c07fc4 	movi	r7,511
  808318:	08082240 	call	808224 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80831c:	01002074 	movhi	r4,129
  808320:	21258904 	addi	r4,r4,-27100
  808324:	e17ffe17 	ldw	r5,-8(fp)
  808328:	000d883a 	mov	r6,zero
  80832c:	01c07fc4 	movi	r7,511
  808330:	08082240 	call	808224 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  808334:	01002074 	movhi	r4,129
  808338:	21258f04 	addi	r4,r4,-27076
  80833c:	e17fff17 	ldw	r5,-4(fp)
  808340:	01800044 	movi	r6,1
  808344:	01c07fc4 	movi	r7,511
  808348:	08082240 	call	808224 <alt_open_fd>
}  
  80834c:	e037883a 	mov	sp,fp
  808350:	dfc00117 	ldw	ra,4(sp)
  808354:	df000017 	ldw	fp,0(sp)
  808358:	dec00204 	addi	sp,sp,8
  80835c:	f800283a 	ret

00808360 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  808360:	defffd04 	addi	sp,sp,-12
  808364:	dfc00215 	stw	ra,8(sp)
  808368:	df000115 	stw	fp,4(sp)
  80836c:	df000104 	addi	fp,sp,4
  808370:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  808374:	e13fff17 	ldw	r4,-4(fp)
  808378:	08083b00 	call	8083b0 <alt_busy_sleep>
}
  80837c:	e037883a 	mov	sp,fp
  808380:	dfc00117 	ldw	ra,4(sp)
  808384:	df000017 	ldw	fp,0(sp)
  808388:	dec00204 	addi	sp,sp,8
  80838c:	f800283a 	ret

00808390 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  808390:	deffff04 	addi	sp,sp,-4
  808394:	df000015 	stw	fp,0(sp)
  808398:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80839c:	000170fa 	wrctl	ienable,zero
}
  8083a0:	e037883a 	mov	sp,fp
  8083a4:	df000017 	ldw	fp,0(sp)
  8083a8:	dec00104 	addi	sp,sp,4
  8083ac:	f800283a 	ret

008083b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8083b0:	defffa04 	addi	sp,sp,-24
  8083b4:	dfc00515 	stw	ra,20(sp)
  8083b8:	df000415 	stw	fp,16(sp)
  8083bc:	df000404 	addi	fp,sp,16
  8083c0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8083c4:	008000c4 	movi	r2,3
  8083c8:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  8083cc:	e0fffc17 	ldw	r3,-16(fp)
  8083d0:	008003f4 	movhi	r2,15
  8083d4:	10909004 	addi	r2,r2,16960
  8083d8:	188b383a 	mul	r5,r3,r2
  8083dc:	0100bef4 	movhi	r4,763
  8083e0:	213c2004 	addi	r4,r4,-3968
  8083e4:	0808a700 	call	808a70 <__udivsi3>
  8083e8:	100b883a 	mov	r5,r2
  8083ec:	01200034 	movhi	r4,32768
  8083f0:	213fffc4 	addi	r4,r4,-1
  8083f4:	0808a700 	call	808a70 <__udivsi3>
  8083f8:	100b883a 	mov	r5,r2
  8083fc:	e13fff17 	ldw	r4,-4(fp)
  808400:	0808a700 	call	808a70 <__udivsi3>
  808404:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  808408:	e0bffd17 	ldw	r2,-12(fp)
  80840c:	1005003a 	cmpeq	r2,r2,zero
  808410:	1000281e 	bne	r2,zero,8084b4 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  808414:	e03ffe15 	stw	zero,-8(fp)
  808418:	00001606 	br	808474 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80841c:	00a00034 	movhi	r2,32768
  808420:	10bfffc4 	addi	r2,r2,-1
  808424:	10bfffc4 	addi	r2,r2,-1
  808428:	103ffe1e 	bne	r2,zero,808424 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80842c:	e0fffc17 	ldw	r3,-16(fp)
  808430:	008003f4 	movhi	r2,15
  808434:	10909004 	addi	r2,r2,16960
  808438:	188b383a 	mul	r5,r3,r2
  80843c:	0100bef4 	movhi	r4,763
  808440:	213c2004 	addi	r4,r4,-3968
  808444:	0808a700 	call	808a70 <__udivsi3>
  808448:	100b883a 	mov	r5,r2
  80844c:	01200034 	movhi	r4,32768
  808450:	213fffc4 	addi	r4,r4,-1
  808454:	0808a700 	call	808a70 <__udivsi3>
  808458:	1007883a 	mov	r3,r2
  80845c:	e0bfff17 	ldw	r2,-4(fp)
  808460:	10c5c83a 	sub	r2,r2,r3
  808464:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  808468:	e0bffe17 	ldw	r2,-8(fp)
  80846c:	10800044 	addi	r2,r2,1
  808470:	e0bffe15 	stw	r2,-8(fp)
  808474:	e0fffe17 	ldw	r3,-8(fp)
  808478:	e0bffd17 	ldw	r2,-12(fp)
  80847c:	18bfe716 	blt	r3,r2,80841c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  808480:	e0fffc17 	ldw	r3,-16(fp)
  808484:	008003f4 	movhi	r2,15
  808488:	10909004 	addi	r2,r2,16960
  80848c:	188b383a 	mul	r5,r3,r2
  808490:	0100bef4 	movhi	r4,763
  808494:	213c2004 	addi	r4,r4,-3968
  808498:	0808a700 	call	808a70 <__udivsi3>
  80849c:	1007883a 	mov	r3,r2
  8084a0:	e0bfff17 	ldw	r2,-4(fp)
  8084a4:	1885383a 	mul	r2,r3,r2
  8084a8:	10bfffc4 	addi	r2,r2,-1
  8084ac:	103ffe1e 	bne	r2,zero,8084a8 <alt_busy_sleep+0xf8>
  8084b0:	00000c06 	br	8084e4 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8084b4:	e0fffc17 	ldw	r3,-16(fp)
  8084b8:	008003f4 	movhi	r2,15
  8084bc:	10909004 	addi	r2,r2,16960
  8084c0:	188b383a 	mul	r5,r3,r2
  8084c4:	0100bef4 	movhi	r4,763
  8084c8:	213c2004 	addi	r4,r4,-3968
  8084cc:	0808a700 	call	808a70 <__udivsi3>
  8084d0:	1007883a 	mov	r3,r2
  8084d4:	e0bfff17 	ldw	r2,-4(fp)
  8084d8:	1885383a 	mul	r2,r3,r2
  8084dc:	10bfffc4 	addi	r2,r2,-1
  8084e0:	00bffe16 	blt	zero,r2,8084dc <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8084e4:	0005883a 	mov	r2,zero
}
  8084e8:	e037883a 	mov	sp,fp
  8084ec:	dfc00117 	ldw	ra,4(sp)
  8084f0:	df000017 	ldw	fp,0(sp)
  8084f4:	dec00204 	addi	sp,sp,8
  8084f8:	f800283a 	ret

008084fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8084fc:	defffb04 	addi	sp,sp,-20
  808500:	df000415 	stw	fp,16(sp)
  808504:	df000404 	addi	fp,sp,16
  808508:	e13ffe15 	stw	r4,-8(fp)
  80850c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  808510:	e0bfff17 	ldw	r2,-4(fp)
  808514:	10840070 	cmpltui	r2,r2,4097
  808518:	1000021e 	bne	r2,zero,808524 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80851c:	00840004 	movi	r2,4096
  808520:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  808524:	e0fffe17 	ldw	r3,-8(fp)
  808528:	e0bfff17 	ldw	r2,-4(fp)
  80852c:	1885883a 	add	r2,r3,r2
  808530:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808534:	e0bffe17 	ldw	r2,-8(fp)
  808538:	e0bffd15 	stw	r2,-12(fp)
  80853c:	00000506 	br	808554 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  808540:	e0bffd17 	ldw	r2,-12(fp)
  808544:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808548:	e0bffd17 	ldw	r2,-12(fp)
  80854c:	10800804 	addi	r2,r2,32
  808550:	e0bffd15 	stw	r2,-12(fp)
  808554:	e0fffd17 	ldw	r3,-12(fp)
  808558:	e0bffc17 	ldw	r2,-16(fp)
  80855c:	18bff836 	bltu	r3,r2,808540 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  808560:	e0bffe17 	ldw	r2,-8(fp)
  808564:	108007cc 	andi	r2,r2,31
  808568:	1005003a 	cmpeq	r2,r2,zero
  80856c:	1000021e 	bne	r2,zero,808578 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  808570:	e0bffd17 	ldw	r2,-12(fp)
  808574:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  808578:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80857c:	e037883a 	mov	sp,fp
  808580:	df000017 	ldw	fp,0(sp)
  808584:	dec00104 	addi	sp,sp,4
  808588:	f800283a 	ret

0080858c <atexit>:
  80858c:	200b883a 	mov	r5,r4
  808590:	000d883a 	mov	r6,zero
  808594:	0009883a 	mov	r4,zero
  808598:	000f883a 	mov	r7,zero
  80859c:	080864c1 	jmpi	80864c <__register_exitproc>

008085a0 <exit>:
  8085a0:	defffe04 	addi	sp,sp,-8
  8085a4:	000b883a 	mov	r5,zero
  8085a8:	dc000015 	stw	r16,0(sp)
  8085ac:	dfc00115 	stw	ra,4(sp)
  8085b0:	2021883a 	mov	r16,r4
  8085b4:	08087840 	call	808784 <__call_exitprocs>
  8085b8:	00802074 	movhi	r2,129
  8085bc:	10aa7b04 	addi	r2,r2,-22036
  8085c0:	11000017 	ldw	r4,0(r2)
  8085c4:	20800f17 	ldw	r2,60(r4)
  8085c8:	10000126 	beq	r2,zero,8085d0 <exit+0x30>
  8085cc:	103ee83a 	callr	r2
  8085d0:	8009883a 	mov	r4,r16
  8085d4:	0808ac00 	call	808ac0 <_exit>

008085d8 <memcmp>:
  8085d8:	00c000c4 	movi	r3,3
  8085dc:	1980032e 	bgeu	r3,r6,8085ec <memcmp+0x14>
  8085e0:	2144b03a 	or	r2,r4,r5
  8085e4:	10c4703a 	and	r2,r2,r3
  8085e8:	10000f26 	beq	r2,zero,808628 <memcmp+0x50>
  8085ec:	31ffffc4 	addi	r7,r6,-1
  8085f0:	3000061e 	bne	r6,zero,80860c <memcmp+0x34>
  8085f4:	00000a06 	br	808620 <memcmp+0x48>
  8085f8:	39ffffc4 	addi	r7,r7,-1
  8085fc:	00bfffc4 	movi	r2,-1
  808600:	21000044 	addi	r4,r4,1
  808604:	29400044 	addi	r5,r5,1
  808608:	38800526 	beq	r7,r2,808620 <memcmp+0x48>
  80860c:	20c00003 	ldbu	r3,0(r4)
  808610:	28800003 	ldbu	r2,0(r5)
  808614:	18bff826 	beq	r3,r2,8085f8 <memcmp+0x20>
  808618:	1885c83a 	sub	r2,r3,r2
  80861c:	f800283a 	ret
  808620:	0005883a 	mov	r2,zero
  808624:	f800283a 	ret
  808628:	180f883a 	mov	r7,r3
  80862c:	20c00017 	ldw	r3,0(r4)
  808630:	28800017 	ldw	r2,0(r5)
  808634:	18bfed1e 	bne	r3,r2,8085ec <memcmp+0x14>
  808638:	31bfff04 	addi	r6,r6,-4
  80863c:	21000104 	addi	r4,r4,4
  808640:	29400104 	addi	r5,r5,4
  808644:	39bff936 	bltu	r7,r6,80862c <memcmp+0x54>
  808648:	003fe806 	br	8085ec <memcmp+0x14>

0080864c <__register_exitproc>:
  80864c:	defffa04 	addi	sp,sp,-24
  808650:	00802074 	movhi	r2,129
  808654:	10aa7b04 	addi	r2,r2,-22036
  808658:	dc000015 	stw	r16,0(sp)
  80865c:	14000017 	ldw	r16,0(r2)
  808660:	dd000415 	stw	r20,16(sp)
  808664:	2829883a 	mov	r20,r5
  808668:	81405217 	ldw	r5,328(r16)
  80866c:	dcc00315 	stw	r19,12(sp)
  808670:	dc800215 	stw	r18,8(sp)
  808674:	dc400115 	stw	r17,4(sp)
  808678:	dfc00515 	stw	ra,20(sp)
  80867c:	2023883a 	mov	r17,r4
  808680:	3027883a 	mov	r19,r6
  808684:	3825883a 	mov	r18,r7
  808688:	28002526 	beq	r5,zero,808720 <__register_exitproc+0xd4>
  80868c:	29000117 	ldw	r4,4(r5)
  808690:	008007c4 	movi	r2,31
  808694:	11002716 	blt	r2,r4,808734 <__register_exitproc+0xe8>
  808698:	8800101e 	bne	r17,zero,8086dc <__register_exitproc+0x90>
  80869c:	2105883a 	add	r2,r4,r4
  8086a0:	1085883a 	add	r2,r2,r2
  8086a4:	20c00044 	addi	r3,r4,1
  8086a8:	1145883a 	add	r2,r2,r5
  8086ac:	0009883a 	mov	r4,zero
  8086b0:	15000215 	stw	r20,8(r2)
  8086b4:	28c00115 	stw	r3,4(r5)
  8086b8:	2005883a 	mov	r2,r4
  8086bc:	dfc00517 	ldw	ra,20(sp)
  8086c0:	dd000417 	ldw	r20,16(sp)
  8086c4:	dcc00317 	ldw	r19,12(sp)
  8086c8:	dc800217 	ldw	r18,8(sp)
  8086cc:	dc400117 	ldw	r17,4(sp)
  8086d0:	dc000017 	ldw	r16,0(sp)
  8086d4:	dec00604 	addi	sp,sp,24
  8086d8:	f800283a 	ret
  8086dc:	29802204 	addi	r6,r5,136
  8086e0:	00800044 	movi	r2,1
  8086e4:	110e983a 	sll	r7,r2,r4
  8086e8:	30c04017 	ldw	r3,256(r6)
  8086ec:	2105883a 	add	r2,r4,r4
  8086f0:	1085883a 	add	r2,r2,r2
  8086f4:	1185883a 	add	r2,r2,r6
  8086f8:	19c6b03a 	or	r3,r3,r7
  8086fc:	14802015 	stw	r18,128(r2)
  808700:	14c00015 	stw	r19,0(r2)
  808704:	00800084 	movi	r2,2
  808708:	30c04015 	stw	r3,256(r6)
  80870c:	88bfe31e 	bne	r17,r2,80869c <__register_exitproc+0x50>
  808710:	30804117 	ldw	r2,260(r6)
  808714:	11c4b03a 	or	r2,r2,r7
  808718:	30804115 	stw	r2,260(r6)
  80871c:	003fdf06 	br	80869c <__register_exitproc+0x50>
  808720:	00802074 	movhi	r2,129
  808724:	10b27404 	addi	r2,r2,-13872
  808728:	100b883a 	mov	r5,r2
  80872c:	80805215 	stw	r2,328(r16)
  808730:	003fd606 	br	80868c <__register_exitproc+0x40>
  808734:	00800034 	movhi	r2,0
  808738:	10800004 	addi	r2,r2,0
  80873c:	1000021e 	bne	r2,zero,808748 <__register_exitproc+0xfc>
  808740:	013fffc4 	movi	r4,-1
  808744:	003fdc06 	br	8086b8 <__register_exitproc+0x6c>
  808748:	01006404 	movi	r4,400
  80874c:	103ee83a 	callr	r2
  808750:	1007883a 	mov	r3,r2
  808754:	103ffa26 	beq	r2,zero,808740 <__register_exitproc+0xf4>
  808758:	80805217 	ldw	r2,328(r16)
  80875c:	180b883a 	mov	r5,r3
  808760:	18000115 	stw	zero,4(r3)
  808764:	18800015 	stw	r2,0(r3)
  808768:	80c05215 	stw	r3,328(r16)
  80876c:	18006215 	stw	zero,392(r3)
  808770:	18006315 	stw	zero,396(r3)
  808774:	0009883a 	mov	r4,zero
  808778:	883fc826 	beq	r17,zero,80869c <__register_exitproc+0x50>
  80877c:	003fd706 	br	8086dc <__register_exitproc+0x90>

00808780 <register_fini>:
  808780:	f800283a 	ret

00808784 <__call_exitprocs>:
  808784:	00802074 	movhi	r2,129
  808788:	10aa7b04 	addi	r2,r2,-22036
  80878c:	10800017 	ldw	r2,0(r2)
  808790:	defff304 	addi	sp,sp,-52
  808794:	df000b15 	stw	fp,44(sp)
  808798:	d8800115 	stw	r2,4(sp)
  80879c:	00800034 	movhi	r2,0
  8087a0:	10800004 	addi	r2,r2,0
  8087a4:	1005003a 	cmpeq	r2,r2,zero
  8087a8:	d8800215 	stw	r2,8(sp)
  8087ac:	d8800117 	ldw	r2,4(sp)
  8087b0:	dd400815 	stw	r21,32(sp)
  8087b4:	dd000715 	stw	r20,28(sp)
  8087b8:	10805204 	addi	r2,r2,328
  8087bc:	dfc00c15 	stw	ra,48(sp)
  8087c0:	ddc00a15 	stw	r23,40(sp)
  8087c4:	dd800915 	stw	r22,36(sp)
  8087c8:	dcc00615 	stw	r19,24(sp)
  8087cc:	dc800515 	stw	r18,20(sp)
  8087d0:	dc400415 	stw	r17,16(sp)
  8087d4:	dc000315 	stw	r16,12(sp)
  8087d8:	282b883a 	mov	r21,r5
  8087dc:	2039883a 	mov	fp,r4
  8087e0:	d8800015 	stw	r2,0(sp)
  8087e4:	2829003a 	cmpeq	r20,r5,zero
  8087e8:	d8800117 	ldw	r2,4(sp)
  8087ec:	14405217 	ldw	r17,328(r2)
  8087f0:	88001026 	beq	r17,zero,808834 <__call_exitprocs+0xb0>
  8087f4:	ddc00017 	ldw	r23,0(sp)
  8087f8:	88800117 	ldw	r2,4(r17)
  8087fc:	8c802204 	addi	r18,r17,136
  808800:	143fffc4 	addi	r16,r2,-1
  808804:	80000916 	blt	r16,zero,80882c <__call_exitprocs+0xa8>
  808808:	05bfffc4 	movi	r22,-1
  80880c:	a000151e 	bne	r20,zero,808864 <__call_exitprocs+0xe0>
  808810:	8409883a 	add	r4,r16,r16
  808814:	2105883a 	add	r2,r4,r4
  808818:	1485883a 	add	r2,r2,r18
  80881c:	10c02017 	ldw	r3,128(r2)
  808820:	a8c01126 	beq	r21,r3,808868 <__call_exitprocs+0xe4>
  808824:	843fffc4 	addi	r16,r16,-1
  808828:	85bff81e 	bne	r16,r22,80880c <__call_exitprocs+0x88>
  80882c:	d8800217 	ldw	r2,8(sp)
  808830:	10003126 	beq	r2,zero,8088f8 <__call_exitprocs+0x174>
  808834:	dfc00c17 	ldw	ra,48(sp)
  808838:	df000b17 	ldw	fp,44(sp)
  80883c:	ddc00a17 	ldw	r23,40(sp)
  808840:	dd800917 	ldw	r22,36(sp)
  808844:	dd400817 	ldw	r21,32(sp)
  808848:	dd000717 	ldw	r20,28(sp)
  80884c:	dcc00617 	ldw	r19,24(sp)
  808850:	dc800517 	ldw	r18,20(sp)
  808854:	dc400417 	ldw	r17,16(sp)
  808858:	dc000317 	ldw	r16,12(sp)
  80885c:	dec00d04 	addi	sp,sp,52
  808860:	f800283a 	ret
  808864:	8409883a 	add	r4,r16,r16
  808868:	88c00117 	ldw	r3,4(r17)
  80886c:	2105883a 	add	r2,r4,r4
  808870:	1445883a 	add	r2,r2,r17
  808874:	18ffffc4 	addi	r3,r3,-1
  808878:	11800217 	ldw	r6,8(r2)
  80887c:	1c001526 	beq	r3,r16,8088d4 <__call_exitprocs+0x150>
  808880:	10000215 	stw	zero,8(r2)
  808884:	303fe726 	beq	r6,zero,808824 <__call_exitprocs+0xa0>
  808888:	00c00044 	movi	r3,1
  80888c:	1c06983a 	sll	r3,r3,r16
  808890:	90804017 	ldw	r2,256(r18)
  808894:	8cc00117 	ldw	r19,4(r17)
  808898:	1884703a 	and	r2,r3,r2
  80889c:	10001426 	beq	r2,zero,8088f0 <__call_exitprocs+0x16c>
  8088a0:	90804117 	ldw	r2,260(r18)
  8088a4:	1884703a 	and	r2,r3,r2
  8088a8:	10000c1e 	bne	r2,zero,8088dc <__call_exitprocs+0x158>
  8088ac:	2105883a 	add	r2,r4,r4
  8088b0:	1485883a 	add	r2,r2,r18
  8088b4:	11400017 	ldw	r5,0(r2)
  8088b8:	e009883a 	mov	r4,fp
  8088bc:	303ee83a 	callr	r6
  8088c0:	88800117 	ldw	r2,4(r17)
  8088c4:	98bfc81e 	bne	r19,r2,8087e8 <__call_exitprocs+0x64>
  8088c8:	b8800017 	ldw	r2,0(r23)
  8088cc:	147fd526 	beq	r2,r17,808824 <__call_exitprocs+0xa0>
  8088d0:	003fc506 	br	8087e8 <__call_exitprocs+0x64>
  8088d4:	8c000115 	stw	r16,4(r17)
  8088d8:	003fea06 	br	808884 <__call_exitprocs+0x100>
  8088dc:	2105883a 	add	r2,r4,r4
  8088e0:	1485883a 	add	r2,r2,r18
  8088e4:	11000017 	ldw	r4,0(r2)
  8088e8:	303ee83a 	callr	r6
  8088ec:	003ff406 	br	8088c0 <__call_exitprocs+0x13c>
  8088f0:	303ee83a 	callr	r6
  8088f4:	003ff206 	br	8088c0 <__call_exitprocs+0x13c>
  8088f8:	88800117 	ldw	r2,4(r17)
  8088fc:	1000081e 	bne	r2,zero,808920 <__call_exitprocs+0x19c>
  808900:	89000017 	ldw	r4,0(r17)
  808904:	20000726 	beq	r4,zero,808924 <__call_exitprocs+0x1a0>
  808908:	b9000015 	stw	r4,0(r23)
  80890c:	8809883a 	mov	r4,r17
  808910:	00000000 	call	0 <__alt_mem_sdram_controller-0x800000>
  808914:	bc400017 	ldw	r17,0(r23)
  808918:	883fb71e 	bne	r17,zero,8087f8 <__call_exitprocs+0x74>
  80891c:	003fc506 	br	808834 <__call_exitprocs+0xb0>
  808920:	89000017 	ldw	r4,0(r17)
  808924:	882f883a 	mov	r23,r17
  808928:	2023883a 	mov	r17,r4
  80892c:	883fb21e 	bne	r17,zero,8087f8 <__call_exitprocs+0x74>
  808930:	003fc006 	br	808834 <__call_exitprocs+0xb0>

00808934 <udivmodsi4>:
  808934:	29001b2e 	bgeu	r5,r4,8089a4 <udivmodsi4+0x70>
  808938:	28001a16 	blt	r5,zero,8089a4 <udivmodsi4+0x70>
  80893c:	00800044 	movi	r2,1
  808940:	0007883a 	mov	r3,zero
  808944:	01c007c4 	movi	r7,31
  808948:	00000306 	br	808958 <udivmodsi4+0x24>
  80894c:	19c01326 	beq	r3,r7,80899c <udivmodsi4+0x68>
  808950:	18c00044 	addi	r3,r3,1
  808954:	28000416 	blt	r5,zero,808968 <udivmodsi4+0x34>
  808958:	294b883a 	add	r5,r5,r5
  80895c:	1085883a 	add	r2,r2,r2
  808960:	293ffa36 	bltu	r5,r4,80894c <udivmodsi4+0x18>
  808964:	10000d26 	beq	r2,zero,80899c <udivmodsi4+0x68>
  808968:	0007883a 	mov	r3,zero
  80896c:	21400236 	bltu	r4,r5,808978 <udivmodsi4+0x44>
  808970:	2149c83a 	sub	r4,r4,r5
  808974:	1886b03a 	or	r3,r3,r2
  808978:	1004d07a 	srli	r2,r2,1
  80897c:	280ad07a 	srli	r5,r5,1
  808980:	103ffa1e 	bne	r2,zero,80896c <udivmodsi4+0x38>
  808984:	30000226 	beq	r6,zero,808990 <udivmodsi4+0x5c>
  808988:	2005883a 	mov	r2,r4
  80898c:	f800283a 	ret
  808990:	1809883a 	mov	r4,r3
  808994:	2005883a 	mov	r2,r4
  808998:	f800283a 	ret
  80899c:	0007883a 	mov	r3,zero
  8089a0:	003ff806 	br	808984 <udivmodsi4+0x50>
  8089a4:	00800044 	movi	r2,1
  8089a8:	0007883a 	mov	r3,zero
  8089ac:	003fef06 	br	80896c <udivmodsi4+0x38>

008089b0 <__divsi3>:
  8089b0:	defffe04 	addi	sp,sp,-8
  8089b4:	dc000015 	stw	r16,0(sp)
  8089b8:	dfc00115 	stw	ra,4(sp)
  8089bc:	0021883a 	mov	r16,zero
  8089c0:	20000c16 	blt	r4,zero,8089f4 <__divsi3+0x44>
  8089c4:	000d883a 	mov	r6,zero
  8089c8:	28000e16 	blt	r5,zero,808a04 <__divsi3+0x54>
  8089cc:	08089340 	call	808934 <udivmodsi4>
  8089d0:	1007883a 	mov	r3,r2
  8089d4:	8005003a 	cmpeq	r2,r16,zero
  8089d8:	1000011e 	bne	r2,zero,8089e0 <__divsi3+0x30>
  8089dc:	00c7c83a 	sub	r3,zero,r3
  8089e0:	1805883a 	mov	r2,r3
  8089e4:	dfc00117 	ldw	ra,4(sp)
  8089e8:	dc000017 	ldw	r16,0(sp)
  8089ec:	dec00204 	addi	sp,sp,8
  8089f0:	f800283a 	ret
  8089f4:	0109c83a 	sub	r4,zero,r4
  8089f8:	04000044 	movi	r16,1
  8089fc:	000d883a 	mov	r6,zero
  808a00:	283ff20e 	bge	r5,zero,8089cc <__divsi3+0x1c>
  808a04:	014bc83a 	sub	r5,zero,r5
  808a08:	8021003a 	cmpeq	r16,r16,zero
  808a0c:	003fef06 	br	8089cc <__divsi3+0x1c>

00808a10 <__modsi3>:
  808a10:	deffff04 	addi	sp,sp,-4
  808a14:	dfc00015 	stw	ra,0(sp)
  808a18:	01800044 	movi	r6,1
  808a1c:	2807883a 	mov	r3,r5
  808a20:	20000416 	blt	r4,zero,808a34 <__modsi3+0x24>
  808a24:	28000c16 	blt	r5,zero,808a58 <__modsi3+0x48>
  808a28:	dfc00017 	ldw	ra,0(sp)
  808a2c:	dec00104 	addi	sp,sp,4
  808a30:	08089341 	jmpi	808934 <udivmodsi4>
  808a34:	0109c83a 	sub	r4,zero,r4
  808a38:	28000b16 	blt	r5,zero,808a68 <__modsi3+0x58>
  808a3c:	180b883a 	mov	r5,r3
  808a40:	01800044 	movi	r6,1
  808a44:	08089340 	call	808934 <udivmodsi4>
  808a48:	0085c83a 	sub	r2,zero,r2
  808a4c:	dfc00017 	ldw	ra,0(sp)
  808a50:	dec00104 	addi	sp,sp,4
  808a54:	f800283a 	ret
  808a58:	014bc83a 	sub	r5,zero,r5
  808a5c:	dfc00017 	ldw	ra,0(sp)
  808a60:	dec00104 	addi	sp,sp,4
  808a64:	08089341 	jmpi	808934 <udivmodsi4>
  808a68:	0147c83a 	sub	r3,zero,r5
  808a6c:	003ff306 	br	808a3c <__modsi3+0x2c>

00808a70 <__udivsi3>:
  808a70:	000d883a 	mov	r6,zero
  808a74:	08089341 	jmpi	808934 <udivmodsi4>

00808a78 <__umodsi3>:
  808a78:	01800044 	movi	r6,1
  808a7c:	08089341 	jmpi	808934 <udivmodsi4>

00808a80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  808a80:	defffd04 	addi	sp,sp,-12
  808a84:	df000215 	stw	fp,8(sp)
  808a88:	df000204 	addi	fp,sp,8
  808a8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  808a90:	e0bfff17 	ldw	r2,-4(fp)
  808a94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  808a98:	e0bffe17 	ldw	r2,-8(fp)
  808a9c:	1005003a 	cmpeq	r2,r2,zero
  808aa0:	1000021e 	bne	r2,zero,808aac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  808aa4:	002af070 	cmpltui	zero,zero,43969
  808aa8:	00000106 	br	808ab0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  808aac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  808ab0:	e037883a 	mov	sp,fp
  808ab4:	df000017 	ldw	fp,0(sp)
  808ab8:	dec00104 	addi	sp,sp,4
  808abc:	f800283a 	ret

00808ac0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  808ac0:	defffd04 	addi	sp,sp,-12
  808ac4:	dfc00215 	stw	ra,8(sp)
  808ac8:	df000115 	stw	fp,4(sp)
  808acc:	df000104 	addi	fp,sp,4
  808ad0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  808ad4:	e13fff17 	ldw	r4,-4(fp)
  808ad8:	0808a800 	call	808a80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  808adc:	003fff06 	br	808adc <_exit+0x1c>
  808ae0:	00808780 	call	80878 <__alt_mem_sdram_controller-0x77f788>
