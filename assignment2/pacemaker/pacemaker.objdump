
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00008c20 memsz 0x00008c20 flags r-x
    LOAD off    0x00009c40 vaddr 0x00808c40 paddr 0x0080a874 align 2**12
         filesz 0x00001c34 memsz 0x00001c34 flags rw-
    LOAD off    0x0000c4a8 vaddr 0x0080c4a8 paddr 0x0080c4a8 align 2**12
         filesz 0x00000000 memsz 0x000003f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008780  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000030c  00808934  00808934  00009934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c34  00808c40  0080a874  00009c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f0  0080c4a8  0080c4a8  0000c4a8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000b874  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ad8  00000000  00000000  0000b898  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001405  00000000  00000000  0000c370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000207f4  00000000  00000000  0000d775  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006353  00000000  00000000  0002df69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fd36  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015fc  00000000  00000000  00043ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a21  00000000  00000000  000455f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004cda  00000000  00000000  00047011  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0004bcec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0004bd50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004f3e7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0004f3ea  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004f3ed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004f3ee  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004f3ef  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004f3f3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004f3f7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004f3fb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0004f404  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0004f40d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0004f416  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  0004f41c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  0004f435  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00808934 l    d  .rodata	00000000 .rodata
00808c40 l    d  .rwdata	00000000 .rwdata
0080c4a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0080c5b0 l     O .bss	00000018 led0_timer
0080c5c8 l     O .bss	00000018 led1_timer
0080c598 l     O .bss	00000018 URI_timer
0080c520 l     O .bss	00000018 LRI_timer
0080c538 l     O .bss	00000018 PVARP_timer
0080c550 l     O .bss	00000018 VRP_timer
0080c568 l     O .bss	00000018 AEI_timer
0080c580 l     O .bss	00000018 AVI_timer
00000000 l    df *ABS*	00000000 pacemaker_fsm.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
00808c40 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
008022e4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00802848 l     F .text	00000058 std
00802954 l     F .text	00000008 __fp_lock
0080295c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00804504 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00804564 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00804664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00804784 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00804864 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008049c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00804acc l     F .text	000000dc alt_file_locked
00804d30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00804eb0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080a85c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008052f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008095f0 l     O .rwdata	00001060 jtag_uart
0080a650 l     O .rwdata	00000120 lcd
0080a770 l     O .rwdata	000000c4 uart
00805418 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00805658 l     F .text	00000228 altera_avalon_jtag_uart_irq
00805880 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080a868 l     O .rwdata	00000004 colstart
00805efc l     F .text	000000b8 lcd_write_command
00805fb4 l     F .text	000000d4 lcd_write_data
00806088 l     F .text	000000c4 lcd_clear_screen
0080614c l     F .text	000001ec lcd_repaint_screen
00806338 l     F .text	000000c8 lcd_scroll_up
00806400 l     F .text	000002d0 lcd_handle_escape
00806bdc l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00806e3c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008070fc l     F .text	0000009c altera_avalon_uart_irq
00807198 l     F .text	000000e0 altera_avalon_uart_rxirq
00807278 l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00807664 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080788c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008079e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00808074 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00808ac0 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008085d0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
00808784 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
008088d0 l     F .text	00000040 alt_sim_halt
0080c4bc g     O .bss	00000001 PRE_g2
0080c4bd g     O .bss	00000001 g3b
00803604 g     F .text	00000070 _isatty_r
00804a20 g     F .text	0000006c alt_main
0080206c g     F .text	000000a0 _puts_r
0080c608 g     O .bss	00000100 alt_irq
00803674 g     F .text	00000078 _lseek_r
0080c4be g     O .bss	00000001 g4
0080a874 g       *ABS*	00000000 __flash_rwdata_start
0080c4bf g     O .bss	00000001 g19
00802b08 g     F .text	000000a0 __sflags
0080c4ac g     O .bss	00000001 URI_t
0080c898 g       *ABS*	00000000 __alt_heap_start
0080c4c0 g     O .bss	00000001 g25_e1
00802378 g     F .text	00000068 __sseek
008028b0 g     F .text	000000a4 __sinit
0080c4c1 g     O .bss	00000001 g27
008029b0 g     F .text	00000068 __sfmoreglue
00804aac g     F .text	00000020 __malloc_unlock
0080c4c2 g     O .bss	00000001 g3
00800280 g     F .text	00000040 LRI_timer_isr
00803870 g     F .text	000000e0 memmove
0080c4c3 g     O .bss	00000001 PRE_g27
008029a0 g     F .text	00000010 _cleanup
0080c4c4 g     O .bss	00000001 g9
0080c4c5 g     O .bss	00000001 _cg7
0080c4c8 g     O .bss	00000004 _PRE_GO
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
0080c4cc g     O .bss	00000001 _cg15
00800020 g       *ABS*	00000000 __flash_exceptions_start
008016ac g     F .text	00000074 _fstat_r
0080c4f8 g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080c4cd g     O .bss	00000001 _cg12
0080c50c g     O .bss	00000004 alt_argv
00812834 g       *ABS*	00000000 _gp
008081b0 g     F .text	00000030 usleep
008006b0 g     F .text	00000044 reset
0080c4ce g     O .bss	00000001 g1
00800410 g     F .text	000000cc output
00809470 g     O .rwdata	00000180 alt_fd_list
00807b0c g     F .text	00000094 alt_find_dev
008037d0 g     F .text	000000a0 memcpy
00802994 g     F .text	0000000c _cleanup_r
00808138 g     F .text	00000078 alt_io_redirect
00808934 g       *ABS*	00000000 __DTOR_END__
0080c4cf g     O .bss	00000001 g12
0080210c g     F .text	00000014 puts
0080c4ad g     O .bss	00000001 VS
0080c4ae g     O .bss	00000001 AEI_t
00800200 g     F .text	00000040 URI_timer_isr
00805a98 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008088c0 g     F .text	00000008 __udivsi3
008046c4 g     F .text	000000c0 isatty
0080c4d0 g     O .bss	00000001 g17
0080834c g     F .text	00000090 alt_icache_flush
0080c4fc g     O .bss	00000004 __malloc_top_pad
00802fe8 g     F .text	0000049c __sfvwrite_r
00802300 g     F .text	00000070 _sbrk_r
008039e8 g     F .text	00000078 _read_r
008002c0 g     F .text	00000040 PVARP_timer_isr
0080a854 g     O .rwdata	00000004 alt_max_fd
0080c4d1 g     O .bss	00000001 PRE_g8
00804190 g     F .text	00000110 _fclose_r
00802814 g     F .text	00000034 fflush
0080c500 g     O .bss	00000004 __malloc_max_sbrked_mem
0080c4d2 g     O .bss	00000001 g18
008048d0 g     F .text	000000f0 lseek
0080c4a8 g     O .bss	00000004 led_reg
0080a838 g     O .rwdata	00000004 _global_impure_ptr
00803a60 g     F .text	000005f4 _realloc_r
0080c898 g       *ABS*	00000000 __bss_end
00807f7c g     F .text	000000f8 alt_iic_isr_register
008050c4 g     F .text	0000010c alt_tick
00807034 g     F .text	000000c8 altera_avalon_uart_init
0080a870 g     O .rwdata	00000004 __ctype_ptr
0080297c g     F .text	00000018 __fp_lock_all
00807f34 g     F .text	00000048 alt_ic_irq_enabled
0080c4d3 g     O .bss	00000001 _cg21
0080502c g     F .text	00000098 alt_alarm_stop
0080c51c g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00809448 g     O .rwdata	00000028 alt_dev_null
008078ec g     F .text	00000044 alt_dcache_flush_all
0080c4d4 g     O .bss	00000001 g21
0080a874 g       *ABS*	00000000 __ram_rwdata_end
0080c4d5 g     O .bss	00000001 g5
0080a84c g     O .rwdata	00000008 alt_dev_list
008051d0 g     F .text	00000120 write
0080c4d6 g     O .bss	00000001 g2
0080c4d7 g     O .bss	00000001 g7
00808c40 g       *ABS*	00000000 __ram_rodata_end
00804590 g     F .text	000000d4 fstat
008088c8 g     F .text	00000008 __umodsi3
00800240 g     F .text	00000040 AVI_timer_isr
00800300 g     F .text	00000040 VRP_timer_isr
0080c898 g       *ABS*	00000000 end
0080c4d8 g     O .bss	00000001 PRE_g4
008066d0 g     F .text	0000050c altera_avalon_lcd_16207_write
008076c4 g     F .text	000001c8 altera_avalon_uart_write
00801688 g     F .text	00000024 fseek
0080c4d9 g     O .bss	00000001 g23
00805598 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080c4af g     O .bss	00000001 StartAVI
00808930 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00806eac g     F .text	00000090 alt_avalon_timer_sc_init
00806f94 g     F .text	00000058 altera_avalon_uart_write_fd
00806fec g     F .text	00000048 altera_avalon_uart_close_fd
00805cbc g     F .text	00000240 altera_avalon_jtag_uart_write
008028a0 g     F .text	00000004 __sfp_lock_acquire
008036ec g     F .text	000000e4 memchr
0080c4da g     O .bss	00000001 g14
00802cd4 g     F .text	00000314 _free_r
008085d4 g     F .text	000001b0 __call_exitprocs
0080a840 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
0080c514 g     O .bss	00000004 _alt_tick_rate
0080c518 g     O .bss	00000004 _alt_nticks
0080c4db g     O .bss	00000001 PRE_g6
00804d90 g     F .text	00000120 read
00805384 g     F .text	00000094 alt_sys_init
00801ff4 g     F .text	00000078 _open_r
0080849c g     F .text	00000134 __register_exitproc
0080c4b0 g     O .bss	00000004 uart_fp
00805930 g     F .text	00000074 altera_avalon_jtag_uart_close
0080c4dc g     O .bss	00000001 PRE_g22
00808c40 g       *ABS*	00000000 __ram_rwdata_start
00808934 g       *ABS*	00000000 __ram_rodata_start
0080c5e0 g     O .bss	00000028 __malloc_current_mallinfo
0080c4b4 g     O .bss	00000001 PVARP_t
0080c4dd g     O .bss	00000001 _cg5
00805450 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00807cc0 g     F .text	000000b8 alt_get_fd
00808200 g     F .text	0000014c alt_busy_sleep
0080c4de g     O .bss	00000001 g15
008025a8 g     F .text	00000070 _close_r
0080c4df g     O .bss	00000001 _GO
00808428 g     F .text	00000074 memcmp
00805500 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080c4e0 g     O .bss	00000001 PRE_g11
0080c898 g       *ABS*	00000000 __alt_stack_base
00805548 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00800340 g     F .text	00000040 AEI_timer_isr
00804054 g     F .text	0000013c __swsetup_r
008006f4 g     F .text	00000a48 tick
00802a18 g     F .text	000000f0 __sfp
0080c4e1 g     O .bss	00000001 g20
00809040 g     O .rwdata	00000408 __malloc_av_
008028ac g     F .text	00000004 __sinit_lock_release
0080c4b5 g     O .bss	00000001 VRP_t
0080245c g     F .text	00000060 __sread
00807ba0 g     F .text	00000120 alt_find_file
00807930 g     F .text	000000b4 alt_dev_llist_insert
00804a8c g     F .text	00000020 __malloc_lock
00804f70 g     F .text	000000bc sbrk
00802618 g     F .text	000001fc _fflush_r
00801230 g     F .text	0000001c fopen
0080c4a8 g       *ABS*	00000000 __bss_start
00803950 g     F .text	00000098 memset
008004dc g     F .text	000001d4 main
0080c510 g     O .bss	00000004 alt_envp
0080c504 g     O .bss	00000004 __malloc_max_total_mem
008054a8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00806ca8 g     F .text	0000013c altera_avalon_lcd_16207_init
00802370 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008042a0 g     F .text	00000014 fclose
0080c708 g     O .bss	00000190 _atexit0
008018b4 g     F .text	00000740 _malloc_r
0080a858 g     O .rwdata	00000004 alt_errno
0080354c g     F .text	000000b8 _fwalk
00808800 g     F .text	00000060 __divsi3
00802ba8 g     F .text	0000012c _malloc_trim_r
00808934 g       *ABS*	00000000 __CTOR_END__
00808934 g       *ABS*	00000000 __flash_rodata_start
00808934 g       *ABS*	00000000 __DTOR_LIST__
00805350 g     F .text	00000034 alt_irq_init
00804f10 g     F .text	00000060 alt_release_fd
0080c4e2 g     O .bss	00000001 g13
0080c4e3 g     O .bss	00000001 g8
008083dc g     F .text	00000014 atexit
00802530 g     F .text	00000078 _write_r
0080a834 g     O .rwdata	00000004 _impure_ptr
0080c508 g     O .bss	00000004 alt_argc
0080c4e4 g     O .bss	00000001 g6
0080c4e5 g     O .bss	00000001 _cg19
00807aa8 g     F .text	00000064 _do_dtors
0080c4b6 g     O .bss	00000001 AVI_t
0080124c g     F .text	0000043c _fseek_r
00802120 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00802964 g     F .text	00000018 __fp_unlock_all
00806de4 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0080c4e6 g     O .bss	00000001 _cg13
0080c4e7 g     O .bss	00000001 _cg9
0080a844 g     O .rwdata	00000008 alt_fs_list
0080c4e8 g     O .bss	00000001 g0
0080c4b7 g     O .bss	00000001 VP
0080c4e9 g     O .bss	00000001 _cg17
0080c4ea g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080c4eb g     O .bss	00000001 g16
0080c4ec g     O .bss	00000001 _cg24
00807da8 g     F .text	00000050 alt_ic_isr_register
0080c4ed g     O .bss	00000001 g25
0080a874 g       *ABS*	00000000 _edata
00806f3c g     F .text	00000058 altera_avalon_uart_read_fd
0080c898 g       *ABS*	00000000 _end
0080c4ee g     O .bss	00000001 g11
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008059a4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080c4ef g     O .bss	00000001 g22
00800380 g     F .text	00000048 led0_timer_isr
0080c4f0 g     O .bss	00000001 g28
0080c4f1 g     O .bss	00000001 g16b
00807e94 g     F .text	000000a0 alt_ic_irq_disable
008023e0 g     F .text	0000007c __swrite
0080a83c g     O .rwdata	00000004 __malloc_trim_threshold
008081e0 g     F .text	00000020 altera_nios2_qsys_irq_init
008083f0 g     F .text	00000038 exit
00803484 g     F .text	000000c8 _fwalk_reent
0080c4b8 g     O .bss	00000001 AS
00808860 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008028a4 g     F .text	00000004 __sfp_lock_release
0080c4f2 g     O .bss	00000001 _cg23
0080c4f3 g     O .bss	00000001 g29_e2
008089bc g     O .rodata	00000101 _ctype_
008073d4 g     F .text	00000060 altera_avalon_uart_close
0080c4b9 g     O .bss	00000001 StartRI
0080113c g     F .text	000000f4 _fopen_r
00808910 g     F .text	00000020 _exit
008042b4 g     F .text	00000154 alt_alarm_start
00801720 g     F .text	00000194 __smakebuf_r
0080c4ba g     O .bss	00000001 AP
008024bc g     F .text	00000074 strlen
00804ba8 g     F .text	00000188 open
00807d78 g     F .text	00000030 alt_icache_flush_all
0080c4f4 g     O .bss	00000001 g29
0080c4f5 g     O .bss	00000001 g24
008003c8 g     F .text	00000048 led1_timer_isr
0080a86c g     O .rwdata	00000004 alt_priority_mask
0080c4bb g     O .bss	00000001 LRI_t
00807df8 g     F .text	0000009c alt_ic_irq_enable
00807434 g     F .text	00000230 altera_avalon_uart_read
0080c4f6 g     O .bss	00000001 g10
0080a860 g     O .rwdata	00000008 alt_alarm_list
00807a44 g     F .text	00000064 _do_ctors
0080c4f7 g     O .bss	00000001 g26
00804408 g     F .text	000000fc close
008047e4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
008028a8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18f18204 	addi	r3,r3,-14840
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18f18204 	addi	r3,r3,-14840
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d68a0d14 	ori	gp,gp,10292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10b12a14 	ori	r2,r2,50344

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18f22614 	ori	r3,r3,51352

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08047e40 	call	8047e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	0804a200 	call	804a20 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <URI_timer_isr>:
	led_reg |= (1 << NUM); \
	alt_alarm_stop( & led##NUM##_timer); \
	alt_alarm_start( & led##NUM##_timer, LED_PULSE_LEN, LED_TIMER_ISR(NUM), &led_reg ) \

//timer ISR declarations
DECLARE_TIMER_ISR (URI)
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13fff15 	stw	r4,-4(fp)
  800210:	e0bfff17 	ldw	r2,-4(fp)
  800214:	e0bffe15 	stw	r2,-8(fp)
  800218:	e0fffe17 	ldw	r3,-8(fp)
  80021c:	00800044 	movi	r2,1
  800220:	18800015 	stw	r2,0(r3)
  800224:	00800044 	movi	r2,1
  800228:	d0a71e05 	stb	r2,-25480(gp)
  80022c:	0005883a 	mov	r2,zero
  800230:	e037883a 	mov	sp,fp
  800234:	df000017 	ldw	fp,0(sp)
  800238:	dec00104 	addi	sp,sp,4
  80023c:	f800283a 	ret

00800240 <AVI_timer_isr>:
DECLARE_TIMER_ISR (AVI)
  800240:	defffd04 	addi	sp,sp,-12
  800244:	df000215 	stw	fp,8(sp)
  800248:	df000204 	addi	fp,sp,8
  80024c:	e13fff15 	stw	r4,-4(fp)
  800250:	e0bfff17 	ldw	r2,-4(fp)
  800254:	e0bffe15 	stw	r2,-8(fp)
  800258:	e0fffe17 	ldw	r3,-8(fp)
  80025c:	00800044 	movi	r2,1
  800260:	18800015 	stw	r2,0(r3)
  800264:	00800044 	movi	r2,1
  800268:	d0a72085 	stb	r2,-25470(gp)
  80026c:	0005883a 	mov	r2,zero
  800270:	e037883a 	mov	sp,fp
  800274:	df000017 	ldw	fp,0(sp)
  800278:	dec00104 	addi	sp,sp,4
  80027c:	f800283a 	ret

00800280 <LRI_timer_isr>:
DECLARE_TIMER_ISR (LRI)
  800280:	defffd04 	addi	sp,sp,-12
  800284:	df000215 	stw	fp,8(sp)
  800288:	df000204 	addi	fp,sp,8
  80028c:	e13fff15 	stw	r4,-4(fp)
  800290:	e0bfff17 	ldw	r2,-4(fp)
  800294:	e0bffe15 	stw	r2,-8(fp)
  800298:	e0fffe17 	ldw	r3,-8(fp)
  80029c:	00800044 	movi	r2,1
  8002a0:	18800015 	stw	r2,0(r3)
  8002a4:	00800044 	movi	r2,1
  8002a8:	d0a721c5 	stb	r2,-25465(gp)
  8002ac:	0005883a 	mov	r2,zero
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	df000017 	ldw	fp,0(sp)
  8002b8:	dec00104 	addi	sp,sp,4
  8002bc:	f800283a 	ret

008002c0 <PVARP_timer_isr>:
DECLARE_TIMER_ISR (PVARP)
  8002c0:	defffd04 	addi	sp,sp,-12
  8002c4:	df000215 	stw	fp,8(sp)
  8002c8:	df000204 	addi	fp,sp,8
  8002cc:	e13fff15 	stw	r4,-4(fp)
  8002d0:	e0bfff17 	ldw	r2,-4(fp)
  8002d4:	e0bffe15 	stw	r2,-8(fp)
  8002d8:	e0fffe17 	ldw	r3,-8(fp)
  8002dc:	00800044 	movi	r2,1
  8002e0:	18800015 	stw	r2,0(r3)
  8002e4:	00800044 	movi	r2,1
  8002e8:	d0a72005 	stb	r2,-25472(gp)
  8002ec:	0005883a 	mov	r2,zero
  8002f0:	e037883a 	mov	sp,fp
  8002f4:	df000017 	ldw	fp,0(sp)
  8002f8:	dec00104 	addi	sp,sp,4
  8002fc:	f800283a 	ret

00800300 <VRP_timer_isr>:
DECLARE_TIMER_ISR (VRP)
  800300:	defffd04 	addi	sp,sp,-12
  800304:	df000215 	stw	fp,8(sp)
  800308:	df000204 	addi	fp,sp,8
  80030c:	e13fff15 	stw	r4,-4(fp)
  800310:	e0bfff17 	ldw	r2,-4(fp)
  800314:	e0bffe15 	stw	r2,-8(fp)
  800318:	e0fffe17 	ldw	r3,-8(fp)
  80031c:	00800044 	movi	r2,1
  800320:	18800015 	stw	r2,0(r3)
  800324:	00800044 	movi	r2,1
  800328:	d0a72045 	stb	r2,-25471(gp)
  80032c:	0005883a 	mov	r2,zero
  800330:	e037883a 	mov	sp,fp
  800334:	df000017 	ldw	fp,0(sp)
  800338:	dec00104 	addi	sp,sp,4
  80033c:	f800283a 	ret

00800340 <AEI_timer_isr>:
DECLARE_TIMER_ISR (AEI)
  800340:	defffd04 	addi	sp,sp,-12
  800344:	df000215 	stw	fp,8(sp)
  800348:	df000204 	addi	fp,sp,8
  80034c:	e13fff15 	stw	r4,-4(fp)
  800350:	e0bfff17 	ldw	r2,-4(fp)
  800354:	e0bffe15 	stw	r2,-8(fp)
  800358:	e0fffe17 	ldw	r3,-8(fp)
  80035c:	00800044 	movi	r2,1
  800360:	18800015 	stw	r2,0(r3)
  800364:	00800044 	movi	r2,1
  800368:	d0a71e85 	stb	r2,-25478(gp)
  80036c:	0005883a 	mov	r2,zero
  800370:	e037883a 	mov	sp,fp
  800374:	df000017 	ldw	fp,0(sp)
  800378:	dec00104 	addi	sp,sp,4
  80037c:	f800283a 	ret

00800380 <led0_timer_isr>:

DECLARE_LED_TIMER_ISR(0)
  800380:	defffd04 	addi	sp,sp,-12
  800384:	dfc00215 	stw	ra,8(sp)
  800388:	df000115 	stw	fp,4(sp)
  80038c:	df000104 	addi	fp,sp,4
  800390:	e13fff15 	stw	r4,-4(fp)
  800394:	d0e71d17 	ldw	r3,-25484(gp)
  800398:	00bfff84 	movi	r2,-2
  80039c:	1884703a 	and	r2,r3,r2
  8003a0:	d0a71d15 	stw	r2,-25484(gp)
  8003a4:	01002074 	movhi	r4,129
  8003a8:	21224d04 	addi	r4,r4,-30412
  8003ac:	080210c0 	call	80210c <puts>
  8003b0:	0005883a 	mov	r2,zero
  8003b4:	e037883a 	mov	sp,fp
  8003b8:	dfc00117 	ldw	ra,4(sp)
  8003bc:	df000017 	ldw	fp,0(sp)
  8003c0:	dec00204 	addi	sp,sp,8
  8003c4:	f800283a 	ret

008003c8 <led1_timer_isr>:
DECLARE_LED_TIMER_ISR(1)
  8003c8:	defffd04 	addi	sp,sp,-12
  8003cc:	dfc00215 	stw	ra,8(sp)
  8003d0:	df000115 	stw	fp,4(sp)
  8003d4:	df000104 	addi	fp,sp,4
  8003d8:	e13fff15 	stw	r4,-4(fp)
  8003dc:	d0e71d17 	ldw	r3,-25484(gp)
  8003e0:	00bfff44 	movi	r2,-3
  8003e4:	1884703a 	and	r2,r3,r2
  8003e8:	d0a71d15 	stw	r2,-25484(gp)
  8003ec:	01002074 	movhi	r4,129
  8003f0:	21224d04 	addi	r4,r4,-30412
  8003f4:	080210c0 	call	80210c <puts>
  8003f8:	0005883a 	mov	r2,zero
  8003fc:	e037883a 	mov	sp,fp
  800400:	dfc00117 	ldw	ra,4(sp)
  800404:	df000017 	ldw	fp,0(sp)
  800408:	dec00204 	addi	sp,sp,8
  80040c:	f800283a 	ret

00800410 <output>:

// UART
FILE* uart_fp;

void output() {
  800410:	defffe04 	addi	sp,sp,-8
  800414:	dfc00115 	stw	ra,4(sp)
  800418:	df000015 	stw	fp,0(sp)
  80041c:	d839883a 	mov	fp,sp
	//LEDG1 simulates an atrial event
//	int led_reg = 0;
//	if (AP) led_reg |= 0x1;
//	if (VP) led_reg |= 0x2;

	if (AP) PULSE_LED(0);
  800420:	d0a72183 	ldbu	r2,-25466(gp)
  800424:	10803fcc 	andi	r2,r2,255
  800428:	1080201c 	xori	r2,r2,128
  80042c:	10bfe004 	addi	r2,r2,-128
  800430:	1005003a 	cmpeq	r2,r2,zero
  800434:	1000031e 	bne	r2,zero,800444 <output+0x34>
  800438:	d0a71d17 	ldw	r2,-25484(gp)
  80043c:	10800054 	ori	r2,r2,1
  800440:	d0a71d15 	stw	r2,-25484(gp)
  800444:	01002074 	movhi	r4,129
  800448:	21316c04 	addi	r4,r4,-14928
  80044c:	080502c0 	call	80502c <alt_alarm_stop>
  800450:	01002074 	movhi	r4,129
  800454:	21316c04 	addi	r4,r4,-14928
  800458:	01401904 	movi	r5,100
  80045c:	01802034 	movhi	r6,128
  800460:	3180e004 	addi	r6,r6,896
  800464:	d1e71d04 	addi	r7,gp,-25484
  800468:	08042b40 	call	8042b4 <alt_alarm_start>
	if (VP) PULSE_LED(1);
  80046c:	d0a720c3 	ldbu	r2,-25469(gp)
  800470:	10803fcc 	andi	r2,r2,255
  800474:	1080201c 	xori	r2,r2,128
  800478:	10bfe004 	addi	r2,r2,-128
  80047c:	1005003a 	cmpeq	r2,r2,zero
  800480:	1000031e 	bne	r2,zero,800490 <output+0x80>
  800484:	d0a71d17 	ldw	r2,-25484(gp)
  800488:	10800094 	ori	r2,r2,2
  80048c:	d0a71d15 	stw	r2,-25484(gp)
  800490:	01002074 	movhi	r4,129
  800494:	21317204 	addi	r4,r4,-14904
  800498:	080502c0 	call	80502c <alt_alarm_stop>
  80049c:	01002074 	movhi	r4,129
  8004a0:	21317204 	addi	r4,r4,-14904
  8004a4:	01401904 	movi	r5,100
  8004a8:	01802034 	movhi	r6,128
  8004ac:	3180f204 	addi	r6,r6,968
  8004b0:	d1e71d04 	addi	r7,gp,-25484
  8004b4:	08042b40 	call	8042b4 <alt_alarm_start>
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,led_reg);
  8004b8:	d0e71d17 	ldw	r3,-25484(gp)
  8004bc:	00804074 	movhi	r2,257
  8004c0:	10841804 	addi	r2,r2,4192
  8004c4:	10c00035 	stwio	r3,0(r2)
}
  8004c8:	e037883a 	mov	sp,fp
  8004cc:	dfc00117 	ldw	ra,4(sp)
  8004d0:	df000017 	ldw	fp,0(sp)
  8004d4:	dec00204 	addi	sp,sp,8
  8004d8:	f800283a 	ret

008004dc <main>:

int main()
{
  8004dc:	defffc04 	addi	sp,sp,-16
  8004e0:	dfc00315 	stw	ra,12(sp)
  8004e4:	df000215 	stw	fp,8(sp)
  8004e8:	df000204 	addi	fp,sp,8
	reset();
  8004ec:	08006b00 	call	8006b0 <reset>

	printf("Initializing pacemaker...\n");
  8004f0:	01002074 	movhi	r4,129
  8004f4:	21225104 	addi	r4,r4,-30396
  8004f8:	080210c0 	call	80210c <puts>

	//setup UART file pointer
	uart_fp = fopen(UART_NAME, "r+");
  8004fc:	01002074 	movhi	r4,129
  800500:	21225804 	addi	r4,r4,-30368
  800504:	01402074 	movhi	r5,129
  800508:	29625b04 	addi	r5,r5,-30356
  80050c:	08012300 	call	801230 <fopen>
  800510:	d0a71f15 	stw	r2,-25476(gp)

	//initialise the button registers
	IOWR_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE, 0);
  800514:	00804074 	movhi	r2,257
  800518:	10842804 	addi	r2,r2,4256
  80051c:	10000035 	stwio	zero,0(r2)
	int buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800520:	00804074 	movhi	r2,257
  800524:	10842804 	addi	r2,r2,4256
  800528:	10800037 	ldwio	r2,0(r2)
  80052c:	e0bfff15 	stw	r2,-4(fp)

	while (1) {

			//Reset and start URI and LRI timers if necessary
			//Also start PVARP, VRP, and AEI, although they should have stopped long before
			if (FSMVAR(StartRI)) {
  800530:	d0a72143 	ldbu	r2,-25467(gp)
  800534:	10803fcc 	andi	r2,r2,255
  800538:	1080201c 	xori	r2,r2,128
  80053c:	10bfe004 	addi	r2,r2,-128
  800540:	1005003a 	cmpeq	r2,r2,zero
  800544:	1000371e 	bne	r2,zero,800624 <main+0x148>
				//printf("Starting AEI\n");
				RESTART_TIMER(URI);
  800548:	d0271e05 	stb	zero,-25480(gp)
  80054c:	01002074 	movhi	r4,129
  800550:	21316604 	addi	r4,r4,-14952
  800554:	080502c0 	call	80502c <alt_alarm_stop>
  800558:	01002074 	movhi	r4,129
  80055c:	21316604 	addi	r4,r4,-14952
  800560:	0140e104 	movi	r5,900
  800564:	01802034 	movhi	r6,128
  800568:	31808004 	addi	r6,r6,512
  80056c:	d1e71e04 	addi	r7,gp,-25480
  800570:	08042b40 	call	8042b4 <alt_alarm_start>
				RESTART_TIMER(LRI);
  800574:	d02721c5 	stb	zero,-25465(gp)
  800578:	01002074 	movhi	r4,129
  80057c:	21314804 	addi	r4,r4,-15072
  800580:	080502c0 	call	80502c <alt_alarm_stop>
  800584:	01002074 	movhi	r4,129
  800588:	21314804 	addi	r4,r4,-15072
  80058c:	0140ed84 	movi	r5,950
  800590:	01802034 	movhi	r6,128
  800594:	3180a004 	addi	r6,r6,640
  800598:	d1e721c4 	addi	r7,gp,-25465
  80059c:	08042b40 	call	8042b4 <alt_alarm_start>
				RESTART_TIMER(PVARP);
  8005a0:	d0272005 	stb	zero,-25472(gp)
  8005a4:	01002074 	movhi	r4,129
  8005a8:	21314e04 	addi	r4,r4,-15048
  8005ac:	080502c0 	call	80502c <alt_alarm_stop>
  8005b0:	01002074 	movhi	r4,129
  8005b4:	21314e04 	addi	r4,r4,-15048
  8005b8:	01400c84 	movi	r5,50
  8005bc:	01802034 	movhi	r6,128
  8005c0:	3180b004 	addi	r6,r6,704
  8005c4:	d1e72004 	addi	r7,gp,-25472
  8005c8:	08042b40 	call	8042b4 <alt_alarm_start>
				RESTART_TIMER(VRP);
  8005cc:	d0272045 	stb	zero,-25471(gp)
  8005d0:	01002074 	movhi	r4,129
  8005d4:	21315404 	addi	r4,r4,-15024
  8005d8:	080502c0 	call	80502c <alt_alarm_stop>
  8005dc:	01002074 	movhi	r4,129
  8005e0:	21315404 	addi	r4,r4,-15024
  8005e4:	01402584 	movi	r5,150
  8005e8:	01802034 	movhi	r6,128
  8005ec:	3180c004 	addi	r6,r6,768
  8005f0:	d1e72044 	addi	r7,gp,-25471
  8005f4:	08042b40 	call	8042b4 <alt_alarm_start>
				RESTART_TIMER(AEI);
  8005f8:	d0271e85 	stb	zero,-25478(gp)
  8005fc:	01002074 	movhi	r4,129
  800600:	21315a04 	addi	r4,r4,-15000
  800604:	080502c0 	call	80502c <alt_alarm_stop>
  800608:	01002074 	movhi	r4,129
  80060c:	21315a04 	addi	r4,r4,-15000
  800610:	0140c804 	movi	r5,800
  800614:	01802034 	movhi	r6,128
  800618:	3180d004 	addi	r6,r6,832
  80061c:	d1e71e84 	addi	r7,gp,-25478
  800620:	08042b40 	call	8042b4 <alt_alarm_start>
			}

			if (FSMVAR(StartAVI)) {
  800624:	d0a71ec3 	ldbu	r2,-25477(gp)
  800628:	10803fcc 	andi	r2,r2,255
  80062c:	1080201c 	xori	r2,r2,128
  800630:	10bfe004 	addi	r2,r2,-128
  800634:	1005003a 	cmpeq	r2,r2,zero
  800638:	10000b1e 	bne	r2,zero,800668 <main+0x18c>
				//printf("Starting AVI\n");
				RESTART_TIMER(AVI);
  80063c:	d0272085 	stb	zero,-25470(gp)
  800640:	01002074 	movhi	r4,129
  800644:	21316004 	addi	r4,r4,-14976
  800648:	080502c0 	call	80502c <alt_alarm_stop>
  80064c:	01002074 	movhi	r4,129
  800650:	21316004 	addi	r4,r4,-14976
  800654:	01404b04 	movi	r5,300
  800658:	01802034 	movhi	r6,128
  80065c:	31809004 	addi	r6,r6,576
  800660:	d1e72084 	addi	r7,gp,-25470
  800664:	08042b40 	call	8042b4 <alt_alarm_start>
			}

			//Button handling. An atrial sense is mapped to KEY0 and a ventricular sense is mapped
			//to KEY1
			newbuttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800668:	00804074 	movhi	r2,257
  80066c:	10842804 	addi	r2,r2,4256
  800670:	10800037 	ldwio	r2,0(r2)
  800674:	e0bffe15 	stw	r2,-8(fp)
			if (newbuttons != buttons) {
  800678:	e0fffe17 	ldw	r3,-8(fp)
  80067c:	e0bfff17 	ldw	r2,-4(fp)
  800680:	18800826 	beq	r3,r2,8006a4 <main+0x1c8>
				buttons = newbuttons;
  800684:	e0bffe17 	ldw	r2,-8(fp)
  800688:	e0bfff15 	stw	r2,-4(fp)

				AS = (buttons & (1 << 0));
  80068c:	e0bfff17 	ldw	r2,-4(fp)
  800690:	1080004c 	andi	r2,r2,1
  800694:	d0a72105 	stb	r2,-25468(gp)
				VS = (buttons & (1 << 1));
  800698:	e0bfff17 	ldw	r2,-4(fp)
  80069c:	1080008c 	andi	r2,r2,2
  8006a0:	d0a71e45 	stb	r2,-25479(gp)
			}

			tick();
  8006a4:	08006f40 	call	8006f4 <tick>

			output();
  8006a8:	08004100 	call	800410 <output>
		}
  8006ac:	003fa006 	br	800530 <main+0x54>

008006b0 <reset>:
char _cg13;
char _cg15;
char g25_e1;
char g29_e2;
int _PRE_GO;
void reset(){
  8006b0:	deffff04 	addi	sp,sp,-4
  8006b4:	df000015 	stw	fp,0(sp)
  8006b8:	d839883a 	mov	fp,sp
   _GO = 1;
  8006bc:	00800044 	movi	r2,1
  8006c0:	d0a72ac5 	stb	r2,-25429(gp)
   _PRE_GO = 0;
  8006c4:	d0272515 	stw	zero,-25452(gp)
   PRE_g2 = 0;
  8006c8:	d0272205 	stb	zero,-25464(gp)
   PRE_g4 = 0;
  8006cc:	d0272905 	stb	zero,-25436(gp)
   PRE_g6 = 0;
  8006d0:	d02729c5 	stb	zero,-25433(gp)
   PRE_g8 = 0;
  8006d4:	d0272745 	stb	zero,-25443(gp)
   PRE_g11 = 0;
  8006d8:	d0272b05 	stb	zero,-25428(gp)
   PRE_g22 = 0;
  8006dc:	d0272a05 	stb	zero,-25432(gp)
   PRE_g27 = 0;
  8006e0:	d02723c5 	stb	zero,-25457(gp)
   return;
}
  8006e4:	e037883a 	mov	sp,fp
  8006e8:	df000017 	ldw	fp,0(sp)
  8006ec:	dec00104 	addi	sp,sp,4
  8006f0:	f800283a 	ret

008006f4 <tick>:
void tick(){
  8006f4:	deffeb04 	addi	sp,sp,-84
  8006f8:	df001415 	stw	fp,80(sp)
  8006fc:	df001404 	addi	fp,sp,80
   if(_PRE_GO == 1){
  800700:	d0a72517 	ldw	r2,-25452(gp)
  800704:	10800058 	cmpnei	r2,r2,1
  800708:	1000011e 	bne	r2,zero,800710 <tick+0x1c>
      _GO = 0;
  80070c:	d0272ac5 	stb	zero,-25429(gp)
   }
   {
      g0 = _GO;
  800710:	d0a72ac3 	ldbu	r2,-25429(gp)
  800714:	d0a72d05 	stb	r2,-25420(gp)
      g1 = g0;
  800718:	d0a72d03 	ldbu	r2,-25420(gp)
  80071c:	d0a72685 	stb	r2,-25446(gp)
      g28 =(PRE_g27);
  800720:	d0a723c3 	ldbu	r2,-25457(gp)
  800724:	d0a72f05 	stb	r2,-25412(gp)
      g26 = g0;
  800728:	d0a72d03 	ldbu	r2,-25420(gp)
  80072c:	d0a730c5 	stb	r2,-25405(gp)
      g27 =(g28||g26);
  800730:	d0a72f03 	ldbu	r2,-25412(gp)
  800734:	10803fcc 	andi	r2,r2,255
  800738:	1080201c 	xori	r2,r2,128
  80073c:	10bfe004 	addi	r2,r2,-128
  800740:	1004c03a 	cmpne	r2,r2,zero
  800744:	1000061e 	bne	r2,zero,800760 <tick+0x6c>
  800748:	d0a730c3 	ldbu	r2,-25405(gp)
  80074c:	10803fcc 	andi	r2,r2,255
  800750:	1080201c 	xori	r2,r2,128
  800754:	10bfe004 	addi	r2,r2,-128
  800758:	1005003a 	cmpeq	r2,r2,zero
  80075c:	1000031e 	bne	r2,zero,80076c <tick+0x78>
  800760:	00800044 	movi	r2,1
  800764:	e0bfff15 	stw	r2,-4(fp)
  800768:	00000106 	br	800770 <tick+0x7c>
  80076c:	e03fff15 	stw	zero,-4(fp)
  800770:	e0ffff17 	ldw	r3,-4(fp)
  800774:	1805883a 	mov	r2,r3
  800778:	d0a72345 	stb	r2,-25459(gp)
      if(g27){
  80077c:	d0a72343 	ldbu	r2,-25459(gp)
  800780:	10803fcc 	andi	r2,r2,255
  800784:	1080201c 	xori	r2,r2,128
  800788:	10bfe004 	addi	r2,r2,-128
  80078c:	1005003a 	cmpeq	r2,r2,zero
  800790:	1000041e 	bne	r2,zero,8007a4 <tick+0xb0>
         VP = 0;
  800794:	d02720c5 	stb	zero,-25469(gp)
         AP = 0;
  800798:	d0272185 	stb	zero,-25466(gp)
         StartRI = 0;
  80079c:	d0272145 	stb	zero,-25467(gp)
         StartAVI = 0;
  8007a0:	d0271ec5 	stb	zero,-25477(gp)
      }
      g9 =(PRE_g8);
  8007a4:	d0a72743 	ldbu	r2,-25443(gp)
  8007a8:	d0a72405 	stb	r2,-25456(gp)
      _cg9 = AS;
  8007ac:	d0a72103 	ldbu	r2,-25468(gp)
  8007b0:	d0a72cc5 	stb	r2,-25421(gp)
      g15 =(g9&&(!(_cg9)));
  8007b4:	d0a72403 	ldbu	r2,-25456(gp)
  8007b8:	10803fcc 	andi	r2,r2,255
  8007bc:	1080201c 	xori	r2,r2,128
  8007c0:	10bfe004 	addi	r2,r2,-128
  8007c4:	1005003a 	cmpeq	r2,r2,zero
  8007c8:	1000091e 	bne	r2,zero,8007f0 <tick+0xfc>
  8007cc:	d0a72cc3 	ldbu	r2,-25421(gp)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	1080201c 	xori	r2,r2,128
  8007d8:	10bfe004 	addi	r2,r2,-128
  8007dc:	1004c03a 	cmpne	r2,r2,zero
  8007e0:	1000031e 	bne	r2,zero,8007f0 <tick+0xfc>
  8007e4:	00800044 	movi	r2,1
  8007e8:	e0bffe15 	stw	r2,-8(fp)
  8007ec:	00000106 	br	8007f4 <tick+0x100>
  8007f0:	e03ffe15 	stw	zero,-8(fp)
  8007f4:	e0fffe17 	ldw	r3,-8(fp)
  8007f8:	1805883a 	mov	r2,r3
  8007fc:	d0a72a85 	stb	r2,-25430(gp)
      _cg15 = AEI_t;
  800800:	d0a71e83 	ldbu	r2,-25478(gp)
  800804:	d0a72605 	stb	r2,-25448(gp)
      g17 =(g15&&(!(_cg15)));
  800808:	d0a72a83 	ldbu	r2,-25430(gp)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	1005003a 	cmpeq	r2,r2,zero
  80081c:	1000091e 	bne	r2,zero,800844 <tick+0x150>
  800820:	d0a72603 	ldbu	r2,-25448(gp)
  800824:	10803fcc 	andi	r2,r2,255
  800828:	1080201c 	xori	r2,r2,128
  80082c:	10bfe004 	addi	r2,r2,-128
  800830:	1004c03a 	cmpne	r2,r2,zero
  800834:	1000031e 	bne	r2,zero,800844 <tick+0x150>
  800838:	00800044 	movi	r2,1
  80083c:	e0bffd15 	stw	r2,-12(fp)
  800840:	00000106 	br	800848 <tick+0x154>
  800844:	e03ffd15 	stw	zero,-12(fp)
  800848:	e0fffd17 	ldw	r3,-12(fp)
  80084c:	1805883a 	mov	r2,r3
  800850:	d0a72705 	stb	r2,-25444(gp)
      _cg17 = LRI_t;
  800854:	d0a721c3 	ldbu	r2,-25465(gp)
  800858:	d0a72d45 	stb	r2,-25419(gp)
      g18 =(g17&&_cg17);
  80085c:	d0a72703 	ldbu	r2,-25444(gp)
  800860:	10803fcc 	andi	r2,r2,255
  800864:	1080201c 	xori	r2,r2,128
  800868:	10bfe004 	addi	r2,r2,-128
  80086c:	1005003a 	cmpeq	r2,r2,zero
  800870:	1000091e 	bne	r2,zero,800898 <tick+0x1a4>
  800874:	d0a72d43 	ldbu	r2,-25419(gp)
  800878:	10803fcc 	andi	r2,r2,255
  80087c:	1080201c 	xori	r2,r2,128
  800880:	10bfe004 	addi	r2,r2,-128
  800884:	1005003a 	cmpeq	r2,r2,zero
  800888:	1000031e 	bne	r2,zero,800898 <tick+0x1a4>
  80088c:	00800044 	movi	r2,1
  800890:	e0bffc15 	stw	r2,-16(fp)
  800894:	00000106 	br	80089c <tick+0x1a8>
  800898:	e03ffc15 	stw	zero,-16(fp)
  80089c:	e0fffc17 	ldw	r3,-16(fp)
  8008a0:	1805883a 	mov	r2,r3
  8008a4:	d0a72785 	stb	r2,-25442(gp)
      if(g18){
  8008a8:	d0a72783 	ldbu	r2,-25442(gp)
  8008ac:	10803fcc 	andi	r2,r2,255
  8008b0:	1080201c 	xori	r2,r2,128
  8008b4:	10bfe004 	addi	r2,r2,-128
  8008b8:	1005003a 	cmpeq	r2,r2,zero
  8008bc:	1000021e 	bne	r2,zero,8008c8 <tick+0x1d4>
         VP =(VP||1);
  8008c0:	00800044 	movi	r2,1
  8008c4:	d0a720c5 	stb	r2,-25469(gp)
      }
      g12 =(PRE_g11);
  8008c8:	d0a72b03 	ldbu	r2,-25428(gp)
  8008cc:	d0a726c5 	stb	r2,-25445(gp)
      _cg12 = VS;
  8008d0:	d0a71e43 	ldbu	r2,-25479(gp)
  8008d4:	d0a72645 	stb	r2,-25447(gp)
      g23 =(PRE_g22);
  8008d8:	d0a72a03 	ldbu	r2,-25432(gp)
  8008dc:	d0a72945 	stb	r2,-25435(gp)
      _cg23 = PVARP_t;
  8008e0:	d0a72003 	ldbu	r2,-25472(gp)
  8008e4:	d0a72f85 	stb	r2,-25410(gp)
      g24 =(g23&&(!(_cg23)));
  8008e8:	d0a72943 	ldbu	r2,-25435(gp)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1080201c 	xori	r2,r2,128
  8008f4:	10bfe004 	addi	r2,r2,-128
  8008f8:	1005003a 	cmpeq	r2,r2,zero
  8008fc:	1000091e 	bne	r2,zero,800924 <tick+0x230>
  800900:	d0a72f83 	ldbu	r2,-25410(gp)
  800904:	10803fcc 	andi	r2,r2,255
  800908:	1080201c 	xori	r2,r2,128
  80090c:	10bfe004 	addi	r2,r2,-128
  800910:	1004c03a 	cmpne	r2,r2,zero
  800914:	1000031e 	bne	r2,zero,800924 <tick+0x230>
  800918:	00800044 	movi	r2,1
  80091c:	e0bffb15 	stw	r2,-20(fp)
  800920:	00000106 	br	800928 <tick+0x234>
  800924:	e03ffb15 	stw	zero,-20(fp)
  800928:	e0fffb17 	ldw	r3,-20(fp)
  80092c:	1805883a 	mov	r2,r3
  800930:	d0a73045 	stb	r2,-25407(gp)
      _cg24 = VS;
  800934:	d0a71e43 	ldbu	r2,-25479(gp)
  800938:	d0a72e05 	stb	r2,-25416(gp)
      g13 =(g12&&(!(_cg12)));
  80093c:	d0a726c3 	ldbu	r2,-25445(gp)
  800940:	10803fcc 	andi	r2,r2,255
  800944:	1080201c 	xori	r2,r2,128
  800948:	10bfe004 	addi	r2,r2,-128
  80094c:	1005003a 	cmpeq	r2,r2,zero
  800950:	1000091e 	bne	r2,zero,800978 <tick+0x284>
  800954:	d0a72643 	ldbu	r2,-25447(gp)
  800958:	10803fcc 	andi	r2,r2,255
  80095c:	1080201c 	xori	r2,r2,128
  800960:	10bfe004 	addi	r2,r2,-128
  800964:	1004c03a 	cmpne	r2,r2,zero
  800968:	1000031e 	bne	r2,zero,800978 <tick+0x284>
  80096c:	00800044 	movi	r2,1
  800970:	e0bffa15 	stw	r2,-24(fp)
  800974:	00000106 	br	80097c <tick+0x288>
  800978:	e03ffa15 	stw	zero,-24(fp)
  80097c:	e0fffa17 	ldw	r3,-24(fp)
  800980:	1805883a 	mov	r2,r3
  800984:	d0a72b85 	stb	r2,-25426(gp)
      _cg13 =((AVI_t&&URI_t)||LRI_t);
  800988:	d0a72083 	ldbu	r2,-25470(gp)
  80098c:	10803fcc 	andi	r2,r2,255
  800990:	1080201c 	xori	r2,r2,128
  800994:	10bfe004 	addi	r2,r2,-128
  800998:	1005003a 	cmpeq	r2,r2,zero
  80099c:	1000061e 	bne	r2,zero,8009b8 <tick+0x2c4>
  8009a0:	d0a71e03 	ldbu	r2,-25480(gp)
  8009a4:	10803fcc 	andi	r2,r2,255
  8009a8:	1080201c 	xori	r2,r2,128
  8009ac:	10bfe004 	addi	r2,r2,-128
  8009b0:	1004c03a 	cmpne	r2,r2,zero
  8009b4:	1000061e 	bne	r2,zero,8009d0 <tick+0x2dc>
  8009b8:	d0a721c3 	ldbu	r2,-25465(gp)
  8009bc:	10803fcc 	andi	r2,r2,255
  8009c0:	1080201c 	xori	r2,r2,128
  8009c4:	10bfe004 	addi	r2,r2,-128
  8009c8:	1005003a 	cmpeq	r2,r2,zero
  8009cc:	1000031e 	bne	r2,zero,8009dc <tick+0x2e8>
  8009d0:	00800044 	movi	r2,1
  8009d4:	e0bff915 	stw	r2,-28(fp)
  8009d8:	00000106 	br	8009e0 <tick+0x2ec>
  8009dc:	e03ff915 	stw	zero,-28(fp)
  8009e0:	e0fff917 	ldw	r3,-28(fp)
  8009e4:	1805883a 	mov	r2,r3
  8009e8:	d0a72c85 	stb	r2,-25422(gp)
      g14 =(g13&&_cg13);
  8009ec:	d0a72b83 	ldbu	r2,-25426(gp)
  8009f0:	10803fcc 	andi	r2,r2,255
  8009f4:	1080201c 	xori	r2,r2,128
  8009f8:	10bfe004 	addi	r2,r2,-128
  8009fc:	1005003a 	cmpeq	r2,r2,zero
  800a00:	1000091e 	bne	r2,zero,800a28 <tick+0x334>
  800a04:	d0a72c83 	ldbu	r2,-25422(gp)
  800a08:	10803fcc 	andi	r2,r2,255
  800a0c:	1080201c 	xori	r2,r2,128
  800a10:	10bfe004 	addi	r2,r2,-128
  800a14:	1005003a 	cmpeq	r2,r2,zero
  800a18:	1000031e 	bne	r2,zero,800a28 <tick+0x334>
  800a1c:	00800044 	movi	r2,1
  800a20:	e0bff815 	stw	r2,-32(fp)
  800a24:	00000106 	br	800a2c <tick+0x338>
  800a28:	e03ff815 	stw	zero,-32(fp)
  800a2c:	e0fff817 	ldw	r3,-32(fp)
  800a30:	1805883a 	mov	r2,r3
  800a34:	d0a72985 	stb	r2,-25434(gp)
      if(g14){
  800a38:	d0a72983 	ldbu	r2,-25434(gp)
  800a3c:	10803fcc 	andi	r2,r2,255
  800a40:	1080201c 	xori	r2,r2,128
  800a44:	10bfe004 	addi	r2,r2,-128
  800a48:	1005003a 	cmpeq	r2,r2,zero
  800a4c:	1000021e 	bne	r2,zero,800a58 <tick+0x364>
         VP =(VP||1);
  800a50:	00800044 	movi	r2,1
  800a54:	d0a720c5 	stb	r2,-25469(gp)
      }
      g2 =(g18||(g12&&_cg12)||g1||(g24&&_cg24)||g14);
  800a58:	d0a72783 	ldbu	r2,-25442(gp)
  800a5c:	10803fcc 	andi	r2,r2,255
  800a60:	1080201c 	xori	r2,r2,128
  800a64:	10bfe004 	addi	r2,r2,-128
  800a68:	1004c03a 	cmpne	r2,r2,zero
  800a6c:	1000241e 	bne	r2,zero,800b00 <tick+0x40c>
  800a70:	d0a726c3 	ldbu	r2,-25445(gp)
  800a74:	10803fcc 	andi	r2,r2,255
  800a78:	1080201c 	xori	r2,r2,128
  800a7c:	10bfe004 	addi	r2,r2,-128
  800a80:	1005003a 	cmpeq	r2,r2,zero
  800a84:	1000061e 	bne	r2,zero,800aa0 <tick+0x3ac>
  800a88:	d0a72643 	ldbu	r2,-25447(gp)
  800a8c:	10803fcc 	andi	r2,r2,255
  800a90:	1080201c 	xori	r2,r2,128
  800a94:	10bfe004 	addi	r2,r2,-128
  800a98:	1004c03a 	cmpne	r2,r2,zero
  800a9c:	1000181e 	bne	r2,zero,800b00 <tick+0x40c>
  800aa0:	d0a72683 	ldbu	r2,-25446(gp)
  800aa4:	10803fcc 	andi	r2,r2,255
  800aa8:	1080201c 	xori	r2,r2,128
  800aac:	10bfe004 	addi	r2,r2,-128
  800ab0:	1004c03a 	cmpne	r2,r2,zero
  800ab4:	1000121e 	bne	r2,zero,800b00 <tick+0x40c>
  800ab8:	d0a73043 	ldbu	r2,-25407(gp)
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1080201c 	xori	r2,r2,128
  800ac4:	10bfe004 	addi	r2,r2,-128
  800ac8:	1005003a 	cmpeq	r2,r2,zero
  800acc:	1000061e 	bne	r2,zero,800ae8 <tick+0x3f4>
  800ad0:	d0a72e03 	ldbu	r2,-25416(gp)
  800ad4:	10803fcc 	andi	r2,r2,255
  800ad8:	1080201c 	xori	r2,r2,128
  800adc:	10bfe004 	addi	r2,r2,-128
  800ae0:	1004c03a 	cmpne	r2,r2,zero
  800ae4:	1000061e 	bne	r2,zero,800b00 <tick+0x40c>
  800ae8:	d0a72983 	ldbu	r2,-25434(gp)
  800aec:	10803fcc 	andi	r2,r2,255
  800af0:	1080201c 	xori	r2,r2,128
  800af4:	10bfe004 	addi	r2,r2,-128
  800af8:	1005003a 	cmpeq	r2,r2,zero
  800afc:	1000031e 	bne	r2,zero,800b0c <tick+0x418>
  800b00:	00800044 	movi	r2,1
  800b04:	e0bff715 	stw	r2,-36(fp)
  800b08:	00000106 	br	800b10 <tick+0x41c>
  800b0c:	e03ff715 	stw	zero,-36(fp)
  800b10:	e0fff717 	ldw	r3,-36(fp)
  800b14:	1805883a 	mov	r2,r3
  800b18:	d0a72885 	stb	r2,-25438(gp)
      g3 =(PRE_g2);
  800b1c:	d0a72203 	ldbu	r2,-25464(gp)
  800b20:	d0a72385 	stb	r2,-25458(gp)
      g3b = g3;
  800b24:	d0a72383 	ldbu	r2,-25458(gp)
  800b28:	d0a72245 	stb	r2,-25463(gp)
      if(g3b){
  800b2c:	d0a72243 	ldbu	r2,-25463(gp)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	1005003a 	cmpeq	r2,r2,zero
  800b40:	1000021e 	bne	r2,zero,800b4c <tick+0x458>
         StartRI =(StartRI||1);
  800b44:	00800044 	movi	r2,1
  800b48:	d0a72145 	stb	r2,-25467(gp)
      }
      g5 =(PRE_g4);
  800b4c:	d0a72903 	ldbu	r2,-25436(gp)
  800b50:	d0a72845 	stb	r2,-25439(gp)
      _cg5 = PVARP_t;
  800b54:	d0a72003 	ldbu	r2,-25472(gp)
  800b58:	d0a72a45 	stb	r2,-25431(gp)
      g21 =(g5&&(!(_cg5)));
  800b5c:	d0a72843 	ldbu	r2,-25439(gp)
  800b60:	10803fcc 	andi	r2,r2,255
  800b64:	1080201c 	xori	r2,r2,128
  800b68:	10bfe004 	addi	r2,r2,-128
  800b6c:	1005003a 	cmpeq	r2,r2,zero
  800b70:	1000091e 	bne	r2,zero,800b98 <tick+0x4a4>
  800b74:	d0a72a43 	ldbu	r2,-25431(gp)
  800b78:	10803fcc 	andi	r2,r2,255
  800b7c:	1080201c 	xori	r2,r2,128
  800b80:	10bfe004 	addi	r2,r2,-128
  800b84:	1004c03a 	cmpne	r2,r2,zero
  800b88:	1000031e 	bne	r2,zero,800b98 <tick+0x4a4>
  800b8c:	00800044 	movi	r2,1
  800b90:	e0bff615 	stw	r2,-40(fp)
  800b94:	00000106 	br	800b9c <tick+0x4a8>
  800b98:	e03ff615 	stw	zero,-40(fp)
  800b9c:	e0fff617 	ldw	r3,-40(fp)
  800ba0:	1805883a 	mov	r2,r3
  800ba4:	d0a72805 	stb	r2,-25440(gp)
      _cg21 = VRP_t;
  800ba8:	d0a72043 	ldbu	r2,-25471(gp)
  800bac:	d0a727c5 	stb	r2,-25441(gp)
      g4 =((g21&&(!(_cg21)))||g3b);
  800bb0:	d0a72803 	ldbu	r2,-25440(gp)
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	1080201c 	xori	r2,r2,128
  800bbc:	10bfe004 	addi	r2,r2,-128
  800bc0:	1005003a 	cmpeq	r2,r2,zero
  800bc4:	1000061e 	bne	r2,zero,800be0 <tick+0x4ec>
  800bc8:	d0a727c3 	ldbu	r2,-25441(gp)
  800bcc:	10803fcc 	andi	r2,r2,255
  800bd0:	1080201c 	xori	r2,r2,128
  800bd4:	10bfe004 	addi	r2,r2,-128
  800bd8:	1005003a 	cmpeq	r2,r2,zero
  800bdc:	1000061e 	bne	r2,zero,800bf8 <tick+0x504>
  800be0:	d0a72243 	ldbu	r2,-25463(gp)
  800be4:	10803fcc 	andi	r2,r2,255
  800be8:	1080201c 	xori	r2,r2,128
  800bec:	10bfe004 	addi	r2,r2,-128
  800bf0:	1005003a 	cmpeq	r2,r2,zero
  800bf4:	1000031e 	bne	r2,zero,800c04 <tick+0x510>
  800bf8:	00800044 	movi	r2,1
  800bfc:	e0bff515 	stw	r2,-44(fp)
  800c00:	00000106 	br	800c08 <tick+0x514>
  800c04:	e03ff515 	stw	zero,-44(fp)
  800c08:	e0fff517 	ldw	r3,-44(fp)
  800c0c:	1805883a 	mov	r2,r3
  800c10:	d0a72285 	stb	r2,-25462(gp)
      g7 =(PRE_g6);
  800c14:	d0a729c3 	ldbu	r2,-25433(gp)
  800c18:	d0a728c5 	stb	r2,-25437(gp)
      _cg7 = VRP_t;
  800c1c:	d0a72043 	ldbu	r2,-25471(gp)
  800c20:	d0a72445 	stb	r2,-25455(gp)
      g19 =(g7&&(!(_cg7)));
  800c24:	d0a728c3 	ldbu	r2,-25437(gp)
  800c28:	10803fcc 	andi	r2,r2,255
  800c2c:	1080201c 	xori	r2,r2,128
  800c30:	10bfe004 	addi	r2,r2,-128
  800c34:	1005003a 	cmpeq	r2,r2,zero
  800c38:	1000091e 	bne	r2,zero,800c60 <tick+0x56c>
  800c3c:	d0a72443 	ldbu	r2,-25455(gp)
  800c40:	10803fcc 	andi	r2,r2,255
  800c44:	1080201c 	xori	r2,r2,128
  800c48:	10bfe004 	addi	r2,r2,-128
  800c4c:	1004c03a 	cmpne	r2,r2,zero
  800c50:	1000031e 	bne	r2,zero,800c60 <tick+0x56c>
  800c54:	00800044 	movi	r2,1
  800c58:	e0bff415 	stw	r2,-48(fp)
  800c5c:	00000106 	br	800c64 <tick+0x570>
  800c60:	e03ff415 	stw	zero,-48(fp)
  800c64:	e0fff417 	ldw	r3,-48(fp)
  800c68:	1805883a 	mov	r2,r3
  800c6c:	d0a722c5 	stb	r2,-25461(gp)
      _cg19 = AS;
  800c70:	d0a72103 	ldbu	r2,-25468(gp)
  800c74:	d0a72c45 	stb	r2,-25423(gp)
      g6 =((g5&&_cg5)||(g19&&(!(_cg19))));
  800c78:	d0a72843 	ldbu	r2,-25439(gp)
  800c7c:	10803fcc 	andi	r2,r2,255
  800c80:	1080201c 	xori	r2,r2,128
  800c84:	10bfe004 	addi	r2,r2,-128
  800c88:	1005003a 	cmpeq	r2,r2,zero
  800c8c:	1000061e 	bne	r2,zero,800ca8 <tick+0x5b4>
  800c90:	d0a72a43 	ldbu	r2,-25431(gp)
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	1080201c 	xori	r2,r2,128
  800c9c:	10bfe004 	addi	r2,r2,-128
  800ca0:	1004c03a 	cmpne	r2,r2,zero
  800ca4:	10000c1e 	bne	r2,zero,800cd8 <tick+0x5e4>
  800ca8:	d0a722c3 	ldbu	r2,-25461(gp)
  800cac:	10803fcc 	andi	r2,r2,255
  800cb0:	1080201c 	xori	r2,r2,128
  800cb4:	10bfe004 	addi	r2,r2,-128
  800cb8:	1005003a 	cmpeq	r2,r2,zero
  800cbc:	1000091e 	bne	r2,zero,800ce4 <tick+0x5f0>
  800cc0:	d0a72c43 	ldbu	r2,-25423(gp)
  800cc4:	10803fcc 	andi	r2,r2,255
  800cc8:	1080201c 	xori	r2,r2,128
  800ccc:	10bfe004 	addi	r2,r2,-128
  800cd0:	1004c03a 	cmpne	r2,r2,zero
  800cd4:	1000031e 	bne	r2,zero,800ce4 <tick+0x5f0>
  800cd8:	00800044 	movi	r2,1
  800cdc:	e0bff315 	stw	r2,-52(fp)
  800ce0:	00000106 	br	800ce8 <tick+0x5f4>
  800ce4:	e03ff315 	stw	zero,-52(fp)
  800ce8:	e0fff317 	ldw	r3,-52(fp)
  800cec:	1805883a 	mov	r2,r3
  800cf0:	d0a72c05 	stb	r2,-25424(gp)
      g8 =((g7&&_cg7)||(g23&&_cg23)||(g17&&(!(_cg17))));
  800cf4:	d0a728c3 	ldbu	r2,-25437(gp)
  800cf8:	10803fcc 	andi	r2,r2,255
  800cfc:	1080201c 	xori	r2,r2,128
  800d00:	10bfe004 	addi	r2,r2,-128
  800d04:	1005003a 	cmpeq	r2,r2,zero
  800d08:	1000061e 	bne	r2,zero,800d24 <tick+0x630>
  800d0c:	d0a72443 	ldbu	r2,-25455(gp)
  800d10:	10803fcc 	andi	r2,r2,255
  800d14:	1080201c 	xori	r2,r2,128
  800d18:	10bfe004 	addi	r2,r2,-128
  800d1c:	1004c03a 	cmpne	r2,r2,zero
  800d20:	1000181e 	bne	r2,zero,800d84 <tick+0x690>
  800d24:	d0a72943 	ldbu	r2,-25435(gp)
  800d28:	10803fcc 	andi	r2,r2,255
  800d2c:	1080201c 	xori	r2,r2,128
  800d30:	10bfe004 	addi	r2,r2,-128
  800d34:	1005003a 	cmpeq	r2,r2,zero
  800d38:	1000061e 	bne	r2,zero,800d54 <tick+0x660>
  800d3c:	d0a72f83 	ldbu	r2,-25410(gp)
  800d40:	10803fcc 	andi	r2,r2,255
  800d44:	1080201c 	xori	r2,r2,128
  800d48:	10bfe004 	addi	r2,r2,-128
  800d4c:	1004c03a 	cmpne	r2,r2,zero
  800d50:	10000c1e 	bne	r2,zero,800d84 <tick+0x690>
  800d54:	d0a72703 	ldbu	r2,-25444(gp)
  800d58:	10803fcc 	andi	r2,r2,255
  800d5c:	1080201c 	xori	r2,r2,128
  800d60:	10bfe004 	addi	r2,r2,-128
  800d64:	1005003a 	cmpeq	r2,r2,zero
  800d68:	1000091e 	bne	r2,zero,800d90 <tick+0x69c>
  800d6c:	d0a72d43 	ldbu	r2,-25419(gp)
  800d70:	10803fcc 	andi	r2,r2,255
  800d74:	1080201c 	xori	r2,r2,128
  800d78:	10bfe004 	addi	r2,r2,-128
  800d7c:	1004c03a 	cmpne	r2,r2,zero
  800d80:	1000031e 	bne	r2,zero,800d90 <tick+0x69c>
  800d84:	00800044 	movi	r2,1
  800d88:	e0bff215 	stw	r2,-56(fp)
  800d8c:	00000106 	br	800d94 <tick+0x6a0>
  800d90:	e03ff215 	stw	zero,-56(fp)
  800d94:	e0fff217 	ldw	r3,-56(fp)
  800d98:	1805883a 	mov	r2,r3
  800d9c:	d0a72bc5 	stb	r2,-25425(gp)
      g10 =(g9&&_cg9);
  800da0:	d0a72403 	ldbu	r2,-25456(gp)
  800da4:	10803fcc 	andi	r2,r2,255
  800da8:	1080201c 	xori	r2,r2,128
  800dac:	10bfe004 	addi	r2,r2,-128
  800db0:	1005003a 	cmpeq	r2,r2,zero
  800db4:	1000091e 	bne	r2,zero,800ddc <tick+0x6e8>
  800db8:	d0a72cc3 	ldbu	r2,-25421(gp)
  800dbc:	10803fcc 	andi	r2,r2,255
  800dc0:	1080201c 	xori	r2,r2,128
  800dc4:	10bfe004 	addi	r2,r2,-128
  800dc8:	1005003a 	cmpeq	r2,r2,zero
  800dcc:	1000031e 	bne	r2,zero,800ddc <tick+0x6e8>
  800dd0:	00800044 	movi	r2,1
  800dd4:	e0bff115 	stw	r2,-60(fp)
  800dd8:	00000106 	br	800de0 <tick+0x6ec>
  800ddc:	e03ff115 	stw	zero,-60(fp)
  800de0:	e0fff117 	ldw	r3,-60(fp)
  800de4:	1805883a 	mov	r2,r3
  800de8:	d0a73085 	stb	r2,-25406(gp)
      if(g10){
  800dec:	d0a73083 	ldbu	r2,-25406(gp)
  800df0:	10803fcc 	andi	r2,r2,255
  800df4:	1080201c 	xori	r2,r2,128
  800df8:	10bfe004 	addi	r2,r2,-128
  800dfc:	1005003a 	cmpeq	r2,r2,zero
  800e00:	1000021e 	bne	r2,zero,800e0c <tick+0x718>
         StartAVI =(StartAVI||1);
  800e04:	00800044 	movi	r2,1
  800e08:	d0a71ec5 	stb	r2,-25477(gp)
      }
      g16 =(g15&&_cg15);
  800e0c:	d0a72a83 	ldbu	r2,-25430(gp)
  800e10:	10803fcc 	andi	r2,r2,255
  800e14:	1080201c 	xori	r2,r2,128
  800e18:	10bfe004 	addi	r2,r2,-128
  800e1c:	1005003a 	cmpeq	r2,r2,zero
  800e20:	1000091e 	bne	r2,zero,800e48 <tick+0x754>
  800e24:	d0a72603 	ldbu	r2,-25448(gp)
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	1080201c 	xori	r2,r2,128
  800e30:	10bfe004 	addi	r2,r2,-128
  800e34:	1005003a 	cmpeq	r2,r2,zero
  800e38:	1000031e 	bne	r2,zero,800e48 <tick+0x754>
  800e3c:	00800044 	movi	r2,1
  800e40:	e0bff015 	stw	r2,-64(fp)
  800e44:	00000106 	br	800e4c <tick+0x758>
  800e48:	e03ff015 	stw	zero,-64(fp)
  800e4c:	e0fff017 	ldw	r3,-64(fp)
  800e50:	1805883a 	mov	r2,r3
  800e54:	d0a72dc5 	stb	r2,-25417(gp)
      if(g16){
  800e58:	d0a72dc3 	ldbu	r2,-25417(gp)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080201c 	xori	r2,r2,128
  800e64:	10bfe004 	addi	r2,r2,-128
  800e68:	1005003a 	cmpeq	r2,r2,zero
  800e6c:	1000021e 	bne	r2,zero,800e78 <tick+0x784>
         AP =(AP||1);
  800e70:	00800044 	movi	r2,1
  800e74:	d0a72185 	stb	r2,-25466(gp)
      }
      g16b = g16;
  800e78:	d0a72dc3 	ldbu	r2,-25417(gp)
  800e7c:	d0a72f45 	stb	r2,-25411(gp)
      if(g16b){
  800e80:	d0a72f43 	ldbu	r2,-25411(gp)
  800e84:	10803fcc 	andi	r2,r2,255
  800e88:	1080201c 	xori	r2,r2,128
  800e8c:	10bfe004 	addi	r2,r2,-128
  800e90:	1005003a 	cmpeq	r2,r2,zero
  800e94:	1000021e 	bne	r2,zero,800ea0 <tick+0x7ac>
         StartAVI =(StartAVI||1);
  800e98:	00800044 	movi	r2,1
  800e9c:	d0a71ec5 	stb	r2,-25477(gp)
      }
      g20 =(g19&&_cg19);
  800ea0:	d0a722c3 	ldbu	r2,-25461(gp)
  800ea4:	10803fcc 	andi	r2,r2,255
  800ea8:	1080201c 	xori	r2,r2,128
  800eac:	10bfe004 	addi	r2,r2,-128
  800eb0:	1005003a 	cmpeq	r2,r2,zero
  800eb4:	1000091e 	bne	r2,zero,800edc <tick+0x7e8>
  800eb8:	d0a72c43 	ldbu	r2,-25423(gp)
  800ebc:	10803fcc 	andi	r2,r2,255
  800ec0:	1080201c 	xori	r2,r2,128
  800ec4:	10bfe004 	addi	r2,r2,-128
  800ec8:	1005003a 	cmpeq	r2,r2,zero
  800ecc:	1000031e 	bne	r2,zero,800edc <tick+0x7e8>
  800ed0:	00800044 	movi	r2,1
  800ed4:	e0bfef15 	stw	r2,-68(fp)
  800ed8:	00000106 	br	800ee0 <tick+0x7ec>
  800edc:	e03fef15 	stw	zero,-68(fp)
  800ee0:	e0ffef17 	ldw	r3,-68(fp)
  800ee4:	1805883a 	mov	r2,r3
  800ee8:	d0a72b45 	stb	r2,-25427(gp)
      if(g20){
  800eec:	d0a72b43 	ldbu	r2,-25427(gp)
  800ef0:	10803fcc 	andi	r2,r2,255
  800ef4:	1080201c 	xori	r2,r2,128
  800ef8:	10bfe004 	addi	r2,r2,-128
  800efc:	1005003a 	cmpeq	r2,r2,zero
  800f00:	1000021e 	bne	r2,zero,800f0c <tick+0x818>
         StartAVI =(StartAVI||1);
  800f04:	00800044 	movi	r2,1
  800f08:	d0a71ec5 	stb	r2,-25477(gp)
      }
      g11 =(g16b||g10||g20||(g13&&(!(_cg13))));
  800f0c:	d0a72f43 	ldbu	r2,-25411(gp)
  800f10:	10803fcc 	andi	r2,r2,255
  800f14:	1080201c 	xori	r2,r2,128
  800f18:	10bfe004 	addi	r2,r2,-128
  800f1c:	1004c03a 	cmpne	r2,r2,zero
  800f20:	1000181e 	bne	r2,zero,800f84 <tick+0x890>
  800f24:	d0a73083 	ldbu	r2,-25406(gp)
  800f28:	10803fcc 	andi	r2,r2,255
  800f2c:	1080201c 	xori	r2,r2,128
  800f30:	10bfe004 	addi	r2,r2,-128
  800f34:	1004c03a 	cmpne	r2,r2,zero
  800f38:	1000121e 	bne	r2,zero,800f84 <tick+0x890>
  800f3c:	d0a72b43 	ldbu	r2,-25427(gp)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	1004c03a 	cmpne	r2,r2,zero
  800f50:	10000c1e 	bne	r2,zero,800f84 <tick+0x890>
  800f54:	d0a72b83 	ldbu	r2,-25426(gp)
  800f58:	10803fcc 	andi	r2,r2,255
  800f5c:	1080201c 	xori	r2,r2,128
  800f60:	10bfe004 	addi	r2,r2,-128
  800f64:	1005003a 	cmpeq	r2,r2,zero
  800f68:	1000091e 	bne	r2,zero,800f90 <tick+0x89c>
  800f6c:	d0a72c83 	ldbu	r2,-25422(gp)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	1004c03a 	cmpne	r2,r2,zero
  800f80:	1000031e 	bne	r2,zero,800f90 <tick+0x89c>
  800f84:	00800044 	movi	r2,1
  800f88:	e0bfee15 	stw	r2,-72(fp)
  800f8c:	00000106 	br	800f94 <tick+0x8a0>
  800f90:	e03fee15 	stw	zero,-72(fp)
  800f94:	e0ffee17 	ldw	r3,-72(fp)
  800f98:	1805883a 	mov	r2,r3
  800f9c:	d0a72e85 	stb	r2,-25414(gp)
      g22 =((g21&&_cg21)||(g24&&(!(_cg24))));
  800fa0:	d0a72803 	ldbu	r2,-25440(gp)
  800fa4:	10803fcc 	andi	r2,r2,255
  800fa8:	1080201c 	xori	r2,r2,128
  800fac:	10bfe004 	addi	r2,r2,-128
  800fb0:	1005003a 	cmpeq	r2,r2,zero
  800fb4:	1000061e 	bne	r2,zero,800fd0 <tick+0x8dc>
  800fb8:	d0a727c3 	ldbu	r2,-25441(gp)
  800fbc:	10803fcc 	andi	r2,r2,255
  800fc0:	1080201c 	xori	r2,r2,128
  800fc4:	10bfe004 	addi	r2,r2,-128
  800fc8:	1004c03a 	cmpne	r2,r2,zero
  800fcc:	10000c1e 	bne	r2,zero,801000 <tick+0x90c>
  800fd0:	d0a73043 	ldbu	r2,-25407(gp)
  800fd4:	10803fcc 	andi	r2,r2,255
  800fd8:	1080201c 	xori	r2,r2,128
  800fdc:	10bfe004 	addi	r2,r2,-128
  800fe0:	1005003a 	cmpeq	r2,r2,zero
  800fe4:	1000091e 	bne	r2,zero,80100c <tick+0x918>
  800fe8:	d0a72e03 	ldbu	r2,-25416(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	1004c03a 	cmpne	r2,r2,zero
  800ffc:	1000031e 	bne	r2,zero,80100c <tick+0x918>
  801000:	00800044 	movi	r2,1
  801004:	e0bfed15 	stw	r2,-76(fp)
  801008:	00000106 	br	801010 <tick+0x91c>
  80100c:	e03fed15 	stw	zero,-76(fp)
  801010:	e0ffed17 	ldw	r3,-76(fp)
  801014:	1805883a 	mov	r2,r3
  801018:	d0a72ec5 	stb	r2,-25413(gp)
      g25_e1 =(!((g3||g5||g7||g23||g9||g12)));
  80101c:	d0a72383 	ldbu	r2,-25458(gp)
  801020:	10803fcc 	andi	r2,r2,255
  801024:	1080201c 	xori	r2,r2,128
  801028:	10bfe004 	addi	r2,r2,-128
  80102c:	1004c03a 	cmpne	r2,r2,zero
  801030:	1000211e 	bne	r2,zero,8010b8 <tick+0x9c4>
  801034:	d0a72843 	ldbu	r2,-25439(gp)
  801038:	10803fcc 	andi	r2,r2,255
  80103c:	1080201c 	xori	r2,r2,128
  801040:	10bfe004 	addi	r2,r2,-128
  801044:	1004c03a 	cmpne	r2,r2,zero
  801048:	10001b1e 	bne	r2,zero,8010b8 <tick+0x9c4>
  80104c:	d0a728c3 	ldbu	r2,-25437(gp)
  801050:	10803fcc 	andi	r2,r2,255
  801054:	1080201c 	xori	r2,r2,128
  801058:	10bfe004 	addi	r2,r2,-128
  80105c:	1004c03a 	cmpne	r2,r2,zero
  801060:	1000151e 	bne	r2,zero,8010b8 <tick+0x9c4>
  801064:	d0a72943 	ldbu	r2,-25435(gp)
  801068:	10803fcc 	andi	r2,r2,255
  80106c:	1080201c 	xori	r2,r2,128
  801070:	10bfe004 	addi	r2,r2,-128
  801074:	1004c03a 	cmpne	r2,r2,zero
  801078:	10000f1e 	bne	r2,zero,8010b8 <tick+0x9c4>
  80107c:	d0a72403 	ldbu	r2,-25456(gp)
  801080:	10803fcc 	andi	r2,r2,255
  801084:	1080201c 	xori	r2,r2,128
  801088:	10bfe004 	addi	r2,r2,-128
  80108c:	1004c03a 	cmpne	r2,r2,zero
  801090:	1000091e 	bne	r2,zero,8010b8 <tick+0x9c4>
  801094:	d0a726c3 	ldbu	r2,-25445(gp)
  801098:	10803fcc 	andi	r2,r2,255
  80109c:	1080201c 	xori	r2,r2,128
  8010a0:	10bfe004 	addi	r2,r2,-128
  8010a4:	1004c03a 	cmpne	r2,r2,zero
  8010a8:	1000031e 	bne	r2,zero,8010b8 <tick+0x9c4>
  8010ac:	00800044 	movi	r2,1
  8010b0:	e0bfec15 	stw	r2,-80(fp)
  8010b4:	00000106 	br	8010bc <tick+0x9c8>
  8010b8:	e03fec15 	stw	zero,-80(fp)
  8010bc:	e0ffec17 	ldw	r3,-80(fp)
  8010c0:	1805883a 	mov	r2,r3
  8010c4:	d0a72305 	stb	r2,-25460(gp)
      g29_e2 =(!(g28));
  8010c8:	d0a72f03 	ldbu	r2,-25412(gp)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080201c 	xori	r2,r2,128
  8010d4:	10bfe004 	addi	r2,r2,-128
  8010d8:	1005003a 	cmpeq	r2,r2,zero
  8010dc:	d0a72fc5 	stb	r2,-25409(gp)
   }
   PRE_g2 = g2;
  8010e0:	d0a72883 	ldbu	r2,-25438(gp)
  8010e4:	d0a72205 	stb	r2,-25464(gp)
   PRE_g4 = g4;
  8010e8:	d0a72283 	ldbu	r2,-25462(gp)
  8010ec:	d0a72905 	stb	r2,-25436(gp)
   PRE_g6 = g6;
  8010f0:	d0a72c03 	ldbu	r2,-25424(gp)
  8010f4:	d0a729c5 	stb	r2,-25433(gp)
   PRE_g8 = g8;
  8010f8:	d0a72bc3 	ldbu	r2,-25425(gp)
  8010fc:	d0a72745 	stb	r2,-25443(gp)
   PRE_g11 = g11;
  801100:	d0a72e83 	ldbu	r2,-25414(gp)
  801104:	d0a72b05 	stb	r2,-25428(gp)
   PRE_g22 = g22;
  801108:	d0a72ec3 	ldbu	r2,-25413(gp)
  80110c:	d0a72a05 	stb	r2,-25432(gp)
   PRE_g27 = g27;
  801110:	d0a72343 	ldbu	r2,-25459(gp)
  801114:	d0a723c5 	stb	r2,-25457(gp)
   _PRE_GO = _GO;
  801118:	d0a72ac3 	ldbu	r2,-25429(gp)
  80111c:	10803fcc 	andi	r2,r2,255
  801120:	1080201c 	xori	r2,r2,128
  801124:	10bfe004 	addi	r2,r2,-128
  801128:	d0a72515 	stw	r2,-25452(gp)
   return;
}
  80112c:	e037883a 	mov	sp,fp
  801130:	df000017 	ldw	fp,0(sp)
  801134:	dec00104 	addi	sp,sp,4
  801138:	f800283a 	ret

0080113c <_fopen_r>:
  80113c:	defffa04 	addi	sp,sp,-24
  801140:	dcc00415 	stw	r19,16(sp)
  801144:	2827883a 	mov	r19,r5
  801148:	300b883a 	mov	r5,r6
  80114c:	d80d883a 	mov	r6,sp
  801150:	dc800315 	stw	r18,12(sp)
  801154:	dc400215 	stw	r17,8(sp)
  801158:	dc000115 	stw	r16,4(sp)
  80115c:	dfc00515 	stw	ra,20(sp)
  801160:	2021883a 	mov	r16,r4
  801164:	0802b080 	call	802b08 <__sflags>
  801168:	1025883a 	mov	r18,r2
  80116c:	8009883a 	mov	r4,r16
  801170:	0023883a 	mov	r17,zero
  801174:	1000081e 	bne	r2,zero,801198 <_fopen_r+0x5c>
  801178:	8805883a 	mov	r2,r17
  80117c:	dfc00517 	ldw	ra,20(sp)
  801180:	dcc00417 	ldw	r19,16(sp)
  801184:	dc800317 	ldw	r18,12(sp)
  801188:	dc400217 	ldw	r17,8(sp)
  80118c:	dc000117 	ldw	r16,4(sp)
  801190:	dec00604 	addi	sp,sp,24
  801194:	f800283a 	ret
  801198:	0802a180 	call	802a18 <__sfp>
  80119c:	1023883a 	mov	r17,r2
  8011a0:	980b883a 	mov	r5,r19
  8011a4:	8009883a 	mov	r4,r16
  8011a8:	01c06d84 	movi	r7,438
  8011ac:	103ff226 	beq	r2,zero,801178 <_fopen_r+0x3c>
  8011b0:	d9800017 	ldw	r6,0(sp)
  8011b4:	0801ff40 	call	801ff4 <_open_r>
  8011b8:	10001816 	blt	r2,zero,80121c <_fopen_r+0xe0>
  8011bc:	00c02034 	movhi	r3,128
  8011c0:	18c8f804 	addi	r3,r3,9184
  8011c4:	923fffcc 	andi	r8,r18,65535
  8011c8:	8880038d 	sth	r2,14(r17)
  8011cc:	00802034 	movhi	r2,128
  8011d0:	10891704 	addi	r2,r2,9308
  8011d4:	88800815 	stw	r2,32(r17)
  8011d8:	88c00915 	stw	r3,36(r17)
  8011dc:	00802034 	movhi	r2,128
  8011e0:	1088de04 	addi	r2,r2,9080
  8011e4:	00c02034 	movhi	r3,128
  8011e8:	18c8dc04 	addi	r3,r3,9072
  8011ec:	4200400c 	andi	r8,r8,256
  8011f0:	8c80030d 	sth	r18,12(r17)
  8011f4:	8009883a 	mov	r4,r16
  8011f8:	880b883a 	mov	r5,r17
  8011fc:	000d883a 	mov	r6,zero
  801200:	01c00084 	movi	r7,2
  801204:	88800a15 	stw	r2,40(r17)
  801208:	88c00b15 	stw	r3,44(r17)
  80120c:	8c400715 	stw	r17,28(r17)
  801210:	403fd926 	beq	r8,zero,801178 <_fopen_r+0x3c>
  801214:	080124c0 	call	80124c <_fseek_r>
  801218:	003fd706 	br	801178 <_fopen_r+0x3c>
  80121c:	08028a00 	call	8028a0 <__sfp_lock_acquire>
  801220:	8800030d 	sth	zero,12(r17)
  801224:	08028a40 	call	8028a4 <__sfp_lock_release>
  801228:	0023883a 	mov	r17,zero
  80122c:	003fd206 	br	801178 <_fopen_r+0x3c>

00801230 <fopen>:
  801230:	01802074 	movhi	r6,129
  801234:	31aa0d04 	addi	r6,r6,-22476
  801238:	2007883a 	mov	r3,r4
  80123c:	31000017 	ldw	r4,0(r6)
  801240:	280d883a 	mov	r6,r5
  801244:	180b883a 	mov	r5,r3
  801248:	080113c1 	jmpi	80113c <_fopen_r>

0080124c <_fseek_r>:
  80124c:	deffe804 	addi	sp,sp,-96
  801250:	dd801515 	stw	r22,84(sp)
  801254:	dcc01215 	stw	r19,72(sp)
  801258:	dc801115 	stw	r18,68(sp)
  80125c:	dc000f15 	stw	r16,60(sp)
  801260:	dfc01715 	stw	ra,92(sp)
  801264:	ddc01615 	stw	r23,88(sp)
  801268:	dd401415 	stw	r21,80(sp)
  80126c:	dd001315 	stw	r20,76(sp)
  801270:	dc401015 	stw	r17,64(sp)
  801274:	2025883a 	mov	r18,r4
  801278:	2821883a 	mov	r16,r5
  80127c:	302d883a 	mov	r22,r6
  801280:	3827883a 	mov	r19,r7
  801284:	20000226 	beq	r4,zero,801290 <_fseek_r+0x44>
  801288:	20800e17 	ldw	r2,56(r4)
  80128c:	10007826 	beq	r2,zero,801470 <_fseek_r+0x224>
  801290:	8080030b 	ldhu	r2,12(r16)
  801294:	00c04204 	movi	r3,264
  801298:	1080420c 	andi	r2,r2,264
  80129c:	10c07926 	beq	r2,r3,801484 <_fseek_r+0x238>
  8012a0:	85400a17 	ldw	r21,40(r16)
  8012a4:	a800ea26 	beq	r21,zero,801650 <_fseek_r+0x404>
  8012a8:	00800044 	movi	r2,1
  8012ac:	98805f26 	beq	r19,r2,80142c <_fseek_r+0x1e0>
  8012b0:	00800084 	movi	r2,2
  8012b4:	98801026 	beq	r19,r2,8012f8 <_fseek_r+0xac>
  8012b8:	98000f26 	beq	r19,zero,8012f8 <_fseek_r+0xac>
  8012bc:	00800584 	movi	r2,22
  8012c0:	013fffc4 	movi	r4,-1
  8012c4:	90800015 	stw	r2,0(r18)
  8012c8:	2005883a 	mov	r2,r4
  8012cc:	dfc01717 	ldw	ra,92(sp)
  8012d0:	ddc01617 	ldw	r23,88(sp)
  8012d4:	dd801517 	ldw	r22,84(sp)
  8012d8:	dd401417 	ldw	r21,80(sp)
  8012dc:	dd001317 	ldw	r20,76(sp)
  8012e0:	dcc01217 	ldw	r19,72(sp)
  8012e4:	dc801117 	ldw	r18,68(sp)
  8012e8:	dc401017 	ldw	r17,64(sp)
  8012ec:	dc000f17 	ldw	r16,60(sp)
  8012f0:	dec01804 	addi	sp,sp,96
  8012f4:	f800283a 	ret
  8012f8:	81800417 	ldw	r6,16(r16)
  8012fc:	0023883a 	mov	r17,zero
  801300:	002f883a 	mov	r23,zero
  801304:	3000a626 	beq	r6,zero,8015a0 <_fseek_r+0x354>
  801308:	8100030b 	ldhu	r4,12(r16)
  80130c:	2082068c 	andi	r2,r4,2074
  801310:	1000081e 	bne	r2,zero,801334 <_fseek_r+0xe8>
  801314:	2081000c 	andi	r2,r4,1024
  801318:	10001b1e 	bne	r2,zero,801388 <_fseek_r+0x13c>
  80131c:	00802034 	movhi	r2,128
  801320:	1088de04 	addi	r2,r2,9080
  801324:	a8800926 	beq	r21,r2,80134c <_fseek_r+0x100>
  801328:	8080030b 	ldhu	r2,12(r16)
  80132c:	10820014 	ori	r2,r2,2048
  801330:	8080030d 	sth	r2,12(r16)
  801334:	9009883a 	mov	r4,r18
  801338:	800b883a 	mov	r5,r16
  80133c:	08026180 	call	802618 <_fflush_r>
  801340:	1000a326 	beq	r2,zero,8015d0 <_fseek_r+0x384>
  801344:	013fffc4 	movi	r4,-1
  801348:	003fdf06 	br	8012c8 <_fseek_r+0x7c>
  80134c:	8140038f 	ldh	r5,14(r16)
  801350:	283ff516 	blt	r5,zero,801328 <_fseek_r+0xdc>
  801354:	9009883a 	mov	r4,r18
  801358:	d80d883a 	mov	r6,sp
  80135c:	08016ac0 	call	8016ac <_fstat_r>
  801360:	103ff11e 	bne	r2,zero,801328 <_fseek_r+0xdc>
  801364:	d8800117 	ldw	r2,4(sp)
  801368:	00e00014 	movui	r3,32768
  80136c:	10bc000c 	andi	r2,r2,61440
  801370:	10ffed1e 	bne	r2,r3,801328 <_fseek_r+0xdc>
  801374:	80c0030b 	ldhu	r3,12(r16)
  801378:	00810004 	movi	r2,1024
  80137c:	80801315 	stw	r2,76(r16)
  801380:	1886b03a 	or	r3,r3,r2
  801384:	80c0030d 	sth	r3,12(r16)
  801388:	9800701e 	bne	r19,zero,80154c <_fseek_r+0x300>
  80138c:	b029883a 	mov	r20,r22
  801390:	b804c03a 	cmpne	r2,r23,zero
  801394:	10003f1e 	bne	r2,zero,801494 <_fseek_r+0x248>
  801398:	8100030b 	ldhu	r4,12(r16)
  80139c:	2084000c 	andi	r2,r4,4096
  8013a0:	1000a126 	beq	r2,zero,801628 <_fseek_r+0x3dc>
  8013a4:	81801417 	ldw	r6,80(r16)
  8013a8:	80c00117 	ldw	r3,4(r16)
  8013ac:	81400c17 	ldw	r5,48(r16)
  8013b0:	30e3c83a 	sub	r17,r6,r3
  8013b4:	28008026 	beq	r5,zero,8015b8 <_fseek_r+0x36c>
  8013b8:	81c00f17 	ldw	r7,60(r16)
  8013bc:	89e3c83a 	sub	r17,r17,r7
  8013c0:	80800e17 	ldw	r2,56(r16)
  8013c4:	81800417 	ldw	r6,16(r16)
  8013c8:	88c7883a 	add	r3,r17,r3
  8013cc:	1185c83a 	sub	r2,r2,r6
  8013d0:	11cf883a 	add	r7,r2,r7
  8013d4:	1887c83a 	sub	r3,r3,r2
  8013d8:	2088000c 	andi	r2,r4,8192
  8013dc:	10003e1e 	bne	r2,zero,8014d8 <_fseek_r+0x28c>
  8013e0:	a0c03d16 	blt	r20,r3,8014d8 <_fseek_r+0x28c>
  8013e4:	38c5883a 	add	r2,r7,r3
  8013e8:	a0803b2e 	bgeu	r20,r2,8014d8 <_fseek_r+0x28c>
  8013ec:	a0c5c83a 	sub	r2,r20,r3
  8013f0:	3887c83a 	sub	r3,r7,r2
  8013f4:	3085883a 	add	r2,r6,r2
  8013f8:	80800015 	stw	r2,0(r16)
  8013fc:	80c00115 	stw	r3,4(r16)
  801400:	28000526 	beq	r5,zero,801418 <_fseek_r+0x1cc>
  801404:	80801004 	addi	r2,r16,64
  801408:	28800226 	beq	r5,r2,801414 <_fseek_r+0x1c8>
  80140c:	9009883a 	mov	r4,r18
  801410:	0802cd40 	call	802cd4 <_free_r>
  801414:	80000c15 	stw	zero,48(r16)
  801418:	8080030b 	ldhu	r2,12(r16)
  80141c:	0009883a 	mov	r4,zero
  801420:	10bff7cc 	andi	r2,r2,65503
  801424:	8080030d 	sth	r2,12(r16)
  801428:	003fa706 	br	8012c8 <_fseek_r+0x7c>
  80142c:	9009883a 	mov	r4,r18
  801430:	800b883a 	mov	r5,r16
  801434:	08026180 	call	802618 <_fflush_r>
  801438:	8100030b 	ldhu	r4,12(r16)
  80143c:	2084000c 	andi	r2,r4,4096
  801440:	10008726 	beq	r2,zero,801660 <_fseek_r+0x414>
  801444:	84401417 	ldw	r17,80(r16)
  801448:	2080010c 	andi	r2,r4,4
  80144c:	1000171e 	bne	r2,zero,8014ac <_fseek_r+0x260>
  801450:	2080020c 	andi	r2,r4,8
  801454:	10003b26 	beq	r2,zero,801544 <_fseek_r+0x2f8>
  801458:	80800017 	ldw	r2,0(r16)
  80145c:	10003926 	beq	r2,zero,801544 <_fseek_r+0x2f8>
  801460:	81800417 	ldw	r6,16(r16)
  801464:	1185c83a 	sub	r2,r2,r6
  801468:	88a3883a 	add	r17,r17,r2
  80146c:	00001606 	br	8014c8 <_fseek_r+0x27c>
  801470:	08028b00 	call	8028b0 <__sinit>
  801474:	8080030b 	ldhu	r2,12(r16)
  801478:	00c04204 	movi	r3,264
  80147c:	1080420c 	andi	r2,r2,264
  801480:	10ff871e 	bne	r2,r3,8012a0 <_fseek_r+0x54>
  801484:	9009883a 	mov	r4,r18
  801488:	800b883a 	mov	r5,r16
  80148c:	08026180 	call	802618 <_fflush_r>
  801490:	003f8306 	br	8012a0 <_fseek_r+0x54>
  801494:	81400c17 	ldw	r5,48(r16)
  801498:	28004526 	beq	r5,zero,8015b0 <_fseek_r+0x364>
  80149c:	8100030b 	ldhu	r4,12(r16)
  8014a0:	80c00117 	ldw	r3,4(r16)
  8014a4:	81c00f17 	ldw	r7,60(r16)
  8014a8:	003fc506 	br	8013c0 <_fseek_r+0x174>
  8014ac:	80c00117 	ldw	r3,4(r16)
  8014b0:	80800c17 	ldw	r2,48(r16)
  8014b4:	88e3c83a 	sub	r17,r17,r3
  8014b8:	10002226 	beq	r2,zero,801544 <_fseek_r+0x2f8>
  8014bc:	81c00f17 	ldw	r7,60(r16)
  8014c0:	81800417 	ldw	r6,16(r16)
  8014c4:	89e3c83a 	sub	r17,r17,r7
  8014c8:	b46d883a 	add	r22,r22,r17
  8014cc:	0027883a 	mov	r19,zero
  8014d0:	05c00044 	movi	r23,1
  8014d4:	003f8b06 	br	801304 <_fseek_r+0xb8>
  8014d8:	80801317 	ldw	r2,76(r16)
  8014dc:	81400717 	ldw	r5,28(r16)
  8014e0:	9009883a 	mov	r4,r18
  8014e4:	0085c83a 	sub	r2,zero,r2
  8014e8:	a0a2703a 	and	r17,r20,r2
  8014ec:	880d883a 	mov	r6,r17
  8014f0:	000f883a 	mov	r7,zero
  8014f4:	a83ee83a 	callr	r21
  8014f8:	00ffffc4 	movi	r3,-1
  8014fc:	10ff8d26 	beq	r2,r3,801334 <_fseek_r+0xe8>
  801500:	80800417 	ldw	r2,16(r16)
  801504:	81400c17 	ldw	r5,48(r16)
  801508:	80000115 	stw	zero,4(r16)
  80150c:	80800015 	stw	r2,0(r16)
  801510:	28000526 	beq	r5,zero,801528 <_fseek_r+0x2dc>
  801514:	80801004 	addi	r2,r16,64
  801518:	28800226 	beq	r5,r2,801524 <_fseek_r+0x2d8>
  80151c:	9009883a 	mov	r4,r18
  801520:	0802cd40 	call	802cd4 <_free_r>
  801524:	80000c15 	stw	zero,48(r16)
  801528:	8080030b 	ldhu	r2,12(r16)
  80152c:	a463c83a 	sub	r17,r20,r17
  801530:	10bff7cc 	andi	r2,r2,65503
  801534:	8080030d 	sth	r2,12(r16)
  801538:	88000c1e 	bne	r17,zero,80156c <_fseek_r+0x320>
  80153c:	0009883a 	mov	r4,zero
  801540:	003f6106 	br	8012c8 <_fseek_r+0x7c>
  801544:	81800417 	ldw	r6,16(r16)
  801548:	003fdf06 	br	8014c8 <_fseek_r+0x27c>
  80154c:	8140038f 	ldh	r5,14(r16)
  801550:	9009883a 	mov	r4,r18
  801554:	d80d883a 	mov	r6,sp
  801558:	08016ac0 	call	8016ac <_fstat_r>
  80155c:	103f751e 	bne	r2,zero,801334 <_fseek_r+0xe8>
  801560:	d8800417 	ldw	r2,16(sp)
  801564:	b0a9883a 	add	r20,r22,r2
  801568:	003f8906 	br	801390 <_fseek_r+0x144>
  80156c:	9009883a 	mov	r4,r18
  801570:	800b883a 	mov	r5,r16
  801574:	08021200 	call	802120 <__srefill_r>
  801578:	103f6e1e 	bne	r2,zero,801334 <_fseek_r+0xe8>
  80157c:	80c00117 	ldw	r3,4(r16)
  801580:	1c7f6c36 	bltu	r3,r17,801334 <_fseek_r+0xe8>
  801584:	80800017 	ldw	r2,0(r16)
  801588:	1c47c83a 	sub	r3,r3,r17
  80158c:	0009883a 	mov	r4,zero
  801590:	1445883a 	add	r2,r2,r17
  801594:	80c00115 	stw	r3,4(r16)
  801598:	80800015 	stw	r2,0(r16)
  80159c:	003f4a06 	br	8012c8 <_fseek_r+0x7c>
  8015a0:	9009883a 	mov	r4,r18
  8015a4:	800b883a 	mov	r5,r16
  8015a8:	08017200 	call	801720 <__smakebuf_r>
  8015ac:	003f5606 	br	801308 <_fseek_r+0xbc>
  8015b0:	8100030b 	ldhu	r4,12(r16)
  8015b4:	80c00117 	ldw	r3,4(r16)
  8015b8:	80800017 	ldw	r2,0(r16)
  8015bc:	81800417 	ldw	r6,16(r16)
  8015c0:	1185c83a 	sub	r2,r2,r6
  8015c4:	10cf883a 	add	r7,r2,r3
  8015c8:	8887c83a 	sub	r3,r17,r2
  8015cc:	003f8206 	br	8013d8 <_fseek_r+0x18c>
  8015d0:	81400717 	ldw	r5,28(r16)
  8015d4:	b00d883a 	mov	r6,r22
  8015d8:	980f883a 	mov	r7,r19
  8015dc:	9009883a 	mov	r4,r18
  8015e0:	a83ee83a 	callr	r21
  8015e4:	00ffffc4 	movi	r3,-1
  8015e8:	10ff5626 	beq	r2,r3,801344 <_fseek_r+0xf8>
  8015ec:	81400c17 	ldw	r5,48(r16)
  8015f0:	28000526 	beq	r5,zero,801608 <_fseek_r+0x3bc>
  8015f4:	80801004 	addi	r2,r16,64
  8015f8:	28800226 	beq	r5,r2,801604 <_fseek_r+0x3b8>
  8015fc:	9009883a 	mov	r4,r18
  801600:	0802cd40 	call	802cd4 <_free_r>
  801604:	80000c15 	stw	zero,48(r16)
  801608:	8080030b 	ldhu	r2,12(r16)
  80160c:	80c00417 	ldw	r3,16(r16)
  801610:	0009883a 	mov	r4,zero
  801614:	10bdf7cc 	andi	r2,r2,63455
  801618:	8080030d 	sth	r2,12(r16)
  80161c:	80c00015 	stw	r3,0(r16)
  801620:	80000115 	stw	zero,4(r16)
  801624:	003f2806 	br	8012c8 <_fseek_r+0x7c>
  801628:	81400717 	ldw	r5,28(r16)
  80162c:	000d883a 	mov	r6,zero
  801630:	9009883a 	mov	r4,r18
  801634:	01c00044 	movi	r7,1
  801638:	a83ee83a 	callr	r21
  80163c:	100d883a 	mov	r6,r2
  801640:	00bfffc4 	movi	r2,-1
  801644:	30bf3b26 	beq	r6,r2,801334 <_fseek_r+0xe8>
  801648:	8100030b 	ldhu	r4,12(r16)
  80164c:	003f5606 	br	8013a8 <_fseek_r+0x15c>
  801650:	00800744 	movi	r2,29
  801654:	013fffc4 	movi	r4,-1
  801658:	90800015 	stw	r2,0(r18)
  80165c:	003f1a06 	br	8012c8 <_fseek_r+0x7c>
  801660:	81400717 	ldw	r5,28(r16)
  801664:	980f883a 	mov	r7,r19
  801668:	9009883a 	mov	r4,r18
  80166c:	000d883a 	mov	r6,zero
  801670:	a83ee83a 	callr	r21
  801674:	1023883a 	mov	r17,r2
  801678:	00bfffc4 	movi	r2,-1
  80167c:	88bf3126 	beq	r17,r2,801344 <_fseek_r+0xf8>
  801680:	8100030b 	ldhu	r4,12(r16)
  801684:	003f7006 	br	801448 <_fseek_r+0x1fc>

00801688 <fseek>:
  801688:	00802074 	movhi	r2,129
  80168c:	10aa0d04 	addi	r2,r2,-22476
  801690:	2013883a 	mov	r9,r4
  801694:	11000017 	ldw	r4,0(r2)
  801698:	2805883a 	mov	r2,r5
  80169c:	300f883a 	mov	r7,r6
  8016a0:	480b883a 	mov	r5,r9
  8016a4:	100d883a 	mov	r6,r2
  8016a8:	080124c1 	jmpi	80124c <_fseek_r>

008016ac <_fstat_r>:
  8016ac:	defffd04 	addi	sp,sp,-12
  8016b0:	dc000015 	stw	r16,0(sp)
  8016b4:	04002074 	movhi	r16,129
  8016b8:	84313e04 	addi	r16,r16,-15112
  8016bc:	dc400115 	stw	r17,4(sp)
  8016c0:	80000015 	stw	zero,0(r16)
  8016c4:	2023883a 	mov	r17,r4
  8016c8:	2809883a 	mov	r4,r5
  8016cc:	300b883a 	mov	r5,r6
  8016d0:	dfc00215 	stw	ra,8(sp)
  8016d4:	08045900 	call	804590 <fstat>
  8016d8:	1007883a 	mov	r3,r2
  8016dc:	00bfffc4 	movi	r2,-1
  8016e0:	18800626 	beq	r3,r2,8016fc <_fstat_r+0x50>
  8016e4:	1805883a 	mov	r2,r3
  8016e8:	dfc00217 	ldw	ra,8(sp)
  8016ec:	dc400117 	ldw	r17,4(sp)
  8016f0:	dc000017 	ldw	r16,0(sp)
  8016f4:	dec00304 	addi	sp,sp,12
  8016f8:	f800283a 	ret
  8016fc:	80800017 	ldw	r2,0(r16)
  801700:	103ff826 	beq	r2,zero,8016e4 <_fstat_r+0x38>
  801704:	88800015 	stw	r2,0(r17)
  801708:	1805883a 	mov	r2,r3
  80170c:	dfc00217 	ldw	ra,8(sp)
  801710:	dc400117 	ldw	r17,4(sp)
  801714:	dc000017 	ldw	r16,0(sp)
  801718:	dec00304 	addi	sp,sp,12
  80171c:	f800283a 	ret

00801720 <__smakebuf_r>:
  801720:	2880030b 	ldhu	r2,12(r5)
  801724:	deffed04 	addi	sp,sp,-76
  801728:	dc401015 	stw	r17,64(sp)
  80172c:	1080008c 	andi	r2,r2,2
  801730:	dc000f15 	stw	r16,60(sp)
  801734:	dfc01215 	stw	ra,72(sp)
  801738:	dc801115 	stw	r18,68(sp)
  80173c:	2821883a 	mov	r16,r5
  801740:	2023883a 	mov	r17,r4
  801744:	10000b26 	beq	r2,zero,801774 <__smakebuf_r+0x54>
  801748:	28c010c4 	addi	r3,r5,67
  80174c:	00800044 	movi	r2,1
  801750:	28800515 	stw	r2,20(r5)
  801754:	28c00415 	stw	r3,16(r5)
  801758:	28c00015 	stw	r3,0(r5)
  80175c:	dfc01217 	ldw	ra,72(sp)
  801760:	dc801117 	ldw	r18,68(sp)
  801764:	dc401017 	ldw	r17,64(sp)
  801768:	dc000f17 	ldw	r16,60(sp)
  80176c:	dec01304 	addi	sp,sp,76
  801770:	f800283a 	ret
  801774:	2940038f 	ldh	r5,14(r5)
  801778:	28002116 	blt	r5,zero,801800 <__smakebuf_r+0xe0>
  80177c:	d80d883a 	mov	r6,sp
  801780:	08016ac0 	call	8016ac <_fstat_r>
  801784:	10001e16 	blt	r2,zero,801800 <__smakebuf_r+0xe0>
  801788:	d8800117 	ldw	r2,4(sp)
  80178c:	00e00014 	movui	r3,32768
  801790:	113c000c 	andi	r4,r2,61440
  801794:	20c03126 	beq	r4,r3,80185c <__smakebuf_r+0x13c>
  801798:	8080030b 	ldhu	r2,12(r16)
  80179c:	00c80004 	movi	r3,8192
  8017a0:	10820014 	ori	r2,r2,2048
  8017a4:	8080030d 	sth	r2,12(r16)
  8017a8:	20c01e26 	beq	r4,r3,801824 <__smakebuf_r+0x104>
  8017ac:	04810004 	movi	r18,1024
  8017b0:	8809883a 	mov	r4,r17
  8017b4:	900b883a 	mov	r5,r18
  8017b8:	08018b40 	call	8018b4 <_malloc_r>
  8017bc:	1009883a 	mov	r4,r2
  8017c0:	10003126 	beq	r2,zero,801888 <__smakebuf_r+0x168>
  8017c4:	80c0030b 	ldhu	r3,12(r16)
  8017c8:	00802034 	movhi	r2,128
  8017cc:	108a6504 	addi	r2,r2,10644
  8017d0:	88800f15 	stw	r2,60(r17)
  8017d4:	18c02014 	ori	r3,r3,128
  8017d8:	84800515 	stw	r18,20(r16)
  8017dc:	80c0030d 	sth	r3,12(r16)
  8017e0:	81000415 	stw	r4,16(r16)
  8017e4:	81000015 	stw	r4,0(r16)
  8017e8:	dfc01217 	ldw	ra,72(sp)
  8017ec:	dc801117 	ldw	r18,68(sp)
  8017f0:	dc401017 	ldw	r17,64(sp)
  8017f4:	dc000f17 	ldw	r16,60(sp)
  8017f8:	dec01304 	addi	sp,sp,76
  8017fc:	f800283a 	ret
  801800:	80c0030b 	ldhu	r3,12(r16)
  801804:	1880200c 	andi	r2,r3,128
  801808:	10000426 	beq	r2,zero,80181c <__smakebuf_r+0xfc>
  80180c:	04801004 	movi	r18,64
  801810:	18820014 	ori	r2,r3,2048
  801814:	8080030d 	sth	r2,12(r16)
  801818:	003fe506 	br	8017b0 <__smakebuf_r+0x90>
  80181c:	04810004 	movi	r18,1024
  801820:	003ffb06 	br	801810 <__smakebuf_r+0xf0>
  801824:	8140038f 	ldh	r5,14(r16)
  801828:	8809883a 	mov	r4,r17
  80182c:	08036040 	call	803604 <_isatty_r>
  801830:	103fde26 	beq	r2,zero,8017ac <__smakebuf_r+0x8c>
  801834:	8080030b 	ldhu	r2,12(r16)
  801838:	80c010c4 	addi	r3,r16,67
  80183c:	04810004 	movi	r18,1024
  801840:	10800054 	ori	r2,r2,1
  801844:	8080030d 	sth	r2,12(r16)
  801848:	00800044 	movi	r2,1
  80184c:	80c00415 	stw	r3,16(r16)
  801850:	80800515 	stw	r2,20(r16)
  801854:	80c00015 	stw	r3,0(r16)
  801858:	003fd506 	br	8017b0 <__smakebuf_r+0x90>
  80185c:	80c00a17 	ldw	r3,40(r16)
  801860:	00802034 	movhi	r2,128
  801864:	1088de04 	addi	r2,r2,9080
  801868:	18bfcb1e 	bne	r3,r2,801798 <__smakebuf_r+0x78>
  80186c:	8080030b 	ldhu	r2,12(r16)
  801870:	00c10004 	movi	r3,1024
  801874:	1825883a 	mov	r18,r3
  801878:	10c4b03a 	or	r2,r2,r3
  80187c:	8080030d 	sth	r2,12(r16)
  801880:	80c01315 	stw	r3,76(r16)
  801884:	003fca06 	br	8017b0 <__smakebuf_r+0x90>
  801888:	8100030b 	ldhu	r4,12(r16)
  80188c:	2080800c 	andi	r2,r4,512
  801890:	103fb21e 	bne	r2,zero,80175c <__smakebuf_r+0x3c>
  801894:	80c010c4 	addi	r3,r16,67
  801898:	21000094 	ori	r4,r4,2
  80189c:	00800044 	movi	r2,1
  8018a0:	80800515 	stw	r2,20(r16)
  8018a4:	8100030d 	sth	r4,12(r16)
  8018a8:	80c00415 	stw	r3,16(r16)
  8018ac:	80c00015 	stw	r3,0(r16)
  8018b0:	003faa06 	br	80175c <__smakebuf_r+0x3c>

008018b4 <_malloc_r>:
  8018b4:	defff604 	addi	sp,sp,-40
  8018b8:	28c002c4 	addi	r3,r5,11
  8018bc:	00800584 	movi	r2,22
  8018c0:	dc800215 	stw	r18,8(sp)
  8018c4:	dfc00915 	stw	ra,36(sp)
  8018c8:	df000815 	stw	fp,32(sp)
  8018cc:	ddc00715 	stw	r23,28(sp)
  8018d0:	dd800615 	stw	r22,24(sp)
  8018d4:	dd400515 	stw	r21,20(sp)
  8018d8:	dd000415 	stw	r20,16(sp)
  8018dc:	dcc00315 	stw	r19,12(sp)
  8018e0:	dc400115 	stw	r17,4(sp)
  8018e4:	dc000015 	stw	r16,0(sp)
  8018e8:	2025883a 	mov	r18,r4
  8018ec:	10c01236 	bltu	r2,r3,801938 <_malloc_r+0x84>
  8018f0:	04400404 	movi	r17,16
  8018f4:	8940142e 	bgeu	r17,r5,801948 <_malloc_r+0x94>
  8018f8:	00800304 	movi	r2,12
  8018fc:	0007883a 	mov	r3,zero
  801900:	90800015 	stw	r2,0(r18)
  801904:	1805883a 	mov	r2,r3
  801908:	dfc00917 	ldw	ra,36(sp)
  80190c:	df000817 	ldw	fp,32(sp)
  801910:	ddc00717 	ldw	r23,28(sp)
  801914:	dd800617 	ldw	r22,24(sp)
  801918:	dd400517 	ldw	r21,20(sp)
  80191c:	dd000417 	ldw	r20,16(sp)
  801920:	dcc00317 	ldw	r19,12(sp)
  801924:	dc800217 	ldw	r18,8(sp)
  801928:	dc400117 	ldw	r17,4(sp)
  80192c:	dc000017 	ldw	r16,0(sp)
  801930:	dec00a04 	addi	sp,sp,40
  801934:	f800283a 	ret
  801938:	00bffe04 	movi	r2,-8
  80193c:	18a2703a 	and	r17,r3,r2
  801940:	883fed16 	blt	r17,zero,8018f8 <_malloc_r+0x44>
  801944:	897fec36 	bltu	r17,r5,8018f8 <_malloc_r+0x44>
  801948:	9009883a 	mov	r4,r18
  80194c:	0804a8c0 	call	804a8c <__malloc_lock>
  801950:	00807dc4 	movi	r2,503
  801954:	14402b2e 	bgeu	r2,r17,801a04 <_malloc_r+0x150>
  801958:	8806d27a 	srli	r3,r17,9
  80195c:	18003f1e 	bne	r3,zero,801a5c <_malloc_r+0x1a8>
  801960:	880cd0fa 	srli	r6,r17,3
  801964:	300490fa 	slli	r2,r6,3
  801968:	02c02074 	movhi	r11,129
  80196c:	5ae41004 	addi	r11,r11,-28608
  801970:	12cb883a 	add	r5,r2,r11
  801974:	2c000317 	ldw	r16,12(r5)
  801978:	580f883a 	mov	r7,r11
  80197c:	2c00041e 	bne	r5,r16,801990 <_malloc_r+0xdc>
  801980:	00000a06 	br	8019ac <_malloc_r+0xf8>
  801984:	1800860e 	bge	r3,zero,801ba0 <_malloc_r+0x2ec>
  801988:	84000317 	ldw	r16,12(r16)
  80198c:	2c000726 	beq	r5,r16,8019ac <_malloc_r+0xf8>
  801990:	80800117 	ldw	r2,4(r16)
  801994:	00ffff04 	movi	r3,-4
  801998:	10c8703a 	and	r4,r2,r3
  80199c:	2447c83a 	sub	r3,r4,r17
  8019a0:	008003c4 	movi	r2,15
  8019a4:	10fff70e 	bge	r2,r3,801984 <_malloc_r+0xd0>
  8019a8:	31bfffc4 	addi	r6,r6,-1
  8019ac:	32400044 	addi	r9,r6,1
  8019b0:	02802074 	movhi	r10,129
  8019b4:	52a41204 	addi	r10,r10,-28600
  8019b8:	54000217 	ldw	r16,8(r10)
  8019bc:	8280a026 	beq	r16,r10,801c40 <_malloc_r+0x38c>
  8019c0:	80800117 	ldw	r2,4(r16)
  8019c4:	00ffff04 	movi	r3,-4
  8019c8:	10ca703a 	and	r5,r2,r3
  8019cc:	2c4dc83a 	sub	r6,r5,r17
  8019d0:	008003c4 	movi	r2,15
  8019d4:	11808316 	blt	r2,r6,801be4 <_malloc_r+0x330>
  8019d8:	52800315 	stw	r10,12(r10)
  8019dc:	52800215 	stw	r10,8(r10)
  8019e0:	30002916 	blt	r6,zero,801a88 <_malloc_r+0x1d4>
  8019e4:	8147883a 	add	r3,r16,r5
  8019e8:	18800117 	ldw	r2,4(r3)
  8019ec:	9009883a 	mov	r4,r18
  8019f0:	10800054 	ori	r2,r2,1
  8019f4:	18800115 	stw	r2,4(r3)
  8019f8:	0804aac0 	call	804aac <__malloc_unlock>
  8019fc:	80c00204 	addi	r3,r16,8
  801a00:	003fc006 	br	801904 <_malloc_r+0x50>
  801a04:	02c02074 	movhi	r11,129
  801a08:	5ae41004 	addi	r11,r11,-28608
  801a0c:	8ac5883a 	add	r2,r17,r11
  801a10:	14000317 	ldw	r16,12(r2)
  801a14:	580f883a 	mov	r7,r11
  801a18:	8806d0fa 	srli	r3,r17,3
  801a1c:	14006c26 	beq	r2,r16,801bd0 <_malloc_r+0x31c>
  801a20:	80c00117 	ldw	r3,4(r16)
  801a24:	00bfff04 	movi	r2,-4
  801a28:	81800317 	ldw	r6,12(r16)
  801a2c:	1886703a 	and	r3,r3,r2
  801a30:	80c7883a 	add	r3,r16,r3
  801a34:	18800117 	ldw	r2,4(r3)
  801a38:	81400217 	ldw	r5,8(r16)
  801a3c:	9009883a 	mov	r4,r18
  801a40:	10800054 	ori	r2,r2,1
  801a44:	18800115 	stw	r2,4(r3)
  801a48:	31400215 	stw	r5,8(r6)
  801a4c:	29800315 	stw	r6,12(r5)
  801a50:	0804aac0 	call	804aac <__malloc_unlock>
  801a54:	80c00204 	addi	r3,r16,8
  801a58:	003faa06 	br	801904 <_malloc_r+0x50>
  801a5c:	00800104 	movi	r2,4
  801a60:	10c0052e 	bgeu	r2,r3,801a78 <_malloc_r+0x1c4>
  801a64:	00800504 	movi	r2,20
  801a68:	10c07836 	bltu	r2,r3,801c4c <_malloc_r+0x398>
  801a6c:	198016c4 	addi	r6,r3,91
  801a70:	300490fa 	slli	r2,r6,3
  801a74:	003fbc06 	br	801968 <_malloc_r+0xb4>
  801a78:	8804d1ba 	srli	r2,r17,6
  801a7c:	11800e04 	addi	r6,r2,56
  801a80:	300490fa 	slli	r2,r6,3
  801a84:	003fb806 	br	801968 <_malloc_r+0xb4>
  801a88:	00807fc4 	movi	r2,511
  801a8c:	1140bb36 	bltu	r2,r5,801d7c <_malloc_r+0x4c8>
  801a90:	2806d0fa 	srli	r3,r5,3
  801a94:	573ffe04 	addi	fp,r10,-8
  801a98:	00800044 	movi	r2,1
  801a9c:	180890fa 	slli	r4,r3,3
  801aa0:	1807d0ba 	srai	r3,r3,2
  801aa4:	e1c00117 	ldw	r7,4(fp)
  801aa8:	5909883a 	add	r4,r11,r4
  801aac:	21400217 	ldw	r5,8(r4)
  801ab0:	10c4983a 	sll	r2,r2,r3
  801ab4:	81000315 	stw	r4,12(r16)
  801ab8:	81400215 	stw	r5,8(r16)
  801abc:	388eb03a 	or	r7,r7,r2
  801ac0:	2c000315 	stw	r16,12(r5)
  801ac4:	24000215 	stw	r16,8(r4)
  801ac8:	e1c00115 	stw	r7,4(fp)
  801acc:	4807883a 	mov	r3,r9
  801ad0:	4800cd16 	blt	r9,zero,801e08 <_malloc_r+0x554>
  801ad4:	1807d0ba 	srai	r3,r3,2
  801ad8:	00800044 	movi	r2,1
  801adc:	10c8983a 	sll	r4,r2,r3
  801ae0:	39004436 	bltu	r7,r4,801bf4 <_malloc_r+0x340>
  801ae4:	21c4703a 	and	r2,r4,r7
  801ae8:	10000a1e 	bne	r2,zero,801b14 <_malloc_r+0x260>
  801aec:	2109883a 	add	r4,r4,r4
  801af0:	00bfff04 	movi	r2,-4
  801af4:	4884703a 	and	r2,r9,r2
  801af8:	3906703a 	and	r3,r7,r4
  801afc:	12400104 	addi	r9,r2,4
  801b00:	1800041e 	bne	r3,zero,801b14 <_malloc_r+0x260>
  801b04:	2109883a 	add	r4,r4,r4
  801b08:	3904703a 	and	r2,r7,r4
  801b0c:	4a400104 	addi	r9,r9,4
  801b10:	103ffc26 	beq	r2,zero,801b04 <_malloc_r+0x250>
  801b14:	480490fa 	slli	r2,r9,3
  801b18:	4819883a 	mov	r12,r9
  801b1c:	023fff04 	movi	r8,-4
  801b20:	589b883a 	add	r13,r11,r2
  801b24:	6807883a 	mov	r3,r13
  801b28:	014003c4 	movi	r5,15
  801b2c:	1c000317 	ldw	r16,12(r3)
  801b30:	1c00041e 	bne	r3,r16,801b44 <_malloc_r+0x290>
  801b34:	0000a706 	br	801dd4 <_malloc_r+0x520>
  801b38:	3000ab0e 	bge	r6,zero,801de8 <_malloc_r+0x534>
  801b3c:	84000317 	ldw	r16,12(r16)
  801b40:	1c00a426 	beq	r3,r16,801dd4 <_malloc_r+0x520>
  801b44:	80800117 	ldw	r2,4(r16)
  801b48:	1204703a 	and	r2,r2,r8
  801b4c:	144dc83a 	sub	r6,r2,r17
  801b50:	29bff90e 	bge	r5,r6,801b38 <_malloc_r+0x284>
  801b54:	81000317 	ldw	r4,12(r16)
  801b58:	80c00217 	ldw	r3,8(r16)
  801b5c:	89400054 	ori	r5,r17,1
  801b60:	8445883a 	add	r2,r16,r17
  801b64:	20c00215 	stw	r3,8(r4)
  801b68:	19000315 	stw	r4,12(r3)
  801b6c:	81400115 	stw	r5,4(r16)
  801b70:	1187883a 	add	r3,r2,r6
  801b74:	31000054 	ori	r4,r6,1
  801b78:	50800315 	stw	r2,12(r10)
  801b7c:	50800215 	stw	r2,8(r10)
  801b80:	19800015 	stw	r6,0(r3)
  801b84:	11000115 	stw	r4,4(r2)
  801b88:	12800215 	stw	r10,8(r2)
  801b8c:	12800315 	stw	r10,12(r2)
  801b90:	9009883a 	mov	r4,r18
  801b94:	0804aac0 	call	804aac <__malloc_unlock>
  801b98:	80c00204 	addi	r3,r16,8
  801b9c:	003f5906 	br	801904 <_malloc_r+0x50>
  801ba0:	8109883a 	add	r4,r16,r4
  801ba4:	20800117 	ldw	r2,4(r4)
  801ba8:	80c00217 	ldw	r3,8(r16)
  801bac:	81400317 	ldw	r5,12(r16)
  801bb0:	10800054 	ori	r2,r2,1
  801bb4:	20800115 	stw	r2,4(r4)
  801bb8:	28c00215 	stw	r3,8(r5)
  801bbc:	19400315 	stw	r5,12(r3)
  801bc0:	9009883a 	mov	r4,r18
  801bc4:	0804aac0 	call	804aac <__malloc_unlock>
  801bc8:	80c00204 	addi	r3,r16,8
  801bcc:	003f4d06 	br	801904 <_malloc_r+0x50>
  801bd0:	80800204 	addi	r2,r16,8
  801bd4:	14000317 	ldw	r16,12(r2)
  801bd8:	143f911e 	bne	r2,r16,801a20 <_malloc_r+0x16c>
  801bdc:	1a400084 	addi	r9,r3,2
  801be0:	003f7306 	br	8019b0 <_malloc_r+0xfc>
  801be4:	88c00054 	ori	r3,r17,1
  801be8:	8445883a 	add	r2,r16,r17
  801bec:	80c00115 	stw	r3,4(r16)
  801bf0:	003fdf06 	br	801b70 <_malloc_r+0x2bc>
  801bf4:	e4000217 	ldw	r16,8(fp)
  801bf8:	00bfff04 	movi	r2,-4
  801bfc:	80c00117 	ldw	r3,4(r16)
  801c00:	802d883a 	mov	r22,r16
  801c04:	18aa703a 	and	r21,r3,r2
  801c08:	ac401636 	bltu	r21,r17,801c64 <_malloc_r+0x3b0>
  801c0c:	ac49c83a 	sub	r4,r21,r17
  801c10:	008003c4 	movi	r2,15
  801c14:	1100130e 	bge	r2,r4,801c64 <_malloc_r+0x3b0>
  801c18:	88800054 	ori	r2,r17,1
  801c1c:	8447883a 	add	r3,r16,r17
  801c20:	80800115 	stw	r2,4(r16)
  801c24:	20800054 	ori	r2,r4,1
  801c28:	18800115 	stw	r2,4(r3)
  801c2c:	e0c00215 	stw	r3,8(fp)
  801c30:	9009883a 	mov	r4,r18
  801c34:	0804aac0 	call	804aac <__malloc_unlock>
  801c38:	80c00204 	addi	r3,r16,8
  801c3c:	003f3106 	br	801904 <_malloc_r+0x50>
  801c40:	39c00117 	ldw	r7,4(r7)
  801c44:	573ffe04 	addi	fp,r10,-8
  801c48:	003fa006 	br	801acc <_malloc_r+0x218>
  801c4c:	00801504 	movi	r2,84
  801c50:	10c06736 	bltu	r2,r3,801df0 <_malloc_r+0x53c>
  801c54:	8804d33a 	srli	r2,r17,12
  801c58:	11801b84 	addi	r6,r2,110
  801c5c:	300490fa 	slli	r2,r6,3
  801c60:	003f4106 	br	801968 <_malloc_r+0xb4>
  801c64:	d0a73217 	ldw	r2,-25400(gp)
  801c68:	d0e00317 	ldw	r3,-32756(gp)
  801c6c:	053fffc4 	movi	r20,-1
  801c70:	10800404 	addi	r2,r2,16
  801c74:	88a7883a 	add	r19,r17,r2
  801c78:	1d000326 	beq	r3,r20,801c88 <_malloc_r+0x3d4>
  801c7c:	98c3ffc4 	addi	r3,r19,4095
  801c80:	00bc0004 	movi	r2,-4096
  801c84:	18a6703a 	and	r19,r3,r2
  801c88:	9009883a 	mov	r4,r18
  801c8c:	980b883a 	mov	r5,r19
  801c90:	08023000 	call	802300 <_sbrk_r>
  801c94:	1009883a 	mov	r4,r2
  801c98:	15000426 	beq	r2,r20,801cac <_malloc_r+0x3f8>
  801c9c:	854b883a 	add	r5,r16,r21
  801ca0:	1029883a 	mov	r20,r2
  801ca4:	11405a2e 	bgeu	r2,r5,801e10 <_malloc_r+0x55c>
  801ca8:	87000c26 	beq	r16,fp,801cdc <_malloc_r+0x428>
  801cac:	e4000217 	ldw	r16,8(fp)
  801cb0:	80c00117 	ldw	r3,4(r16)
  801cb4:	00bfff04 	movi	r2,-4
  801cb8:	1884703a 	and	r2,r3,r2
  801cbc:	14400336 	bltu	r2,r17,801ccc <_malloc_r+0x418>
  801cc0:	1449c83a 	sub	r4,r2,r17
  801cc4:	008003c4 	movi	r2,15
  801cc8:	113fd316 	blt	r2,r4,801c18 <_malloc_r+0x364>
  801ccc:	9009883a 	mov	r4,r18
  801cd0:	0804aac0 	call	804aac <__malloc_unlock>
  801cd4:	0007883a 	mov	r3,zero
  801cd8:	003f0a06 	br	801904 <_malloc_r+0x50>
  801cdc:	05c02074 	movhi	r23,129
  801ce0:	bdf17804 	addi	r23,r23,-14880
  801ce4:	b8800017 	ldw	r2,0(r23)
  801ce8:	988d883a 	add	r6,r19,r2
  801cec:	b9800015 	stw	r6,0(r23)
  801cf0:	d0e00317 	ldw	r3,-32756(gp)
  801cf4:	00bfffc4 	movi	r2,-1
  801cf8:	18808e26 	beq	r3,r2,801f34 <_malloc_r+0x680>
  801cfc:	2145c83a 	sub	r2,r4,r5
  801d00:	3085883a 	add	r2,r6,r2
  801d04:	b8800015 	stw	r2,0(r23)
  801d08:	20c001cc 	andi	r3,r4,7
  801d0c:	18005f1e 	bne	r3,zero,801e8c <_malloc_r+0x5d8>
  801d10:	000b883a 	mov	r5,zero
  801d14:	a4c5883a 	add	r2,r20,r19
  801d18:	1083ffcc 	andi	r2,r2,4095
  801d1c:	00c40004 	movi	r3,4096
  801d20:	1887c83a 	sub	r3,r3,r2
  801d24:	28e7883a 	add	r19,r5,r3
  801d28:	9009883a 	mov	r4,r18
  801d2c:	980b883a 	mov	r5,r19
  801d30:	08023000 	call	802300 <_sbrk_r>
  801d34:	1007883a 	mov	r3,r2
  801d38:	00bfffc4 	movi	r2,-1
  801d3c:	18807a26 	beq	r3,r2,801f28 <_malloc_r+0x674>
  801d40:	1d05c83a 	sub	r2,r3,r20
  801d44:	9885883a 	add	r2,r19,r2
  801d48:	10c00054 	ori	r3,r2,1
  801d4c:	b8800017 	ldw	r2,0(r23)
  801d50:	a021883a 	mov	r16,r20
  801d54:	a0c00115 	stw	r3,4(r20)
  801d58:	9885883a 	add	r2,r19,r2
  801d5c:	b8800015 	stw	r2,0(r23)
  801d60:	e5000215 	stw	r20,8(fp)
  801d64:	b7003626 	beq	r22,fp,801e40 <_malloc_r+0x58c>
  801d68:	018003c4 	movi	r6,15
  801d6c:	35404b36 	bltu	r6,r21,801e9c <_malloc_r+0x5e8>
  801d70:	00800044 	movi	r2,1
  801d74:	a0800115 	stw	r2,4(r20)
  801d78:	003fcd06 	br	801cb0 <_malloc_r+0x3fc>
  801d7c:	2808d27a 	srli	r4,r5,9
  801d80:	2000371e 	bne	r4,zero,801e60 <_malloc_r+0x5ac>
  801d84:	2808d0fa 	srli	r4,r5,3
  801d88:	200690fa 	slli	r3,r4,3
  801d8c:	1ad1883a 	add	r8,r3,r11
  801d90:	41800217 	ldw	r6,8(r8)
  801d94:	41805b26 	beq	r8,r6,801f04 <_malloc_r+0x650>
  801d98:	30800117 	ldw	r2,4(r6)
  801d9c:	00ffff04 	movi	r3,-4
  801da0:	10c4703a 	and	r2,r2,r3
  801da4:	2880022e 	bgeu	r5,r2,801db0 <_malloc_r+0x4fc>
  801da8:	31800217 	ldw	r6,8(r6)
  801dac:	41bffa1e 	bne	r8,r6,801d98 <_malloc_r+0x4e4>
  801db0:	32000317 	ldw	r8,12(r6)
  801db4:	39c00117 	ldw	r7,4(r7)
  801db8:	82000315 	stw	r8,12(r16)
  801dbc:	81800215 	stw	r6,8(r16)
  801dc0:	07002074 	movhi	fp,129
  801dc4:	e7241004 	addi	fp,fp,-28608
  801dc8:	34000315 	stw	r16,12(r6)
  801dcc:	44000215 	stw	r16,8(r8)
  801dd0:	003f3e06 	br	801acc <_malloc_r+0x218>
  801dd4:	63000044 	addi	r12,r12,1
  801dd8:	608000cc 	andi	r2,r12,3
  801ddc:	10005d26 	beq	r2,zero,801f54 <_malloc_r+0x6a0>
  801de0:	18c00204 	addi	r3,r3,8
  801de4:	003f5106 	br	801b2c <_malloc_r+0x278>
  801de8:	8089883a 	add	r4,r16,r2
  801dec:	003f6d06 	br	801ba4 <_malloc_r+0x2f0>
  801df0:	00805504 	movi	r2,340
  801df4:	10c02036 	bltu	r2,r3,801e78 <_malloc_r+0x5c4>
  801df8:	8804d3fa 	srli	r2,r17,15
  801dfc:	11801dc4 	addi	r6,r2,119
  801e00:	300490fa 	slli	r2,r6,3
  801e04:	003ed806 	br	801968 <_malloc_r+0xb4>
  801e08:	48c000c4 	addi	r3,r9,3
  801e0c:	003f3106 	br	801ad4 <_malloc_r+0x220>
  801e10:	05c02074 	movhi	r23,129
  801e14:	bdf17804 	addi	r23,r23,-14880
  801e18:	b8800017 	ldw	r2,0(r23)
  801e1c:	988d883a 	add	r6,r19,r2
  801e20:	b9800015 	stw	r6,0(r23)
  801e24:	293fb21e 	bne	r5,r4,801cf0 <_malloc_r+0x43c>
  801e28:	2083ffcc 	andi	r2,r4,4095
  801e2c:	103fb01e 	bne	r2,zero,801cf0 <_malloc_r+0x43c>
  801e30:	e4000217 	ldw	r16,8(fp)
  801e34:	9d45883a 	add	r2,r19,r21
  801e38:	10800054 	ori	r2,r2,1
  801e3c:	80800115 	stw	r2,4(r16)
  801e40:	b8c00017 	ldw	r3,0(r23)
  801e44:	d0a73317 	ldw	r2,-25396(gp)
  801e48:	10c0012e 	bgeu	r2,r3,801e50 <_malloc_r+0x59c>
  801e4c:	d0e73315 	stw	r3,-25396(gp)
  801e50:	d0a73417 	ldw	r2,-25392(gp)
  801e54:	10ff962e 	bgeu	r2,r3,801cb0 <_malloc_r+0x3fc>
  801e58:	d0e73415 	stw	r3,-25392(gp)
  801e5c:	003f9406 	br	801cb0 <_malloc_r+0x3fc>
  801e60:	00800104 	movi	r2,4
  801e64:	11001e36 	bltu	r2,r4,801ee0 <_malloc_r+0x62c>
  801e68:	2804d1ba 	srli	r2,r5,6
  801e6c:	11000e04 	addi	r4,r2,56
  801e70:	200690fa 	slli	r3,r4,3
  801e74:	003fc506 	br	801d8c <_malloc_r+0x4d8>
  801e78:	00815504 	movi	r2,1364
  801e7c:	10c01d2e 	bgeu	r2,r3,801ef4 <_malloc_r+0x640>
  801e80:	01801f84 	movi	r6,126
  801e84:	0080fc04 	movi	r2,1008
  801e88:	003eb706 	br	801968 <_malloc_r+0xb4>
  801e8c:	00800204 	movi	r2,8
  801e90:	10cbc83a 	sub	r5,r2,r3
  801e94:	2169883a 	add	r20,r4,r5
  801e98:	003f9e06 	br	801d14 <_malloc_r+0x460>
  801e9c:	00bffe04 	movi	r2,-8
  801ea0:	a93ffd04 	addi	r4,r21,-12
  801ea4:	2088703a 	and	r4,r4,r2
  801ea8:	b10b883a 	add	r5,r22,r4
  801eac:	00c00144 	movi	r3,5
  801eb0:	28c00215 	stw	r3,8(r5)
  801eb4:	28c00115 	stw	r3,4(r5)
  801eb8:	b0800117 	ldw	r2,4(r22)
  801ebc:	1080004c 	andi	r2,r2,1
  801ec0:	2084b03a 	or	r2,r4,r2
  801ec4:	b0800115 	stw	r2,4(r22)
  801ec8:	313fdd2e 	bgeu	r6,r4,801e40 <_malloc_r+0x58c>
  801ecc:	b1400204 	addi	r5,r22,8
  801ed0:	9009883a 	mov	r4,r18
  801ed4:	0802cd40 	call	802cd4 <_free_r>
  801ed8:	e4000217 	ldw	r16,8(fp)
  801edc:	003fd806 	br	801e40 <_malloc_r+0x58c>
  801ee0:	00800504 	movi	r2,20
  801ee4:	11001536 	bltu	r2,r4,801f3c <_malloc_r+0x688>
  801ee8:	210016c4 	addi	r4,r4,91
  801eec:	200690fa 	slli	r3,r4,3
  801ef0:	003fa606 	br	801d8c <_malloc_r+0x4d8>
  801ef4:	8804d4ba 	srli	r2,r17,18
  801ef8:	11801f04 	addi	r6,r2,124
  801efc:	300490fa 	slli	r2,r6,3
  801f00:	003e9906 	br	801968 <_malloc_r+0xb4>
  801f04:	2009d0ba 	srai	r4,r4,2
  801f08:	01402074 	movhi	r5,129
  801f0c:	29641004 	addi	r5,r5,-28608
  801f10:	00c00044 	movi	r3,1
  801f14:	28800117 	ldw	r2,4(r5)
  801f18:	1906983a 	sll	r3,r3,r4
  801f1c:	10c4b03a 	or	r2,r2,r3
  801f20:	28800115 	stw	r2,4(r5)
  801f24:	003fa306 	br	801db4 <_malloc_r+0x500>
  801f28:	0027883a 	mov	r19,zero
  801f2c:	00c00044 	movi	r3,1
  801f30:	003f8606 	br	801d4c <_malloc_r+0x498>
  801f34:	d1200315 	stw	r4,-32756(gp)
  801f38:	003f7306 	br	801d08 <_malloc_r+0x454>
  801f3c:	00801504 	movi	r2,84
  801f40:	11001936 	bltu	r2,r4,801fa8 <_malloc_r+0x6f4>
  801f44:	2804d33a 	srli	r2,r5,12
  801f48:	11001b84 	addi	r4,r2,110
  801f4c:	200690fa 	slli	r3,r4,3
  801f50:	003f8e06 	br	801d8c <_malloc_r+0x4d8>
  801f54:	480b883a 	mov	r5,r9
  801f58:	6807883a 	mov	r3,r13
  801f5c:	288000cc 	andi	r2,r5,3
  801f60:	18fffe04 	addi	r3,r3,-8
  801f64:	297fffc4 	addi	r5,r5,-1
  801f68:	10001526 	beq	r2,zero,801fc0 <_malloc_r+0x70c>
  801f6c:	18800217 	ldw	r2,8(r3)
  801f70:	10fffa26 	beq	r2,r3,801f5c <_malloc_r+0x6a8>
  801f74:	2109883a 	add	r4,r4,r4
  801f78:	393f1e36 	bltu	r7,r4,801bf4 <_malloc_r+0x340>
  801f7c:	203f1d26 	beq	r4,zero,801bf4 <_malloc_r+0x340>
  801f80:	21c4703a 	and	r2,r4,r7
  801f84:	10000226 	beq	r2,zero,801f90 <_malloc_r+0x6dc>
  801f88:	6013883a 	mov	r9,r12
  801f8c:	003ee106 	br	801b14 <_malloc_r+0x260>
  801f90:	2109883a 	add	r4,r4,r4
  801f94:	3904703a 	and	r2,r7,r4
  801f98:	63000104 	addi	r12,r12,4
  801f9c:	103ffc26 	beq	r2,zero,801f90 <_malloc_r+0x6dc>
  801fa0:	6013883a 	mov	r9,r12
  801fa4:	003edb06 	br	801b14 <_malloc_r+0x260>
  801fa8:	00805504 	movi	r2,340
  801fac:	11000836 	bltu	r2,r4,801fd0 <_malloc_r+0x71c>
  801fb0:	2804d3fa 	srli	r2,r5,15
  801fb4:	11001dc4 	addi	r4,r2,119
  801fb8:	200690fa 	slli	r3,r4,3
  801fbc:	003f7306 	br	801d8c <_malloc_r+0x4d8>
  801fc0:	0104303a 	nor	r2,zero,r4
  801fc4:	388e703a 	and	r7,r7,r2
  801fc8:	e1c00115 	stw	r7,4(fp)
  801fcc:	003fe906 	br	801f74 <_malloc_r+0x6c0>
  801fd0:	00815504 	movi	r2,1364
  801fd4:	1100032e 	bgeu	r2,r4,801fe4 <_malloc_r+0x730>
  801fd8:	01001f84 	movi	r4,126
  801fdc:	00c0fc04 	movi	r3,1008
  801fe0:	003f6a06 	br	801d8c <_malloc_r+0x4d8>
  801fe4:	2804d4ba 	srli	r2,r5,18
  801fe8:	11001f04 	addi	r4,r2,124
  801fec:	200690fa 	slli	r3,r4,3
  801ff0:	003f6606 	br	801d8c <_malloc_r+0x4d8>

00801ff4 <_open_r>:
  801ff4:	defffd04 	addi	sp,sp,-12
  801ff8:	dc000015 	stw	r16,0(sp)
  801ffc:	04002074 	movhi	r16,129
  802000:	84313e04 	addi	r16,r16,-15112
  802004:	dc400115 	stw	r17,4(sp)
  802008:	80000015 	stw	zero,0(r16)
  80200c:	2023883a 	mov	r17,r4
  802010:	2809883a 	mov	r4,r5
  802014:	300b883a 	mov	r5,r6
  802018:	380d883a 	mov	r6,r7
  80201c:	dfc00215 	stw	ra,8(sp)
  802020:	0804ba80 	call	804ba8 <open>
  802024:	1007883a 	mov	r3,r2
  802028:	00bfffc4 	movi	r2,-1
  80202c:	18800626 	beq	r3,r2,802048 <_open_r+0x54>
  802030:	1805883a 	mov	r2,r3
  802034:	dfc00217 	ldw	ra,8(sp)
  802038:	dc400117 	ldw	r17,4(sp)
  80203c:	dc000017 	ldw	r16,0(sp)
  802040:	dec00304 	addi	sp,sp,12
  802044:	f800283a 	ret
  802048:	80800017 	ldw	r2,0(r16)
  80204c:	103ff826 	beq	r2,zero,802030 <_open_r+0x3c>
  802050:	88800015 	stw	r2,0(r17)
  802054:	1805883a 	mov	r2,r3
  802058:	dfc00217 	ldw	ra,8(sp)
  80205c:	dc400117 	ldw	r17,4(sp)
  802060:	dc000017 	ldw	r16,0(sp)
  802064:	dec00304 	addi	sp,sp,12
  802068:	f800283a 	ret

0080206c <_puts_r>:
  80206c:	defff604 	addi	sp,sp,-40
  802070:	dc400715 	stw	r17,28(sp)
  802074:	2023883a 	mov	r17,r4
  802078:	2809883a 	mov	r4,r5
  80207c:	dfc00915 	stw	ra,36(sp)
  802080:	dcc00815 	stw	r19,32(sp)
  802084:	2827883a 	mov	r19,r5
  802088:	08024bc0 	call	8024bc <strlen>
  80208c:	89400217 	ldw	r5,8(r17)
  802090:	00c02074 	movhi	r3,129
  802094:	18e25d04 	addi	r3,r3,-30348
  802098:	01c00044 	movi	r7,1
  80209c:	12000044 	addi	r8,r2,1
  8020a0:	d8c00515 	stw	r3,20(sp)
  8020a4:	d9c00615 	stw	r7,24(sp)
  8020a8:	d8c00304 	addi	r3,sp,12
  8020ac:	01c00084 	movi	r7,2
  8020b0:	8809883a 	mov	r4,r17
  8020b4:	d80d883a 	mov	r6,sp
  8020b8:	d8c00015 	stw	r3,0(sp)
  8020bc:	dcc00315 	stw	r19,12(sp)
  8020c0:	da000215 	stw	r8,8(sp)
  8020c4:	d9c00115 	stw	r7,4(sp)
  8020c8:	d8800415 	stw	r2,16(sp)
  8020cc:	0802fe80 	call	802fe8 <__sfvwrite_r>
  8020d0:	00ffffc4 	movi	r3,-1
  8020d4:	10000626 	beq	r2,zero,8020f0 <_puts_r+0x84>
  8020d8:	1805883a 	mov	r2,r3
  8020dc:	dfc00917 	ldw	ra,36(sp)
  8020e0:	dcc00817 	ldw	r19,32(sp)
  8020e4:	dc400717 	ldw	r17,28(sp)
  8020e8:	dec00a04 	addi	sp,sp,40
  8020ec:	f800283a 	ret
  8020f0:	00c00284 	movi	r3,10
  8020f4:	1805883a 	mov	r2,r3
  8020f8:	dfc00917 	ldw	ra,36(sp)
  8020fc:	dcc00817 	ldw	r19,32(sp)
  802100:	dc400717 	ldw	r17,28(sp)
  802104:	dec00a04 	addi	sp,sp,40
  802108:	f800283a 	ret

0080210c <puts>:
  80210c:	00802074 	movhi	r2,129
  802110:	10aa0d04 	addi	r2,r2,-22476
  802114:	200b883a 	mov	r5,r4
  802118:	11000017 	ldw	r4,0(r2)
  80211c:	080206c1 	jmpi	80206c <_puts_r>

00802120 <__srefill_r>:
  802120:	defffd04 	addi	sp,sp,-12
  802124:	dc400115 	stw	r17,4(sp)
  802128:	dc000015 	stw	r16,0(sp)
  80212c:	dfc00215 	stw	ra,8(sp)
  802130:	2023883a 	mov	r17,r4
  802134:	2821883a 	mov	r16,r5
  802138:	20000226 	beq	r4,zero,802144 <__srefill_r+0x24>
  80213c:	20800e17 	ldw	r2,56(r4)
  802140:	10004126 	beq	r2,zero,802248 <__srefill_r+0x128>
  802144:	80c0030b 	ldhu	r3,12(r16)
  802148:	80000115 	stw	zero,4(r16)
  80214c:	1880080c 	andi	r2,r3,32
  802150:	1000361e 	bne	r2,zero,80222c <__srefill_r+0x10c>
  802154:	1880010c 	andi	r2,r3,4
  802158:	1000211e 	bne	r2,zero,8021e0 <__srefill_r+0xc0>
  80215c:	1880040c 	andi	r2,r3,16
  802160:	10005026 	beq	r2,zero,8022a4 <__srefill_r+0x184>
  802164:	1880020c 	andi	r2,r3,8
  802168:	1000541e 	bne	r2,zero,8022bc <__srefill_r+0x19c>
  80216c:	8080030b 	ldhu	r2,12(r16)
  802170:	10800114 	ori	r2,r2,4
  802174:	8080030d 	sth	r2,12(r16)
  802178:	80800417 	ldw	r2,16(r16)
  80217c:	10004526 	beq	r2,zero,802294 <__srefill_r+0x174>
  802180:	8080030b 	ldhu	r2,12(r16)
  802184:	108000cc 	andi	r2,r2,3
  802188:	1000361e 	bne	r2,zero,802264 <__srefill_r+0x144>
  80218c:	81800417 	ldw	r6,16(r16)
  802190:	80c00817 	ldw	r3,32(r16)
  802194:	81400717 	ldw	r5,28(r16)
  802198:	81c00517 	ldw	r7,20(r16)
  80219c:	8809883a 	mov	r4,r17
  8021a0:	81800015 	stw	r6,0(r16)
  8021a4:	183ee83a 	callr	r3
  8021a8:	80c0030b 	ldhu	r3,12(r16)
  8021ac:	1009883a 	mov	r4,r2
  8021b0:	80800115 	stw	r2,4(r16)
  8021b4:	00b7ffc4 	movi	r2,-8193
  8021b8:	1884703a 	and	r2,r3,r2
  8021bc:	8080030d 	sth	r2,12(r16)
  8021c0:	0100230e 	bge	zero,r4,802250 <__srefill_r+0x130>
  8021c4:	0009883a 	mov	r4,zero
  8021c8:	2005883a 	mov	r2,r4
  8021cc:	dfc00217 	ldw	ra,8(sp)
  8021d0:	dc400117 	ldw	r17,4(sp)
  8021d4:	dc000017 	ldw	r16,0(sp)
  8021d8:	dec00304 	addi	sp,sp,12
  8021dc:	f800283a 	ret
  8021e0:	81400c17 	ldw	r5,48(r16)
  8021e4:	283fe426 	beq	r5,zero,802178 <__srefill_r+0x58>
  8021e8:	80801004 	addi	r2,r16,64
  8021ec:	28800226 	beq	r5,r2,8021f8 <__srefill_r+0xd8>
  8021f0:	8809883a 	mov	r4,r17
  8021f4:	0802cd40 	call	802cd4 <_free_r>
  8021f8:	80800f17 	ldw	r2,60(r16)
  8021fc:	80000c15 	stw	zero,48(r16)
  802200:	80800115 	stw	r2,4(r16)
  802204:	103fdc26 	beq	r2,zero,802178 <__srefill_r+0x58>
  802208:	80800e17 	ldw	r2,56(r16)
  80220c:	0009883a 	mov	r4,zero
  802210:	80800015 	stw	r2,0(r16)
  802214:	2005883a 	mov	r2,r4
  802218:	dfc00217 	ldw	ra,8(sp)
  80221c:	dc400117 	ldw	r17,4(sp)
  802220:	dc000017 	ldw	r16,0(sp)
  802224:	dec00304 	addi	sp,sp,12
  802228:	f800283a 	ret
  80222c:	013fffc4 	movi	r4,-1
  802230:	2005883a 	mov	r2,r4
  802234:	dfc00217 	ldw	ra,8(sp)
  802238:	dc400117 	ldw	r17,4(sp)
  80223c:	dc000017 	ldw	r16,0(sp)
  802240:	dec00304 	addi	sp,sp,12
  802244:	f800283a 	ret
  802248:	08028b00 	call	8028b0 <__sinit>
  80224c:	003fbd06 	br	802144 <__srefill_r+0x24>
  802250:	20000b1e 	bne	r4,zero,802280 <__srefill_r+0x160>
  802254:	10800814 	ori	r2,r2,32
  802258:	013fffc4 	movi	r4,-1
  80225c:	8080030d 	sth	r2,12(r16)
  802260:	003fd906 	br	8021c8 <__srefill_r+0xa8>
  802264:	00802074 	movhi	r2,129
  802268:	10aa0e04 	addi	r2,r2,-22472
  80226c:	11000017 	ldw	r4,0(r2)
  802270:	01402034 	movhi	r5,128
  802274:	2948b904 	addi	r5,r5,8932
  802278:	080354c0 	call	80354c <_fwalk>
  80227c:	003fc306 	br	80218c <__srefill_r+0x6c>
  802280:	10801014 	ori	r2,r2,64
  802284:	013fffc4 	movi	r4,-1
  802288:	8080030d 	sth	r2,12(r16)
  80228c:	80000115 	stw	zero,4(r16)
  802290:	003fcd06 	br	8021c8 <__srefill_r+0xa8>
  802294:	8809883a 	mov	r4,r17
  802298:	800b883a 	mov	r5,r16
  80229c:	08017200 	call	801720 <__smakebuf_r>
  8022a0:	003fb706 	br	802180 <__srefill_r+0x60>
  8022a4:	18c01014 	ori	r3,r3,64
  8022a8:	00800244 	movi	r2,9
  8022ac:	013fffc4 	movi	r4,-1
  8022b0:	88800015 	stw	r2,0(r17)
  8022b4:	80c0030d 	sth	r3,12(r16)
  8022b8:	003fc306 	br	8021c8 <__srefill_r+0xa8>
  8022bc:	8809883a 	mov	r4,r17
  8022c0:	800b883a 	mov	r5,r16
  8022c4:	08026180 	call	802618 <_fflush_r>
  8022c8:	103fd81e 	bne	r2,zero,80222c <__srefill_r+0x10c>
  8022cc:	8080030b 	ldhu	r2,12(r16)
  8022d0:	80000215 	stw	zero,8(r16)
  8022d4:	80000615 	stw	zero,24(r16)
  8022d8:	10bffdcc 	andi	r2,r2,65527
  8022dc:	8080030d 	sth	r2,12(r16)
  8022e0:	003fa206 	br	80216c <__srefill_r+0x4c>

008022e4 <lflush>:
  8022e4:	20c0030b 	ldhu	r3,12(r4)
  8022e8:	01400244 	movi	r5,9
  8022ec:	0005883a 	mov	r2,zero
  8022f0:	18c0024c 	andi	r3,r3,9
  8022f4:	19400126 	beq	r3,r5,8022fc <lflush+0x18>
  8022f8:	f800283a 	ret
  8022fc:	08028141 	jmpi	802814 <fflush>

00802300 <_sbrk_r>:
  802300:	defffd04 	addi	sp,sp,-12
  802304:	dc000015 	stw	r16,0(sp)
  802308:	04002074 	movhi	r16,129
  80230c:	84313e04 	addi	r16,r16,-15112
  802310:	dc400115 	stw	r17,4(sp)
  802314:	80000015 	stw	zero,0(r16)
  802318:	2023883a 	mov	r17,r4
  80231c:	2809883a 	mov	r4,r5
  802320:	dfc00215 	stw	ra,8(sp)
  802324:	0804f700 	call	804f70 <sbrk>
  802328:	1007883a 	mov	r3,r2
  80232c:	00bfffc4 	movi	r2,-1
  802330:	18800626 	beq	r3,r2,80234c <_sbrk_r+0x4c>
  802334:	1805883a 	mov	r2,r3
  802338:	dfc00217 	ldw	ra,8(sp)
  80233c:	dc400117 	ldw	r17,4(sp)
  802340:	dc000017 	ldw	r16,0(sp)
  802344:	dec00304 	addi	sp,sp,12
  802348:	f800283a 	ret
  80234c:	80800017 	ldw	r2,0(r16)
  802350:	103ff826 	beq	r2,zero,802334 <_sbrk_r+0x34>
  802354:	88800015 	stw	r2,0(r17)
  802358:	1805883a 	mov	r2,r3
  80235c:	dfc00217 	ldw	ra,8(sp)
  802360:	dc400117 	ldw	r17,4(sp)
  802364:	dc000017 	ldw	r16,0(sp)
  802368:	dec00304 	addi	sp,sp,12
  80236c:	f800283a 	ret

00802370 <__sclose>:
  802370:	2940038f 	ldh	r5,14(r5)
  802374:	08025a81 	jmpi	8025a8 <_close_r>

00802378 <__sseek>:
  802378:	defffe04 	addi	sp,sp,-8
  80237c:	dc000015 	stw	r16,0(sp)
  802380:	2821883a 	mov	r16,r5
  802384:	2940038f 	ldh	r5,14(r5)
  802388:	dfc00115 	stw	ra,4(sp)
  80238c:	08036740 	call	803674 <_lseek_r>
  802390:	1007883a 	mov	r3,r2
  802394:	00bfffc4 	movi	r2,-1
  802398:	18800926 	beq	r3,r2,8023c0 <__sseek+0x48>
  80239c:	8080030b 	ldhu	r2,12(r16)
  8023a0:	80c01415 	stw	r3,80(r16)
  8023a4:	10840014 	ori	r2,r2,4096
  8023a8:	8080030d 	sth	r2,12(r16)
  8023ac:	1805883a 	mov	r2,r3
  8023b0:	dfc00117 	ldw	ra,4(sp)
  8023b4:	dc000017 	ldw	r16,0(sp)
  8023b8:	dec00204 	addi	sp,sp,8
  8023bc:	f800283a 	ret
  8023c0:	8080030b 	ldhu	r2,12(r16)
  8023c4:	10bbffcc 	andi	r2,r2,61439
  8023c8:	8080030d 	sth	r2,12(r16)
  8023cc:	1805883a 	mov	r2,r3
  8023d0:	dfc00117 	ldw	ra,4(sp)
  8023d4:	dc000017 	ldw	r16,0(sp)
  8023d8:	dec00204 	addi	sp,sp,8
  8023dc:	f800283a 	ret

008023e0 <__swrite>:
  8023e0:	2880030b 	ldhu	r2,12(r5)
  8023e4:	defffb04 	addi	sp,sp,-20
  8023e8:	dcc00315 	stw	r19,12(sp)
  8023ec:	1080400c 	andi	r2,r2,256
  8023f0:	dc800215 	stw	r18,8(sp)
  8023f4:	dc400115 	stw	r17,4(sp)
  8023f8:	dc000015 	stw	r16,0(sp)
  8023fc:	3027883a 	mov	r19,r6
  802400:	3825883a 	mov	r18,r7
  802404:	dfc00415 	stw	ra,16(sp)
  802408:	2821883a 	mov	r16,r5
  80240c:	000d883a 	mov	r6,zero
  802410:	01c00084 	movi	r7,2
  802414:	2023883a 	mov	r17,r4
  802418:	10000226 	beq	r2,zero,802424 <__swrite+0x44>
  80241c:	2940038f 	ldh	r5,14(r5)
  802420:	08036740 	call	803674 <_lseek_r>
  802424:	8080030b 	ldhu	r2,12(r16)
  802428:	8140038f 	ldh	r5,14(r16)
  80242c:	8809883a 	mov	r4,r17
  802430:	10bbffcc 	andi	r2,r2,61439
  802434:	980d883a 	mov	r6,r19
  802438:	900f883a 	mov	r7,r18
  80243c:	8080030d 	sth	r2,12(r16)
  802440:	dfc00417 	ldw	ra,16(sp)
  802444:	dcc00317 	ldw	r19,12(sp)
  802448:	dc800217 	ldw	r18,8(sp)
  80244c:	dc400117 	ldw	r17,4(sp)
  802450:	dc000017 	ldw	r16,0(sp)
  802454:	dec00504 	addi	sp,sp,20
  802458:	08025301 	jmpi	802530 <_write_r>

0080245c <__sread>:
  80245c:	defffe04 	addi	sp,sp,-8
  802460:	dc000015 	stw	r16,0(sp)
  802464:	2821883a 	mov	r16,r5
  802468:	2940038f 	ldh	r5,14(r5)
  80246c:	dfc00115 	stw	ra,4(sp)
  802470:	08039e80 	call	8039e8 <_read_r>
  802474:	1007883a 	mov	r3,r2
  802478:	10000816 	blt	r2,zero,80249c <__sread+0x40>
  80247c:	80801417 	ldw	r2,80(r16)
  802480:	10c5883a 	add	r2,r2,r3
  802484:	80801415 	stw	r2,80(r16)
  802488:	1805883a 	mov	r2,r3
  80248c:	dfc00117 	ldw	ra,4(sp)
  802490:	dc000017 	ldw	r16,0(sp)
  802494:	dec00204 	addi	sp,sp,8
  802498:	f800283a 	ret
  80249c:	8080030b 	ldhu	r2,12(r16)
  8024a0:	10bbffcc 	andi	r2,r2,61439
  8024a4:	8080030d 	sth	r2,12(r16)
  8024a8:	1805883a 	mov	r2,r3
  8024ac:	dfc00117 	ldw	ra,4(sp)
  8024b0:	dc000017 	ldw	r16,0(sp)
  8024b4:	dec00204 	addi	sp,sp,8
  8024b8:	f800283a 	ret

008024bc <strlen>:
  8024bc:	208000cc 	andi	r2,r4,3
  8024c0:	2011883a 	mov	r8,r4
  8024c4:	1000161e 	bne	r2,zero,802520 <strlen+0x64>
  8024c8:	20c00017 	ldw	r3,0(r4)
  8024cc:	017fbff4 	movhi	r5,65279
  8024d0:	297fbfc4 	addi	r5,r5,-257
  8024d4:	01e02074 	movhi	r7,32897
  8024d8:	39e02004 	addi	r7,r7,-32640
  8024dc:	1945883a 	add	r2,r3,r5
  8024e0:	11c4703a 	and	r2,r2,r7
  8024e4:	00c6303a 	nor	r3,zero,r3
  8024e8:	1886703a 	and	r3,r3,r2
  8024ec:	18000c1e 	bne	r3,zero,802520 <strlen+0x64>
  8024f0:	280d883a 	mov	r6,r5
  8024f4:	380b883a 	mov	r5,r7
  8024f8:	21000104 	addi	r4,r4,4
  8024fc:	20800017 	ldw	r2,0(r4)
  802500:	1187883a 	add	r3,r2,r6
  802504:	1946703a 	and	r3,r3,r5
  802508:	0084303a 	nor	r2,zero,r2
  80250c:	10c4703a 	and	r2,r2,r3
  802510:	103ff926 	beq	r2,zero,8024f8 <strlen+0x3c>
  802514:	20800007 	ldb	r2,0(r4)
  802518:	10000326 	beq	r2,zero,802528 <strlen+0x6c>
  80251c:	21000044 	addi	r4,r4,1
  802520:	20800007 	ldb	r2,0(r4)
  802524:	103ffd1e 	bne	r2,zero,80251c <strlen+0x60>
  802528:	2205c83a 	sub	r2,r4,r8
  80252c:	f800283a 	ret

00802530 <_write_r>:
  802530:	defffd04 	addi	sp,sp,-12
  802534:	dc000015 	stw	r16,0(sp)
  802538:	04002074 	movhi	r16,129
  80253c:	84313e04 	addi	r16,r16,-15112
  802540:	dc400115 	stw	r17,4(sp)
  802544:	80000015 	stw	zero,0(r16)
  802548:	2023883a 	mov	r17,r4
  80254c:	2809883a 	mov	r4,r5
  802550:	300b883a 	mov	r5,r6
  802554:	380d883a 	mov	r6,r7
  802558:	dfc00215 	stw	ra,8(sp)
  80255c:	08051d00 	call	8051d0 <write>
  802560:	1007883a 	mov	r3,r2
  802564:	00bfffc4 	movi	r2,-1
  802568:	18800626 	beq	r3,r2,802584 <_write_r+0x54>
  80256c:	1805883a 	mov	r2,r3
  802570:	dfc00217 	ldw	ra,8(sp)
  802574:	dc400117 	ldw	r17,4(sp)
  802578:	dc000017 	ldw	r16,0(sp)
  80257c:	dec00304 	addi	sp,sp,12
  802580:	f800283a 	ret
  802584:	80800017 	ldw	r2,0(r16)
  802588:	103ff826 	beq	r2,zero,80256c <_write_r+0x3c>
  80258c:	88800015 	stw	r2,0(r17)
  802590:	1805883a 	mov	r2,r3
  802594:	dfc00217 	ldw	ra,8(sp)
  802598:	dc400117 	ldw	r17,4(sp)
  80259c:	dc000017 	ldw	r16,0(sp)
  8025a0:	dec00304 	addi	sp,sp,12
  8025a4:	f800283a 	ret

008025a8 <_close_r>:
  8025a8:	defffd04 	addi	sp,sp,-12
  8025ac:	dc000015 	stw	r16,0(sp)
  8025b0:	04002074 	movhi	r16,129
  8025b4:	84313e04 	addi	r16,r16,-15112
  8025b8:	dc400115 	stw	r17,4(sp)
  8025bc:	80000015 	stw	zero,0(r16)
  8025c0:	2023883a 	mov	r17,r4
  8025c4:	2809883a 	mov	r4,r5
  8025c8:	dfc00215 	stw	ra,8(sp)
  8025cc:	08044080 	call	804408 <close>
  8025d0:	1007883a 	mov	r3,r2
  8025d4:	00bfffc4 	movi	r2,-1
  8025d8:	18800626 	beq	r3,r2,8025f4 <_close_r+0x4c>
  8025dc:	1805883a 	mov	r2,r3
  8025e0:	dfc00217 	ldw	ra,8(sp)
  8025e4:	dc400117 	ldw	r17,4(sp)
  8025e8:	dc000017 	ldw	r16,0(sp)
  8025ec:	dec00304 	addi	sp,sp,12
  8025f0:	f800283a 	ret
  8025f4:	80800017 	ldw	r2,0(r16)
  8025f8:	103ff826 	beq	r2,zero,8025dc <_close_r+0x34>
  8025fc:	88800015 	stw	r2,0(r17)
  802600:	1805883a 	mov	r2,r3
  802604:	dfc00217 	ldw	ra,8(sp)
  802608:	dc400117 	ldw	r17,4(sp)
  80260c:	dc000017 	ldw	r16,0(sp)
  802610:	dec00304 	addi	sp,sp,12
  802614:	f800283a 	ret

00802618 <_fflush_r>:
  802618:	defffb04 	addi	sp,sp,-20
  80261c:	dcc00315 	stw	r19,12(sp)
  802620:	dc800215 	stw	r18,8(sp)
  802624:	dfc00415 	stw	ra,16(sp)
  802628:	dc400115 	stw	r17,4(sp)
  80262c:	dc000015 	stw	r16,0(sp)
  802630:	2027883a 	mov	r19,r4
  802634:	2825883a 	mov	r18,r5
  802638:	20000226 	beq	r4,zero,802644 <_fflush_r+0x2c>
  80263c:	20800e17 	ldw	r2,56(r4)
  802640:	10005626 	beq	r2,zero,80279c <_fflush_r+0x184>
  802644:	9100030b 	ldhu	r4,12(r18)
  802648:	20ffffcc 	andi	r3,r4,65535
  80264c:	18e0001c 	xori	r3,r3,32768
  802650:	18e00004 	addi	r3,r3,-32768
  802654:	1880020c 	andi	r2,r3,8
  802658:	1000261e 	bne	r2,zero,8026f4 <_fflush_r+0xdc>
  80265c:	90c00117 	ldw	r3,4(r18)
  802660:	20820014 	ori	r2,r4,2048
  802664:	9080030d 	sth	r2,12(r18)
  802668:	1009883a 	mov	r4,r2
  80266c:	00c0400e 	bge	zero,r3,802770 <_fflush_r+0x158>
  802670:	92000a17 	ldw	r8,40(r18)
  802674:	40004026 	beq	r8,zero,802778 <_fflush_r+0x160>
  802678:	2084000c 	andi	r2,r4,4096
  80267c:	10005326 	beq	r2,zero,8027cc <_fflush_r+0x1b4>
  802680:	94001417 	ldw	r16,80(r18)
  802684:	9080030b 	ldhu	r2,12(r18)
  802688:	1080010c 	andi	r2,r2,4
  80268c:	1000481e 	bne	r2,zero,8027b0 <_fflush_r+0x198>
  802690:	91400717 	ldw	r5,28(r18)
  802694:	9809883a 	mov	r4,r19
  802698:	800d883a 	mov	r6,r16
  80269c:	000f883a 	mov	r7,zero
  8026a0:	403ee83a 	callr	r8
  8026a4:	8080261e 	bne	r16,r2,802740 <_fflush_r+0x128>
  8026a8:	9080030b 	ldhu	r2,12(r18)
  8026ac:	91000417 	ldw	r4,16(r18)
  8026b0:	90000115 	stw	zero,4(r18)
  8026b4:	10bdffcc 	andi	r2,r2,63487
  8026b8:	10ffffcc 	andi	r3,r2,65535
  8026bc:	18c4000c 	andi	r3,r3,4096
  8026c0:	9080030d 	sth	r2,12(r18)
  8026c4:	91000015 	stw	r4,0(r18)
  8026c8:	18002b26 	beq	r3,zero,802778 <_fflush_r+0x160>
  8026cc:	0007883a 	mov	r3,zero
  8026d0:	1805883a 	mov	r2,r3
  8026d4:	94001415 	stw	r16,80(r18)
  8026d8:	dfc00417 	ldw	ra,16(sp)
  8026dc:	dcc00317 	ldw	r19,12(sp)
  8026e0:	dc800217 	ldw	r18,8(sp)
  8026e4:	dc400117 	ldw	r17,4(sp)
  8026e8:	dc000017 	ldw	r16,0(sp)
  8026ec:	dec00504 	addi	sp,sp,20
  8026f0:	f800283a 	ret
  8026f4:	94400417 	ldw	r17,16(r18)
  8026f8:	88001f26 	beq	r17,zero,802778 <_fflush_r+0x160>
  8026fc:	90800017 	ldw	r2,0(r18)
  802700:	18c000cc 	andi	r3,r3,3
  802704:	94400015 	stw	r17,0(r18)
  802708:	1461c83a 	sub	r16,r2,r17
  80270c:	18002526 	beq	r3,zero,8027a4 <_fflush_r+0x18c>
  802710:	0005883a 	mov	r2,zero
  802714:	90800215 	stw	r2,8(r18)
  802718:	0400170e 	bge	zero,r16,802778 <_fflush_r+0x160>
  80271c:	90c00917 	ldw	r3,36(r18)
  802720:	91400717 	ldw	r5,28(r18)
  802724:	880d883a 	mov	r6,r17
  802728:	800f883a 	mov	r7,r16
  80272c:	9809883a 	mov	r4,r19
  802730:	183ee83a 	callr	r3
  802734:	88a3883a 	add	r17,r17,r2
  802738:	80a1c83a 	sub	r16,r16,r2
  80273c:	00bff616 	blt	zero,r2,802718 <_fflush_r+0x100>
  802740:	9080030b 	ldhu	r2,12(r18)
  802744:	00ffffc4 	movi	r3,-1
  802748:	10801014 	ori	r2,r2,64
  80274c:	9080030d 	sth	r2,12(r18)
  802750:	1805883a 	mov	r2,r3
  802754:	dfc00417 	ldw	ra,16(sp)
  802758:	dcc00317 	ldw	r19,12(sp)
  80275c:	dc800217 	ldw	r18,8(sp)
  802760:	dc400117 	ldw	r17,4(sp)
  802764:	dc000017 	ldw	r16,0(sp)
  802768:	dec00504 	addi	sp,sp,20
  80276c:	f800283a 	ret
  802770:	90800f17 	ldw	r2,60(r18)
  802774:	00bfbe16 	blt	zero,r2,802670 <_fflush_r+0x58>
  802778:	0007883a 	mov	r3,zero
  80277c:	1805883a 	mov	r2,r3
  802780:	dfc00417 	ldw	ra,16(sp)
  802784:	dcc00317 	ldw	r19,12(sp)
  802788:	dc800217 	ldw	r18,8(sp)
  80278c:	dc400117 	ldw	r17,4(sp)
  802790:	dc000017 	ldw	r16,0(sp)
  802794:	dec00504 	addi	sp,sp,20
  802798:	f800283a 	ret
  80279c:	08028b00 	call	8028b0 <__sinit>
  8027a0:	003fa806 	br	802644 <_fflush_r+0x2c>
  8027a4:	90800517 	ldw	r2,20(r18)
  8027a8:	90800215 	stw	r2,8(r18)
  8027ac:	003fda06 	br	802718 <_fflush_r+0x100>
  8027b0:	90800117 	ldw	r2,4(r18)
  8027b4:	90c00c17 	ldw	r3,48(r18)
  8027b8:	80a1c83a 	sub	r16,r16,r2
  8027bc:	183fb426 	beq	r3,zero,802690 <_fflush_r+0x78>
  8027c0:	90800f17 	ldw	r2,60(r18)
  8027c4:	80a1c83a 	sub	r16,r16,r2
  8027c8:	003fb106 	br	802690 <_fflush_r+0x78>
  8027cc:	91400717 	ldw	r5,28(r18)
  8027d0:	9809883a 	mov	r4,r19
  8027d4:	000d883a 	mov	r6,zero
  8027d8:	01c00044 	movi	r7,1
  8027dc:	403ee83a 	callr	r8
  8027e0:	1021883a 	mov	r16,r2
  8027e4:	00bfffc4 	movi	r2,-1
  8027e8:	80800226 	beq	r16,r2,8027f4 <_fflush_r+0x1dc>
  8027ec:	92000a17 	ldw	r8,40(r18)
  8027f0:	003fa406 	br	802684 <_fflush_r+0x6c>
  8027f4:	98c00017 	ldw	r3,0(r19)
  8027f8:	00800744 	movi	r2,29
  8027fc:	18bfde26 	beq	r3,r2,802778 <_fflush_r+0x160>
  802800:	9080030b 	ldhu	r2,12(r18)
  802804:	8007883a 	mov	r3,r16
  802808:	10801014 	ori	r2,r2,64
  80280c:	9080030d 	sth	r2,12(r18)
  802810:	003fcf06 	br	802750 <_fflush_r+0x138>

00802814 <fflush>:
  802814:	01402034 	movhi	r5,128
  802818:	29498604 	addi	r5,r5,9752
  80281c:	2007883a 	mov	r3,r4
  802820:	20000526 	beq	r4,zero,802838 <fflush+0x24>
  802824:	00802074 	movhi	r2,129
  802828:	10aa0d04 	addi	r2,r2,-22476
  80282c:	11000017 	ldw	r4,0(r2)
  802830:	180b883a 	mov	r5,r3
  802834:	08026181 	jmpi	802618 <_fflush_r>
  802838:	00802074 	movhi	r2,129
  80283c:	10aa0e04 	addi	r2,r2,-22472
  802840:	11000017 	ldw	r4,0(r2)
  802844:	08034841 	jmpi	803484 <_fwalk_reent>

00802848 <std>:
  802848:	00802034 	movhi	r2,128
  80284c:	1088dc04 	addi	r2,r2,9072
  802850:	20800b15 	stw	r2,44(r4)
  802854:	00802034 	movhi	r2,128
  802858:	10891704 	addi	r2,r2,9308
  80285c:	20800815 	stw	r2,32(r4)
  802860:	00c02034 	movhi	r3,128
  802864:	18c8f804 	addi	r3,r3,9184
  802868:	00802034 	movhi	r2,128
  80286c:	1088de04 	addi	r2,r2,9080
  802870:	2140030d 	sth	r5,12(r4)
  802874:	2180038d 	sth	r6,14(r4)
  802878:	20c00915 	stw	r3,36(r4)
  80287c:	20800a15 	stw	r2,40(r4)
  802880:	20000015 	stw	zero,0(r4)
  802884:	20000115 	stw	zero,4(r4)
  802888:	20000215 	stw	zero,8(r4)
  80288c:	20000415 	stw	zero,16(r4)
  802890:	20000515 	stw	zero,20(r4)
  802894:	20000615 	stw	zero,24(r4)
  802898:	21000715 	stw	r4,28(r4)
  80289c:	f800283a 	ret

008028a0 <__sfp_lock_acquire>:
  8028a0:	f800283a 	ret

008028a4 <__sfp_lock_release>:
  8028a4:	f800283a 	ret

008028a8 <__sinit_lock_acquire>:
  8028a8:	f800283a 	ret

008028ac <__sinit_lock_release>:
  8028ac:	f800283a 	ret

008028b0 <__sinit>:
  8028b0:	20800e17 	ldw	r2,56(r4)
  8028b4:	defffd04 	addi	sp,sp,-12
  8028b8:	dc400115 	stw	r17,4(sp)
  8028bc:	dc000015 	stw	r16,0(sp)
  8028c0:	dfc00215 	stw	ra,8(sp)
  8028c4:	04400044 	movi	r17,1
  8028c8:	01400104 	movi	r5,4
  8028cc:	000d883a 	mov	r6,zero
  8028d0:	2021883a 	mov	r16,r4
  8028d4:	2200bb04 	addi	r8,r4,748
  8028d8:	200f883a 	mov	r7,r4
  8028dc:	10000526 	beq	r2,zero,8028f4 <__sinit+0x44>
  8028e0:	dfc00217 	ldw	ra,8(sp)
  8028e4:	dc400117 	ldw	r17,4(sp)
  8028e8:	dc000017 	ldw	r16,0(sp)
  8028ec:	dec00304 	addi	sp,sp,12
  8028f0:	f800283a 	ret
  8028f4:	21000117 	ldw	r4,4(r4)
  8028f8:	00802034 	movhi	r2,128
  8028fc:	108a6504 	addi	r2,r2,10644
  802900:	00c000c4 	movi	r3,3
  802904:	80800f15 	stw	r2,60(r16)
  802908:	80c0b915 	stw	r3,740(r16)
  80290c:	8200ba15 	stw	r8,744(r16)
  802910:	84400e15 	stw	r17,56(r16)
  802914:	8000b815 	stw	zero,736(r16)
  802918:	08028480 	call	802848 <std>
  80291c:	81000217 	ldw	r4,8(r16)
  802920:	880d883a 	mov	r6,r17
  802924:	800f883a 	mov	r7,r16
  802928:	01400284 	movi	r5,10
  80292c:	08028480 	call	802848 <std>
  802930:	81000317 	ldw	r4,12(r16)
  802934:	800f883a 	mov	r7,r16
  802938:	01400484 	movi	r5,18
  80293c:	01800084 	movi	r6,2
  802940:	dfc00217 	ldw	ra,8(sp)
  802944:	dc400117 	ldw	r17,4(sp)
  802948:	dc000017 	ldw	r16,0(sp)
  80294c:	dec00304 	addi	sp,sp,12
  802950:	08028481 	jmpi	802848 <std>

00802954 <__fp_lock>:
  802954:	0005883a 	mov	r2,zero
  802958:	f800283a 	ret

0080295c <__fp_unlock>:
  80295c:	0005883a 	mov	r2,zero
  802960:	f800283a 	ret

00802964 <__fp_unlock_all>:
  802964:	00802074 	movhi	r2,129
  802968:	10aa0d04 	addi	r2,r2,-22476
  80296c:	11000017 	ldw	r4,0(r2)
  802970:	01402034 	movhi	r5,128
  802974:	294a5704 	addi	r5,r5,10588
  802978:	080354c1 	jmpi	80354c <_fwalk>

0080297c <__fp_lock_all>:
  80297c:	00802074 	movhi	r2,129
  802980:	10aa0d04 	addi	r2,r2,-22476
  802984:	11000017 	ldw	r4,0(r2)
  802988:	01402034 	movhi	r5,128
  80298c:	294a5504 	addi	r5,r5,10580
  802990:	080354c1 	jmpi	80354c <_fwalk>

00802994 <_cleanup_r>:
  802994:	01402034 	movhi	r5,128
  802998:	2950a804 	addi	r5,r5,17056
  80299c:	080354c1 	jmpi	80354c <_fwalk>

008029a0 <_cleanup>:
  8029a0:	00802074 	movhi	r2,129
  8029a4:	10aa0e04 	addi	r2,r2,-22472
  8029a8:	11000017 	ldw	r4,0(r2)
  8029ac:	08029941 	jmpi	802994 <_cleanup_r>

008029b0 <__sfmoreglue>:
  8029b0:	defffc04 	addi	sp,sp,-16
  8029b4:	dc400115 	stw	r17,4(sp)
  8029b8:	2c401724 	muli	r17,r5,92
  8029bc:	dc800215 	stw	r18,8(sp)
  8029c0:	2825883a 	mov	r18,r5
  8029c4:	89400304 	addi	r5,r17,12
  8029c8:	dc000015 	stw	r16,0(sp)
  8029cc:	dfc00315 	stw	ra,12(sp)
  8029d0:	08018b40 	call	8018b4 <_malloc_r>
  8029d4:	0021883a 	mov	r16,zero
  8029d8:	880d883a 	mov	r6,r17
  8029dc:	000b883a 	mov	r5,zero
  8029e0:	10000626 	beq	r2,zero,8029fc <__sfmoreglue+0x4c>
  8029e4:	11000304 	addi	r4,r2,12
  8029e8:	14800115 	stw	r18,4(r2)
  8029ec:	10000015 	stw	zero,0(r2)
  8029f0:	11000215 	stw	r4,8(r2)
  8029f4:	1021883a 	mov	r16,r2
  8029f8:	08039500 	call	803950 <memset>
  8029fc:	8005883a 	mov	r2,r16
  802a00:	dfc00317 	ldw	ra,12(sp)
  802a04:	dc800217 	ldw	r18,8(sp)
  802a08:	dc400117 	ldw	r17,4(sp)
  802a0c:	dc000017 	ldw	r16,0(sp)
  802a10:	dec00404 	addi	sp,sp,16
  802a14:	f800283a 	ret

00802a18 <__sfp>:
  802a18:	defffd04 	addi	sp,sp,-12
  802a1c:	00802074 	movhi	r2,129
  802a20:	10aa0e04 	addi	r2,r2,-22472
  802a24:	dc000015 	stw	r16,0(sp)
  802a28:	14000017 	ldw	r16,0(r2)
  802a2c:	dc400115 	stw	r17,4(sp)
  802a30:	dfc00215 	stw	ra,8(sp)
  802a34:	80800e17 	ldw	r2,56(r16)
  802a38:	2023883a 	mov	r17,r4
  802a3c:	10002626 	beq	r2,zero,802ad8 <__sfp+0xc0>
  802a40:	8400b804 	addi	r16,r16,736
  802a44:	80800117 	ldw	r2,4(r16)
  802a48:	81000217 	ldw	r4,8(r16)
  802a4c:	10ffffc4 	addi	r3,r2,-1
  802a50:	18000916 	blt	r3,zero,802a78 <__sfp+0x60>
  802a54:	2080030f 	ldh	r2,12(r4)
  802a58:	10000b26 	beq	r2,zero,802a88 <__sfp+0x70>
  802a5c:	017fffc4 	movi	r5,-1
  802a60:	00000206 	br	802a6c <__sfp+0x54>
  802a64:	2080030f 	ldh	r2,12(r4)
  802a68:	10000726 	beq	r2,zero,802a88 <__sfp+0x70>
  802a6c:	18ffffc4 	addi	r3,r3,-1
  802a70:	21001704 	addi	r4,r4,92
  802a74:	197ffb1e 	bne	r3,r5,802a64 <__sfp+0x4c>
  802a78:	80800017 	ldw	r2,0(r16)
  802a7c:	10001926 	beq	r2,zero,802ae4 <__sfp+0xcc>
  802a80:	1021883a 	mov	r16,r2
  802a84:	003fef06 	br	802a44 <__sfp+0x2c>
  802a88:	00bfffc4 	movi	r2,-1
  802a8c:	00c00044 	movi	r3,1
  802a90:	2080038d 	sth	r2,14(r4)
  802a94:	20c0030d 	sth	r3,12(r4)
  802a98:	20000015 	stw	zero,0(r4)
  802a9c:	20000215 	stw	zero,8(r4)
  802aa0:	20000115 	stw	zero,4(r4)
  802aa4:	20000415 	stw	zero,16(r4)
  802aa8:	20000515 	stw	zero,20(r4)
  802aac:	20000615 	stw	zero,24(r4)
  802ab0:	20000c15 	stw	zero,48(r4)
  802ab4:	20000d15 	stw	zero,52(r4)
  802ab8:	20001115 	stw	zero,68(r4)
  802abc:	20001215 	stw	zero,72(r4)
  802ac0:	2005883a 	mov	r2,r4
  802ac4:	dfc00217 	ldw	ra,8(sp)
  802ac8:	dc400117 	ldw	r17,4(sp)
  802acc:	dc000017 	ldw	r16,0(sp)
  802ad0:	dec00304 	addi	sp,sp,12
  802ad4:	f800283a 	ret
  802ad8:	8009883a 	mov	r4,r16
  802adc:	08028b00 	call	8028b0 <__sinit>
  802ae0:	003fd706 	br	802a40 <__sfp+0x28>
  802ae4:	8809883a 	mov	r4,r17
  802ae8:	01400104 	movi	r5,4
  802aec:	08029b00 	call	8029b0 <__sfmoreglue>
  802af0:	80800015 	stw	r2,0(r16)
  802af4:	103fe21e 	bne	r2,zero,802a80 <__sfp+0x68>
  802af8:	00800304 	movi	r2,12
  802afc:	0009883a 	mov	r4,zero
  802b00:	88800015 	stw	r2,0(r17)
  802b04:	003fee06 	br	802ac0 <__sfp+0xa8>

00802b08 <__sflags>:
  802b08:	28c00007 	ldb	r3,0(r5)
  802b0c:	00801c84 	movi	r2,114
  802b10:	18800926 	beq	r3,r2,802b38 <__sflags+0x30>
  802b14:	00801dc4 	movi	r2,119
  802b18:	18801426 	beq	r3,r2,802b6c <__sflags+0x64>
  802b1c:	00801844 	movi	r2,97
  802b20:	18801626 	beq	r3,r2,802b7c <__sflags+0x74>
  802b24:	0007883a 	mov	r3,zero
  802b28:	00800584 	movi	r2,22
  802b2c:	20800015 	stw	r2,0(r4)
  802b30:	1805883a 	mov	r2,r3
  802b34:	f800283a 	ret
  802b38:	000f883a 	mov	r7,zero
  802b3c:	0011883a 	mov	r8,zero
  802b40:	00c00104 	movi	r3,4
  802b44:	28800047 	ldb	r2,1(r5)
  802b48:	10000426 	beq	r2,zero,802b5c <__sflags+0x54>
  802b4c:	01000ac4 	movi	r4,43
  802b50:	11000e26 	beq	r2,r4,802b8c <__sflags+0x84>
  802b54:	28800087 	ldb	r2,2(r5)
  802b58:	11000c26 	beq	r2,r4,802b8c <__sflags+0x84>
  802b5c:	3a04b03a 	or	r2,r7,r8
  802b60:	30800015 	stw	r2,0(r6)
  802b64:	1805883a 	mov	r2,r3
  802b68:	f800283a 	ret
  802b6c:	01c00044 	movi	r7,1
  802b70:	02018004 	movi	r8,1536
  802b74:	00c00204 	movi	r3,8
  802b78:	003ff206 	br	802b44 <__sflags+0x3c>
  802b7c:	01c00044 	movi	r7,1
  802b80:	02008204 	movi	r8,520
  802b84:	00c04204 	movi	r3,264
  802b88:	003fee06 	br	802b44 <__sflags+0x3c>
  802b8c:	00bffcc4 	movi	r2,-13
  802b90:	1884703a 	and	r2,r3,r2
  802b94:	01c00084 	movi	r7,2
  802b98:	10c00414 	ori	r3,r2,16
  802b9c:	3a04b03a 	or	r2,r7,r8
  802ba0:	30800015 	stw	r2,0(r6)
  802ba4:	003fef06 	br	802b64 <__sflags+0x5c>

00802ba8 <_malloc_trim_r>:
  802ba8:	defffb04 	addi	sp,sp,-20
  802bac:	dcc00315 	stw	r19,12(sp)
  802bb0:	04c02074 	movhi	r19,129
  802bb4:	9ce41004 	addi	r19,r19,-28608
  802bb8:	dc800215 	stw	r18,8(sp)
  802bbc:	dc400115 	stw	r17,4(sp)
  802bc0:	dc000015 	stw	r16,0(sp)
  802bc4:	2823883a 	mov	r17,r5
  802bc8:	2025883a 	mov	r18,r4
  802bcc:	dfc00415 	stw	ra,16(sp)
  802bd0:	0804a8c0 	call	804a8c <__malloc_lock>
  802bd4:	98800217 	ldw	r2,8(r19)
  802bd8:	9009883a 	mov	r4,r18
  802bdc:	000b883a 	mov	r5,zero
  802be0:	10c00117 	ldw	r3,4(r2)
  802be4:	00bfff04 	movi	r2,-4
  802be8:	18a0703a 	and	r16,r3,r2
  802bec:	8463c83a 	sub	r17,r16,r17
  802bf0:	8c43fbc4 	addi	r17,r17,4079
  802bf4:	8822d33a 	srli	r17,r17,12
  802bf8:	0083ffc4 	movi	r2,4095
  802bfc:	8c7fffc4 	addi	r17,r17,-1
  802c00:	8822933a 	slli	r17,r17,12
  802c04:	1440060e 	bge	r2,r17,802c20 <_malloc_trim_r+0x78>
  802c08:	08023000 	call	802300 <_sbrk_r>
  802c0c:	98c00217 	ldw	r3,8(r19)
  802c10:	9009883a 	mov	r4,r18
  802c14:	044bc83a 	sub	r5,zero,r17
  802c18:	80c7883a 	add	r3,r16,r3
  802c1c:	10c00926 	beq	r2,r3,802c44 <_malloc_trim_r+0x9c>
  802c20:	0804aac0 	call	804aac <__malloc_unlock>
  802c24:	0005883a 	mov	r2,zero
  802c28:	dfc00417 	ldw	ra,16(sp)
  802c2c:	dcc00317 	ldw	r19,12(sp)
  802c30:	dc800217 	ldw	r18,8(sp)
  802c34:	dc400117 	ldw	r17,4(sp)
  802c38:	dc000017 	ldw	r16,0(sp)
  802c3c:	dec00504 	addi	sp,sp,20
  802c40:	f800283a 	ret
  802c44:	9009883a 	mov	r4,r18
  802c48:	08023000 	call	802300 <_sbrk_r>
  802c4c:	844dc83a 	sub	r6,r16,r17
  802c50:	00ffffc4 	movi	r3,-1
  802c54:	9009883a 	mov	r4,r18
  802c58:	000b883a 	mov	r5,zero
  802c5c:	01c02074 	movhi	r7,129
  802c60:	39f17804 	addi	r7,r7,-14880
  802c64:	31800054 	ori	r6,r6,1
  802c68:	10c00926 	beq	r2,r3,802c90 <_malloc_trim_r+0xe8>
  802c6c:	38800017 	ldw	r2,0(r7)
  802c70:	98c00217 	ldw	r3,8(r19)
  802c74:	9009883a 	mov	r4,r18
  802c78:	1445c83a 	sub	r2,r2,r17
  802c7c:	38800015 	stw	r2,0(r7)
  802c80:	19800115 	stw	r6,4(r3)
  802c84:	0804aac0 	call	804aac <__malloc_unlock>
  802c88:	00800044 	movi	r2,1
  802c8c:	003fe606 	br	802c28 <_malloc_trim_r+0x80>
  802c90:	08023000 	call	802300 <_sbrk_r>
  802c94:	99800217 	ldw	r6,8(r19)
  802c98:	100f883a 	mov	r7,r2
  802c9c:	9009883a 	mov	r4,r18
  802ca0:	1187c83a 	sub	r3,r2,r6
  802ca4:	008003c4 	movi	r2,15
  802ca8:	19400054 	ori	r5,r3,1
  802cac:	10ffdc0e 	bge	r2,r3,802c20 <_malloc_trim_r+0x78>
  802cb0:	00802074 	movhi	r2,129
  802cb4:	10aa1004 	addi	r2,r2,-22464
  802cb8:	10c00017 	ldw	r3,0(r2)
  802cbc:	00802074 	movhi	r2,129
  802cc0:	10b17804 	addi	r2,r2,-14880
  802cc4:	31400115 	stw	r5,4(r6)
  802cc8:	38c7c83a 	sub	r3,r7,r3
  802ccc:	10c00015 	stw	r3,0(r2)
  802cd0:	003fd306 	br	802c20 <_malloc_trim_r+0x78>

00802cd4 <_free_r>:
  802cd4:	defffd04 	addi	sp,sp,-12
  802cd8:	dc400115 	stw	r17,4(sp)
  802cdc:	dc000015 	stw	r16,0(sp)
  802ce0:	dfc00215 	stw	ra,8(sp)
  802ce4:	2821883a 	mov	r16,r5
  802ce8:	2023883a 	mov	r17,r4
  802cec:	28005a26 	beq	r5,zero,802e58 <_free_r+0x184>
  802cf0:	0804a8c0 	call	804a8c <__malloc_lock>
  802cf4:	823ffe04 	addi	r8,r16,-8
  802cf8:	41400117 	ldw	r5,4(r8)
  802cfc:	00bfff84 	movi	r2,-2
  802d00:	02802074 	movhi	r10,129
  802d04:	52a41004 	addi	r10,r10,-28608
  802d08:	288e703a 	and	r7,r5,r2
  802d0c:	41cd883a 	add	r6,r8,r7
  802d10:	30c00117 	ldw	r3,4(r6)
  802d14:	51000217 	ldw	r4,8(r10)
  802d18:	00bfff04 	movi	r2,-4
  802d1c:	1892703a 	and	r9,r3,r2
  802d20:	5017883a 	mov	r11,r10
  802d24:	31006726 	beq	r6,r4,802ec4 <_free_r+0x1f0>
  802d28:	2880004c 	andi	r2,r5,1
  802d2c:	1005003a 	cmpeq	r2,r2,zero
  802d30:	32400115 	stw	r9,4(r6)
  802d34:	10001a1e 	bne	r2,zero,802da0 <_free_r+0xcc>
  802d38:	000b883a 	mov	r5,zero
  802d3c:	3247883a 	add	r3,r6,r9
  802d40:	18800117 	ldw	r2,4(r3)
  802d44:	1080004c 	andi	r2,r2,1
  802d48:	1000231e 	bne	r2,zero,802dd8 <_free_r+0x104>
  802d4c:	280ac03a 	cmpne	r5,r5,zero
  802d50:	3a4f883a 	add	r7,r7,r9
  802d54:	2800451e 	bne	r5,zero,802e6c <_free_r+0x198>
  802d58:	31000217 	ldw	r4,8(r6)
  802d5c:	00802074 	movhi	r2,129
  802d60:	10a41204 	addi	r2,r2,-28600
  802d64:	20807b26 	beq	r4,r2,802f54 <_free_r+0x280>
  802d68:	30800317 	ldw	r2,12(r6)
  802d6c:	3a07883a 	add	r3,r7,r8
  802d70:	19c00015 	stw	r7,0(r3)
  802d74:	11000215 	stw	r4,8(r2)
  802d78:	20800315 	stw	r2,12(r4)
  802d7c:	38800054 	ori	r2,r7,1
  802d80:	40800115 	stw	r2,4(r8)
  802d84:	28001a26 	beq	r5,zero,802df0 <_free_r+0x11c>
  802d88:	8809883a 	mov	r4,r17
  802d8c:	dfc00217 	ldw	ra,8(sp)
  802d90:	dc400117 	ldw	r17,4(sp)
  802d94:	dc000017 	ldw	r16,0(sp)
  802d98:	dec00304 	addi	sp,sp,12
  802d9c:	0804aac1 	jmpi	804aac <__malloc_unlock>
  802da0:	80bffe17 	ldw	r2,-8(r16)
  802da4:	50c00204 	addi	r3,r10,8
  802da8:	4091c83a 	sub	r8,r8,r2
  802dac:	41000217 	ldw	r4,8(r8)
  802db0:	388f883a 	add	r7,r7,r2
  802db4:	20c06126 	beq	r4,r3,802f3c <_free_r+0x268>
  802db8:	40800317 	ldw	r2,12(r8)
  802dbc:	3247883a 	add	r3,r6,r9
  802dc0:	000b883a 	mov	r5,zero
  802dc4:	11000215 	stw	r4,8(r2)
  802dc8:	20800315 	stw	r2,12(r4)
  802dcc:	18800117 	ldw	r2,4(r3)
  802dd0:	1080004c 	andi	r2,r2,1
  802dd4:	103fdd26 	beq	r2,zero,802d4c <_free_r+0x78>
  802dd8:	38800054 	ori	r2,r7,1
  802ddc:	3a07883a 	add	r3,r7,r8
  802de0:	280ac03a 	cmpne	r5,r5,zero
  802de4:	40800115 	stw	r2,4(r8)
  802de8:	19c00015 	stw	r7,0(r3)
  802dec:	283fe61e 	bne	r5,zero,802d88 <_free_r+0xb4>
  802df0:	00807fc4 	movi	r2,511
  802df4:	11c01f2e 	bgeu	r2,r7,802e74 <_free_r+0x1a0>
  802df8:	3806d27a 	srli	r3,r7,9
  802dfc:	1800481e 	bne	r3,zero,802f20 <_free_r+0x24c>
  802e00:	3804d0fa 	srli	r2,r7,3
  802e04:	100690fa 	slli	r3,r2,3
  802e08:	1acd883a 	add	r6,r3,r11
  802e0c:	31400217 	ldw	r5,8(r6)
  802e10:	31405926 	beq	r6,r5,802f78 <_free_r+0x2a4>
  802e14:	28800117 	ldw	r2,4(r5)
  802e18:	00ffff04 	movi	r3,-4
  802e1c:	10c4703a 	and	r2,r2,r3
  802e20:	3880022e 	bgeu	r7,r2,802e2c <_free_r+0x158>
  802e24:	29400217 	ldw	r5,8(r5)
  802e28:	317ffa1e 	bne	r6,r5,802e14 <_free_r+0x140>
  802e2c:	29800317 	ldw	r6,12(r5)
  802e30:	41800315 	stw	r6,12(r8)
  802e34:	41400215 	stw	r5,8(r8)
  802e38:	8809883a 	mov	r4,r17
  802e3c:	2a000315 	stw	r8,12(r5)
  802e40:	32000215 	stw	r8,8(r6)
  802e44:	dfc00217 	ldw	ra,8(sp)
  802e48:	dc400117 	ldw	r17,4(sp)
  802e4c:	dc000017 	ldw	r16,0(sp)
  802e50:	dec00304 	addi	sp,sp,12
  802e54:	0804aac1 	jmpi	804aac <__malloc_unlock>
  802e58:	dfc00217 	ldw	ra,8(sp)
  802e5c:	dc400117 	ldw	r17,4(sp)
  802e60:	dc000017 	ldw	r16,0(sp)
  802e64:	dec00304 	addi	sp,sp,12
  802e68:	f800283a 	ret
  802e6c:	31000217 	ldw	r4,8(r6)
  802e70:	003fbd06 	br	802d68 <_free_r+0x94>
  802e74:	3806d0fa 	srli	r3,r7,3
  802e78:	00800044 	movi	r2,1
  802e7c:	51400117 	ldw	r5,4(r10)
  802e80:	180890fa 	slli	r4,r3,3
  802e84:	1807d0ba 	srai	r3,r3,2
  802e88:	22c9883a 	add	r4,r4,r11
  802e8c:	21800217 	ldw	r6,8(r4)
  802e90:	10c4983a 	sll	r2,r2,r3
  802e94:	41000315 	stw	r4,12(r8)
  802e98:	41800215 	stw	r6,8(r8)
  802e9c:	288ab03a 	or	r5,r5,r2
  802ea0:	22000215 	stw	r8,8(r4)
  802ea4:	8809883a 	mov	r4,r17
  802ea8:	51400115 	stw	r5,4(r10)
  802eac:	32000315 	stw	r8,12(r6)
  802eb0:	dfc00217 	ldw	ra,8(sp)
  802eb4:	dc400117 	ldw	r17,4(sp)
  802eb8:	dc000017 	ldw	r16,0(sp)
  802ebc:	dec00304 	addi	sp,sp,12
  802ec0:	0804aac1 	jmpi	804aac <__malloc_unlock>
  802ec4:	2880004c 	andi	r2,r5,1
  802ec8:	3a4d883a 	add	r6,r7,r9
  802ecc:	1000071e 	bne	r2,zero,802eec <_free_r+0x218>
  802ed0:	80bffe17 	ldw	r2,-8(r16)
  802ed4:	4091c83a 	sub	r8,r8,r2
  802ed8:	41000317 	ldw	r4,12(r8)
  802edc:	40c00217 	ldw	r3,8(r8)
  802ee0:	308d883a 	add	r6,r6,r2
  802ee4:	20c00215 	stw	r3,8(r4)
  802ee8:	19000315 	stw	r4,12(r3)
  802eec:	00802074 	movhi	r2,129
  802ef0:	10aa0f04 	addi	r2,r2,-22468
  802ef4:	11000017 	ldw	r4,0(r2)
  802ef8:	30c00054 	ori	r3,r6,1
  802efc:	52000215 	stw	r8,8(r10)
  802f00:	40c00115 	stw	r3,4(r8)
  802f04:	313fa036 	bltu	r6,r4,802d88 <_free_r+0xb4>
  802f08:	00802074 	movhi	r2,129
  802f0c:	10b13f04 	addi	r2,r2,-15108
  802f10:	11400017 	ldw	r5,0(r2)
  802f14:	8809883a 	mov	r4,r17
  802f18:	0802ba80 	call	802ba8 <_malloc_trim_r>
  802f1c:	003f9a06 	br	802d88 <_free_r+0xb4>
  802f20:	00800104 	movi	r2,4
  802f24:	10c0072e 	bgeu	r2,r3,802f44 <_free_r+0x270>
  802f28:	00800504 	movi	r2,20
  802f2c:	10c01936 	bltu	r2,r3,802f94 <_free_r+0x2c0>
  802f30:	188016c4 	addi	r2,r3,91
  802f34:	100690fa 	slli	r3,r2,3
  802f38:	003fb306 	br	802e08 <_free_r+0x134>
  802f3c:	01400044 	movi	r5,1
  802f40:	003f7e06 	br	802d3c <_free_r+0x68>
  802f44:	3804d1ba 	srli	r2,r7,6
  802f48:	10800e04 	addi	r2,r2,56
  802f4c:	100690fa 	slli	r3,r2,3
  802f50:	003fad06 	br	802e08 <_free_r+0x134>
  802f54:	22000315 	stw	r8,12(r4)
  802f58:	22000215 	stw	r8,8(r4)
  802f5c:	3a05883a 	add	r2,r7,r8
  802f60:	38c00054 	ori	r3,r7,1
  802f64:	11c00015 	stw	r7,0(r2)
  802f68:	41000215 	stw	r4,8(r8)
  802f6c:	40c00115 	stw	r3,4(r8)
  802f70:	41000315 	stw	r4,12(r8)
  802f74:	003f8406 	br	802d88 <_free_r+0xb4>
  802f78:	1005d0ba 	srai	r2,r2,2
  802f7c:	00c00044 	movi	r3,1
  802f80:	51000117 	ldw	r4,4(r10)
  802f84:	1886983a 	sll	r3,r3,r2
  802f88:	20c8b03a 	or	r4,r4,r3
  802f8c:	51000115 	stw	r4,4(r10)
  802f90:	003fa706 	br	802e30 <_free_r+0x15c>
  802f94:	00801504 	movi	r2,84
  802f98:	10c00436 	bltu	r2,r3,802fac <_free_r+0x2d8>
  802f9c:	3804d33a 	srli	r2,r7,12
  802fa0:	10801b84 	addi	r2,r2,110
  802fa4:	100690fa 	slli	r3,r2,3
  802fa8:	003f9706 	br	802e08 <_free_r+0x134>
  802fac:	00805504 	movi	r2,340
  802fb0:	10c00436 	bltu	r2,r3,802fc4 <_free_r+0x2f0>
  802fb4:	3804d3fa 	srli	r2,r7,15
  802fb8:	10801dc4 	addi	r2,r2,119
  802fbc:	100690fa 	slli	r3,r2,3
  802fc0:	003f9106 	br	802e08 <_free_r+0x134>
  802fc4:	00815504 	movi	r2,1364
  802fc8:	10c0032e 	bgeu	r2,r3,802fd8 <_free_r+0x304>
  802fcc:	00801f84 	movi	r2,126
  802fd0:	00c0fc04 	movi	r3,1008
  802fd4:	003f8c06 	br	802e08 <_free_r+0x134>
  802fd8:	3804d4ba 	srli	r2,r7,18
  802fdc:	10801f04 	addi	r2,r2,124
  802fe0:	100690fa 	slli	r3,r2,3
  802fe4:	003f8806 	br	802e08 <_free_r+0x134>

00802fe8 <__sfvwrite_r>:
  802fe8:	30800217 	ldw	r2,8(r6)
  802fec:	defff504 	addi	sp,sp,-44
  802ff0:	df000915 	stw	fp,36(sp)
  802ff4:	dd800715 	stw	r22,28(sp)
  802ff8:	dc800315 	stw	r18,12(sp)
  802ffc:	dfc00a15 	stw	ra,40(sp)
  803000:	ddc00815 	stw	r23,32(sp)
  803004:	dd400615 	stw	r21,24(sp)
  803008:	dd000515 	stw	r20,20(sp)
  80300c:	dcc00415 	stw	r19,16(sp)
  803010:	dc400215 	stw	r17,8(sp)
  803014:	dc000115 	stw	r16,4(sp)
  803018:	302d883a 	mov	r22,r6
  80301c:	2039883a 	mov	fp,r4
  803020:	2825883a 	mov	r18,r5
  803024:	10001c26 	beq	r2,zero,803098 <__sfvwrite_r+0xb0>
  803028:	29c0030b 	ldhu	r7,12(r5)
  80302c:	3880020c 	andi	r2,r7,8
  803030:	10002726 	beq	r2,zero,8030d0 <__sfvwrite_r+0xe8>
  803034:	28800417 	ldw	r2,16(r5)
  803038:	10002526 	beq	r2,zero,8030d0 <__sfvwrite_r+0xe8>
  80303c:	3880008c 	andi	r2,r7,2
  803040:	b5400017 	ldw	r21,0(r22)
  803044:	10002826 	beq	r2,zero,8030e8 <__sfvwrite_r+0x100>
  803048:	0021883a 	mov	r16,zero
  80304c:	0023883a 	mov	r17,zero
  803050:	880d883a 	mov	r6,r17
  803054:	e009883a 	mov	r4,fp
  803058:	00810004 	movi	r2,1024
  80305c:	80006e26 	beq	r16,zero,803218 <__sfvwrite_r+0x230>
  803060:	800f883a 	mov	r7,r16
  803064:	91400717 	ldw	r5,28(r18)
  803068:	1400012e 	bgeu	r2,r16,803070 <__sfvwrite_r+0x88>
  80306c:	100f883a 	mov	r7,r2
  803070:	90c00917 	ldw	r3,36(r18)
  803074:	183ee83a 	callr	r3
  803078:	1007883a 	mov	r3,r2
  80307c:	80a1c83a 	sub	r16,r16,r2
  803080:	88a3883a 	add	r17,r17,r2
  803084:	00806d0e 	bge	zero,r2,80323c <__sfvwrite_r+0x254>
  803088:	b0800217 	ldw	r2,8(r22)
  80308c:	10c5c83a 	sub	r2,r2,r3
  803090:	b0800215 	stw	r2,8(r22)
  803094:	103fee1e 	bne	r2,zero,803050 <__sfvwrite_r+0x68>
  803098:	0009883a 	mov	r4,zero
  80309c:	2005883a 	mov	r2,r4
  8030a0:	dfc00a17 	ldw	ra,40(sp)
  8030a4:	df000917 	ldw	fp,36(sp)
  8030a8:	ddc00817 	ldw	r23,32(sp)
  8030ac:	dd800717 	ldw	r22,28(sp)
  8030b0:	dd400617 	ldw	r21,24(sp)
  8030b4:	dd000517 	ldw	r20,20(sp)
  8030b8:	dcc00417 	ldw	r19,16(sp)
  8030bc:	dc800317 	ldw	r18,12(sp)
  8030c0:	dc400217 	ldw	r17,8(sp)
  8030c4:	dc000117 	ldw	r16,4(sp)
  8030c8:	dec00b04 	addi	sp,sp,44
  8030cc:	f800283a 	ret
  8030d0:	08040540 	call	804054 <__swsetup_r>
  8030d4:	1000e41e 	bne	r2,zero,803468 <__sfvwrite_r+0x480>
  8030d8:	91c0030b 	ldhu	r7,12(r18)
  8030dc:	b5400017 	ldw	r21,0(r22)
  8030e0:	3880008c 	andi	r2,r7,2
  8030e4:	103fd81e 	bne	r2,zero,803048 <__sfvwrite_r+0x60>
  8030e8:	3880004c 	andi	r2,r7,1
  8030ec:	1005003a 	cmpeq	r2,r2,zero
  8030f0:	10005726 	beq	r2,zero,803250 <__sfvwrite_r+0x268>
  8030f4:	0029883a 	mov	r20,zero
  8030f8:	002f883a 	mov	r23,zero
  8030fc:	a0004226 	beq	r20,zero,803208 <__sfvwrite_r+0x220>
  803100:	3880800c 	andi	r2,r7,512
  803104:	94000217 	ldw	r16,8(r18)
  803108:	10008b26 	beq	r2,zero,803338 <__sfvwrite_r+0x350>
  80310c:	800d883a 	mov	r6,r16
  803110:	a400a536 	bltu	r20,r16,8033a8 <__sfvwrite_r+0x3c0>
  803114:	3881200c 	andi	r2,r7,1152
  803118:	10002726 	beq	r2,zero,8031b8 <__sfvwrite_r+0x1d0>
  80311c:	90800517 	ldw	r2,20(r18)
  803120:	92000417 	ldw	r8,16(r18)
  803124:	91400017 	ldw	r5,0(r18)
  803128:	1087883a 	add	r3,r2,r2
  80312c:	1887883a 	add	r3,r3,r2
  803130:	1808d7fa 	srli	r4,r3,31
  803134:	2a21c83a 	sub	r16,r5,r8
  803138:	80800044 	addi	r2,r16,1
  80313c:	20c9883a 	add	r4,r4,r3
  803140:	2027d07a 	srai	r19,r4,1
  803144:	a085883a 	add	r2,r20,r2
  803148:	980d883a 	mov	r6,r19
  80314c:	9880022e 	bgeu	r19,r2,803158 <__sfvwrite_r+0x170>
  803150:	1027883a 	mov	r19,r2
  803154:	100d883a 	mov	r6,r2
  803158:	3881000c 	andi	r2,r7,1024
  80315c:	1000b826 	beq	r2,zero,803440 <__sfvwrite_r+0x458>
  803160:	300b883a 	mov	r5,r6
  803164:	e009883a 	mov	r4,fp
  803168:	08018b40 	call	8018b4 <_malloc_r>
  80316c:	10003126 	beq	r2,zero,803234 <__sfvwrite_r+0x24c>
  803170:	91400417 	ldw	r5,16(r18)
  803174:	1009883a 	mov	r4,r2
  803178:	800d883a 	mov	r6,r16
  80317c:	1023883a 	mov	r17,r2
  803180:	08037d00 	call	8037d0 <memcpy>
  803184:	90c0030b 	ldhu	r3,12(r18)
  803188:	00beffc4 	movi	r2,-1025
  80318c:	1886703a 	and	r3,r3,r2
  803190:	18c02014 	ori	r3,r3,128
  803194:	90c0030d 	sth	r3,12(r18)
  803198:	9c07c83a 	sub	r3,r19,r16
  80319c:	8c05883a 	add	r2,r17,r16
  8031a0:	a00d883a 	mov	r6,r20
  8031a4:	a021883a 	mov	r16,r20
  8031a8:	90800015 	stw	r2,0(r18)
  8031ac:	90c00215 	stw	r3,8(r18)
  8031b0:	94400415 	stw	r17,16(r18)
  8031b4:	94c00515 	stw	r19,20(r18)
  8031b8:	91000017 	ldw	r4,0(r18)
  8031bc:	b80b883a 	mov	r5,r23
  8031c0:	a023883a 	mov	r17,r20
  8031c4:	08038700 	call	803870 <memmove>
  8031c8:	90c00217 	ldw	r3,8(r18)
  8031cc:	90800017 	ldw	r2,0(r18)
  8031d0:	a027883a 	mov	r19,r20
  8031d4:	1c07c83a 	sub	r3,r3,r16
  8031d8:	1405883a 	add	r2,r2,r16
  8031dc:	90c00215 	stw	r3,8(r18)
  8031e0:	a021883a 	mov	r16,r20
  8031e4:	90800015 	stw	r2,0(r18)
  8031e8:	b0800217 	ldw	r2,8(r22)
  8031ec:	1405c83a 	sub	r2,r2,r16
  8031f0:	b0800215 	stw	r2,8(r22)
  8031f4:	103fa826 	beq	r2,zero,803098 <__sfvwrite_r+0xb0>
  8031f8:	a469c83a 	sub	r20,r20,r17
  8031fc:	91c0030b 	ldhu	r7,12(r18)
  803200:	bcef883a 	add	r23,r23,r19
  803204:	a03fbe1e 	bne	r20,zero,803100 <__sfvwrite_r+0x118>
  803208:	adc00017 	ldw	r23,0(r21)
  80320c:	ad000117 	ldw	r20,4(r21)
  803210:	ad400204 	addi	r21,r21,8
  803214:	003fb906 	br	8030fc <__sfvwrite_r+0x114>
  803218:	ac400017 	ldw	r17,0(r21)
  80321c:	ac000117 	ldw	r16,4(r21)
  803220:	ad400204 	addi	r21,r21,8
  803224:	003f8a06 	br	803050 <__sfvwrite_r+0x68>
  803228:	91400417 	ldw	r5,16(r18)
  80322c:	e009883a 	mov	r4,fp
  803230:	0802cd40 	call	802cd4 <_free_r>
  803234:	00800304 	movi	r2,12
  803238:	e0800015 	stw	r2,0(fp)
  80323c:	9080030b 	ldhu	r2,12(r18)
  803240:	013fffc4 	movi	r4,-1
  803244:	10801014 	ori	r2,r2,64
  803248:	9080030d 	sth	r2,12(r18)
  80324c:	003f9306 	br	80309c <__sfvwrite_r+0xb4>
  803250:	0027883a 	mov	r19,zero
  803254:	002f883a 	mov	r23,zero
  803258:	d8000015 	stw	zero,0(sp)
  80325c:	0029883a 	mov	r20,zero
  803260:	98001e26 	beq	r19,zero,8032dc <__sfvwrite_r+0x2f4>
  803264:	d8c00017 	ldw	r3,0(sp)
  803268:	1804c03a 	cmpne	r2,r3,zero
  80326c:	10005e26 	beq	r2,zero,8033e8 <__sfvwrite_r+0x400>
  803270:	9821883a 	mov	r16,r19
  803274:	a4c0012e 	bgeu	r20,r19,80327c <__sfvwrite_r+0x294>
  803278:	a021883a 	mov	r16,r20
  80327c:	91000017 	ldw	r4,0(r18)
  803280:	90800417 	ldw	r2,16(r18)
  803284:	91800217 	ldw	r6,8(r18)
  803288:	91c00517 	ldw	r7,20(r18)
  80328c:	1100022e 	bgeu	r2,r4,803298 <__sfvwrite_r+0x2b0>
  803290:	31e3883a 	add	r17,r6,r7
  803294:	8c001616 	blt	r17,r16,8032f0 <__sfvwrite_r+0x308>
  803298:	81c03816 	blt	r16,r7,80337c <__sfvwrite_r+0x394>
  80329c:	90c00917 	ldw	r3,36(r18)
  8032a0:	91400717 	ldw	r5,28(r18)
  8032a4:	e009883a 	mov	r4,fp
  8032a8:	b80d883a 	mov	r6,r23
  8032ac:	183ee83a 	callr	r3
  8032b0:	1023883a 	mov	r17,r2
  8032b4:	00bfe10e 	bge	zero,r2,80323c <__sfvwrite_r+0x254>
  8032b8:	a469c83a 	sub	r20,r20,r17
  8032bc:	a0001826 	beq	r20,zero,803320 <__sfvwrite_r+0x338>
  8032c0:	b0800217 	ldw	r2,8(r22)
  8032c4:	1445c83a 	sub	r2,r2,r17
  8032c8:	b0800215 	stw	r2,8(r22)
  8032cc:	103f7226 	beq	r2,zero,803098 <__sfvwrite_r+0xb0>
  8032d0:	9c67c83a 	sub	r19,r19,r17
  8032d4:	bc6f883a 	add	r23,r23,r17
  8032d8:	983fe21e 	bne	r19,zero,803264 <__sfvwrite_r+0x27c>
  8032dc:	adc00017 	ldw	r23,0(r21)
  8032e0:	acc00117 	ldw	r19,4(r21)
  8032e4:	ad400204 	addi	r21,r21,8
  8032e8:	d8000015 	stw	zero,0(sp)
  8032ec:	003fdc06 	br	803260 <__sfvwrite_r+0x278>
  8032f0:	b80b883a 	mov	r5,r23
  8032f4:	880d883a 	mov	r6,r17
  8032f8:	08038700 	call	803870 <memmove>
  8032fc:	90c00017 	ldw	r3,0(r18)
  803300:	e009883a 	mov	r4,fp
  803304:	900b883a 	mov	r5,r18
  803308:	1c47883a 	add	r3,r3,r17
  80330c:	90c00015 	stw	r3,0(r18)
  803310:	08026180 	call	802618 <_fflush_r>
  803314:	103fc91e 	bne	r2,zero,80323c <__sfvwrite_r+0x254>
  803318:	a469c83a 	sub	r20,r20,r17
  80331c:	a03fe81e 	bne	r20,zero,8032c0 <__sfvwrite_r+0x2d8>
  803320:	e009883a 	mov	r4,fp
  803324:	900b883a 	mov	r5,r18
  803328:	08026180 	call	802618 <_fflush_r>
  80332c:	103fc31e 	bne	r2,zero,80323c <__sfvwrite_r+0x254>
  803330:	d8000015 	stw	zero,0(sp)
  803334:	003fe206 	br	8032c0 <__sfvwrite_r+0x2d8>
  803338:	91000017 	ldw	r4,0(r18)
  80333c:	90800417 	ldw	r2,16(r18)
  803340:	1100022e 	bgeu	r2,r4,80334c <__sfvwrite_r+0x364>
  803344:	8023883a 	mov	r17,r16
  803348:	85003136 	bltu	r16,r20,803410 <__sfvwrite_r+0x428>
  80334c:	91c00517 	ldw	r7,20(r18)
  803350:	a1c01836 	bltu	r20,r7,8033b4 <__sfvwrite_r+0x3cc>
  803354:	90c00917 	ldw	r3,36(r18)
  803358:	91400717 	ldw	r5,28(r18)
  80335c:	e009883a 	mov	r4,fp
  803360:	b80d883a 	mov	r6,r23
  803364:	183ee83a 	callr	r3
  803368:	1021883a 	mov	r16,r2
  80336c:	00bfb30e 	bge	zero,r2,80323c <__sfvwrite_r+0x254>
  803370:	1023883a 	mov	r17,r2
  803374:	1027883a 	mov	r19,r2
  803378:	003f9b06 	br	8031e8 <__sfvwrite_r+0x200>
  80337c:	b80b883a 	mov	r5,r23
  803380:	800d883a 	mov	r6,r16
  803384:	08038700 	call	803870 <memmove>
  803388:	90c00217 	ldw	r3,8(r18)
  80338c:	90800017 	ldw	r2,0(r18)
  803390:	8023883a 	mov	r17,r16
  803394:	1c07c83a 	sub	r3,r3,r16
  803398:	1405883a 	add	r2,r2,r16
  80339c:	90c00215 	stw	r3,8(r18)
  8033a0:	90800015 	stw	r2,0(r18)
  8033a4:	003fc406 	br	8032b8 <__sfvwrite_r+0x2d0>
  8033a8:	a00d883a 	mov	r6,r20
  8033ac:	a021883a 	mov	r16,r20
  8033b0:	003f8106 	br	8031b8 <__sfvwrite_r+0x1d0>
  8033b4:	b80b883a 	mov	r5,r23
  8033b8:	a00d883a 	mov	r6,r20
  8033bc:	08038700 	call	803870 <memmove>
  8033c0:	90c00217 	ldw	r3,8(r18)
  8033c4:	90800017 	ldw	r2,0(r18)
  8033c8:	a021883a 	mov	r16,r20
  8033cc:	1d07c83a 	sub	r3,r3,r20
  8033d0:	1505883a 	add	r2,r2,r20
  8033d4:	a023883a 	mov	r17,r20
  8033d8:	a027883a 	mov	r19,r20
  8033dc:	90c00215 	stw	r3,8(r18)
  8033e0:	90800015 	stw	r2,0(r18)
  8033e4:	003f8006 	br	8031e8 <__sfvwrite_r+0x200>
  8033e8:	b809883a 	mov	r4,r23
  8033ec:	01400284 	movi	r5,10
  8033f0:	980d883a 	mov	r6,r19
  8033f4:	08036ec0 	call	8036ec <memchr>
  8033f8:	10001726 	beq	r2,zero,803458 <__sfvwrite_r+0x470>
  8033fc:	15c5c83a 	sub	r2,r2,r23
  803400:	15000044 	addi	r20,r2,1
  803404:	00800044 	movi	r2,1
  803408:	d8800015 	stw	r2,0(sp)
  80340c:	003f9806 	br	803270 <__sfvwrite_r+0x288>
  803410:	b80b883a 	mov	r5,r23
  803414:	800d883a 	mov	r6,r16
  803418:	08038700 	call	803870 <memmove>
  80341c:	90c00017 	ldw	r3,0(r18)
  803420:	e009883a 	mov	r4,fp
  803424:	900b883a 	mov	r5,r18
  803428:	1c07883a 	add	r3,r3,r16
  80342c:	90c00015 	stw	r3,0(r18)
  803430:	8027883a 	mov	r19,r16
  803434:	08026180 	call	802618 <_fflush_r>
  803438:	103f6b26 	beq	r2,zero,8031e8 <__sfvwrite_r+0x200>
  80343c:	003f7f06 	br	80323c <__sfvwrite_r+0x254>
  803440:	400b883a 	mov	r5,r8
  803444:	e009883a 	mov	r4,fp
  803448:	0803a600 	call	803a60 <_realloc_r>
  80344c:	103f7626 	beq	r2,zero,803228 <__sfvwrite_r+0x240>
  803450:	1023883a 	mov	r17,r2
  803454:	003f5006 	br	803198 <__sfvwrite_r+0x1b0>
  803458:	00c00044 	movi	r3,1
  80345c:	9d000044 	addi	r20,r19,1
  803460:	d8c00015 	stw	r3,0(sp)
  803464:	003f8206 	br	803270 <__sfvwrite_r+0x288>
  803468:	9080030b 	ldhu	r2,12(r18)
  80346c:	00c00244 	movi	r3,9
  803470:	013fffc4 	movi	r4,-1
  803474:	10801014 	ori	r2,r2,64
  803478:	9080030d 	sth	r2,12(r18)
  80347c:	e0c00015 	stw	r3,0(fp)
  803480:	003f0606 	br	80309c <__sfvwrite_r+0xb4>

00803484 <_fwalk_reent>:
  803484:	defff704 	addi	sp,sp,-36
  803488:	dcc00315 	stw	r19,12(sp)
  80348c:	24c0b804 	addi	r19,r4,736
  803490:	dd800615 	stw	r22,24(sp)
  803494:	dd400515 	stw	r21,20(sp)
  803498:	dfc00815 	stw	ra,32(sp)
  80349c:	ddc00715 	stw	r23,28(sp)
  8034a0:	dd000415 	stw	r20,16(sp)
  8034a4:	dc800215 	stw	r18,8(sp)
  8034a8:	dc400115 	stw	r17,4(sp)
  8034ac:	dc000015 	stw	r16,0(sp)
  8034b0:	202b883a 	mov	r21,r4
  8034b4:	282d883a 	mov	r22,r5
  8034b8:	08028a00 	call	8028a0 <__sfp_lock_acquire>
  8034bc:	98002126 	beq	r19,zero,803544 <_fwalk_reent+0xc0>
  8034c0:	002f883a 	mov	r23,zero
  8034c4:	9c800117 	ldw	r18,4(r19)
  8034c8:	9c000217 	ldw	r16,8(r19)
  8034cc:	90bfffc4 	addi	r2,r18,-1
  8034d0:	10000d16 	blt	r2,zero,803508 <_fwalk_reent+0x84>
  8034d4:	0023883a 	mov	r17,zero
  8034d8:	053fffc4 	movi	r20,-1
  8034dc:	8080030f 	ldh	r2,12(r16)
  8034e0:	8c400044 	addi	r17,r17,1
  8034e4:	10000626 	beq	r2,zero,803500 <_fwalk_reent+0x7c>
  8034e8:	8080038f 	ldh	r2,14(r16)
  8034ec:	800b883a 	mov	r5,r16
  8034f0:	a809883a 	mov	r4,r21
  8034f4:	15000226 	beq	r2,r20,803500 <_fwalk_reent+0x7c>
  8034f8:	b03ee83a 	callr	r22
  8034fc:	b8aeb03a 	or	r23,r23,r2
  803500:	84001704 	addi	r16,r16,92
  803504:	947ff51e 	bne	r18,r17,8034dc <_fwalk_reent+0x58>
  803508:	9cc00017 	ldw	r19,0(r19)
  80350c:	983fed1e 	bne	r19,zero,8034c4 <_fwalk_reent+0x40>
  803510:	08028a40 	call	8028a4 <__sfp_lock_release>
  803514:	b805883a 	mov	r2,r23
  803518:	dfc00817 	ldw	ra,32(sp)
  80351c:	ddc00717 	ldw	r23,28(sp)
  803520:	dd800617 	ldw	r22,24(sp)
  803524:	dd400517 	ldw	r21,20(sp)
  803528:	dd000417 	ldw	r20,16(sp)
  80352c:	dcc00317 	ldw	r19,12(sp)
  803530:	dc800217 	ldw	r18,8(sp)
  803534:	dc400117 	ldw	r17,4(sp)
  803538:	dc000017 	ldw	r16,0(sp)
  80353c:	dec00904 	addi	sp,sp,36
  803540:	f800283a 	ret
  803544:	002f883a 	mov	r23,zero
  803548:	003ff106 	br	803510 <_fwalk_reent+0x8c>

0080354c <_fwalk>:
  80354c:	defff804 	addi	sp,sp,-32
  803550:	dcc00315 	stw	r19,12(sp)
  803554:	24c0b804 	addi	r19,r4,736
  803558:	dd400515 	stw	r21,20(sp)
  80355c:	dfc00715 	stw	ra,28(sp)
  803560:	dd800615 	stw	r22,24(sp)
  803564:	dd000415 	stw	r20,16(sp)
  803568:	dc800215 	stw	r18,8(sp)
  80356c:	dc400115 	stw	r17,4(sp)
  803570:	dc000015 	stw	r16,0(sp)
  803574:	282b883a 	mov	r21,r5
  803578:	08028a00 	call	8028a0 <__sfp_lock_acquire>
  80357c:	98001f26 	beq	r19,zero,8035fc <_fwalk+0xb0>
  803580:	002d883a 	mov	r22,zero
  803584:	9c800117 	ldw	r18,4(r19)
  803588:	9c000217 	ldw	r16,8(r19)
  80358c:	90bfffc4 	addi	r2,r18,-1
  803590:	10000c16 	blt	r2,zero,8035c4 <_fwalk+0x78>
  803594:	0023883a 	mov	r17,zero
  803598:	053fffc4 	movi	r20,-1
  80359c:	8080030f 	ldh	r2,12(r16)
  8035a0:	8c400044 	addi	r17,r17,1
  8035a4:	10000526 	beq	r2,zero,8035bc <_fwalk+0x70>
  8035a8:	8080038f 	ldh	r2,14(r16)
  8035ac:	8009883a 	mov	r4,r16
  8035b0:	15000226 	beq	r2,r20,8035bc <_fwalk+0x70>
  8035b4:	a83ee83a 	callr	r21
  8035b8:	b0acb03a 	or	r22,r22,r2
  8035bc:	84001704 	addi	r16,r16,92
  8035c0:	947ff61e 	bne	r18,r17,80359c <_fwalk+0x50>
  8035c4:	9cc00017 	ldw	r19,0(r19)
  8035c8:	983fee1e 	bne	r19,zero,803584 <_fwalk+0x38>
  8035cc:	08028a40 	call	8028a4 <__sfp_lock_release>
  8035d0:	b005883a 	mov	r2,r22
  8035d4:	dfc00717 	ldw	ra,28(sp)
  8035d8:	dd800617 	ldw	r22,24(sp)
  8035dc:	dd400517 	ldw	r21,20(sp)
  8035e0:	dd000417 	ldw	r20,16(sp)
  8035e4:	dcc00317 	ldw	r19,12(sp)
  8035e8:	dc800217 	ldw	r18,8(sp)
  8035ec:	dc400117 	ldw	r17,4(sp)
  8035f0:	dc000017 	ldw	r16,0(sp)
  8035f4:	dec00804 	addi	sp,sp,32
  8035f8:	f800283a 	ret
  8035fc:	002d883a 	mov	r22,zero
  803600:	003ff206 	br	8035cc <_fwalk+0x80>

00803604 <_isatty_r>:
  803604:	defffd04 	addi	sp,sp,-12
  803608:	dc000015 	stw	r16,0(sp)
  80360c:	04002074 	movhi	r16,129
  803610:	84313e04 	addi	r16,r16,-15112
  803614:	dc400115 	stw	r17,4(sp)
  803618:	80000015 	stw	zero,0(r16)
  80361c:	2023883a 	mov	r17,r4
  803620:	2809883a 	mov	r4,r5
  803624:	dfc00215 	stw	ra,8(sp)
  803628:	08046c40 	call	8046c4 <isatty>
  80362c:	1007883a 	mov	r3,r2
  803630:	00bfffc4 	movi	r2,-1
  803634:	18800626 	beq	r3,r2,803650 <_isatty_r+0x4c>
  803638:	1805883a 	mov	r2,r3
  80363c:	dfc00217 	ldw	ra,8(sp)
  803640:	dc400117 	ldw	r17,4(sp)
  803644:	dc000017 	ldw	r16,0(sp)
  803648:	dec00304 	addi	sp,sp,12
  80364c:	f800283a 	ret
  803650:	80800017 	ldw	r2,0(r16)
  803654:	103ff826 	beq	r2,zero,803638 <_isatty_r+0x34>
  803658:	88800015 	stw	r2,0(r17)
  80365c:	1805883a 	mov	r2,r3
  803660:	dfc00217 	ldw	ra,8(sp)
  803664:	dc400117 	ldw	r17,4(sp)
  803668:	dc000017 	ldw	r16,0(sp)
  80366c:	dec00304 	addi	sp,sp,12
  803670:	f800283a 	ret

00803674 <_lseek_r>:
  803674:	defffd04 	addi	sp,sp,-12
  803678:	dc000015 	stw	r16,0(sp)
  80367c:	04002074 	movhi	r16,129
  803680:	84313e04 	addi	r16,r16,-15112
  803684:	dc400115 	stw	r17,4(sp)
  803688:	80000015 	stw	zero,0(r16)
  80368c:	2023883a 	mov	r17,r4
  803690:	2809883a 	mov	r4,r5
  803694:	300b883a 	mov	r5,r6
  803698:	380d883a 	mov	r6,r7
  80369c:	dfc00215 	stw	ra,8(sp)
  8036a0:	08048d00 	call	8048d0 <lseek>
  8036a4:	1007883a 	mov	r3,r2
  8036a8:	00bfffc4 	movi	r2,-1
  8036ac:	18800626 	beq	r3,r2,8036c8 <_lseek_r+0x54>
  8036b0:	1805883a 	mov	r2,r3
  8036b4:	dfc00217 	ldw	ra,8(sp)
  8036b8:	dc400117 	ldw	r17,4(sp)
  8036bc:	dc000017 	ldw	r16,0(sp)
  8036c0:	dec00304 	addi	sp,sp,12
  8036c4:	f800283a 	ret
  8036c8:	80800017 	ldw	r2,0(r16)
  8036cc:	103ff826 	beq	r2,zero,8036b0 <_lseek_r+0x3c>
  8036d0:	88800015 	stw	r2,0(r17)
  8036d4:	1805883a 	mov	r2,r3
  8036d8:	dfc00217 	ldw	ra,8(sp)
  8036dc:	dc400117 	ldw	r17,4(sp)
  8036e0:	dc000017 	ldw	r16,0(sp)
  8036e4:	dec00304 	addi	sp,sp,12
  8036e8:	f800283a 	ret

008036ec <memchr>:
  8036ec:	008000c4 	movi	r2,3
  8036f0:	29403fcc 	andi	r5,r5,255
  8036f4:	2007883a 	mov	r3,r4
  8036f8:	1180022e 	bgeu	r2,r6,803704 <memchr+0x18>
  8036fc:	2084703a 	and	r2,r4,r2
  803700:	10000b26 	beq	r2,zero,803730 <memchr+0x44>
  803704:	313fffc4 	addi	r4,r6,-1
  803708:	3000051e 	bne	r6,zero,803720 <memchr+0x34>
  80370c:	00002c06 	br	8037c0 <memchr+0xd4>
  803710:	213fffc4 	addi	r4,r4,-1
  803714:	00bfffc4 	movi	r2,-1
  803718:	18c00044 	addi	r3,r3,1
  80371c:	20802826 	beq	r4,r2,8037c0 <memchr+0xd4>
  803720:	18800003 	ldbu	r2,0(r3)
  803724:	28bffa1e 	bne	r5,r2,803710 <memchr+0x24>
  803728:	1805883a 	mov	r2,r3
  80372c:	f800283a 	ret
  803730:	0011883a 	mov	r8,zero
  803734:	0007883a 	mov	r3,zero
  803738:	01c00104 	movi	r7,4
  80373c:	4004923a 	slli	r2,r8,8
  803740:	18c00044 	addi	r3,r3,1
  803744:	1151883a 	add	r8,r2,r5
  803748:	19fffc1e 	bne	r3,r7,80373c <memchr+0x50>
  80374c:	02bfbff4 	movhi	r10,65279
  803750:	52bfbfc4 	addi	r10,r10,-257
  803754:	02602074 	movhi	r9,32897
  803758:	4a602004 	addi	r9,r9,-32640
  80375c:	02c000c4 	movi	r11,3
  803760:	20800017 	ldw	r2,0(r4)
  803764:	31bfff04 	addi	r6,r6,-4
  803768:	200f883a 	mov	r7,r4
  80376c:	1204f03a 	xor	r2,r2,r8
  803770:	1287883a 	add	r3,r2,r10
  803774:	1a46703a 	and	r3,r3,r9
  803778:	0084303a 	nor	r2,zero,r2
  80377c:	10c4703a 	and	r2,r2,r3
  803780:	10000b26 	beq	r2,zero,8037b0 <memchr+0xc4>
  803784:	20800003 	ldbu	r2,0(r4)
  803788:	28800f26 	beq	r5,r2,8037c8 <memchr+0xdc>
  80378c:	20800043 	ldbu	r2,1(r4)
  803790:	21c00044 	addi	r7,r4,1
  803794:	28800c26 	beq	r5,r2,8037c8 <memchr+0xdc>
  803798:	20800083 	ldbu	r2,2(r4)
  80379c:	21c00084 	addi	r7,r4,2
  8037a0:	28800926 	beq	r5,r2,8037c8 <memchr+0xdc>
  8037a4:	208000c3 	ldbu	r2,3(r4)
  8037a8:	21c000c4 	addi	r7,r4,3
  8037ac:	28800626 	beq	r5,r2,8037c8 <memchr+0xdc>
  8037b0:	21000104 	addi	r4,r4,4
  8037b4:	59bfea36 	bltu	r11,r6,803760 <memchr+0x74>
  8037b8:	2007883a 	mov	r3,r4
  8037bc:	003fd106 	br	803704 <memchr+0x18>
  8037c0:	0005883a 	mov	r2,zero
  8037c4:	f800283a 	ret
  8037c8:	3805883a 	mov	r2,r7
  8037cc:	f800283a 	ret

008037d0 <memcpy>:
  8037d0:	01c003c4 	movi	r7,15
  8037d4:	2007883a 	mov	r3,r4
  8037d8:	3980032e 	bgeu	r7,r6,8037e8 <memcpy+0x18>
  8037dc:	2904b03a 	or	r2,r5,r4
  8037e0:	108000cc 	andi	r2,r2,3
  8037e4:	10000926 	beq	r2,zero,80380c <memcpy+0x3c>
  8037e8:	30000626 	beq	r6,zero,803804 <memcpy+0x34>
  8037ec:	30cd883a 	add	r6,r6,r3
  8037f0:	28800003 	ldbu	r2,0(r5)
  8037f4:	29400044 	addi	r5,r5,1
  8037f8:	18800005 	stb	r2,0(r3)
  8037fc:	18c00044 	addi	r3,r3,1
  803800:	30fffb1e 	bne	r6,r3,8037f0 <memcpy+0x20>
  803804:	2005883a 	mov	r2,r4
  803808:	f800283a 	ret
  80380c:	3811883a 	mov	r8,r7
  803810:	200f883a 	mov	r7,r4
  803814:	28c00017 	ldw	r3,0(r5)
  803818:	31bffc04 	addi	r6,r6,-16
  80381c:	38c00015 	stw	r3,0(r7)
  803820:	28800117 	ldw	r2,4(r5)
  803824:	38800115 	stw	r2,4(r7)
  803828:	28c00217 	ldw	r3,8(r5)
  80382c:	38c00215 	stw	r3,8(r7)
  803830:	28800317 	ldw	r2,12(r5)
  803834:	29400404 	addi	r5,r5,16
  803838:	38800315 	stw	r2,12(r7)
  80383c:	39c00404 	addi	r7,r7,16
  803840:	41bff436 	bltu	r8,r6,803814 <memcpy+0x44>
  803844:	008000c4 	movi	r2,3
  803848:	1180072e 	bgeu	r2,r6,803868 <memcpy+0x98>
  80384c:	1007883a 	mov	r3,r2
  803850:	28800017 	ldw	r2,0(r5)
  803854:	31bfff04 	addi	r6,r6,-4
  803858:	29400104 	addi	r5,r5,4
  80385c:	38800015 	stw	r2,0(r7)
  803860:	39c00104 	addi	r7,r7,4
  803864:	19bffa36 	bltu	r3,r6,803850 <memcpy+0x80>
  803868:	3807883a 	mov	r3,r7
  80386c:	003fde06 	br	8037e8 <memcpy+0x18>

00803870 <memmove>:
  803870:	2807883a 	mov	r3,r5
  803874:	2011883a 	mov	r8,r4
  803878:	29000c2e 	bgeu	r5,r4,8038ac <memmove+0x3c>
  80387c:	298f883a 	add	r7,r5,r6
  803880:	21c00a2e 	bgeu	r4,r7,8038ac <memmove+0x3c>
  803884:	30000726 	beq	r6,zero,8038a4 <memmove+0x34>
  803888:	2187883a 	add	r3,r4,r6
  80388c:	198dc83a 	sub	r6,r3,r6
  803890:	39ffffc4 	addi	r7,r7,-1
  803894:	38800003 	ldbu	r2,0(r7)
  803898:	18ffffc4 	addi	r3,r3,-1
  80389c:	18800005 	stb	r2,0(r3)
  8038a0:	19bffb1e 	bne	r3,r6,803890 <memmove+0x20>
  8038a4:	2005883a 	mov	r2,r4
  8038a8:	f800283a 	ret
  8038ac:	01c003c4 	movi	r7,15
  8038b0:	39800a36 	bltu	r7,r6,8038dc <memmove+0x6c>
  8038b4:	303ffb26 	beq	r6,zero,8038a4 <memmove+0x34>
  8038b8:	400f883a 	mov	r7,r8
  8038bc:	320d883a 	add	r6,r6,r8
  8038c0:	28800003 	ldbu	r2,0(r5)
  8038c4:	29400044 	addi	r5,r5,1
  8038c8:	38800005 	stb	r2,0(r7)
  8038cc:	39c00044 	addi	r7,r7,1
  8038d0:	39bffb1e 	bne	r7,r6,8038c0 <memmove+0x50>
  8038d4:	2005883a 	mov	r2,r4
  8038d8:	f800283a 	ret
  8038dc:	1904b03a 	or	r2,r3,r4
  8038e0:	108000cc 	andi	r2,r2,3
  8038e4:	103ff31e 	bne	r2,zero,8038b4 <memmove+0x44>
  8038e8:	3811883a 	mov	r8,r7
  8038ec:	180b883a 	mov	r5,r3
  8038f0:	200f883a 	mov	r7,r4
  8038f4:	28c00017 	ldw	r3,0(r5)
  8038f8:	31bffc04 	addi	r6,r6,-16
  8038fc:	38c00015 	stw	r3,0(r7)
  803900:	28800117 	ldw	r2,4(r5)
  803904:	38800115 	stw	r2,4(r7)
  803908:	28c00217 	ldw	r3,8(r5)
  80390c:	38c00215 	stw	r3,8(r7)
  803910:	28800317 	ldw	r2,12(r5)
  803914:	29400404 	addi	r5,r5,16
  803918:	38800315 	stw	r2,12(r7)
  80391c:	39c00404 	addi	r7,r7,16
  803920:	41bff436 	bltu	r8,r6,8038f4 <memmove+0x84>
  803924:	008000c4 	movi	r2,3
  803928:	1180072e 	bgeu	r2,r6,803948 <memmove+0xd8>
  80392c:	1007883a 	mov	r3,r2
  803930:	28800017 	ldw	r2,0(r5)
  803934:	31bfff04 	addi	r6,r6,-4
  803938:	29400104 	addi	r5,r5,4
  80393c:	38800015 	stw	r2,0(r7)
  803940:	39c00104 	addi	r7,r7,4
  803944:	19bffa36 	bltu	r3,r6,803930 <memmove+0xc0>
  803948:	3811883a 	mov	r8,r7
  80394c:	003fd906 	br	8038b4 <memmove+0x44>

00803950 <memset>:
  803950:	008000c4 	movi	r2,3
  803954:	29403fcc 	andi	r5,r5,255
  803958:	2007883a 	mov	r3,r4
  80395c:	1180022e 	bgeu	r2,r6,803968 <memset+0x18>
  803960:	2084703a 	and	r2,r4,r2
  803964:	10000826 	beq	r2,zero,803988 <memset+0x38>
  803968:	30000526 	beq	r6,zero,803980 <memset+0x30>
  80396c:	2805883a 	mov	r2,r5
  803970:	30cd883a 	add	r6,r6,r3
  803974:	18800005 	stb	r2,0(r3)
  803978:	18c00044 	addi	r3,r3,1
  80397c:	19bffd1e 	bne	r3,r6,803974 <memset+0x24>
  803980:	2005883a 	mov	r2,r4
  803984:	f800283a 	ret
  803988:	2804923a 	slli	r2,r5,8
  80398c:	020003c4 	movi	r8,15
  803990:	200f883a 	mov	r7,r4
  803994:	2884b03a 	or	r2,r5,r2
  803998:	1006943a 	slli	r3,r2,16
  80399c:	10c6b03a 	or	r3,r2,r3
  8039a0:	41800a2e 	bgeu	r8,r6,8039cc <memset+0x7c>
  8039a4:	4005883a 	mov	r2,r8
  8039a8:	31bffc04 	addi	r6,r6,-16
  8039ac:	38c00015 	stw	r3,0(r7)
  8039b0:	38c00115 	stw	r3,4(r7)
  8039b4:	38c00215 	stw	r3,8(r7)
  8039b8:	38c00315 	stw	r3,12(r7)
  8039bc:	39c00404 	addi	r7,r7,16
  8039c0:	11bff936 	bltu	r2,r6,8039a8 <memset+0x58>
  8039c4:	008000c4 	movi	r2,3
  8039c8:	1180052e 	bgeu	r2,r6,8039e0 <memset+0x90>
  8039cc:	31bfff04 	addi	r6,r6,-4
  8039d0:	008000c4 	movi	r2,3
  8039d4:	38c00015 	stw	r3,0(r7)
  8039d8:	39c00104 	addi	r7,r7,4
  8039dc:	11bffb36 	bltu	r2,r6,8039cc <memset+0x7c>
  8039e0:	3807883a 	mov	r3,r7
  8039e4:	003fe006 	br	803968 <memset+0x18>

008039e8 <_read_r>:
  8039e8:	defffd04 	addi	sp,sp,-12
  8039ec:	dc000015 	stw	r16,0(sp)
  8039f0:	04002074 	movhi	r16,129
  8039f4:	84313e04 	addi	r16,r16,-15112
  8039f8:	dc400115 	stw	r17,4(sp)
  8039fc:	80000015 	stw	zero,0(r16)
  803a00:	2023883a 	mov	r17,r4
  803a04:	2809883a 	mov	r4,r5
  803a08:	300b883a 	mov	r5,r6
  803a0c:	380d883a 	mov	r6,r7
  803a10:	dfc00215 	stw	ra,8(sp)
  803a14:	0804d900 	call	804d90 <read>
  803a18:	1007883a 	mov	r3,r2
  803a1c:	00bfffc4 	movi	r2,-1
  803a20:	18800626 	beq	r3,r2,803a3c <_read_r+0x54>
  803a24:	1805883a 	mov	r2,r3
  803a28:	dfc00217 	ldw	ra,8(sp)
  803a2c:	dc400117 	ldw	r17,4(sp)
  803a30:	dc000017 	ldw	r16,0(sp)
  803a34:	dec00304 	addi	sp,sp,12
  803a38:	f800283a 	ret
  803a3c:	80800017 	ldw	r2,0(r16)
  803a40:	103ff826 	beq	r2,zero,803a24 <_read_r+0x3c>
  803a44:	88800015 	stw	r2,0(r17)
  803a48:	1805883a 	mov	r2,r3
  803a4c:	dfc00217 	ldw	ra,8(sp)
  803a50:	dc400117 	ldw	r17,4(sp)
  803a54:	dc000017 	ldw	r16,0(sp)
  803a58:	dec00304 	addi	sp,sp,12
  803a5c:	f800283a 	ret

00803a60 <_realloc_r>:
  803a60:	defff404 	addi	sp,sp,-48
  803a64:	dd800815 	stw	r22,32(sp)
  803a68:	dc800415 	stw	r18,16(sp)
  803a6c:	dc400315 	stw	r17,12(sp)
  803a70:	dfc00b15 	stw	ra,44(sp)
  803a74:	df000a15 	stw	fp,40(sp)
  803a78:	ddc00915 	stw	r23,36(sp)
  803a7c:	dd400715 	stw	r21,28(sp)
  803a80:	dd000615 	stw	r20,24(sp)
  803a84:	dcc00515 	stw	r19,20(sp)
  803a88:	dc000215 	stw	r16,8(sp)
  803a8c:	2825883a 	mov	r18,r5
  803a90:	3023883a 	mov	r17,r6
  803a94:	202d883a 	mov	r22,r4
  803a98:	2800c926 	beq	r5,zero,803dc0 <_realloc_r+0x360>
  803a9c:	0804a8c0 	call	804a8c <__malloc_lock>
  803aa0:	943ffe04 	addi	r16,r18,-8
  803aa4:	88c002c4 	addi	r3,r17,11
  803aa8:	00800584 	movi	r2,22
  803aac:	82000117 	ldw	r8,4(r16)
  803ab0:	10c01b2e 	bgeu	r2,r3,803b20 <_realloc_r+0xc0>
  803ab4:	00bffe04 	movi	r2,-8
  803ab8:	188e703a 	and	r7,r3,r2
  803abc:	3839883a 	mov	fp,r7
  803ac0:	38001a16 	blt	r7,zero,803b2c <_realloc_r+0xcc>
  803ac4:	e4401936 	bltu	fp,r17,803b2c <_realloc_r+0xcc>
  803ac8:	013fff04 	movi	r4,-4
  803acc:	4126703a 	and	r19,r8,r4
  803ad0:	99c02616 	blt	r19,r7,803b6c <_realloc_r+0x10c>
  803ad4:	802b883a 	mov	r21,r16
  803ad8:	9829883a 	mov	r20,r19
  803adc:	84000204 	addi	r16,r16,8
  803ae0:	a80f883a 	mov	r7,r21
  803ae4:	a70dc83a 	sub	r6,r20,fp
  803ae8:	008003c4 	movi	r2,15
  803aec:	1180c136 	bltu	r2,r6,803df4 <_realloc_r+0x394>
  803af0:	38800117 	ldw	r2,4(r7)
  803af4:	a549883a 	add	r4,r20,r21
  803af8:	1080004c 	andi	r2,r2,1
  803afc:	a084b03a 	or	r2,r20,r2
  803b00:	38800115 	stw	r2,4(r7)
  803b04:	20c00117 	ldw	r3,4(r4)
  803b08:	18c00054 	ori	r3,r3,1
  803b0c:	20c00115 	stw	r3,4(r4)
  803b10:	b009883a 	mov	r4,r22
  803b14:	0804aac0 	call	804aac <__malloc_unlock>
  803b18:	8023883a 	mov	r17,r16
  803b1c:	00000606 	br	803b38 <_realloc_r+0xd8>
  803b20:	01c00404 	movi	r7,16
  803b24:	3839883a 	mov	fp,r7
  803b28:	e47fe72e 	bgeu	fp,r17,803ac8 <_realloc_r+0x68>
  803b2c:	00800304 	movi	r2,12
  803b30:	0023883a 	mov	r17,zero
  803b34:	b0800015 	stw	r2,0(r22)
  803b38:	8805883a 	mov	r2,r17
  803b3c:	dfc00b17 	ldw	ra,44(sp)
  803b40:	df000a17 	ldw	fp,40(sp)
  803b44:	ddc00917 	ldw	r23,36(sp)
  803b48:	dd800817 	ldw	r22,32(sp)
  803b4c:	dd400717 	ldw	r21,28(sp)
  803b50:	dd000617 	ldw	r20,24(sp)
  803b54:	dcc00517 	ldw	r19,20(sp)
  803b58:	dc800417 	ldw	r18,16(sp)
  803b5c:	dc400317 	ldw	r17,12(sp)
  803b60:	dc000217 	ldw	r16,8(sp)
  803b64:	dec00c04 	addi	sp,sp,48
  803b68:	f800283a 	ret
  803b6c:	00802074 	movhi	r2,129
  803b70:	10a41004 	addi	r2,r2,-28608
  803b74:	12400217 	ldw	r9,8(r2)
  803b78:	84cd883a 	add	r6,r16,r19
  803b7c:	802b883a 	mov	r21,r16
  803b80:	3240b926 	beq	r6,r9,803e68 <_realloc_r+0x408>
  803b84:	31400117 	ldw	r5,4(r6)
  803b88:	00bfff84 	movi	r2,-2
  803b8c:	2884703a 	and	r2,r5,r2
  803b90:	1185883a 	add	r2,r2,r6
  803b94:	10c00117 	ldw	r3,4(r2)
  803b98:	18c0004c 	andi	r3,r3,1
  803b9c:	1807003a 	cmpeq	r3,r3,zero
  803ba0:	1800a326 	beq	r3,zero,803e30 <_realloc_r+0x3d0>
  803ba4:	2908703a 	and	r4,r5,r4
  803ba8:	9929883a 	add	r20,r19,r4
  803bac:	a1c0a30e 	bge	r20,r7,803e3c <_realloc_r+0x3dc>
  803bb0:	4080004c 	andi	r2,r8,1
  803bb4:	1000551e 	bne	r2,zero,803d0c <_realloc_r+0x2ac>
  803bb8:	80800017 	ldw	r2,0(r16)
  803bbc:	80afc83a 	sub	r23,r16,r2
  803bc0:	b8c00117 	ldw	r3,4(r23)
  803bc4:	00bfff04 	movi	r2,-4
  803bc8:	1884703a 	and	r2,r3,r2
  803bcc:	30002e26 	beq	r6,zero,803c88 <_realloc_r+0x228>
  803bd0:	3240b926 	beq	r6,r9,803eb8 <_realloc_r+0x458>
  803bd4:	98a9883a 	add	r20,r19,r2
  803bd8:	2509883a 	add	r4,r4,r20
  803bdc:	d9000015 	stw	r4,0(sp)
  803be0:	21c02a16 	blt	r4,r7,803c8c <_realloc_r+0x22c>
  803be4:	30800317 	ldw	r2,12(r6)
  803be8:	30c00217 	ldw	r3,8(r6)
  803bec:	01400904 	movi	r5,36
  803bf0:	99bfff04 	addi	r6,r19,-4
  803bf4:	18800315 	stw	r2,12(r3)
  803bf8:	10c00215 	stw	r3,8(r2)
  803bfc:	b9000317 	ldw	r4,12(r23)
  803c00:	b8800217 	ldw	r2,8(r23)
  803c04:	b82b883a 	mov	r21,r23
  803c08:	bc000204 	addi	r16,r23,8
  803c0c:	20800215 	stw	r2,8(r4)
  803c10:	11000315 	stw	r4,12(r2)
  803c14:	2980e436 	bltu	r5,r6,803fa8 <_realloc_r+0x548>
  803c18:	008004c4 	movi	r2,19
  803c1c:	9009883a 	mov	r4,r18
  803c20:	8011883a 	mov	r8,r16
  803c24:	11800f2e 	bgeu	r2,r6,803c64 <_realloc_r+0x204>
  803c28:	90800017 	ldw	r2,0(r18)
  803c2c:	ba000404 	addi	r8,r23,16
  803c30:	91000204 	addi	r4,r18,8
  803c34:	b8800215 	stw	r2,8(r23)
  803c38:	90c00117 	ldw	r3,4(r18)
  803c3c:	008006c4 	movi	r2,27
  803c40:	b8c00315 	stw	r3,12(r23)
  803c44:	1180072e 	bgeu	r2,r6,803c64 <_realloc_r+0x204>
  803c48:	90c00217 	ldw	r3,8(r18)
  803c4c:	ba000604 	addi	r8,r23,24
  803c50:	91000404 	addi	r4,r18,16
  803c54:	b8c00415 	stw	r3,16(r23)
  803c58:	90800317 	ldw	r2,12(r18)
  803c5c:	b8800515 	stw	r2,20(r23)
  803c60:	3140e726 	beq	r6,r5,804000 <_realloc_r+0x5a0>
  803c64:	20800017 	ldw	r2,0(r4)
  803c68:	dd000017 	ldw	r20,0(sp)
  803c6c:	b80f883a 	mov	r7,r23
  803c70:	40800015 	stw	r2,0(r8)
  803c74:	20c00117 	ldw	r3,4(r4)
  803c78:	40c00115 	stw	r3,4(r8)
  803c7c:	20800217 	ldw	r2,8(r4)
  803c80:	40800215 	stw	r2,8(r8)
  803c84:	003f9706 	br	803ae4 <_realloc_r+0x84>
  803c88:	98a9883a 	add	r20,r19,r2
  803c8c:	a1c01f16 	blt	r20,r7,803d0c <_realloc_r+0x2ac>
  803c90:	b8c00317 	ldw	r3,12(r23)
  803c94:	b8800217 	ldw	r2,8(r23)
  803c98:	99bfff04 	addi	r6,r19,-4
  803c9c:	01400904 	movi	r5,36
  803ca0:	b82b883a 	mov	r21,r23
  803ca4:	18800215 	stw	r2,8(r3)
  803ca8:	10c00315 	stw	r3,12(r2)
  803cac:	bc000204 	addi	r16,r23,8
  803cb0:	2980c336 	bltu	r5,r6,803fc0 <_realloc_r+0x560>
  803cb4:	008004c4 	movi	r2,19
  803cb8:	9009883a 	mov	r4,r18
  803cbc:	8011883a 	mov	r8,r16
  803cc0:	11800f2e 	bgeu	r2,r6,803d00 <_realloc_r+0x2a0>
  803cc4:	90800017 	ldw	r2,0(r18)
  803cc8:	ba000404 	addi	r8,r23,16
  803ccc:	91000204 	addi	r4,r18,8
  803cd0:	b8800215 	stw	r2,8(r23)
  803cd4:	90c00117 	ldw	r3,4(r18)
  803cd8:	008006c4 	movi	r2,27
  803cdc:	b8c00315 	stw	r3,12(r23)
  803ce0:	1180072e 	bgeu	r2,r6,803d00 <_realloc_r+0x2a0>
  803ce4:	90c00217 	ldw	r3,8(r18)
  803ce8:	ba000604 	addi	r8,r23,24
  803cec:	91000404 	addi	r4,r18,16
  803cf0:	b8c00415 	stw	r3,16(r23)
  803cf4:	90800317 	ldw	r2,12(r18)
  803cf8:	b8800515 	stw	r2,20(r23)
  803cfc:	3140c726 	beq	r6,r5,80401c <_realloc_r+0x5bc>
  803d00:	20800017 	ldw	r2,0(r4)
  803d04:	b80f883a 	mov	r7,r23
  803d08:	003fd906 	br	803c70 <_realloc_r+0x210>
  803d0c:	880b883a 	mov	r5,r17
  803d10:	b009883a 	mov	r4,r22
  803d14:	08018b40 	call	8018b4 <_malloc_r>
  803d18:	1023883a 	mov	r17,r2
  803d1c:	10002526 	beq	r2,zero,803db4 <_realloc_r+0x354>
  803d20:	80800117 	ldw	r2,4(r16)
  803d24:	00ffff84 	movi	r3,-2
  803d28:	893ffe04 	addi	r4,r17,-8
  803d2c:	10c4703a 	and	r2,r2,r3
  803d30:	8085883a 	add	r2,r16,r2
  803d34:	20809526 	beq	r4,r2,803f8c <_realloc_r+0x52c>
  803d38:	99bfff04 	addi	r6,r19,-4
  803d3c:	01c00904 	movi	r7,36
  803d40:	39804536 	bltu	r7,r6,803e58 <_realloc_r+0x3f8>
  803d44:	008004c4 	movi	r2,19
  803d48:	9009883a 	mov	r4,r18
  803d4c:	880b883a 	mov	r5,r17
  803d50:	11800f2e 	bgeu	r2,r6,803d90 <_realloc_r+0x330>
  803d54:	90800017 	ldw	r2,0(r18)
  803d58:	89400204 	addi	r5,r17,8
  803d5c:	91000204 	addi	r4,r18,8
  803d60:	88800015 	stw	r2,0(r17)
  803d64:	90c00117 	ldw	r3,4(r18)
  803d68:	008006c4 	movi	r2,27
  803d6c:	88c00115 	stw	r3,4(r17)
  803d70:	1180072e 	bgeu	r2,r6,803d90 <_realloc_r+0x330>
  803d74:	90c00217 	ldw	r3,8(r18)
  803d78:	89400404 	addi	r5,r17,16
  803d7c:	91000404 	addi	r4,r18,16
  803d80:	88c00215 	stw	r3,8(r17)
  803d84:	90800317 	ldw	r2,12(r18)
  803d88:	88800315 	stw	r2,12(r17)
  803d8c:	31c09126 	beq	r6,r7,803fd4 <_realloc_r+0x574>
  803d90:	20800017 	ldw	r2,0(r4)
  803d94:	28800015 	stw	r2,0(r5)
  803d98:	20c00117 	ldw	r3,4(r4)
  803d9c:	28c00115 	stw	r3,4(r5)
  803da0:	20800217 	ldw	r2,8(r4)
  803da4:	28800215 	stw	r2,8(r5)
  803da8:	900b883a 	mov	r5,r18
  803dac:	b009883a 	mov	r4,r22
  803db0:	0802cd40 	call	802cd4 <_free_r>
  803db4:	b009883a 	mov	r4,r22
  803db8:	0804aac0 	call	804aac <__malloc_unlock>
  803dbc:	003f5e06 	br	803b38 <_realloc_r+0xd8>
  803dc0:	300b883a 	mov	r5,r6
  803dc4:	dfc00b17 	ldw	ra,44(sp)
  803dc8:	df000a17 	ldw	fp,40(sp)
  803dcc:	ddc00917 	ldw	r23,36(sp)
  803dd0:	dd800817 	ldw	r22,32(sp)
  803dd4:	dd400717 	ldw	r21,28(sp)
  803dd8:	dd000617 	ldw	r20,24(sp)
  803ddc:	dcc00517 	ldw	r19,20(sp)
  803de0:	dc800417 	ldw	r18,16(sp)
  803de4:	dc400317 	ldw	r17,12(sp)
  803de8:	dc000217 	ldw	r16,8(sp)
  803dec:	dec00c04 	addi	sp,sp,48
  803df0:	08018b41 	jmpi	8018b4 <_malloc_r>
  803df4:	38800117 	ldw	r2,4(r7)
  803df8:	e54b883a 	add	r5,fp,r21
  803dfc:	31000054 	ori	r4,r6,1
  803e00:	1080004c 	andi	r2,r2,1
  803e04:	1704b03a 	or	r2,r2,fp
  803e08:	38800115 	stw	r2,4(r7)
  803e0c:	29000115 	stw	r4,4(r5)
  803e10:	2987883a 	add	r3,r5,r6
  803e14:	18800117 	ldw	r2,4(r3)
  803e18:	29400204 	addi	r5,r5,8
  803e1c:	b009883a 	mov	r4,r22
  803e20:	10800054 	ori	r2,r2,1
  803e24:	18800115 	stw	r2,4(r3)
  803e28:	0802cd40 	call	802cd4 <_free_r>
  803e2c:	003f3806 	br	803b10 <_realloc_r+0xb0>
  803e30:	000d883a 	mov	r6,zero
  803e34:	0009883a 	mov	r4,zero
  803e38:	003f5d06 	br	803bb0 <_realloc_r+0x150>
  803e3c:	30c00217 	ldw	r3,8(r6)
  803e40:	30800317 	ldw	r2,12(r6)
  803e44:	800f883a 	mov	r7,r16
  803e48:	84000204 	addi	r16,r16,8
  803e4c:	10c00215 	stw	r3,8(r2)
  803e50:	18800315 	stw	r2,12(r3)
  803e54:	003f2306 	br	803ae4 <_realloc_r+0x84>
  803e58:	8809883a 	mov	r4,r17
  803e5c:	900b883a 	mov	r5,r18
  803e60:	08038700 	call	803870 <memmove>
  803e64:	003fd006 	br	803da8 <_realloc_r+0x348>
  803e68:	30800117 	ldw	r2,4(r6)
  803e6c:	e0c00404 	addi	r3,fp,16
  803e70:	1108703a 	and	r4,r2,r4
  803e74:	9905883a 	add	r2,r19,r4
  803e78:	10ff4d16 	blt	r2,r3,803bb0 <_realloc_r+0x150>
  803e7c:	1705c83a 	sub	r2,r2,fp
  803e80:	870b883a 	add	r5,r16,fp
  803e84:	10800054 	ori	r2,r2,1
  803e88:	28800115 	stw	r2,4(r5)
  803e8c:	80c00117 	ldw	r3,4(r16)
  803e90:	00802074 	movhi	r2,129
  803e94:	10a41004 	addi	r2,r2,-28608
  803e98:	b009883a 	mov	r4,r22
  803e9c:	18c0004c 	andi	r3,r3,1
  803ea0:	e0c6b03a 	or	r3,fp,r3
  803ea4:	11400215 	stw	r5,8(r2)
  803ea8:	80c00115 	stw	r3,4(r16)
  803eac:	0804aac0 	call	804aac <__malloc_unlock>
  803eb0:	84400204 	addi	r17,r16,8
  803eb4:	003f2006 	br	803b38 <_realloc_r+0xd8>
  803eb8:	98a9883a 	add	r20,r19,r2
  803ebc:	2509883a 	add	r4,r4,r20
  803ec0:	e0800404 	addi	r2,fp,16
  803ec4:	d9000115 	stw	r4,4(sp)
  803ec8:	20bf7016 	blt	r4,r2,803c8c <_realloc_r+0x22c>
  803ecc:	b8c00317 	ldw	r3,12(r23)
  803ed0:	b8800217 	ldw	r2,8(r23)
  803ed4:	99bfff04 	addi	r6,r19,-4
  803ed8:	01400904 	movi	r5,36
  803edc:	18800215 	stw	r2,8(r3)
  803ee0:	10c00315 	stw	r3,12(r2)
  803ee4:	bc400204 	addi	r17,r23,8
  803ee8:	29804136 	bltu	r5,r6,803ff0 <_realloc_r+0x590>
  803eec:	008004c4 	movi	r2,19
  803ef0:	9009883a 	mov	r4,r18
  803ef4:	880f883a 	mov	r7,r17
  803ef8:	11800f2e 	bgeu	r2,r6,803f38 <_realloc_r+0x4d8>
  803efc:	90800017 	ldw	r2,0(r18)
  803f00:	b9c00404 	addi	r7,r23,16
  803f04:	91000204 	addi	r4,r18,8
  803f08:	b8800215 	stw	r2,8(r23)
  803f0c:	90c00117 	ldw	r3,4(r18)
  803f10:	008006c4 	movi	r2,27
  803f14:	b8c00315 	stw	r3,12(r23)
  803f18:	1180072e 	bgeu	r2,r6,803f38 <_realloc_r+0x4d8>
  803f1c:	90c00217 	ldw	r3,8(r18)
  803f20:	b9c00604 	addi	r7,r23,24
  803f24:	91000404 	addi	r4,r18,16
  803f28:	b8c00415 	stw	r3,16(r23)
  803f2c:	90800317 	ldw	r2,12(r18)
  803f30:	b8800515 	stw	r2,20(r23)
  803f34:	31404026 	beq	r6,r5,804038 <_realloc_r+0x5d8>
  803f38:	20800017 	ldw	r2,0(r4)
  803f3c:	38800015 	stw	r2,0(r7)
  803f40:	20c00117 	ldw	r3,4(r4)
  803f44:	38c00115 	stw	r3,4(r7)
  803f48:	20800217 	ldw	r2,8(r4)
  803f4c:	38800215 	stw	r2,8(r7)
  803f50:	d8c00117 	ldw	r3,4(sp)
  803f54:	bf0b883a 	add	r5,r23,fp
  803f58:	b009883a 	mov	r4,r22
  803f5c:	1f05c83a 	sub	r2,r3,fp
  803f60:	10800054 	ori	r2,r2,1
  803f64:	28800115 	stw	r2,4(r5)
  803f68:	b8c00117 	ldw	r3,4(r23)
  803f6c:	00802074 	movhi	r2,129
  803f70:	10a41004 	addi	r2,r2,-28608
  803f74:	11400215 	stw	r5,8(r2)
  803f78:	18c0004c 	andi	r3,r3,1
  803f7c:	e0c6b03a 	or	r3,fp,r3
  803f80:	b8c00115 	stw	r3,4(r23)
  803f84:	0804aac0 	call	804aac <__malloc_unlock>
  803f88:	003eeb06 	br	803b38 <_realloc_r+0xd8>
  803f8c:	20800117 	ldw	r2,4(r4)
  803f90:	00ffff04 	movi	r3,-4
  803f94:	800f883a 	mov	r7,r16
  803f98:	10c4703a 	and	r2,r2,r3
  803f9c:	98a9883a 	add	r20,r19,r2
  803fa0:	84000204 	addi	r16,r16,8
  803fa4:	003ecf06 	br	803ae4 <_realloc_r+0x84>
  803fa8:	900b883a 	mov	r5,r18
  803fac:	8009883a 	mov	r4,r16
  803fb0:	08038700 	call	803870 <memmove>
  803fb4:	dd000017 	ldw	r20,0(sp)
  803fb8:	b80f883a 	mov	r7,r23
  803fbc:	003ec906 	br	803ae4 <_realloc_r+0x84>
  803fc0:	900b883a 	mov	r5,r18
  803fc4:	8009883a 	mov	r4,r16
  803fc8:	08038700 	call	803870 <memmove>
  803fcc:	b80f883a 	mov	r7,r23
  803fd0:	003ec406 	br	803ae4 <_realloc_r+0x84>
  803fd4:	90c00417 	ldw	r3,16(r18)
  803fd8:	89400604 	addi	r5,r17,24
  803fdc:	91000604 	addi	r4,r18,24
  803fe0:	88c00415 	stw	r3,16(r17)
  803fe4:	90800517 	ldw	r2,20(r18)
  803fe8:	88800515 	stw	r2,20(r17)
  803fec:	003f6806 	br	803d90 <_realloc_r+0x330>
  803ff0:	900b883a 	mov	r5,r18
  803ff4:	8809883a 	mov	r4,r17
  803ff8:	08038700 	call	803870 <memmove>
  803ffc:	003fd406 	br	803f50 <_realloc_r+0x4f0>
  804000:	90c00417 	ldw	r3,16(r18)
  804004:	91000604 	addi	r4,r18,24
  804008:	ba000804 	addi	r8,r23,32
  80400c:	b8c00615 	stw	r3,24(r23)
  804010:	90800517 	ldw	r2,20(r18)
  804014:	b8800715 	stw	r2,28(r23)
  804018:	003f1206 	br	803c64 <_realloc_r+0x204>
  80401c:	90c00417 	ldw	r3,16(r18)
  804020:	91000604 	addi	r4,r18,24
  804024:	ba000804 	addi	r8,r23,32
  804028:	b8c00615 	stw	r3,24(r23)
  80402c:	90800517 	ldw	r2,20(r18)
  804030:	b8800715 	stw	r2,28(r23)
  804034:	003f3206 	br	803d00 <_realloc_r+0x2a0>
  804038:	90c00417 	ldw	r3,16(r18)
  80403c:	91000604 	addi	r4,r18,24
  804040:	b9c00804 	addi	r7,r23,32
  804044:	b8c00615 	stw	r3,24(r23)
  804048:	90800517 	ldw	r2,20(r18)
  80404c:	b8800715 	stw	r2,28(r23)
  804050:	003fb906 	br	803f38 <_realloc_r+0x4d8>

00804054 <__swsetup_r>:
  804054:	00802074 	movhi	r2,129
  804058:	10aa0d04 	addi	r2,r2,-22476
  80405c:	10c00017 	ldw	r3,0(r2)
  804060:	defffd04 	addi	sp,sp,-12
  804064:	dc400115 	stw	r17,4(sp)
  804068:	dc000015 	stw	r16,0(sp)
  80406c:	dfc00215 	stw	ra,8(sp)
  804070:	2023883a 	mov	r17,r4
  804074:	2821883a 	mov	r16,r5
  804078:	18000226 	beq	r3,zero,804084 <__swsetup_r+0x30>
  80407c:	18800e17 	ldw	r2,56(r3)
  804080:	10001f26 	beq	r2,zero,804100 <__swsetup_r+0xac>
  804084:	8100030b 	ldhu	r4,12(r16)
  804088:	2080020c 	andi	r2,r4,8
  80408c:	10002826 	beq	r2,zero,804130 <__swsetup_r+0xdc>
  804090:	81400417 	ldw	r5,16(r16)
  804094:	28001d26 	beq	r5,zero,80410c <__swsetup_r+0xb8>
  804098:	2080004c 	andi	r2,r4,1
  80409c:	1005003a 	cmpeq	r2,r2,zero
  8040a0:	10000b26 	beq	r2,zero,8040d0 <__swsetup_r+0x7c>
  8040a4:	2080008c 	andi	r2,r4,2
  8040a8:	10001226 	beq	r2,zero,8040f4 <__swsetup_r+0xa0>
  8040ac:	0005883a 	mov	r2,zero
  8040b0:	80800215 	stw	r2,8(r16)
  8040b4:	28000b26 	beq	r5,zero,8040e4 <__swsetup_r+0x90>
  8040b8:	0005883a 	mov	r2,zero
  8040bc:	dfc00217 	ldw	ra,8(sp)
  8040c0:	dc400117 	ldw	r17,4(sp)
  8040c4:	dc000017 	ldw	r16,0(sp)
  8040c8:	dec00304 	addi	sp,sp,12
  8040cc:	f800283a 	ret
  8040d0:	80800517 	ldw	r2,20(r16)
  8040d4:	80000215 	stw	zero,8(r16)
  8040d8:	0085c83a 	sub	r2,zero,r2
  8040dc:	80800615 	stw	r2,24(r16)
  8040e0:	283ff51e 	bne	r5,zero,8040b8 <__swsetup_r+0x64>
  8040e4:	2080200c 	andi	r2,r4,128
  8040e8:	103ff326 	beq	r2,zero,8040b8 <__swsetup_r+0x64>
  8040ec:	00bfffc4 	movi	r2,-1
  8040f0:	003ff206 	br	8040bc <__swsetup_r+0x68>
  8040f4:	80800517 	ldw	r2,20(r16)
  8040f8:	80800215 	stw	r2,8(r16)
  8040fc:	003fed06 	br	8040b4 <__swsetup_r+0x60>
  804100:	1809883a 	mov	r4,r3
  804104:	08028b00 	call	8028b0 <__sinit>
  804108:	003fde06 	br	804084 <__swsetup_r+0x30>
  80410c:	20c0a00c 	andi	r3,r4,640
  804110:	00808004 	movi	r2,512
  804114:	18bfe026 	beq	r3,r2,804098 <__swsetup_r+0x44>
  804118:	8809883a 	mov	r4,r17
  80411c:	800b883a 	mov	r5,r16
  804120:	08017200 	call	801720 <__smakebuf_r>
  804124:	8100030b 	ldhu	r4,12(r16)
  804128:	81400417 	ldw	r5,16(r16)
  80412c:	003fda06 	br	804098 <__swsetup_r+0x44>
  804130:	2080040c 	andi	r2,r4,16
  804134:	103fed26 	beq	r2,zero,8040ec <__swsetup_r+0x98>
  804138:	2080010c 	andi	r2,r4,4
  80413c:	10001226 	beq	r2,zero,804188 <__swsetup_r+0x134>
  804140:	81400c17 	ldw	r5,48(r16)
  804144:	28000526 	beq	r5,zero,80415c <__swsetup_r+0x108>
  804148:	80801004 	addi	r2,r16,64
  80414c:	28800226 	beq	r5,r2,804158 <__swsetup_r+0x104>
  804150:	8809883a 	mov	r4,r17
  804154:	0802cd40 	call	802cd4 <_free_r>
  804158:	80000c15 	stw	zero,48(r16)
  80415c:	8080030b 	ldhu	r2,12(r16)
  804160:	81400417 	ldw	r5,16(r16)
  804164:	80000115 	stw	zero,4(r16)
  804168:	10bff6cc 	andi	r2,r2,65499
  80416c:	8080030d 	sth	r2,12(r16)
  804170:	81400015 	stw	r5,0(r16)
  804174:	8080030b 	ldhu	r2,12(r16)
  804178:	10800214 	ori	r2,r2,8
  80417c:	113fffcc 	andi	r4,r2,65535
  804180:	8080030d 	sth	r2,12(r16)
  804184:	003fc306 	br	804094 <__swsetup_r+0x40>
  804188:	81400417 	ldw	r5,16(r16)
  80418c:	003ff906 	br	804174 <__swsetup_r+0x120>

00804190 <_fclose_r>:
  804190:	defffc04 	addi	sp,sp,-16
  804194:	dc400115 	stw	r17,4(sp)
  804198:	dc000015 	stw	r16,0(sp)
  80419c:	dfc00315 	stw	ra,12(sp)
  8041a0:	dc800215 	stw	r18,8(sp)
  8041a4:	2821883a 	mov	r16,r5
  8041a8:	2023883a 	mov	r17,r4
  8041ac:	28002926 	beq	r5,zero,804254 <_fclose_r+0xc4>
  8041b0:	08028a00 	call	8028a0 <__sfp_lock_acquire>
  8041b4:	88000226 	beq	r17,zero,8041c0 <_fclose_r+0x30>
  8041b8:	88800e17 	ldw	r2,56(r17)
  8041bc:	10002d26 	beq	r2,zero,804274 <_fclose_r+0xe4>
  8041c0:	8080030f 	ldh	r2,12(r16)
  8041c4:	10002226 	beq	r2,zero,804250 <_fclose_r+0xc0>
  8041c8:	8809883a 	mov	r4,r17
  8041cc:	800b883a 	mov	r5,r16
  8041d0:	08026180 	call	802618 <_fflush_r>
  8041d4:	1025883a 	mov	r18,r2
  8041d8:	80800b17 	ldw	r2,44(r16)
  8041dc:	10000426 	beq	r2,zero,8041f0 <_fclose_r+0x60>
  8041e0:	81400717 	ldw	r5,28(r16)
  8041e4:	8809883a 	mov	r4,r17
  8041e8:	103ee83a 	callr	r2
  8041ec:	10002a16 	blt	r2,zero,804298 <_fclose_r+0x108>
  8041f0:	8080030b 	ldhu	r2,12(r16)
  8041f4:	1080200c 	andi	r2,r2,128
  8041f8:	1000231e 	bne	r2,zero,804288 <_fclose_r+0xf8>
  8041fc:	81400c17 	ldw	r5,48(r16)
  804200:	28000526 	beq	r5,zero,804218 <_fclose_r+0x88>
  804204:	80801004 	addi	r2,r16,64
  804208:	28800226 	beq	r5,r2,804214 <_fclose_r+0x84>
  80420c:	8809883a 	mov	r4,r17
  804210:	0802cd40 	call	802cd4 <_free_r>
  804214:	80000c15 	stw	zero,48(r16)
  804218:	81401117 	ldw	r5,68(r16)
  80421c:	28000326 	beq	r5,zero,80422c <_fclose_r+0x9c>
  804220:	8809883a 	mov	r4,r17
  804224:	0802cd40 	call	802cd4 <_free_r>
  804228:	80001115 	stw	zero,68(r16)
  80422c:	8000030d 	sth	zero,12(r16)
  804230:	08028a40 	call	8028a4 <__sfp_lock_release>
  804234:	9005883a 	mov	r2,r18
  804238:	dfc00317 	ldw	ra,12(sp)
  80423c:	dc800217 	ldw	r18,8(sp)
  804240:	dc400117 	ldw	r17,4(sp)
  804244:	dc000017 	ldw	r16,0(sp)
  804248:	dec00404 	addi	sp,sp,16
  80424c:	f800283a 	ret
  804250:	08028a40 	call	8028a4 <__sfp_lock_release>
  804254:	0025883a 	mov	r18,zero
  804258:	9005883a 	mov	r2,r18
  80425c:	dfc00317 	ldw	ra,12(sp)
  804260:	dc800217 	ldw	r18,8(sp)
  804264:	dc400117 	ldw	r17,4(sp)
  804268:	dc000017 	ldw	r16,0(sp)
  80426c:	dec00404 	addi	sp,sp,16
  804270:	f800283a 	ret
  804274:	8809883a 	mov	r4,r17
  804278:	08028b00 	call	8028b0 <__sinit>
  80427c:	8080030f 	ldh	r2,12(r16)
  804280:	103fd11e 	bne	r2,zero,8041c8 <_fclose_r+0x38>
  804284:	003ff206 	br	804250 <_fclose_r+0xc0>
  804288:	81400417 	ldw	r5,16(r16)
  80428c:	8809883a 	mov	r4,r17
  804290:	0802cd40 	call	802cd4 <_free_r>
  804294:	003fd906 	br	8041fc <_fclose_r+0x6c>
  804298:	04bfffc4 	movi	r18,-1
  80429c:	003fd406 	br	8041f0 <_fclose_r+0x60>

008042a0 <fclose>:
  8042a0:	00802074 	movhi	r2,129
  8042a4:	10aa0d04 	addi	r2,r2,-22476
  8042a8:	200b883a 	mov	r5,r4
  8042ac:	11000017 	ldw	r4,0(r2)
  8042b0:	08041901 	jmpi	804190 <_fclose_r>

008042b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8042b4:	defff404 	addi	sp,sp,-48
  8042b8:	df000b15 	stw	fp,44(sp)
  8042bc:	df000b04 	addi	fp,sp,44
  8042c0:	e13ffb15 	stw	r4,-20(fp)
  8042c4:	e17ffc15 	stw	r5,-16(fp)
  8042c8:	e1bffd15 	stw	r6,-12(fp)
  8042cc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8042d0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8042d4:	00802074 	movhi	r2,129
  8042d8:	10b14504 	addi	r2,r2,-15084
  8042dc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  8042e0:	1005003a 	cmpeq	r2,r2,zero
  8042e4:	1000411e 	bne	r2,zero,8043ec <alt_alarm_start+0x138>
  {
    if (alarm)
  8042e8:	e0bffb17 	ldw	r2,-20(fp)
  8042ec:	1005003a 	cmpeq	r2,r2,zero
  8042f0:	10003b1e 	bne	r2,zero,8043e0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  8042f4:	e0fffb17 	ldw	r3,-20(fp)
  8042f8:	e0bffd17 	ldw	r2,-12(fp)
  8042fc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  804300:	e0fffb17 	ldw	r3,-20(fp)
  804304:	e0bffe17 	ldw	r2,-8(fp)
  804308:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80430c:	0005303a 	rdctl	r2,status
  804310:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804314:	e0fff817 	ldw	r3,-32(fp)
  804318:	00bfff84 	movi	r2,-2
  80431c:	1884703a 	and	r2,r3,r2
  804320:	1001703a 	wrctl	status,r2
  
  return context;
  804324:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  804328:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80432c:	00802074 	movhi	r2,129
  804330:	10b14604 	addi	r2,r2,-15080
  804334:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  804338:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80433c:	e0fffc17 	ldw	r3,-16(fp)
  804340:	e0bff917 	ldw	r2,-28(fp)
  804344:	1885883a 	add	r2,r3,r2
  804348:	10c00044 	addi	r3,r2,1
  80434c:	e0bffb17 	ldw	r2,-20(fp)
  804350:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804354:	e0bffb17 	ldw	r2,-20(fp)
  804358:	10c00217 	ldw	r3,8(r2)
  80435c:	e0bff917 	ldw	r2,-28(fp)
  804360:	1880042e 	bgeu	r3,r2,804374 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  804364:	e0fffb17 	ldw	r3,-20(fp)
  804368:	00800044 	movi	r2,1
  80436c:	18800405 	stb	r2,16(r3)
  804370:	00000206 	br	80437c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  804374:	e0bffb17 	ldw	r2,-20(fp)
  804378:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80437c:	e0fffb17 	ldw	r3,-20(fp)
  804380:	00802074 	movhi	r2,129
  804384:	10aa1804 	addi	r2,r2,-22432
  804388:	e0bff615 	stw	r2,-40(fp)
  80438c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  804390:	e0fff717 	ldw	r3,-36(fp)
  804394:	e0bff617 	ldw	r2,-40(fp)
  804398:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80439c:	e0bff617 	ldw	r2,-40(fp)
  8043a0:	10c00017 	ldw	r3,0(r2)
  8043a4:	e0bff717 	ldw	r2,-36(fp)
  8043a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8043ac:	e0bff617 	ldw	r2,-40(fp)
  8043b0:	10c00017 	ldw	r3,0(r2)
  8043b4:	e0bff717 	ldw	r2,-36(fp)
  8043b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8043bc:	e0fff617 	ldw	r3,-40(fp)
  8043c0:	e0bff717 	ldw	r2,-36(fp)
  8043c4:	18800015 	stw	r2,0(r3)
  8043c8:	e0bffa17 	ldw	r2,-24(fp)
  8043cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8043d0:	e0bff517 	ldw	r2,-44(fp)
  8043d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8043d8:	e03fff15 	stw	zero,-4(fp)
  8043dc:	00000506 	br	8043f4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  8043e0:	00bffa84 	movi	r2,-22
  8043e4:	e0bfff15 	stw	r2,-4(fp)
  8043e8:	00000206 	br	8043f4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  8043ec:	00bfde84 	movi	r2,-134
  8043f0:	e0bfff15 	stw	r2,-4(fp)
  8043f4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  8043f8:	e037883a 	mov	sp,fp
  8043fc:	df000017 	ldw	fp,0(sp)
  804400:	dec00104 	addi	sp,sp,4
  804404:	f800283a 	ret

00804408 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  804408:	defff804 	addi	sp,sp,-32
  80440c:	dfc00715 	stw	ra,28(sp)
  804410:	df000615 	stw	fp,24(sp)
  804414:	df000604 	addi	fp,sp,24
  804418:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80441c:	e0bffc17 	ldw	r2,-16(fp)
  804420:	1004803a 	cmplt	r2,r2,zero
  804424:	1000081e 	bne	r2,zero,804448 <close+0x40>
  804428:	e0bffc17 	ldw	r2,-16(fp)
  80442c:	10800324 	muli	r2,r2,12
  804430:	1007883a 	mov	r3,r2
  804434:	00802074 	movhi	r2,129
  804438:	10a51c04 	addi	r2,r2,-27536
  80443c:	1887883a 	add	r3,r3,r2
  804440:	e0ffff15 	stw	r3,-4(fp)
  804444:	00000106 	br	80444c <close+0x44>
  804448:	e03fff15 	stw	zero,-4(fp)
  80444c:	e0bfff17 	ldw	r2,-4(fp)
  804450:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  804454:	e0bffb17 	ldw	r2,-20(fp)
  804458:	1005003a 	cmpeq	r2,r2,zero
  80445c:	10001d1e 	bne	r2,zero,8044d4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  804460:	e0bffb17 	ldw	r2,-20(fp)
  804464:	10800017 	ldw	r2,0(r2)
  804468:	10800417 	ldw	r2,16(r2)
  80446c:	1005003a 	cmpeq	r2,r2,zero
  804470:	1000071e 	bne	r2,zero,804490 <close+0x88>
  804474:	e0bffb17 	ldw	r2,-20(fp)
  804478:	10800017 	ldw	r2,0(r2)
  80447c:	10800417 	ldw	r2,16(r2)
  804480:	e13ffb17 	ldw	r4,-20(fp)
  804484:	103ee83a 	callr	r2
  804488:	e0bffe15 	stw	r2,-8(fp)
  80448c:	00000106 	br	804494 <close+0x8c>
  804490:	e03ffe15 	stw	zero,-8(fp)
  804494:	e0bffe17 	ldw	r2,-8(fp)
  804498:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80449c:	e13ffc17 	ldw	r4,-16(fp)
  8044a0:	0804f100 	call	804f10 <alt_release_fd>
    if (rval < 0)
  8044a4:	e0bffa17 	ldw	r2,-24(fp)
  8044a8:	1004403a 	cmpge	r2,r2,zero
  8044ac:	1000071e 	bne	r2,zero,8044cc <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8044b0:	08045040 	call	804504 <alt_get_errno>
  8044b4:	e0fffa17 	ldw	r3,-24(fp)
  8044b8:	00c7c83a 	sub	r3,zero,r3
  8044bc:	10c00015 	stw	r3,0(r2)
      return -1;
  8044c0:	00bfffc4 	movi	r2,-1
  8044c4:	e0bffd15 	stw	r2,-12(fp)
  8044c8:	00000806 	br	8044ec <close+0xe4>
    }
    return 0;
  8044cc:	e03ffd15 	stw	zero,-12(fp)
  8044d0:	00000606 	br	8044ec <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8044d4:	08045040 	call	804504 <alt_get_errno>
  8044d8:	1007883a 	mov	r3,r2
  8044dc:	00801444 	movi	r2,81
  8044e0:	18800015 	stw	r2,0(r3)
    return -1;
  8044e4:	00bfffc4 	movi	r2,-1
  8044e8:	e0bffd15 	stw	r2,-12(fp)
  8044ec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  8044f0:	e037883a 	mov	sp,fp
  8044f4:	dfc00117 	ldw	ra,4(sp)
  8044f8:	df000017 	ldw	fp,0(sp)
  8044fc:	dec00204 	addi	sp,sp,8
  804500:	f800283a 	ret

00804504 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804504:	defffd04 	addi	sp,sp,-12
  804508:	dfc00215 	stw	ra,8(sp)
  80450c:	df000115 	stw	fp,4(sp)
  804510:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804514:	00802074 	movhi	r2,129
  804518:	10aa1604 	addi	r2,r2,-22440
  80451c:	10800017 	ldw	r2,0(r2)
  804520:	1005003a 	cmpeq	r2,r2,zero
  804524:	1000061e 	bne	r2,zero,804540 <alt_get_errno+0x3c>
  804528:	00802074 	movhi	r2,129
  80452c:	10aa1604 	addi	r2,r2,-22440
  804530:	10800017 	ldw	r2,0(r2)
  804534:	103ee83a 	callr	r2
  804538:	e0bfff15 	stw	r2,-4(fp)
  80453c:	00000306 	br	80454c <alt_get_errno+0x48>
  804540:	00802074 	movhi	r2,129
  804544:	10b13e04 	addi	r2,r2,-15112
  804548:	e0bfff15 	stw	r2,-4(fp)
  80454c:	e0bfff17 	ldw	r2,-4(fp)
}
  804550:	e037883a 	mov	sp,fp
  804554:	dfc00117 	ldw	ra,4(sp)
  804558:	df000017 	ldw	fp,0(sp)
  80455c:	dec00204 	addi	sp,sp,8
  804560:	f800283a 	ret

00804564 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  804564:	defffc04 	addi	sp,sp,-16
  804568:	df000315 	stw	fp,12(sp)
  80456c:	df000304 	addi	fp,sp,12
  804570:	e13ffd15 	stw	r4,-12(fp)
  804574:	e17ffe15 	stw	r5,-8(fp)
  804578:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80457c:	e0bfff17 	ldw	r2,-4(fp)
}
  804580:	e037883a 	mov	sp,fp
  804584:	df000017 	ldw	fp,0(sp)
  804588:	dec00104 	addi	sp,sp,4
  80458c:	f800283a 	ret

00804590 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  804590:	defff904 	addi	sp,sp,-28
  804594:	dfc00615 	stw	ra,24(sp)
  804598:	df000515 	stw	fp,20(sp)
  80459c:	df000504 	addi	fp,sp,20
  8045a0:	e13ffc15 	stw	r4,-16(fp)
  8045a4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8045a8:	e0bffc17 	ldw	r2,-16(fp)
  8045ac:	1004803a 	cmplt	r2,r2,zero
  8045b0:	1000081e 	bne	r2,zero,8045d4 <fstat+0x44>
  8045b4:	e0bffc17 	ldw	r2,-16(fp)
  8045b8:	10800324 	muli	r2,r2,12
  8045bc:	1007883a 	mov	r3,r2
  8045c0:	00802074 	movhi	r2,129
  8045c4:	10a51c04 	addi	r2,r2,-27536
  8045c8:	1887883a 	add	r3,r3,r2
  8045cc:	e0ffff15 	stw	r3,-4(fp)
  8045d0:	00000106 	br	8045d8 <fstat+0x48>
  8045d4:	e03fff15 	stw	zero,-4(fp)
  8045d8:	e0bfff17 	ldw	r2,-4(fp)
  8045dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8045e0:	e0bffb17 	ldw	r2,-20(fp)
  8045e4:	1005003a 	cmpeq	r2,r2,zero
  8045e8:	1000121e 	bne	r2,zero,804634 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8045ec:	e0bffb17 	ldw	r2,-20(fp)
  8045f0:	10800017 	ldw	r2,0(r2)
  8045f4:	10800817 	ldw	r2,32(r2)
  8045f8:	1005003a 	cmpeq	r2,r2,zero
  8045fc:	1000081e 	bne	r2,zero,804620 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  804600:	e0bffb17 	ldw	r2,-20(fp)
  804604:	10800017 	ldw	r2,0(r2)
  804608:	10800817 	ldw	r2,32(r2)
  80460c:	e13ffb17 	ldw	r4,-20(fp)
  804610:	e17ffd17 	ldw	r5,-12(fp)
  804614:	103ee83a 	callr	r2
  804618:	e0bffe15 	stw	r2,-8(fp)
  80461c:	00000b06 	br	80464c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  804620:	e0fffd17 	ldw	r3,-12(fp)
  804624:	00880004 	movi	r2,8192
  804628:	18800115 	stw	r2,4(r3)
      return 0;
  80462c:	e03ffe15 	stw	zero,-8(fp)
  804630:	00000606 	br	80464c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804634:	08046640 	call	804664 <alt_get_errno>
  804638:	1007883a 	mov	r3,r2
  80463c:	00801444 	movi	r2,81
  804640:	18800015 	stw	r2,0(r3)
    return -1;
  804644:	00bfffc4 	movi	r2,-1
  804648:	e0bffe15 	stw	r2,-8(fp)
  80464c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  804650:	e037883a 	mov	sp,fp
  804654:	dfc00117 	ldw	ra,4(sp)
  804658:	df000017 	ldw	fp,0(sp)
  80465c:	dec00204 	addi	sp,sp,8
  804660:	f800283a 	ret

00804664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804664:	defffd04 	addi	sp,sp,-12
  804668:	dfc00215 	stw	ra,8(sp)
  80466c:	df000115 	stw	fp,4(sp)
  804670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804674:	00802074 	movhi	r2,129
  804678:	10aa1604 	addi	r2,r2,-22440
  80467c:	10800017 	ldw	r2,0(r2)
  804680:	1005003a 	cmpeq	r2,r2,zero
  804684:	1000061e 	bne	r2,zero,8046a0 <alt_get_errno+0x3c>
  804688:	00802074 	movhi	r2,129
  80468c:	10aa1604 	addi	r2,r2,-22440
  804690:	10800017 	ldw	r2,0(r2)
  804694:	103ee83a 	callr	r2
  804698:	e0bfff15 	stw	r2,-4(fp)
  80469c:	00000306 	br	8046ac <alt_get_errno+0x48>
  8046a0:	00802074 	movhi	r2,129
  8046a4:	10b13e04 	addi	r2,r2,-15112
  8046a8:	e0bfff15 	stw	r2,-4(fp)
  8046ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8046b0:	e037883a 	mov	sp,fp
  8046b4:	dfc00117 	ldw	ra,4(sp)
  8046b8:	df000017 	ldw	fp,0(sp)
  8046bc:	dec00204 	addi	sp,sp,8
  8046c0:	f800283a 	ret

008046c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8046c4:	deffeb04 	addi	sp,sp,-84
  8046c8:	dfc01415 	stw	ra,80(sp)
  8046cc:	df001315 	stw	fp,76(sp)
  8046d0:	df001304 	addi	fp,sp,76
  8046d4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8046d8:	e0bffd17 	ldw	r2,-12(fp)
  8046dc:	1004803a 	cmplt	r2,r2,zero
  8046e0:	1000081e 	bne	r2,zero,804704 <isatty+0x40>
  8046e4:	e0bffd17 	ldw	r2,-12(fp)
  8046e8:	10800324 	muli	r2,r2,12
  8046ec:	1007883a 	mov	r3,r2
  8046f0:	00802074 	movhi	r2,129
  8046f4:	10a51c04 	addi	r2,r2,-27536
  8046f8:	1887883a 	add	r3,r3,r2
  8046fc:	e0ffff15 	stw	r3,-4(fp)
  804700:	00000106 	br	804708 <isatty+0x44>
  804704:	e03fff15 	stw	zero,-4(fp)
  804708:	e0bfff17 	ldw	r2,-4(fp)
  80470c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  804710:	e0bfed17 	ldw	r2,-76(fp)
  804714:	1005003a 	cmpeq	r2,r2,zero
  804718:	10000f1e 	bne	r2,zero,804758 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80471c:	e0bfed17 	ldw	r2,-76(fp)
  804720:	10800017 	ldw	r2,0(r2)
  804724:	10800817 	ldw	r2,32(r2)
  804728:	1004c03a 	cmpne	r2,r2,zero
  80472c:	1000031e 	bne	r2,zero,80473c <isatty+0x78>
    {
      return 1;
  804730:	00800044 	movi	r2,1
  804734:	e0bffe15 	stw	r2,-8(fp)
  804738:	00000c06 	br	80476c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80473c:	e17fee04 	addi	r5,fp,-72
  804740:	e13ffd17 	ldw	r4,-12(fp)
  804744:	08045900 	call	804590 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  804748:	e0bfef17 	ldw	r2,-68(fp)
  80474c:	10880020 	cmpeqi	r2,r2,8192
  804750:	e0bffe15 	stw	r2,-8(fp)
  804754:	00000506 	br	80476c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804758:	08047840 	call	804784 <alt_get_errno>
  80475c:	1007883a 	mov	r3,r2
  804760:	00801444 	movi	r2,81
  804764:	18800015 	stw	r2,0(r3)
    return 0;
  804768:	e03ffe15 	stw	zero,-8(fp)
  80476c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  804770:	e037883a 	mov	sp,fp
  804774:	dfc00117 	ldw	ra,4(sp)
  804778:	df000017 	ldw	fp,0(sp)
  80477c:	dec00204 	addi	sp,sp,8
  804780:	f800283a 	ret

00804784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804784:	defffd04 	addi	sp,sp,-12
  804788:	dfc00215 	stw	ra,8(sp)
  80478c:	df000115 	stw	fp,4(sp)
  804790:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804794:	00802074 	movhi	r2,129
  804798:	10aa1604 	addi	r2,r2,-22440
  80479c:	10800017 	ldw	r2,0(r2)
  8047a0:	1005003a 	cmpeq	r2,r2,zero
  8047a4:	1000061e 	bne	r2,zero,8047c0 <alt_get_errno+0x3c>
  8047a8:	00802074 	movhi	r2,129
  8047ac:	10aa1604 	addi	r2,r2,-22440
  8047b0:	10800017 	ldw	r2,0(r2)
  8047b4:	103ee83a 	callr	r2
  8047b8:	e0bfff15 	stw	r2,-4(fp)
  8047bc:	00000306 	br	8047cc <alt_get_errno+0x48>
  8047c0:	00802074 	movhi	r2,129
  8047c4:	10b13e04 	addi	r2,r2,-15112
  8047c8:	e0bfff15 	stw	r2,-4(fp)
  8047cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8047d0:	e037883a 	mov	sp,fp
  8047d4:	dfc00117 	ldw	ra,4(sp)
  8047d8:	df000017 	ldw	fp,0(sp)
  8047dc:	dec00204 	addi	sp,sp,8
  8047e0:	f800283a 	ret

008047e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8047e4:	defffe04 	addi	sp,sp,-8
  8047e8:	dfc00115 	stw	ra,4(sp)
  8047ec:	df000015 	stw	fp,0(sp)
  8047f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8047f4:	01002074 	movhi	r4,129
  8047f8:	212a1d04 	addi	r4,r4,-22412
  8047fc:	01402074 	movhi	r5,129
  804800:	29631004 	addi	r5,r5,-29632
  804804:	01802074 	movhi	r6,129
  804808:	31aa1d04 	addi	r6,r6,-22412
  80480c:	08048640 	call	804864 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  804810:	01002034 	movhi	r4,128
  804814:	21000804 	addi	r4,r4,32
  804818:	01402034 	movhi	r5,128
  80481c:	29400804 	addi	r5,r5,32
  804820:	01802034 	movhi	r6,128
  804824:	31806d04 	addi	r6,r6,436
  804828:	08048640 	call	804864 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80482c:	01002074 	movhi	r4,129
  804830:	21224d04 	addi	r4,r4,-30412
  804834:	01402074 	movhi	r5,129
  804838:	29624d04 	addi	r5,r5,-30412
  80483c:	01802074 	movhi	r6,129
  804840:	31a31004 	addi	r6,r6,-29632
  804844:	08048640 	call	804864 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  804848:	08078ec0 	call	8078ec <alt_dcache_flush_all>
  alt_icache_flush_all();
  80484c:	0807d780 	call	807d78 <alt_icache_flush_all>
}
  804850:	e037883a 	mov	sp,fp
  804854:	dfc00117 	ldw	ra,4(sp)
  804858:	df000017 	ldw	fp,0(sp)
  80485c:	dec00204 	addi	sp,sp,8
  804860:	f800283a 	ret

00804864 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  804864:	defffc04 	addi	sp,sp,-16
  804868:	df000315 	stw	fp,12(sp)
  80486c:	df000304 	addi	fp,sp,12
  804870:	e13ffd15 	stw	r4,-12(fp)
  804874:	e17ffe15 	stw	r5,-8(fp)
  804878:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80487c:	e0fffe17 	ldw	r3,-8(fp)
  804880:	e0bffd17 	ldw	r2,-12(fp)
  804884:	18800e26 	beq	r3,r2,8048c0 <alt_load_section+0x5c>
  {
    while( to != end )
  804888:	00000a06 	br	8048b4 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80488c:	e0bffd17 	ldw	r2,-12(fp)
  804890:	10c00017 	ldw	r3,0(r2)
  804894:	e0bffe17 	ldw	r2,-8(fp)
  804898:	10c00015 	stw	r3,0(r2)
  80489c:	e0bffe17 	ldw	r2,-8(fp)
  8048a0:	10800104 	addi	r2,r2,4
  8048a4:	e0bffe15 	stw	r2,-8(fp)
  8048a8:	e0bffd17 	ldw	r2,-12(fp)
  8048ac:	10800104 	addi	r2,r2,4
  8048b0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8048b4:	e0fffe17 	ldw	r3,-8(fp)
  8048b8:	e0bfff17 	ldw	r2,-4(fp)
  8048bc:	18bff31e 	bne	r3,r2,80488c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8048c0:	e037883a 	mov	sp,fp
  8048c4:	df000017 	ldw	fp,0(sp)
  8048c8:	dec00104 	addi	sp,sp,4
  8048cc:	f800283a 	ret

008048d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8048d0:	defff804 	addi	sp,sp,-32
  8048d4:	dfc00715 	stw	ra,28(sp)
  8048d8:	df000615 	stw	fp,24(sp)
  8048dc:	df000604 	addi	fp,sp,24
  8048e0:	e13ffc15 	stw	r4,-16(fp)
  8048e4:	e17ffd15 	stw	r5,-12(fp)
  8048e8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8048ec:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8048f0:	e0bffc17 	ldw	r2,-16(fp)
  8048f4:	1004803a 	cmplt	r2,r2,zero
  8048f8:	1000081e 	bne	r2,zero,80491c <lseek+0x4c>
  8048fc:	e0bffc17 	ldw	r2,-16(fp)
  804900:	10800324 	muli	r2,r2,12
  804904:	1007883a 	mov	r3,r2
  804908:	00802074 	movhi	r2,129
  80490c:	10a51c04 	addi	r2,r2,-27536
  804910:	1887883a 	add	r3,r3,r2
  804914:	e0ffff15 	stw	r3,-4(fp)
  804918:	00000106 	br	804920 <lseek+0x50>
  80491c:	e03fff15 	stw	zero,-4(fp)
  804920:	e0bfff17 	ldw	r2,-4(fp)
  804924:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  804928:	e0bffb17 	ldw	r2,-20(fp)
  80492c:	1005003a 	cmpeq	r2,r2,zero
  804930:	1000111e 	bne	r2,zero,804978 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  804934:	e0bffb17 	ldw	r2,-20(fp)
  804938:	10800017 	ldw	r2,0(r2)
  80493c:	10800717 	ldw	r2,28(r2)
  804940:	1005003a 	cmpeq	r2,r2,zero
  804944:	1000091e 	bne	r2,zero,80496c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  804948:	e0bffb17 	ldw	r2,-20(fp)
  80494c:	10800017 	ldw	r2,0(r2)
  804950:	10800717 	ldw	r2,28(r2)
  804954:	e13ffb17 	ldw	r4,-20(fp)
  804958:	e17ffd17 	ldw	r5,-12(fp)
  80495c:	e1bffe17 	ldw	r6,-8(fp)
  804960:	103ee83a 	callr	r2
  804964:	e0bffa15 	stw	r2,-24(fp)
  804968:	00000506 	br	804980 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80496c:	00bfde84 	movi	r2,-134
  804970:	e0bffa15 	stw	r2,-24(fp)
  804974:	00000206 	br	804980 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  804978:	00bfebc4 	movi	r2,-81
  80497c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  804980:	e0bffa17 	ldw	r2,-24(fp)
  804984:	1004403a 	cmpge	r2,r2,zero
  804988:	1000071e 	bne	r2,zero,8049a8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80498c:	08049c00 	call	8049c0 <alt_get_errno>
  804990:	1007883a 	mov	r3,r2
  804994:	e0bffa17 	ldw	r2,-24(fp)
  804998:	0085c83a 	sub	r2,zero,r2
  80499c:	18800015 	stw	r2,0(r3)
    rc = -1;
  8049a0:	00bfffc4 	movi	r2,-1
  8049a4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8049a8:	e0bffa17 	ldw	r2,-24(fp)
}
  8049ac:	e037883a 	mov	sp,fp
  8049b0:	dfc00117 	ldw	ra,4(sp)
  8049b4:	df000017 	ldw	fp,0(sp)
  8049b8:	dec00204 	addi	sp,sp,8
  8049bc:	f800283a 	ret

008049c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8049c0:	defffd04 	addi	sp,sp,-12
  8049c4:	dfc00215 	stw	ra,8(sp)
  8049c8:	df000115 	stw	fp,4(sp)
  8049cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8049d0:	00802074 	movhi	r2,129
  8049d4:	10aa1604 	addi	r2,r2,-22440
  8049d8:	10800017 	ldw	r2,0(r2)
  8049dc:	1005003a 	cmpeq	r2,r2,zero
  8049e0:	1000061e 	bne	r2,zero,8049fc <alt_get_errno+0x3c>
  8049e4:	00802074 	movhi	r2,129
  8049e8:	10aa1604 	addi	r2,r2,-22440
  8049ec:	10800017 	ldw	r2,0(r2)
  8049f0:	103ee83a 	callr	r2
  8049f4:	e0bfff15 	stw	r2,-4(fp)
  8049f8:	00000306 	br	804a08 <alt_get_errno+0x48>
  8049fc:	00802074 	movhi	r2,129
  804a00:	10b13e04 	addi	r2,r2,-15112
  804a04:	e0bfff15 	stw	r2,-4(fp)
  804a08:	e0bfff17 	ldw	r2,-4(fp)
}
  804a0c:	e037883a 	mov	sp,fp
  804a10:	dfc00117 	ldw	ra,4(sp)
  804a14:	df000017 	ldw	fp,0(sp)
  804a18:	dec00204 	addi	sp,sp,8
  804a1c:	f800283a 	ret

00804a20 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804a20:	defffd04 	addi	sp,sp,-12
  804a24:	dfc00215 	stw	ra,8(sp)
  804a28:	df000115 	stw	fp,4(sp)
  804a2c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804a30:	0009883a 	mov	r4,zero
  804a34:	08053500 	call	805350 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  804a38:	08053840 	call	805384 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  804a3c:	01002074 	movhi	r4,129
  804a40:	21226104 	addi	r4,r4,-30332
  804a44:	01402074 	movhi	r5,129
  804a48:	29626104 	addi	r5,r5,-30332
  804a4c:	01802074 	movhi	r6,129
  804a50:	31a26104 	addi	r6,r6,-30332
  804a54:	08081380 	call	808138 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  804a58:	0807a440 	call	807a44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  804a5c:	01002034 	movhi	r4,128
  804a60:	211eaa04 	addi	r4,r4,31400
  804a64:	08083dc0 	call	8083dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  804a68:	d1273517 	ldw	r4,-25388(gp)
  804a6c:	d1673617 	ldw	r5,-25384(gp)
  804a70:	d1a73717 	ldw	r6,-25380(gp)
  804a74:	08004dc0 	call	8004dc <main>
  804a78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  804a7c:	01000044 	movi	r4,1
  804a80:	08044080 	call	804408 <close>
  exit (result);
  804a84:	e13fff17 	ldw	r4,-4(fp)
  804a88:	08083f00 	call	8083f0 <exit>

00804a8c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  804a8c:	defffe04 	addi	sp,sp,-8
  804a90:	df000115 	stw	fp,4(sp)
  804a94:	df000104 	addi	fp,sp,4
  804a98:	e13fff15 	stw	r4,-4(fp)
}
  804a9c:	e037883a 	mov	sp,fp
  804aa0:	df000017 	ldw	fp,0(sp)
  804aa4:	dec00104 	addi	sp,sp,4
  804aa8:	f800283a 	ret

00804aac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  804aac:	defffe04 	addi	sp,sp,-8
  804ab0:	df000115 	stw	fp,4(sp)
  804ab4:	df000104 	addi	fp,sp,4
  804ab8:	e13fff15 	stw	r4,-4(fp)
}
  804abc:	e037883a 	mov	sp,fp
  804ac0:	df000017 	ldw	fp,0(sp)
  804ac4:	dec00104 	addi	sp,sp,4
  804ac8:	f800283a 	ret

00804acc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  804acc:	defffc04 	addi	sp,sp,-16
  804ad0:	df000315 	stw	fp,12(sp)
  804ad4:	df000304 	addi	fp,sp,12
  804ad8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804adc:	e0bffe17 	ldw	r2,-8(fp)
  804ae0:	10800217 	ldw	r2,8(r2)
  804ae4:	10d00034 	orhi	r3,r2,16384
  804ae8:	e0bffe17 	ldw	r2,-8(fp)
  804aec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804af0:	e03ffd15 	stw	zero,-12(fp)
  804af4:	00002006 	br	804b78 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804af8:	e0bffd17 	ldw	r2,-12(fp)
  804afc:	00c02074 	movhi	r3,129
  804b00:	18e51c04 	addi	r3,r3,-27536
  804b04:	10800324 	muli	r2,r2,12
  804b08:	10c5883a 	add	r2,r2,r3
  804b0c:	10c00017 	ldw	r3,0(r2)
  804b10:	e0bffe17 	ldw	r2,-8(fp)
  804b14:	10800017 	ldw	r2,0(r2)
  804b18:	1880141e 	bne	r3,r2,804b6c <alt_file_locked+0xa0>
  804b1c:	e0bffd17 	ldw	r2,-12(fp)
  804b20:	00c02074 	movhi	r3,129
  804b24:	18e51c04 	addi	r3,r3,-27536
  804b28:	10800324 	muli	r2,r2,12
  804b2c:	10c5883a 	add	r2,r2,r3
  804b30:	10800204 	addi	r2,r2,8
  804b34:	10800017 	ldw	r2,0(r2)
  804b38:	1004403a 	cmpge	r2,r2,zero
  804b3c:	10000b1e 	bne	r2,zero,804b6c <alt_file_locked+0xa0>
  804b40:	e0bffd17 	ldw	r2,-12(fp)
  804b44:	10800324 	muli	r2,r2,12
  804b48:	1007883a 	mov	r3,r2
  804b4c:	00802074 	movhi	r2,129
  804b50:	10a51c04 	addi	r2,r2,-27536
  804b54:	1887883a 	add	r3,r3,r2
  804b58:	e0bffe17 	ldw	r2,-8(fp)
  804b5c:	18800326 	beq	r3,r2,804b6c <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804b60:	00bffcc4 	movi	r2,-13
  804b64:	e0bfff15 	stw	r2,-4(fp)
  804b68:	00000a06 	br	804b94 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804b6c:	e0bffd17 	ldw	r2,-12(fp)
  804b70:	10800044 	addi	r2,r2,1
  804b74:	e0bffd15 	stw	r2,-12(fp)
  804b78:	00802074 	movhi	r2,129
  804b7c:	10aa1504 	addi	r2,r2,-22444
  804b80:	10800017 	ldw	r2,0(r2)
  804b84:	1007883a 	mov	r3,r2
  804b88:	e0bffd17 	ldw	r2,-12(fp)
  804b8c:	18bfda2e 	bgeu	r3,r2,804af8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804b90:	e03fff15 	stw	zero,-4(fp)
  804b94:	e0bfff17 	ldw	r2,-4(fp)
}
  804b98:	e037883a 	mov	sp,fp
  804b9c:	df000017 	ldw	fp,0(sp)
  804ba0:	dec00104 	addi	sp,sp,4
  804ba4:	f800283a 	ret

00804ba8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804ba8:	defff404 	addi	sp,sp,-48
  804bac:	dfc00b15 	stw	ra,44(sp)
  804bb0:	df000a15 	stw	fp,40(sp)
  804bb4:	df000a04 	addi	fp,sp,40
  804bb8:	e13ffb15 	stw	r4,-20(fp)
  804bbc:	e17ffc15 	stw	r5,-16(fp)
  804bc0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804bc4:	00bfffc4 	movi	r2,-1
  804bc8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  804bcc:	00bffb44 	movi	r2,-19
  804bd0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  804bd4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804bd8:	e13ffb17 	ldw	r4,-20(fp)
  804bdc:	01402074 	movhi	r5,129
  804be0:	296a1304 	addi	r5,r5,-22452
  804be4:	0807b0c0 	call	807b0c <alt_find_dev>
  804be8:	e0bffa15 	stw	r2,-24(fp)
  804bec:	e0bffa17 	ldw	r2,-24(fp)
  804bf0:	1004c03a 	cmpne	r2,r2,zero
  804bf4:	1000051e 	bne	r2,zero,804c0c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804bf8:	e13ffb17 	ldw	r4,-20(fp)
  804bfc:	0807ba00 	call	807ba0 <alt_find_file>
  804c00:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  804c04:	00800044 	movi	r2,1
  804c08:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804c0c:	e0bffa17 	ldw	r2,-24(fp)
  804c10:	1005003a 	cmpeq	r2,r2,zero
  804c14:	1000301e 	bne	r2,zero,804cd8 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804c18:	e13ffa17 	ldw	r4,-24(fp)
  804c1c:	0807cc00 	call	807cc0 <alt_get_fd>
  804c20:	e0bff815 	stw	r2,-32(fp)
  804c24:	e0bff817 	ldw	r2,-32(fp)
  804c28:	1004403a 	cmpge	r2,r2,zero
  804c2c:	1000031e 	bne	r2,zero,804c3c <open+0x94>
    {
      status = index;
  804c30:	e0bff817 	ldw	r2,-32(fp)
  804c34:	e0bff715 	stw	r2,-36(fp)
  804c38:	00002906 	br	804ce0 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  804c3c:	e0bff817 	ldw	r2,-32(fp)
  804c40:	10800324 	muli	r2,r2,12
  804c44:	1007883a 	mov	r3,r2
  804c48:	00802074 	movhi	r2,129
  804c4c:	10a51c04 	addi	r2,r2,-27536
  804c50:	1885883a 	add	r2,r3,r2
  804c54:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  804c58:	e0fffc17 	ldw	r3,-16(fp)
  804c5c:	00900034 	movhi	r2,16384
  804c60:	10bfffc4 	addi	r2,r2,-1
  804c64:	1886703a 	and	r3,r3,r2
  804c68:	e0bff917 	ldw	r2,-28(fp)
  804c6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804c70:	e0bff617 	ldw	r2,-40(fp)
  804c74:	1004c03a 	cmpne	r2,r2,zero
  804c78:	1000061e 	bne	r2,zero,804c94 <open+0xec>
  804c7c:	e13ff917 	ldw	r4,-28(fp)
  804c80:	0804acc0 	call	804acc <alt_file_locked>
  804c84:	e0bff715 	stw	r2,-36(fp)
  804c88:	e0bff717 	ldw	r2,-36(fp)
  804c8c:	1004803a 	cmplt	r2,r2,zero
  804c90:	1000131e 	bne	r2,zero,804ce0 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804c94:	e0bffa17 	ldw	r2,-24(fp)
  804c98:	10800317 	ldw	r2,12(r2)
  804c9c:	1005003a 	cmpeq	r2,r2,zero
  804ca0:	1000091e 	bne	r2,zero,804cc8 <open+0x120>
  804ca4:	e0bffa17 	ldw	r2,-24(fp)
  804ca8:	10800317 	ldw	r2,12(r2)
  804cac:	e13ff917 	ldw	r4,-28(fp)
  804cb0:	e17ffb17 	ldw	r5,-20(fp)
  804cb4:	e1bffc17 	ldw	r6,-16(fp)
  804cb8:	e1fffd17 	ldw	r7,-12(fp)
  804cbc:	103ee83a 	callr	r2
  804cc0:	e0bfff15 	stw	r2,-4(fp)
  804cc4:	00000106 	br	804ccc <open+0x124>
  804cc8:	e03fff15 	stw	zero,-4(fp)
  804ccc:	e0bfff17 	ldw	r2,-4(fp)
  804cd0:	e0bff715 	stw	r2,-36(fp)
  804cd4:	00000206 	br	804ce0 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  804cd8:	00bffb44 	movi	r2,-19
  804cdc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804ce0:	e0bff717 	ldw	r2,-36(fp)
  804ce4:	1004403a 	cmpge	r2,r2,zero
  804ce8:	1000091e 	bne	r2,zero,804d10 <open+0x168>
  {
    alt_release_fd (index);  
  804cec:	e13ff817 	ldw	r4,-32(fp)
  804cf0:	0804f100 	call	804f10 <alt_release_fd>
    ALT_ERRNO = -status;
  804cf4:	0804d300 	call	804d30 <alt_get_errno>
  804cf8:	e0fff717 	ldw	r3,-36(fp)
  804cfc:	00c7c83a 	sub	r3,zero,r3
  804d00:	10c00015 	stw	r3,0(r2)
    return -1;
  804d04:	00bfffc4 	movi	r2,-1
  804d08:	e0bffe15 	stw	r2,-8(fp)
  804d0c:	00000206 	br	804d18 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  804d10:	e0bff817 	ldw	r2,-32(fp)
  804d14:	e0bffe15 	stw	r2,-8(fp)
  804d18:	e0bffe17 	ldw	r2,-8(fp)
}
  804d1c:	e037883a 	mov	sp,fp
  804d20:	dfc00117 	ldw	ra,4(sp)
  804d24:	df000017 	ldw	fp,0(sp)
  804d28:	dec00204 	addi	sp,sp,8
  804d2c:	f800283a 	ret

00804d30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804d30:	defffd04 	addi	sp,sp,-12
  804d34:	dfc00215 	stw	ra,8(sp)
  804d38:	df000115 	stw	fp,4(sp)
  804d3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804d40:	00802074 	movhi	r2,129
  804d44:	10aa1604 	addi	r2,r2,-22440
  804d48:	10800017 	ldw	r2,0(r2)
  804d4c:	1005003a 	cmpeq	r2,r2,zero
  804d50:	1000061e 	bne	r2,zero,804d6c <alt_get_errno+0x3c>
  804d54:	00802074 	movhi	r2,129
  804d58:	10aa1604 	addi	r2,r2,-22440
  804d5c:	10800017 	ldw	r2,0(r2)
  804d60:	103ee83a 	callr	r2
  804d64:	e0bfff15 	stw	r2,-4(fp)
  804d68:	00000306 	br	804d78 <alt_get_errno+0x48>
  804d6c:	00802074 	movhi	r2,129
  804d70:	10b13e04 	addi	r2,r2,-15112
  804d74:	e0bfff15 	stw	r2,-4(fp)
  804d78:	e0bfff17 	ldw	r2,-4(fp)
}
  804d7c:	e037883a 	mov	sp,fp
  804d80:	dfc00117 	ldw	ra,4(sp)
  804d84:	df000017 	ldw	fp,0(sp)
  804d88:	dec00204 	addi	sp,sp,8
  804d8c:	f800283a 	ret

00804d90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  804d90:	defff704 	addi	sp,sp,-36
  804d94:	dfc00815 	stw	ra,32(sp)
  804d98:	df000715 	stw	fp,28(sp)
  804d9c:	df000704 	addi	fp,sp,28
  804da0:	e13ffb15 	stw	r4,-20(fp)
  804da4:	e17ffc15 	stw	r5,-16(fp)
  804da8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804dac:	e0bffb17 	ldw	r2,-20(fp)
  804db0:	1004803a 	cmplt	r2,r2,zero
  804db4:	1000081e 	bne	r2,zero,804dd8 <read+0x48>
  804db8:	e0bffb17 	ldw	r2,-20(fp)
  804dbc:	10800324 	muli	r2,r2,12
  804dc0:	1007883a 	mov	r3,r2
  804dc4:	00802074 	movhi	r2,129
  804dc8:	10a51c04 	addi	r2,r2,-27536
  804dcc:	1887883a 	add	r3,r3,r2
  804dd0:	e0ffff15 	stw	r3,-4(fp)
  804dd4:	00000106 	br	804ddc <read+0x4c>
  804dd8:	e03fff15 	stw	zero,-4(fp)
  804ddc:	e0bfff17 	ldw	r2,-4(fp)
  804de0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  804de4:	e0bffa17 	ldw	r2,-24(fp)
  804de8:	1005003a 	cmpeq	r2,r2,zero
  804dec:	1000241e 	bne	r2,zero,804e80 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  804df0:	e0bffa17 	ldw	r2,-24(fp)
  804df4:	10800217 	ldw	r2,8(r2)
  804df8:	108000cc 	andi	r2,r2,3
  804dfc:	10800060 	cmpeqi	r2,r2,1
  804e00:	10001a1e 	bne	r2,zero,804e6c <read+0xdc>
  804e04:	e0bffa17 	ldw	r2,-24(fp)
  804e08:	10800017 	ldw	r2,0(r2)
  804e0c:	10800517 	ldw	r2,20(r2)
  804e10:	1005003a 	cmpeq	r2,r2,zero
  804e14:	1000151e 	bne	r2,zero,804e6c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  804e18:	e0bffa17 	ldw	r2,-24(fp)
  804e1c:	10800017 	ldw	r2,0(r2)
  804e20:	10800517 	ldw	r2,20(r2)
  804e24:	e17ffc17 	ldw	r5,-16(fp)
  804e28:	e1bffd17 	ldw	r6,-12(fp)
  804e2c:	e13ffa17 	ldw	r4,-24(fp)
  804e30:	103ee83a 	callr	r2
  804e34:	e0bff915 	stw	r2,-28(fp)
  804e38:	e0bff917 	ldw	r2,-28(fp)
  804e3c:	1004403a 	cmpge	r2,r2,zero
  804e40:	1000071e 	bne	r2,zero,804e60 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  804e44:	0804eb00 	call	804eb0 <alt_get_errno>
  804e48:	e0fff917 	ldw	r3,-28(fp)
  804e4c:	00c7c83a 	sub	r3,zero,r3
  804e50:	10c00015 	stw	r3,0(r2)
          return -1;
  804e54:	00bfffc4 	movi	r2,-1
  804e58:	e0bffe15 	stw	r2,-8(fp)
  804e5c:	00000e06 	br	804e98 <read+0x108>
        }
        return rval;
  804e60:	e0bff917 	ldw	r2,-28(fp)
  804e64:	e0bffe15 	stw	r2,-8(fp)
  804e68:	00000b06 	br	804e98 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  804e6c:	0804eb00 	call	804eb0 <alt_get_errno>
  804e70:	1007883a 	mov	r3,r2
  804e74:	00800344 	movi	r2,13
  804e78:	18800015 	stw	r2,0(r3)
  804e7c:	00000406 	br	804e90 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  804e80:	0804eb00 	call	804eb0 <alt_get_errno>
  804e84:	1007883a 	mov	r3,r2
  804e88:	00801444 	movi	r2,81
  804e8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804e90:	00bfffc4 	movi	r2,-1
  804e94:	e0bffe15 	stw	r2,-8(fp)
  804e98:	e0bffe17 	ldw	r2,-8(fp)
}
  804e9c:	e037883a 	mov	sp,fp
  804ea0:	dfc00117 	ldw	ra,4(sp)
  804ea4:	df000017 	ldw	fp,0(sp)
  804ea8:	dec00204 	addi	sp,sp,8
  804eac:	f800283a 	ret

00804eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804eb0:	defffd04 	addi	sp,sp,-12
  804eb4:	dfc00215 	stw	ra,8(sp)
  804eb8:	df000115 	stw	fp,4(sp)
  804ebc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804ec0:	00802074 	movhi	r2,129
  804ec4:	10aa1604 	addi	r2,r2,-22440
  804ec8:	10800017 	ldw	r2,0(r2)
  804ecc:	1005003a 	cmpeq	r2,r2,zero
  804ed0:	1000061e 	bne	r2,zero,804eec <alt_get_errno+0x3c>
  804ed4:	00802074 	movhi	r2,129
  804ed8:	10aa1604 	addi	r2,r2,-22440
  804edc:	10800017 	ldw	r2,0(r2)
  804ee0:	103ee83a 	callr	r2
  804ee4:	e0bfff15 	stw	r2,-4(fp)
  804ee8:	00000306 	br	804ef8 <alt_get_errno+0x48>
  804eec:	00802074 	movhi	r2,129
  804ef0:	10b13e04 	addi	r2,r2,-15112
  804ef4:	e0bfff15 	stw	r2,-4(fp)
  804ef8:	e0bfff17 	ldw	r2,-4(fp)
}
  804efc:	e037883a 	mov	sp,fp
  804f00:	dfc00117 	ldw	ra,4(sp)
  804f04:	df000017 	ldw	fp,0(sp)
  804f08:	dec00204 	addi	sp,sp,8
  804f0c:	f800283a 	ret

00804f10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  804f10:	defffe04 	addi	sp,sp,-8
  804f14:	df000115 	stw	fp,4(sp)
  804f18:	df000104 	addi	fp,sp,4
  804f1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  804f20:	e0bfff17 	ldw	r2,-4(fp)
  804f24:	108000d0 	cmplti	r2,r2,3
  804f28:	10000d1e 	bne	r2,zero,804f60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  804f2c:	e0bfff17 	ldw	r2,-4(fp)
  804f30:	00c02074 	movhi	r3,129
  804f34:	18e51c04 	addi	r3,r3,-27536
  804f38:	10800324 	muli	r2,r2,12
  804f3c:	10c5883a 	add	r2,r2,r3
  804f40:	10800204 	addi	r2,r2,8
  804f44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  804f48:	e0bfff17 	ldw	r2,-4(fp)
  804f4c:	00c02074 	movhi	r3,129
  804f50:	18e51c04 	addi	r3,r3,-27536
  804f54:	10800324 	muli	r2,r2,12
  804f58:	10c5883a 	add	r2,r2,r3
  804f5c:	10000015 	stw	zero,0(r2)
  }
}
  804f60:	e037883a 	mov	sp,fp
  804f64:	df000017 	ldw	fp,0(sp)
  804f68:	dec00104 	addi	sp,sp,4
  804f6c:	f800283a 	ret

00804f70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  804f70:	defff804 	addi	sp,sp,-32
  804f74:	df000715 	stw	fp,28(sp)
  804f78:	df000704 	addi	fp,sp,28
  804f7c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f80:	0005303a 	rdctl	r2,status
  804f84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f88:	e0fffb17 	ldw	r3,-20(fp)
  804f8c:	00bfff84 	movi	r2,-2
  804f90:	1884703a 	and	r2,r3,r2
  804f94:	1001703a 	wrctl	status,r2
  
  return context;
  804f98:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  804f9c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804fa0:	d0a00a17 	ldw	r2,-32728(gp)
  804fa4:	10c000c4 	addi	r3,r2,3
  804fa8:	00bfff04 	movi	r2,-4
  804fac:	1884703a 	and	r2,r3,r2
  804fb0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804fb4:	d0e00a17 	ldw	r3,-32728(gp)
  804fb8:	e0bffe17 	ldw	r2,-8(fp)
  804fbc:	1887883a 	add	r3,r3,r2
  804fc0:	00804034 	movhi	r2,256
  804fc4:	10800004 	addi	r2,r2,0
  804fc8:	10c0072e 	bgeu	r2,r3,804fe8 <sbrk+0x78>
  804fcc:	e0bffd17 	ldw	r2,-12(fp)
  804fd0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804fd4:	e0bffa17 	ldw	r2,-24(fp)
  804fd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804fdc:	00bfffc4 	movi	r2,-1
  804fe0:	e0bfff15 	stw	r2,-4(fp)
  804fe4:	00000c06 	br	805018 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  804fe8:	d0a00a17 	ldw	r2,-32728(gp)
  804fec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  804ff0:	d0e00a17 	ldw	r3,-32728(gp)
  804ff4:	e0bffe17 	ldw	r2,-8(fp)
  804ff8:	1885883a 	add	r2,r3,r2
  804ffc:	d0a00a15 	stw	r2,-32728(gp)
  805000:	e0bffd17 	ldw	r2,-12(fp)
  805004:	e0bff915 	stw	r2,-28(fp)
  805008:	e0bff917 	ldw	r2,-28(fp)
  80500c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  805010:	e0bffc17 	ldw	r2,-16(fp)
  805014:	e0bfff15 	stw	r2,-4(fp)
  805018:	e0bfff17 	ldw	r2,-4(fp)
} 
  80501c:	e037883a 	mov	sp,fp
  805020:	df000017 	ldw	fp,0(sp)
  805024:	dec00104 	addi	sp,sp,4
  805028:	f800283a 	ret

0080502c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80502c:	defffa04 	addi	sp,sp,-24
  805030:	df000515 	stw	fp,20(sp)
  805034:	df000504 	addi	fp,sp,20
  805038:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80503c:	0005303a 	rdctl	r2,status
  805040:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805044:	e0fffd17 	ldw	r3,-12(fp)
  805048:	00bfff84 	movi	r2,-2
  80504c:	1884703a 	and	r2,r3,r2
  805050:	1001703a 	wrctl	status,r2
  
  return context;
  805054:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  805058:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80505c:	e0bfff17 	ldw	r2,-4(fp)
  805060:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  805064:	e0bffc17 	ldw	r2,-16(fp)
  805068:	10c00017 	ldw	r3,0(r2)
  80506c:	e0bffc17 	ldw	r2,-16(fp)
  805070:	10800117 	ldw	r2,4(r2)
  805074:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  805078:	e0bffc17 	ldw	r2,-16(fp)
  80507c:	10c00117 	ldw	r3,4(r2)
  805080:	e0bffc17 	ldw	r2,-16(fp)
  805084:	10800017 	ldw	r2,0(r2)
  805088:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80508c:	e0fffc17 	ldw	r3,-16(fp)
  805090:	e0bffc17 	ldw	r2,-16(fp)
  805094:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  805098:	e0fffc17 	ldw	r3,-16(fp)
  80509c:	e0bffc17 	ldw	r2,-16(fp)
  8050a0:	18800015 	stw	r2,0(r3)
  8050a4:	e0bffe17 	ldw	r2,-8(fp)
  8050a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8050ac:	e0bffb17 	ldw	r2,-20(fp)
  8050b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8050b4:	e037883a 	mov	sp,fp
  8050b8:	df000017 	ldw	fp,0(sp)
  8050bc:	dec00104 	addi	sp,sp,4
  8050c0:	f800283a 	ret

008050c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8050c4:	defffb04 	addi	sp,sp,-20
  8050c8:	dfc00415 	stw	ra,16(sp)
  8050cc:	df000315 	stw	fp,12(sp)
  8050d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8050d4:	d0a00b17 	ldw	r2,-32724(gp)
  8050d8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8050dc:	d0a73917 	ldw	r2,-25372(gp)
  8050e0:	10800044 	addi	r2,r2,1
  8050e4:	d0a73915 	stw	r2,-25372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8050e8:	00003106 	br	8051b0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8050ec:	e0bffe17 	ldw	r2,-8(fp)
  8050f0:	10800017 	ldw	r2,0(r2)
  8050f4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8050f8:	e0bffe17 	ldw	r2,-8(fp)
  8050fc:	10800403 	ldbu	r2,16(r2)
  805100:	10803fcc 	andi	r2,r2,255
  805104:	1005003a 	cmpeq	r2,r2,zero
  805108:	1000051e 	bne	r2,zero,805120 <alt_tick+0x5c>
  80510c:	d0a73917 	ldw	r2,-25372(gp)
  805110:	1004c03a 	cmpne	r2,r2,zero
  805114:	1000021e 	bne	r2,zero,805120 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  805118:	e0bffe17 	ldw	r2,-8(fp)
  80511c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805120:	e0bffe17 	ldw	r2,-8(fp)
  805124:	10c00217 	ldw	r3,8(r2)
  805128:	d0a73917 	ldw	r2,-25372(gp)
  80512c:	10c01e36 	bltu	r2,r3,8051a8 <alt_tick+0xe4>
  805130:	e0bffe17 	ldw	r2,-8(fp)
  805134:	10800403 	ldbu	r2,16(r2)
  805138:	10803fcc 	andi	r2,r2,255
  80513c:	1004c03a 	cmpne	r2,r2,zero
  805140:	1000191e 	bne	r2,zero,8051a8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  805144:	e0bffe17 	ldw	r2,-8(fp)
  805148:	10c00317 	ldw	r3,12(r2)
  80514c:	e0bffe17 	ldw	r2,-8(fp)
  805150:	11000517 	ldw	r4,20(r2)
  805154:	183ee83a 	callr	r3
  805158:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80515c:	e0bffd17 	ldw	r2,-12(fp)
  805160:	1004c03a 	cmpne	r2,r2,zero
  805164:	1000031e 	bne	r2,zero,805174 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  805168:	e13ffe17 	ldw	r4,-8(fp)
  80516c:	080502c0 	call	80502c <alt_alarm_stop>
  805170:	00000d06 	br	8051a8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  805174:	e0bffe17 	ldw	r2,-8(fp)
  805178:	10c00217 	ldw	r3,8(r2)
  80517c:	e0bffd17 	ldw	r2,-12(fp)
  805180:	1887883a 	add	r3,r3,r2
  805184:	e0bffe17 	ldw	r2,-8(fp)
  805188:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80518c:	e0bffe17 	ldw	r2,-8(fp)
  805190:	10c00217 	ldw	r3,8(r2)
  805194:	d0a73917 	ldw	r2,-25372(gp)
  805198:	1880032e 	bgeu	r3,r2,8051a8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80519c:	e0fffe17 	ldw	r3,-8(fp)
  8051a0:	00800044 	movi	r2,1
  8051a4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8051a8:	e0bfff17 	ldw	r2,-4(fp)
  8051ac:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8051b0:	d0e00b04 	addi	r3,gp,-32724
  8051b4:	e0bffe17 	ldw	r2,-8(fp)
  8051b8:	10ffcc1e 	bne	r2,r3,8050ec <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8051bc:	e037883a 	mov	sp,fp
  8051c0:	dfc00117 	ldw	ra,4(sp)
  8051c4:	df000017 	ldw	fp,0(sp)
  8051c8:	dec00204 	addi	sp,sp,8
  8051cc:	f800283a 	ret

008051d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8051d0:	defff704 	addi	sp,sp,-36
  8051d4:	dfc00815 	stw	ra,32(sp)
  8051d8:	df000715 	stw	fp,28(sp)
  8051dc:	df000704 	addi	fp,sp,28
  8051e0:	e13ffb15 	stw	r4,-20(fp)
  8051e4:	e17ffc15 	stw	r5,-16(fp)
  8051e8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8051ec:	e0bffb17 	ldw	r2,-20(fp)
  8051f0:	1004803a 	cmplt	r2,r2,zero
  8051f4:	1000081e 	bne	r2,zero,805218 <write+0x48>
  8051f8:	e0bffb17 	ldw	r2,-20(fp)
  8051fc:	10800324 	muli	r2,r2,12
  805200:	1007883a 	mov	r3,r2
  805204:	00802074 	movhi	r2,129
  805208:	10a51c04 	addi	r2,r2,-27536
  80520c:	1887883a 	add	r3,r3,r2
  805210:	e0ffff15 	stw	r3,-4(fp)
  805214:	00000106 	br	80521c <write+0x4c>
  805218:	e03fff15 	stw	zero,-4(fp)
  80521c:	e0bfff17 	ldw	r2,-4(fp)
  805220:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  805224:	e0bffa17 	ldw	r2,-24(fp)
  805228:	1005003a 	cmpeq	r2,r2,zero
  80522c:	1000241e 	bne	r2,zero,8052c0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  805230:	e0bffa17 	ldw	r2,-24(fp)
  805234:	10800217 	ldw	r2,8(r2)
  805238:	108000cc 	andi	r2,r2,3
  80523c:	1005003a 	cmpeq	r2,r2,zero
  805240:	10001a1e 	bne	r2,zero,8052ac <write+0xdc>
  805244:	e0bffa17 	ldw	r2,-24(fp)
  805248:	10800017 	ldw	r2,0(r2)
  80524c:	10800617 	ldw	r2,24(r2)
  805250:	1005003a 	cmpeq	r2,r2,zero
  805254:	1000151e 	bne	r2,zero,8052ac <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  805258:	e0bffa17 	ldw	r2,-24(fp)
  80525c:	10800017 	ldw	r2,0(r2)
  805260:	10800617 	ldw	r2,24(r2)
  805264:	e17ffc17 	ldw	r5,-16(fp)
  805268:	e1bffd17 	ldw	r6,-12(fp)
  80526c:	e13ffa17 	ldw	r4,-24(fp)
  805270:	103ee83a 	callr	r2
  805274:	e0bff915 	stw	r2,-28(fp)
  805278:	e0bff917 	ldw	r2,-28(fp)
  80527c:	1004403a 	cmpge	r2,r2,zero
  805280:	1000071e 	bne	r2,zero,8052a0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  805284:	08052f00 	call	8052f0 <alt_get_errno>
  805288:	e0fff917 	ldw	r3,-28(fp)
  80528c:	00c7c83a 	sub	r3,zero,r3
  805290:	10c00015 	stw	r3,0(r2)
        return -1;
  805294:	00bfffc4 	movi	r2,-1
  805298:	e0bffe15 	stw	r2,-8(fp)
  80529c:	00000e06 	br	8052d8 <write+0x108>
      }
      return rval;
  8052a0:	e0bff917 	ldw	r2,-28(fp)
  8052a4:	e0bffe15 	stw	r2,-8(fp)
  8052a8:	00000b06 	br	8052d8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8052ac:	08052f00 	call	8052f0 <alt_get_errno>
  8052b0:	1007883a 	mov	r3,r2
  8052b4:	00800344 	movi	r2,13
  8052b8:	18800015 	stw	r2,0(r3)
  8052bc:	00000406 	br	8052d0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8052c0:	08052f00 	call	8052f0 <alt_get_errno>
  8052c4:	1007883a 	mov	r3,r2
  8052c8:	00801444 	movi	r2,81
  8052cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8052d0:	00bfffc4 	movi	r2,-1
  8052d4:	e0bffe15 	stw	r2,-8(fp)
  8052d8:	e0bffe17 	ldw	r2,-8(fp)
}
  8052dc:	e037883a 	mov	sp,fp
  8052e0:	dfc00117 	ldw	ra,4(sp)
  8052e4:	df000017 	ldw	fp,0(sp)
  8052e8:	dec00204 	addi	sp,sp,8
  8052ec:	f800283a 	ret

008052f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8052f0:	defffd04 	addi	sp,sp,-12
  8052f4:	dfc00215 	stw	ra,8(sp)
  8052f8:	df000115 	stw	fp,4(sp)
  8052fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805300:	00802074 	movhi	r2,129
  805304:	10aa1604 	addi	r2,r2,-22440
  805308:	10800017 	ldw	r2,0(r2)
  80530c:	1005003a 	cmpeq	r2,r2,zero
  805310:	1000061e 	bne	r2,zero,80532c <alt_get_errno+0x3c>
  805314:	00802074 	movhi	r2,129
  805318:	10aa1604 	addi	r2,r2,-22440
  80531c:	10800017 	ldw	r2,0(r2)
  805320:	103ee83a 	callr	r2
  805324:	e0bfff15 	stw	r2,-4(fp)
  805328:	00000306 	br	805338 <alt_get_errno+0x48>
  80532c:	00802074 	movhi	r2,129
  805330:	10b13e04 	addi	r2,r2,-15112
  805334:	e0bfff15 	stw	r2,-4(fp)
  805338:	e0bfff17 	ldw	r2,-4(fp)
}
  80533c:	e037883a 	mov	sp,fp
  805340:	dfc00117 	ldw	ra,4(sp)
  805344:	df000017 	ldw	fp,0(sp)
  805348:	dec00204 	addi	sp,sp,8
  80534c:	f800283a 	ret

00805350 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  805350:	defffd04 	addi	sp,sp,-12
  805354:	dfc00215 	stw	ra,8(sp)
  805358:	df000115 	stw	fp,4(sp)
  80535c:	df000104 	addi	fp,sp,4
  805360:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  805364:	08081e00 	call	8081e0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  805368:	00800044 	movi	r2,1
  80536c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  805370:	e037883a 	mov	sp,fp
  805374:	dfc00117 	ldw	ra,4(sp)
  805378:	df000017 	ldw	fp,0(sp)
  80537c:	dec00204 	addi	sp,sp,8
  805380:	f800283a 	ret

00805384 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  805384:	defffe04 	addi	sp,sp,-8
  805388:	dfc00115 	stw	ra,4(sp)
  80538c:	df000015 	stw	fp,0(sp)
  805390:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  805394:	01004074 	movhi	r4,257
  805398:	21040804 	addi	r4,r4,4128
  80539c:	000b883a 	mov	r5,zero
  8053a0:	01800084 	movi	r6,2
  8053a4:	01c0fa04 	movi	r7,1000
  8053a8:	0806eac0 	call	806eac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8053ac:	01002074 	movhi	r4,129
  8053b0:	21258604 	addi	r4,r4,-27112
  8053b4:	000b883a 	mov	r5,zero
  8053b8:	01800044 	movi	r6,1
  8053bc:	08055980 	call	805598 <altera_avalon_jtag_uart_init>
  8053c0:	01002074 	movhi	r4,129
  8053c4:	21257c04 	addi	r4,r4,-27152
  8053c8:	08054180 	call	805418 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8053cc:	01002074 	movhi	r4,129
  8053d0:	21299e04 	addi	r4,r4,-22920
  8053d4:	0806ca80 	call	806ca8 <altera_avalon_lcd_16207_init>
  8053d8:	01002074 	movhi	r4,129
  8053dc:	21299404 	addi	r4,r4,-22960
  8053e0:	08054180 	call	805418 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8053e4:	01002074 	movhi	r4,129
  8053e8:	2129e604 	addi	r4,r4,-22632
  8053ec:	000b883a 	mov	r5,zero
  8053f0:	000d883a 	mov	r6,zero
  8053f4:	08070340 	call	807034 <altera_avalon_uart_init>
  8053f8:	01002074 	movhi	r4,129
  8053fc:	2129dc04 	addi	r4,r4,-22672
  805400:	08054180 	call	805418 <alt_dev_reg>
}
  805404:	e037883a 	mov	sp,fp
  805408:	dfc00117 	ldw	ra,4(sp)
  80540c:	df000017 	ldw	fp,0(sp)
  805410:	dec00204 	addi	sp,sp,8
  805414:	f800283a 	ret

00805418 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  805418:	defffd04 	addi	sp,sp,-12
  80541c:	dfc00215 	stw	ra,8(sp)
  805420:	df000115 	stw	fp,4(sp)
  805424:	df000104 	addi	fp,sp,4
  805428:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80542c:	e13fff17 	ldw	r4,-4(fp)
  805430:	01402074 	movhi	r5,129
  805434:	296a1304 	addi	r5,r5,-22452
  805438:	08079300 	call	807930 <alt_dev_llist_insert>
}
  80543c:	e037883a 	mov	sp,fp
  805440:	dfc00117 	ldw	ra,4(sp)
  805444:	df000017 	ldw	fp,0(sp)
  805448:	dec00204 	addi	sp,sp,8
  80544c:	f800283a 	ret

00805450 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  805450:	defffa04 	addi	sp,sp,-24
  805454:	dfc00515 	stw	ra,20(sp)
  805458:	df000415 	stw	fp,16(sp)
  80545c:	df000404 	addi	fp,sp,16
  805460:	e13ffd15 	stw	r4,-12(fp)
  805464:	e17ffe15 	stw	r5,-8(fp)
  805468:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80546c:	e0bffd17 	ldw	r2,-12(fp)
  805470:	10800017 	ldw	r2,0(r2)
  805474:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  805478:	e0bffc17 	ldw	r2,-16(fp)
  80547c:	11000a04 	addi	r4,r2,40
  805480:	e0bffd17 	ldw	r2,-12(fp)
  805484:	11c00217 	ldw	r7,8(r2)
  805488:	e17ffe17 	ldw	r5,-8(fp)
  80548c:	e1bfff17 	ldw	r6,-4(fp)
  805490:	0805a980 	call	805a98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  805494:	e037883a 	mov	sp,fp
  805498:	dfc00117 	ldw	ra,4(sp)
  80549c:	df000017 	ldw	fp,0(sp)
  8054a0:	dec00204 	addi	sp,sp,8
  8054a4:	f800283a 	ret

008054a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8054a8:	defffa04 	addi	sp,sp,-24
  8054ac:	dfc00515 	stw	ra,20(sp)
  8054b0:	df000415 	stw	fp,16(sp)
  8054b4:	df000404 	addi	fp,sp,16
  8054b8:	e13ffd15 	stw	r4,-12(fp)
  8054bc:	e17ffe15 	stw	r5,-8(fp)
  8054c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	10800017 	ldw	r2,0(r2)
  8054cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8054d0:	e0bffc17 	ldw	r2,-16(fp)
  8054d4:	11000a04 	addi	r4,r2,40
  8054d8:	e0bffd17 	ldw	r2,-12(fp)
  8054dc:	11c00217 	ldw	r7,8(r2)
  8054e0:	e17ffe17 	ldw	r5,-8(fp)
  8054e4:	e1bfff17 	ldw	r6,-4(fp)
  8054e8:	0805cbc0 	call	805cbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8054ec:	e037883a 	mov	sp,fp
  8054f0:	dfc00117 	ldw	ra,4(sp)
  8054f4:	df000017 	ldw	fp,0(sp)
  8054f8:	dec00204 	addi	sp,sp,8
  8054fc:	f800283a 	ret

00805500 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  805500:	defffc04 	addi	sp,sp,-16
  805504:	dfc00315 	stw	ra,12(sp)
  805508:	df000215 	stw	fp,8(sp)
  80550c:	df000204 	addi	fp,sp,8
  805510:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  805514:	e0bfff17 	ldw	r2,-4(fp)
  805518:	10800017 	ldw	r2,0(r2)
  80551c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  805520:	e0bffe17 	ldw	r2,-8(fp)
  805524:	11000a04 	addi	r4,r2,40
  805528:	e0bfff17 	ldw	r2,-4(fp)
  80552c:	11400217 	ldw	r5,8(r2)
  805530:	08059300 	call	805930 <altera_avalon_jtag_uart_close>
}
  805534:	e037883a 	mov	sp,fp
  805538:	dfc00117 	ldw	ra,4(sp)
  80553c:	df000017 	ldw	fp,0(sp)
  805540:	dec00204 	addi	sp,sp,8
  805544:	f800283a 	ret

00805548 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  805548:	defffa04 	addi	sp,sp,-24
  80554c:	dfc00515 	stw	ra,20(sp)
  805550:	df000415 	stw	fp,16(sp)
  805554:	df000404 	addi	fp,sp,16
  805558:	e13ffd15 	stw	r4,-12(fp)
  80555c:	e17ffe15 	stw	r5,-8(fp)
  805560:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  805564:	e0bffd17 	ldw	r2,-12(fp)
  805568:	10800017 	ldw	r2,0(r2)
  80556c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  805570:	e0bffc17 	ldw	r2,-16(fp)
  805574:	11000a04 	addi	r4,r2,40
  805578:	e17ffe17 	ldw	r5,-8(fp)
  80557c:	e1bfff17 	ldw	r6,-4(fp)
  805580:	08059a40 	call	8059a4 <altera_avalon_jtag_uart_ioctl>
}
  805584:	e037883a 	mov	sp,fp
  805588:	dfc00117 	ldw	ra,4(sp)
  80558c:	df000017 	ldw	fp,0(sp)
  805590:	dec00204 	addi	sp,sp,8
  805594:	f800283a 	ret

00805598 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  805598:	defffa04 	addi	sp,sp,-24
  80559c:	dfc00515 	stw	ra,20(sp)
  8055a0:	df000415 	stw	fp,16(sp)
  8055a4:	df000404 	addi	fp,sp,16
  8055a8:	e13ffd15 	stw	r4,-12(fp)
  8055ac:	e17ffe15 	stw	r5,-8(fp)
  8055b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8055b4:	e0fffd17 	ldw	r3,-12(fp)
  8055b8:	00800044 	movi	r2,1
  8055bc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8055c0:	e0bffd17 	ldw	r2,-12(fp)
  8055c4:	10800017 	ldw	r2,0(r2)
  8055c8:	11000104 	addi	r4,r2,4
  8055cc:	e0bffd17 	ldw	r2,-12(fp)
  8055d0:	10800817 	ldw	r2,32(r2)
  8055d4:	1007883a 	mov	r3,r2
  8055d8:	2005883a 	mov	r2,r4
  8055dc:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8055e0:	e13ffe17 	ldw	r4,-8(fp)
  8055e4:	e17fff17 	ldw	r5,-4(fp)
  8055e8:	d8000015 	stw	zero,0(sp)
  8055ec:	01802034 	movhi	r6,128
  8055f0:	31959604 	addi	r6,r6,22104
  8055f4:	e1fffd17 	ldw	r7,-12(fp)
  8055f8:	0807da80 	call	807da8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8055fc:	e0bffd17 	ldw	r2,-12(fp)
  805600:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  805604:	e0bffd17 	ldw	r2,-12(fp)
  805608:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80560c:	00802074 	movhi	r2,129
  805610:	10b14504 	addi	r2,r2,-15084
  805614:	10800017 	ldw	r2,0(r2)
  805618:	100b883a 	mov	r5,r2
  80561c:	01802034 	movhi	r6,128
  805620:	31962004 	addi	r6,r6,22656
  805624:	e1fffd17 	ldw	r7,-12(fp)
  805628:	08042b40 	call	8042b4 <alt_alarm_start>
  80562c:	1004403a 	cmpge	r2,r2,zero
  805630:	1000041e 	bne	r2,zero,805644 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  805634:	e0fffd17 	ldw	r3,-12(fp)
  805638:	00a00034 	movhi	r2,32768
  80563c:	10bfffc4 	addi	r2,r2,-1
  805640:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  805644:	e037883a 	mov	sp,fp
  805648:	dfc00117 	ldw	ra,4(sp)
  80564c:	df000017 	ldw	fp,0(sp)
  805650:	dec00204 	addi	sp,sp,8
  805654:	f800283a 	ret

00805658 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  805658:	defff804 	addi	sp,sp,-32
  80565c:	df000715 	stw	fp,28(sp)
  805660:	df000704 	addi	fp,sp,28
  805664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  805668:	e0bfff17 	ldw	r2,-4(fp)
  80566c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  805670:	e0bffe17 	ldw	r2,-8(fp)
  805674:	10800017 	ldw	r2,0(r2)
  805678:	e0bffd15 	stw	r2,-12(fp)
  80567c:	00000006 	br	805680 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805680:	e0bffd17 	ldw	r2,-12(fp)
  805684:	10800104 	addi	r2,r2,4
  805688:	10800037 	ldwio	r2,0(r2)
  80568c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  805690:	e0bffc17 	ldw	r2,-16(fp)
  805694:	1080c00c 	andi	r2,r2,768
  805698:	1005003a 	cmpeq	r2,r2,zero
  80569c:	1000741e 	bne	r2,zero,805870 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8056a0:	e0bffc17 	ldw	r2,-16(fp)
  8056a4:	1080400c 	andi	r2,r2,256
  8056a8:	1005003a 	cmpeq	r2,r2,zero
  8056ac:	1000351e 	bne	r2,zero,805784 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8056b0:	00800074 	movhi	r2,1
  8056b4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8056b8:	e0bffe17 	ldw	r2,-8(fp)
  8056bc:	10800a17 	ldw	r2,40(r2)
  8056c0:	10800044 	addi	r2,r2,1
  8056c4:	1081ffcc 	andi	r2,r2,2047
  8056c8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8056cc:	e0bffe17 	ldw	r2,-8(fp)
  8056d0:	10c00b17 	ldw	r3,44(r2)
  8056d4:	e0bffa17 	ldw	r2,-24(fp)
  8056d8:	18801626 	beq	r3,r2,805734 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8056dc:	e0bffd17 	ldw	r2,-12(fp)
  8056e0:	10800037 	ldwio	r2,0(r2)
  8056e4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8056e8:	e0bffb17 	ldw	r2,-20(fp)
  8056ec:	10a0000c 	andi	r2,r2,32768
  8056f0:	1005003a 	cmpeq	r2,r2,zero
  8056f4:	10000f1e 	bne	r2,zero,805734 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8056f8:	e0bffe17 	ldw	r2,-8(fp)
  8056fc:	10c00a17 	ldw	r3,40(r2)
  805700:	e0bffb17 	ldw	r2,-20(fp)
  805704:	1009883a 	mov	r4,r2
  805708:	e0bffe17 	ldw	r2,-8(fp)
  80570c:	1885883a 	add	r2,r3,r2
  805710:	10800e04 	addi	r2,r2,56
  805714:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805718:	e0bffe17 	ldw	r2,-8(fp)
  80571c:	10800a17 	ldw	r2,40(r2)
  805720:	10800044 	addi	r2,r2,1
  805724:	10c1ffcc 	andi	r3,r2,2047
  805728:	e0bffe17 	ldw	r2,-8(fp)
  80572c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  805730:	003fe106 	br	8056b8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  805734:	e0bffb17 	ldw	r2,-20(fp)
  805738:	10bfffec 	andhi	r2,r2,65535
  80573c:	1005003a 	cmpeq	r2,r2,zero
  805740:	1000101e 	bne	r2,zero,805784 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805744:	e0bffe17 	ldw	r2,-8(fp)
  805748:	10c00817 	ldw	r3,32(r2)
  80574c:	00bfff84 	movi	r2,-2
  805750:	1886703a 	and	r3,r3,r2
  805754:	e0bffe17 	ldw	r2,-8(fp)
  805758:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80575c:	e0bffd17 	ldw	r2,-12(fp)
  805760:	11000104 	addi	r4,r2,4
  805764:	e0bffe17 	ldw	r2,-8(fp)
  805768:	10800817 	ldw	r2,32(r2)
  80576c:	1007883a 	mov	r3,r2
  805770:	2005883a 	mov	r2,r4
  805774:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805778:	e0bffd17 	ldw	r2,-12(fp)
  80577c:	10800104 	addi	r2,r2,4
  805780:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  805784:	e0bffc17 	ldw	r2,-16(fp)
  805788:	1080800c 	andi	r2,r2,512
  80578c:	1005003a 	cmpeq	r2,r2,zero
  805790:	103fbb1e 	bne	r2,zero,805680 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  805794:	e0bffc17 	ldw	r2,-16(fp)
  805798:	10bfffec 	andhi	r2,r2,65535
  80579c:	1004d43a 	srli	r2,r2,16
  8057a0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8057a4:	00001506 	br	8057fc <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8057a8:	e13ffd17 	ldw	r4,-12(fp)
  8057ac:	e0bffe17 	ldw	r2,-8(fp)
  8057b0:	10c00d17 	ldw	r3,52(r2)
  8057b4:	e0bffe17 	ldw	r2,-8(fp)
  8057b8:	1885883a 	add	r2,r3,r2
  8057bc:	10820e04 	addi	r2,r2,2104
  8057c0:	10800003 	ldbu	r2,0(r2)
  8057c4:	10c03fcc 	andi	r3,r2,255
  8057c8:	18c0201c 	xori	r3,r3,128
  8057cc:	18ffe004 	addi	r3,r3,-128
  8057d0:	2005883a 	mov	r2,r4
  8057d4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8057d8:	e0bffe17 	ldw	r2,-8(fp)
  8057dc:	10800d17 	ldw	r2,52(r2)
  8057e0:	10800044 	addi	r2,r2,1
  8057e4:	10c1ffcc 	andi	r3,r2,2047
  8057e8:	e0bffe17 	ldw	r2,-8(fp)
  8057ec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8057f0:	e0bff917 	ldw	r2,-28(fp)
  8057f4:	10bfffc4 	addi	r2,r2,-1
  8057f8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8057fc:	e0bff917 	ldw	r2,-28(fp)
  805800:	1005003a 	cmpeq	r2,r2,zero
  805804:	1000051e 	bne	r2,zero,80581c <altera_avalon_jtag_uart_irq+0x1c4>
  805808:	e0bffe17 	ldw	r2,-8(fp)
  80580c:	10c00d17 	ldw	r3,52(r2)
  805810:	e0bffe17 	ldw	r2,-8(fp)
  805814:	10800c17 	ldw	r2,48(r2)
  805818:	18bfe31e 	bne	r3,r2,8057a8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80581c:	e0bff917 	ldw	r2,-28(fp)
  805820:	1005003a 	cmpeq	r2,r2,zero
  805824:	103f961e 	bne	r2,zero,805680 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  805828:	e0bffe17 	ldw	r2,-8(fp)
  80582c:	10c00817 	ldw	r3,32(r2)
  805830:	00bfff44 	movi	r2,-3
  805834:	1886703a 	and	r3,r3,r2
  805838:	e0bffe17 	ldw	r2,-8(fp)
  80583c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805840:	e0bffe17 	ldw	r2,-8(fp)
  805844:	10800017 	ldw	r2,0(r2)
  805848:	11000104 	addi	r4,r2,4
  80584c:	e0bffe17 	ldw	r2,-8(fp)
  805850:	10800817 	ldw	r2,32(r2)
  805854:	1007883a 	mov	r3,r2
  805858:	2005883a 	mov	r2,r4
  80585c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805860:	e0bffd17 	ldw	r2,-12(fp)
  805864:	10800104 	addi	r2,r2,4
  805868:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80586c:	003f8406 	br	805680 <altera_avalon_jtag_uart_irq+0x28>
}
  805870:	e037883a 	mov	sp,fp
  805874:	df000017 	ldw	fp,0(sp)
  805878:	dec00104 	addi	sp,sp,4
  80587c:	f800283a 	ret

00805880 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  805880:	defffc04 	addi	sp,sp,-16
  805884:	df000315 	stw	fp,12(sp)
  805888:	df000304 	addi	fp,sp,12
  80588c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  805890:	e0bfff17 	ldw	r2,-4(fp)
  805894:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  805898:	e0bffe17 	ldw	r2,-8(fp)
  80589c:	10800017 	ldw	r2,0(r2)
  8058a0:	10800104 	addi	r2,r2,4
  8058a4:	10800037 	ldwio	r2,0(r2)
  8058a8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8058ac:	e0bffd17 	ldw	r2,-12(fp)
  8058b0:	1081000c 	andi	r2,r2,1024
  8058b4:	1005003a 	cmpeq	r2,r2,zero
  8058b8:	10000c1e 	bne	r2,zero,8058ec <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8058bc:	e0bffe17 	ldw	r2,-8(fp)
  8058c0:	10800017 	ldw	r2,0(r2)
  8058c4:	11000104 	addi	r4,r2,4
  8058c8:	e0bffe17 	ldw	r2,-8(fp)
  8058cc:	10800817 	ldw	r2,32(r2)
  8058d0:	10810014 	ori	r2,r2,1024
  8058d4:	1007883a 	mov	r3,r2
  8058d8:	2005883a 	mov	r2,r4
  8058dc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  8058e0:	e0bffe17 	ldw	r2,-8(fp)
  8058e4:	10000915 	stw	zero,36(r2)
  8058e8:	00000a06 	br	805914 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8058ec:	e0bffe17 	ldw	r2,-8(fp)
  8058f0:	10c00917 	ldw	r3,36(r2)
  8058f4:	00a00034 	movhi	r2,32768
  8058f8:	10bfff04 	addi	r2,r2,-4
  8058fc:	10c00536 	bltu	r2,r3,805914 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  805900:	e0bffe17 	ldw	r2,-8(fp)
  805904:	10800917 	ldw	r2,36(r2)
  805908:	10c00044 	addi	r3,r2,1
  80590c:	e0bffe17 	ldw	r2,-8(fp)
  805910:	10c00915 	stw	r3,36(r2)
  805914:	00802074 	movhi	r2,129
  805918:	10b14504 	addi	r2,r2,-15084
  80591c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  805920:	e037883a 	mov	sp,fp
  805924:	df000017 	ldw	fp,0(sp)
  805928:	dec00104 	addi	sp,sp,4
  80592c:	f800283a 	ret

00805930 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  805930:	defffc04 	addi	sp,sp,-16
  805934:	df000315 	stw	fp,12(sp)
  805938:	df000304 	addi	fp,sp,12
  80593c:	e13ffd15 	stw	r4,-12(fp)
  805940:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805944:	00000706 	br	805964 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  805948:	e0bffe17 	ldw	r2,-8(fp)
  80594c:	1090000c 	andi	r2,r2,16384
  805950:	1005003a 	cmpeq	r2,r2,zero
  805954:	1000031e 	bne	r2,zero,805964 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  805958:	00bffd44 	movi	r2,-11
  80595c:	e0bfff15 	stw	r2,-4(fp)
  805960:	00000b06 	br	805990 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805964:	e0bffd17 	ldw	r2,-12(fp)
  805968:	10c00d17 	ldw	r3,52(r2)
  80596c:	e0bffd17 	ldw	r2,-12(fp)
  805970:	10800c17 	ldw	r2,48(r2)
  805974:	18800526 	beq	r3,r2,80598c <altera_avalon_jtag_uart_close+0x5c>
  805978:	e0bffd17 	ldw	r2,-12(fp)
  80597c:	10c00917 	ldw	r3,36(r2)
  805980:	e0bffd17 	ldw	r2,-12(fp)
  805984:	10800117 	ldw	r2,4(r2)
  805988:	18bfef36 	bltu	r3,r2,805948 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80598c:	e03fff15 	stw	zero,-4(fp)
  805990:	e0bfff17 	ldw	r2,-4(fp)
}
  805994:	e037883a 	mov	sp,fp
  805998:	df000017 	ldw	fp,0(sp)
  80599c:	dec00104 	addi	sp,sp,4
  8059a0:	f800283a 	ret

008059a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8059a4:	defff804 	addi	sp,sp,-32
  8059a8:	df000715 	stw	fp,28(sp)
  8059ac:	df000704 	addi	fp,sp,28
  8059b0:	e13ffb15 	stw	r4,-20(fp)
  8059b4:	e17ffc15 	stw	r5,-16(fp)
  8059b8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8059bc:	00bff9c4 	movi	r2,-25
  8059c0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8059c4:	e0bffc17 	ldw	r2,-16(fp)
  8059c8:	e0bfff15 	stw	r2,-4(fp)
  8059cc:	e0ffff17 	ldw	r3,-4(fp)
  8059d0:	189a8060 	cmpeqi	r2,r3,27137
  8059d4:	1000041e 	bne	r2,zero,8059e8 <altera_avalon_jtag_uart_ioctl+0x44>
  8059d8:	e0ffff17 	ldw	r3,-4(fp)
  8059dc:	189a80a0 	cmpeqi	r2,r3,27138
  8059e0:	10001b1e 	bne	r2,zero,805a50 <altera_avalon_jtag_uart_ioctl+0xac>
  8059e4:	00002706 	br	805a84 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8059e8:	e0bffb17 	ldw	r2,-20(fp)
  8059ec:	10c00117 	ldw	r3,4(r2)
  8059f0:	00a00034 	movhi	r2,32768
  8059f4:	10bfffc4 	addi	r2,r2,-1
  8059f8:	18802226 	beq	r3,r2,805a84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  8059fc:	e0bffd17 	ldw	r2,-12(fp)
  805a00:	10800017 	ldw	r2,0(r2)
  805a04:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  805a08:	e0bff917 	ldw	r2,-28(fp)
  805a0c:	10800090 	cmplti	r2,r2,2
  805a10:	1000071e 	bne	r2,zero,805a30 <altera_avalon_jtag_uart_ioctl+0x8c>
  805a14:	e0fff917 	ldw	r3,-28(fp)
  805a18:	00a00034 	movhi	r2,32768
  805a1c:	10bfffc4 	addi	r2,r2,-1
  805a20:	18800326 	beq	r3,r2,805a30 <altera_avalon_jtag_uart_ioctl+0x8c>
  805a24:	e0bff917 	ldw	r2,-28(fp)
  805a28:	e0bffe15 	stw	r2,-8(fp)
  805a2c:	00000306 	br	805a3c <altera_avalon_jtag_uart_ioctl+0x98>
  805a30:	00e00034 	movhi	r3,32768
  805a34:	18ffff84 	addi	r3,r3,-2
  805a38:	e0fffe15 	stw	r3,-8(fp)
  805a3c:	e0bffb17 	ldw	r2,-20(fp)
  805a40:	e0fffe17 	ldw	r3,-8(fp)
  805a44:	10c00115 	stw	r3,4(r2)
      rc = 0;
  805a48:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  805a4c:	00000d06 	br	805a84 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  805a50:	e0bffb17 	ldw	r2,-20(fp)
  805a54:	10c00117 	ldw	r3,4(r2)
  805a58:	00a00034 	movhi	r2,32768
  805a5c:	10bfffc4 	addi	r2,r2,-1
  805a60:	18800826 	beq	r3,r2,805a84 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  805a64:	e13ffd17 	ldw	r4,-12(fp)
  805a68:	e0bffb17 	ldw	r2,-20(fp)
  805a6c:	10c00917 	ldw	r3,36(r2)
  805a70:	e0bffb17 	ldw	r2,-20(fp)
  805a74:	10800117 	ldw	r2,4(r2)
  805a78:	1885803a 	cmpltu	r2,r3,r2
  805a7c:	20800015 	stw	r2,0(r4)
      rc = 0;
  805a80:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  805a84:	e0bffa17 	ldw	r2,-24(fp)
}
  805a88:	e037883a 	mov	sp,fp
  805a8c:	df000017 	ldw	fp,0(sp)
  805a90:	dec00104 	addi	sp,sp,4
  805a94:	f800283a 	ret

00805a98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  805a98:	defff204 	addi	sp,sp,-56
  805a9c:	dfc00d15 	stw	ra,52(sp)
  805aa0:	df000c15 	stw	fp,48(sp)
  805aa4:	df000c04 	addi	fp,sp,48
  805aa8:	e13ffb15 	stw	r4,-20(fp)
  805aac:	e17ffc15 	stw	r5,-16(fp)
  805ab0:	e1bffd15 	stw	r6,-12(fp)
  805ab4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  805ab8:	e0bffc17 	ldw	r2,-16(fp)
  805abc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805ac0:	00004806 	br	805be4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  805ac4:	e0bffb17 	ldw	r2,-20(fp)
  805ac8:	10800a17 	ldw	r2,40(r2)
  805acc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  805ad0:	e0bffb17 	ldw	r2,-20(fp)
  805ad4:	10800b17 	ldw	r2,44(r2)
  805ad8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  805adc:	e0fff717 	ldw	r3,-36(fp)
  805ae0:	e0bff617 	ldw	r2,-40(fp)
  805ae4:	18800536 	bltu	r3,r2,805afc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  805ae8:	e0bff717 	ldw	r2,-36(fp)
  805aec:	e0fff617 	ldw	r3,-40(fp)
  805af0:	10c5c83a 	sub	r2,r2,r3
  805af4:	e0bff815 	stw	r2,-32(fp)
  805af8:	00000406 	br	805b0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  805afc:	00820004 	movi	r2,2048
  805b00:	e0fff617 	ldw	r3,-40(fp)
  805b04:	10c5c83a 	sub	r2,r2,r3
  805b08:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805b0c:	e0bff817 	ldw	r2,-32(fp)
  805b10:	1005003a 	cmpeq	r2,r2,zero
  805b14:	10001f1e 	bne	r2,zero,805b94 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  805b18:	e0fffd17 	ldw	r3,-12(fp)
  805b1c:	e0bff817 	ldw	r2,-32(fp)
  805b20:	1880022e 	bgeu	r3,r2,805b2c <altera_avalon_jtag_uart_read+0x94>
        n = space;
  805b24:	e0bffd17 	ldw	r2,-12(fp)
  805b28:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  805b2c:	e0bffb17 	ldw	r2,-20(fp)
  805b30:	10c00e04 	addi	r3,r2,56
  805b34:	e0bff617 	ldw	r2,-40(fp)
  805b38:	1887883a 	add	r3,r3,r2
  805b3c:	e0bffa17 	ldw	r2,-24(fp)
  805b40:	1009883a 	mov	r4,r2
  805b44:	180b883a 	mov	r5,r3
  805b48:	e1bff817 	ldw	r6,-32(fp)
  805b4c:	08037d00 	call	8037d0 <memcpy>
      ptr   += n;
  805b50:	e0fff817 	ldw	r3,-32(fp)
  805b54:	e0bffa17 	ldw	r2,-24(fp)
  805b58:	10c5883a 	add	r2,r2,r3
  805b5c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  805b60:	e0fffd17 	ldw	r3,-12(fp)
  805b64:	e0bff817 	ldw	r2,-32(fp)
  805b68:	1885c83a 	sub	r2,r3,r2
  805b6c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805b70:	e0fff617 	ldw	r3,-40(fp)
  805b74:	e0bff817 	ldw	r2,-32(fp)
  805b78:	1885883a 	add	r2,r3,r2
  805b7c:	10c1ffcc 	andi	r3,r2,2047
  805b80:	e0bffb17 	ldw	r2,-20(fp)
  805b84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  805b88:	e0bffd17 	ldw	r2,-12(fp)
  805b8c:	10800048 	cmpgei	r2,r2,1
  805b90:	103fcc1e 	bne	r2,zero,805ac4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  805b94:	e0fffa17 	ldw	r3,-24(fp)
  805b98:	e0bffc17 	ldw	r2,-16(fp)
  805b9c:	1880141e 	bne	r3,r2,805bf0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  805ba0:	e0bffe17 	ldw	r2,-8(fp)
  805ba4:	1090000c 	andi	r2,r2,16384
  805ba8:	1004c03a 	cmpne	r2,r2,zero
  805bac:	1000101e 	bne	r2,zero,805bf0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  805bb0:	e0bffb17 	ldw	r2,-20(fp)
  805bb4:	10c00a17 	ldw	r3,40(r2)
  805bb8:	e0bff717 	ldw	r2,-36(fp)
  805bbc:	1880051e 	bne	r3,r2,805bd4 <altera_avalon_jtag_uart_read+0x13c>
  805bc0:	e0bffb17 	ldw	r2,-20(fp)
  805bc4:	10c00917 	ldw	r3,36(r2)
  805bc8:	e0bffb17 	ldw	r2,-20(fp)
  805bcc:	10800117 	ldw	r2,4(r2)
  805bd0:	18bff736 	bltu	r3,r2,805bb0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  805bd4:	e0bffb17 	ldw	r2,-20(fp)
  805bd8:	10c00a17 	ldw	r3,40(r2)
  805bdc:	e0bff717 	ldw	r2,-36(fp)
  805be0:	18800326 	beq	r3,r2,805bf0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805be4:	e0bffd17 	ldw	r2,-12(fp)
  805be8:	10800048 	cmpgei	r2,r2,1
  805bec:	103fb51e 	bne	r2,zero,805ac4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  805bf0:	e0fffa17 	ldw	r3,-24(fp)
  805bf4:	e0bffc17 	ldw	r2,-16(fp)
  805bf8:	18801926 	beq	r3,r2,805c60 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805bfc:	0005303a 	rdctl	r2,status
  805c00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c04:	e0fff517 	ldw	r3,-44(fp)
  805c08:	00bfff84 	movi	r2,-2
  805c0c:	1884703a 	and	r2,r3,r2
  805c10:	1001703a 	wrctl	status,r2
  
  return context;
  805c14:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  805c18:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805c1c:	e0bffb17 	ldw	r2,-20(fp)
  805c20:	10800817 	ldw	r2,32(r2)
  805c24:	10c00054 	ori	r3,r2,1
  805c28:	e0bffb17 	ldw	r2,-20(fp)
  805c2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805c30:	e0bffb17 	ldw	r2,-20(fp)
  805c34:	10800017 	ldw	r2,0(r2)
  805c38:	11000104 	addi	r4,r2,4
  805c3c:	e0bffb17 	ldw	r2,-20(fp)
  805c40:	10800817 	ldw	r2,32(r2)
  805c44:	1007883a 	mov	r3,r2
  805c48:	2005883a 	mov	r2,r4
  805c4c:	10c00035 	stwio	r3,0(r2)
  805c50:	e0bff917 	ldw	r2,-28(fp)
  805c54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805c58:	e0bff417 	ldw	r2,-48(fp)
  805c5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  805c60:	e0fffa17 	ldw	r3,-24(fp)
  805c64:	e0bffc17 	ldw	r2,-16(fp)
  805c68:	18800526 	beq	r3,r2,805c80 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  805c6c:	e0fffa17 	ldw	r3,-24(fp)
  805c70:	e0bffc17 	ldw	r2,-16(fp)
  805c74:	1887c83a 	sub	r3,r3,r2
  805c78:	e0ffff15 	stw	r3,-4(fp)
  805c7c:	00000906 	br	805ca4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  805c80:	e0bffe17 	ldw	r2,-8(fp)
  805c84:	1090000c 	andi	r2,r2,16384
  805c88:	1005003a 	cmpeq	r2,r2,zero
  805c8c:	1000031e 	bne	r2,zero,805c9c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  805c90:	00bffd44 	movi	r2,-11
  805c94:	e0bfff15 	stw	r2,-4(fp)
  805c98:	00000206 	br	805ca4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  805c9c:	00bffec4 	movi	r2,-5
  805ca0:	e0bfff15 	stw	r2,-4(fp)
  805ca4:	e0bfff17 	ldw	r2,-4(fp)
}
  805ca8:	e037883a 	mov	sp,fp
  805cac:	dfc00117 	ldw	ra,4(sp)
  805cb0:	df000017 	ldw	fp,0(sp)
  805cb4:	dec00204 	addi	sp,sp,8
  805cb8:	f800283a 	ret

00805cbc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805cbc:	defff204 	addi	sp,sp,-56
  805cc0:	dfc00d15 	stw	ra,52(sp)
  805cc4:	df000c15 	stw	fp,48(sp)
  805cc8:	df000c04 	addi	fp,sp,48
  805ccc:	e13ffb15 	stw	r4,-20(fp)
  805cd0:	e17ffc15 	stw	r5,-16(fp)
  805cd4:	e1bffd15 	stw	r6,-12(fp)
  805cd8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  805cdc:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805ce0:	e0bffc17 	ldw	r2,-16(fp)
  805ce4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805ce8:	00003a06 	br	805dd4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  805cec:	e0bffb17 	ldw	r2,-20(fp)
  805cf0:	10800c17 	ldw	r2,48(r2)
  805cf4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  805cf8:	e0bffb17 	ldw	r2,-20(fp)
  805cfc:	10800d17 	ldw	r2,52(r2)
  805d00:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  805d04:	e0fffa17 	ldw	r3,-24(fp)
  805d08:	e0bff917 	ldw	r2,-28(fp)
  805d0c:	1880062e 	bgeu	r3,r2,805d28 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  805d10:	e0fff917 	ldw	r3,-28(fp)
  805d14:	e0bffa17 	ldw	r2,-24(fp)
  805d18:	1885c83a 	sub	r2,r3,r2
  805d1c:	10bfffc4 	addi	r2,r2,-1
  805d20:	e0bff815 	stw	r2,-32(fp)
  805d24:	00000c06 	br	805d58 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  805d28:	e0bff917 	ldw	r2,-28(fp)
  805d2c:	1005003a 	cmpeq	r2,r2,zero
  805d30:	1000051e 	bne	r2,zero,805d48 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  805d34:	00820004 	movi	r2,2048
  805d38:	e0fffa17 	ldw	r3,-24(fp)
  805d3c:	10c5c83a 	sub	r2,r2,r3
  805d40:	e0bff815 	stw	r2,-32(fp)
  805d44:	00000406 	br	805d58 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  805d48:	0081ffc4 	movi	r2,2047
  805d4c:	e0fffa17 	ldw	r3,-24(fp)
  805d50:	10c5c83a 	sub	r2,r2,r3
  805d54:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805d58:	e0bff817 	ldw	r2,-32(fp)
  805d5c:	1005003a 	cmpeq	r2,r2,zero
  805d60:	10001f1e 	bne	r2,zero,805de0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  805d64:	e0fffd17 	ldw	r3,-12(fp)
  805d68:	e0bff817 	ldw	r2,-32(fp)
  805d6c:	1880022e 	bgeu	r3,r2,805d78 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  805d70:	e0bffd17 	ldw	r2,-12(fp)
  805d74:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  805d78:	e0bffb17 	ldw	r2,-20(fp)
  805d7c:	10c20e04 	addi	r3,r2,2104
  805d80:	e0bffa17 	ldw	r2,-24(fp)
  805d84:	1885883a 	add	r2,r3,r2
  805d88:	e0fffc17 	ldw	r3,-16(fp)
  805d8c:	1009883a 	mov	r4,r2
  805d90:	180b883a 	mov	r5,r3
  805d94:	e1bff817 	ldw	r6,-32(fp)
  805d98:	08037d00 	call	8037d0 <memcpy>
      ptr   += n;
  805d9c:	e0fff817 	ldw	r3,-32(fp)
  805da0:	e0bffc17 	ldw	r2,-16(fp)
  805da4:	10c5883a 	add	r2,r2,r3
  805da8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  805dac:	e0fffd17 	ldw	r3,-12(fp)
  805db0:	e0bff817 	ldw	r2,-32(fp)
  805db4:	1885c83a 	sub	r2,r3,r2
  805db8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805dbc:	e0fffa17 	ldw	r3,-24(fp)
  805dc0:	e0bff817 	ldw	r2,-32(fp)
  805dc4:	1885883a 	add	r2,r3,r2
  805dc8:	10c1ffcc 	andi	r3,r2,2047
  805dcc:	e0bffb17 	ldw	r2,-20(fp)
  805dd0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805dd4:	e0bffd17 	ldw	r2,-12(fp)
  805dd8:	10800048 	cmpgei	r2,r2,1
  805ddc:	103fc31e 	bne	r2,zero,805cec <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805de0:	0005303a 	rdctl	r2,status
  805de4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805de8:	e0fff517 	ldw	r3,-44(fp)
  805dec:	00bfff84 	movi	r2,-2
  805df0:	1884703a 	and	r2,r3,r2
  805df4:	1001703a 	wrctl	status,r2
  
  return context;
  805df8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  805dfc:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  805e00:	e0bffb17 	ldw	r2,-20(fp)
  805e04:	10800817 	ldw	r2,32(r2)
  805e08:	10c00094 	ori	r3,r2,2
  805e0c:	e0bffb17 	ldw	r2,-20(fp)
  805e10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805e14:	e0bffb17 	ldw	r2,-20(fp)
  805e18:	10800017 	ldw	r2,0(r2)
  805e1c:	11000104 	addi	r4,r2,4
  805e20:	e0bffb17 	ldw	r2,-20(fp)
  805e24:	10800817 	ldw	r2,32(r2)
  805e28:	1007883a 	mov	r3,r2
  805e2c:	2005883a 	mov	r2,r4
  805e30:	10c00035 	stwio	r3,0(r2)
  805e34:	e0bff717 	ldw	r2,-36(fp)
  805e38:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e3c:	e0bff417 	ldw	r2,-48(fp)
  805e40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  805e44:	e0bffd17 	ldw	r2,-12(fp)
  805e48:	10800050 	cmplti	r2,r2,1
  805e4c:	1000111e 	bne	r2,zero,805e94 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  805e50:	e0bffe17 	ldw	r2,-8(fp)
  805e54:	1090000c 	andi	r2,r2,16384
  805e58:	1004c03a 	cmpne	r2,r2,zero
  805e5c:	1000101e 	bne	r2,zero,805ea0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  805e60:	e0bffb17 	ldw	r2,-20(fp)
  805e64:	10c00d17 	ldw	r3,52(r2)
  805e68:	e0bff917 	ldw	r2,-28(fp)
  805e6c:	1880051e 	bne	r3,r2,805e84 <altera_avalon_jtag_uart_write+0x1c8>
  805e70:	e0bffb17 	ldw	r2,-20(fp)
  805e74:	10c00917 	ldw	r3,36(r2)
  805e78:	e0bffb17 	ldw	r2,-20(fp)
  805e7c:	10800117 	ldw	r2,4(r2)
  805e80:	18bff736 	bltu	r3,r2,805e60 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  805e84:	e0bffb17 	ldw	r2,-20(fp)
  805e88:	10c00d17 	ldw	r3,52(r2)
  805e8c:	e0bff917 	ldw	r2,-28(fp)
  805e90:	18800326 	beq	r3,r2,805ea0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  805e94:	e0bffd17 	ldw	r2,-12(fp)
  805e98:	10800048 	cmpgei	r2,r2,1
  805e9c:	103fcd1e 	bne	r2,zero,805dd4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  805ea0:	e0fffc17 	ldw	r3,-16(fp)
  805ea4:	e0bff617 	ldw	r2,-40(fp)
  805ea8:	18800526 	beq	r3,r2,805ec0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  805eac:	e0fffc17 	ldw	r3,-16(fp)
  805eb0:	e0bff617 	ldw	r2,-40(fp)
  805eb4:	1887c83a 	sub	r3,r3,r2
  805eb8:	e0ffff15 	stw	r3,-4(fp)
  805ebc:	00000906 	br	805ee4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  805ec0:	e0bffe17 	ldw	r2,-8(fp)
  805ec4:	1090000c 	andi	r2,r2,16384
  805ec8:	1005003a 	cmpeq	r2,r2,zero
  805ecc:	1000031e 	bne	r2,zero,805edc <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  805ed0:	00bffd44 	movi	r2,-11
  805ed4:	e0bfff15 	stw	r2,-4(fp)
  805ed8:	00000206 	br	805ee4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  805edc:	00bffec4 	movi	r2,-5
  805ee0:	e0bfff15 	stw	r2,-4(fp)
  805ee4:	e0bfff17 	ldw	r2,-4(fp)
}
  805ee8:	e037883a 	mov	sp,fp
  805eec:	dfc00117 	ldw	ra,4(sp)
  805ef0:	df000017 	ldw	fp,0(sp)
  805ef4:	dec00204 	addi	sp,sp,8
  805ef8:	f800283a 	ret

00805efc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  805efc:	defffa04 	addi	sp,sp,-24
  805f00:	dfc00515 	stw	ra,20(sp)
  805f04:	df000415 	stw	fp,16(sp)
  805f08:	df000404 	addi	fp,sp,16
  805f0c:	e13ffe15 	stw	r4,-8(fp)
  805f10:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  805f14:	e0bffe17 	ldw	r2,-8(fp)
  805f18:	10800017 	ldw	r2,0(r2)
  805f1c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  805f20:	008003f4 	movhi	r2,15
  805f24:	10909004 	addi	r2,r2,16960
  805f28:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  805f2c:	e0bffe17 	ldw	r2,-8(fp)
  805f30:	10800803 	ldbu	r2,32(r2)
  805f34:	10803fcc 	andi	r2,r2,255
  805f38:	1080201c 	xori	r2,r2,128
  805f3c:	10bfe004 	addi	r2,r2,-128
  805f40:	1004c03a 	cmpne	r2,r2,zero
  805f44:	1000161e 	bne	r2,zero,805fa0 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805f48:	00000a06 	br	805f74 <lcd_write_command+0x78>
    if (--i == 0)
  805f4c:	e0bffc17 	ldw	r2,-16(fp)
  805f50:	10bfffc4 	addi	r2,r2,-1
  805f54:	e0bffc15 	stw	r2,-16(fp)
  805f58:	e0bffc17 	ldw	r2,-16(fp)
  805f5c:	1004c03a 	cmpne	r2,r2,zero
  805f60:	1000041e 	bne	r2,zero,805f74 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  805f64:	e0fffe17 	ldw	r3,-8(fp)
  805f68:	00800044 	movi	r2,1
  805f6c:	18800805 	stb	r2,32(r3)
      return;
  805f70:	00000b06 	br	805fa0 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805f74:	e0bffd17 	ldw	r2,-12(fp)
  805f78:	10800104 	addi	r2,r2,4
  805f7c:	10800037 	ldwio	r2,0(r2)
  805f80:	1080200c 	andi	r2,r2,128
  805f84:	1004c03a 	cmpne	r2,r2,zero
  805f88:	103ff01e 	bne	r2,zero,805f4c <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  805f8c:	01001904 	movi	r4,100
  805f90:	08081b00 	call	8081b0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  805f94:	e0bffd17 	ldw	r2,-12(fp)
  805f98:	e0ffff03 	ldbu	r3,-4(fp)
  805f9c:	10c00035 	stwio	r3,0(r2)
}
  805fa0:	e037883a 	mov	sp,fp
  805fa4:	dfc00117 	ldw	ra,4(sp)
  805fa8:	df000017 	ldw	fp,0(sp)
  805fac:	dec00204 	addi	sp,sp,8
  805fb0:	f800283a 	ret

00805fb4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  805fb4:	defffa04 	addi	sp,sp,-24
  805fb8:	dfc00515 	stw	ra,20(sp)
  805fbc:	df000415 	stw	fp,16(sp)
  805fc0:	df000404 	addi	fp,sp,16
  805fc4:	e13ffe15 	stw	r4,-8(fp)
  805fc8:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  805fcc:	e0bffe17 	ldw	r2,-8(fp)
  805fd0:	10800017 	ldw	r2,0(r2)
  805fd4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  805fd8:	008003f4 	movhi	r2,15
  805fdc:	10909004 	addi	r2,r2,16960
  805fe0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  805fe4:	e0bffe17 	ldw	r2,-8(fp)
  805fe8:	10800803 	ldbu	r2,32(r2)
  805fec:	10803fcc 	andi	r2,r2,255
  805ff0:	1080201c 	xori	r2,r2,128
  805ff4:	10bfe004 	addi	r2,r2,-128
  805ff8:	1004c03a 	cmpne	r2,r2,zero
  805ffc:	10001d1e 	bne	r2,zero,806074 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  806000:	00000a06 	br	80602c <lcd_write_data+0x78>
    if (--i == 0)
  806004:	e0bffc17 	ldw	r2,-16(fp)
  806008:	10bfffc4 	addi	r2,r2,-1
  80600c:	e0bffc15 	stw	r2,-16(fp)
  806010:	e0bffc17 	ldw	r2,-16(fp)
  806014:	1004c03a 	cmpne	r2,r2,zero
  806018:	1000041e 	bne	r2,zero,80602c <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80601c:	e0fffe17 	ldw	r3,-8(fp)
  806020:	00800044 	movi	r2,1
  806024:	18800805 	stb	r2,32(r3)
      return;
  806028:	00001206 	br	806074 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80602c:	e0bffd17 	ldw	r2,-12(fp)
  806030:	10800104 	addi	r2,r2,4
  806034:	10800037 	ldwio	r2,0(r2)
  806038:	1080200c 	andi	r2,r2,128
  80603c:	1004c03a 	cmpne	r2,r2,zero
  806040:	103ff01e 	bne	r2,zero,806004 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  806044:	01001904 	movi	r4,100
  806048:	08081b00 	call	8081b0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80604c:	e0bffd17 	ldw	r2,-12(fp)
  806050:	10800204 	addi	r2,r2,8
  806054:	e0ffff03 	ldbu	r3,-4(fp)
  806058:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  80605c:	e0bffe17 	ldw	r2,-8(fp)
  806060:	108008c3 	ldbu	r2,35(r2)
  806064:	10800044 	addi	r2,r2,1
  806068:	1007883a 	mov	r3,r2
  80606c:	e0bffe17 	ldw	r2,-8(fp)
  806070:	10c008c5 	stb	r3,35(r2)
}
  806074:	e037883a 	mov	sp,fp
  806078:	dfc00117 	ldw	ra,4(sp)
  80607c:	df000017 	ldw	fp,0(sp)
  806080:	dec00204 	addi	sp,sp,8
  806084:	f800283a 	ret

00806088 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  806088:	defffc04 	addi	sp,sp,-16
  80608c:	dfc00315 	stw	ra,12(sp)
  806090:	df000215 	stw	fp,8(sp)
  806094:	df000204 	addi	fp,sp,8
  806098:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80609c:	e13fff17 	ldw	r4,-4(fp)
  8060a0:	01400044 	movi	r5,1
  8060a4:	0805efc0 	call	805efc <lcd_write_command>

  sp->x = 0;
  8060a8:	e0bfff17 	ldw	r2,-4(fp)
  8060ac:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8060b0:	e0bfff17 	ldw	r2,-4(fp)
  8060b4:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8060b8:	e0bfff17 	ldw	r2,-4(fp)
  8060bc:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8060c0:	e03ffe15 	stw	zero,-8(fp)
  8060c4:	00001906 	br	80612c <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8060c8:	e0bffe17 	ldw	r2,-8(fp)
  8060cc:	10801924 	muli	r2,r2,100
  8060d0:	10c01004 	addi	r3,r2,64
  8060d4:	e0bfff17 	ldw	r2,-4(fp)
  8060d8:	1889883a 	add	r4,r3,r2
  8060dc:	01400804 	movi	r5,32
  8060e0:	01801444 	movi	r6,81
  8060e4:	08039500 	call	803950 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8060e8:	e0bffe17 	ldw	r2,-8(fp)
  8060ec:	10801924 	muli	r2,r2,100
  8060f0:	10c00c04 	addi	r3,r2,48
  8060f4:	e0bfff17 	ldw	r2,-4(fp)
  8060f8:	1889883a 	add	r4,r3,r2
  8060fc:	01400804 	movi	r5,32
  806100:	01800404 	movi	r6,16
  806104:	08039500 	call	803950 <memset>
    sp->line[y].width = 0;
  806108:	e0bffe17 	ldw	r2,-8(fp)
  80610c:	e0ffff17 	ldw	r3,-4(fp)
  806110:	10801924 	muli	r2,r2,100
  806114:	10c5883a 	add	r2,r2,r3
  806118:	10802404 	addi	r2,r2,144
  80611c:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806120:	e0bffe17 	ldw	r2,-8(fp)
  806124:	10800044 	addi	r2,r2,1
  806128:	e0bffe15 	stw	r2,-8(fp)
  80612c:	e0bffe17 	ldw	r2,-8(fp)
  806130:	10800090 	cmplti	r2,r2,2
  806134:	103fe41e 	bne	r2,zero,8060c8 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  806138:	e037883a 	mov	sp,fp
  80613c:	dfc00117 	ldw	ra,4(sp)
  806140:	df000017 	ldw	fp,0(sp)
  806144:	dec00204 	addi	sp,sp,8
  806148:	f800283a 	ret

0080614c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80614c:	defff604 	addi	sp,sp,-40
  806150:	dfc00915 	stw	ra,36(sp)
  806154:	df000815 	stw	fp,32(sp)
  806158:	dc000715 	stw	r16,28(sp)
  80615c:	df000704 	addi	fp,sp,28
  806160:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  806164:	e0bfff17 	ldw	r2,-4(fp)
  806168:	10800943 	ldbu	r2,37(r2)
  80616c:	10803fcc 	andi	r2,r2,255
  806170:	1080201c 	xori	r2,r2,128
  806174:	10bfe004 	addi	r2,r2,-128
  806178:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80617c:	e03ffe15 	stw	zero,-8(fp)
  806180:	00006406 	br	806314 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  806184:	e0bffe17 	ldw	r2,-8(fp)
  806188:	e0ffff17 	ldw	r3,-4(fp)
  80618c:	10801924 	muli	r2,r2,100
  806190:	10c5883a 	add	r2,r2,r3
  806194:	10802404 	addi	r2,r2,144
  806198:	10800043 	ldbu	r2,1(r2)
  80619c:	10803fcc 	andi	r2,r2,255
  8061a0:	1080201c 	xori	r2,r2,128
  8061a4:	10bfe004 	addi	r2,r2,-128
  8061a8:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8061ac:	e0bffe17 	ldw	r2,-8(fp)
  8061b0:	e0ffff17 	ldw	r3,-4(fp)
  8061b4:	10801924 	muli	r2,r2,100
  8061b8:	10c5883a 	add	r2,r2,r3
  8061bc:	10802404 	addi	r2,r2,144
  8061c0:	10800083 	ldbu	r2,2(r2)
  8061c4:	10c03fcc 	andi	r3,r2,255
  8061c8:	e0bffc17 	ldw	r2,-16(fp)
  8061cc:	1885383a 	mul	r2,r3,r2
  8061d0:	1005d23a 	srai	r2,r2,8
  8061d4:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  8061d8:	e0fffa17 	ldw	r3,-24(fp)
  8061dc:	e0bffb17 	ldw	r2,-20(fp)
  8061e0:	18800116 	blt	r3,r2,8061e8 <lcd_repaint_screen+0x9c>
      offset = 0;
  8061e4:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8061e8:	e03ffd15 	stw	zero,-12(fp)
  8061ec:	00004306 	br	8062fc <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8061f0:	e43ffe17 	ldw	r16,-8(fp)
  8061f4:	e0fffd17 	ldw	r3,-12(fp)
  8061f8:	e0bffa17 	ldw	r2,-24(fp)
  8061fc:	1889883a 	add	r4,r3,r2
  806200:	e17ffb17 	ldw	r5,-20(fp)
  806204:	08088600 	call	808860 <__modsi3>
  806208:	1009883a 	mov	r4,r2
  80620c:	e0ffff17 	ldw	r3,-4(fp)
  806210:	80801924 	muli	r2,r16,100
  806214:	10c5883a 	add	r2,r2,r3
  806218:	1105883a 	add	r2,r2,r4
  80621c:	10801004 	addi	r2,r2,64
  806220:	10800003 	ldbu	r2,0(r2)
  806224:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  806228:	e0bffe17 	ldw	r2,-8(fp)
  80622c:	e13ffd17 	ldw	r4,-12(fp)
  806230:	e0ffff17 	ldw	r3,-4(fp)
  806234:	10801924 	muli	r2,r2,100
  806238:	10c5883a 	add	r2,r2,r3
  80623c:	1105883a 	add	r2,r2,r4
  806240:	10800c04 	addi	r2,r2,48
  806244:	10800003 	ldbu	r2,0(r2)
  806248:	10c03fcc 	andi	r3,r2,255
  80624c:	18c0201c 	xori	r3,r3,128
  806250:	18ffe004 	addi	r3,r3,-128
  806254:	e0bff947 	ldb	r2,-27(fp)
  806258:	18802526 	beq	r3,r2,8062f0 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80625c:	e0fffe17 	ldw	r3,-8(fp)
  806260:	d0a00d04 	addi	r2,gp,-32716
  806264:	1885883a 	add	r2,r3,r2
  806268:	10800003 	ldbu	r2,0(r2)
  80626c:	1007883a 	mov	r3,r2
  806270:	e0bffd17 	ldw	r2,-12(fp)
  806274:	1885883a 	add	r2,r3,r2
  806278:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  80627c:	e0fff903 	ldbu	r3,-28(fp)
  806280:	e0bfff17 	ldw	r2,-4(fp)
  806284:	108008c3 	ldbu	r2,35(r2)
  806288:	10803fcc 	andi	r2,r2,255
  80628c:	1080201c 	xori	r2,r2,128
  806290:	10bfe004 	addi	r2,r2,-128
  806294:	18800926 	beq	r3,r2,8062bc <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  806298:	e0fff903 	ldbu	r3,-28(fp)
  80629c:	00bfe004 	movi	r2,-128
  8062a0:	1884b03a 	or	r2,r3,r2
  8062a4:	11403fcc 	andi	r5,r2,255
  8062a8:	e13fff17 	ldw	r4,-4(fp)
  8062ac:	0805efc0 	call	805efc <lcd_write_command>
          sp->address = address;
  8062b0:	e0fff903 	ldbu	r3,-28(fp)
  8062b4:	e0bfff17 	ldw	r2,-4(fp)
  8062b8:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8062bc:	e0bff943 	ldbu	r2,-27(fp)
  8062c0:	11403fcc 	andi	r5,r2,255
  8062c4:	e13fff17 	ldw	r4,-4(fp)
  8062c8:	0805fb40 	call	805fb4 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8062cc:	e0bffe17 	ldw	r2,-8(fp)
  8062d0:	e13ffd17 	ldw	r4,-12(fp)
  8062d4:	e0ffff17 	ldw	r3,-4(fp)
  8062d8:	10801924 	muli	r2,r2,100
  8062dc:	10c5883a 	add	r2,r2,r3
  8062e0:	1105883a 	add	r2,r2,r4
  8062e4:	10c00c04 	addi	r3,r2,48
  8062e8:	e0bff943 	ldbu	r2,-27(fp)
  8062ec:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8062f0:	e0bffd17 	ldw	r2,-12(fp)
  8062f4:	10800044 	addi	r2,r2,1
  8062f8:	e0bffd15 	stw	r2,-12(fp)
  8062fc:	e0bffd17 	ldw	r2,-12(fp)
  806300:	10800410 	cmplti	r2,r2,16
  806304:	103fba1e 	bne	r2,zero,8061f0 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806308:	e0bffe17 	ldw	r2,-8(fp)
  80630c:	10800044 	addi	r2,r2,1
  806310:	e0bffe15 	stw	r2,-8(fp)
  806314:	e0bffe17 	ldw	r2,-8(fp)
  806318:	10800090 	cmplti	r2,r2,2
  80631c:	103f991e 	bne	r2,zero,806184 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  806320:	e037883a 	mov	sp,fp
  806324:	dfc00217 	ldw	ra,8(sp)
  806328:	df000117 	ldw	fp,4(sp)
  80632c:	dc000017 	ldw	r16,0(sp)
  806330:	dec00304 	addi	sp,sp,12
  806334:	f800283a 	ret

00806338 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  806338:	defffc04 	addi	sp,sp,-16
  80633c:	dfc00315 	stw	ra,12(sp)
  806340:	df000215 	stw	fp,8(sp)
  806344:	df000204 	addi	fp,sp,8
  806348:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80634c:	e03ffe15 	stw	zero,-8(fp)
  806350:	00001d06 	br	8063c8 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  806354:	e0bffe17 	ldw	r2,-8(fp)
  806358:	10800048 	cmpgei	r2,r2,1
  80635c:	10000f1e 	bne	r2,zero,80639c <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  806360:	e0bffe17 	ldw	r2,-8(fp)
  806364:	10801924 	muli	r2,r2,100
  806368:	10c01004 	addi	r3,r2,64
  80636c:	e0bfff17 	ldw	r2,-4(fp)
  806370:	1889883a 	add	r4,r3,r2
  806374:	e0bffe17 	ldw	r2,-8(fp)
  806378:	10800044 	addi	r2,r2,1
  80637c:	10801924 	muli	r2,r2,100
  806380:	10c01004 	addi	r3,r2,64
  806384:	e0bfff17 	ldw	r2,-4(fp)
  806388:	1885883a 	add	r2,r3,r2
  80638c:	100b883a 	mov	r5,r2
  806390:	01801404 	movi	r6,80
  806394:	08037d00 	call	8037d0 <memcpy>
  806398:	00000806 	br	8063bc <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80639c:	e0bffe17 	ldw	r2,-8(fp)
  8063a0:	10801924 	muli	r2,r2,100
  8063a4:	10c01004 	addi	r3,r2,64
  8063a8:	e0bfff17 	ldw	r2,-4(fp)
  8063ac:	1889883a 	add	r4,r3,r2
  8063b0:	01400804 	movi	r5,32
  8063b4:	01801404 	movi	r6,80
  8063b8:	08039500 	call	803950 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8063bc:	e0bffe17 	ldw	r2,-8(fp)
  8063c0:	10800044 	addi	r2,r2,1
  8063c4:	e0bffe15 	stw	r2,-8(fp)
  8063c8:	e0bffe17 	ldw	r2,-8(fp)
  8063cc:	10800090 	cmplti	r2,r2,2
  8063d0:	103fe01e 	bne	r2,zero,806354 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8063d4:	e0bfff17 	ldw	r2,-4(fp)
  8063d8:	10800883 	ldbu	r2,34(r2)
  8063dc:	10bfffc4 	addi	r2,r2,-1
  8063e0:	1007883a 	mov	r3,r2
  8063e4:	e0bfff17 	ldw	r2,-4(fp)
  8063e8:	10c00885 	stb	r3,34(r2)
}
  8063ec:	e037883a 	mov	sp,fp
  8063f0:	dfc00117 	ldw	ra,4(sp)
  8063f4:	df000017 	ldw	fp,0(sp)
  8063f8:	dec00204 	addi	sp,sp,8
  8063fc:	f800283a 	ret

00806400 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  806400:	defff804 	addi	sp,sp,-32
  806404:	dfc00715 	stw	ra,28(sp)
  806408:	df000615 	stw	fp,24(sp)
  80640c:	df000604 	addi	fp,sp,24
  806410:	e13ffd15 	stw	r4,-12(fp)
  806414:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  806418:	e03ffc15 	stw	zero,-16(fp)
  80641c:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  806420:	e0bffd17 	ldw	r2,-12(fp)
  806424:	10800a03 	ldbu	r2,40(r2)
  806428:	10803fcc 	andi	r2,r2,255
  80642c:	1080201c 	xori	r2,r2,128
  806430:	10bfe004 	addi	r2,r2,-128
  806434:	108016d8 	cmpnei	r2,r2,91
  806438:	1000491e 	bne	r2,zero,806560 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  80643c:	e0bffd17 	ldw	r2,-12(fp)
  806440:	10800a04 	addi	r2,r2,40
  806444:	10800044 	addi	r2,r2,1
  806448:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  80644c:	00000d06 	br	806484 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  806450:	e0bffc17 	ldw	r2,-16(fp)
  806454:	10c002a4 	muli	r3,r2,10
  806458:	e0bffa17 	ldw	r2,-24(fp)
  80645c:	10800003 	ldbu	r2,0(r2)
  806460:	10803fcc 	andi	r2,r2,255
  806464:	1080201c 	xori	r2,r2,128
  806468:	10bfe004 	addi	r2,r2,-128
  80646c:	1885883a 	add	r2,r3,r2
  806470:	10bff404 	addi	r2,r2,-48
  806474:	e0bffc15 	stw	r2,-16(fp)
  806478:	e0bffa17 	ldw	r2,-24(fp)
  80647c:	10800044 	addi	r2,r2,1
  806480:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  806484:	e0bffa17 	ldw	r2,-24(fp)
  806488:	10800003 	ldbu	r2,0(r2)
  80648c:	10803fcc 	andi	r2,r2,255
  806490:	1080201c 	xori	r2,r2,128
  806494:	10bfe004 	addi	r2,r2,-128
  806498:	1007883a 	mov	r3,r2
  80649c:	00802074 	movhi	r2,129
  8064a0:	10aa1c04 	addi	r2,r2,-22416
  8064a4:	10800017 	ldw	r2,0(r2)
  8064a8:	1885883a 	add	r2,r3,r2
  8064ac:	10800003 	ldbu	r2,0(r2)
  8064b0:	10803fcc 	andi	r2,r2,255
  8064b4:	1080010c 	andi	r2,r2,4
  8064b8:	1004c03a 	cmpne	r2,r2,zero
  8064bc:	103fe41e 	bne	r2,zero,806450 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8064c0:	e0bffa17 	ldw	r2,-24(fp)
  8064c4:	10800003 	ldbu	r2,0(r2)
  8064c8:	10803fcc 	andi	r2,r2,255
  8064cc:	1080201c 	xori	r2,r2,128
  8064d0:	10bfe004 	addi	r2,r2,-128
  8064d4:	10800ed8 	cmpnei	r2,r2,59
  8064d8:	1000231e 	bne	r2,zero,806568 <lcd_handle_escape+0x168>
    {
      ptr++;
  8064dc:	e0bffa17 	ldw	r2,-24(fp)
  8064e0:	10800044 	addi	r2,r2,1
  8064e4:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  8064e8:	00000d06 	br	806520 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  8064ec:	e0bffb17 	ldw	r2,-20(fp)
  8064f0:	10c002a4 	muli	r3,r2,10
  8064f4:	e0bffa17 	ldw	r2,-24(fp)
  8064f8:	10800003 	ldbu	r2,0(r2)
  8064fc:	10803fcc 	andi	r2,r2,255
  806500:	1080201c 	xori	r2,r2,128
  806504:	10bfe004 	addi	r2,r2,-128
  806508:	1885883a 	add	r2,r3,r2
  80650c:	10bff404 	addi	r2,r2,-48
  806510:	e0bffb15 	stw	r2,-20(fp)
  806514:	e0bffa17 	ldw	r2,-24(fp)
  806518:	10800044 	addi	r2,r2,1
  80651c:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  806520:	e0bffa17 	ldw	r2,-24(fp)
  806524:	10800003 	ldbu	r2,0(r2)
  806528:	10803fcc 	andi	r2,r2,255
  80652c:	1080201c 	xori	r2,r2,128
  806530:	10bfe004 	addi	r2,r2,-128
  806534:	1007883a 	mov	r3,r2
  806538:	00802074 	movhi	r2,129
  80653c:	10aa1c04 	addi	r2,r2,-22416
  806540:	10800017 	ldw	r2,0(r2)
  806544:	1885883a 	add	r2,r3,r2
  806548:	10800003 	ldbu	r2,0(r2)
  80654c:	10803fcc 	andi	r2,r2,255
  806550:	1080010c 	andi	r2,r2,4
  806554:	1004c03a 	cmpne	r2,r2,zero
  806558:	103fe41e 	bne	r2,zero,8064ec <lcd_handle_escape+0xec>
  80655c:	00000206 	br	806568 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  806560:	00bfffc4 	movi	r2,-1
  806564:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  806568:	e0bffe07 	ldb	r2,-8(fp)
  80656c:	e0bfff15 	stw	r2,-4(fp)
  806570:	e0ffff17 	ldw	r3,-4(fp)
  806574:	188012a0 	cmpeqi	r2,r3,74
  806578:	10002f1e 	bne	r2,zero,806638 <lcd_handle_escape+0x238>
  80657c:	e0ffff17 	ldw	r3,-4(fp)
  806580:	188012c8 	cmpgei	r2,r3,75
  806584:	1000041e 	bne	r2,zero,806598 <lcd_handle_escape+0x198>
  806588:	e0ffff17 	ldw	r3,-4(fp)
  80658c:	18801220 	cmpeqi	r2,r3,72
  806590:	1000081e 	bne	r2,zero,8065b4 <lcd_handle_escape+0x1b4>
  806594:	00004906 	br	8066bc <lcd_handle_escape+0x2bc>
  806598:	e0ffff17 	ldw	r3,-4(fp)
  80659c:	188012e0 	cmpeqi	r2,r3,75
  8065a0:	10002b1e 	bne	r2,zero,806650 <lcd_handle_escape+0x250>
  8065a4:	e0ffff17 	ldw	r3,-4(fp)
  8065a8:	188019a0 	cmpeqi	r2,r3,102
  8065ac:	1000011e 	bne	r2,zero,8065b4 <lcd_handle_escape+0x1b4>
  8065b0:	00004206 	br	8066bc <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8065b4:	e0bffb17 	ldw	r2,-20(fp)
  8065b8:	10800050 	cmplti	r2,r2,1
  8065bc:	1000051e 	bne	r2,zero,8065d4 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  8065c0:	e0bffb17 	ldw	r2,-20(fp)
  8065c4:	10bfffc4 	addi	r2,r2,-1
  8065c8:	1007883a 	mov	r3,r2
  8065cc:	e0bffd17 	ldw	r2,-12(fp)
  8065d0:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8065d4:	e0bffc17 	ldw	r2,-16(fp)
  8065d8:	10800050 	cmplti	r2,r2,1
  8065dc:	1000371e 	bne	r2,zero,8066bc <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  8065e0:	e0bffc17 	ldw	r2,-16(fp)
  8065e4:	10bfffc4 	addi	r2,r2,-1
  8065e8:	1007883a 	mov	r3,r2
  8065ec:	e0bffd17 	ldw	r2,-12(fp)
  8065f0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  8065f4:	e0bffd17 	ldw	r2,-12(fp)
  8065f8:	10800883 	ldbu	r2,34(r2)
  8065fc:	10803fcc 	andi	r2,r2,255
  806600:	10800170 	cmpltui	r2,r2,5
  806604:	1000061e 	bne	r2,zero,806620 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  806608:	e0fffd17 	ldw	r3,-12(fp)
  80660c:	00800104 	movi	r2,4
  806610:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  806614:	00000206 	br	806620 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  806618:	e13ffd17 	ldw	r4,-12(fp)
  80661c:	08063380 	call	806338 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  806620:	e0bffd17 	ldw	r2,-12(fp)
  806624:	10800883 	ldbu	r2,34(r2)
  806628:	10803fcc 	andi	r2,r2,255
  80662c:	108000e8 	cmpgeui	r2,r2,3
  806630:	103ff91e 	bne	r2,zero,806618 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  806634:	00002106 	br	8066bc <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  806638:	e0bffc17 	ldw	r2,-16(fp)
  80663c:	10800098 	cmpnei	r2,r2,2
  806640:	10001e1e 	bne	r2,zero,8066bc <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  806644:	e13ffd17 	ldw	r4,-12(fp)
  806648:	08060880 	call	806088 <lcd_clear_screen>
    break;
  80664c:	00001b06 	br	8066bc <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  806650:	e0bffc17 	ldw	r2,-16(fp)
  806654:	10800048 	cmpgei	r2,r2,1
  806658:	1000181e 	bne	r2,zero,8066bc <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80665c:	e0bffd17 	ldw	r2,-12(fp)
  806660:	10800843 	ldbu	r2,33(r2)
  806664:	10803fcc 	andi	r2,r2,255
  806668:	10801428 	cmpgeui	r2,r2,80
  80666c:	1000131e 	bne	r2,zero,8066bc <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  806670:	e0bffd17 	ldw	r2,-12(fp)
  806674:	10800883 	ldbu	r2,34(r2)
  806678:	10803fcc 	andi	r2,r2,255
  80667c:	10801924 	muli	r2,r2,100
  806680:	10c01004 	addi	r3,r2,64
  806684:	e0bffd17 	ldw	r2,-12(fp)
  806688:	1887883a 	add	r3,r3,r2
  80668c:	e0bffd17 	ldw	r2,-12(fp)
  806690:	10800843 	ldbu	r2,33(r2)
  806694:	10803fcc 	andi	r2,r2,255
  806698:	1889883a 	add	r4,r3,r2
  80669c:	e0bffd17 	ldw	r2,-12(fp)
  8066a0:	10800843 	ldbu	r2,33(r2)
  8066a4:	10c03fcc 	andi	r3,r2,255
  8066a8:	00801404 	movi	r2,80
  8066ac:	10c5c83a 	sub	r2,r2,r3
  8066b0:	100d883a 	mov	r6,r2
  8066b4:	01400804 	movi	r5,32
  8066b8:	08039500 	call	803950 <memset>
    }
    break;
  }
}
  8066bc:	e037883a 	mov	sp,fp
  8066c0:	dfc00117 	ldw	ra,4(sp)
  8066c4:	df000017 	ldw	fp,0(sp)
  8066c8:	dec00204 	addi	sp,sp,8
  8066cc:	f800283a 	ret

008066d0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8066d0:	defff204 	addi	sp,sp,-56
  8066d4:	dfc00d15 	stw	ra,52(sp)
  8066d8:	df000c15 	stw	fp,48(sp)
  8066dc:	dc000b15 	stw	r16,44(sp)
  8066e0:	df000b04 	addi	fp,sp,44
  8066e4:	e13ffc15 	stw	r4,-16(fp)
  8066e8:	e17ffd15 	stw	r5,-12(fp)
  8066ec:	e1bffe15 	stw	r6,-8(fp)
  8066f0:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  8066f4:	e0bffe17 	ldw	r2,-8(fp)
  8066f8:	1007883a 	mov	r3,r2
  8066fc:	e0bffd17 	ldw	r2,-12(fp)
  806700:	10c5883a 	add	r2,r2,r3
  806704:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  806708:	e0fffc17 	ldw	r3,-16(fp)
  80670c:	00800044 	movi	r2,1
  806710:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  806714:	0000a206 	br	8069a0 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  806718:	e0bffd17 	ldw	r2,-12(fp)
  80671c:	10800003 	ldbu	r2,0(r2)
  806720:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  806724:	e0bffc17 	ldw	r2,-16(fp)
  806728:	10800903 	ldbu	r2,36(r2)
  80672c:	10803fcc 	andi	r2,r2,255
  806730:	1080201c 	xori	r2,r2,128
  806734:	10bfe004 	addi	r2,r2,-128
  806738:	1004803a 	cmplt	r2,r2,zero
  80673c:	10003b1e 	bne	r2,zero,80682c <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  806740:	e0bffc17 	ldw	r2,-16(fp)
  806744:	10800903 	ldbu	r2,36(r2)
  806748:	10803fcc 	andi	r2,r2,255
  80674c:	1080201c 	xori	r2,r2,128
  806750:	10bfe004 	addi	r2,r2,-128
  806754:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  806758:	e0bff717 	ldw	r2,-36(fp)
  80675c:	1004c03a 	cmpne	r2,r2,zero
  806760:	1000031e 	bne	r2,zero,806770 <altera_avalon_lcd_16207_write+0xa0>
  806764:	e0bff807 	ldb	r2,-32(fp)
  806768:	108016d8 	cmpnei	r2,r2,91
  80676c:	1000111e 	bne	r2,zero,8067b4 <altera_avalon_lcd_16207_write+0xe4>
  806770:	e0bff717 	ldw	r2,-36(fp)
  806774:	1005003a 	cmpeq	r2,r2,zero
  806778:	10001a1e 	bne	r2,zero,8067e4 <altera_avalon_lcd_16207_write+0x114>
  80677c:	e0bff807 	ldb	r2,-32(fp)
  806780:	1007883a 	mov	r3,r2
  806784:	00802074 	movhi	r2,129
  806788:	10aa1c04 	addi	r2,r2,-22416
  80678c:	10800017 	ldw	r2,0(r2)
  806790:	1885883a 	add	r2,r3,r2
  806794:	10800003 	ldbu	r2,0(r2)
  806798:	10803fcc 	andi	r2,r2,255
  80679c:	1080010c 	andi	r2,r2,4
  8067a0:	1004c03a 	cmpne	r2,r2,zero
  8067a4:	10000f1e 	bne	r2,zero,8067e4 <altera_avalon_lcd_16207_write+0x114>
  8067a8:	e0bff807 	ldb	r2,-32(fp)
  8067ac:	10800ee0 	cmpeqi	r2,r2,59
  8067b0:	10000c1e 	bne	r2,zero,8067e4 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  8067b4:	e0fff717 	ldw	r3,-36(fp)
  8067b8:	e0bffc17 	ldw	r2,-16(fp)
  8067bc:	1885883a 	add	r2,r3,r2
  8067c0:	10800a04 	addi	r2,r2,40
  8067c4:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8067c8:	e17ff807 	ldb	r5,-32(fp)
  8067cc:	e13ffc17 	ldw	r4,-16(fp)
  8067d0:	08064000 	call	806400 <lcd_handle_escape>

        sp->esccount = -1;
  8067d4:	e0fffc17 	ldw	r3,-16(fp)
  8067d8:	00bfffc4 	movi	r2,-1
  8067dc:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8067e0:	00006c06 	br	806994 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  8067e4:	e0bffc17 	ldw	r2,-16(fp)
  8067e8:	10800903 	ldbu	r2,36(r2)
  8067ec:	10803fcc 	andi	r2,r2,255
  8067f0:	108001e8 	cmpgeui	r2,r2,7
  8067f4:	1000671e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  8067f8:	e0fff717 	ldw	r3,-36(fp)
  8067fc:	e0bffc17 	ldw	r2,-16(fp)
  806800:	1885883a 	add	r2,r3,r2
  806804:	10c00a04 	addi	r3,r2,40
  806808:	e0bff803 	ldbu	r2,-32(fp)
  80680c:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  806810:	e0bffc17 	ldw	r2,-16(fp)
  806814:	10800903 	ldbu	r2,36(r2)
  806818:	10800044 	addi	r2,r2,1
  80681c:	1007883a 	mov	r3,r2
  806820:	e0bffc17 	ldw	r2,-16(fp)
  806824:	10c00905 	stb	r3,36(r2)
  806828:	00005a06 	br	806994 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  80682c:	e0bff807 	ldb	r2,-32(fp)
  806830:	108006d8 	cmpnei	r2,r2,27
  806834:	1000031e 	bne	r2,zero,806844 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  806838:	e0bffc17 	ldw	r2,-16(fp)
  80683c:	10000905 	stb	zero,36(r2)
  806840:	00005406 	br	806994 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  806844:	e0bff807 	ldb	r2,-32(fp)
  806848:	10800358 	cmpnei	r2,r2,13
  80684c:	1000031e 	bne	r2,zero,80685c <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  806850:	e0bffc17 	ldw	r2,-16(fp)
  806854:	10000845 	stb	zero,33(r2)
  806858:	00004e06 	br	806994 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  80685c:	e0bff807 	ldb	r2,-32(fp)
  806860:	10800298 	cmpnei	r2,r2,10
  806864:	1000101e 	bne	r2,zero,8068a8 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  806868:	e0bffc17 	ldw	r2,-16(fp)
  80686c:	10000845 	stb	zero,33(r2)
      sp->y++;
  806870:	e0bffc17 	ldw	r2,-16(fp)
  806874:	10800883 	ldbu	r2,34(r2)
  806878:	10800044 	addi	r2,r2,1
  80687c:	1007883a 	mov	r3,r2
  806880:	e0bffc17 	ldw	r2,-16(fp)
  806884:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  806888:	e0bffc17 	ldw	r2,-16(fp)
  80688c:	10800883 	ldbu	r2,34(r2)
  806890:	10803fcc 	andi	r2,r2,255
  806894:	108000f0 	cmpltui	r2,r2,3
  806898:	10003e1e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  80689c:	e13ffc17 	ldw	r4,-16(fp)
  8068a0:	08063380 	call	806338 <lcd_scroll_up>
  8068a4:	00003b06 	br	806994 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  8068a8:	e0bff807 	ldb	r2,-32(fp)
  8068ac:	10800218 	cmpnei	r2,r2,8
  8068b0:	10000c1e 	bne	r2,zero,8068e4 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  8068b4:	e0bffc17 	ldw	r2,-16(fp)
  8068b8:	10800843 	ldbu	r2,33(r2)
  8068bc:	10803fcc 	andi	r2,r2,255
  8068c0:	1005003a 	cmpeq	r2,r2,zero
  8068c4:	1000331e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  8068c8:	e0bffc17 	ldw	r2,-16(fp)
  8068cc:	10800843 	ldbu	r2,33(r2)
  8068d0:	10bfffc4 	addi	r2,r2,-1
  8068d4:	1007883a 	mov	r3,r2
  8068d8:	e0bffc17 	ldw	r2,-16(fp)
  8068dc:	10c00845 	stb	r3,33(r2)
  8068e0:	00002c06 	br	806994 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  8068e4:	e0bff807 	ldb	r2,-32(fp)
  8068e8:	1007883a 	mov	r3,r2
  8068ec:	00802074 	movhi	r2,129
  8068f0:	10aa1c04 	addi	r2,r2,-22416
  8068f4:	10800017 	ldw	r2,0(r2)
  8068f8:	1885883a 	add	r2,r3,r2
  8068fc:	10800003 	ldbu	r2,0(r2)
  806900:	10803fcc 	andi	r2,r2,255
  806904:	1080201c 	xori	r2,r2,128
  806908:	10bfe004 	addi	r2,r2,-128
  80690c:	108025cc 	andi	r2,r2,151
  806910:	1005003a 	cmpeq	r2,r2,zero
  806914:	10001f1e 	bne	r2,zero,806994 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  806918:	e0bffc17 	ldw	r2,-16(fp)
  80691c:	10800883 	ldbu	r2,34(r2)
  806920:	10803fcc 	andi	r2,r2,255
  806924:	108000b0 	cmpltui	r2,r2,2
  806928:	1000021e 	bne	r2,zero,806934 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  80692c:	e13ffc17 	ldw	r4,-16(fp)
  806930:	08063380 	call	806338 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  806934:	e0bffc17 	ldw	r2,-16(fp)
  806938:	10800843 	ldbu	r2,33(r2)
  80693c:	10803fcc 	andi	r2,r2,255
  806940:	10801428 	cmpgeui	r2,r2,80
  806944:	10000d1e 	bne	r2,zero,80697c <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  806948:	e0bffc17 	ldw	r2,-16(fp)
  80694c:	10800883 	ldbu	r2,34(r2)
  806950:	11003fcc 	andi	r4,r2,255
  806954:	e0bffc17 	ldw	r2,-16(fp)
  806958:	10800843 	ldbu	r2,33(r2)
  80695c:	11403fcc 	andi	r5,r2,255
  806960:	e0fffc17 	ldw	r3,-16(fp)
  806964:	20801924 	muli	r2,r4,100
  806968:	10c5883a 	add	r2,r2,r3
  80696c:	1145883a 	add	r2,r2,r5
  806970:	10c01004 	addi	r3,r2,64
  806974:	e0bff803 	ldbu	r2,-32(fp)
  806978:	18800005 	stb	r2,0(r3)

      sp->x++;
  80697c:	e0bffc17 	ldw	r2,-16(fp)
  806980:	10800843 	ldbu	r2,33(r2)
  806984:	10800044 	addi	r2,r2,1
  806988:	1007883a 	mov	r3,r2
  80698c:	e0bffc17 	ldw	r2,-16(fp)
  806990:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  806994:	e0bffd17 	ldw	r2,-12(fp)
  806998:	10800044 	addi	r2,r2,1
  80699c:	e0bffd15 	stw	r2,-12(fp)
  8069a0:	e0fffd17 	ldw	r3,-12(fp)
  8069a4:	e0bffb17 	ldw	r2,-20(fp)
  8069a8:	18bf5b36 	bltu	r3,r2,806718 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8069ac:	00800404 	movi	r2,16
  8069b0:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8069b4:	e03ffa15 	stw	zero,-24(fp)
  8069b8:	00003606 	br	806a94 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8069bc:	00801404 	movi	r2,80
  8069c0:	e0bff615 	stw	r2,-40(fp)
  8069c4:	00001106 	br	806a0c <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  8069c8:	e13ffa17 	ldw	r4,-24(fp)
  8069cc:	e0bff617 	ldw	r2,-40(fp)
  8069d0:	117fffc4 	addi	r5,r2,-1
  8069d4:	e0fffc17 	ldw	r3,-16(fp)
  8069d8:	20801924 	muli	r2,r4,100
  8069dc:	10c5883a 	add	r2,r2,r3
  8069e0:	1145883a 	add	r2,r2,r5
  8069e4:	10801004 	addi	r2,r2,64
  8069e8:	10800003 	ldbu	r2,0(r2)
  8069ec:	10803fcc 	andi	r2,r2,255
  8069f0:	1080201c 	xori	r2,r2,128
  8069f4:	10bfe004 	addi	r2,r2,-128
  8069f8:	10800818 	cmpnei	r2,r2,32
  8069fc:	1000061e 	bne	r2,zero,806a18 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  806a00:	e0bff617 	ldw	r2,-40(fp)
  806a04:	10bfffc4 	addi	r2,r2,-1
  806a08:	e0bff615 	stw	r2,-40(fp)
  806a0c:	e0bff617 	ldw	r2,-40(fp)
  806a10:	10800048 	cmpgei	r2,r2,1
  806a14:	103fec1e 	bne	r2,zero,8069c8 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  806a18:	e0bff617 	ldw	r2,-40(fp)
  806a1c:	10800448 	cmpgei	r2,r2,17
  806a20:	1000031e 	bne	r2,zero,806a30 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  806a24:	00800404 	movi	r2,16
  806a28:	e0bff615 	stw	r2,-40(fp)
  806a2c:	00000306 	br	806a3c <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  806a30:	e0bff617 	ldw	r2,-40(fp)
  806a34:	10800044 	addi	r2,r2,1
  806a38:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  806a3c:	e13ffa17 	ldw	r4,-24(fp)
  806a40:	e0bff617 	ldw	r2,-40(fp)
  806a44:	100b883a 	mov	r5,r2
  806a48:	e0fffc17 	ldw	r3,-16(fp)
  806a4c:	20801924 	muli	r2,r4,100
  806a50:	10c5883a 	add	r2,r2,r3
  806a54:	10802404 	addi	r2,r2,144
  806a58:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  806a5c:	e0fff917 	ldw	r3,-28(fp)
  806a60:	e0bff617 	ldw	r2,-40(fp)
  806a64:	1880020e 	bge	r3,r2,806a70 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  806a68:	e0bff617 	ldw	r2,-40(fp)
  806a6c:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  806a70:	e0bffa17 	ldw	r2,-24(fp)
  806a74:	e0fffc17 	ldw	r3,-16(fp)
  806a78:	10801924 	muli	r2,r2,100
  806a7c:	10c5883a 	add	r2,r2,r3
  806a80:	10802404 	addi	r2,r2,144
  806a84:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806a88:	e0bffa17 	ldw	r2,-24(fp)
  806a8c:	10800044 	addi	r2,r2,1
  806a90:	e0bffa15 	stw	r2,-24(fp)
  806a94:	e0bffa17 	ldw	r2,-24(fp)
  806a98:	10800090 	cmplti	r2,r2,2
  806a9c:	103fc71e 	bne	r2,zero,8069bc <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  806aa0:	e0bff917 	ldw	r2,-28(fp)
  806aa4:	10800448 	cmpgei	r2,r2,17
  806aa8:	1000031e 	bne	r2,zero,806ab8 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  806aac:	e0bffc17 	ldw	r2,-16(fp)
  806ab0:	10000985 	stb	zero,38(r2)
  806ab4:	00002d06 	br	806b6c <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  806ab8:	e0bff917 	ldw	r2,-28(fp)
  806abc:	1085883a 	add	r2,r2,r2
  806ac0:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  806ac4:	e0bff917 	ldw	r2,-28(fp)
  806ac8:	1007883a 	mov	r3,r2
  806acc:	e0bffc17 	ldw	r2,-16(fp)
  806ad0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806ad4:	e03ffa15 	stw	zero,-24(fp)
  806ad8:	00002106 	br	806b60 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  806adc:	e0bffa17 	ldw	r2,-24(fp)
  806ae0:	e0fffc17 	ldw	r3,-16(fp)
  806ae4:	10801924 	muli	r2,r2,100
  806ae8:	10c5883a 	add	r2,r2,r3
  806aec:	10802404 	addi	r2,r2,144
  806af0:	10800043 	ldbu	r2,1(r2)
  806af4:	10803fcc 	andi	r2,r2,255
  806af8:	1080201c 	xori	r2,r2,128
  806afc:	10bfe004 	addi	r2,r2,-128
  806b00:	10800450 	cmplti	r2,r2,17
  806b04:	1000131e 	bne	r2,zero,806b54 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  806b08:	e43ffa17 	ldw	r16,-24(fp)
  806b0c:	e0bffa17 	ldw	r2,-24(fp)
  806b10:	e0fffc17 	ldw	r3,-16(fp)
  806b14:	10801924 	muli	r2,r2,100
  806b18:	10c5883a 	add	r2,r2,r3
  806b1c:	10802404 	addi	r2,r2,144
  806b20:	10800043 	ldbu	r2,1(r2)
  806b24:	10803fcc 	andi	r2,r2,255
  806b28:	1080201c 	xori	r2,r2,128
  806b2c:	10bfe004 	addi	r2,r2,-128
  806b30:	1008923a 	slli	r4,r2,8
  806b34:	e17ff917 	ldw	r5,-28(fp)
  806b38:	08088000 	call	808800 <__divsi3>
  806b3c:	1009883a 	mov	r4,r2
  806b40:	e0fffc17 	ldw	r3,-16(fp)
  806b44:	80801924 	muli	r2,r16,100
  806b48:	10c5883a 	add	r2,r2,r3
  806b4c:	10802404 	addi	r2,r2,144
  806b50:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806b54:	e0bffa17 	ldw	r2,-24(fp)
  806b58:	10800044 	addi	r2,r2,1
  806b5c:	e0bffa15 	stw	r2,-24(fp)
  806b60:	e0bffa17 	ldw	r2,-24(fp)
  806b64:	10800090 	cmplti	r2,r2,2
  806b68:	103fdc1e 	bne	r2,zero,806adc <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  806b6c:	e0bffc17 	ldw	r2,-16(fp)
  806b70:	10800943 	ldbu	r2,37(r2)
  806b74:	10803fcc 	andi	r2,r2,255
  806b78:	1080201c 	xori	r2,r2,128
  806b7c:	10bfe004 	addi	r2,r2,-128
  806b80:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  806b84:	e13ffc17 	ldw	r4,-16(fp)
  806b88:	080614c0 	call	80614c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  806b8c:	e0bffc17 	ldw	r2,-16(fp)
  806b90:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  806b94:	e0bffc17 	ldw	r2,-16(fp)
  806b98:	10800943 	ldbu	r2,37(r2)
  806b9c:	10c03fcc 	andi	r3,r2,255
  806ba0:	18c0201c 	xori	r3,r3,128
  806ba4:	18ffe004 	addi	r3,r3,-128
  806ba8:	e0bff517 	ldw	r2,-44(fp)
  806bac:	18800426 	beq	r3,r2,806bc0 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  806bb0:	e0fffc17 	ldw	r3,-16(fp)
  806bb4:	00800044 	movi	r2,1
  806bb8:	188009c5 	stb	r2,39(r3)
  }
  806bbc:	003feb06 	br	806b6c <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  806bc0:	e0bffe17 	ldw	r2,-8(fp)
}
  806bc4:	e037883a 	mov	sp,fp
  806bc8:	dfc00217 	ldw	ra,8(sp)
  806bcc:	df000117 	ldw	fp,4(sp)
  806bd0:	dc000017 	ldw	r16,0(sp)
  806bd4:	dec00304 	addi	sp,sp,12
  806bd8:	f800283a 	ret

00806bdc <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  806bdc:	defffc04 	addi	sp,sp,-16
  806be0:	dfc00315 	stw	ra,12(sp)
  806be4:	df000215 	stw	fp,8(sp)
  806be8:	df000204 	addi	fp,sp,8
  806bec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  806bf0:	e0bfff17 	ldw	r2,-4(fp)
  806bf4:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  806bf8:	e0bffe17 	ldw	r2,-8(fp)
  806bfc:	10800943 	ldbu	r2,37(r2)
  806c00:	10803fcc 	andi	r2,r2,255
  806c04:	1080201c 	xori	r2,r2,128
  806c08:	10bfe004 	addi	r2,r2,-128
  806c0c:	10c00044 	addi	r3,r2,1
  806c10:	e0bffe17 	ldw	r2,-8(fp)
  806c14:	10800983 	ldbu	r2,38(r2)
  806c18:	10803fcc 	andi	r2,r2,255
  806c1c:	1080201c 	xori	r2,r2,128
  806c20:	10bfe004 	addi	r2,r2,-128
  806c24:	18800316 	blt	r3,r2,806c34 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  806c28:	e0bffe17 	ldw	r2,-8(fp)
  806c2c:	10000945 	stb	zero,37(r2)
  806c30:	00000606 	br	806c4c <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  806c34:	e0bffe17 	ldw	r2,-8(fp)
  806c38:	10800943 	ldbu	r2,37(r2)
  806c3c:	10800044 	addi	r2,r2,1
  806c40:	1007883a 	mov	r3,r2
  806c44:	e0bffe17 	ldw	r2,-8(fp)
  806c48:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  806c4c:	e0bffe17 	ldw	r2,-8(fp)
  806c50:	10800983 	ldbu	r2,38(r2)
  806c54:	10803fcc 	andi	r2,r2,255
  806c58:	1080201c 	xori	r2,r2,128
  806c5c:	10bfe004 	addi	r2,r2,-128
  806c60:	10800050 	cmplti	r2,r2,1
  806c64:	1000091e 	bne	r2,zero,806c8c <alt_lcd_16207_timeout+0xb0>
  806c68:	e0bffe17 	ldw	r2,-8(fp)
  806c6c:	108009c3 	ldbu	r2,39(r2)
  806c70:	10803fcc 	andi	r2,r2,255
  806c74:	1080201c 	xori	r2,r2,128
  806c78:	10bfe004 	addi	r2,r2,-128
  806c7c:	1004c03a 	cmpne	r2,r2,zero
  806c80:	1000021e 	bne	r2,zero,806c8c <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  806c84:	e13ffe17 	ldw	r4,-8(fp)
  806c88:	080614c0 	call	80614c <lcd_repaint_screen>

  return sp->period;
  806c8c:	e0bffe17 	ldw	r2,-8(fp)
  806c90:	10800717 	ldw	r2,28(r2)
}
  806c94:	e037883a 	mov	sp,fp
  806c98:	dfc00117 	ldw	ra,4(sp)
  806c9c:	df000017 	ldw	fp,0(sp)
  806ca0:	dec00204 	addi	sp,sp,8
  806ca4:	f800283a 	ret

00806ca8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  806ca8:	defffc04 	addi	sp,sp,-16
  806cac:	dfc00315 	stw	ra,12(sp)
  806cb0:	df000215 	stw	fp,8(sp)
  806cb4:	df000204 	addi	fp,sp,8
  806cb8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  806cbc:	e0bfff17 	ldw	r2,-4(fp)
  806cc0:	10800017 	ldw	r2,0(r2)
  806cc4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  806cc8:	e0bfff17 	ldw	r2,-4(fp)
  806ccc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  806cd0:	010ea604 	movi	r4,15000
  806cd4:	08081b00 	call	8081b0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806cd8:	e0bffe17 	ldw	r2,-8(fp)
  806cdc:	1007883a 	mov	r3,r2
  806ce0:	00800c04 	movi	r2,48
  806ce4:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  806ce8:	01040104 	movi	r4,4100
  806cec:	08081b00 	call	8081b0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806cf0:	e0bffe17 	ldw	r2,-8(fp)
  806cf4:	1007883a 	mov	r3,r2
  806cf8:	00800c04 	movi	r2,48
  806cfc:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  806d00:	0100fa04 	movi	r4,1000
  806d04:	08081b00 	call	8081b0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806d08:	e0bffe17 	ldw	r2,-8(fp)
  806d0c:	1007883a 	mov	r3,r2
  806d10:	00800c04 	movi	r2,48
  806d14:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  806d18:	e13fff17 	ldw	r4,-4(fp)
  806d1c:	01400e04 	movi	r5,56
  806d20:	0805efc0 	call	805efc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  806d24:	e13fff17 	ldw	r4,-4(fp)
  806d28:	01400204 	movi	r5,8
  806d2c:	0805efc0 	call	805efc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  806d30:	e13fff17 	ldw	r4,-4(fp)
  806d34:	08060880 	call	806088 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  806d38:	e13fff17 	ldw	r4,-4(fp)
  806d3c:	01400184 	movi	r5,6
  806d40:	0805efc0 	call	805efc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  806d44:	e13fff17 	ldw	r4,-4(fp)
  806d48:	01400304 	movi	r5,12
  806d4c:	0805efc0 	call	805efc <lcd_write_command>

  sp->esccount = -1;
  806d50:	e0ffff17 	ldw	r3,-4(fp)
  806d54:	00bfffc4 	movi	r2,-1
  806d58:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  806d5c:	e0bfff17 	ldw	r2,-4(fp)
  806d60:	11000a04 	addi	r4,r2,40
  806d64:	000b883a 	mov	r5,zero
  806d68:	01800204 	movi	r6,8
  806d6c:	08039500 	call	803950 <memset>

  sp->scrollpos = 0;
  806d70:	e0bfff17 	ldw	r2,-4(fp)
  806d74:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  806d78:	e0bfff17 	ldw	r2,-4(fp)
  806d7c:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  806d80:	e0bfff17 	ldw	r2,-4(fp)
  806d84:	100009c5 	stb	zero,39(r2)
  806d88:	00802074 	movhi	r2,129
  806d8c:	10b14504 	addi	r2,r2,-15084
  806d90:	10800017 	ldw	r2,0(r2)
  806d94:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  806d98:	01400284 	movi	r5,10
  806d9c:	08088c00 	call	8088c0 <__udivsi3>
  806da0:	1007883a 	mov	r3,r2
  806da4:	e0bfff17 	ldw	r2,-4(fp)
  806da8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  806dac:	e0bfff17 	ldw	r2,-4(fp)
  806db0:	11000104 	addi	r4,r2,4
  806db4:	e0bfff17 	ldw	r2,-4(fp)
  806db8:	10800717 	ldw	r2,28(r2)
  806dbc:	100b883a 	mov	r5,r2
  806dc0:	01802034 	movhi	r6,128
  806dc4:	319af704 	addi	r6,r6,27612
  806dc8:	e1ffff17 	ldw	r7,-4(fp)
  806dcc:	08042b40 	call	8042b4 <alt_alarm_start>
}
  806dd0:	e037883a 	mov	sp,fp
  806dd4:	dfc00117 	ldw	ra,4(sp)
  806dd8:	df000017 	ldw	fp,0(sp)
  806ddc:	dec00204 	addi	sp,sp,8
  806de0:	f800283a 	ret

00806de4 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806de4:	defffa04 	addi	sp,sp,-24
  806de8:	dfc00515 	stw	ra,20(sp)
  806dec:	df000415 	stw	fp,16(sp)
  806df0:	df000404 	addi	fp,sp,16
  806df4:	e13ffd15 	stw	r4,-12(fp)
  806df8:	e17ffe15 	stw	r5,-8(fp)
  806dfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  806e00:	e0bffd17 	ldw	r2,-12(fp)
  806e04:	10800017 	ldw	r2,0(r2)
  806e08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  806e0c:	e0bffc17 	ldw	r2,-16(fp)
  806e10:	11000a04 	addi	r4,r2,40
  806e14:	e0bffd17 	ldw	r2,-12(fp)
  806e18:	11c00217 	ldw	r7,8(r2)
  806e1c:	e17ffe17 	ldw	r5,-8(fp)
  806e20:	e1bfff17 	ldw	r6,-4(fp)
  806e24:	08066d00 	call	8066d0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  806e28:	e037883a 	mov	sp,fp
  806e2c:	dfc00117 	ldw	ra,4(sp)
  806e30:	df000017 	ldw	fp,0(sp)
  806e34:	dec00204 	addi	sp,sp,8
  806e38:	f800283a 	ret

00806e3c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  806e3c:	defffa04 	addi	sp,sp,-24
  806e40:	dfc00515 	stw	ra,20(sp)
  806e44:	df000415 	stw	fp,16(sp)
  806e48:	df000404 	addi	fp,sp,16
  806e4c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  806e50:	e0bfff17 	ldw	r2,-4(fp)
  806e54:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  806e58:	e0bfff17 	ldw	r2,-4(fp)
  806e5c:	10800104 	addi	r2,r2,4
  806e60:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806e64:	0005303a 	rdctl	r2,status
  806e68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806e6c:	e0fffd17 	ldw	r3,-12(fp)
  806e70:	00bfff84 	movi	r2,-2
  806e74:	1884703a 	and	r2,r3,r2
  806e78:	1001703a 	wrctl	status,r2
  
  return context;
  806e7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  806e80:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  806e84:	08050c40 	call	8050c4 <alt_tick>
  806e88:	e0bffe17 	ldw	r2,-8(fp)
  806e8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806e90:	e0bffc17 	ldw	r2,-16(fp)
  806e94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  806e98:	e037883a 	mov	sp,fp
  806e9c:	dfc00117 	ldw	ra,4(sp)
  806ea0:	df000017 	ldw	fp,0(sp)
  806ea4:	dec00204 	addi	sp,sp,8
  806ea8:	f800283a 	ret

00806eac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  806eac:	defff804 	addi	sp,sp,-32
  806eb0:	dfc00715 	stw	ra,28(sp)
  806eb4:	df000615 	stw	fp,24(sp)
  806eb8:	df000604 	addi	fp,sp,24
  806ebc:	e13ffc15 	stw	r4,-16(fp)
  806ec0:	e17ffd15 	stw	r5,-12(fp)
  806ec4:	e1bffe15 	stw	r6,-8(fp)
  806ec8:	e1ffff15 	stw	r7,-4(fp)
  806ecc:	e0bfff17 	ldw	r2,-4(fp)
  806ed0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  806ed4:	00802074 	movhi	r2,129
  806ed8:	10b14504 	addi	r2,r2,-15084
  806edc:	10800017 	ldw	r2,0(r2)
  806ee0:	1004c03a 	cmpne	r2,r2,zero
  806ee4:	1000041e 	bne	r2,zero,806ef8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  806ee8:	00c02074 	movhi	r3,129
  806eec:	18f14504 	addi	r3,r3,-15084
  806ef0:	e0bffb17 	ldw	r2,-20(fp)
  806ef4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  806ef8:	e0bffc17 	ldw	r2,-16(fp)
  806efc:	10800104 	addi	r2,r2,4
  806f00:	1007883a 	mov	r3,r2
  806f04:	008001c4 	movi	r2,7
  806f08:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  806f0c:	d8000015 	stw	zero,0(sp)
  806f10:	e13ffd17 	ldw	r4,-12(fp)
  806f14:	e17ffe17 	ldw	r5,-8(fp)
  806f18:	01802034 	movhi	r6,128
  806f1c:	319b8f04 	addi	r6,r6,28220
  806f20:	e1fffc17 	ldw	r7,-16(fp)
  806f24:	0807da80 	call	807da8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  806f28:	e037883a 	mov	sp,fp
  806f2c:	dfc00117 	ldw	ra,4(sp)
  806f30:	df000017 	ldw	fp,0(sp)
  806f34:	dec00204 	addi	sp,sp,8
  806f38:	f800283a 	ret

00806f3c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  806f3c:	defffa04 	addi	sp,sp,-24
  806f40:	dfc00515 	stw	ra,20(sp)
  806f44:	df000415 	stw	fp,16(sp)
  806f48:	df000404 	addi	fp,sp,16
  806f4c:	e13ffd15 	stw	r4,-12(fp)
  806f50:	e17ffe15 	stw	r5,-8(fp)
  806f54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806f58:	e0bffd17 	ldw	r2,-12(fp)
  806f5c:	10800017 	ldw	r2,0(r2)
  806f60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  806f64:	e0bffc17 	ldw	r2,-16(fp)
  806f68:	11000a04 	addi	r4,r2,40
  806f6c:	e0bffd17 	ldw	r2,-12(fp)
  806f70:	11c00217 	ldw	r7,8(r2)
  806f74:	e17ffe17 	ldw	r5,-8(fp)
  806f78:	e1bfff17 	ldw	r6,-4(fp)
  806f7c:	08074340 	call	807434 <altera_avalon_uart_read>
      fd->fd_flags);
}
  806f80:	e037883a 	mov	sp,fp
  806f84:	dfc00117 	ldw	ra,4(sp)
  806f88:	df000017 	ldw	fp,0(sp)
  806f8c:	dec00204 	addi	sp,sp,8
  806f90:	f800283a 	ret

00806f94 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806f94:	defffa04 	addi	sp,sp,-24
  806f98:	dfc00515 	stw	ra,20(sp)
  806f9c:	df000415 	stw	fp,16(sp)
  806fa0:	df000404 	addi	fp,sp,16
  806fa4:	e13ffd15 	stw	r4,-12(fp)
  806fa8:	e17ffe15 	stw	r5,-8(fp)
  806fac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806fb0:	e0bffd17 	ldw	r2,-12(fp)
  806fb4:	10800017 	ldw	r2,0(r2)
  806fb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  806fbc:	e0bffc17 	ldw	r2,-16(fp)
  806fc0:	11000a04 	addi	r4,r2,40
  806fc4:	e0bffd17 	ldw	r2,-12(fp)
  806fc8:	11c00217 	ldw	r7,8(r2)
  806fcc:	e17ffe17 	ldw	r5,-8(fp)
  806fd0:	e1bfff17 	ldw	r6,-4(fp)
  806fd4:	08076c40 	call	8076c4 <altera_avalon_uart_write>
      fd->fd_flags);
}
  806fd8:	e037883a 	mov	sp,fp
  806fdc:	dfc00117 	ldw	ra,4(sp)
  806fe0:	df000017 	ldw	fp,0(sp)
  806fe4:	dec00204 	addi	sp,sp,8
  806fe8:	f800283a 	ret

00806fec <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  806fec:	defffc04 	addi	sp,sp,-16
  806ff0:	dfc00315 	stw	ra,12(sp)
  806ff4:	df000215 	stw	fp,8(sp)
  806ff8:	df000204 	addi	fp,sp,8
  806ffc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  807000:	e0bfff17 	ldw	r2,-4(fp)
  807004:	10800017 	ldw	r2,0(r2)
  807008:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80700c:	e0bffe17 	ldw	r2,-8(fp)
  807010:	11000a04 	addi	r4,r2,40
  807014:	e0bfff17 	ldw	r2,-4(fp)
  807018:	11400217 	ldw	r5,8(r2)
  80701c:	08073d40 	call	8073d4 <altera_avalon_uart_close>
}
  807020:	e037883a 	mov	sp,fp
  807024:	dfc00117 	ldw	ra,4(sp)
  807028:	df000017 	ldw	fp,0(sp)
  80702c:	dec00204 	addi	sp,sp,8
  807030:	f800283a 	ret

00807034 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  807034:	defff704 	addi	sp,sp,-36
  807038:	dfc00815 	stw	ra,32(sp)
  80703c:	df000715 	stw	fp,28(sp)
  807040:	df000704 	addi	fp,sp,28
  807044:	e13ffc15 	stw	r4,-16(fp)
  807048:	e17ffd15 	stw	r5,-12(fp)
  80704c:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  807050:	e0bffc17 	ldw	r2,-16(fp)
  807054:	10800017 	ldw	r2,0(r2)
  807058:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80705c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  807060:	1004c03a 	cmpne	r2,r2,zero
  807064:	1000061e 	bne	r2,zero,807080 <altera_avalon_uart_init+0x4c>
  807068:	0005883a 	mov	r2,zero
  80706c:	1004c03a 	cmpne	r2,r2,zero
  807070:	1000031e 	bne	r2,zero,807080 <altera_avalon_uart_init+0x4c>
  807074:	0005883a 	mov	r2,zero
  807078:	1005003a 	cmpeq	r2,r2,zero
  80707c:	1000031e 	bne	r2,zero,80708c <altera_avalon_uart_init+0x58>
  807080:	00800044 	movi	r2,1
  807084:	e0bfff15 	stw	r2,-4(fp)
  807088:	00000106 	br	807090 <altera_avalon_uart_init+0x5c>
  80708c:	e03fff15 	stw	zero,-4(fp)
  807090:	e0bfff17 	ldw	r2,-4(fp)
  807094:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  807098:	e0bffa17 	ldw	r2,-24(fp)
  80709c:	1004c03a 	cmpne	r2,r2,zero
  8070a0:	1000111e 	bne	r2,zero,8070e8 <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8070a4:	e0fffc17 	ldw	r3,-16(fp)
  8070a8:	00832004 	movi	r2,3200
  8070ac:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8070b0:	e0bffb17 	ldw	r2,-20(fp)
  8070b4:	11000304 	addi	r4,r2,12
  8070b8:	e0bffc17 	ldw	r2,-16(fp)
  8070bc:	10800117 	ldw	r2,4(r2)
  8070c0:	1007883a 	mov	r3,r2
  8070c4:	2005883a 	mov	r2,r4
  8070c8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8070cc:	d8000015 	stw	zero,0(sp)
  8070d0:	e13ffd17 	ldw	r4,-12(fp)
  8070d4:	e17ffe17 	ldw	r5,-8(fp)
  8070d8:	01802034 	movhi	r6,128
  8070dc:	319c3f04 	addi	r6,r6,28924
  8070e0:	e1fffc17 	ldw	r7,-16(fp)
  8070e4:	0807da80 	call	807da8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8070e8:	e037883a 	mov	sp,fp
  8070ec:	dfc00117 	ldw	ra,4(sp)
  8070f0:	df000017 	ldw	fp,0(sp)
  8070f4:	dec00204 	addi	sp,sp,8
  8070f8:	f800283a 	ret

008070fc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8070fc:	defffa04 	addi	sp,sp,-24
  807100:	dfc00515 	stw	ra,20(sp)
  807104:	df000415 	stw	fp,16(sp)
  807108:	df000404 	addi	fp,sp,16
  80710c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  807110:	e0bfff17 	ldw	r2,-4(fp)
  807114:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  807118:	e0bffd17 	ldw	r2,-12(fp)
  80711c:	10800017 	ldw	r2,0(r2)
  807120:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  807124:	e0bffc17 	ldw	r2,-16(fp)
  807128:	10800204 	addi	r2,r2,8
  80712c:	10800037 	ldwio	r2,0(r2)
  807130:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  807134:	e0bffc17 	ldw	r2,-16(fp)
  807138:	10800204 	addi	r2,r2,8
  80713c:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  807140:	e0bffc17 	ldw	r2,-16(fp)
  807144:	10800204 	addi	r2,r2,8
  807148:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80714c:	e0bffe17 	ldw	r2,-8(fp)
  807150:	1080200c 	andi	r2,r2,128
  807154:	1005003a 	cmpeq	r2,r2,zero
  807158:	1000031e 	bne	r2,zero,807168 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80715c:	e13ffd17 	ldw	r4,-12(fp)
  807160:	e17ffe17 	ldw	r5,-8(fp)
  807164:	08071980 	call	807198 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  807168:	e0bffe17 	ldw	r2,-8(fp)
  80716c:	1081100c 	andi	r2,r2,1088
  807170:	1005003a 	cmpeq	r2,r2,zero
  807174:	1000031e 	bne	r2,zero,807184 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  807178:	e13ffd17 	ldw	r4,-12(fp)
  80717c:	e17ffe17 	ldw	r5,-8(fp)
  807180:	08072780 	call	807278 <altera_avalon_uart_txirq>
  }
  

}
  807184:	e037883a 	mov	sp,fp
  807188:	dfc00117 	ldw	ra,4(sp)
  80718c:	df000017 	ldw	fp,0(sp)
  807190:	dec00204 	addi	sp,sp,8
  807194:	f800283a 	ret

00807198 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  807198:	defffc04 	addi	sp,sp,-16
  80719c:	df000315 	stw	fp,12(sp)
  8071a0:	df000304 	addi	fp,sp,12
  8071a4:	e13ffe15 	stw	r4,-8(fp)
  8071a8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8071ac:	e0bfff17 	ldw	r2,-4(fp)
  8071b0:	108000cc 	andi	r2,r2,3
  8071b4:	1004c03a 	cmpne	r2,r2,zero
  8071b8:	10002b1e 	bne	r2,zero,807268 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8071bc:	e0bffe17 	ldw	r2,-8(fp)
  8071c0:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8071c4:	e0bffe17 	ldw	r2,-8(fp)
  8071c8:	10800317 	ldw	r2,12(r2)
  8071cc:	10800044 	addi	r2,r2,1
  8071d0:	10800fcc 	andi	r2,r2,63
  8071d4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8071d8:	e0bffe17 	ldw	r2,-8(fp)
  8071dc:	11000317 	ldw	r4,12(r2)
  8071e0:	e0bffe17 	ldw	r2,-8(fp)
  8071e4:	10800017 	ldw	r2,0(r2)
  8071e8:	10800037 	ldwio	r2,0(r2)
  8071ec:	1007883a 	mov	r3,r2
  8071f0:	e0bffe17 	ldw	r2,-8(fp)
  8071f4:	2085883a 	add	r2,r4,r2
  8071f8:	10800704 	addi	r2,r2,28
  8071fc:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  807200:	e0fffe17 	ldw	r3,-8(fp)
  807204:	e0bffd17 	ldw	r2,-12(fp)
  807208:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80720c:	e0bffe17 	ldw	r2,-8(fp)
  807210:	10800317 	ldw	r2,12(r2)
  807214:	10800044 	addi	r2,r2,1
  807218:	10800fcc 	andi	r2,r2,63
  80721c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  807220:	e0bffe17 	ldw	r2,-8(fp)
  807224:	10c00217 	ldw	r3,8(r2)
  807228:	e0bffd17 	ldw	r2,-12(fp)
  80722c:	18800e1e 	bne	r3,r2,807268 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  807230:	e0bffe17 	ldw	r2,-8(fp)
  807234:	10c00117 	ldw	r3,4(r2)
  807238:	00bfdfc4 	movi	r2,-129
  80723c:	1886703a 	and	r3,r3,r2
  807240:	e0bffe17 	ldw	r2,-8(fp)
  807244:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  807248:	e0bffe17 	ldw	r2,-8(fp)
  80724c:	10800017 	ldw	r2,0(r2)
  807250:	11000304 	addi	r4,r2,12
  807254:	e0bffe17 	ldw	r2,-8(fp)
  807258:	10800117 	ldw	r2,4(r2)
  80725c:	1007883a 	mov	r3,r2
  807260:	2005883a 	mov	r2,r4
  807264:	10c00035 	stwio	r3,0(r2)
  }   
}
  807268:	e037883a 	mov	sp,fp
  80726c:	df000017 	ldw	fp,0(sp)
  807270:	dec00104 	addi	sp,sp,4
  807274:	f800283a 	ret

00807278 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  807278:	defffd04 	addi	sp,sp,-12
  80727c:	df000215 	stw	fp,8(sp)
  807280:	df000204 	addi	fp,sp,8
  807284:	e13ffe15 	stw	r4,-8(fp)
  807288:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80728c:	e0bffe17 	ldw	r2,-8(fp)
  807290:	10c00417 	ldw	r3,16(r2)
  807294:	e0bffe17 	ldw	r2,-8(fp)
  807298:	10800517 	ldw	r2,20(r2)
  80729c:	18803626 	beq	r3,r2,807378 <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8072a0:	e0bffe17 	ldw	r2,-8(fp)
  8072a4:	10800617 	ldw	r2,24(r2)
  8072a8:	1080008c 	andi	r2,r2,2
  8072ac:	1005003a 	cmpeq	r2,r2,zero
  8072b0:	1000041e 	bne	r2,zero,8072c4 <altera_avalon_uart_txirq+0x4c>
  8072b4:	e0bfff17 	ldw	r2,-4(fp)
  8072b8:	1082000c 	andi	r2,r2,2048
  8072bc:	1005003a 	cmpeq	r2,r2,zero
  8072c0:	10001e1e 	bne	r2,zero,80733c <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8072c4:	e0bffe17 	ldw	r2,-8(fp)
  8072c8:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8072cc:	e0bffe17 	ldw	r2,-8(fp)
  8072d0:	10800017 	ldw	r2,0(r2)
  8072d4:	11000104 	addi	r4,r2,4
  8072d8:	e0bffe17 	ldw	r2,-8(fp)
  8072dc:	10c00417 	ldw	r3,16(r2)
  8072e0:	e0bffe17 	ldw	r2,-8(fp)
  8072e4:	1885883a 	add	r2,r3,r2
  8072e8:	10801704 	addi	r2,r2,92
  8072ec:	10800003 	ldbu	r2,0(r2)
  8072f0:	10c03fcc 	andi	r3,r2,255
  8072f4:	2005883a 	mov	r2,r4
  8072f8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8072fc:	e0bffe17 	ldw	r2,-8(fp)
  807300:	10800417 	ldw	r2,16(r2)
  807304:	10c00044 	addi	r3,r2,1
  807308:	e0bffe17 	ldw	r2,-8(fp)
  80730c:	10c00415 	stw	r3,16(r2)
  807310:	e0bffe17 	ldw	r2,-8(fp)
  807314:	10800417 	ldw	r2,16(r2)
  807318:	10c00fcc 	andi	r3,r2,63
  80731c:	e0bffe17 	ldw	r2,-8(fp)
  807320:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  807324:	e0bffe17 	ldw	r2,-8(fp)
  807328:	10800117 	ldw	r2,4(r2)
  80732c:	10c01014 	ori	r3,r2,64
  807330:	e0bffe17 	ldw	r2,-8(fp)
  807334:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  807338:	00000f06 	br	807378 <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80733c:	e0bffe17 	ldw	r2,-8(fp)
  807340:	10800017 	ldw	r2,0(r2)
  807344:	10800204 	addi	r2,r2,8
  807348:	10800037 	ldwio	r2,0(r2)
  80734c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  807350:	e0bfff17 	ldw	r2,-4(fp)
  807354:	1082000c 	andi	r2,r2,2048
  807358:	1004c03a 	cmpne	r2,r2,zero
  80735c:	1000061e 	bne	r2,zero,807378 <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  807360:	e0bffe17 	ldw	r2,-8(fp)
  807364:	10c00117 	ldw	r3,4(r2)
  807368:	00bfefc4 	movi	r2,-65
  80736c:	1886703a 	and	r3,r3,r2
  807370:	e0bffe17 	ldw	r2,-8(fp)
  807374:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  807378:	e0bffe17 	ldw	r2,-8(fp)
  80737c:	10c00417 	ldw	r3,16(r2)
  807380:	e0bffe17 	ldw	r2,-8(fp)
  807384:	10800517 	ldw	r2,20(r2)
  807388:	1880061e 	bne	r3,r2,8073a4 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80738c:	e0bffe17 	ldw	r2,-8(fp)
  807390:	10c00117 	ldw	r3,4(r2)
  807394:	00beefc4 	movi	r2,-1089
  807398:	1886703a 	and	r3,r3,r2
  80739c:	e0bffe17 	ldw	r2,-8(fp)
  8073a0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8073a4:	e0bffe17 	ldw	r2,-8(fp)
  8073a8:	10800017 	ldw	r2,0(r2)
  8073ac:	11000304 	addi	r4,r2,12
  8073b0:	e0bffe17 	ldw	r2,-8(fp)
  8073b4:	10800117 	ldw	r2,4(r2)
  8073b8:	1007883a 	mov	r3,r2
  8073bc:	2005883a 	mov	r2,r4
  8073c0:	10c00035 	stwio	r3,0(r2)
}
  8073c4:	e037883a 	mov	sp,fp
  8073c8:	df000017 	ldw	fp,0(sp)
  8073cc:	dec00104 	addi	sp,sp,4
  8073d0:	f800283a 	ret

008073d4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8073d4:	defffc04 	addi	sp,sp,-16
  8073d8:	df000315 	stw	fp,12(sp)
  8073dc:	df000304 	addi	fp,sp,12
  8073e0:	e13ffd15 	stw	r4,-12(fp)
  8073e4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8073e8:	00000706 	br	807408 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8073ec:	e0bffe17 	ldw	r2,-8(fp)
  8073f0:	1090000c 	andi	r2,r2,16384
  8073f4:	1005003a 	cmpeq	r2,r2,zero
  8073f8:	1000031e 	bne	r2,zero,807408 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  8073fc:	00bffd44 	movi	r2,-11
  807400:	e0bfff15 	stw	r2,-4(fp)
  807404:	00000606 	br	807420 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  807408:	e0bffd17 	ldw	r2,-12(fp)
  80740c:	10c00417 	ldw	r3,16(r2)
  807410:	e0bffd17 	ldw	r2,-12(fp)
  807414:	10800517 	ldw	r2,20(r2)
  807418:	18bff41e 	bne	r3,r2,8073ec <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80741c:	e03fff15 	stw	zero,-4(fp)
  807420:	e0bfff17 	ldw	r2,-4(fp)
}
  807424:	e037883a 	mov	sp,fp
  807428:	df000017 	ldw	fp,0(sp)
  80742c:	dec00104 	addi	sp,sp,4
  807430:	f800283a 	ret

00807434 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  807434:	defff004 	addi	sp,sp,-64
  807438:	dfc00f15 	stw	ra,60(sp)
  80743c:	df000e15 	stw	fp,56(sp)
  807440:	df000e04 	addi	fp,sp,56
  807444:	e13ffb15 	stw	r4,-20(fp)
  807448:	e17ffc15 	stw	r5,-16(fp)
  80744c:	e1bffd15 	stw	r6,-12(fp)
  807450:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  807454:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  807458:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80745c:	e0bffe17 	ldw	r2,-8(fp)
  807460:	1090000c 	andi	r2,r2,16384
  807464:	1005003a 	cmpeq	r2,r2,zero
  807468:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  80746c:	e0bffb17 	ldw	r2,-20(fp)
  807470:	10800217 	ldw	r2,8(r2)
  807474:	10800044 	addi	r2,r2,1
  807478:	10800fcc 	andi	r2,r2,63
  80747c:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  807480:	00001906 	br	8074e8 <altera_avalon_uart_read+0xb4>
    {
      count++;
  807484:	e0bff617 	ldw	r2,-40(fp)
  807488:	10800044 	addi	r2,r2,1
  80748c:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  807490:	e0bffb17 	ldw	r2,-20(fp)
  807494:	10c00217 	ldw	r3,8(r2)
  807498:	e0bffb17 	ldw	r2,-20(fp)
  80749c:	1885883a 	add	r2,r3,r2
  8074a0:	10800704 	addi	r2,r2,28
  8074a4:	10800003 	ldbu	r2,0(r2)
  8074a8:	1007883a 	mov	r3,r2
  8074ac:	e0bffc17 	ldw	r2,-16(fp)
  8074b0:	10c00005 	stb	r3,0(r2)
  8074b4:	e0bffc17 	ldw	r2,-16(fp)
  8074b8:	10800044 	addi	r2,r2,1
  8074bc:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  8074c0:	e0bffb17 	ldw	r2,-20(fp)
  8074c4:	10800217 	ldw	r2,8(r2)
  8074c8:	10c00044 	addi	r3,r2,1
  8074cc:	e0bffb17 	ldw	r2,-20(fp)
  8074d0:	10c00215 	stw	r3,8(r2)
  8074d4:	e0bffb17 	ldw	r2,-20(fp)
  8074d8:	10800217 	ldw	r2,8(r2)
  8074dc:	10c00fcc 	andi	r3,r2,63
  8074e0:	e0bffb17 	ldw	r2,-20(fp)
  8074e4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8074e8:	e0fff617 	ldw	r3,-40(fp)
  8074ec:	e0bffd17 	ldw	r2,-12(fp)
  8074f0:	1880050e 	bge	r3,r2,807508 <altera_avalon_uart_read+0xd4>
  8074f4:	e0bffb17 	ldw	r2,-20(fp)
  8074f8:	10c00217 	ldw	r3,8(r2)
  8074fc:	e0bffb17 	ldw	r2,-20(fp)
  807500:	10800317 	ldw	r2,12(r2)
  807504:	18bfdf1e 	bne	r3,r2,807484 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  807508:	e0bff617 	ldw	r2,-40(fp)
  80750c:	1004c03a 	cmpne	r2,r2,zero
  807510:	1000271e 	bne	r2,zero,8075b0 <altera_avalon_uart_read+0x17c>
  807514:	e0bffb17 	ldw	r2,-20(fp)
  807518:	10c00217 	ldw	r3,8(r2)
  80751c:	e0bffb17 	ldw	r2,-20(fp)
  807520:	10800317 	ldw	r2,12(r2)
  807524:	1880221e 	bne	r3,r2,8075b0 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  807528:	e0bff917 	ldw	r2,-28(fp)
  80752c:	1004c03a 	cmpne	r2,r2,zero
  807530:	1000061e 	bne	r2,zero,80754c <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  807534:	08076640 	call	807664 <alt_get_errno>
  807538:	00c002c4 	movi	r3,11
  80753c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  807540:	00800044 	movi	r2,1
  807544:	e0bff705 	stb	r2,-36(fp)
        break;
  807548:	00001f06 	br	8075c8 <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80754c:	0005303a 	rdctl	r2,status
  807550:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807554:	e0fff517 	ldw	r3,-44(fp)
  807558:	00bfff84 	movi	r2,-2
  80755c:	1884703a 	and	r2,r3,r2
  807560:	1001703a 	wrctl	status,r2
  
  return context;
  807564:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  807568:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80756c:	e0bffb17 	ldw	r2,-20(fp)
  807570:	10800117 	ldw	r2,4(r2)
  807574:	10c02014 	ori	r3,r2,128
  807578:	e0bffb17 	ldw	r2,-20(fp)
  80757c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807580:	e0bffb17 	ldw	r2,-20(fp)
  807584:	10800017 	ldw	r2,0(r2)
  807588:	11000304 	addi	r4,r2,12
  80758c:	e0bffb17 	ldw	r2,-20(fp)
  807590:	10800117 	ldw	r2,4(r2)
  807594:	1007883a 	mov	r3,r2
  807598:	2005883a 	mov	r2,r4
  80759c:	10c00035 	stwio	r3,0(r2)
  8075a0:	e0bffa17 	ldw	r2,-24(fp)
  8075a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8075a8:	e0bff417 	ldw	r2,-48(fp)
  8075ac:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8075b0:	e0bff617 	ldw	r2,-40(fp)
  8075b4:	1004c03a 	cmpne	r2,r2,zero
  8075b8:	1000031e 	bne	r2,zero,8075c8 <altera_avalon_uart_read+0x194>
  8075bc:	e0bffd17 	ldw	r2,-12(fp)
  8075c0:	1004c03a 	cmpne	r2,r2,zero
  8075c4:	103fc81e 	bne	r2,zero,8074e8 <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8075c8:	0005303a 	rdctl	r2,status
  8075cc:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8075d0:	e0fff317 	ldw	r3,-52(fp)
  8075d4:	00bfff84 	movi	r2,-2
  8075d8:	1884703a 	and	r2,r3,r2
  8075dc:	1001703a 	wrctl	status,r2
  
  return context;
  8075e0:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8075e4:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8075e8:	e0bffb17 	ldw	r2,-20(fp)
  8075ec:	10800117 	ldw	r2,4(r2)
  8075f0:	10c02014 	ori	r3,r2,128
  8075f4:	e0bffb17 	ldw	r2,-20(fp)
  8075f8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8075fc:	e0bffb17 	ldw	r2,-20(fp)
  807600:	10800017 	ldw	r2,0(r2)
  807604:	11000304 	addi	r4,r2,12
  807608:	e0bffb17 	ldw	r2,-20(fp)
  80760c:	10800117 	ldw	r2,4(r2)
  807610:	1007883a 	mov	r3,r2
  807614:	2005883a 	mov	r2,r4
  807618:	10c00035 	stwio	r3,0(r2)
  80761c:	e0bffa17 	ldw	r2,-24(fp)
  807620:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807624:	e0bff217 	ldw	r2,-56(fp)
  807628:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80762c:	e0bff703 	ldbu	r2,-36(fp)
  807630:	1005003a 	cmpeq	r2,r2,zero
  807634:	1000031e 	bne	r2,zero,807644 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  807638:	00bffd04 	movi	r2,-12
  80763c:	e0bfff15 	stw	r2,-4(fp)
  807640:	00000206 	br	80764c <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  807644:	e0bff617 	ldw	r2,-40(fp)
  807648:	e0bfff15 	stw	r2,-4(fp)
  80764c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  807650:	e037883a 	mov	sp,fp
  807654:	dfc00117 	ldw	ra,4(sp)
  807658:	df000017 	ldw	fp,0(sp)
  80765c:	dec00204 	addi	sp,sp,8
  807660:	f800283a 	ret

00807664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807664:	defffd04 	addi	sp,sp,-12
  807668:	dfc00215 	stw	ra,8(sp)
  80766c:	df000115 	stw	fp,4(sp)
  807670:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807674:	00802074 	movhi	r2,129
  807678:	10aa1604 	addi	r2,r2,-22440
  80767c:	10800017 	ldw	r2,0(r2)
  807680:	1005003a 	cmpeq	r2,r2,zero
  807684:	1000061e 	bne	r2,zero,8076a0 <alt_get_errno+0x3c>
  807688:	00802074 	movhi	r2,129
  80768c:	10aa1604 	addi	r2,r2,-22440
  807690:	10800017 	ldw	r2,0(r2)
  807694:	103ee83a 	callr	r2
  807698:	e0bfff15 	stw	r2,-4(fp)
  80769c:	00000306 	br	8076ac <alt_get_errno+0x48>
  8076a0:	00802074 	movhi	r2,129
  8076a4:	10b13e04 	addi	r2,r2,-15112
  8076a8:	e0bfff15 	stw	r2,-4(fp)
  8076ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8076b0:	e037883a 	mov	sp,fp
  8076b4:	dfc00117 	ldw	ra,4(sp)
  8076b8:	df000017 	ldw	fp,0(sp)
  8076bc:	dec00204 	addi	sp,sp,8
  8076c0:	f800283a 	ret

008076c4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8076c4:	defff204 	addi	sp,sp,-56
  8076c8:	dfc00d15 	stw	ra,52(sp)
  8076cc:	df000c15 	stw	fp,48(sp)
  8076d0:	df000c04 	addi	fp,sp,48
  8076d4:	e13ffc15 	stw	r4,-16(fp)
  8076d8:	e17ffd15 	stw	r5,-12(fp)
  8076dc:	e1bffe15 	stw	r6,-8(fp)
  8076e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8076e4:	e0bffe17 	ldw	r2,-8(fp)
  8076e8:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8076ec:	e0bfff17 	ldw	r2,-4(fp)
  8076f0:	1090000c 	andi	r2,r2,16384
  8076f4:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8076f8:	00004006 	br	8077fc <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8076fc:	e0bffc17 	ldw	r2,-16(fp)
  807700:	10800517 	ldw	r2,20(r2)
  807704:	10800044 	addi	r2,r2,1
  807708:	10800fcc 	andi	r2,r2,63
  80770c:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  807710:	e0bffc17 	ldw	r2,-16(fp)
  807714:	10c00417 	ldw	r3,16(r2)
  807718:	e0bff917 	ldw	r2,-28(fp)
  80771c:	1880251e 	bne	r3,r2,8077b4 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  807720:	e0bffa17 	ldw	r2,-24(fp)
  807724:	1005003a 	cmpeq	r2,r2,zero
  807728:	1000051e 	bne	r2,zero,807740 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80772c:	080788c0 	call	80788c <alt_get_errno>
  807730:	1007883a 	mov	r3,r2
  807734:	008002c4 	movi	r2,11
  807738:	18800015 	stw	r2,0(r3)
        break;
  80773c:	00003206 	br	807808 <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807740:	0005303a 	rdctl	r2,status
  807744:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807748:	e0fff717 	ldw	r3,-36(fp)
  80774c:	00bfff84 	movi	r2,-2
  807750:	1884703a 	and	r2,r3,r2
  807754:	1001703a 	wrctl	status,r2
  
  return context;
  807758:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80775c:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  807760:	e0bffc17 	ldw	r2,-16(fp)
  807764:	10800117 	ldw	r2,4(r2)
  807768:	10c11014 	ori	r3,r2,1088
  80776c:	e0bffc17 	ldw	r2,-16(fp)
  807770:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807774:	e0bffc17 	ldw	r2,-16(fp)
  807778:	10800017 	ldw	r2,0(r2)
  80777c:	11000304 	addi	r4,r2,12
  807780:	e0bffc17 	ldw	r2,-16(fp)
  807784:	10800117 	ldw	r2,4(r2)
  807788:	1007883a 	mov	r3,r2
  80778c:	2005883a 	mov	r2,r4
  807790:	10c00035 	stwio	r3,0(r2)
  807794:	e0bffb17 	ldw	r2,-20(fp)
  807798:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80779c:	e0bff617 	ldw	r2,-40(fp)
  8077a0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8077a4:	e0bffc17 	ldw	r2,-16(fp)
  8077a8:	10c00417 	ldw	r3,16(r2)
  8077ac:	e0bff917 	ldw	r2,-28(fp)
  8077b0:	18bffc26 	beq	r3,r2,8077a4 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  8077b4:	e0bff817 	ldw	r2,-32(fp)
  8077b8:	10bfffc4 	addi	r2,r2,-1
  8077bc:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8077c0:	e0bffc17 	ldw	r2,-16(fp)
  8077c4:	10c00517 	ldw	r3,20(r2)
  8077c8:	e0bffd17 	ldw	r2,-12(fp)
  8077cc:	10800003 	ldbu	r2,0(r2)
  8077d0:	1009883a 	mov	r4,r2
  8077d4:	e0bffc17 	ldw	r2,-16(fp)
  8077d8:	1885883a 	add	r2,r3,r2
  8077dc:	10801704 	addi	r2,r2,92
  8077e0:	11000005 	stb	r4,0(r2)
  8077e4:	e0bffd17 	ldw	r2,-12(fp)
  8077e8:	10800044 	addi	r2,r2,1
  8077ec:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  8077f0:	e0fffc17 	ldw	r3,-16(fp)
  8077f4:	e0bff917 	ldw	r2,-28(fp)
  8077f8:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8077fc:	e0bff817 	ldw	r2,-32(fp)
  807800:	1004c03a 	cmpne	r2,r2,zero
  807804:	103fbd1e 	bne	r2,zero,8076fc <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807808:	0005303a 	rdctl	r2,status
  80780c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807810:	e0fff517 	ldw	r3,-44(fp)
  807814:	00bfff84 	movi	r2,-2
  807818:	1884703a 	and	r2,r3,r2
  80781c:	1001703a 	wrctl	status,r2
  
  return context;
  807820:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  807824:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  807828:	e0bffc17 	ldw	r2,-16(fp)
  80782c:	10800117 	ldw	r2,4(r2)
  807830:	10c11014 	ori	r3,r2,1088
  807834:	e0bffc17 	ldw	r2,-16(fp)
  807838:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80783c:	e0bffc17 	ldw	r2,-16(fp)
  807840:	10800017 	ldw	r2,0(r2)
  807844:	11000304 	addi	r4,r2,12
  807848:	e0bffc17 	ldw	r2,-16(fp)
  80784c:	10800117 	ldw	r2,4(r2)
  807850:	1007883a 	mov	r3,r2
  807854:	2005883a 	mov	r2,r4
  807858:	10c00035 	stwio	r3,0(r2)
  80785c:	e0bffb17 	ldw	r2,-20(fp)
  807860:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807864:	e0bff417 	ldw	r2,-48(fp)
  807868:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80786c:	e0fffe17 	ldw	r3,-8(fp)
  807870:	e0bff817 	ldw	r2,-32(fp)
  807874:	1885c83a 	sub	r2,r3,r2
}
  807878:	e037883a 	mov	sp,fp
  80787c:	dfc00117 	ldw	ra,4(sp)
  807880:	df000017 	ldw	fp,0(sp)
  807884:	dec00204 	addi	sp,sp,8
  807888:	f800283a 	ret

0080788c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80788c:	defffd04 	addi	sp,sp,-12
  807890:	dfc00215 	stw	ra,8(sp)
  807894:	df000115 	stw	fp,4(sp)
  807898:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80789c:	00802074 	movhi	r2,129
  8078a0:	10aa1604 	addi	r2,r2,-22440
  8078a4:	10800017 	ldw	r2,0(r2)
  8078a8:	1005003a 	cmpeq	r2,r2,zero
  8078ac:	1000061e 	bne	r2,zero,8078c8 <alt_get_errno+0x3c>
  8078b0:	00802074 	movhi	r2,129
  8078b4:	10aa1604 	addi	r2,r2,-22440
  8078b8:	10800017 	ldw	r2,0(r2)
  8078bc:	103ee83a 	callr	r2
  8078c0:	e0bfff15 	stw	r2,-4(fp)
  8078c4:	00000306 	br	8078d4 <alt_get_errno+0x48>
  8078c8:	00802074 	movhi	r2,129
  8078cc:	10b13e04 	addi	r2,r2,-15112
  8078d0:	e0bfff15 	stw	r2,-4(fp)
  8078d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8078d8:	e037883a 	mov	sp,fp
  8078dc:	dfc00117 	ldw	ra,4(sp)
  8078e0:	df000017 	ldw	fp,0(sp)
  8078e4:	dec00204 	addi	sp,sp,8
  8078e8:	f800283a 	ret

008078ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  8078ec:	defffe04 	addi	sp,sp,-8
  8078f0:	df000115 	stw	fp,4(sp)
  8078f4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  8078f8:	e03fff15 	stw	zero,-4(fp)
  8078fc:	00000506 	br	807914 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  807900:	e0bfff17 	ldw	r2,-4(fp)
  807904:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  807908:	e0bfff17 	ldw	r2,-4(fp)
  80790c:	10800804 	addi	r2,r2,32
  807910:	e0bfff15 	stw	r2,-4(fp)
  807914:	e0bfff17 	ldw	r2,-4(fp)
  807918:	10820030 	cmpltui	r2,r2,2048
  80791c:	103ff81e 	bne	r2,zero,807900 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807920:	e037883a 	mov	sp,fp
  807924:	df000017 	ldw	fp,0(sp)
  807928:	dec00104 	addi	sp,sp,4
  80792c:	f800283a 	ret

00807930 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807930:	defff904 	addi	sp,sp,-28
  807934:	dfc00615 	stw	ra,24(sp)
  807938:	df000515 	stw	fp,20(sp)
  80793c:	df000504 	addi	fp,sp,20
  807940:	e13ffd15 	stw	r4,-12(fp)
  807944:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  807948:	e0bffd17 	ldw	r2,-12(fp)
  80794c:	1005003a 	cmpeq	r2,r2,zero
  807950:	1000041e 	bne	r2,zero,807964 <alt_dev_llist_insert+0x34>
  807954:	e0bffd17 	ldw	r2,-12(fp)
  807958:	10800217 	ldw	r2,8(r2)
  80795c:	1004c03a 	cmpne	r2,r2,zero
  807960:	1000071e 	bne	r2,zero,807980 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  807964:	08079e40 	call	8079e4 <alt_get_errno>
  807968:	1007883a 	mov	r3,r2
  80796c:	00800584 	movi	r2,22
  807970:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  807974:	00bffa84 	movi	r2,-22
  807978:	e0bfff15 	stw	r2,-4(fp)
  80797c:	00001306 	br	8079cc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  807980:	e0fffd17 	ldw	r3,-12(fp)
  807984:	e0bffe17 	ldw	r2,-8(fp)
  807988:	e0bffb15 	stw	r2,-20(fp)
  80798c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  807990:	e0fffc17 	ldw	r3,-16(fp)
  807994:	e0bffb17 	ldw	r2,-20(fp)
  807998:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80799c:	e0bffb17 	ldw	r2,-20(fp)
  8079a0:	10c00017 	ldw	r3,0(r2)
  8079a4:	e0bffc17 	ldw	r2,-16(fp)
  8079a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8079ac:	e0bffb17 	ldw	r2,-20(fp)
  8079b0:	10c00017 	ldw	r3,0(r2)
  8079b4:	e0bffc17 	ldw	r2,-16(fp)
  8079b8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8079bc:	e0fffb17 	ldw	r3,-20(fp)
  8079c0:	e0bffc17 	ldw	r2,-16(fp)
  8079c4:	18800015 	stw	r2,0(r3)

  return 0;  
  8079c8:	e03fff15 	stw	zero,-4(fp)
  8079cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8079d0:	e037883a 	mov	sp,fp
  8079d4:	dfc00117 	ldw	ra,4(sp)
  8079d8:	df000017 	ldw	fp,0(sp)
  8079dc:	dec00204 	addi	sp,sp,8
  8079e0:	f800283a 	ret

008079e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8079e4:	defffd04 	addi	sp,sp,-12
  8079e8:	dfc00215 	stw	ra,8(sp)
  8079ec:	df000115 	stw	fp,4(sp)
  8079f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8079f4:	00802074 	movhi	r2,129
  8079f8:	10aa1604 	addi	r2,r2,-22440
  8079fc:	10800017 	ldw	r2,0(r2)
  807a00:	1005003a 	cmpeq	r2,r2,zero
  807a04:	1000061e 	bne	r2,zero,807a20 <alt_get_errno+0x3c>
  807a08:	00802074 	movhi	r2,129
  807a0c:	10aa1604 	addi	r2,r2,-22440
  807a10:	10800017 	ldw	r2,0(r2)
  807a14:	103ee83a 	callr	r2
  807a18:	e0bfff15 	stw	r2,-4(fp)
  807a1c:	00000306 	br	807a2c <alt_get_errno+0x48>
  807a20:	00802074 	movhi	r2,129
  807a24:	10b13e04 	addi	r2,r2,-15112
  807a28:	e0bfff15 	stw	r2,-4(fp)
  807a2c:	e0bfff17 	ldw	r2,-4(fp)
}
  807a30:	e037883a 	mov	sp,fp
  807a34:	dfc00117 	ldw	ra,4(sp)
  807a38:	df000017 	ldw	fp,0(sp)
  807a3c:	dec00204 	addi	sp,sp,8
  807a40:	f800283a 	ret

00807a44 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  807a44:	defffd04 	addi	sp,sp,-12
  807a48:	dfc00215 	stw	ra,8(sp)
  807a4c:	df000115 	stw	fp,4(sp)
  807a50:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807a54:	00bfff04 	movi	r2,-4
  807a58:	00c02074 	movhi	r3,129
  807a5c:	18e24d04 	addi	r3,r3,-30412
  807a60:	1885883a 	add	r2,r3,r2
  807a64:	e0bfff15 	stw	r2,-4(fp)
  807a68:	00000606 	br	807a84 <_do_ctors+0x40>
        (*ctor) (); 
  807a6c:	e0bfff17 	ldw	r2,-4(fp)
  807a70:	10800017 	ldw	r2,0(r2)
  807a74:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807a78:	e0bfff17 	ldw	r2,-4(fp)
  807a7c:	10bfff04 	addi	r2,r2,-4
  807a80:	e0bfff15 	stw	r2,-4(fp)
  807a84:	e0ffff17 	ldw	r3,-4(fp)
  807a88:	00802074 	movhi	r2,129
  807a8c:	10a24c04 	addi	r2,r2,-30416
  807a90:	18bff62e 	bgeu	r3,r2,807a6c <_do_ctors+0x28>
        (*ctor) (); 
}
  807a94:	e037883a 	mov	sp,fp
  807a98:	dfc00117 	ldw	ra,4(sp)
  807a9c:	df000017 	ldw	fp,0(sp)
  807aa0:	dec00204 	addi	sp,sp,8
  807aa4:	f800283a 	ret

00807aa8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  807aa8:	defffd04 	addi	sp,sp,-12
  807aac:	dfc00215 	stw	ra,8(sp)
  807ab0:	df000115 	stw	fp,4(sp)
  807ab4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  807ab8:	00bfff04 	movi	r2,-4
  807abc:	00c02074 	movhi	r3,129
  807ac0:	18e24d04 	addi	r3,r3,-30412
  807ac4:	1885883a 	add	r2,r3,r2
  807ac8:	e0bfff15 	stw	r2,-4(fp)
  807acc:	00000606 	br	807ae8 <_do_dtors+0x40>
        (*dtor) (); 
  807ad0:	e0bfff17 	ldw	r2,-4(fp)
  807ad4:	10800017 	ldw	r2,0(r2)
  807ad8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  807adc:	e0bfff17 	ldw	r2,-4(fp)
  807ae0:	10bfff04 	addi	r2,r2,-4
  807ae4:	e0bfff15 	stw	r2,-4(fp)
  807ae8:	e0ffff17 	ldw	r3,-4(fp)
  807aec:	00802074 	movhi	r2,129
  807af0:	10a24d04 	addi	r2,r2,-30412
  807af4:	18bff62e 	bgeu	r3,r2,807ad0 <_do_dtors+0x28>
        (*dtor) (); 
}
  807af8:	e037883a 	mov	sp,fp
  807afc:	dfc00117 	ldw	ra,4(sp)
  807b00:	df000017 	ldw	fp,0(sp)
  807b04:	dec00204 	addi	sp,sp,8
  807b08:	f800283a 	ret

00807b0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807b0c:	defff904 	addi	sp,sp,-28
  807b10:	dfc00615 	stw	ra,24(sp)
  807b14:	df000515 	stw	fp,20(sp)
  807b18:	df000504 	addi	fp,sp,20
  807b1c:	e13ffd15 	stw	r4,-12(fp)
  807b20:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  807b24:	e0bffe17 	ldw	r2,-8(fp)
  807b28:	10800017 	ldw	r2,0(r2)
  807b2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  807b30:	e13ffd17 	ldw	r4,-12(fp)
  807b34:	08024bc0 	call	8024bc <strlen>
  807b38:	10800044 	addi	r2,r2,1
  807b3c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807b40:	00000d06 	br	807b78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807b44:	e0bffc17 	ldw	r2,-16(fp)
  807b48:	11000217 	ldw	r4,8(r2)
  807b4c:	e1bffb17 	ldw	r6,-20(fp)
  807b50:	e17ffd17 	ldw	r5,-12(fp)
  807b54:	08084280 	call	808428 <memcmp>
  807b58:	1004c03a 	cmpne	r2,r2,zero
  807b5c:	1000031e 	bne	r2,zero,807b6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  807b60:	e0bffc17 	ldw	r2,-16(fp)
  807b64:	e0bfff15 	stw	r2,-4(fp)
  807b68:	00000706 	br	807b88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  807b6c:	e0bffc17 	ldw	r2,-16(fp)
  807b70:	10800017 	ldw	r2,0(r2)
  807b74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807b78:	e0fffe17 	ldw	r3,-8(fp)
  807b7c:	e0bffc17 	ldw	r2,-16(fp)
  807b80:	10fff01e 	bne	r2,r3,807b44 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  807b84:	e03fff15 	stw	zero,-4(fp)
  807b88:	e0bfff17 	ldw	r2,-4(fp)
}
  807b8c:	e037883a 	mov	sp,fp
  807b90:	dfc00117 	ldw	ra,4(sp)
  807b94:	df000017 	ldw	fp,0(sp)
  807b98:	dec00204 	addi	sp,sp,8
  807b9c:	f800283a 	ret

00807ba0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807ba0:	defffa04 	addi	sp,sp,-24
  807ba4:	dfc00515 	stw	ra,20(sp)
  807ba8:	df000415 	stw	fp,16(sp)
  807bac:	df000404 	addi	fp,sp,16
  807bb0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  807bb4:	00802074 	movhi	r2,129
  807bb8:	10aa1104 	addi	r2,r2,-22460
  807bbc:	10800017 	ldw	r2,0(r2)
  807bc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807bc4:	00003306 	br	807c94 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  807bc8:	e0bffd17 	ldw	r2,-12(fp)
  807bcc:	11000217 	ldw	r4,8(r2)
  807bd0:	08024bc0 	call	8024bc <strlen>
  807bd4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  807bd8:	e0bffd17 	ldw	r2,-12(fp)
  807bdc:	10c00217 	ldw	r3,8(r2)
  807be0:	e0bffc17 	ldw	r2,-16(fp)
  807be4:	1885883a 	add	r2,r3,r2
  807be8:	10bfffc4 	addi	r2,r2,-1
  807bec:	10800003 	ldbu	r2,0(r2)
  807bf0:	10803fcc 	andi	r2,r2,255
  807bf4:	1080201c 	xori	r2,r2,128
  807bf8:	10bfe004 	addi	r2,r2,-128
  807bfc:	10800bd8 	cmpnei	r2,r2,47
  807c00:	1000031e 	bne	r2,zero,807c10 <alt_find_file+0x70>
    {
      len -= 1;
  807c04:	e0bffc17 	ldw	r2,-16(fp)
  807c08:	10bfffc4 	addi	r2,r2,-1
  807c0c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807c10:	e0bffc17 	ldw	r2,-16(fp)
  807c14:	1007883a 	mov	r3,r2
  807c18:	e0bffe17 	ldw	r2,-8(fp)
  807c1c:	1885883a 	add	r2,r3,r2
  807c20:	10800003 	ldbu	r2,0(r2)
  807c24:	10803fcc 	andi	r2,r2,255
  807c28:	1080201c 	xori	r2,r2,128
  807c2c:	10bfe004 	addi	r2,r2,-128
  807c30:	10800be0 	cmpeqi	r2,r2,47
  807c34:	10000a1e 	bne	r2,zero,807c60 <alt_find_file+0xc0>
  807c38:	e0bffc17 	ldw	r2,-16(fp)
  807c3c:	1007883a 	mov	r3,r2
  807c40:	e0bffe17 	ldw	r2,-8(fp)
  807c44:	1885883a 	add	r2,r3,r2
  807c48:	10800003 	ldbu	r2,0(r2)
  807c4c:	10803fcc 	andi	r2,r2,255
  807c50:	1080201c 	xori	r2,r2,128
  807c54:	10bfe004 	addi	r2,r2,-128
  807c58:	1004c03a 	cmpne	r2,r2,zero
  807c5c:	10000a1e 	bne	r2,zero,807c88 <alt_find_file+0xe8>
  807c60:	e0bffd17 	ldw	r2,-12(fp)
  807c64:	11000217 	ldw	r4,8(r2)
  807c68:	e1bffc17 	ldw	r6,-16(fp)
  807c6c:	e17ffe17 	ldw	r5,-8(fp)
  807c70:	08084280 	call	808428 <memcmp>
  807c74:	1004c03a 	cmpne	r2,r2,zero
  807c78:	1000031e 	bne	r2,zero,807c88 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  807c7c:	e0bffd17 	ldw	r2,-12(fp)
  807c80:	e0bfff15 	stw	r2,-4(fp)
  807c84:	00000806 	br	807ca8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  807c88:	e0bffd17 	ldw	r2,-12(fp)
  807c8c:	10800017 	ldw	r2,0(r2)
  807c90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807c94:	00c02074 	movhi	r3,129
  807c98:	18ea1104 	addi	r3,r3,-22460
  807c9c:	e0bffd17 	ldw	r2,-12(fp)
  807ca0:	10ffc91e 	bne	r2,r3,807bc8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  807ca4:	e03fff15 	stw	zero,-4(fp)
  807ca8:	e0bfff17 	ldw	r2,-4(fp)
}
  807cac:	e037883a 	mov	sp,fp
  807cb0:	dfc00117 	ldw	ra,4(sp)
  807cb4:	df000017 	ldw	fp,0(sp)
  807cb8:	dec00204 	addi	sp,sp,8
  807cbc:	f800283a 	ret

00807cc0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  807cc0:	defffc04 	addi	sp,sp,-16
  807cc4:	df000315 	stw	fp,12(sp)
  807cc8:	df000304 	addi	fp,sp,12
  807ccc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  807cd0:	00bffa04 	movi	r2,-24
  807cd4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807cd8:	e03ffe15 	stw	zero,-8(fp)
  807cdc:	00001e06 	br	807d58 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  807ce0:	e0bffe17 	ldw	r2,-8(fp)
  807ce4:	00c02074 	movhi	r3,129
  807ce8:	18e51c04 	addi	r3,r3,-27536
  807cec:	10800324 	muli	r2,r2,12
  807cf0:	10c5883a 	add	r2,r2,r3
  807cf4:	10800017 	ldw	r2,0(r2)
  807cf8:	1004c03a 	cmpne	r2,r2,zero
  807cfc:	1000131e 	bne	r2,zero,807d4c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  807d00:	e0bffe17 	ldw	r2,-8(fp)
  807d04:	00c02074 	movhi	r3,129
  807d08:	18e51c04 	addi	r3,r3,-27536
  807d0c:	10800324 	muli	r2,r2,12
  807d10:	10c7883a 	add	r3,r2,r3
  807d14:	e0bfff17 	ldw	r2,-4(fp)
  807d18:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  807d1c:	00802074 	movhi	r2,129
  807d20:	10aa1504 	addi	r2,r2,-22444
  807d24:	10c00017 	ldw	r3,0(r2)
  807d28:	e0bffe17 	ldw	r2,-8(fp)
  807d2c:	1880040e 	bge	r3,r2,807d40 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  807d30:	00c02074 	movhi	r3,129
  807d34:	18ea1504 	addi	r3,r3,-22444
  807d38:	e0bffe17 	ldw	r2,-8(fp)
  807d3c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  807d40:	e0bffe17 	ldw	r2,-8(fp)
  807d44:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  807d48:	00000606 	br	807d64 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807d4c:	e0bffe17 	ldw	r2,-8(fp)
  807d50:	10800044 	addi	r2,r2,1
  807d54:	e0bffe15 	stw	r2,-8(fp)
  807d58:	e0bffe17 	ldw	r2,-8(fp)
  807d5c:	10800810 	cmplti	r2,r2,32
  807d60:	103fdf1e 	bne	r2,zero,807ce0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  807d64:	e0bffd17 	ldw	r2,-12(fp)
}
  807d68:	e037883a 	mov	sp,fp
  807d6c:	df000017 	ldw	fp,0(sp)
  807d70:	dec00104 	addi	sp,sp,4
  807d74:	f800283a 	ret

00807d78 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  807d78:	defffe04 	addi	sp,sp,-8
  807d7c:	dfc00115 	stw	ra,4(sp)
  807d80:	df000015 	stw	fp,0(sp)
  807d84:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807d88:	0009883a 	mov	r4,zero
  807d8c:	01440004 	movi	r5,4096
  807d90:	080834c0 	call	80834c <alt_icache_flush>
#endif
}
  807d94:	e037883a 	mov	sp,fp
  807d98:	dfc00117 	ldw	ra,4(sp)
  807d9c:	df000017 	ldw	fp,0(sp)
  807da0:	dec00204 	addi	sp,sp,8
  807da4:	f800283a 	ret

00807da8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807da8:	defff904 	addi	sp,sp,-28
  807dac:	dfc00615 	stw	ra,24(sp)
  807db0:	df000515 	stw	fp,20(sp)
  807db4:	df000504 	addi	fp,sp,20
  807db8:	e13ffc15 	stw	r4,-16(fp)
  807dbc:	e17ffd15 	stw	r5,-12(fp)
  807dc0:	e1bffe15 	stw	r6,-8(fp)
  807dc4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807dc8:	e0800217 	ldw	r2,8(fp)
  807dcc:	d8800015 	stw	r2,0(sp)
  807dd0:	e13ffc17 	ldw	r4,-16(fp)
  807dd4:	e17ffd17 	ldw	r5,-12(fp)
  807dd8:	e1bffe17 	ldw	r6,-8(fp)
  807ddc:	e1ffff17 	ldw	r7,-4(fp)
  807de0:	0807f7c0 	call	807f7c <alt_iic_isr_register>
}  
  807de4:	e037883a 	mov	sp,fp
  807de8:	dfc00117 	ldw	ra,4(sp)
  807dec:	df000017 	ldw	fp,0(sp)
  807df0:	dec00204 	addi	sp,sp,8
  807df4:	f800283a 	ret

00807df8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  807df8:	defff904 	addi	sp,sp,-28
  807dfc:	df000615 	stw	fp,24(sp)
  807e00:	df000604 	addi	fp,sp,24
  807e04:	e13ffe15 	stw	r4,-8(fp)
  807e08:	e17fff15 	stw	r5,-4(fp)
  807e0c:	e0bfff17 	ldw	r2,-4(fp)
  807e10:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807e14:	0005303a 	rdctl	r2,status
  807e18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807e1c:	e0fffb17 	ldw	r3,-20(fp)
  807e20:	00bfff84 	movi	r2,-2
  807e24:	1884703a 	and	r2,r3,r2
  807e28:	1001703a 	wrctl	status,r2
  
  return context;
  807e2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807e30:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  807e34:	e0fffc17 	ldw	r3,-16(fp)
  807e38:	00800044 	movi	r2,1
  807e3c:	10c4983a 	sll	r2,r2,r3
  807e40:	1007883a 	mov	r3,r2
  807e44:	00802074 	movhi	r2,129
  807e48:	10b14704 	addi	r2,r2,-15076
  807e4c:	10800017 	ldw	r2,0(r2)
  807e50:	1886b03a 	or	r3,r3,r2
  807e54:	00802074 	movhi	r2,129
  807e58:	10b14704 	addi	r2,r2,-15076
  807e5c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807e60:	00802074 	movhi	r2,129
  807e64:	10b14704 	addi	r2,r2,-15076
  807e68:	10800017 	ldw	r2,0(r2)
  807e6c:	100170fa 	wrctl	ienable,r2
  807e70:	e0bffd17 	ldw	r2,-12(fp)
  807e74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e78:	e0bffa17 	ldw	r2,-24(fp)
  807e7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807e80:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  807e84:	e037883a 	mov	sp,fp
  807e88:	df000017 	ldw	fp,0(sp)
  807e8c:	dec00104 	addi	sp,sp,4
  807e90:	f800283a 	ret

00807e94 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  807e94:	defff904 	addi	sp,sp,-28
  807e98:	df000615 	stw	fp,24(sp)
  807e9c:	df000604 	addi	fp,sp,24
  807ea0:	e13ffe15 	stw	r4,-8(fp)
  807ea4:	e17fff15 	stw	r5,-4(fp)
  807ea8:	e0bfff17 	ldw	r2,-4(fp)
  807eac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807eb0:	0005303a 	rdctl	r2,status
  807eb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807eb8:	e0fffb17 	ldw	r3,-20(fp)
  807ebc:	00bfff84 	movi	r2,-2
  807ec0:	1884703a 	and	r2,r3,r2
  807ec4:	1001703a 	wrctl	status,r2
  
  return context;
  807ec8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807ecc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  807ed0:	e0fffc17 	ldw	r3,-16(fp)
  807ed4:	00800044 	movi	r2,1
  807ed8:	10c4983a 	sll	r2,r2,r3
  807edc:	0084303a 	nor	r2,zero,r2
  807ee0:	1007883a 	mov	r3,r2
  807ee4:	00802074 	movhi	r2,129
  807ee8:	10b14704 	addi	r2,r2,-15076
  807eec:	10800017 	ldw	r2,0(r2)
  807ef0:	1886703a 	and	r3,r3,r2
  807ef4:	00802074 	movhi	r2,129
  807ef8:	10b14704 	addi	r2,r2,-15076
  807efc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807f00:	00802074 	movhi	r2,129
  807f04:	10b14704 	addi	r2,r2,-15076
  807f08:	10800017 	ldw	r2,0(r2)
  807f0c:	100170fa 	wrctl	ienable,r2
  807f10:	e0bffd17 	ldw	r2,-12(fp)
  807f14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f18:	e0bffa17 	ldw	r2,-24(fp)
  807f1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807f20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  807f24:	e037883a 	mov	sp,fp
  807f28:	df000017 	ldw	fp,0(sp)
  807f2c:	dec00104 	addi	sp,sp,4
  807f30:	f800283a 	ret

00807f34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  807f34:	defffc04 	addi	sp,sp,-16
  807f38:	df000315 	stw	fp,12(sp)
  807f3c:	df000304 	addi	fp,sp,12
  807f40:	e13ffe15 	stw	r4,-8(fp)
  807f44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807f48:	000530fa 	rdctl	r2,ienable
  807f4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  807f50:	e0ffff17 	ldw	r3,-4(fp)
  807f54:	00800044 	movi	r2,1
  807f58:	10c4983a 	sll	r2,r2,r3
  807f5c:	1007883a 	mov	r3,r2
  807f60:	e0bffd17 	ldw	r2,-12(fp)
  807f64:	1884703a 	and	r2,r3,r2
  807f68:	1004c03a 	cmpne	r2,r2,zero
}
  807f6c:	e037883a 	mov	sp,fp
  807f70:	df000017 	ldw	fp,0(sp)
  807f74:	dec00104 	addi	sp,sp,4
  807f78:	f800283a 	ret

00807f7c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807f7c:	defff404 	addi	sp,sp,-48
  807f80:	dfc00b15 	stw	ra,44(sp)
  807f84:	df000a15 	stw	fp,40(sp)
  807f88:	df000a04 	addi	fp,sp,40
  807f8c:	e13ffb15 	stw	r4,-20(fp)
  807f90:	e17ffc15 	stw	r5,-16(fp)
  807f94:	e1bffd15 	stw	r6,-12(fp)
  807f98:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  807f9c:	00bffa84 	movi	r2,-22
  807fa0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  807fa4:	e0bffc17 	ldw	r2,-16(fp)
  807fa8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807fac:	e0bff917 	ldw	r2,-28(fp)
  807fb0:	10800808 	cmpgei	r2,r2,32
  807fb4:	1000291e 	bne	r2,zero,80805c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807fb8:	0005303a 	rdctl	r2,status
  807fbc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807fc0:	e0fff717 	ldw	r3,-36(fp)
  807fc4:	00bfff84 	movi	r2,-2
  807fc8:	1884703a 	and	r2,r3,r2
  807fcc:	1001703a 	wrctl	status,r2
  
  return context;
  807fd0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  807fd4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  807fd8:	e0bff917 	ldw	r2,-28(fp)
  807fdc:	00c02074 	movhi	r3,129
  807fe0:	18f18204 	addi	r3,r3,-14840
  807fe4:	100490fa 	slli	r2,r2,3
  807fe8:	10c7883a 	add	r3,r2,r3
  807fec:	e0bffd17 	ldw	r2,-12(fp)
  807ff0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  807ff4:	e0bff917 	ldw	r2,-28(fp)
  807ff8:	00c02074 	movhi	r3,129
  807ffc:	18f18204 	addi	r3,r3,-14840
  808000:	100490fa 	slli	r2,r2,3
  808004:	10c5883a 	add	r2,r2,r3
  808008:	10c00104 	addi	r3,r2,4
  80800c:	e0bffe17 	ldw	r2,-8(fp)
  808010:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  808014:	e0bffd17 	ldw	r2,-12(fp)
  808018:	1005003a 	cmpeq	r2,r2,zero
  80801c:	1000051e 	bne	r2,zero,808034 <alt_iic_isr_register+0xb8>
  808020:	e17ff917 	ldw	r5,-28(fp)
  808024:	e13ffb17 	ldw	r4,-20(fp)
  808028:	0807df80 	call	807df8 <alt_ic_irq_enable>
  80802c:	e0bfff15 	stw	r2,-4(fp)
  808030:	00000406 	br	808044 <alt_iic_isr_register+0xc8>
  808034:	e17ff917 	ldw	r5,-28(fp)
  808038:	e13ffb17 	ldw	r4,-20(fp)
  80803c:	0807e940 	call	807e94 <alt_ic_irq_disable>
  808040:	e0bfff15 	stw	r2,-4(fp)
  808044:	e0bfff17 	ldw	r2,-4(fp)
  808048:	e0bffa15 	stw	r2,-24(fp)
  80804c:	e0bff817 	ldw	r2,-32(fp)
  808050:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  808054:	e0bff617 	ldw	r2,-40(fp)
  808058:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80805c:	e0bffa17 	ldw	r2,-24(fp)
}
  808060:	e037883a 	mov	sp,fp
  808064:	dfc00117 	ldw	ra,4(sp)
  808068:	df000017 	ldw	fp,0(sp)
  80806c:	dec00204 	addi	sp,sp,8
  808070:	f800283a 	ret

00808074 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  808074:	defff904 	addi	sp,sp,-28
  808078:	dfc00615 	stw	ra,24(sp)
  80807c:	df000515 	stw	fp,20(sp)
  808080:	df000504 	addi	fp,sp,20
  808084:	e13ffc15 	stw	r4,-16(fp)
  808088:	e17ffd15 	stw	r5,-12(fp)
  80808c:	e1bffe15 	stw	r6,-8(fp)
  808090:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  808094:	e13ffd17 	ldw	r4,-12(fp)
  808098:	e17ffe17 	ldw	r5,-8(fp)
  80809c:	e1bfff17 	ldw	r6,-4(fp)
  8080a0:	0804ba80 	call	804ba8 <open>
  8080a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8080a8:	e0bffb17 	ldw	r2,-20(fp)
  8080ac:	1004803a 	cmplt	r2,r2,zero
  8080b0:	10001c1e 	bne	r2,zero,808124 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  8080b4:	e0bffb17 	ldw	r2,-20(fp)
  8080b8:	00c02074 	movhi	r3,129
  8080bc:	18e51c04 	addi	r3,r3,-27536
  8080c0:	10800324 	muli	r2,r2,12
  8080c4:	10c5883a 	add	r2,r2,r3
  8080c8:	10c00017 	ldw	r3,0(r2)
  8080cc:	e0bffc17 	ldw	r2,-16(fp)
  8080d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8080d4:	e0bffb17 	ldw	r2,-20(fp)
  8080d8:	00c02074 	movhi	r3,129
  8080dc:	18e51c04 	addi	r3,r3,-27536
  8080e0:	10800324 	muli	r2,r2,12
  8080e4:	10c5883a 	add	r2,r2,r3
  8080e8:	10800104 	addi	r2,r2,4
  8080ec:	10c00017 	ldw	r3,0(r2)
  8080f0:	e0bffc17 	ldw	r2,-16(fp)
  8080f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8080f8:	e0bffb17 	ldw	r2,-20(fp)
  8080fc:	00c02074 	movhi	r3,129
  808100:	18e51c04 	addi	r3,r3,-27536
  808104:	10800324 	muli	r2,r2,12
  808108:	10c5883a 	add	r2,r2,r3
  80810c:	10800204 	addi	r2,r2,8
  808110:	10c00017 	ldw	r3,0(r2)
  808114:	e0bffc17 	ldw	r2,-16(fp)
  808118:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80811c:	e13ffb17 	ldw	r4,-20(fp)
  808120:	0804f100 	call	804f10 <alt_release_fd>
  }
} 
  808124:	e037883a 	mov	sp,fp
  808128:	dfc00117 	ldw	ra,4(sp)
  80812c:	df000017 	ldw	fp,0(sp)
  808130:	dec00204 	addi	sp,sp,8
  808134:	f800283a 	ret

00808138 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  808138:	defffb04 	addi	sp,sp,-20
  80813c:	dfc00415 	stw	ra,16(sp)
  808140:	df000315 	stw	fp,12(sp)
  808144:	df000304 	addi	fp,sp,12
  808148:	e13ffd15 	stw	r4,-12(fp)
  80814c:	e17ffe15 	stw	r5,-8(fp)
  808150:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  808154:	01002074 	movhi	r4,129
  808158:	21251f04 	addi	r4,r4,-27524
  80815c:	e17ffd17 	ldw	r5,-12(fp)
  808160:	01800044 	movi	r6,1
  808164:	01c07fc4 	movi	r7,511
  808168:	08080740 	call	808074 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80816c:	01002074 	movhi	r4,129
  808170:	21251c04 	addi	r4,r4,-27536
  808174:	e17ffe17 	ldw	r5,-8(fp)
  808178:	000d883a 	mov	r6,zero
  80817c:	01c07fc4 	movi	r7,511
  808180:	08080740 	call	808074 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  808184:	01002074 	movhi	r4,129
  808188:	21252204 	addi	r4,r4,-27512
  80818c:	e17fff17 	ldw	r5,-4(fp)
  808190:	01800044 	movi	r6,1
  808194:	01c07fc4 	movi	r7,511
  808198:	08080740 	call	808074 <alt_open_fd>
}  
  80819c:	e037883a 	mov	sp,fp
  8081a0:	dfc00117 	ldw	ra,4(sp)
  8081a4:	df000017 	ldw	fp,0(sp)
  8081a8:	dec00204 	addi	sp,sp,8
  8081ac:	f800283a 	ret

008081b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8081b0:	defffd04 	addi	sp,sp,-12
  8081b4:	dfc00215 	stw	ra,8(sp)
  8081b8:	df000115 	stw	fp,4(sp)
  8081bc:	df000104 	addi	fp,sp,4
  8081c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8081c4:	e13fff17 	ldw	r4,-4(fp)
  8081c8:	08082000 	call	808200 <alt_busy_sleep>
}
  8081cc:	e037883a 	mov	sp,fp
  8081d0:	dfc00117 	ldw	ra,4(sp)
  8081d4:	df000017 	ldw	fp,0(sp)
  8081d8:	dec00204 	addi	sp,sp,8
  8081dc:	f800283a 	ret

008081e0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8081e0:	deffff04 	addi	sp,sp,-4
  8081e4:	df000015 	stw	fp,0(sp)
  8081e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8081ec:	000170fa 	wrctl	ienable,zero
}
  8081f0:	e037883a 	mov	sp,fp
  8081f4:	df000017 	ldw	fp,0(sp)
  8081f8:	dec00104 	addi	sp,sp,4
  8081fc:	f800283a 	ret

00808200 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  808200:	defffa04 	addi	sp,sp,-24
  808204:	dfc00515 	stw	ra,20(sp)
  808208:	df000415 	stw	fp,16(sp)
  80820c:	df000404 	addi	fp,sp,16
  808210:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  808214:	008000c4 	movi	r2,3
  808218:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  80821c:	e0fffc17 	ldw	r3,-16(fp)
  808220:	008003f4 	movhi	r2,15
  808224:	10909004 	addi	r2,r2,16960
  808228:	188b383a 	mul	r5,r3,r2
  80822c:	0100bef4 	movhi	r4,763
  808230:	213c2004 	addi	r4,r4,-3968
  808234:	08088c00 	call	8088c0 <__udivsi3>
  808238:	100b883a 	mov	r5,r2
  80823c:	01200034 	movhi	r4,32768
  808240:	213fffc4 	addi	r4,r4,-1
  808244:	08088c00 	call	8088c0 <__udivsi3>
  808248:	100b883a 	mov	r5,r2
  80824c:	e13fff17 	ldw	r4,-4(fp)
  808250:	08088c00 	call	8088c0 <__udivsi3>
  808254:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  808258:	e0bffd17 	ldw	r2,-12(fp)
  80825c:	1005003a 	cmpeq	r2,r2,zero
  808260:	1000281e 	bne	r2,zero,808304 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  808264:	e03ffe15 	stw	zero,-8(fp)
  808268:	00001606 	br	8082c4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80826c:	00a00034 	movhi	r2,32768
  808270:	10bfffc4 	addi	r2,r2,-1
  808274:	10bfffc4 	addi	r2,r2,-1
  808278:	103ffe1e 	bne	r2,zero,808274 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80827c:	e0fffc17 	ldw	r3,-16(fp)
  808280:	008003f4 	movhi	r2,15
  808284:	10909004 	addi	r2,r2,16960
  808288:	188b383a 	mul	r5,r3,r2
  80828c:	0100bef4 	movhi	r4,763
  808290:	213c2004 	addi	r4,r4,-3968
  808294:	08088c00 	call	8088c0 <__udivsi3>
  808298:	100b883a 	mov	r5,r2
  80829c:	01200034 	movhi	r4,32768
  8082a0:	213fffc4 	addi	r4,r4,-1
  8082a4:	08088c00 	call	8088c0 <__udivsi3>
  8082a8:	1007883a 	mov	r3,r2
  8082ac:	e0bfff17 	ldw	r2,-4(fp)
  8082b0:	10c5c83a 	sub	r2,r2,r3
  8082b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8082b8:	e0bffe17 	ldw	r2,-8(fp)
  8082bc:	10800044 	addi	r2,r2,1
  8082c0:	e0bffe15 	stw	r2,-8(fp)
  8082c4:	e0fffe17 	ldw	r3,-8(fp)
  8082c8:	e0bffd17 	ldw	r2,-12(fp)
  8082cc:	18bfe716 	blt	r3,r2,80826c <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8082d0:	e0fffc17 	ldw	r3,-16(fp)
  8082d4:	008003f4 	movhi	r2,15
  8082d8:	10909004 	addi	r2,r2,16960
  8082dc:	188b383a 	mul	r5,r3,r2
  8082e0:	0100bef4 	movhi	r4,763
  8082e4:	213c2004 	addi	r4,r4,-3968
  8082e8:	08088c00 	call	8088c0 <__udivsi3>
  8082ec:	1007883a 	mov	r3,r2
  8082f0:	e0bfff17 	ldw	r2,-4(fp)
  8082f4:	1885383a 	mul	r2,r3,r2
  8082f8:	10bfffc4 	addi	r2,r2,-1
  8082fc:	103ffe1e 	bne	r2,zero,8082f8 <alt_busy_sleep+0xf8>
  808300:	00000c06 	br	808334 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  808304:	e0fffc17 	ldw	r3,-16(fp)
  808308:	008003f4 	movhi	r2,15
  80830c:	10909004 	addi	r2,r2,16960
  808310:	188b383a 	mul	r5,r3,r2
  808314:	0100bef4 	movhi	r4,763
  808318:	213c2004 	addi	r4,r4,-3968
  80831c:	08088c00 	call	8088c0 <__udivsi3>
  808320:	1007883a 	mov	r3,r2
  808324:	e0bfff17 	ldw	r2,-4(fp)
  808328:	1885383a 	mul	r2,r3,r2
  80832c:	10bfffc4 	addi	r2,r2,-1
  808330:	00bffe16 	blt	zero,r2,80832c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  808334:	0005883a 	mov	r2,zero
}
  808338:	e037883a 	mov	sp,fp
  80833c:	dfc00117 	ldw	ra,4(sp)
  808340:	df000017 	ldw	fp,0(sp)
  808344:	dec00204 	addi	sp,sp,8
  808348:	f800283a 	ret

0080834c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80834c:	defffb04 	addi	sp,sp,-20
  808350:	df000415 	stw	fp,16(sp)
  808354:	df000404 	addi	fp,sp,16
  808358:	e13ffe15 	stw	r4,-8(fp)
  80835c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  808360:	e0bfff17 	ldw	r2,-4(fp)
  808364:	10840070 	cmpltui	r2,r2,4097
  808368:	1000021e 	bne	r2,zero,808374 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80836c:	00840004 	movi	r2,4096
  808370:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  808374:	e0fffe17 	ldw	r3,-8(fp)
  808378:	e0bfff17 	ldw	r2,-4(fp)
  80837c:	1885883a 	add	r2,r3,r2
  808380:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808384:	e0bffe17 	ldw	r2,-8(fp)
  808388:	e0bffd15 	stw	r2,-12(fp)
  80838c:	00000506 	br	8083a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  808390:	e0bffd17 	ldw	r2,-12(fp)
  808394:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  808398:	e0bffd17 	ldw	r2,-12(fp)
  80839c:	10800804 	addi	r2,r2,32
  8083a0:	e0bffd15 	stw	r2,-12(fp)
  8083a4:	e0fffd17 	ldw	r3,-12(fp)
  8083a8:	e0bffc17 	ldw	r2,-16(fp)
  8083ac:	18bff836 	bltu	r3,r2,808390 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8083b0:	e0bffe17 	ldw	r2,-8(fp)
  8083b4:	108007cc 	andi	r2,r2,31
  8083b8:	1005003a 	cmpeq	r2,r2,zero
  8083bc:	1000021e 	bne	r2,zero,8083c8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8083c0:	e0bffd17 	ldw	r2,-12(fp)
  8083c4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8083c8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8083cc:	e037883a 	mov	sp,fp
  8083d0:	df000017 	ldw	fp,0(sp)
  8083d4:	dec00104 	addi	sp,sp,4
  8083d8:	f800283a 	ret

008083dc <atexit>:
  8083dc:	200b883a 	mov	r5,r4
  8083e0:	000d883a 	mov	r6,zero
  8083e4:	0009883a 	mov	r4,zero
  8083e8:	000f883a 	mov	r7,zero
  8083ec:	080849c1 	jmpi	80849c <__register_exitproc>

008083f0 <exit>:
  8083f0:	defffe04 	addi	sp,sp,-8
  8083f4:	000b883a 	mov	r5,zero
  8083f8:	dc000015 	stw	r16,0(sp)
  8083fc:	dfc00115 	stw	ra,4(sp)
  808400:	2021883a 	mov	r16,r4
  808404:	08085d40 	call	8085d4 <__call_exitprocs>
  808408:	00802074 	movhi	r2,129
  80840c:	10aa0e04 	addi	r2,r2,-22472
  808410:	11000017 	ldw	r4,0(r2)
  808414:	20800f17 	ldw	r2,60(r4)
  808418:	10000126 	beq	r2,zero,808420 <exit+0x30>
  80841c:	103ee83a 	callr	r2
  808420:	8009883a 	mov	r4,r16
  808424:	08089100 	call	808910 <_exit>

00808428 <memcmp>:
  808428:	00c000c4 	movi	r3,3
  80842c:	1980032e 	bgeu	r3,r6,80843c <memcmp+0x14>
  808430:	2144b03a 	or	r2,r4,r5
  808434:	10c4703a 	and	r2,r2,r3
  808438:	10000f26 	beq	r2,zero,808478 <memcmp+0x50>
  80843c:	31ffffc4 	addi	r7,r6,-1
  808440:	3000061e 	bne	r6,zero,80845c <memcmp+0x34>
  808444:	00000a06 	br	808470 <memcmp+0x48>
  808448:	39ffffc4 	addi	r7,r7,-1
  80844c:	00bfffc4 	movi	r2,-1
  808450:	21000044 	addi	r4,r4,1
  808454:	29400044 	addi	r5,r5,1
  808458:	38800526 	beq	r7,r2,808470 <memcmp+0x48>
  80845c:	20c00003 	ldbu	r3,0(r4)
  808460:	28800003 	ldbu	r2,0(r5)
  808464:	18bff826 	beq	r3,r2,808448 <memcmp+0x20>
  808468:	1885c83a 	sub	r2,r3,r2
  80846c:	f800283a 	ret
  808470:	0005883a 	mov	r2,zero
  808474:	f800283a 	ret
  808478:	180f883a 	mov	r7,r3
  80847c:	20c00017 	ldw	r3,0(r4)
  808480:	28800017 	ldw	r2,0(r5)
  808484:	18bfed1e 	bne	r3,r2,80843c <memcmp+0x14>
  808488:	31bfff04 	addi	r6,r6,-4
  80848c:	21000104 	addi	r4,r4,4
  808490:	29400104 	addi	r5,r5,4
  808494:	39bff936 	bltu	r7,r6,80847c <memcmp+0x54>
  808498:	003fe806 	br	80843c <memcmp+0x14>

0080849c <__register_exitproc>:
  80849c:	defffa04 	addi	sp,sp,-24
  8084a0:	00802074 	movhi	r2,129
  8084a4:	10aa0e04 	addi	r2,r2,-22472
  8084a8:	dc000015 	stw	r16,0(sp)
  8084ac:	14000017 	ldw	r16,0(r2)
  8084b0:	dd000415 	stw	r20,16(sp)
  8084b4:	2829883a 	mov	r20,r5
  8084b8:	81405217 	ldw	r5,328(r16)
  8084bc:	dcc00315 	stw	r19,12(sp)
  8084c0:	dc800215 	stw	r18,8(sp)
  8084c4:	dc400115 	stw	r17,4(sp)
  8084c8:	dfc00515 	stw	ra,20(sp)
  8084cc:	2023883a 	mov	r17,r4
  8084d0:	3027883a 	mov	r19,r6
  8084d4:	3825883a 	mov	r18,r7
  8084d8:	28002526 	beq	r5,zero,808570 <__register_exitproc+0xd4>
  8084dc:	29000117 	ldw	r4,4(r5)
  8084e0:	008007c4 	movi	r2,31
  8084e4:	11002716 	blt	r2,r4,808584 <__register_exitproc+0xe8>
  8084e8:	8800101e 	bne	r17,zero,80852c <__register_exitproc+0x90>
  8084ec:	2105883a 	add	r2,r4,r4
  8084f0:	1085883a 	add	r2,r2,r2
  8084f4:	20c00044 	addi	r3,r4,1
  8084f8:	1145883a 	add	r2,r2,r5
  8084fc:	0009883a 	mov	r4,zero
  808500:	15000215 	stw	r20,8(r2)
  808504:	28c00115 	stw	r3,4(r5)
  808508:	2005883a 	mov	r2,r4
  80850c:	dfc00517 	ldw	ra,20(sp)
  808510:	dd000417 	ldw	r20,16(sp)
  808514:	dcc00317 	ldw	r19,12(sp)
  808518:	dc800217 	ldw	r18,8(sp)
  80851c:	dc400117 	ldw	r17,4(sp)
  808520:	dc000017 	ldw	r16,0(sp)
  808524:	dec00604 	addi	sp,sp,24
  808528:	f800283a 	ret
  80852c:	29802204 	addi	r6,r5,136
  808530:	00800044 	movi	r2,1
  808534:	110e983a 	sll	r7,r2,r4
  808538:	30c04017 	ldw	r3,256(r6)
  80853c:	2105883a 	add	r2,r4,r4
  808540:	1085883a 	add	r2,r2,r2
  808544:	1185883a 	add	r2,r2,r6
  808548:	19c6b03a 	or	r3,r3,r7
  80854c:	14802015 	stw	r18,128(r2)
  808550:	14c00015 	stw	r19,0(r2)
  808554:	00800084 	movi	r2,2
  808558:	30c04015 	stw	r3,256(r6)
  80855c:	88bfe31e 	bne	r17,r2,8084ec <__register_exitproc+0x50>
  808560:	30804117 	ldw	r2,260(r6)
  808564:	11c4b03a 	or	r2,r2,r7
  808568:	30804115 	stw	r2,260(r6)
  80856c:	003fdf06 	br	8084ec <__register_exitproc+0x50>
  808570:	00802074 	movhi	r2,129
  808574:	10b1c204 	addi	r2,r2,-14584
  808578:	100b883a 	mov	r5,r2
  80857c:	80805215 	stw	r2,328(r16)
  808580:	003fd606 	br	8084dc <__register_exitproc+0x40>
  808584:	00800034 	movhi	r2,0
  808588:	10800004 	addi	r2,r2,0
  80858c:	1000021e 	bne	r2,zero,808598 <__register_exitproc+0xfc>
  808590:	013fffc4 	movi	r4,-1
  808594:	003fdc06 	br	808508 <__register_exitproc+0x6c>
  808598:	01006404 	movi	r4,400
  80859c:	103ee83a 	callr	r2
  8085a0:	1007883a 	mov	r3,r2
  8085a4:	103ffa26 	beq	r2,zero,808590 <__register_exitproc+0xf4>
  8085a8:	80805217 	ldw	r2,328(r16)
  8085ac:	180b883a 	mov	r5,r3
  8085b0:	18000115 	stw	zero,4(r3)
  8085b4:	18800015 	stw	r2,0(r3)
  8085b8:	80c05215 	stw	r3,328(r16)
  8085bc:	18006215 	stw	zero,392(r3)
  8085c0:	18006315 	stw	zero,396(r3)
  8085c4:	0009883a 	mov	r4,zero
  8085c8:	883fc826 	beq	r17,zero,8084ec <__register_exitproc+0x50>
  8085cc:	003fd706 	br	80852c <__register_exitproc+0x90>

008085d0 <register_fini>:
  8085d0:	f800283a 	ret

008085d4 <__call_exitprocs>:
  8085d4:	00802074 	movhi	r2,129
  8085d8:	10aa0e04 	addi	r2,r2,-22472
  8085dc:	10800017 	ldw	r2,0(r2)
  8085e0:	defff304 	addi	sp,sp,-52
  8085e4:	df000b15 	stw	fp,44(sp)
  8085e8:	d8800115 	stw	r2,4(sp)
  8085ec:	00800034 	movhi	r2,0
  8085f0:	10800004 	addi	r2,r2,0
  8085f4:	1005003a 	cmpeq	r2,r2,zero
  8085f8:	d8800215 	stw	r2,8(sp)
  8085fc:	d8800117 	ldw	r2,4(sp)
  808600:	dd400815 	stw	r21,32(sp)
  808604:	dd000715 	stw	r20,28(sp)
  808608:	10805204 	addi	r2,r2,328
  80860c:	dfc00c15 	stw	ra,48(sp)
  808610:	ddc00a15 	stw	r23,40(sp)
  808614:	dd800915 	stw	r22,36(sp)
  808618:	dcc00615 	stw	r19,24(sp)
  80861c:	dc800515 	stw	r18,20(sp)
  808620:	dc400415 	stw	r17,16(sp)
  808624:	dc000315 	stw	r16,12(sp)
  808628:	282b883a 	mov	r21,r5
  80862c:	2039883a 	mov	fp,r4
  808630:	d8800015 	stw	r2,0(sp)
  808634:	2829003a 	cmpeq	r20,r5,zero
  808638:	d8800117 	ldw	r2,4(sp)
  80863c:	14405217 	ldw	r17,328(r2)
  808640:	88001026 	beq	r17,zero,808684 <__call_exitprocs+0xb0>
  808644:	ddc00017 	ldw	r23,0(sp)
  808648:	88800117 	ldw	r2,4(r17)
  80864c:	8c802204 	addi	r18,r17,136
  808650:	143fffc4 	addi	r16,r2,-1
  808654:	80000916 	blt	r16,zero,80867c <__call_exitprocs+0xa8>
  808658:	05bfffc4 	movi	r22,-1
  80865c:	a000151e 	bne	r20,zero,8086b4 <__call_exitprocs+0xe0>
  808660:	8409883a 	add	r4,r16,r16
  808664:	2105883a 	add	r2,r4,r4
  808668:	1485883a 	add	r2,r2,r18
  80866c:	10c02017 	ldw	r3,128(r2)
  808670:	a8c01126 	beq	r21,r3,8086b8 <__call_exitprocs+0xe4>
  808674:	843fffc4 	addi	r16,r16,-1
  808678:	85bff81e 	bne	r16,r22,80865c <__call_exitprocs+0x88>
  80867c:	d8800217 	ldw	r2,8(sp)
  808680:	10003126 	beq	r2,zero,808748 <__call_exitprocs+0x174>
  808684:	dfc00c17 	ldw	ra,48(sp)
  808688:	df000b17 	ldw	fp,44(sp)
  80868c:	ddc00a17 	ldw	r23,40(sp)
  808690:	dd800917 	ldw	r22,36(sp)
  808694:	dd400817 	ldw	r21,32(sp)
  808698:	dd000717 	ldw	r20,28(sp)
  80869c:	dcc00617 	ldw	r19,24(sp)
  8086a0:	dc800517 	ldw	r18,20(sp)
  8086a4:	dc400417 	ldw	r17,16(sp)
  8086a8:	dc000317 	ldw	r16,12(sp)
  8086ac:	dec00d04 	addi	sp,sp,52
  8086b0:	f800283a 	ret
  8086b4:	8409883a 	add	r4,r16,r16
  8086b8:	88c00117 	ldw	r3,4(r17)
  8086bc:	2105883a 	add	r2,r4,r4
  8086c0:	1445883a 	add	r2,r2,r17
  8086c4:	18ffffc4 	addi	r3,r3,-1
  8086c8:	11800217 	ldw	r6,8(r2)
  8086cc:	1c001526 	beq	r3,r16,808724 <__call_exitprocs+0x150>
  8086d0:	10000215 	stw	zero,8(r2)
  8086d4:	303fe726 	beq	r6,zero,808674 <__call_exitprocs+0xa0>
  8086d8:	00c00044 	movi	r3,1
  8086dc:	1c06983a 	sll	r3,r3,r16
  8086e0:	90804017 	ldw	r2,256(r18)
  8086e4:	8cc00117 	ldw	r19,4(r17)
  8086e8:	1884703a 	and	r2,r3,r2
  8086ec:	10001426 	beq	r2,zero,808740 <__call_exitprocs+0x16c>
  8086f0:	90804117 	ldw	r2,260(r18)
  8086f4:	1884703a 	and	r2,r3,r2
  8086f8:	10000c1e 	bne	r2,zero,80872c <__call_exitprocs+0x158>
  8086fc:	2105883a 	add	r2,r4,r4
  808700:	1485883a 	add	r2,r2,r18
  808704:	11400017 	ldw	r5,0(r2)
  808708:	e009883a 	mov	r4,fp
  80870c:	303ee83a 	callr	r6
  808710:	88800117 	ldw	r2,4(r17)
  808714:	98bfc81e 	bne	r19,r2,808638 <__call_exitprocs+0x64>
  808718:	b8800017 	ldw	r2,0(r23)
  80871c:	147fd526 	beq	r2,r17,808674 <__call_exitprocs+0xa0>
  808720:	003fc506 	br	808638 <__call_exitprocs+0x64>
  808724:	8c000115 	stw	r16,4(r17)
  808728:	003fea06 	br	8086d4 <__call_exitprocs+0x100>
  80872c:	2105883a 	add	r2,r4,r4
  808730:	1485883a 	add	r2,r2,r18
  808734:	11000017 	ldw	r4,0(r2)
  808738:	303ee83a 	callr	r6
  80873c:	003ff406 	br	808710 <__call_exitprocs+0x13c>
  808740:	303ee83a 	callr	r6
  808744:	003ff206 	br	808710 <__call_exitprocs+0x13c>
  808748:	88800117 	ldw	r2,4(r17)
  80874c:	1000081e 	bne	r2,zero,808770 <__call_exitprocs+0x19c>
  808750:	89000017 	ldw	r4,0(r17)
  808754:	20000726 	beq	r4,zero,808774 <__call_exitprocs+0x1a0>
  808758:	b9000015 	stw	r4,0(r23)
  80875c:	8809883a 	mov	r4,r17
  808760:	00000000 	call	0 <__reset-0x800000>
  808764:	bc400017 	ldw	r17,0(r23)
  808768:	883fb71e 	bne	r17,zero,808648 <__call_exitprocs+0x74>
  80876c:	003fc506 	br	808684 <__call_exitprocs+0xb0>
  808770:	89000017 	ldw	r4,0(r17)
  808774:	882f883a 	mov	r23,r17
  808778:	2023883a 	mov	r17,r4
  80877c:	883fb21e 	bne	r17,zero,808648 <__call_exitprocs+0x74>
  808780:	003fc006 	br	808684 <__call_exitprocs+0xb0>

00808784 <udivmodsi4>:
  808784:	29001b2e 	bgeu	r5,r4,8087f4 <udivmodsi4+0x70>
  808788:	28001a16 	blt	r5,zero,8087f4 <udivmodsi4+0x70>
  80878c:	00800044 	movi	r2,1
  808790:	0007883a 	mov	r3,zero
  808794:	01c007c4 	movi	r7,31
  808798:	00000306 	br	8087a8 <udivmodsi4+0x24>
  80879c:	19c01326 	beq	r3,r7,8087ec <udivmodsi4+0x68>
  8087a0:	18c00044 	addi	r3,r3,1
  8087a4:	28000416 	blt	r5,zero,8087b8 <udivmodsi4+0x34>
  8087a8:	294b883a 	add	r5,r5,r5
  8087ac:	1085883a 	add	r2,r2,r2
  8087b0:	293ffa36 	bltu	r5,r4,80879c <udivmodsi4+0x18>
  8087b4:	10000d26 	beq	r2,zero,8087ec <udivmodsi4+0x68>
  8087b8:	0007883a 	mov	r3,zero
  8087bc:	21400236 	bltu	r4,r5,8087c8 <udivmodsi4+0x44>
  8087c0:	2149c83a 	sub	r4,r4,r5
  8087c4:	1886b03a 	or	r3,r3,r2
  8087c8:	1004d07a 	srli	r2,r2,1
  8087cc:	280ad07a 	srli	r5,r5,1
  8087d0:	103ffa1e 	bne	r2,zero,8087bc <udivmodsi4+0x38>
  8087d4:	30000226 	beq	r6,zero,8087e0 <udivmodsi4+0x5c>
  8087d8:	2005883a 	mov	r2,r4
  8087dc:	f800283a 	ret
  8087e0:	1809883a 	mov	r4,r3
  8087e4:	2005883a 	mov	r2,r4
  8087e8:	f800283a 	ret
  8087ec:	0007883a 	mov	r3,zero
  8087f0:	003ff806 	br	8087d4 <udivmodsi4+0x50>
  8087f4:	00800044 	movi	r2,1
  8087f8:	0007883a 	mov	r3,zero
  8087fc:	003fef06 	br	8087bc <udivmodsi4+0x38>

00808800 <__divsi3>:
  808800:	defffe04 	addi	sp,sp,-8
  808804:	dc000015 	stw	r16,0(sp)
  808808:	dfc00115 	stw	ra,4(sp)
  80880c:	0021883a 	mov	r16,zero
  808810:	20000c16 	blt	r4,zero,808844 <__divsi3+0x44>
  808814:	000d883a 	mov	r6,zero
  808818:	28000e16 	blt	r5,zero,808854 <__divsi3+0x54>
  80881c:	08087840 	call	808784 <udivmodsi4>
  808820:	1007883a 	mov	r3,r2
  808824:	8005003a 	cmpeq	r2,r16,zero
  808828:	1000011e 	bne	r2,zero,808830 <__divsi3+0x30>
  80882c:	00c7c83a 	sub	r3,zero,r3
  808830:	1805883a 	mov	r2,r3
  808834:	dfc00117 	ldw	ra,4(sp)
  808838:	dc000017 	ldw	r16,0(sp)
  80883c:	dec00204 	addi	sp,sp,8
  808840:	f800283a 	ret
  808844:	0109c83a 	sub	r4,zero,r4
  808848:	04000044 	movi	r16,1
  80884c:	000d883a 	mov	r6,zero
  808850:	283ff20e 	bge	r5,zero,80881c <__divsi3+0x1c>
  808854:	014bc83a 	sub	r5,zero,r5
  808858:	8021003a 	cmpeq	r16,r16,zero
  80885c:	003fef06 	br	80881c <__divsi3+0x1c>

00808860 <__modsi3>:
  808860:	deffff04 	addi	sp,sp,-4
  808864:	dfc00015 	stw	ra,0(sp)
  808868:	01800044 	movi	r6,1
  80886c:	2807883a 	mov	r3,r5
  808870:	20000416 	blt	r4,zero,808884 <__modsi3+0x24>
  808874:	28000c16 	blt	r5,zero,8088a8 <__modsi3+0x48>
  808878:	dfc00017 	ldw	ra,0(sp)
  80887c:	dec00104 	addi	sp,sp,4
  808880:	08087841 	jmpi	808784 <udivmodsi4>
  808884:	0109c83a 	sub	r4,zero,r4
  808888:	28000b16 	blt	r5,zero,8088b8 <__modsi3+0x58>
  80888c:	180b883a 	mov	r5,r3
  808890:	01800044 	movi	r6,1
  808894:	08087840 	call	808784 <udivmodsi4>
  808898:	0085c83a 	sub	r2,zero,r2
  80889c:	dfc00017 	ldw	ra,0(sp)
  8088a0:	dec00104 	addi	sp,sp,4
  8088a4:	f800283a 	ret
  8088a8:	014bc83a 	sub	r5,zero,r5
  8088ac:	dfc00017 	ldw	ra,0(sp)
  8088b0:	dec00104 	addi	sp,sp,4
  8088b4:	08087841 	jmpi	808784 <udivmodsi4>
  8088b8:	0147c83a 	sub	r3,zero,r5
  8088bc:	003ff306 	br	80888c <__modsi3+0x2c>

008088c0 <__udivsi3>:
  8088c0:	000d883a 	mov	r6,zero
  8088c4:	08087841 	jmpi	808784 <udivmodsi4>

008088c8 <__umodsi3>:
  8088c8:	01800044 	movi	r6,1
  8088cc:	08087841 	jmpi	808784 <udivmodsi4>

008088d0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8088d0:	defffd04 	addi	sp,sp,-12
  8088d4:	df000215 	stw	fp,8(sp)
  8088d8:	df000204 	addi	fp,sp,8
  8088dc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  8088e0:	e0bfff17 	ldw	r2,-4(fp)
  8088e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8088e8:	e0bffe17 	ldw	r2,-8(fp)
  8088ec:	1005003a 	cmpeq	r2,r2,zero
  8088f0:	1000021e 	bne	r2,zero,8088fc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  8088f4:	002af070 	cmpltui	zero,zero,43969
  8088f8:	00000106 	br	808900 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  8088fc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  808900:	e037883a 	mov	sp,fp
  808904:	df000017 	ldw	fp,0(sp)
  808908:	dec00104 	addi	sp,sp,4
  80890c:	f800283a 	ret

00808910 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  808910:	defffd04 	addi	sp,sp,-12
  808914:	dfc00215 	stw	ra,8(sp)
  808918:	df000115 	stw	fp,4(sp)
  80891c:	df000104 	addi	fp,sp,4
  808920:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  808924:	e13fff17 	ldw	r4,-4(fp)
  808928:	08088d00 	call	8088d0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80892c:	003fff06 	br	80892c <_exit+0x1c>
  808930:	008085d0 	cmplti	r2,zero,535
