
pacemaker.elf:     file format elf32-littlenios2
pacemaker.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00008b6c memsz 0x00008b6c flags r-x
    LOAD off    0x00009b8c vaddr 0x00808b8c paddr 0x0080a7c0 align 2**12
         filesz 0x00001c34 memsz 0x00001c34 flags rw-
    LOAD off    0x0000c3f4 vaddr 0x0080c3f4 paddr 0x0080c3f4 align 2**12
         filesz 0x00000000 memsz 0x000003bc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000086a4  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000334  00808858  00808858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c34  00808b8c  0080a7c0  00009b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003bc  0080c3f4  0080c3f4  0000c3f4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000b7c0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ad8  00000000  00000000  0000b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013d3  00000000  00000000  0000c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00020771  00000000  00000000  0000d693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006355  00000000  00000000  0002de04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fd5e  00000000  00000000  00034159  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015c4  00000000  00000000  00043eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001a21  00000000  00000000  0004547c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004c84  00000000  00000000  00046e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0004bb24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0004bb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004f193  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0004f196  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004f199  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004f19a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004f19b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004f19f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004f1a3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0004f1a7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0004f1b0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0004f1b9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  0004f1c2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000019  00000000  00000000  0004f1c8  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065aec  00000000  00000000  0004f1e1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
00808858 l    d  .rodata	00000000 .rodata
00808b8c l    d  .rwdata	00000000 .rwdata
0080c3f4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0080c4e0 l     O .bss	00000018 URI_timer
0080c468 l     O .bss	00000018 LRI_timer
0080c480 l     O .bss	00000018 PVARP_timer
0080c498 l     O .bss	00000018 VRP_timer
0080c4b0 l     O .bss	00000018 AEI_timer
0080c4c8 l     O .bss	00000018 AVI_timer
00000000 l    df *ABS*	00000000 pacemaker_fsm.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
00808b8c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00802208 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080276c l     F .text	00000058 std
00802878 l     F .text	00000008 __fp_lock
00802880 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00804428 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00804488 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00804588 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008046a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00804788 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008048e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
008049f0 l     F .text	000000dc alt_file_locked
00804c54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
00804dd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080a7a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00805214 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080953c l     O .rwdata	00001060 jtag_uart
0080a59c l     O .rwdata	00000120 lcd
0080a6bc l     O .rwdata	000000c4 uart
0080533c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080557c l     F .text	00000228 altera_avalon_jtag_uart_irq
008057a4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0080a7b4 l     O .rwdata	00000004 colstart
00805e20 l     F .text	000000b8 lcd_write_command
00805ed8 l     F .text	000000d4 lcd_write_data
00805fac l     F .text	000000c4 lcd_clear_screen
00806070 l     F .text	000001ec lcd_repaint_screen
0080625c l     F .text	000000c8 lcd_scroll_up
00806324 l     F .text	000002d0 lcd_handle_escape
00806b00 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00806d60 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00807020 l     F .text	0000009c altera_avalon_uart_irq
008070bc l     F .text	000000e0 altera_avalon_uart_rxirq
0080719c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00807588 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
008077b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00807908 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00807f98 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00808a0c l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
008084f4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
008086a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
008087f4 l     F .text	00000040 alt_sim_halt
0080c404 g     O .bss	00000001 PRE_g2
0080c405 g     O .bss	00000001 g3b
00803528 g     F .text	00000070 _isatty_r
00804944 g     F .text	0000006c alt_main
00801f90 g     F .text	000000a0 _puts_r
0080c520 g     O .bss	00000100 alt_irq
00803598 g     F .text	00000078 _lseek_r
0080c406 g     O .bss	00000001 g4
0080a7c0 g       *ABS*	00000000 __flash_rwdata_start
0080c407 g     O .bss	00000001 g19
00802a2c g     F .text	000000a0 __sflags
0080c3f4 g     O .bss	00000001 URI_t
0080c7b0 g       *ABS*	00000000 __alt_heap_start
0080c408 g     O .bss	00000001 g25_e1
0080229c g     F .text	00000068 __sseek
008027d4 g     F .text	000000a4 __sinit
0080c409 g     O .bss	00000001 g27
008028d4 g     F .text	00000068 __sfmoreglue
008049d0 g     F .text	00000020 __malloc_unlock
0080c40a g     O .bss	00000001 g3
00800270 g     F .text	00000038 LRI_timer_isr
00803794 g     F .text	000000e0 memmove
0080c40b g     O .bss	00000001 PRE_g27
008028c4 g     F .text	00000010 _cleanup
0080c40c g     O .bss	00000001 g9
0080c40d g     O .bss	00000001 _cg7
0080c410 g     O .bss	00000004 _PRE_GO
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
0080c414 g     O .bss	00000001 _cg15
00800020 g       *ABS*	00000000 __flash_exceptions_start
008015d0 g     F .text	00000074 _fstat_r
0080c440 g     O .bss	00000004 errno
00800000 g       *ABS*	00000000 __alt_mem_sdram_controller
0080c415 g     O .bss	00000001 _cg12
0080c454 g     O .bss	00000004 alt_argv
00812780 g       *ABS*	00000000 _gp
008080d4 g     F .text	00000030 usleep
00800584 g     F .text	00000044 reset
0080c416 g     O .bss	00000001 g1
00800350 g     F .text	00000078 output
008093bc g     O .rwdata	00000180 alt_fd_list
00807a30 g     F .text	00000094 alt_find_dev
008036f4 g     F .text	000000a0 memcpy
008028b8 g     F .text	0000000c _cleanup_r
0080805c g     F .text	00000078 alt_io_redirect
00808858 g       *ABS*	00000000 __DTOR_END__
0080c417 g     O .bss	00000001 g12
00802030 g     F .text	00000014 puts
0080c3f5 g     O .bss	00000001 VS
0080c3f6 g     O .bss	00000001 AEI_t
00800200 g     F .text	00000038 URI_timer_isr
008059bc g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008087e4 g     F .text	00000008 __udivsi3
008045e8 g     F .text	000000c0 isatty
0080c418 g     O .bss	00000001 g17
00808270 g     F .text	00000090 alt_icache_flush
0080c444 g     O .bss	00000004 __malloc_top_pad
00802f0c g     F .text	0000049c __sfvwrite_r
00802224 g     F .text	00000070 _sbrk_r
0080390c g     F .text	00000078 _read_r
008002a8 g     F .text	00000038 PVARP_timer_isr
0080a7a0 g     O .rwdata	00000004 alt_max_fd
0080c419 g     O .bss	00000001 PRE_g8
008040b4 g     F .text	00000110 _fclose_r
00802738 g     F .text	00000034 fflush
0080c448 g     O .bss	00000004 __malloc_max_sbrked_mem
0080c41a g     O .bss	00000001 g18
008047f4 g     F .text	000000f0 lseek
0080a784 g     O .rwdata	00000004 _global_impure_ptr
00803984 g     F .text	000005f4 _realloc_r
0080c7b0 g       *ABS*	00000000 __bss_end
00807ea0 g     F .text	000000f8 alt_iic_isr_register
00804fe8 g     F .text	0000010c alt_tick
00806f58 g     F .text	000000c8 altera_avalon_uart_init
0080a7bc g     O .rwdata	00000004 __ctype_ptr
008028a0 g     F .text	00000018 __fp_lock_all
00807e58 g     F .text	00000048 alt_ic_irq_enabled
0080c41b g     O .bss	00000001 _cg21
00804f50 g     F .text	00000098 alt_alarm_stop
0080c464 g     O .bss	00000004 alt_irq_active
01008000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000ec g     F .exceptions	000000c8 alt_irq_handler
00809394 g     O .rwdata	00000028 alt_dev_null
00807810 g     F .text	00000044 alt_dcache_flush_all
0080c41c g     O .bss	00000001 g21
0080a7c0 g       *ABS*	00000000 __ram_rwdata_end
0080c41d g     O .bss	00000001 g5
0080a798 g     O .rwdata	00000008 alt_dev_list
008050f4 g     F .text	00000120 write
0080c41e g     O .bss	00000001 g2
0080c41f g     O .bss	00000001 g7
00808b8c g       *ABS*	00000000 __ram_rodata_end
008044b4 g     F .text	000000d4 fstat
008087ec g     F .text	00000008 __umodsi3
00800238 g     F .text	00000038 AVI_timer_isr
008002e0 g     F .text	00000038 VRP_timer_isr
0080c7b0 g       *ABS*	00000000 end
0080c420 g     O .bss	00000001 PRE_g4
008065f4 g     F .text	0000050c altera_avalon_lcd_16207_write
008075e8 g     F .text	000001c8 altera_avalon_uart_write
008015ac g     F .text	00000024 fseek
0080c421 g     O .bss	00000001 g23
008054bc g     F .text	000000c0 altera_avalon_jtag_uart_init
0080c3f7 g     O .bss	00000001 StartAVI
00808854 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00806dd0 g     F .text	00000090 alt_avalon_timer_sc_init
00806eb8 g     F .text	00000058 altera_avalon_uart_write_fd
00806f10 g     F .text	00000048 altera_avalon_uart_close_fd
00805be0 g     F .text	00000240 altera_avalon_jtag_uart_write
008027c4 g     F .text	00000004 __sfp_lock_acquire
00803610 g     F .text	000000e4 memchr
0080c422 g     O .bss	00000001 g14
00802bf8 g     F .text	00000314 _free_r
008084f8 g     F .text	000001b0 __call_exitprocs
0080a78c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000004c _start
0080c45c g     O .bss	00000004 _alt_tick_rate
0080c460 g     O .bss	00000004 _alt_nticks
0080c423 g     O .bss	00000001 PRE_g6
00804cb4 g     F .text	00000120 read
008052a8 g     F .text	00000094 alt_sys_init
00801f18 g     F .text	00000078 _open_r
008083c0 g     F .text	00000134 __register_exitproc
0080c3f8 g     O .bss	00000004 uart_fp
00805854 g     F .text	00000074 altera_avalon_jtag_uart_close
0080c424 g     O .bss	00000001 PRE_g22
00808b8c g       *ABS*	00000000 __ram_rwdata_start
00808858 g       *ABS*	00000000 __ram_rodata_start
0080c4f8 g     O .bss	00000028 __malloc_current_mallinfo
0080c3fc g     O .bss	00000001 PVARP_t
0080c425 g     O .bss	00000001 _cg5
00805374 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00807be4 g     F .text	000000b8 alt_get_fd
00808124 g     F .text	0000014c alt_busy_sleep
0080c426 g     O .bss	00000001 g15
008024cc g     F .text	00000070 _close_r
0080c427 g     O .bss	00000001 _GO
0080834c g     F .text	00000074 memcmp
00805424 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0080c428 g     O .bss	00000001 PRE_g11
0080c7b0 g       *ABS*	00000000 __alt_stack_base
0080546c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00800318 g     F .text	00000038 AEI_timer_isr
00803f78 g     F .text	0000013c __swsetup_r
008005c8 g     F .text	00000a98 tick
0080293c g     F .text	000000f0 __sfp
0080c429 g     O .bss	00000001 g20
00808f8c g     O .rwdata	00000408 __malloc_av_
008027d0 g     F .text	00000004 __sinit_lock_release
0080c3fd g     O .bss	00000001 VRP_t
00802380 g     F .text	00000060 __sread
00807ac4 g     F .text	00000120 alt_find_file
00807854 g     F .text	000000b4 alt_dev_llist_insert
008049b0 g     F .text	00000020 __malloc_lock
00804e94 g     F .text	000000bc sbrk
0080253c g     F .text	000001fc _fflush_r
00801154 g     F .text	0000001c fopen
0080c3f4 g       *ABS*	00000000 __bss_start
00803874 g     F .text	00000098 memset
008003c8 g     F .text	000001bc main
0080c458 g     O .bss	00000004 alt_envp
0080c44c g     O .bss	00000004 __malloc_max_total_mem
008053cc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00806bcc g     F .text	0000013c altera_avalon_lcd_16207_init
00802294 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008041c4 g     F .text	00000014 fclose
0080c620 g     O .bss	00000190 _atexit0
008017d8 g     F .text	00000740 _malloc_r
0080a7a4 g     O .rwdata	00000004 alt_errno
00803470 g     F .text	000000b8 _fwalk
00808724 g     F .text	00000060 __divsi3
00802acc g     F .text	0000012c _malloc_trim_r
00808858 g       *ABS*	00000000 __CTOR_END__
00808858 g       *ABS*	00000000 __flash_rodata_start
00808858 g       *ABS*	00000000 __DTOR_LIST__
00805274 g     F .text	00000034 alt_irq_init
00804e34 g     F .text	00000060 alt_release_fd
0080c42a g     O .bss	00000001 g13
0080c42b g     O .bss	00000001 g8
00808300 g     F .text	00000014 atexit
00802454 g     F .text	00000078 _write_r
0080a780 g     O .rwdata	00000004 _impure_ptr
0080c450 g     O .bss	00000004 alt_argc
0080c42c g     O .bss	00000001 g6
0080c42d g     O .bss	00000001 _cg19
008079cc g     F .text	00000064 _do_dtors
0080c3fe g     O .bss	00000001 AVI_t
00801170 g     F .text	0000043c _fseek_r
00802044 g     F .text	000001c4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00802888 g     F .text	00000018 __fp_unlock_all
00806d08 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
0080c42e g     O .bss	00000001 _cg13
0080c42f g     O .bss	00000001 _cg9
0080a790 g     O .rwdata	00000008 alt_fs_list
0080c430 g     O .bss	00000001 g0
0080c3ff g     O .bss	00000001 VP
0080c431 g     O .bss	00000001 _cg17
0080c432 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080c433 g     O .bss	00000001 g16
0080c434 g     O .bss	00000001 _cg24
00807ccc g     F .text	00000050 alt_ic_isr_register
0080c435 g     O .bss	00000001 g25
0080a7c0 g       *ABS*	00000000 _edata
00806e60 g     F .text	00000058 altera_avalon_uart_read_fd
0080c7b0 g       *ABS*	00000000 _end
0080c436 g     O .bss	00000001 g11
008001b4 g       *ABS*	00000000 __ram_exceptions_end
008058c8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080c437 g     O .bss	00000001 g22
0080c438 g     O .bss	00000001 g28
0080c439 g     O .bss	00000001 g16b
00807db8 g     F .text	000000a0 alt_ic_irq_disable
00802304 g     F .text	0000007c __swrite
0080a788 g     O .rwdata	00000004 __malloc_trim_threshold
00808104 g     F .text	00000020 altera_nios2_qsys_irq_init
00808314 g     F .text	00000038 exit
008033a8 g     F .text	000000c8 _fwalk_reent
0080c400 g     O .bss	00000001 AS
00808784 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008027c8 g     F .text	00000004 __sfp_lock_release
0080c43a g     O .bss	00000001 _cg23
0080c43b g     O .bss	00000001 g29_e2
00808908 g     O .rodata	00000101 _ctype_
008072f8 g     F .text	00000060 altera_avalon_uart_close
0080c401 g     O .bss	00000001 StartRI
00801060 g     F .text	000000f4 _fopen_r
00808834 g     F .text	00000020 _exit
008041d8 g     F .text	00000154 alt_alarm_start
00801644 g     F .text	00000194 __smakebuf_r
0080c402 g     O .bss	00000001 AP
008023e0 g     F .text	00000074 strlen
00804acc g     F .text	00000188 open
00807c9c g     F .text	00000030 alt_icache_flush_all
0080c43c g     O .bss	00000001 g29
0080c43d g     O .bss	00000001 g24
0080a7b8 g     O .rwdata	00000004 alt_priority_mask
0080c403 g     O .bss	00000001 LRI_t
00807d1c g     F .text	0000009c alt_ic_irq_enable
00807358 g     F .text	00000230 altera_avalon_uart_read
0080c43e g     O .bss	00000001 g10
0080a7ac g     O .rwdata	00000008 alt_alarm_list
00807968 g     F .text	00000064 _do_ctors
0080c43f g     O .bss	00000001 g26
0080432c g     F .text	000000fc close
00804708 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
008027cc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08406d14 	ori	at,at,436
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18f14804 	addi	r3,r3,-15072
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18f14804 	addi	r3,r3,-15072
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001d0:	d689e014 	ori	gp,gp,10112
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10b0fd14 	ori	r2,r2,50164

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18f1ec14 	ori	r3,r3,51120

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001f4:	08047080 	call	804708 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f8:	08049440 	call	804944 <alt_main>

008001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001fc:	003fff06 	br	8001fc <alt_after_alt_main>

00800200 <URI_timer_isr>:
	AEI_timer,
	AVI_timer,
	URI_timer;

//timer ISR declarations
DECLARE_TIMER_ISR (URI)
  800200:	defffd04 	addi	sp,sp,-12
  800204:	df000215 	stw	fp,8(sp)
  800208:	df000204 	addi	fp,sp,8
  80020c:	e13fff15 	stw	r4,-4(fp)
  800210:	e0bfff17 	ldw	r2,-4(fp)
  800214:	e0bffe15 	stw	r2,-8(fp)
  800218:	e0fffe17 	ldw	r3,-8(fp)
  80021c:	00800044 	movi	r2,1
  800220:	18800015 	stw	r2,0(r3)
  800224:	0005883a 	mov	r2,zero
  800228:	e037883a 	mov	sp,fp
  80022c:	df000017 	ldw	fp,0(sp)
  800230:	dec00104 	addi	sp,sp,4
  800234:	f800283a 	ret

00800238 <AVI_timer_isr>:
DECLARE_TIMER_ISR (AVI)
  800238:	defffd04 	addi	sp,sp,-12
  80023c:	df000215 	stw	fp,8(sp)
  800240:	df000204 	addi	fp,sp,8
  800244:	e13fff15 	stw	r4,-4(fp)
  800248:	e0bfff17 	ldw	r2,-4(fp)
  80024c:	e0bffe15 	stw	r2,-8(fp)
  800250:	e0fffe17 	ldw	r3,-8(fp)
  800254:	00800044 	movi	r2,1
  800258:	18800015 	stw	r2,0(r3)
  80025c:	0005883a 	mov	r2,zero
  800260:	e037883a 	mov	sp,fp
  800264:	df000017 	ldw	fp,0(sp)
  800268:	dec00104 	addi	sp,sp,4
  80026c:	f800283a 	ret

00800270 <LRI_timer_isr>:
DECLARE_TIMER_ISR (LRI)
  800270:	defffd04 	addi	sp,sp,-12
  800274:	df000215 	stw	fp,8(sp)
  800278:	df000204 	addi	fp,sp,8
  80027c:	e13fff15 	stw	r4,-4(fp)
  800280:	e0bfff17 	ldw	r2,-4(fp)
  800284:	e0bffe15 	stw	r2,-8(fp)
  800288:	e0fffe17 	ldw	r3,-8(fp)
  80028c:	00800044 	movi	r2,1
  800290:	18800015 	stw	r2,0(r3)
  800294:	0005883a 	mov	r2,zero
  800298:	e037883a 	mov	sp,fp
  80029c:	df000017 	ldw	fp,0(sp)
  8002a0:	dec00104 	addi	sp,sp,4
  8002a4:	f800283a 	ret

008002a8 <PVARP_timer_isr>:
DECLARE_TIMER_ISR (PVARP)
  8002a8:	defffd04 	addi	sp,sp,-12
  8002ac:	df000215 	stw	fp,8(sp)
  8002b0:	df000204 	addi	fp,sp,8
  8002b4:	e13fff15 	stw	r4,-4(fp)
  8002b8:	e0bfff17 	ldw	r2,-4(fp)
  8002bc:	e0bffe15 	stw	r2,-8(fp)
  8002c0:	e0fffe17 	ldw	r3,-8(fp)
  8002c4:	00800044 	movi	r2,1
  8002c8:	18800015 	stw	r2,0(r3)
  8002cc:	0005883a 	mov	r2,zero
  8002d0:	e037883a 	mov	sp,fp
  8002d4:	df000017 	ldw	fp,0(sp)
  8002d8:	dec00104 	addi	sp,sp,4
  8002dc:	f800283a 	ret

008002e0 <VRP_timer_isr>:
DECLARE_TIMER_ISR (VRP)
  8002e0:	defffd04 	addi	sp,sp,-12
  8002e4:	df000215 	stw	fp,8(sp)
  8002e8:	df000204 	addi	fp,sp,8
  8002ec:	e13fff15 	stw	r4,-4(fp)
  8002f0:	e0bfff17 	ldw	r2,-4(fp)
  8002f4:	e0bffe15 	stw	r2,-8(fp)
  8002f8:	e0fffe17 	ldw	r3,-8(fp)
  8002fc:	00800044 	movi	r2,1
  800300:	18800015 	stw	r2,0(r3)
  800304:	0005883a 	mov	r2,zero
  800308:	e037883a 	mov	sp,fp
  80030c:	df000017 	ldw	fp,0(sp)
  800310:	dec00104 	addi	sp,sp,4
  800314:	f800283a 	ret

00800318 <AEI_timer_isr>:
DECLARE_TIMER_ISR (AEI)
  800318:	defffd04 	addi	sp,sp,-12
  80031c:	df000215 	stw	fp,8(sp)
  800320:	df000204 	addi	fp,sp,8
  800324:	e13fff15 	stw	r4,-4(fp)
  800328:	e0bfff17 	ldw	r2,-4(fp)
  80032c:	e0bffe15 	stw	r2,-8(fp)
  800330:	e0fffe17 	ldw	r3,-8(fp)
  800334:	00800044 	movi	r2,1
  800338:	18800015 	stw	r2,0(r3)
  80033c:	0005883a 	mov	r2,zero
  800340:	e037883a 	mov	sp,fp
  800344:	df000017 	ldw	fp,0(sp)
  800348:	dec00104 	addi	sp,sp,4
  80034c:	f800283a 	ret

00800350 <output>:

// UART
FILE* uart_fp;

void output() {
  800350:	defffe04 	addi	sp,sp,-8
  800354:	df000115 	stw	fp,4(sp)
  800358:	df000104 	addi	fp,sp,4

	//LED handling. LEDG0 represents a ventricular event while
	//LEDG1 simulates an atrial event
	int led_reg = 0;
  80035c:	e03fff15 	stw	zero,-4(fp)

	if (AP) {
  800360:	d0a72083 	ldbu	r2,-25470(gp)
  800364:	10803fcc 	andi	r2,r2,255
  800368:	1080201c 	xori	r2,r2,128
  80036c:	10bfe004 	addi	r2,r2,-128
  800370:	1005003a 	cmpeq	r2,r2,zero
  800374:	1000031e 	bne	r2,zero,800384 <output+0x34>
		led_reg |= 0x1;
  800378:	e0bfff17 	ldw	r2,-4(fp)
  80037c:	10800054 	ori	r2,r2,1
  800380:	e0bfff15 	stw	r2,-4(fp)
	}

	if (VP) {
  800384:	d0a71fc3 	ldbu	r2,-25473(gp)
  800388:	10803fcc 	andi	r2,r2,255
  80038c:	1080201c 	xori	r2,r2,128
  800390:	10bfe004 	addi	r2,r2,-128
  800394:	1005003a 	cmpeq	r2,r2,zero
  800398:	1000031e 	bne	r2,zero,8003a8 <output+0x58>
		led_reg |= 0x2;
  80039c:	e0bfff17 	ldw	r2,-4(fp)
  8003a0:	10800094 	ori	r2,r2,2
  8003a4:	e0bfff15 	stw	r2,-4(fp)
	}

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,led_reg);
  8003a8:	00c04074 	movhi	r3,257
  8003ac:	18c41804 	addi	r3,r3,4192
  8003b0:	e0bfff17 	ldw	r2,-4(fp)
  8003b4:	18800035 	stwio	r2,0(r3)
}
  8003b8:	e037883a 	mov	sp,fp
  8003bc:	df000017 	ldw	fp,0(sp)
  8003c0:	dec00104 	addi	sp,sp,4
  8003c4:	f800283a 	ret

008003c8 <main>:

int main()
{
  8003c8:	defffc04 	addi	sp,sp,-16
  8003cc:	dfc00315 	stw	ra,12(sp)
  8003d0:	df000215 	stw	fp,8(sp)
  8003d4:	df000204 	addi	fp,sp,8
	reset();
  8003d8:	08005840 	call	800584 <reset>

	printf("Initializing pacemaker...\n");
  8003dc:	01002074 	movhi	r4,129
  8003e0:	21221604 	addi	r4,r4,-30632
  8003e4:	08020300 	call	802030 <puts>

	//setup UART file pointer
	uart_fp = fopen(UART_NAME, "r+");
  8003e8:	01002074 	movhi	r4,129
  8003ec:	21221d04 	addi	r4,r4,-30604
  8003f0:	01402074 	movhi	r5,129
  8003f4:	29622004 	addi	r5,r5,-30592
  8003f8:	08011540 	call	801154 <fopen>
  8003fc:	d0a71e15 	stw	r2,-25480(gp)

	//initialise the button registers
	IOWR_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE, 0);
  800400:	00804074 	movhi	r2,257
  800404:	10842804 	addi	r2,r2,4256
  800408:	10000035 	stwio	zero,0(r2)
	int buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  80040c:	00804074 	movhi	r2,257
  800410:	10842804 	addi	r2,r2,4256
  800414:	10800037 	ldwio	r2,0(r2)
  800418:	e0bfff15 	stw	r2,-4(fp)

	while (1) {

			//Reset and start URI and LRI timers if necessary
			//Also start PVARP, VRP, and AEI, although they should have stopped long before
			if (FSMVAR(StartRI)) {
  80041c:	d0a72043 	ldbu	r2,-25471(gp)
  800420:	10803fcc 	andi	r2,r2,255
  800424:	1080201c 	xori	r2,r2,128
  800428:	10bfe004 	addi	r2,r2,-128
  80042c:	1005003a 	cmpeq	r2,r2,zero
  800430:	1000321e 	bne	r2,zero,8004fc <main+0x134>

				RESTART_TIMER(URI);
  800434:	01002074 	movhi	r4,129
  800438:	21313804 	addi	r4,r4,-15136
  80043c:	0804f500 	call	804f50 <alt_alarm_stop>
  800440:	01002074 	movhi	r4,129
  800444:	21313804 	addi	r4,r4,-15136
  800448:	0140e104 	movi	r5,900
  80044c:	01802034 	movhi	r6,128
  800450:	31808004 	addi	r6,r6,512
  800454:	d1e71d04 	addi	r7,gp,-25484
  800458:	08041d80 	call	8041d8 <alt_alarm_start>
				RESTART_TIMER(LRI);
  80045c:	01002074 	movhi	r4,129
  800460:	21311a04 	addi	r4,r4,-15256
  800464:	0804f500 	call	804f50 <alt_alarm_stop>
  800468:	01002074 	movhi	r4,129
  80046c:	21311a04 	addi	r4,r4,-15256
  800470:	0140ed84 	movi	r5,950
  800474:	01802034 	movhi	r6,128
  800478:	31809c04 	addi	r6,r6,624
  80047c:	d1e720c4 	addi	r7,gp,-25469
  800480:	08041d80 	call	8041d8 <alt_alarm_start>
				RESTART_TIMER(PVARP);
  800484:	01002074 	movhi	r4,129
  800488:	21312004 	addi	r4,r4,-15232
  80048c:	0804f500 	call	804f50 <alt_alarm_stop>
  800490:	01002074 	movhi	r4,129
  800494:	21312004 	addi	r4,r4,-15232
  800498:	01400c84 	movi	r5,50
  80049c:	01802034 	movhi	r6,128
  8004a0:	3180aa04 	addi	r6,r6,680
  8004a4:	d1e71f04 	addi	r7,gp,-25476
  8004a8:	08041d80 	call	8041d8 <alt_alarm_start>
				RESTART_TIMER(VRP);
  8004ac:	01002074 	movhi	r4,129
  8004b0:	21312604 	addi	r4,r4,-15208
  8004b4:	0804f500 	call	804f50 <alt_alarm_stop>
  8004b8:	01002074 	movhi	r4,129
  8004bc:	21312604 	addi	r4,r4,-15208
  8004c0:	01402584 	movi	r5,150
  8004c4:	01802034 	movhi	r6,128
  8004c8:	3180b804 	addi	r6,r6,736
  8004cc:	d1e71f44 	addi	r7,gp,-25475
  8004d0:	08041d80 	call	8041d8 <alt_alarm_start>
				RESTART_TIMER(AEI);
  8004d4:	01002074 	movhi	r4,129
  8004d8:	21312c04 	addi	r4,r4,-15184
  8004dc:	0804f500 	call	804f50 <alt_alarm_stop>
  8004e0:	01002074 	movhi	r4,129
  8004e4:	21312c04 	addi	r4,r4,-15184
  8004e8:	0140c804 	movi	r5,800
  8004ec:	01802034 	movhi	r6,128
  8004f0:	3180c604 	addi	r6,r6,792
  8004f4:	d1e71d84 	addi	r7,gp,-25482
  8004f8:	08041d80 	call	8041d8 <alt_alarm_start>
			}

			if (FSMVAR(StartAVI)) {
  8004fc:	d0a71dc3 	ldbu	r2,-25481(gp)
  800500:	10803fcc 	andi	r2,r2,255
  800504:	1080201c 	xori	r2,r2,128
  800508:	10bfe004 	addi	r2,r2,-128
  80050c:	1005003a 	cmpeq	r2,r2,zero
  800510:	10000a1e 	bne	r2,zero,80053c <main+0x174>
				RESTART_TIMER(AVI);
  800514:	01002074 	movhi	r4,129
  800518:	21313204 	addi	r4,r4,-15160
  80051c:	0804f500 	call	804f50 <alt_alarm_stop>
  800520:	01002074 	movhi	r4,129
  800524:	21313204 	addi	r4,r4,-15160
  800528:	01404b04 	movi	r5,300
  80052c:	01802034 	movhi	r6,128
  800530:	31808e04 	addi	r6,r6,568
  800534:	d1e71f84 	addi	r7,gp,-25474
  800538:	08041d80 	call	8041d8 <alt_alarm_start>
			}

			//Button handling. An atrial sense is mapped to KEY0 and a ventricular sense is mapped
			//to KEY1
			newbuttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  80053c:	00804074 	movhi	r2,257
  800540:	10842804 	addi	r2,r2,4256
  800544:	10800037 	ldwio	r2,0(r2)
  800548:	e0bffe15 	stw	r2,-8(fp)
			if (newbuttons != buttons) {
  80054c:	e0fffe17 	ldw	r3,-8(fp)
  800550:	e0bfff17 	ldw	r2,-4(fp)
  800554:	18800826 	beq	r3,r2,800578 <main+0x1b0>
				buttons = newbuttons;
  800558:	e0bffe17 	ldw	r2,-8(fp)
  80055c:	e0bfff15 	stw	r2,-4(fp)

				AS = (buttons & (1 << 0));
  800560:	e0bfff17 	ldw	r2,-4(fp)
  800564:	1080004c 	andi	r2,r2,1
  800568:	d0a72005 	stb	r2,-25472(gp)
				VS = (buttons & (1 << 1));
  80056c:	e0bfff17 	ldw	r2,-4(fp)
  800570:	1080008c 	andi	r2,r2,2
  800574:	d0a71d45 	stb	r2,-25483(gp)
			}

			tick();
  800578:	08005c80 	call	8005c8 <tick>

			output();
  80057c:	08003500 	call	800350 <output>
		}
  800580:	003fa606 	br	80041c <main+0x54>

00800584 <reset>:
char _cg13;
char _cg15;
char g25_e1;
char g29_e2;
int _PRE_GO;
void reset(){
  800584:	deffff04 	addi	sp,sp,-4
  800588:	df000015 	stw	fp,0(sp)
  80058c:	d839883a 	mov	fp,sp
   _GO = 1;
  800590:	00800044 	movi	r2,1
  800594:	d0a729c5 	stb	r2,-25433(gp)
   _PRE_GO = 0;
  800598:	d0272415 	stw	zero,-25456(gp)
   PRE_g2 = 0;
  80059c:	d0272105 	stb	zero,-25468(gp)
   PRE_g4 = 0;
  8005a0:	d0272805 	stb	zero,-25440(gp)
   PRE_g6 = 0;
  8005a4:	d02728c5 	stb	zero,-25437(gp)
   PRE_g8 = 0;
  8005a8:	d0272645 	stb	zero,-25447(gp)
   PRE_g11 = 0;
  8005ac:	d0272a05 	stb	zero,-25432(gp)
   PRE_g22 = 0;
  8005b0:	d0272905 	stb	zero,-25436(gp)
   PRE_g27 = 0;
  8005b4:	d02722c5 	stb	zero,-25461(gp)
   return;
}
  8005b8:	e037883a 	mov	sp,fp
  8005bc:	df000017 	ldw	fp,0(sp)
  8005c0:	dec00104 	addi	sp,sp,4
  8005c4:	f800283a 	ret

008005c8 <tick>:
void tick(){
  8005c8:	deffea04 	addi	sp,sp,-88
  8005cc:	dfc01515 	stw	ra,84(sp)
  8005d0:	df001415 	stw	fp,80(sp)
  8005d4:	df001404 	addi	fp,sp,80
   if(_PRE_GO == 1){
  8005d8:	d0a72417 	ldw	r2,-25456(gp)
  8005dc:	10800058 	cmpnei	r2,r2,1
  8005e0:	1000011e 	bne	r2,zero,8005e8 <tick+0x20>
      _GO = 0;
  8005e4:	d02729c5 	stb	zero,-25433(gp)
   }
   {
      g0 = _GO;
  8005e8:	d0a729c3 	ldbu	r2,-25433(gp)
  8005ec:	d0a72c05 	stb	r2,-25424(gp)
      g1 = g0;
  8005f0:	d0a72c03 	ldbu	r2,-25424(gp)
  8005f4:	d0a72585 	stb	r2,-25450(gp)
      g28 =(PRE_g27);
  8005f8:	d0a722c3 	ldbu	r2,-25461(gp)
  8005fc:	d0a72e05 	stb	r2,-25416(gp)
      g26 = g0;
  800600:	d0a72c03 	ldbu	r2,-25424(gp)
  800604:	d0a72fc5 	stb	r2,-25409(gp)
      g27 =(g28||g26);
  800608:	d0a72e03 	ldbu	r2,-25416(gp)
  80060c:	10803fcc 	andi	r2,r2,255
  800610:	1080201c 	xori	r2,r2,128
  800614:	10bfe004 	addi	r2,r2,-128
  800618:	1004c03a 	cmpne	r2,r2,zero
  80061c:	1000061e 	bne	r2,zero,800638 <tick+0x70>
  800620:	d0a72fc3 	ldbu	r2,-25409(gp)
  800624:	10803fcc 	andi	r2,r2,255
  800628:	1080201c 	xori	r2,r2,128
  80062c:	10bfe004 	addi	r2,r2,-128
  800630:	1005003a 	cmpeq	r2,r2,zero
  800634:	1000031e 	bne	r2,zero,800644 <tick+0x7c>
  800638:	00800044 	movi	r2,1
  80063c:	e0bfff15 	stw	r2,-4(fp)
  800640:	00000106 	br	800648 <tick+0x80>
  800644:	e03fff15 	stw	zero,-4(fp)
  800648:	e0ffff17 	ldw	r3,-4(fp)
  80064c:	1805883a 	mov	r2,r3
  800650:	d0a72245 	stb	r2,-25463(gp)
      if(g27){
  800654:	d0a72243 	ldbu	r2,-25463(gp)
  800658:	10803fcc 	andi	r2,r2,255
  80065c:	1080201c 	xori	r2,r2,128
  800660:	10bfe004 	addi	r2,r2,-128
  800664:	1005003a 	cmpeq	r2,r2,zero
  800668:	1000041e 	bne	r2,zero,80067c <tick+0xb4>
         VP = 0;
  80066c:	d0271fc5 	stb	zero,-25473(gp)
         AP = 0;
  800670:	d0272085 	stb	zero,-25470(gp)
         StartRI = 0;
  800674:	d0272045 	stb	zero,-25471(gp)
         StartAVI = 0;
  800678:	d0271dc5 	stb	zero,-25481(gp)
      }
      g9 =(PRE_g8);
  80067c:	d0a72643 	ldbu	r2,-25447(gp)
  800680:	d0a72305 	stb	r2,-25460(gp)
      _cg9 = AS;
  800684:	d0a72003 	ldbu	r2,-25472(gp)
  800688:	d0a72bc5 	stb	r2,-25425(gp)
      g15 =(g9&&(!(_cg9)));
  80068c:	d0a72303 	ldbu	r2,-25460(gp)
  800690:	10803fcc 	andi	r2,r2,255
  800694:	1080201c 	xori	r2,r2,128
  800698:	10bfe004 	addi	r2,r2,-128
  80069c:	1005003a 	cmpeq	r2,r2,zero
  8006a0:	1000091e 	bne	r2,zero,8006c8 <tick+0x100>
  8006a4:	d0a72bc3 	ldbu	r2,-25425(gp)
  8006a8:	10803fcc 	andi	r2,r2,255
  8006ac:	1080201c 	xori	r2,r2,128
  8006b0:	10bfe004 	addi	r2,r2,-128
  8006b4:	1004c03a 	cmpne	r2,r2,zero
  8006b8:	1000031e 	bne	r2,zero,8006c8 <tick+0x100>
  8006bc:	00800044 	movi	r2,1
  8006c0:	e0bffe15 	stw	r2,-8(fp)
  8006c4:	00000106 	br	8006cc <tick+0x104>
  8006c8:	e03ffe15 	stw	zero,-8(fp)
  8006cc:	e0fffe17 	ldw	r3,-8(fp)
  8006d0:	1805883a 	mov	r2,r3
  8006d4:	d0a72985 	stb	r2,-25434(gp)
      _cg15 = AEI_t;
  8006d8:	d0a71d83 	ldbu	r2,-25482(gp)
  8006dc:	d0a72505 	stb	r2,-25452(gp)
      g17 =(g15&&(!(_cg15)));
  8006e0:	d0a72983 	ldbu	r2,-25434(gp)
  8006e4:	10803fcc 	andi	r2,r2,255
  8006e8:	1080201c 	xori	r2,r2,128
  8006ec:	10bfe004 	addi	r2,r2,-128
  8006f0:	1005003a 	cmpeq	r2,r2,zero
  8006f4:	1000091e 	bne	r2,zero,80071c <tick+0x154>
  8006f8:	d0a72503 	ldbu	r2,-25452(gp)
  8006fc:	10803fcc 	andi	r2,r2,255
  800700:	1080201c 	xori	r2,r2,128
  800704:	10bfe004 	addi	r2,r2,-128
  800708:	1004c03a 	cmpne	r2,r2,zero
  80070c:	1000031e 	bne	r2,zero,80071c <tick+0x154>
  800710:	00800044 	movi	r2,1
  800714:	e0bffd15 	stw	r2,-12(fp)
  800718:	00000106 	br	800720 <tick+0x158>
  80071c:	e03ffd15 	stw	zero,-12(fp)
  800720:	e0fffd17 	ldw	r3,-12(fp)
  800724:	1805883a 	mov	r2,r3
  800728:	d0a72605 	stb	r2,-25448(gp)
      _cg17 = LRI_t;
  80072c:	d0a720c3 	ldbu	r2,-25469(gp)
  800730:	d0a72c45 	stb	r2,-25423(gp)
      g18 =(g17&&_cg17);
  800734:	d0a72603 	ldbu	r2,-25448(gp)
  800738:	10803fcc 	andi	r2,r2,255
  80073c:	1080201c 	xori	r2,r2,128
  800740:	10bfe004 	addi	r2,r2,-128
  800744:	1005003a 	cmpeq	r2,r2,zero
  800748:	1000091e 	bne	r2,zero,800770 <tick+0x1a8>
  80074c:	d0a72c43 	ldbu	r2,-25423(gp)
  800750:	10803fcc 	andi	r2,r2,255
  800754:	1080201c 	xori	r2,r2,128
  800758:	10bfe004 	addi	r2,r2,-128
  80075c:	1005003a 	cmpeq	r2,r2,zero
  800760:	1000031e 	bne	r2,zero,800770 <tick+0x1a8>
  800764:	00800044 	movi	r2,1
  800768:	e0bffc15 	stw	r2,-16(fp)
  80076c:	00000106 	br	800774 <tick+0x1ac>
  800770:	e03ffc15 	stw	zero,-16(fp)
  800774:	e0fffc17 	ldw	r3,-16(fp)
  800778:	1805883a 	mov	r2,r3
  80077c:	d0a72685 	stb	r2,-25446(gp)
      if(g18){
  800780:	d0a72683 	ldbu	r2,-25446(gp)
  800784:	10803fcc 	andi	r2,r2,255
  800788:	1080201c 	xori	r2,r2,128
  80078c:	10bfe004 	addi	r2,r2,-128
  800790:	1005003a 	cmpeq	r2,r2,zero
  800794:	1000051e 	bne	r2,zero,8007ac <tick+0x1e4>
    	  printf("VP\n");
  800798:	01002074 	movhi	r4,129
  80079c:	21222104 	addi	r4,r4,-30588
  8007a0:	08020300 	call	802030 <puts>
         VP =(VP||1);
  8007a4:	00800044 	movi	r2,1
  8007a8:	d0a71fc5 	stb	r2,-25473(gp)
      }
      g12 =(PRE_g11);
  8007ac:	d0a72a03 	ldbu	r2,-25432(gp)
  8007b0:	d0a725c5 	stb	r2,-25449(gp)
      _cg12 = VS;
  8007b4:	d0a71d43 	ldbu	r2,-25483(gp)
  8007b8:	d0a72545 	stb	r2,-25451(gp)
      g23 =(PRE_g22);
  8007bc:	d0a72903 	ldbu	r2,-25436(gp)
  8007c0:	d0a72845 	stb	r2,-25439(gp)
      _cg23 = PVARP_t;
  8007c4:	d0a71f03 	ldbu	r2,-25476(gp)
  8007c8:	d0a72e85 	stb	r2,-25414(gp)
      g24 =(g23&&(!(_cg23)));
  8007cc:	d0a72843 	ldbu	r2,-25439(gp)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	1080201c 	xori	r2,r2,128
  8007d8:	10bfe004 	addi	r2,r2,-128
  8007dc:	1005003a 	cmpeq	r2,r2,zero
  8007e0:	1000091e 	bne	r2,zero,800808 <tick+0x240>
  8007e4:	d0a72e83 	ldbu	r2,-25414(gp)
  8007e8:	10803fcc 	andi	r2,r2,255
  8007ec:	1080201c 	xori	r2,r2,128
  8007f0:	10bfe004 	addi	r2,r2,-128
  8007f4:	1004c03a 	cmpne	r2,r2,zero
  8007f8:	1000031e 	bne	r2,zero,800808 <tick+0x240>
  8007fc:	00800044 	movi	r2,1
  800800:	e0bffb15 	stw	r2,-20(fp)
  800804:	00000106 	br	80080c <tick+0x244>
  800808:	e03ffb15 	stw	zero,-20(fp)
  80080c:	e0fffb17 	ldw	r3,-20(fp)
  800810:	1805883a 	mov	r2,r3
  800814:	d0a72f45 	stb	r2,-25411(gp)
      _cg24 = VS;
  800818:	d0a71d43 	ldbu	r2,-25483(gp)
  80081c:	d0a72d05 	stb	r2,-25420(gp)
      g13 =(g12&&(!(_cg12)));
  800820:	d0a725c3 	ldbu	r2,-25449(gp)
  800824:	10803fcc 	andi	r2,r2,255
  800828:	1080201c 	xori	r2,r2,128
  80082c:	10bfe004 	addi	r2,r2,-128
  800830:	1005003a 	cmpeq	r2,r2,zero
  800834:	1000091e 	bne	r2,zero,80085c <tick+0x294>
  800838:	d0a72543 	ldbu	r2,-25451(gp)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	1004c03a 	cmpne	r2,r2,zero
  80084c:	1000031e 	bne	r2,zero,80085c <tick+0x294>
  800850:	00800044 	movi	r2,1
  800854:	e0bffa15 	stw	r2,-24(fp)
  800858:	00000106 	br	800860 <tick+0x298>
  80085c:	e03ffa15 	stw	zero,-24(fp)
  800860:	e0fffa17 	ldw	r3,-24(fp)
  800864:	1805883a 	mov	r2,r3
  800868:	d0a72a85 	stb	r2,-25430(gp)
      _cg13 =((AVI_t&&URI_t)||LRI_t);
  80086c:	d0a71f83 	ldbu	r2,-25474(gp)
  800870:	10803fcc 	andi	r2,r2,255
  800874:	1080201c 	xori	r2,r2,128
  800878:	10bfe004 	addi	r2,r2,-128
  80087c:	1005003a 	cmpeq	r2,r2,zero
  800880:	1000061e 	bne	r2,zero,80089c <tick+0x2d4>
  800884:	d0a71d03 	ldbu	r2,-25484(gp)
  800888:	10803fcc 	andi	r2,r2,255
  80088c:	1080201c 	xori	r2,r2,128
  800890:	10bfe004 	addi	r2,r2,-128
  800894:	1004c03a 	cmpne	r2,r2,zero
  800898:	1000061e 	bne	r2,zero,8008b4 <tick+0x2ec>
  80089c:	d0a720c3 	ldbu	r2,-25469(gp)
  8008a0:	10803fcc 	andi	r2,r2,255
  8008a4:	1080201c 	xori	r2,r2,128
  8008a8:	10bfe004 	addi	r2,r2,-128
  8008ac:	1005003a 	cmpeq	r2,r2,zero
  8008b0:	1000031e 	bne	r2,zero,8008c0 <tick+0x2f8>
  8008b4:	00800044 	movi	r2,1
  8008b8:	e0bff915 	stw	r2,-28(fp)
  8008bc:	00000106 	br	8008c4 <tick+0x2fc>
  8008c0:	e03ff915 	stw	zero,-28(fp)
  8008c4:	e0fff917 	ldw	r3,-28(fp)
  8008c8:	1805883a 	mov	r2,r3
  8008cc:	d0a72b85 	stb	r2,-25426(gp)
      g14 =(g13&&_cg13);
  8008d0:	d0a72a83 	ldbu	r2,-25430(gp)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	1005003a 	cmpeq	r2,r2,zero
  8008e4:	1000091e 	bne	r2,zero,80090c <tick+0x344>
  8008e8:	d0a72b83 	ldbu	r2,-25426(gp)
  8008ec:	10803fcc 	andi	r2,r2,255
  8008f0:	1080201c 	xori	r2,r2,128
  8008f4:	10bfe004 	addi	r2,r2,-128
  8008f8:	1005003a 	cmpeq	r2,r2,zero
  8008fc:	1000031e 	bne	r2,zero,80090c <tick+0x344>
  800900:	00800044 	movi	r2,1
  800904:	e0bff815 	stw	r2,-32(fp)
  800908:	00000106 	br	800910 <tick+0x348>
  80090c:	e03ff815 	stw	zero,-32(fp)
  800910:	e0fff817 	ldw	r3,-32(fp)
  800914:	1805883a 	mov	r2,r3
  800918:	d0a72885 	stb	r2,-25438(gp)
      if(g14){
  80091c:	d0a72883 	ldbu	r2,-25438(gp)
  800920:	10803fcc 	andi	r2,r2,255
  800924:	1080201c 	xori	r2,r2,128
  800928:	10bfe004 	addi	r2,r2,-128
  80092c:	1005003a 	cmpeq	r2,r2,zero
  800930:	1000021e 	bne	r2,zero,80093c <tick+0x374>
         VP =(VP||1);
  800934:	00800044 	movi	r2,1
  800938:	d0a71fc5 	stb	r2,-25473(gp)
      }
      g2 =(g18||(g12&&_cg12)||g1||(g24&&_cg24)||g14);
  80093c:	d0a72683 	ldbu	r2,-25446(gp)
  800940:	10803fcc 	andi	r2,r2,255
  800944:	1080201c 	xori	r2,r2,128
  800948:	10bfe004 	addi	r2,r2,-128
  80094c:	1004c03a 	cmpne	r2,r2,zero
  800950:	1000241e 	bne	r2,zero,8009e4 <tick+0x41c>
  800954:	d0a725c3 	ldbu	r2,-25449(gp)
  800958:	10803fcc 	andi	r2,r2,255
  80095c:	1080201c 	xori	r2,r2,128
  800960:	10bfe004 	addi	r2,r2,-128
  800964:	1005003a 	cmpeq	r2,r2,zero
  800968:	1000061e 	bne	r2,zero,800984 <tick+0x3bc>
  80096c:	d0a72543 	ldbu	r2,-25451(gp)
  800970:	10803fcc 	andi	r2,r2,255
  800974:	1080201c 	xori	r2,r2,128
  800978:	10bfe004 	addi	r2,r2,-128
  80097c:	1004c03a 	cmpne	r2,r2,zero
  800980:	1000181e 	bne	r2,zero,8009e4 <tick+0x41c>
  800984:	d0a72583 	ldbu	r2,-25450(gp)
  800988:	10803fcc 	andi	r2,r2,255
  80098c:	1080201c 	xori	r2,r2,128
  800990:	10bfe004 	addi	r2,r2,-128
  800994:	1004c03a 	cmpne	r2,r2,zero
  800998:	1000121e 	bne	r2,zero,8009e4 <tick+0x41c>
  80099c:	d0a72f43 	ldbu	r2,-25411(gp)
  8009a0:	10803fcc 	andi	r2,r2,255
  8009a4:	1080201c 	xori	r2,r2,128
  8009a8:	10bfe004 	addi	r2,r2,-128
  8009ac:	1005003a 	cmpeq	r2,r2,zero
  8009b0:	1000061e 	bne	r2,zero,8009cc <tick+0x404>
  8009b4:	d0a72d03 	ldbu	r2,-25420(gp)
  8009b8:	10803fcc 	andi	r2,r2,255
  8009bc:	1080201c 	xori	r2,r2,128
  8009c0:	10bfe004 	addi	r2,r2,-128
  8009c4:	1004c03a 	cmpne	r2,r2,zero
  8009c8:	1000061e 	bne	r2,zero,8009e4 <tick+0x41c>
  8009cc:	d0a72883 	ldbu	r2,-25438(gp)
  8009d0:	10803fcc 	andi	r2,r2,255
  8009d4:	1080201c 	xori	r2,r2,128
  8009d8:	10bfe004 	addi	r2,r2,-128
  8009dc:	1005003a 	cmpeq	r2,r2,zero
  8009e0:	1000031e 	bne	r2,zero,8009f0 <tick+0x428>
  8009e4:	00800044 	movi	r2,1
  8009e8:	e0bff715 	stw	r2,-36(fp)
  8009ec:	00000106 	br	8009f4 <tick+0x42c>
  8009f0:	e03ff715 	stw	zero,-36(fp)
  8009f4:	e0fff717 	ldw	r3,-36(fp)
  8009f8:	1805883a 	mov	r2,r3
  8009fc:	d0a72785 	stb	r2,-25442(gp)
      g3 =(PRE_g2);
  800a00:	d0a72103 	ldbu	r2,-25468(gp)
  800a04:	d0a72285 	stb	r2,-25462(gp)
      g3b = g3;
  800a08:	d0a72283 	ldbu	r2,-25462(gp)
  800a0c:	d0a72145 	stb	r2,-25467(gp)
      if(g3b){
  800a10:	d0a72143 	ldbu	r2,-25467(gp)
  800a14:	10803fcc 	andi	r2,r2,255
  800a18:	1080201c 	xori	r2,r2,128
  800a1c:	10bfe004 	addi	r2,r2,-128
  800a20:	1005003a 	cmpeq	r2,r2,zero
  800a24:	1000051e 	bne	r2,zero,800a3c <tick+0x474>
    	  printf("StartRI\n");
  800a28:	01002074 	movhi	r4,129
  800a2c:	21222204 	addi	r4,r4,-30584
  800a30:	08020300 	call	802030 <puts>
         StartRI =(StartRI||1);
  800a34:	00800044 	movi	r2,1
  800a38:	d0a72045 	stb	r2,-25471(gp)
      }
      g5 =(PRE_g4);
  800a3c:	d0a72803 	ldbu	r2,-25440(gp)
  800a40:	d0a72745 	stb	r2,-25443(gp)
      _cg5 = PVARP_t;
  800a44:	d0a71f03 	ldbu	r2,-25476(gp)
  800a48:	d0a72945 	stb	r2,-25435(gp)
      g21 =(g5&&(!(_cg5)));
  800a4c:	d0a72743 	ldbu	r2,-25443(gp)
  800a50:	10803fcc 	andi	r2,r2,255
  800a54:	1080201c 	xori	r2,r2,128
  800a58:	10bfe004 	addi	r2,r2,-128
  800a5c:	1005003a 	cmpeq	r2,r2,zero
  800a60:	1000091e 	bne	r2,zero,800a88 <tick+0x4c0>
  800a64:	d0a72943 	ldbu	r2,-25435(gp)
  800a68:	10803fcc 	andi	r2,r2,255
  800a6c:	1080201c 	xori	r2,r2,128
  800a70:	10bfe004 	addi	r2,r2,-128
  800a74:	1004c03a 	cmpne	r2,r2,zero
  800a78:	1000031e 	bne	r2,zero,800a88 <tick+0x4c0>
  800a7c:	00800044 	movi	r2,1
  800a80:	e0bff615 	stw	r2,-40(fp)
  800a84:	00000106 	br	800a8c <tick+0x4c4>
  800a88:	e03ff615 	stw	zero,-40(fp)
  800a8c:	e0fff617 	ldw	r3,-40(fp)
  800a90:	1805883a 	mov	r2,r3
  800a94:	d0a72705 	stb	r2,-25444(gp)
      _cg21 = VRP_t;
  800a98:	d0a71f43 	ldbu	r2,-25475(gp)
  800a9c:	d0a726c5 	stb	r2,-25445(gp)
      g4 =((g21&&(!(_cg21)))||g3b);
  800aa0:	d0a72703 	ldbu	r2,-25444(gp)
  800aa4:	10803fcc 	andi	r2,r2,255
  800aa8:	1080201c 	xori	r2,r2,128
  800aac:	10bfe004 	addi	r2,r2,-128
  800ab0:	1005003a 	cmpeq	r2,r2,zero
  800ab4:	1000061e 	bne	r2,zero,800ad0 <tick+0x508>
  800ab8:	d0a726c3 	ldbu	r2,-25445(gp)
  800abc:	10803fcc 	andi	r2,r2,255
  800ac0:	1080201c 	xori	r2,r2,128
  800ac4:	10bfe004 	addi	r2,r2,-128
  800ac8:	1005003a 	cmpeq	r2,r2,zero
  800acc:	1000061e 	bne	r2,zero,800ae8 <tick+0x520>
  800ad0:	d0a72143 	ldbu	r2,-25467(gp)
  800ad4:	10803fcc 	andi	r2,r2,255
  800ad8:	1080201c 	xori	r2,r2,128
  800adc:	10bfe004 	addi	r2,r2,-128
  800ae0:	1005003a 	cmpeq	r2,r2,zero
  800ae4:	1000031e 	bne	r2,zero,800af4 <tick+0x52c>
  800ae8:	00800044 	movi	r2,1
  800aec:	e0bff515 	stw	r2,-44(fp)
  800af0:	00000106 	br	800af8 <tick+0x530>
  800af4:	e03ff515 	stw	zero,-44(fp)
  800af8:	e0fff517 	ldw	r3,-44(fp)
  800afc:	1805883a 	mov	r2,r3
  800b00:	d0a72185 	stb	r2,-25466(gp)
      g7 =(PRE_g6);
  800b04:	d0a728c3 	ldbu	r2,-25437(gp)
  800b08:	d0a727c5 	stb	r2,-25441(gp)
      _cg7 = VRP_t;
  800b0c:	d0a71f43 	ldbu	r2,-25475(gp)
  800b10:	d0a72345 	stb	r2,-25459(gp)
      g19 =(g7&&(!(_cg7)));
  800b14:	d0a727c3 	ldbu	r2,-25441(gp)
  800b18:	10803fcc 	andi	r2,r2,255
  800b1c:	1080201c 	xori	r2,r2,128
  800b20:	10bfe004 	addi	r2,r2,-128
  800b24:	1005003a 	cmpeq	r2,r2,zero
  800b28:	1000091e 	bne	r2,zero,800b50 <tick+0x588>
  800b2c:	d0a72343 	ldbu	r2,-25459(gp)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	1004c03a 	cmpne	r2,r2,zero
  800b40:	1000031e 	bne	r2,zero,800b50 <tick+0x588>
  800b44:	00800044 	movi	r2,1
  800b48:	e0bff415 	stw	r2,-48(fp)
  800b4c:	00000106 	br	800b54 <tick+0x58c>
  800b50:	e03ff415 	stw	zero,-48(fp)
  800b54:	e0fff417 	ldw	r3,-48(fp)
  800b58:	1805883a 	mov	r2,r3
  800b5c:	d0a721c5 	stb	r2,-25465(gp)
      _cg19 = AS;
  800b60:	d0a72003 	ldbu	r2,-25472(gp)
  800b64:	d0a72b45 	stb	r2,-25427(gp)
      g6 =((g5&&_cg5)||(g19&&(!(_cg19))));
  800b68:	d0a72743 	ldbu	r2,-25443(gp)
  800b6c:	10803fcc 	andi	r2,r2,255
  800b70:	1080201c 	xori	r2,r2,128
  800b74:	10bfe004 	addi	r2,r2,-128
  800b78:	1005003a 	cmpeq	r2,r2,zero
  800b7c:	1000061e 	bne	r2,zero,800b98 <tick+0x5d0>
  800b80:	d0a72943 	ldbu	r2,-25435(gp)
  800b84:	10803fcc 	andi	r2,r2,255
  800b88:	1080201c 	xori	r2,r2,128
  800b8c:	10bfe004 	addi	r2,r2,-128
  800b90:	1004c03a 	cmpne	r2,r2,zero
  800b94:	10000c1e 	bne	r2,zero,800bc8 <tick+0x600>
  800b98:	d0a721c3 	ldbu	r2,-25465(gp)
  800b9c:	10803fcc 	andi	r2,r2,255
  800ba0:	1080201c 	xori	r2,r2,128
  800ba4:	10bfe004 	addi	r2,r2,-128
  800ba8:	1005003a 	cmpeq	r2,r2,zero
  800bac:	1000091e 	bne	r2,zero,800bd4 <tick+0x60c>
  800bb0:	d0a72b43 	ldbu	r2,-25427(gp)
  800bb4:	10803fcc 	andi	r2,r2,255
  800bb8:	1080201c 	xori	r2,r2,128
  800bbc:	10bfe004 	addi	r2,r2,-128
  800bc0:	1004c03a 	cmpne	r2,r2,zero
  800bc4:	1000031e 	bne	r2,zero,800bd4 <tick+0x60c>
  800bc8:	00800044 	movi	r2,1
  800bcc:	e0bff315 	stw	r2,-52(fp)
  800bd0:	00000106 	br	800bd8 <tick+0x610>
  800bd4:	e03ff315 	stw	zero,-52(fp)
  800bd8:	e0fff317 	ldw	r3,-52(fp)
  800bdc:	1805883a 	mov	r2,r3
  800be0:	d0a72b05 	stb	r2,-25428(gp)
      g8 =((g7&&_cg7)||(g23&&_cg23)||(g17&&(!(_cg17))));
  800be4:	d0a727c3 	ldbu	r2,-25441(gp)
  800be8:	10803fcc 	andi	r2,r2,255
  800bec:	1080201c 	xori	r2,r2,128
  800bf0:	10bfe004 	addi	r2,r2,-128
  800bf4:	1005003a 	cmpeq	r2,r2,zero
  800bf8:	1000061e 	bne	r2,zero,800c14 <tick+0x64c>
  800bfc:	d0a72343 	ldbu	r2,-25459(gp)
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	1080201c 	xori	r2,r2,128
  800c08:	10bfe004 	addi	r2,r2,-128
  800c0c:	1004c03a 	cmpne	r2,r2,zero
  800c10:	1000181e 	bne	r2,zero,800c74 <tick+0x6ac>
  800c14:	d0a72843 	ldbu	r2,-25439(gp)
  800c18:	10803fcc 	andi	r2,r2,255
  800c1c:	1080201c 	xori	r2,r2,128
  800c20:	10bfe004 	addi	r2,r2,-128
  800c24:	1005003a 	cmpeq	r2,r2,zero
  800c28:	1000061e 	bne	r2,zero,800c44 <tick+0x67c>
  800c2c:	d0a72e83 	ldbu	r2,-25414(gp)
  800c30:	10803fcc 	andi	r2,r2,255
  800c34:	1080201c 	xori	r2,r2,128
  800c38:	10bfe004 	addi	r2,r2,-128
  800c3c:	1004c03a 	cmpne	r2,r2,zero
  800c40:	10000c1e 	bne	r2,zero,800c74 <tick+0x6ac>
  800c44:	d0a72603 	ldbu	r2,-25448(gp)
  800c48:	10803fcc 	andi	r2,r2,255
  800c4c:	1080201c 	xori	r2,r2,128
  800c50:	10bfe004 	addi	r2,r2,-128
  800c54:	1005003a 	cmpeq	r2,r2,zero
  800c58:	1000091e 	bne	r2,zero,800c80 <tick+0x6b8>
  800c5c:	d0a72c43 	ldbu	r2,-25423(gp)
  800c60:	10803fcc 	andi	r2,r2,255
  800c64:	1080201c 	xori	r2,r2,128
  800c68:	10bfe004 	addi	r2,r2,-128
  800c6c:	1004c03a 	cmpne	r2,r2,zero
  800c70:	1000031e 	bne	r2,zero,800c80 <tick+0x6b8>
  800c74:	00800044 	movi	r2,1
  800c78:	e0bff215 	stw	r2,-56(fp)
  800c7c:	00000106 	br	800c84 <tick+0x6bc>
  800c80:	e03ff215 	stw	zero,-56(fp)
  800c84:	e0fff217 	ldw	r3,-56(fp)
  800c88:	1805883a 	mov	r2,r3
  800c8c:	d0a72ac5 	stb	r2,-25429(gp)
      g10 =(g9&&_cg9);
  800c90:	d0a72303 	ldbu	r2,-25460(gp)
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	1080201c 	xori	r2,r2,128
  800c9c:	10bfe004 	addi	r2,r2,-128
  800ca0:	1005003a 	cmpeq	r2,r2,zero
  800ca4:	1000091e 	bne	r2,zero,800ccc <tick+0x704>
  800ca8:	d0a72bc3 	ldbu	r2,-25425(gp)
  800cac:	10803fcc 	andi	r2,r2,255
  800cb0:	1080201c 	xori	r2,r2,128
  800cb4:	10bfe004 	addi	r2,r2,-128
  800cb8:	1005003a 	cmpeq	r2,r2,zero
  800cbc:	1000031e 	bne	r2,zero,800ccc <tick+0x704>
  800cc0:	00800044 	movi	r2,1
  800cc4:	e0bff115 	stw	r2,-60(fp)
  800cc8:	00000106 	br	800cd0 <tick+0x708>
  800ccc:	e03ff115 	stw	zero,-60(fp)
  800cd0:	e0fff117 	ldw	r3,-60(fp)
  800cd4:	1805883a 	mov	r2,r3
  800cd8:	d0a72f85 	stb	r2,-25410(gp)
      if(g10){
  800cdc:	d0a72f83 	ldbu	r2,-25410(gp)
  800ce0:	10803fcc 	andi	r2,r2,255
  800ce4:	1080201c 	xori	r2,r2,128
  800ce8:	10bfe004 	addi	r2,r2,-128
  800cec:	1005003a 	cmpeq	r2,r2,zero
  800cf0:	1000051e 	bne	r2,zero,800d08 <tick+0x740>
    	  printf("StartAVI\n");
  800cf4:	01002074 	movhi	r4,129
  800cf8:	21222404 	addi	r4,r4,-30576
  800cfc:	08020300 	call	802030 <puts>
         StartAVI =(StartAVI||1);
  800d00:	00800044 	movi	r2,1
  800d04:	d0a71dc5 	stb	r2,-25481(gp)
      }
      g16 =(g15&&_cg15);
  800d08:	d0a72983 	ldbu	r2,-25434(gp)
  800d0c:	10803fcc 	andi	r2,r2,255
  800d10:	1080201c 	xori	r2,r2,128
  800d14:	10bfe004 	addi	r2,r2,-128
  800d18:	1005003a 	cmpeq	r2,r2,zero
  800d1c:	1000091e 	bne	r2,zero,800d44 <tick+0x77c>
  800d20:	d0a72503 	ldbu	r2,-25452(gp)
  800d24:	10803fcc 	andi	r2,r2,255
  800d28:	1080201c 	xori	r2,r2,128
  800d2c:	10bfe004 	addi	r2,r2,-128
  800d30:	1005003a 	cmpeq	r2,r2,zero
  800d34:	1000031e 	bne	r2,zero,800d44 <tick+0x77c>
  800d38:	00800044 	movi	r2,1
  800d3c:	e0bff015 	stw	r2,-64(fp)
  800d40:	00000106 	br	800d48 <tick+0x780>
  800d44:	e03ff015 	stw	zero,-64(fp)
  800d48:	e0fff017 	ldw	r3,-64(fp)
  800d4c:	1805883a 	mov	r2,r3
  800d50:	d0a72cc5 	stb	r2,-25421(gp)
      if(g16){
  800d54:	d0a72cc3 	ldbu	r2,-25421(gp)
  800d58:	10803fcc 	andi	r2,r2,255
  800d5c:	1080201c 	xori	r2,r2,128
  800d60:	10bfe004 	addi	r2,r2,-128
  800d64:	1005003a 	cmpeq	r2,r2,zero
  800d68:	1000051e 	bne	r2,zero,800d80 <tick+0x7b8>
    	  printf("APgen\n");
  800d6c:	01002074 	movhi	r4,129
  800d70:	21222704 	addi	r4,r4,-30564
  800d74:	08020300 	call	802030 <puts>
         AP =(AP||1);
  800d78:	00800044 	movi	r2,1
  800d7c:	d0a72085 	stb	r2,-25470(gp)
      }
      g16b = g16;
  800d80:	d0a72cc3 	ldbu	r2,-25421(gp)
  800d84:	d0a72e45 	stb	r2,-25415(gp)
      if(g16b){
  800d88:	d0a72e43 	ldbu	r2,-25415(gp)
  800d8c:	10803fcc 	andi	r2,r2,255
  800d90:	1080201c 	xori	r2,r2,128
  800d94:	10bfe004 	addi	r2,r2,-128
  800d98:	1005003a 	cmpeq	r2,r2,zero
  800d9c:	1000051e 	bne	r2,zero,800db4 <tick+0x7ec>
    	  printf("startAVI2\n");
  800da0:	01002074 	movhi	r4,129
  800da4:	21222904 	addi	r4,r4,-30556
  800da8:	08020300 	call	802030 <puts>
         StartAVI =(StartAVI||1);
  800dac:	00800044 	movi	r2,1
  800db0:	d0a71dc5 	stb	r2,-25481(gp)
      }
      g20 =(g19&&_cg19);
  800db4:	d0a721c3 	ldbu	r2,-25465(gp)
  800db8:	10803fcc 	andi	r2,r2,255
  800dbc:	1080201c 	xori	r2,r2,128
  800dc0:	10bfe004 	addi	r2,r2,-128
  800dc4:	1005003a 	cmpeq	r2,r2,zero
  800dc8:	1000091e 	bne	r2,zero,800df0 <tick+0x828>
  800dcc:	d0a72b43 	ldbu	r2,-25427(gp)
  800dd0:	10803fcc 	andi	r2,r2,255
  800dd4:	1080201c 	xori	r2,r2,128
  800dd8:	10bfe004 	addi	r2,r2,-128
  800ddc:	1005003a 	cmpeq	r2,r2,zero
  800de0:	1000031e 	bne	r2,zero,800df0 <tick+0x828>
  800de4:	00800044 	movi	r2,1
  800de8:	e0bfef15 	stw	r2,-68(fp)
  800dec:	00000106 	br	800df4 <tick+0x82c>
  800df0:	e03fef15 	stw	zero,-68(fp)
  800df4:	e0ffef17 	ldw	r3,-68(fp)
  800df8:	1805883a 	mov	r2,r3
  800dfc:	d0a72a45 	stb	r2,-25431(gp)
      if(g20){
  800e00:	d0a72a43 	ldbu	r2,-25431(gp)
  800e04:	10803fcc 	andi	r2,r2,255
  800e08:	1080201c 	xori	r2,r2,128
  800e0c:	10bfe004 	addi	r2,r2,-128
  800e10:	1005003a 	cmpeq	r2,r2,zero
  800e14:	1000051e 	bne	r2,zero,800e2c <tick+0x864>
    	  printf("startAVI3\n");
  800e18:	01002074 	movhi	r4,129
  800e1c:	21222c04 	addi	r4,r4,-30544
  800e20:	08020300 	call	802030 <puts>
         StartAVI =(StartAVI||1);
  800e24:	00800044 	movi	r2,1
  800e28:	d0a71dc5 	stb	r2,-25481(gp)
      }
      g11 =(g16b||g10||g20||(g13&&(!(_cg13))));
  800e2c:	d0a72e43 	ldbu	r2,-25415(gp)
  800e30:	10803fcc 	andi	r2,r2,255
  800e34:	1080201c 	xori	r2,r2,128
  800e38:	10bfe004 	addi	r2,r2,-128
  800e3c:	1004c03a 	cmpne	r2,r2,zero
  800e40:	1000181e 	bne	r2,zero,800ea4 <tick+0x8dc>
  800e44:	d0a72f83 	ldbu	r2,-25410(gp)
  800e48:	10803fcc 	andi	r2,r2,255
  800e4c:	1080201c 	xori	r2,r2,128
  800e50:	10bfe004 	addi	r2,r2,-128
  800e54:	1004c03a 	cmpne	r2,r2,zero
  800e58:	1000121e 	bne	r2,zero,800ea4 <tick+0x8dc>
  800e5c:	d0a72a43 	ldbu	r2,-25431(gp)
  800e60:	10803fcc 	andi	r2,r2,255
  800e64:	1080201c 	xori	r2,r2,128
  800e68:	10bfe004 	addi	r2,r2,-128
  800e6c:	1004c03a 	cmpne	r2,r2,zero
  800e70:	10000c1e 	bne	r2,zero,800ea4 <tick+0x8dc>
  800e74:	d0a72a83 	ldbu	r2,-25430(gp)
  800e78:	10803fcc 	andi	r2,r2,255
  800e7c:	1080201c 	xori	r2,r2,128
  800e80:	10bfe004 	addi	r2,r2,-128
  800e84:	1005003a 	cmpeq	r2,r2,zero
  800e88:	1000091e 	bne	r2,zero,800eb0 <tick+0x8e8>
  800e8c:	d0a72b83 	ldbu	r2,-25426(gp)
  800e90:	10803fcc 	andi	r2,r2,255
  800e94:	1080201c 	xori	r2,r2,128
  800e98:	10bfe004 	addi	r2,r2,-128
  800e9c:	1004c03a 	cmpne	r2,r2,zero
  800ea0:	1000031e 	bne	r2,zero,800eb0 <tick+0x8e8>
  800ea4:	00800044 	movi	r2,1
  800ea8:	e0bfee15 	stw	r2,-72(fp)
  800eac:	00000106 	br	800eb4 <tick+0x8ec>
  800eb0:	e03fee15 	stw	zero,-72(fp)
  800eb4:	e0ffee17 	ldw	r3,-72(fp)
  800eb8:	1805883a 	mov	r2,r3
  800ebc:	d0a72d85 	stb	r2,-25418(gp)
      g22 =((g21&&_cg21)||(g24&&(!(_cg24))));
  800ec0:	d0a72703 	ldbu	r2,-25444(gp)
  800ec4:	10803fcc 	andi	r2,r2,255
  800ec8:	1080201c 	xori	r2,r2,128
  800ecc:	10bfe004 	addi	r2,r2,-128
  800ed0:	1005003a 	cmpeq	r2,r2,zero
  800ed4:	1000061e 	bne	r2,zero,800ef0 <tick+0x928>
  800ed8:	d0a726c3 	ldbu	r2,-25445(gp)
  800edc:	10803fcc 	andi	r2,r2,255
  800ee0:	1080201c 	xori	r2,r2,128
  800ee4:	10bfe004 	addi	r2,r2,-128
  800ee8:	1004c03a 	cmpne	r2,r2,zero
  800eec:	10000c1e 	bne	r2,zero,800f20 <tick+0x958>
  800ef0:	d0a72f43 	ldbu	r2,-25411(gp)
  800ef4:	10803fcc 	andi	r2,r2,255
  800ef8:	1080201c 	xori	r2,r2,128
  800efc:	10bfe004 	addi	r2,r2,-128
  800f00:	1005003a 	cmpeq	r2,r2,zero
  800f04:	1000091e 	bne	r2,zero,800f2c <tick+0x964>
  800f08:	d0a72d03 	ldbu	r2,-25420(gp)
  800f0c:	10803fcc 	andi	r2,r2,255
  800f10:	1080201c 	xori	r2,r2,128
  800f14:	10bfe004 	addi	r2,r2,-128
  800f18:	1004c03a 	cmpne	r2,r2,zero
  800f1c:	1000031e 	bne	r2,zero,800f2c <tick+0x964>
  800f20:	00800044 	movi	r2,1
  800f24:	e0bfed15 	stw	r2,-76(fp)
  800f28:	00000106 	br	800f30 <tick+0x968>
  800f2c:	e03fed15 	stw	zero,-76(fp)
  800f30:	e0ffed17 	ldw	r3,-76(fp)
  800f34:	1805883a 	mov	r2,r3
  800f38:	d0a72dc5 	stb	r2,-25417(gp)
      g25_e1 =(!((g3||g5||g7||g23||g9||g12)));
  800f3c:	d0a72283 	ldbu	r2,-25462(gp)
  800f40:	10803fcc 	andi	r2,r2,255
  800f44:	1080201c 	xori	r2,r2,128
  800f48:	10bfe004 	addi	r2,r2,-128
  800f4c:	1004c03a 	cmpne	r2,r2,zero
  800f50:	1000211e 	bne	r2,zero,800fd8 <tick+0xa10>
  800f54:	d0a72743 	ldbu	r2,-25443(gp)
  800f58:	10803fcc 	andi	r2,r2,255
  800f5c:	1080201c 	xori	r2,r2,128
  800f60:	10bfe004 	addi	r2,r2,-128
  800f64:	1004c03a 	cmpne	r2,r2,zero
  800f68:	10001b1e 	bne	r2,zero,800fd8 <tick+0xa10>
  800f6c:	d0a727c3 	ldbu	r2,-25441(gp)
  800f70:	10803fcc 	andi	r2,r2,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	1004c03a 	cmpne	r2,r2,zero
  800f80:	1000151e 	bne	r2,zero,800fd8 <tick+0xa10>
  800f84:	d0a72843 	ldbu	r2,-25439(gp)
  800f88:	10803fcc 	andi	r2,r2,255
  800f8c:	1080201c 	xori	r2,r2,128
  800f90:	10bfe004 	addi	r2,r2,-128
  800f94:	1004c03a 	cmpne	r2,r2,zero
  800f98:	10000f1e 	bne	r2,zero,800fd8 <tick+0xa10>
  800f9c:	d0a72303 	ldbu	r2,-25460(gp)
  800fa0:	10803fcc 	andi	r2,r2,255
  800fa4:	1080201c 	xori	r2,r2,128
  800fa8:	10bfe004 	addi	r2,r2,-128
  800fac:	1004c03a 	cmpne	r2,r2,zero
  800fb0:	1000091e 	bne	r2,zero,800fd8 <tick+0xa10>
  800fb4:	d0a725c3 	ldbu	r2,-25449(gp)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	1004c03a 	cmpne	r2,r2,zero
  800fc8:	1000031e 	bne	r2,zero,800fd8 <tick+0xa10>
  800fcc:	00800044 	movi	r2,1
  800fd0:	e0bfec15 	stw	r2,-80(fp)
  800fd4:	00000106 	br	800fdc <tick+0xa14>
  800fd8:	e03fec15 	stw	zero,-80(fp)
  800fdc:	e0ffec17 	ldw	r3,-80(fp)
  800fe0:	1805883a 	mov	r2,r3
  800fe4:	d0a72205 	stb	r2,-25464(gp)
      g29_e2 =(!(g28));
  800fe8:	d0a72e03 	ldbu	r2,-25416(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1080201c 	xori	r2,r2,128
  800ff4:	10bfe004 	addi	r2,r2,-128
  800ff8:	1005003a 	cmpeq	r2,r2,zero
  800ffc:	d0a72ec5 	stb	r2,-25413(gp)
   }
   PRE_g2 = g2;
  801000:	d0a72783 	ldbu	r2,-25442(gp)
  801004:	d0a72105 	stb	r2,-25468(gp)
   PRE_g4 = g4;
  801008:	d0a72183 	ldbu	r2,-25466(gp)
  80100c:	d0a72805 	stb	r2,-25440(gp)
   PRE_g6 = g6;
  801010:	d0a72b03 	ldbu	r2,-25428(gp)
  801014:	d0a728c5 	stb	r2,-25437(gp)
   PRE_g8 = g8;
  801018:	d0a72ac3 	ldbu	r2,-25429(gp)
  80101c:	d0a72645 	stb	r2,-25447(gp)
   PRE_g11 = g11;
  801020:	d0a72d83 	ldbu	r2,-25418(gp)
  801024:	d0a72a05 	stb	r2,-25432(gp)
   PRE_g22 = g22;
  801028:	d0a72dc3 	ldbu	r2,-25417(gp)
  80102c:	d0a72905 	stb	r2,-25436(gp)
   PRE_g27 = g27;
  801030:	d0a72243 	ldbu	r2,-25463(gp)
  801034:	d0a722c5 	stb	r2,-25461(gp)
   _PRE_GO = _GO;
  801038:	d0a729c3 	ldbu	r2,-25433(gp)
  80103c:	10803fcc 	andi	r2,r2,255
  801040:	1080201c 	xori	r2,r2,128
  801044:	10bfe004 	addi	r2,r2,-128
  801048:	d0a72415 	stw	r2,-25456(gp)
   return;
}
  80104c:	e037883a 	mov	sp,fp
  801050:	dfc00117 	ldw	ra,4(sp)
  801054:	df000017 	ldw	fp,0(sp)
  801058:	dec00204 	addi	sp,sp,8
  80105c:	f800283a 	ret

00801060 <_fopen_r>:
  801060:	defffa04 	addi	sp,sp,-24
  801064:	dcc00415 	stw	r19,16(sp)
  801068:	2827883a 	mov	r19,r5
  80106c:	300b883a 	mov	r5,r6
  801070:	d80d883a 	mov	r6,sp
  801074:	dc800315 	stw	r18,12(sp)
  801078:	dc400215 	stw	r17,8(sp)
  80107c:	dc000115 	stw	r16,4(sp)
  801080:	dfc00515 	stw	ra,20(sp)
  801084:	2021883a 	mov	r16,r4
  801088:	0802a2c0 	call	802a2c <__sflags>
  80108c:	1025883a 	mov	r18,r2
  801090:	8009883a 	mov	r4,r16
  801094:	0023883a 	mov	r17,zero
  801098:	1000081e 	bne	r2,zero,8010bc <_fopen_r+0x5c>
  80109c:	8805883a 	mov	r2,r17
  8010a0:	dfc00517 	ldw	ra,20(sp)
  8010a4:	dcc00417 	ldw	r19,16(sp)
  8010a8:	dc800317 	ldw	r18,12(sp)
  8010ac:	dc400217 	ldw	r17,8(sp)
  8010b0:	dc000117 	ldw	r16,4(sp)
  8010b4:	dec00604 	addi	sp,sp,24
  8010b8:	f800283a 	ret
  8010bc:	080293c0 	call	80293c <__sfp>
  8010c0:	1023883a 	mov	r17,r2
  8010c4:	980b883a 	mov	r5,r19
  8010c8:	8009883a 	mov	r4,r16
  8010cc:	01c06d84 	movi	r7,438
  8010d0:	103ff226 	beq	r2,zero,80109c <_fopen_r+0x3c>
  8010d4:	d9800017 	ldw	r6,0(sp)
  8010d8:	0801f180 	call	801f18 <_open_r>
  8010dc:	10001816 	blt	r2,zero,801140 <_fopen_r+0xe0>
  8010e0:	00c02034 	movhi	r3,128
  8010e4:	18c8c104 	addi	r3,r3,8964
  8010e8:	923fffcc 	andi	r8,r18,65535
  8010ec:	8880038d 	sth	r2,14(r17)
  8010f0:	00802034 	movhi	r2,128
  8010f4:	1088e004 	addi	r2,r2,9088
  8010f8:	88800815 	stw	r2,32(r17)
  8010fc:	88c00915 	stw	r3,36(r17)
  801100:	00802034 	movhi	r2,128
  801104:	1088a704 	addi	r2,r2,8860
  801108:	00c02034 	movhi	r3,128
  80110c:	18c8a504 	addi	r3,r3,8852
  801110:	4200400c 	andi	r8,r8,256
  801114:	8c80030d 	sth	r18,12(r17)
  801118:	8009883a 	mov	r4,r16
  80111c:	880b883a 	mov	r5,r17
  801120:	000d883a 	mov	r6,zero
  801124:	01c00084 	movi	r7,2
  801128:	88800a15 	stw	r2,40(r17)
  80112c:	88c00b15 	stw	r3,44(r17)
  801130:	8c400715 	stw	r17,28(r17)
  801134:	403fd926 	beq	r8,zero,80109c <_fopen_r+0x3c>
  801138:	08011700 	call	801170 <_fseek_r>
  80113c:	003fd706 	br	80109c <_fopen_r+0x3c>
  801140:	08027c40 	call	8027c4 <__sfp_lock_acquire>
  801144:	8800030d 	sth	zero,12(r17)
  801148:	08027c80 	call	8027c8 <__sfp_lock_release>
  80114c:	0023883a 	mov	r17,zero
  801150:	003fd206 	br	80109c <_fopen_r+0x3c>

00801154 <fopen>:
  801154:	01802074 	movhi	r6,129
  801158:	31a9e004 	addi	r6,r6,-22656
  80115c:	2007883a 	mov	r3,r4
  801160:	31000017 	ldw	r4,0(r6)
  801164:	280d883a 	mov	r6,r5
  801168:	180b883a 	mov	r5,r3
  80116c:	08010601 	jmpi	801060 <_fopen_r>

00801170 <_fseek_r>:
  801170:	deffe804 	addi	sp,sp,-96
  801174:	dd801515 	stw	r22,84(sp)
  801178:	dcc01215 	stw	r19,72(sp)
  80117c:	dc801115 	stw	r18,68(sp)
  801180:	dc000f15 	stw	r16,60(sp)
  801184:	dfc01715 	stw	ra,92(sp)
  801188:	ddc01615 	stw	r23,88(sp)
  80118c:	dd401415 	stw	r21,80(sp)
  801190:	dd001315 	stw	r20,76(sp)
  801194:	dc401015 	stw	r17,64(sp)
  801198:	2025883a 	mov	r18,r4
  80119c:	2821883a 	mov	r16,r5
  8011a0:	302d883a 	mov	r22,r6
  8011a4:	3827883a 	mov	r19,r7
  8011a8:	20000226 	beq	r4,zero,8011b4 <_fseek_r+0x44>
  8011ac:	20800e17 	ldw	r2,56(r4)
  8011b0:	10007826 	beq	r2,zero,801394 <_fseek_r+0x224>
  8011b4:	8080030b 	ldhu	r2,12(r16)
  8011b8:	00c04204 	movi	r3,264
  8011bc:	1080420c 	andi	r2,r2,264
  8011c0:	10c07926 	beq	r2,r3,8013a8 <_fseek_r+0x238>
  8011c4:	85400a17 	ldw	r21,40(r16)
  8011c8:	a800ea26 	beq	r21,zero,801574 <_fseek_r+0x404>
  8011cc:	00800044 	movi	r2,1
  8011d0:	98805f26 	beq	r19,r2,801350 <_fseek_r+0x1e0>
  8011d4:	00800084 	movi	r2,2
  8011d8:	98801026 	beq	r19,r2,80121c <_fseek_r+0xac>
  8011dc:	98000f26 	beq	r19,zero,80121c <_fseek_r+0xac>
  8011e0:	00800584 	movi	r2,22
  8011e4:	013fffc4 	movi	r4,-1
  8011e8:	90800015 	stw	r2,0(r18)
  8011ec:	2005883a 	mov	r2,r4
  8011f0:	dfc01717 	ldw	ra,92(sp)
  8011f4:	ddc01617 	ldw	r23,88(sp)
  8011f8:	dd801517 	ldw	r22,84(sp)
  8011fc:	dd401417 	ldw	r21,80(sp)
  801200:	dd001317 	ldw	r20,76(sp)
  801204:	dcc01217 	ldw	r19,72(sp)
  801208:	dc801117 	ldw	r18,68(sp)
  80120c:	dc401017 	ldw	r17,64(sp)
  801210:	dc000f17 	ldw	r16,60(sp)
  801214:	dec01804 	addi	sp,sp,96
  801218:	f800283a 	ret
  80121c:	81800417 	ldw	r6,16(r16)
  801220:	0023883a 	mov	r17,zero
  801224:	002f883a 	mov	r23,zero
  801228:	3000a626 	beq	r6,zero,8014c4 <_fseek_r+0x354>
  80122c:	8100030b 	ldhu	r4,12(r16)
  801230:	2082068c 	andi	r2,r4,2074
  801234:	1000081e 	bne	r2,zero,801258 <_fseek_r+0xe8>
  801238:	2081000c 	andi	r2,r4,1024
  80123c:	10001b1e 	bne	r2,zero,8012ac <_fseek_r+0x13c>
  801240:	00802034 	movhi	r2,128
  801244:	1088a704 	addi	r2,r2,8860
  801248:	a8800926 	beq	r21,r2,801270 <_fseek_r+0x100>
  80124c:	8080030b 	ldhu	r2,12(r16)
  801250:	10820014 	ori	r2,r2,2048
  801254:	8080030d 	sth	r2,12(r16)
  801258:	9009883a 	mov	r4,r18
  80125c:	800b883a 	mov	r5,r16
  801260:	080253c0 	call	80253c <_fflush_r>
  801264:	1000a326 	beq	r2,zero,8014f4 <_fseek_r+0x384>
  801268:	013fffc4 	movi	r4,-1
  80126c:	003fdf06 	br	8011ec <_fseek_r+0x7c>
  801270:	8140038f 	ldh	r5,14(r16)
  801274:	283ff516 	blt	r5,zero,80124c <_fseek_r+0xdc>
  801278:	9009883a 	mov	r4,r18
  80127c:	d80d883a 	mov	r6,sp
  801280:	08015d00 	call	8015d0 <_fstat_r>
  801284:	103ff11e 	bne	r2,zero,80124c <_fseek_r+0xdc>
  801288:	d8800117 	ldw	r2,4(sp)
  80128c:	00e00014 	movui	r3,32768
  801290:	10bc000c 	andi	r2,r2,61440
  801294:	10ffed1e 	bne	r2,r3,80124c <_fseek_r+0xdc>
  801298:	80c0030b 	ldhu	r3,12(r16)
  80129c:	00810004 	movi	r2,1024
  8012a0:	80801315 	stw	r2,76(r16)
  8012a4:	1886b03a 	or	r3,r3,r2
  8012a8:	80c0030d 	sth	r3,12(r16)
  8012ac:	9800701e 	bne	r19,zero,801470 <_fseek_r+0x300>
  8012b0:	b029883a 	mov	r20,r22
  8012b4:	b804c03a 	cmpne	r2,r23,zero
  8012b8:	10003f1e 	bne	r2,zero,8013b8 <_fseek_r+0x248>
  8012bc:	8100030b 	ldhu	r4,12(r16)
  8012c0:	2084000c 	andi	r2,r4,4096
  8012c4:	1000a126 	beq	r2,zero,80154c <_fseek_r+0x3dc>
  8012c8:	81801417 	ldw	r6,80(r16)
  8012cc:	80c00117 	ldw	r3,4(r16)
  8012d0:	81400c17 	ldw	r5,48(r16)
  8012d4:	30e3c83a 	sub	r17,r6,r3
  8012d8:	28008026 	beq	r5,zero,8014dc <_fseek_r+0x36c>
  8012dc:	81c00f17 	ldw	r7,60(r16)
  8012e0:	89e3c83a 	sub	r17,r17,r7
  8012e4:	80800e17 	ldw	r2,56(r16)
  8012e8:	81800417 	ldw	r6,16(r16)
  8012ec:	88c7883a 	add	r3,r17,r3
  8012f0:	1185c83a 	sub	r2,r2,r6
  8012f4:	11cf883a 	add	r7,r2,r7
  8012f8:	1887c83a 	sub	r3,r3,r2
  8012fc:	2088000c 	andi	r2,r4,8192
  801300:	10003e1e 	bne	r2,zero,8013fc <_fseek_r+0x28c>
  801304:	a0c03d16 	blt	r20,r3,8013fc <_fseek_r+0x28c>
  801308:	38c5883a 	add	r2,r7,r3
  80130c:	a0803b2e 	bgeu	r20,r2,8013fc <_fseek_r+0x28c>
  801310:	a0c5c83a 	sub	r2,r20,r3
  801314:	3887c83a 	sub	r3,r7,r2
  801318:	3085883a 	add	r2,r6,r2
  80131c:	80800015 	stw	r2,0(r16)
  801320:	80c00115 	stw	r3,4(r16)
  801324:	28000526 	beq	r5,zero,80133c <_fseek_r+0x1cc>
  801328:	80801004 	addi	r2,r16,64
  80132c:	28800226 	beq	r5,r2,801338 <_fseek_r+0x1c8>
  801330:	9009883a 	mov	r4,r18
  801334:	0802bf80 	call	802bf8 <_free_r>
  801338:	80000c15 	stw	zero,48(r16)
  80133c:	8080030b 	ldhu	r2,12(r16)
  801340:	0009883a 	mov	r4,zero
  801344:	10bff7cc 	andi	r2,r2,65503
  801348:	8080030d 	sth	r2,12(r16)
  80134c:	003fa706 	br	8011ec <_fseek_r+0x7c>
  801350:	9009883a 	mov	r4,r18
  801354:	800b883a 	mov	r5,r16
  801358:	080253c0 	call	80253c <_fflush_r>
  80135c:	8100030b 	ldhu	r4,12(r16)
  801360:	2084000c 	andi	r2,r4,4096
  801364:	10008726 	beq	r2,zero,801584 <_fseek_r+0x414>
  801368:	84401417 	ldw	r17,80(r16)
  80136c:	2080010c 	andi	r2,r4,4
  801370:	1000171e 	bne	r2,zero,8013d0 <_fseek_r+0x260>
  801374:	2080020c 	andi	r2,r4,8
  801378:	10003b26 	beq	r2,zero,801468 <_fseek_r+0x2f8>
  80137c:	80800017 	ldw	r2,0(r16)
  801380:	10003926 	beq	r2,zero,801468 <_fseek_r+0x2f8>
  801384:	81800417 	ldw	r6,16(r16)
  801388:	1185c83a 	sub	r2,r2,r6
  80138c:	88a3883a 	add	r17,r17,r2
  801390:	00001606 	br	8013ec <_fseek_r+0x27c>
  801394:	08027d40 	call	8027d4 <__sinit>
  801398:	8080030b 	ldhu	r2,12(r16)
  80139c:	00c04204 	movi	r3,264
  8013a0:	1080420c 	andi	r2,r2,264
  8013a4:	10ff871e 	bne	r2,r3,8011c4 <_fseek_r+0x54>
  8013a8:	9009883a 	mov	r4,r18
  8013ac:	800b883a 	mov	r5,r16
  8013b0:	080253c0 	call	80253c <_fflush_r>
  8013b4:	003f8306 	br	8011c4 <_fseek_r+0x54>
  8013b8:	81400c17 	ldw	r5,48(r16)
  8013bc:	28004526 	beq	r5,zero,8014d4 <_fseek_r+0x364>
  8013c0:	8100030b 	ldhu	r4,12(r16)
  8013c4:	80c00117 	ldw	r3,4(r16)
  8013c8:	81c00f17 	ldw	r7,60(r16)
  8013cc:	003fc506 	br	8012e4 <_fseek_r+0x174>
  8013d0:	80c00117 	ldw	r3,4(r16)
  8013d4:	80800c17 	ldw	r2,48(r16)
  8013d8:	88e3c83a 	sub	r17,r17,r3
  8013dc:	10002226 	beq	r2,zero,801468 <_fseek_r+0x2f8>
  8013e0:	81c00f17 	ldw	r7,60(r16)
  8013e4:	81800417 	ldw	r6,16(r16)
  8013e8:	89e3c83a 	sub	r17,r17,r7
  8013ec:	b46d883a 	add	r22,r22,r17
  8013f0:	0027883a 	mov	r19,zero
  8013f4:	05c00044 	movi	r23,1
  8013f8:	003f8b06 	br	801228 <_fseek_r+0xb8>
  8013fc:	80801317 	ldw	r2,76(r16)
  801400:	81400717 	ldw	r5,28(r16)
  801404:	9009883a 	mov	r4,r18
  801408:	0085c83a 	sub	r2,zero,r2
  80140c:	a0a2703a 	and	r17,r20,r2
  801410:	880d883a 	mov	r6,r17
  801414:	000f883a 	mov	r7,zero
  801418:	a83ee83a 	callr	r21
  80141c:	00ffffc4 	movi	r3,-1
  801420:	10ff8d26 	beq	r2,r3,801258 <_fseek_r+0xe8>
  801424:	80800417 	ldw	r2,16(r16)
  801428:	81400c17 	ldw	r5,48(r16)
  80142c:	80000115 	stw	zero,4(r16)
  801430:	80800015 	stw	r2,0(r16)
  801434:	28000526 	beq	r5,zero,80144c <_fseek_r+0x2dc>
  801438:	80801004 	addi	r2,r16,64
  80143c:	28800226 	beq	r5,r2,801448 <_fseek_r+0x2d8>
  801440:	9009883a 	mov	r4,r18
  801444:	0802bf80 	call	802bf8 <_free_r>
  801448:	80000c15 	stw	zero,48(r16)
  80144c:	8080030b 	ldhu	r2,12(r16)
  801450:	a463c83a 	sub	r17,r20,r17
  801454:	10bff7cc 	andi	r2,r2,65503
  801458:	8080030d 	sth	r2,12(r16)
  80145c:	88000c1e 	bne	r17,zero,801490 <_fseek_r+0x320>
  801460:	0009883a 	mov	r4,zero
  801464:	003f6106 	br	8011ec <_fseek_r+0x7c>
  801468:	81800417 	ldw	r6,16(r16)
  80146c:	003fdf06 	br	8013ec <_fseek_r+0x27c>
  801470:	8140038f 	ldh	r5,14(r16)
  801474:	9009883a 	mov	r4,r18
  801478:	d80d883a 	mov	r6,sp
  80147c:	08015d00 	call	8015d0 <_fstat_r>
  801480:	103f751e 	bne	r2,zero,801258 <_fseek_r+0xe8>
  801484:	d8800417 	ldw	r2,16(sp)
  801488:	b0a9883a 	add	r20,r22,r2
  80148c:	003f8906 	br	8012b4 <_fseek_r+0x144>
  801490:	9009883a 	mov	r4,r18
  801494:	800b883a 	mov	r5,r16
  801498:	08020440 	call	802044 <__srefill_r>
  80149c:	103f6e1e 	bne	r2,zero,801258 <_fseek_r+0xe8>
  8014a0:	80c00117 	ldw	r3,4(r16)
  8014a4:	1c7f6c36 	bltu	r3,r17,801258 <_fseek_r+0xe8>
  8014a8:	80800017 	ldw	r2,0(r16)
  8014ac:	1c47c83a 	sub	r3,r3,r17
  8014b0:	0009883a 	mov	r4,zero
  8014b4:	1445883a 	add	r2,r2,r17
  8014b8:	80c00115 	stw	r3,4(r16)
  8014bc:	80800015 	stw	r2,0(r16)
  8014c0:	003f4a06 	br	8011ec <_fseek_r+0x7c>
  8014c4:	9009883a 	mov	r4,r18
  8014c8:	800b883a 	mov	r5,r16
  8014cc:	08016440 	call	801644 <__smakebuf_r>
  8014d0:	003f5606 	br	80122c <_fseek_r+0xbc>
  8014d4:	8100030b 	ldhu	r4,12(r16)
  8014d8:	80c00117 	ldw	r3,4(r16)
  8014dc:	80800017 	ldw	r2,0(r16)
  8014e0:	81800417 	ldw	r6,16(r16)
  8014e4:	1185c83a 	sub	r2,r2,r6
  8014e8:	10cf883a 	add	r7,r2,r3
  8014ec:	8887c83a 	sub	r3,r17,r2
  8014f0:	003f8206 	br	8012fc <_fseek_r+0x18c>
  8014f4:	81400717 	ldw	r5,28(r16)
  8014f8:	b00d883a 	mov	r6,r22
  8014fc:	980f883a 	mov	r7,r19
  801500:	9009883a 	mov	r4,r18
  801504:	a83ee83a 	callr	r21
  801508:	00ffffc4 	movi	r3,-1
  80150c:	10ff5626 	beq	r2,r3,801268 <_fseek_r+0xf8>
  801510:	81400c17 	ldw	r5,48(r16)
  801514:	28000526 	beq	r5,zero,80152c <_fseek_r+0x3bc>
  801518:	80801004 	addi	r2,r16,64
  80151c:	28800226 	beq	r5,r2,801528 <_fseek_r+0x3b8>
  801520:	9009883a 	mov	r4,r18
  801524:	0802bf80 	call	802bf8 <_free_r>
  801528:	80000c15 	stw	zero,48(r16)
  80152c:	8080030b 	ldhu	r2,12(r16)
  801530:	80c00417 	ldw	r3,16(r16)
  801534:	0009883a 	mov	r4,zero
  801538:	10bdf7cc 	andi	r2,r2,63455
  80153c:	8080030d 	sth	r2,12(r16)
  801540:	80c00015 	stw	r3,0(r16)
  801544:	80000115 	stw	zero,4(r16)
  801548:	003f2806 	br	8011ec <_fseek_r+0x7c>
  80154c:	81400717 	ldw	r5,28(r16)
  801550:	000d883a 	mov	r6,zero
  801554:	9009883a 	mov	r4,r18
  801558:	01c00044 	movi	r7,1
  80155c:	a83ee83a 	callr	r21
  801560:	100d883a 	mov	r6,r2
  801564:	00bfffc4 	movi	r2,-1
  801568:	30bf3b26 	beq	r6,r2,801258 <_fseek_r+0xe8>
  80156c:	8100030b 	ldhu	r4,12(r16)
  801570:	003f5606 	br	8012cc <_fseek_r+0x15c>
  801574:	00800744 	movi	r2,29
  801578:	013fffc4 	movi	r4,-1
  80157c:	90800015 	stw	r2,0(r18)
  801580:	003f1a06 	br	8011ec <_fseek_r+0x7c>
  801584:	81400717 	ldw	r5,28(r16)
  801588:	980f883a 	mov	r7,r19
  80158c:	9009883a 	mov	r4,r18
  801590:	000d883a 	mov	r6,zero
  801594:	a83ee83a 	callr	r21
  801598:	1023883a 	mov	r17,r2
  80159c:	00bfffc4 	movi	r2,-1
  8015a0:	88bf3126 	beq	r17,r2,801268 <_fseek_r+0xf8>
  8015a4:	8100030b 	ldhu	r4,12(r16)
  8015a8:	003f7006 	br	80136c <_fseek_r+0x1fc>

008015ac <fseek>:
  8015ac:	00802074 	movhi	r2,129
  8015b0:	10a9e004 	addi	r2,r2,-22656
  8015b4:	2013883a 	mov	r9,r4
  8015b8:	11000017 	ldw	r4,0(r2)
  8015bc:	2805883a 	mov	r2,r5
  8015c0:	300f883a 	mov	r7,r6
  8015c4:	480b883a 	mov	r5,r9
  8015c8:	100d883a 	mov	r6,r2
  8015cc:	08011701 	jmpi	801170 <_fseek_r>

008015d0 <_fstat_r>:
  8015d0:	defffd04 	addi	sp,sp,-12
  8015d4:	dc000015 	stw	r16,0(sp)
  8015d8:	04002074 	movhi	r16,129
  8015dc:	84311004 	addi	r16,r16,-15296
  8015e0:	dc400115 	stw	r17,4(sp)
  8015e4:	80000015 	stw	zero,0(r16)
  8015e8:	2023883a 	mov	r17,r4
  8015ec:	2809883a 	mov	r4,r5
  8015f0:	300b883a 	mov	r5,r6
  8015f4:	dfc00215 	stw	ra,8(sp)
  8015f8:	08044b40 	call	8044b4 <fstat>
  8015fc:	1007883a 	mov	r3,r2
  801600:	00bfffc4 	movi	r2,-1
  801604:	18800626 	beq	r3,r2,801620 <_fstat_r+0x50>
  801608:	1805883a 	mov	r2,r3
  80160c:	dfc00217 	ldw	ra,8(sp)
  801610:	dc400117 	ldw	r17,4(sp)
  801614:	dc000017 	ldw	r16,0(sp)
  801618:	dec00304 	addi	sp,sp,12
  80161c:	f800283a 	ret
  801620:	80800017 	ldw	r2,0(r16)
  801624:	103ff826 	beq	r2,zero,801608 <_fstat_r+0x38>
  801628:	88800015 	stw	r2,0(r17)
  80162c:	1805883a 	mov	r2,r3
  801630:	dfc00217 	ldw	ra,8(sp)
  801634:	dc400117 	ldw	r17,4(sp)
  801638:	dc000017 	ldw	r16,0(sp)
  80163c:	dec00304 	addi	sp,sp,12
  801640:	f800283a 	ret

00801644 <__smakebuf_r>:
  801644:	2880030b 	ldhu	r2,12(r5)
  801648:	deffed04 	addi	sp,sp,-76
  80164c:	dc401015 	stw	r17,64(sp)
  801650:	1080008c 	andi	r2,r2,2
  801654:	dc000f15 	stw	r16,60(sp)
  801658:	dfc01215 	stw	ra,72(sp)
  80165c:	dc801115 	stw	r18,68(sp)
  801660:	2821883a 	mov	r16,r5
  801664:	2023883a 	mov	r17,r4
  801668:	10000b26 	beq	r2,zero,801698 <__smakebuf_r+0x54>
  80166c:	28c010c4 	addi	r3,r5,67
  801670:	00800044 	movi	r2,1
  801674:	28800515 	stw	r2,20(r5)
  801678:	28c00415 	stw	r3,16(r5)
  80167c:	28c00015 	stw	r3,0(r5)
  801680:	dfc01217 	ldw	ra,72(sp)
  801684:	dc801117 	ldw	r18,68(sp)
  801688:	dc401017 	ldw	r17,64(sp)
  80168c:	dc000f17 	ldw	r16,60(sp)
  801690:	dec01304 	addi	sp,sp,76
  801694:	f800283a 	ret
  801698:	2940038f 	ldh	r5,14(r5)
  80169c:	28002116 	blt	r5,zero,801724 <__smakebuf_r+0xe0>
  8016a0:	d80d883a 	mov	r6,sp
  8016a4:	08015d00 	call	8015d0 <_fstat_r>
  8016a8:	10001e16 	blt	r2,zero,801724 <__smakebuf_r+0xe0>
  8016ac:	d8800117 	ldw	r2,4(sp)
  8016b0:	00e00014 	movui	r3,32768
  8016b4:	113c000c 	andi	r4,r2,61440
  8016b8:	20c03126 	beq	r4,r3,801780 <__smakebuf_r+0x13c>
  8016bc:	8080030b 	ldhu	r2,12(r16)
  8016c0:	00c80004 	movi	r3,8192
  8016c4:	10820014 	ori	r2,r2,2048
  8016c8:	8080030d 	sth	r2,12(r16)
  8016cc:	20c01e26 	beq	r4,r3,801748 <__smakebuf_r+0x104>
  8016d0:	04810004 	movi	r18,1024
  8016d4:	8809883a 	mov	r4,r17
  8016d8:	900b883a 	mov	r5,r18
  8016dc:	08017d80 	call	8017d8 <_malloc_r>
  8016e0:	1009883a 	mov	r4,r2
  8016e4:	10003126 	beq	r2,zero,8017ac <__smakebuf_r+0x168>
  8016e8:	80c0030b 	ldhu	r3,12(r16)
  8016ec:	00802034 	movhi	r2,128
  8016f0:	108a2e04 	addi	r2,r2,10424
  8016f4:	88800f15 	stw	r2,60(r17)
  8016f8:	18c02014 	ori	r3,r3,128
  8016fc:	84800515 	stw	r18,20(r16)
  801700:	80c0030d 	sth	r3,12(r16)
  801704:	81000415 	stw	r4,16(r16)
  801708:	81000015 	stw	r4,0(r16)
  80170c:	dfc01217 	ldw	ra,72(sp)
  801710:	dc801117 	ldw	r18,68(sp)
  801714:	dc401017 	ldw	r17,64(sp)
  801718:	dc000f17 	ldw	r16,60(sp)
  80171c:	dec01304 	addi	sp,sp,76
  801720:	f800283a 	ret
  801724:	80c0030b 	ldhu	r3,12(r16)
  801728:	1880200c 	andi	r2,r3,128
  80172c:	10000426 	beq	r2,zero,801740 <__smakebuf_r+0xfc>
  801730:	04801004 	movi	r18,64
  801734:	18820014 	ori	r2,r3,2048
  801738:	8080030d 	sth	r2,12(r16)
  80173c:	003fe506 	br	8016d4 <__smakebuf_r+0x90>
  801740:	04810004 	movi	r18,1024
  801744:	003ffb06 	br	801734 <__smakebuf_r+0xf0>
  801748:	8140038f 	ldh	r5,14(r16)
  80174c:	8809883a 	mov	r4,r17
  801750:	08035280 	call	803528 <_isatty_r>
  801754:	103fde26 	beq	r2,zero,8016d0 <__smakebuf_r+0x8c>
  801758:	8080030b 	ldhu	r2,12(r16)
  80175c:	80c010c4 	addi	r3,r16,67
  801760:	04810004 	movi	r18,1024
  801764:	10800054 	ori	r2,r2,1
  801768:	8080030d 	sth	r2,12(r16)
  80176c:	00800044 	movi	r2,1
  801770:	80c00415 	stw	r3,16(r16)
  801774:	80800515 	stw	r2,20(r16)
  801778:	80c00015 	stw	r3,0(r16)
  80177c:	003fd506 	br	8016d4 <__smakebuf_r+0x90>
  801780:	80c00a17 	ldw	r3,40(r16)
  801784:	00802034 	movhi	r2,128
  801788:	1088a704 	addi	r2,r2,8860
  80178c:	18bfcb1e 	bne	r3,r2,8016bc <__smakebuf_r+0x78>
  801790:	8080030b 	ldhu	r2,12(r16)
  801794:	00c10004 	movi	r3,1024
  801798:	1825883a 	mov	r18,r3
  80179c:	10c4b03a 	or	r2,r2,r3
  8017a0:	8080030d 	sth	r2,12(r16)
  8017a4:	80c01315 	stw	r3,76(r16)
  8017a8:	003fca06 	br	8016d4 <__smakebuf_r+0x90>
  8017ac:	8100030b 	ldhu	r4,12(r16)
  8017b0:	2080800c 	andi	r2,r4,512
  8017b4:	103fb21e 	bne	r2,zero,801680 <__smakebuf_r+0x3c>
  8017b8:	80c010c4 	addi	r3,r16,67
  8017bc:	21000094 	ori	r4,r4,2
  8017c0:	00800044 	movi	r2,1
  8017c4:	80800515 	stw	r2,20(r16)
  8017c8:	8100030d 	sth	r4,12(r16)
  8017cc:	80c00415 	stw	r3,16(r16)
  8017d0:	80c00015 	stw	r3,0(r16)
  8017d4:	003faa06 	br	801680 <__smakebuf_r+0x3c>

008017d8 <_malloc_r>:
  8017d8:	defff604 	addi	sp,sp,-40
  8017dc:	28c002c4 	addi	r3,r5,11
  8017e0:	00800584 	movi	r2,22
  8017e4:	dc800215 	stw	r18,8(sp)
  8017e8:	dfc00915 	stw	ra,36(sp)
  8017ec:	df000815 	stw	fp,32(sp)
  8017f0:	ddc00715 	stw	r23,28(sp)
  8017f4:	dd800615 	stw	r22,24(sp)
  8017f8:	dd400515 	stw	r21,20(sp)
  8017fc:	dd000415 	stw	r20,16(sp)
  801800:	dcc00315 	stw	r19,12(sp)
  801804:	dc400115 	stw	r17,4(sp)
  801808:	dc000015 	stw	r16,0(sp)
  80180c:	2025883a 	mov	r18,r4
  801810:	10c01236 	bltu	r2,r3,80185c <_malloc_r+0x84>
  801814:	04400404 	movi	r17,16
  801818:	8940142e 	bgeu	r17,r5,80186c <_malloc_r+0x94>
  80181c:	00800304 	movi	r2,12
  801820:	0007883a 	mov	r3,zero
  801824:	90800015 	stw	r2,0(r18)
  801828:	1805883a 	mov	r2,r3
  80182c:	dfc00917 	ldw	ra,36(sp)
  801830:	df000817 	ldw	fp,32(sp)
  801834:	ddc00717 	ldw	r23,28(sp)
  801838:	dd800617 	ldw	r22,24(sp)
  80183c:	dd400517 	ldw	r21,20(sp)
  801840:	dd000417 	ldw	r20,16(sp)
  801844:	dcc00317 	ldw	r19,12(sp)
  801848:	dc800217 	ldw	r18,8(sp)
  80184c:	dc400117 	ldw	r17,4(sp)
  801850:	dc000017 	ldw	r16,0(sp)
  801854:	dec00a04 	addi	sp,sp,40
  801858:	f800283a 	ret
  80185c:	00bffe04 	movi	r2,-8
  801860:	18a2703a 	and	r17,r3,r2
  801864:	883fed16 	blt	r17,zero,80181c <_malloc_r+0x44>
  801868:	897fec36 	bltu	r17,r5,80181c <_malloc_r+0x44>
  80186c:	9009883a 	mov	r4,r18
  801870:	08049b00 	call	8049b0 <__malloc_lock>
  801874:	00807dc4 	movi	r2,503
  801878:	14402b2e 	bgeu	r2,r17,801928 <_malloc_r+0x150>
  80187c:	8806d27a 	srli	r3,r17,9
  801880:	18003f1e 	bne	r3,zero,801980 <_malloc_r+0x1a8>
  801884:	880cd0fa 	srli	r6,r17,3
  801888:	300490fa 	slli	r2,r6,3
  80188c:	02c02074 	movhi	r11,129
  801890:	5ae3e304 	addi	r11,r11,-28788
  801894:	12cb883a 	add	r5,r2,r11
  801898:	2c000317 	ldw	r16,12(r5)
  80189c:	580f883a 	mov	r7,r11
  8018a0:	2c00041e 	bne	r5,r16,8018b4 <_malloc_r+0xdc>
  8018a4:	00000a06 	br	8018d0 <_malloc_r+0xf8>
  8018a8:	1800860e 	bge	r3,zero,801ac4 <_malloc_r+0x2ec>
  8018ac:	84000317 	ldw	r16,12(r16)
  8018b0:	2c000726 	beq	r5,r16,8018d0 <_malloc_r+0xf8>
  8018b4:	80800117 	ldw	r2,4(r16)
  8018b8:	00ffff04 	movi	r3,-4
  8018bc:	10c8703a 	and	r4,r2,r3
  8018c0:	2447c83a 	sub	r3,r4,r17
  8018c4:	008003c4 	movi	r2,15
  8018c8:	10fff70e 	bge	r2,r3,8018a8 <_malloc_r+0xd0>
  8018cc:	31bfffc4 	addi	r6,r6,-1
  8018d0:	32400044 	addi	r9,r6,1
  8018d4:	02802074 	movhi	r10,129
  8018d8:	52a3e504 	addi	r10,r10,-28780
  8018dc:	54000217 	ldw	r16,8(r10)
  8018e0:	8280a026 	beq	r16,r10,801b64 <_malloc_r+0x38c>
  8018e4:	80800117 	ldw	r2,4(r16)
  8018e8:	00ffff04 	movi	r3,-4
  8018ec:	10ca703a 	and	r5,r2,r3
  8018f0:	2c4dc83a 	sub	r6,r5,r17
  8018f4:	008003c4 	movi	r2,15
  8018f8:	11808316 	blt	r2,r6,801b08 <_malloc_r+0x330>
  8018fc:	52800315 	stw	r10,12(r10)
  801900:	52800215 	stw	r10,8(r10)
  801904:	30002916 	blt	r6,zero,8019ac <_malloc_r+0x1d4>
  801908:	8147883a 	add	r3,r16,r5
  80190c:	18800117 	ldw	r2,4(r3)
  801910:	9009883a 	mov	r4,r18
  801914:	10800054 	ori	r2,r2,1
  801918:	18800115 	stw	r2,4(r3)
  80191c:	08049d00 	call	8049d0 <__malloc_unlock>
  801920:	80c00204 	addi	r3,r16,8
  801924:	003fc006 	br	801828 <_malloc_r+0x50>
  801928:	02c02074 	movhi	r11,129
  80192c:	5ae3e304 	addi	r11,r11,-28788
  801930:	8ac5883a 	add	r2,r17,r11
  801934:	14000317 	ldw	r16,12(r2)
  801938:	580f883a 	mov	r7,r11
  80193c:	8806d0fa 	srli	r3,r17,3
  801940:	14006c26 	beq	r2,r16,801af4 <_malloc_r+0x31c>
  801944:	80c00117 	ldw	r3,4(r16)
  801948:	00bfff04 	movi	r2,-4
  80194c:	81800317 	ldw	r6,12(r16)
  801950:	1886703a 	and	r3,r3,r2
  801954:	80c7883a 	add	r3,r16,r3
  801958:	18800117 	ldw	r2,4(r3)
  80195c:	81400217 	ldw	r5,8(r16)
  801960:	9009883a 	mov	r4,r18
  801964:	10800054 	ori	r2,r2,1
  801968:	18800115 	stw	r2,4(r3)
  80196c:	31400215 	stw	r5,8(r6)
  801970:	29800315 	stw	r6,12(r5)
  801974:	08049d00 	call	8049d0 <__malloc_unlock>
  801978:	80c00204 	addi	r3,r16,8
  80197c:	003faa06 	br	801828 <_malloc_r+0x50>
  801980:	00800104 	movi	r2,4
  801984:	10c0052e 	bgeu	r2,r3,80199c <_malloc_r+0x1c4>
  801988:	00800504 	movi	r2,20
  80198c:	10c07836 	bltu	r2,r3,801b70 <_malloc_r+0x398>
  801990:	198016c4 	addi	r6,r3,91
  801994:	300490fa 	slli	r2,r6,3
  801998:	003fbc06 	br	80188c <_malloc_r+0xb4>
  80199c:	8804d1ba 	srli	r2,r17,6
  8019a0:	11800e04 	addi	r6,r2,56
  8019a4:	300490fa 	slli	r2,r6,3
  8019a8:	003fb806 	br	80188c <_malloc_r+0xb4>
  8019ac:	00807fc4 	movi	r2,511
  8019b0:	1140bb36 	bltu	r2,r5,801ca0 <_malloc_r+0x4c8>
  8019b4:	2806d0fa 	srli	r3,r5,3
  8019b8:	573ffe04 	addi	fp,r10,-8
  8019bc:	00800044 	movi	r2,1
  8019c0:	180890fa 	slli	r4,r3,3
  8019c4:	1807d0ba 	srai	r3,r3,2
  8019c8:	e1c00117 	ldw	r7,4(fp)
  8019cc:	5909883a 	add	r4,r11,r4
  8019d0:	21400217 	ldw	r5,8(r4)
  8019d4:	10c4983a 	sll	r2,r2,r3
  8019d8:	81000315 	stw	r4,12(r16)
  8019dc:	81400215 	stw	r5,8(r16)
  8019e0:	388eb03a 	or	r7,r7,r2
  8019e4:	2c000315 	stw	r16,12(r5)
  8019e8:	24000215 	stw	r16,8(r4)
  8019ec:	e1c00115 	stw	r7,4(fp)
  8019f0:	4807883a 	mov	r3,r9
  8019f4:	4800cd16 	blt	r9,zero,801d2c <_malloc_r+0x554>
  8019f8:	1807d0ba 	srai	r3,r3,2
  8019fc:	00800044 	movi	r2,1
  801a00:	10c8983a 	sll	r4,r2,r3
  801a04:	39004436 	bltu	r7,r4,801b18 <_malloc_r+0x340>
  801a08:	21c4703a 	and	r2,r4,r7
  801a0c:	10000a1e 	bne	r2,zero,801a38 <_malloc_r+0x260>
  801a10:	2109883a 	add	r4,r4,r4
  801a14:	00bfff04 	movi	r2,-4
  801a18:	4884703a 	and	r2,r9,r2
  801a1c:	3906703a 	and	r3,r7,r4
  801a20:	12400104 	addi	r9,r2,4
  801a24:	1800041e 	bne	r3,zero,801a38 <_malloc_r+0x260>
  801a28:	2109883a 	add	r4,r4,r4
  801a2c:	3904703a 	and	r2,r7,r4
  801a30:	4a400104 	addi	r9,r9,4
  801a34:	103ffc26 	beq	r2,zero,801a28 <_malloc_r+0x250>
  801a38:	480490fa 	slli	r2,r9,3
  801a3c:	4819883a 	mov	r12,r9
  801a40:	023fff04 	movi	r8,-4
  801a44:	589b883a 	add	r13,r11,r2
  801a48:	6807883a 	mov	r3,r13
  801a4c:	014003c4 	movi	r5,15
  801a50:	1c000317 	ldw	r16,12(r3)
  801a54:	1c00041e 	bne	r3,r16,801a68 <_malloc_r+0x290>
  801a58:	0000a706 	br	801cf8 <_malloc_r+0x520>
  801a5c:	3000ab0e 	bge	r6,zero,801d0c <_malloc_r+0x534>
  801a60:	84000317 	ldw	r16,12(r16)
  801a64:	1c00a426 	beq	r3,r16,801cf8 <_malloc_r+0x520>
  801a68:	80800117 	ldw	r2,4(r16)
  801a6c:	1204703a 	and	r2,r2,r8
  801a70:	144dc83a 	sub	r6,r2,r17
  801a74:	29bff90e 	bge	r5,r6,801a5c <_malloc_r+0x284>
  801a78:	81000317 	ldw	r4,12(r16)
  801a7c:	80c00217 	ldw	r3,8(r16)
  801a80:	89400054 	ori	r5,r17,1
  801a84:	8445883a 	add	r2,r16,r17
  801a88:	20c00215 	stw	r3,8(r4)
  801a8c:	19000315 	stw	r4,12(r3)
  801a90:	81400115 	stw	r5,4(r16)
  801a94:	1187883a 	add	r3,r2,r6
  801a98:	31000054 	ori	r4,r6,1
  801a9c:	50800315 	stw	r2,12(r10)
  801aa0:	50800215 	stw	r2,8(r10)
  801aa4:	19800015 	stw	r6,0(r3)
  801aa8:	11000115 	stw	r4,4(r2)
  801aac:	12800215 	stw	r10,8(r2)
  801ab0:	12800315 	stw	r10,12(r2)
  801ab4:	9009883a 	mov	r4,r18
  801ab8:	08049d00 	call	8049d0 <__malloc_unlock>
  801abc:	80c00204 	addi	r3,r16,8
  801ac0:	003f5906 	br	801828 <_malloc_r+0x50>
  801ac4:	8109883a 	add	r4,r16,r4
  801ac8:	20800117 	ldw	r2,4(r4)
  801acc:	80c00217 	ldw	r3,8(r16)
  801ad0:	81400317 	ldw	r5,12(r16)
  801ad4:	10800054 	ori	r2,r2,1
  801ad8:	20800115 	stw	r2,4(r4)
  801adc:	28c00215 	stw	r3,8(r5)
  801ae0:	19400315 	stw	r5,12(r3)
  801ae4:	9009883a 	mov	r4,r18
  801ae8:	08049d00 	call	8049d0 <__malloc_unlock>
  801aec:	80c00204 	addi	r3,r16,8
  801af0:	003f4d06 	br	801828 <_malloc_r+0x50>
  801af4:	80800204 	addi	r2,r16,8
  801af8:	14000317 	ldw	r16,12(r2)
  801afc:	143f911e 	bne	r2,r16,801944 <_malloc_r+0x16c>
  801b00:	1a400084 	addi	r9,r3,2
  801b04:	003f7306 	br	8018d4 <_malloc_r+0xfc>
  801b08:	88c00054 	ori	r3,r17,1
  801b0c:	8445883a 	add	r2,r16,r17
  801b10:	80c00115 	stw	r3,4(r16)
  801b14:	003fdf06 	br	801a94 <_malloc_r+0x2bc>
  801b18:	e4000217 	ldw	r16,8(fp)
  801b1c:	00bfff04 	movi	r2,-4
  801b20:	80c00117 	ldw	r3,4(r16)
  801b24:	802d883a 	mov	r22,r16
  801b28:	18aa703a 	and	r21,r3,r2
  801b2c:	ac401636 	bltu	r21,r17,801b88 <_malloc_r+0x3b0>
  801b30:	ac49c83a 	sub	r4,r21,r17
  801b34:	008003c4 	movi	r2,15
  801b38:	1100130e 	bge	r2,r4,801b88 <_malloc_r+0x3b0>
  801b3c:	88800054 	ori	r2,r17,1
  801b40:	8447883a 	add	r3,r16,r17
  801b44:	80800115 	stw	r2,4(r16)
  801b48:	20800054 	ori	r2,r4,1
  801b4c:	18800115 	stw	r2,4(r3)
  801b50:	e0c00215 	stw	r3,8(fp)
  801b54:	9009883a 	mov	r4,r18
  801b58:	08049d00 	call	8049d0 <__malloc_unlock>
  801b5c:	80c00204 	addi	r3,r16,8
  801b60:	003f3106 	br	801828 <_malloc_r+0x50>
  801b64:	39c00117 	ldw	r7,4(r7)
  801b68:	573ffe04 	addi	fp,r10,-8
  801b6c:	003fa006 	br	8019f0 <_malloc_r+0x218>
  801b70:	00801504 	movi	r2,84
  801b74:	10c06736 	bltu	r2,r3,801d14 <_malloc_r+0x53c>
  801b78:	8804d33a 	srli	r2,r17,12
  801b7c:	11801b84 	addi	r6,r2,110
  801b80:	300490fa 	slli	r2,r6,3
  801b84:	003f4106 	br	80188c <_malloc_r+0xb4>
  801b88:	d0a73117 	ldw	r2,-25404(gp)
  801b8c:	d0e00317 	ldw	r3,-32756(gp)
  801b90:	053fffc4 	movi	r20,-1
  801b94:	10800404 	addi	r2,r2,16
  801b98:	88a7883a 	add	r19,r17,r2
  801b9c:	1d000326 	beq	r3,r20,801bac <_malloc_r+0x3d4>
  801ba0:	98c3ffc4 	addi	r3,r19,4095
  801ba4:	00bc0004 	movi	r2,-4096
  801ba8:	18a6703a 	and	r19,r3,r2
  801bac:	9009883a 	mov	r4,r18
  801bb0:	980b883a 	mov	r5,r19
  801bb4:	08022240 	call	802224 <_sbrk_r>
  801bb8:	1009883a 	mov	r4,r2
  801bbc:	15000426 	beq	r2,r20,801bd0 <_malloc_r+0x3f8>
  801bc0:	854b883a 	add	r5,r16,r21
  801bc4:	1029883a 	mov	r20,r2
  801bc8:	11405a2e 	bgeu	r2,r5,801d34 <_malloc_r+0x55c>
  801bcc:	87000c26 	beq	r16,fp,801c00 <_malloc_r+0x428>
  801bd0:	e4000217 	ldw	r16,8(fp)
  801bd4:	80c00117 	ldw	r3,4(r16)
  801bd8:	00bfff04 	movi	r2,-4
  801bdc:	1884703a 	and	r2,r3,r2
  801be0:	14400336 	bltu	r2,r17,801bf0 <_malloc_r+0x418>
  801be4:	1449c83a 	sub	r4,r2,r17
  801be8:	008003c4 	movi	r2,15
  801bec:	113fd316 	blt	r2,r4,801b3c <_malloc_r+0x364>
  801bf0:	9009883a 	mov	r4,r18
  801bf4:	08049d00 	call	8049d0 <__malloc_unlock>
  801bf8:	0007883a 	mov	r3,zero
  801bfc:	003f0a06 	br	801828 <_malloc_r+0x50>
  801c00:	05c02074 	movhi	r23,129
  801c04:	bdf13e04 	addi	r23,r23,-15112
  801c08:	b8800017 	ldw	r2,0(r23)
  801c0c:	988d883a 	add	r6,r19,r2
  801c10:	b9800015 	stw	r6,0(r23)
  801c14:	d0e00317 	ldw	r3,-32756(gp)
  801c18:	00bfffc4 	movi	r2,-1
  801c1c:	18808e26 	beq	r3,r2,801e58 <_malloc_r+0x680>
  801c20:	2145c83a 	sub	r2,r4,r5
  801c24:	3085883a 	add	r2,r6,r2
  801c28:	b8800015 	stw	r2,0(r23)
  801c2c:	20c001cc 	andi	r3,r4,7
  801c30:	18005f1e 	bne	r3,zero,801db0 <_malloc_r+0x5d8>
  801c34:	000b883a 	mov	r5,zero
  801c38:	a4c5883a 	add	r2,r20,r19
  801c3c:	1083ffcc 	andi	r2,r2,4095
  801c40:	00c40004 	movi	r3,4096
  801c44:	1887c83a 	sub	r3,r3,r2
  801c48:	28e7883a 	add	r19,r5,r3
  801c4c:	9009883a 	mov	r4,r18
  801c50:	980b883a 	mov	r5,r19
  801c54:	08022240 	call	802224 <_sbrk_r>
  801c58:	1007883a 	mov	r3,r2
  801c5c:	00bfffc4 	movi	r2,-1
  801c60:	18807a26 	beq	r3,r2,801e4c <_malloc_r+0x674>
  801c64:	1d05c83a 	sub	r2,r3,r20
  801c68:	9885883a 	add	r2,r19,r2
  801c6c:	10c00054 	ori	r3,r2,1
  801c70:	b8800017 	ldw	r2,0(r23)
  801c74:	a021883a 	mov	r16,r20
  801c78:	a0c00115 	stw	r3,4(r20)
  801c7c:	9885883a 	add	r2,r19,r2
  801c80:	b8800015 	stw	r2,0(r23)
  801c84:	e5000215 	stw	r20,8(fp)
  801c88:	b7003626 	beq	r22,fp,801d64 <_malloc_r+0x58c>
  801c8c:	018003c4 	movi	r6,15
  801c90:	35404b36 	bltu	r6,r21,801dc0 <_malloc_r+0x5e8>
  801c94:	00800044 	movi	r2,1
  801c98:	a0800115 	stw	r2,4(r20)
  801c9c:	003fcd06 	br	801bd4 <_malloc_r+0x3fc>
  801ca0:	2808d27a 	srli	r4,r5,9
  801ca4:	2000371e 	bne	r4,zero,801d84 <_malloc_r+0x5ac>
  801ca8:	2808d0fa 	srli	r4,r5,3
  801cac:	200690fa 	slli	r3,r4,3
  801cb0:	1ad1883a 	add	r8,r3,r11
  801cb4:	41800217 	ldw	r6,8(r8)
  801cb8:	41805b26 	beq	r8,r6,801e28 <_malloc_r+0x650>
  801cbc:	30800117 	ldw	r2,4(r6)
  801cc0:	00ffff04 	movi	r3,-4
  801cc4:	10c4703a 	and	r2,r2,r3
  801cc8:	2880022e 	bgeu	r5,r2,801cd4 <_malloc_r+0x4fc>
  801ccc:	31800217 	ldw	r6,8(r6)
  801cd0:	41bffa1e 	bne	r8,r6,801cbc <_malloc_r+0x4e4>
  801cd4:	32000317 	ldw	r8,12(r6)
  801cd8:	39c00117 	ldw	r7,4(r7)
  801cdc:	82000315 	stw	r8,12(r16)
  801ce0:	81800215 	stw	r6,8(r16)
  801ce4:	07002074 	movhi	fp,129
  801ce8:	e723e304 	addi	fp,fp,-28788
  801cec:	34000315 	stw	r16,12(r6)
  801cf0:	44000215 	stw	r16,8(r8)
  801cf4:	003f3e06 	br	8019f0 <_malloc_r+0x218>
  801cf8:	63000044 	addi	r12,r12,1
  801cfc:	608000cc 	andi	r2,r12,3
  801d00:	10005d26 	beq	r2,zero,801e78 <_malloc_r+0x6a0>
  801d04:	18c00204 	addi	r3,r3,8
  801d08:	003f5106 	br	801a50 <_malloc_r+0x278>
  801d0c:	8089883a 	add	r4,r16,r2
  801d10:	003f6d06 	br	801ac8 <_malloc_r+0x2f0>
  801d14:	00805504 	movi	r2,340
  801d18:	10c02036 	bltu	r2,r3,801d9c <_malloc_r+0x5c4>
  801d1c:	8804d3fa 	srli	r2,r17,15
  801d20:	11801dc4 	addi	r6,r2,119
  801d24:	300490fa 	slli	r2,r6,3
  801d28:	003ed806 	br	80188c <_malloc_r+0xb4>
  801d2c:	48c000c4 	addi	r3,r9,3
  801d30:	003f3106 	br	8019f8 <_malloc_r+0x220>
  801d34:	05c02074 	movhi	r23,129
  801d38:	bdf13e04 	addi	r23,r23,-15112
  801d3c:	b8800017 	ldw	r2,0(r23)
  801d40:	988d883a 	add	r6,r19,r2
  801d44:	b9800015 	stw	r6,0(r23)
  801d48:	293fb21e 	bne	r5,r4,801c14 <_malloc_r+0x43c>
  801d4c:	2083ffcc 	andi	r2,r4,4095
  801d50:	103fb01e 	bne	r2,zero,801c14 <_malloc_r+0x43c>
  801d54:	e4000217 	ldw	r16,8(fp)
  801d58:	9d45883a 	add	r2,r19,r21
  801d5c:	10800054 	ori	r2,r2,1
  801d60:	80800115 	stw	r2,4(r16)
  801d64:	b8c00017 	ldw	r3,0(r23)
  801d68:	d0a73217 	ldw	r2,-25400(gp)
  801d6c:	10c0012e 	bgeu	r2,r3,801d74 <_malloc_r+0x59c>
  801d70:	d0e73215 	stw	r3,-25400(gp)
  801d74:	d0a73317 	ldw	r2,-25396(gp)
  801d78:	10ff962e 	bgeu	r2,r3,801bd4 <_malloc_r+0x3fc>
  801d7c:	d0e73315 	stw	r3,-25396(gp)
  801d80:	003f9406 	br	801bd4 <_malloc_r+0x3fc>
  801d84:	00800104 	movi	r2,4
  801d88:	11001e36 	bltu	r2,r4,801e04 <_malloc_r+0x62c>
  801d8c:	2804d1ba 	srli	r2,r5,6
  801d90:	11000e04 	addi	r4,r2,56
  801d94:	200690fa 	slli	r3,r4,3
  801d98:	003fc506 	br	801cb0 <_malloc_r+0x4d8>
  801d9c:	00815504 	movi	r2,1364
  801da0:	10c01d2e 	bgeu	r2,r3,801e18 <_malloc_r+0x640>
  801da4:	01801f84 	movi	r6,126
  801da8:	0080fc04 	movi	r2,1008
  801dac:	003eb706 	br	80188c <_malloc_r+0xb4>
  801db0:	00800204 	movi	r2,8
  801db4:	10cbc83a 	sub	r5,r2,r3
  801db8:	2169883a 	add	r20,r4,r5
  801dbc:	003f9e06 	br	801c38 <_malloc_r+0x460>
  801dc0:	00bffe04 	movi	r2,-8
  801dc4:	a93ffd04 	addi	r4,r21,-12
  801dc8:	2088703a 	and	r4,r4,r2
  801dcc:	b10b883a 	add	r5,r22,r4
  801dd0:	00c00144 	movi	r3,5
  801dd4:	28c00215 	stw	r3,8(r5)
  801dd8:	28c00115 	stw	r3,4(r5)
  801ddc:	b0800117 	ldw	r2,4(r22)
  801de0:	1080004c 	andi	r2,r2,1
  801de4:	2084b03a 	or	r2,r4,r2
  801de8:	b0800115 	stw	r2,4(r22)
  801dec:	313fdd2e 	bgeu	r6,r4,801d64 <_malloc_r+0x58c>
  801df0:	b1400204 	addi	r5,r22,8
  801df4:	9009883a 	mov	r4,r18
  801df8:	0802bf80 	call	802bf8 <_free_r>
  801dfc:	e4000217 	ldw	r16,8(fp)
  801e00:	003fd806 	br	801d64 <_malloc_r+0x58c>
  801e04:	00800504 	movi	r2,20
  801e08:	11001536 	bltu	r2,r4,801e60 <_malloc_r+0x688>
  801e0c:	210016c4 	addi	r4,r4,91
  801e10:	200690fa 	slli	r3,r4,3
  801e14:	003fa606 	br	801cb0 <_malloc_r+0x4d8>
  801e18:	8804d4ba 	srli	r2,r17,18
  801e1c:	11801f04 	addi	r6,r2,124
  801e20:	300490fa 	slli	r2,r6,3
  801e24:	003e9906 	br	80188c <_malloc_r+0xb4>
  801e28:	2009d0ba 	srai	r4,r4,2
  801e2c:	01402074 	movhi	r5,129
  801e30:	2963e304 	addi	r5,r5,-28788
  801e34:	00c00044 	movi	r3,1
  801e38:	28800117 	ldw	r2,4(r5)
  801e3c:	1906983a 	sll	r3,r3,r4
  801e40:	10c4b03a 	or	r2,r2,r3
  801e44:	28800115 	stw	r2,4(r5)
  801e48:	003fa306 	br	801cd8 <_malloc_r+0x500>
  801e4c:	0027883a 	mov	r19,zero
  801e50:	00c00044 	movi	r3,1
  801e54:	003f8606 	br	801c70 <_malloc_r+0x498>
  801e58:	d1200315 	stw	r4,-32756(gp)
  801e5c:	003f7306 	br	801c2c <_malloc_r+0x454>
  801e60:	00801504 	movi	r2,84
  801e64:	11001936 	bltu	r2,r4,801ecc <_malloc_r+0x6f4>
  801e68:	2804d33a 	srli	r2,r5,12
  801e6c:	11001b84 	addi	r4,r2,110
  801e70:	200690fa 	slli	r3,r4,3
  801e74:	003f8e06 	br	801cb0 <_malloc_r+0x4d8>
  801e78:	480b883a 	mov	r5,r9
  801e7c:	6807883a 	mov	r3,r13
  801e80:	288000cc 	andi	r2,r5,3
  801e84:	18fffe04 	addi	r3,r3,-8
  801e88:	297fffc4 	addi	r5,r5,-1
  801e8c:	10001526 	beq	r2,zero,801ee4 <_malloc_r+0x70c>
  801e90:	18800217 	ldw	r2,8(r3)
  801e94:	10fffa26 	beq	r2,r3,801e80 <_malloc_r+0x6a8>
  801e98:	2109883a 	add	r4,r4,r4
  801e9c:	393f1e36 	bltu	r7,r4,801b18 <_malloc_r+0x340>
  801ea0:	203f1d26 	beq	r4,zero,801b18 <_malloc_r+0x340>
  801ea4:	21c4703a 	and	r2,r4,r7
  801ea8:	10000226 	beq	r2,zero,801eb4 <_malloc_r+0x6dc>
  801eac:	6013883a 	mov	r9,r12
  801eb0:	003ee106 	br	801a38 <_malloc_r+0x260>
  801eb4:	2109883a 	add	r4,r4,r4
  801eb8:	3904703a 	and	r2,r7,r4
  801ebc:	63000104 	addi	r12,r12,4
  801ec0:	103ffc26 	beq	r2,zero,801eb4 <_malloc_r+0x6dc>
  801ec4:	6013883a 	mov	r9,r12
  801ec8:	003edb06 	br	801a38 <_malloc_r+0x260>
  801ecc:	00805504 	movi	r2,340
  801ed0:	11000836 	bltu	r2,r4,801ef4 <_malloc_r+0x71c>
  801ed4:	2804d3fa 	srli	r2,r5,15
  801ed8:	11001dc4 	addi	r4,r2,119
  801edc:	200690fa 	slli	r3,r4,3
  801ee0:	003f7306 	br	801cb0 <_malloc_r+0x4d8>
  801ee4:	0104303a 	nor	r2,zero,r4
  801ee8:	388e703a 	and	r7,r7,r2
  801eec:	e1c00115 	stw	r7,4(fp)
  801ef0:	003fe906 	br	801e98 <_malloc_r+0x6c0>
  801ef4:	00815504 	movi	r2,1364
  801ef8:	1100032e 	bgeu	r2,r4,801f08 <_malloc_r+0x730>
  801efc:	01001f84 	movi	r4,126
  801f00:	00c0fc04 	movi	r3,1008
  801f04:	003f6a06 	br	801cb0 <_malloc_r+0x4d8>
  801f08:	2804d4ba 	srli	r2,r5,18
  801f0c:	11001f04 	addi	r4,r2,124
  801f10:	200690fa 	slli	r3,r4,3
  801f14:	003f6606 	br	801cb0 <_malloc_r+0x4d8>

00801f18 <_open_r>:
  801f18:	defffd04 	addi	sp,sp,-12
  801f1c:	dc000015 	stw	r16,0(sp)
  801f20:	04002074 	movhi	r16,129
  801f24:	84311004 	addi	r16,r16,-15296
  801f28:	dc400115 	stw	r17,4(sp)
  801f2c:	80000015 	stw	zero,0(r16)
  801f30:	2023883a 	mov	r17,r4
  801f34:	2809883a 	mov	r4,r5
  801f38:	300b883a 	mov	r5,r6
  801f3c:	380d883a 	mov	r6,r7
  801f40:	dfc00215 	stw	ra,8(sp)
  801f44:	0804acc0 	call	804acc <open>
  801f48:	1007883a 	mov	r3,r2
  801f4c:	00bfffc4 	movi	r2,-1
  801f50:	18800626 	beq	r3,r2,801f6c <_open_r+0x54>
  801f54:	1805883a 	mov	r2,r3
  801f58:	dfc00217 	ldw	ra,8(sp)
  801f5c:	dc400117 	ldw	r17,4(sp)
  801f60:	dc000017 	ldw	r16,0(sp)
  801f64:	dec00304 	addi	sp,sp,12
  801f68:	f800283a 	ret
  801f6c:	80800017 	ldw	r2,0(r16)
  801f70:	103ff826 	beq	r2,zero,801f54 <_open_r+0x3c>
  801f74:	88800015 	stw	r2,0(r17)
  801f78:	1805883a 	mov	r2,r3
  801f7c:	dfc00217 	ldw	ra,8(sp)
  801f80:	dc400117 	ldw	r17,4(sp)
  801f84:	dc000017 	ldw	r16,0(sp)
  801f88:	dec00304 	addi	sp,sp,12
  801f8c:	f800283a 	ret

00801f90 <_puts_r>:
  801f90:	defff604 	addi	sp,sp,-40
  801f94:	dc400715 	stw	r17,28(sp)
  801f98:	2023883a 	mov	r17,r4
  801f9c:	2809883a 	mov	r4,r5
  801fa0:	dfc00915 	stw	ra,36(sp)
  801fa4:	dcc00815 	stw	r19,32(sp)
  801fa8:	2827883a 	mov	r19,r5
  801fac:	08023e00 	call	8023e0 <strlen>
  801fb0:	89400217 	ldw	r5,8(r17)
  801fb4:	00c02074 	movhi	r3,129
  801fb8:	18e23004 	addi	r3,r3,-30528
  801fbc:	01c00044 	movi	r7,1
  801fc0:	12000044 	addi	r8,r2,1
  801fc4:	d8c00515 	stw	r3,20(sp)
  801fc8:	d9c00615 	stw	r7,24(sp)
  801fcc:	d8c00304 	addi	r3,sp,12
  801fd0:	01c00084 	movi	r7,2
  801fd4:	8809883a 	mov	r4,r17
  801fd8:	d80d883a 	mov	r6,sp
  801fdc:	d8c00015 	stw	r3,0(sp)
  801fe0:	dcc00315 	stw	r19,12(sp)
  801fe4:	da000215 	stw	r8,8(sp)
  801fe8:	d9c00115 	stw	r7,4(sp)
  801fec:	d8800415 	stw	r2,16(sp)
  801ff0:	0802f0c0 	call	802f0c <__sfvwrite_r>
  801ff4:	00ffffc4 	movi	r3,-1
  801ff8:	10000626 	beq	r2,zero,802014 <_puts_r+0x84>
  801ffc:	1805883a 	mov	r2,r3
  802000:	dfc00917 	ldw	ra,36(sp)
  802004:	dcc00817 	ldw	r19,32(sp)
  802008:	dc400717 	ldw	r17,28(sp)
  80200c:	dec00a04 	addi	sp,sp,40
  802010:	f800283a 	ret
  802014:	00c00284 	movi	r3,10
  802018:	1805883a 	mov	r2,r3
  80201c:	dfc00917 	ldw	ra,36(sp)
  802020:	dcc00817 	ldw	r19,32(sp)
  802024:	dc400717 	ldw	r17,28(sp)
  802028:	dec00a04 	addi	sp,sp,40
  80202c:	f800283a 	ret

00802030 <puts>:
  802030:	00802074 	movhi	r2,129
  802034:	10a9e004 	addi	r2,r2,-22656
  802038:	200b883a 	mov	r5,r4
  80203c:	11000017 	ldw	r4,0(r2)
  802040:	0801f901 	jmpi	801f90 <_puts_r>

00802044 <__srefill_r>:
  802044:	defffd04 	addi	sp,sp,-12
  802048:	dc400115 	stw	r17,4(sp)
  80204c:	dc000015 	stw	r16,0(sp)
  802050:	dfc00215 	stw	ra,8(sp)
  802054:	2023883a 	mov	r17,r4
  802058:	2821883a 	mov	r16,r5
  80205c:	20000226 	beq	r4,zero,802068 <__srefill_r+0x24>
  802060:	20800e17 	ldw	r2,56(r4)
  802064:	10004126 	beq	r2,zero,80216c <__srefill_r+0x128>
  802068:	80c0030b 	ldhu	r3,12(r16)
  80206c:	80000115 	stw	zero,4(r16)
  802070:	1880080c 	andi	r2,r3,32
  802074:	1000361e 	bne	r2,zero,802150 <__srefill_r+0x10c>
  802078:	1880010c 	andi	r2,r3,4
  80207c:	1000211e 	bne	r2,zero,802104 <__srefill_r+0xc0>
  802080:	1880040c 	andi	r2,r3,16
  802084:	10005026 	beq	r2,zero,8021c8 <__srefill_r+0x184>
  802088:	1880020c 	andi	r2,r3,8
  80208c:	1000541e 	bne	r2,zero,8021e0 <__srefill_r+0x19c>
  802090:	8080030b 	ldhu	r2,12(r16)
  802094:	10800114 	ori	r2,r2,4
  802098:	8080030d 	sth	r2,12(r16)
  80209c:	80800417 	ldw	r2,16(r16)
  8020a0:	10004526 	beq	r2,zero,8021b8 <__srefill_r+0x174>
  8020a4:	8080030b 	ldhu	r2,12(r16)
  8020a8:	108000cc 	andi	r2,r2,3
  8020ac:	1000361e 	bne	r2,zero,802188 <__srefill_r+0x144>
  8020b0:	81800417 	ldw	r6,16(r16)
  8020b4:	80c00817 	ldw	r3,32(r16)
  8020b8:	81400717 	ldw	r5,28(r16)
  8020bc:	81c00517 	ldw	r7,20(r16)
  8020c0:	8809883a 	mov	r4,r17
  8020c4:	81800015 	stw	r6,0(r16)
  8020c8:	183ee83a 	callr	r3
  8020cc:	80c0030b 	ldhu	r3,12(r16)
  8020d0:	1009883a 	mov	r4,r2
  8020d4:	80800115 	stw	r2,4(r16)
  8020d8:	00b7ffc4 	movi	r2,-8193
  8020dc:	1884703a 	and	r2,r3,r2
  8020e0:	8080030d 	sth	r2,12(r16)
  8020e4:	0100230e 	bge	zero,r4,802174 <__srefill_r+0x130>
  8020e8:	0009883a 	mov	r4,zero
  8020ec:	2005883a 	mov	r2,r4
  8020f0:	dfc00217 	ldw	ra,8(sp)
  8020f4:	dc400117 	ldw	r17,4(sp)
  8020f8:	dc000017 	ldw	r16,0(sp)
  8020fc:	dec00304 	addi	sp,sp,12
  802100:	f800283a 	ret
  802104:	81400c17 	ldw	r5,48(r16)
  802108:	283fe426 	beq	r5,zero,80209c <__srefill_r+0x58>
  80210c:	80801004 	addi	r2,r16,64
  802110:	28800226 	beq	r5,r2,80211c <__srefill_r+0xd8>
  802114:	8809883a 	mov	r4,r17
  802118:	0802bf80 	call	802bf8 <_free_r>
  80211c:	80800f17 	ldw	r2,60(r16)
  802120:	80000c15 	stw	zero,48(r16)
  802124:	80800115 	stw	r2,4(r16)
  802128:	103fdc26 	beq	r2,zero,80209c <__srefill_r+0x58>
  80212c:	80800e17 	ldw	r2,56(r16)
  802130:	0009883a 	mov	r4,zero
  802134:	80800015 	stw	r2,0(r16)
  802138:	2005883a 	mov	r2,r4
  80213c:	dfc00217 	ldw	ra,8(sp)
  802140:	dc400117 	ldw	r17,4(sp)
  802144:	dc000017 	ldw	r16,0(sp)
  802148:	dec00304 	addi	sp,sp,12
  80214c:	f800283a 	ret
  802150:	013fffc4 	movi	r4,-1
  802154:	2005883a 	mov	r2,r4
  802158:	dfc00217 	ldw	ra,8(sp)
  80215c:	dc400117 	ldw	r17,4(sp)
  802160:	dc000017 	ldw	r16,0(sp)
  802164:	dec00304 	addi	sp,sp,12
  802168:	f800283a 	ret
  80216c:	08027d40 	call	8027d4 <__sinit>
  802170:	003fbd06 	br	802068 <__srefill_r+0x24>
  802174:	20000b1e 	bne	r4,zero,8021a4 <__srefill_r+0x160>
  802178:	10800814 	ori	r2,r2,32
  80217c:	013fffc4 	movi	r4,-1
  802180:	8080030d 	sth	r2,12(r16)
  802184:	003fd906 	br	8020ec <__srefill_r+0xa8>
  802188:	00802074 	movhi	r2,129
  80218c:	10a9e104 	addi	r2,r2,-22652
  802190:	11000017 	ldw	r4,0(r2)
  802194:	01402034 	movhi	r5,128
  802198:	29488204 	addi	r5,r5,8712
  80219c:	08034700 	call	803470 <_fwalk>
  8021a0:	003fc306 	br	8020b0 <__srefill_r+0x6c>
  8021a4:	10801014 	ori	r2,r2,64
  8021a8:	013fffc4 	movi	r4,-1
  8021ac:	8080030d 	sth	r2,12(r16)
  8021b0:	80000115 	stw	zero,4(r16)
  8021b4:	003fcd06 	br	8020ec <__srefill_r+0xa8>
  8021b8:	8809883a 	mov	r4,r17
  8021bc:	800b883a 	mov	r5,r16
  8021c0:	08016440 	call	801644 <__smakebuf_r>
  8021c4:	003fb706 	br	8020a4 <__srefill_r+0x60>
  8021c8:	18c01014 	ori	r3,r3,64
  8021cc:	00800244 	movi	r2,9
  8021d0:	013fffc4 	movi	r4,-1
  8021d4:	88800015 	stw	r2,0(r17)
  8021d8:	80c0030d 	sth	r3,12(r16)
  8021dc:	003fc306 	br	8020ec <__srefill_r+0xa8>
  8021e0:	8809883a 	mov	r4,r17
  8021e4:	800b883a 	mov	r5,r16
  8021e8:	080253c0 	call	80253c <_fflush_r>
  8021ec:	103fd81e 	bne	r2,zero,802150 <__srefill_r+0x10c>
  8021f0:	8080030b 	ldhu	r2,12(r16)
  8021f4:	80000215 	stw	zero,8(r16)
  8021f8:	80000615 	stw	zero,24(r16)
  8021fc:	10bffdcc 	andi	r2,r2,65527
  802200:	8080030d 	sth	r2,12(r16)
  802204:	003fa206 	br	802090 <__srefill_r+0x4c>

00802208 <lflush>:
  802208:	20c0030b 	ldhu	r3,12(r4)
  80220c:	01400244 	movi	r5,9
  802210:	0005883a 	mov	r2,zero
  802214:	18c0024c 	andi	r3,r3,9
  802218:	19400126 	beq	r3,r5,802220 <lflush+0x18>
  80221c:	f800283a 	ret
  802220:	08027381 	jmpi	802738 <fflush>

00802224 <_sbrk_r>:
  802224:	defffd04 	addi	sp,sp,-12
  802228:	dc000015 	stw	r16,0(sp)
  80222c:	04002074 	movhi	r16,129
  802230:	84311004 	addi	r16,r16,-15296
  802234:	dc400115 	stw	r17,4(sp)
  802238:	80000015 	stw	zero,0(r16)
  80223c:	2023883a 	mov	r17,r4
  802240:	2809883a 	mov	r4,r5
  802244:	dfc00215 	stw	ra,8(sp)
  802248:	0804e940 	call	804e94 <sbrk>
  80224c:	1007883a 	mov	r3,r2
  802250:	00bfffc4 	movi	r2,-1
  802254:	18800626 	beq	r3,r2,802270 <_sbrk_r+0x4c>
  802258:	1805883a 	mov	r2,r3
  80225c:	dfc00217 	ldw	ra,8(sp)
  802260:	dc400117 	ldw	r17,4(sp)
  802264:	dc000017 	ldw	r16,0(sp)
  802268:	dec00304 	addi	sp,sp,12
  80226c:	f800283a 	ret
  802270:	80800017 	ldw	r2,0(r16)
  802274:	103ff826 	beq	r2,zero,802258 <_sbrk_r+0x34>
  802278:	88800015 	stw	r2,0(r17)
  80227c:	1805883a 	mov	r2,r3
  802280:	dfc00217 	ldw	ra,8(sp)
  802284:	dc400117 	ldw	r17,4(sp)
  802288:	dc000017 	ldw	r16,0(sp)
  80228c:	dec00304 	addi	sp,sp,12
  802290:	f800283a 	ret

00802294 <__sclose>:
  802294:	2940038f 	ldh	r5,14(r5)
  802298:	08024cc1 	jmpi	8024cc <_close_r>

0080229c <__sseek>:
  80229c:	defffe04 	addi	sp,sp,-8
  8022a0:	dc000015 	stw	r16,0(sp)
  8022a4:	2821883a 	mov	r16,r5
  8022a8:	2940038f 	ldh	r5,14(r5)
  8022ac:	dfc00115 	stw	ra,4(sp)
  8022b0:	08035980 	call	803598 <_lseek_r>
  8022b4:	1007883a 	mov	r3,r2
  8022b8:	00bfffc4 	movi	r2,-1
  8022bc:	18800926 	beq	r3,r2,8022e4 <__sseek+0x48>
  8022c0:	8080030b 	ldhu	r2,12(r16)
  8022c4:	80c01415 	stw	r3,80(r16)
  8022c8:	10840014 	ori	r2,r2,4096
  8022cc:	8080030d 	sth	r2,12(r16)
  8022d0:	1805883a 	mov	r2,r3
  8022d4:	dfc00117 	ldw	ra,4(sp)
  8022d8:	dc000017 	ldw	r16,0(sp)
  8022dc:	dec00204 	addi	sp,sp,8
  8022e0:	f800283a 	ret
  8022e4:	8080030b 	ldhu	r2,12(r16)
  8022e8:	10bbffcc 	andi	r2,r2,61439
  8022ec:	8080030d 	sth	r2,12(r16)
  8022f0:	1805883a 	mov	r2,r3
  8022f4:	dfc00117 	ldw	ra,4(sp)
  8022f8:	dc000017 	ldw	r16,0(sp)
  8022fc:	dec00204 	addi	sp,sp,8
  802300:	f800283a 	ret

00802304 <__swrite>:
  802304:	2880030b 	ldhu	r2,12(r5)
  802308:	defffb04 	addi	sp,sp,-20
  80230c:	dcc00315 	stw	r19,12(sp)
  802310:	1080400c 	andi	r2,r2,256
  802314:	dc800215 	stw	r18,8(sp)
  802318:	dc400115 	stw	r17,4(sp)
  80231c:	dc000015 	stw	r16,0(sp)
  802320:	3027883a 	mov	r19,r6
  802324:	3825883a 	mov	r18,r7
  802328:	dfc00415 	stw	ra,16(sp)
  80232c:	2821883a 	mov	r16,r5
  802330:	000d883a 	mov	r6,zero
  802334:	01c00084 	movi	r7,2
  802338:	2023883a 	mov	r17,r4
  80233c:	10000226 	beq	r2,zero,802348 <__swrite+0x44>
  802340:	2940038f 	ldh	r5,14(r5)
  802344:	08035980 	call	803598 <_lseek_r>
  802348:	8080030b 	ldhu	r2,12(r16)
  80234c:	8140038f 	ldh	r5,14(r16)
  802350:	8809883a 	mov	r4,r17
  802354:	10bbffcc 	andi	r2,r2,61439
  802358:	980d883a 	mov	r6,r19
  80235c:	900f883a 	mov	r7,r18
  802360:	8080030d 	sth	r2,12(r16)
  802364:	dfc00417 	ldw	ra,16(sp)
  802368:	dcc00317 	ldw	r19,12(sp)
  80236c:	dc800217 	ldw	r18,8(sp)
  802370:	dc400117 	ldw	r17,4(sp)
  802374:	dc000017 	ldw	r16,0(sp)
  802378:	dec00504 	addi	sp,sp,20
  80237c:	08024541 	jmpi	802454 <_write_r>

00802380 <__sread>:
  802380:	defffe04 	addi	sp,sp,-8
  802384:	dc000015 	stw	r16,0(sp)
  802388:	2821883a 	mov	r16,r5
  80238c:	2940038f 	ldh	r5,14(r5)
  802390:	dfc00115 	stw	ra,4(sp)
  802394:	080390c0 	call	80390c <_read_r>
  802398:	1007883a 	mov	r3,r2
  80239c:	10000816 	blt	r2,zero,8023c0 <__sread+0x40>
  8023a0:	80801417 	ldw	r2,80(r16)
  8023a4:	10c5883a 	add	r2,r2,r3
  8023a8:	80801415 	stw	r2,80(r16)
  8023ac:	1805883a 	mov	r2,r3
  8023b0:	dfc00117 	ldw	ra,4(sp)
  8023b4:	dc000017 	ldw	r16,0(sp)
  8023b8:	dec00204 	addi	sp,sp,8
  8023bc:	f800283a 	ret
  8023c0:	8080030b 	ldhu	r2,12(r16)
  8023c4:	10bbffcc 	andi	r2,r2,61439
  8023c8:	8080030d 	sth	r2,12(r16)
  8023cc:	1805883a 	mov	r2,r3
  8023d0:	dfc00117 	ldw	ra,4(sp)
  8023d4:	dc000017 	ldw	r16,0(sp)
  8023d8:	dec00204 	addi	sp,sp,8
  8023dc:	f800283a 	ret

008023e0 <strlen>:
  8023e0:	208000cc 	andi	r2,r4,3
  8023e4:	2011883a 	mov	r8,r4
  8023e8:	1000161e 	bne	r2,zero,802444 <strlen+0x64>
  8023ec:	20c00017 	ldw	r3,0(r4)
  8023f0:	017fbff4 	movhi	r5,65279
  8023f4:	297fbfc4 	addi	r5,r5,-257
  8023f8:	01e02074 	movhi	r7,32897
  8023fc:	39e02004 	addi	r7,r7,-32640
  802400:	1945883a 	add	r2,r3,r5
  802404:	11c4703a 	and	r2,r2,r7
  802408:	00c6303a 	nor	r3,zero,r3
  80240c:	1886703a 	and	r3,r3,r2
  802410:	18000c1e 	bne	r3,zero,802444 <strlen+0x64>
  802414:	280d883a 	mov	r6,r5
  802418:	380b883a 	mov	r5,r7
  80241c:	21000104 	addi	r4,r4,4
  802420:	20800017 	ldw	r2,0(r4)
  802424:	1187883a 	add	r3,r2,r6
  802428:	1946703a 	and	r3,r3,r5
  80242c:	0084303a 	nor	r2,zero,r2
  802430:	10c4703a 	and	r2,r2,r3
  802434:	103ff926 	beq	r2,zero,80241c <strlen+0x3c>
  802438:	20800007 	ldb	r2,0(r4)
  80243c:	10000326 	beq	r2,zero,80244c <strlen+0x6c>
  802440:	21000044 	addi	r4,r4,1
  802444:	20800007 	ldb	r2,0(r4)
  802448:	103ffd1e 	bne	r2,zero,802440 <strlen+0x60>
  80244c:	2205c83a 	sub	r2,r4,r8
  802450:	f800283a 	ret

00802454 <_write_r>:
  802454:	defffd04 	addi	sp,sp,-12
  802458:	dc000015 	stw	r16,0(sp)
  80245c:	04002074 	movhi	r16,129
  802460:	84311004 	addi	r16,r16,-15296
  802464:	dc400115 	stw	r17,4(sp)
  802468:	80000015 	stw	zero,0(r16)
  80246c:	2023883a 	mov	r17,r4
  802470:	2809883a 	mov	r4,r5
  802474:	300b883a 	mov	r5,r6
  802478:	380d883a 	mov	r6,r7
  80247c:	dfc00215 	stw	ra,8(sp)
  802480:	08050f40 	call	8050f4 <write>
  802484:	1007883a 	mov	r3,r2
  802488:	00bfffc4 	movi	r2,-1
  80248c:	18800626 	beq	r3,r2,8024a8 <_write_r+0x54>
  802490:	1805883a 	mov	r2,r3
  802494:	dfc00217 	ldw	ra,8(sp)
  802498:	dc400117 	ldw	r17,4(sp)
  80249c:	dc000017 	ldw	r16,0(sp)
  8024a0:	dec00304 	addi	sp,sp,12
  8024a4:	f800283a 	ret
  8024a8:	80800017 	ldw	r2,0(r16)
  8024ac:	103ff826 	beq	r2,zero,802490 <_write_r+0x3c>
  8024b0:	88800015 	stw	r2,0(r17)
  8024b4:	1805883a 	mov	r2,r3
  8024b8:	dfc00217 	ldw	ra,8(sp)
  8024bc:	dc400117 	ldw	r17,4(sp)
  8024c0:	dc000017 	ldw	r16,0(sp)
  8024c4:	dec00304 	addi	sp,sp,12
  8024c8:	f800283a 	ret

008024cc <_close_r>:
  8024cc:	defffd04 	addi	sp,sp,-12
  8024d0:	dc000015 	stw	r16,0(sp)
  8024d4:	04002074 	movhi	r16,129
  8024d8:	84311004 	addi	r16,r16,-15296
  8024dc:	dc400115 	stw	r17,4(sp)
  8024e0:	80000015 	stw	zero,0(r16)
  8024e4:	2023883a 	mov	r17,r4
  8024e8:	2809883a 	mov	r4,r5
  8024ec:	dfc00215 	stw	ra,8(sp)
  8024f0:	080432c0 	call	80432c <close>
  8024f4:	1007883a 	mov	r3,r2
  8024f8:	00bfffc4 	movi	r2,-1
  8024fc:	18800626 	beq	r3,r2,802518 <_close_r+0x4c>
  802500:	1805883a 	mov	r2,r3
  802504:	dfc00217 	ldw	ra,8(sp)
  802508:	dc400117 	ldw	r17,4(sp)
  80250c:	dc000017 	ldw	r16,0(sp)
  802510:	dec00304 	addi	sp,sp,12
  802514:	f800283a 	ret
  802518:	80800017 	ldw	r2,0(r16)
  80251c:	103ff826 	beq	r2,zero,802500 <_close_r+0x34>
  802520:	88800015 	stw	r2,0(r17)
  802524:	1805883a 	mov	r2,r3
  802528:	dfc00217 	ldw	ra,8(sp)
  80252c:	dc400117 	ldw	r17,4(sp)
  802530:	dc000017 	ldw	r16,0(sp)
  802534:	dec00304 	addi	sp,sp,12
  802538:	f800283a 	ret

0080253c <_fflush_r>:
  80253c:	defffb04 	addi	sp,sp,-20
  802540:	dcc00315 	stw	r19,12(sp)
  802544:	dc800215 	stw	r18,8(sp)
  802548:	dfc00415 	stw	ra,16(sp)
  80254c:	dc400115 	stw	r17,4(sp)
  802550:	dc000015 	stw	r16,0(sp)
  802554:	2027883a 	mov	r19,r4
  802558:	2825883a 	mov	r18,r5
  80255c:	20000226 	beq	r4,zero,802568 <_fflush_r+0x2c>
  802560:	20800e17 	ldw	r2,56(r4)
  802564:	10005626 	beq	r2,zero,8026c0 <_fflush_r+0x184>
  802568:	9100030b 	ldhu	r4,12(r18)
  80256c:	20ffffcc 	andi	r3,r4,65535
  802570:	18e0001c 	xori	r3,r3,32768
  802574:	18e00004 	addi	r3,r3,-32768
  802578:	1880020c 	andi	r2,r3,8
  80257c:	1000261e 	bne	r2,zero,802618 <_fflush_r+0xdc>
  802580:	90c00117 	ldw	r3,4(r18)
  802584:	20820014 	ori	r2,r4,2048
  802588:	9080030d 	sth	r2,12(r18)
  80258c:	1009883a 	mov	r4,r2
  802590:	00c0400e 	bge	zero,r3,802694 <_fflush_r+0x158>
  802594:	92000a17 	ldw	r8,40(r18)
  802598:	40004026 	beq	r8,zero,80269c <_fflush_r+0x160>
  80259c:	2084000c 	andi	r2,r4,4096
  8025a0:	10005326 	beq	r2,zero,8026f0 <_fflush_r+0x1b4>
  8025a4:	94001417 	ldw	r16,80(r18)
  8025a8:	9080030b 	ldhu	r2,12(r18)
  8025ac:	1080010c 	andi	r2,r2,4
  8025b0:	1000481e 	bne	r2,zero,8026d4 <_fflush_r+0x198>
  8025b4:	91400717 	ldw	r5,28(r18)
  8025b8:	9809883a 	mov	r4,r19
  8025bc:	800d883a 	mov	r6,r16
  8025c0:	000f883a 	mov	r7,zero
  8025c4:	403ee83a 	callr	r8
  8025c8:	8080261e 	bne	r16,r2,802664 <_fflush_r+0x128>
  8025cc:	9080030b 	ldhu	r2,12(r18)
  8025d0:	91000417 	ldw	r4,16(r18)
  8025d4:	90000115 	stw	zero,4(r18)
  8025d8:	10bdffcc 	andi	r2,r2,63487
  8025dc:	10ffffcc 	andi	r3,r2,65535
  8025e0:	18c4000c 	andi	r3,r3,4096
  8025e4:	9080030d 	sth	r2,12(r18)
  8025e8:	91000015 	stw	r4,0(r18)
  8025ec:	18002b26 	beq	r3,zero,80269c <_fflush_r+0x160>
  8025f0:	0007883a 	mov	r3,zero
  8025f4:	1805883a 	mov	r2,r3
  8025f8:	94001415 	stw	r16,80(r18)
  8025fc:	dfc00417 	ldw	ra,16(sp)
  802600:	dcc00317 	ldw	r19,12(sp)
  802604:	dc800217 	ldw	r18,8(sp)
  802608:	dc400117 	ldw	r17,4(sp)
  80260c:	dc000017 	ldw	r16,0(sp)
  802610:	dec00504 	addi	sp,sp,20
  802614:	f800283a 	ret
  802618:	94400417 	ldw	r17,16(r18)
  80261c:	88001f26 	beq	r17,zero,80269c <_fflush_r+0x160>
  802620:	90800017 	ldw	r2,0(r18)
  802624:	18c000cc 	andi	r3,r3,3
  802628:	94400015 	stw	r17,0(r18)
  80262c:	1461c83a 	sub	r16,r2,r17
  802630:	18002526 	beq	r3,zero,8026c8 <_fflush_r+0x18c>
  802634:	0005883a 	mov	r2,zero
  802638:	90800215 	stw	r2,8(r18)
  80263c:	0400170e 	bge	zero,r16,80269c <_fflush_r+0x160>
  802640:	90c00917 	ldw	r3,36(r18)
  802644:	91400717 	ldw	r5,28(r18)
  802648:	880d883a 	mov	r6,r17
  80264c:	800f883a 	mov	r7,r16
  802650:	9809883a 	mov	r4,r19
  802654:	183ee83a 	callr	r3
  802658:	88a3883a 	add	r17,r17,r2
  80265c:	80a1c83a 	sub	r16,r16,r2
  802660:	00bff616 	blt	zero,r2,80263c <_fflush_r+0x100>
  802664:	9080030b 	ldhu	r2,12(r18)
  802668:	00ffffc4 	movi	r3,-1
  80266c:	10801014 	ori	r2,r2,64
  802670:	9080030d 	sth	r2,12(r18)
  802674:	1805883a 	mov	r2,r3
  802678:	dfc00417 	ldw	ra,16(sp)
  80267c:	dcc00317 	ldw	r19,12(sp)
  802680:	dc800217 	ldw	r18,8(sp)
  802684:	dc400117 	ldw	r17,4(sp)
  802688:	dc000017 	ldw	r16,0(sp)
  80268c:	dec00504 	addi	sp,sp,20
  802690:	f800283a 	ret
  802694:	90800f17 	ldw	r2,60(r18)
  802698:	00bfbe16 	blt	zero,r2,802594 <_fflush_r+0x58>
  80269c:	0007883a 	mov	r3,zero
  8026a0:	1805883a 	mov	r2,r3
  8026a4:	dfc00417 	ldw	ra,16(sp)
  8026a8:	dcc00317 	ldw	r19,12(sp)
  8026ac:	dc800217 	ldw	r18,8(sp)
  8026b0:	dc400117 	ldw	r17,4(sp)
  8026b4:	dc000017 	ldw	r16,0(sp)
  8026b8:	dec00504 	addi	sp,sp,20
  8026bc:	f800283a 	ret
  8026c0:	08027d40 	call	8027d4 <__sinit>
  8026c4:	003fa806 	br	802568 <_fflush_r+0x2c>
  8026c8:	90800517 	ldw	r2,20(r18)
  8026cc:	90800215 	stw	r2,8(r18)
  8026d0:	003fda06 	br	80263c <_fflush_r+0x100>
  8026d4:	90800117 	ldw	r2,4(r18)
  8026d8:	90c00c17 	ldw	r3,48(r18)
  8026dc:	80a1c83a 	sub	r16,r16,r2
  8026e0:	183fb426 	beq	r3,zero,8025b4 <_fflush_r+0x78>
  8026e4:	90800f17 	ldw	r2,60(r18)
  8026e8:	80a1c83a 	sub	r16,r16,r2
  8026ec:	003fb106 	br	8025b4 <_fflush_r+0x78>
  8026f0:	91400717 	ldw	r5,28(r18)
  8026f4:	9809883a 	mov	r4,r19
  8026f8:	000d883a 	mov	r6,zero
  8026fc:	01c00044 	movi	r7,1
  802700:	403ee83a 	callr	r8
  802704:	1021883a 	mov	r16,r2
  802708:	00bfffc4 	movi	r2,-1
  80270c:	80800226 	beq	r16,r2,802718 <_fflush_r+0x1dc>
  802710:	92000a17 	ldw	r8,40(r18)
  802714:	003fa406 	br	8025a8 <_fflush_r+0x6c>
  802718:	98c00017 	ldw	r3,0(r19)
  80271c:	00800744 	movi	r2,29
  802720:	18bfde26 	beq	r3,r2,80269c <_fflush_r+0x160>
  802724:	9080030b 	ldhu	r2,12(r18)
  802728:	8007883a 	mov	r3,r16
  80272c:	10801014 	ori	r2,r2,64
  802730:	9080030d 	sth	r2,12(r18)
  802734:	003fcf06 	br	802674 <_fflush_r+0x138>

00802738 <fflush>:
  802738:	01402034 	movhi	r5,128
  80273c:	29494f04 	addi	r5,r5,9532
  802740:	2007883a 	mov	r3,r4
  802744:	20000526 	beq	r4,zero,80275c <fflush+0x24>
  802748:	00802074 	movhi	r2,129
  80274c:	10a9e004 	addi	r2,r2,-22656
  802750:	11000017 	ldw	r4,0(r2)
  802754:	180b883a 	mov	r5,r3
  802758:	080253c1 	jmpi	80253c <_fflush_r>
  80275c:	00802074 	movhi	r2,129
  802760:	10a9e104 	addi	r2,r2,-22652
  802764:	11000017 	ldw	r4,0(r2)
  802768:	08033a81 	jmpi	8033a8 <_fwalk_reent>

0080276c <std>:
  80276c:	00802034 	movhi	r2,128
  802770:	1088a504 	addi	r2,r2,8852
  802774:	20800b15 	stw	r2,44(r4)
  802778:	00802034 	movhi	r2,128
  80277c:	1088e004 	addi	r2,r2,9088
  802780:	20800815 	stw	r2,32(r4)
  802784:	00c02034 	movhi	r3,128
  802788:	18c8c104 	addi	r3,r3,8964
  80278c:	00802034 	movhi	r2,128
  802790:	1088a704 	addi	r2,r2,8860
  802794:	2140030d 	sth	r5,12(r4)
  802798:	2180038d 	sth	r6,14(r4)
  80279c:	20c00915 	stw	r3,36(r4)
  8027a0:	20800a15 	stw	r2,40(r4)
  8027a4:	20000015 	stw	zero,0(r4)
  8027a8:	20000115 	stw	zero,4(r4)
  8027ac:	20000215 	stw	zero,8(r4)
  8027b0:	20000415 	stw	zero,16(r4)
  8027b4:	20000515 	stw	zero,20(r4)
  8027b8:	20000615 	stw	zero,24(r4)
  8027bc:	21000715 	stw	r4,28(r4)
  8027c0:	f800283a 	ret

008027c4 <__sfp_lock_acquire>:
  8027c4:	f800283a 	ret

008027c8 <__sfp_lock_release>:
  8027c8:	f800283a 	ret

008027cc <__sinit_lock_acquire>:
  8027cc:	f800283a 	ret

008027d0 <__sinit_lock_release>:
  8027d0:	f800283a 	ret

008027d4 <__sinit>:
  8027d4:	20800e17 	ldw	r2,56(r4)
  8027d8:	defffd04 	addi	sp,sp,-12
  8027dc:	dc400115 	stw	r17,4(sp)
  8027e0:	dc000015 	stw	r16,0(sp)
  8027e4:	dfc00215 	stw	ra,8(sp)
  8027e8:	04400044 	movi	r17,1
  8027ec:	01400104 	movi	r5,4
  8027f0:	000d883a 	mov	r6,zero
  8027f4:	2021883a 	mov	r16,r4
  8027f8:	2200bb04 	addi	r8,r4,748
  8027fc:	200f883a 	mov	r7,r4
  802800:	10000526 	beq	r2,zero,802818 <__sinit+0x44>
  802804:	dfc00217 	ldw	ra,8(sp)
  802808:	dc400117 	ldw	r17,4(sp)
  80280c:	dc000017 	ldw	r16,0(sp)
  802810:	dec00304 	addi	sp,sp,12
  802814:	f800283a 	ret
  802818:	21000117 	ldw	r4,4(r4)
  80281c:	00802034 	movhi	r2,128
  802820:	108a2e04 	addi	r2,r2,10424
  802824:	00c000c4 	movi	r3,3
  802828:	80800f15 	stw	r2,60(r16)
  80282c:	80c0b915 	stw	r3,740(r16)
  802830:	8200ba15 	stw	r8,744(r16)
  802834:	84400e15 	stw	r17,56(r16)
  802838:	8000b815 	stw	zero,736(r16)
  80283c:	080276c0 	call	80276c <std>
  802840:	81000217 	ldw	r4,8(r16)
  802844:	880d883a 	mov	r6,r17
  802848:	800f883a 	mov	r7,r16
  80284c:	01400284 	movi	r5,10
  802850:	080276c0 	call	80276c <std>
  802854:	81000317 	ldw	r4,12(r16)
  802858:	800f883a 	mov	r7,r16
  80285c:	01400484 	movi	r5,18
  802860:	01800084 	movi	r6,2
  802864:	dfc00217 	ldw	ra,8(sp)
  802868:	dc400117 	ldw	r17,4(sp)
  80286c:	dc000017 	ldw	r16,0(sp)
  802870:	dec00304 	addi	sp,sp,12
  802874:	080276c1 	jmpi	80276c <std>

00802878 <__fp_lock>:
  802878:	0005883a 	mov	r2,zero
  80287c:	f800283a 	ret

00802880 <__fp_unlock>:
  802880:	0005883a 	mov	r2,zero
  802884:	f800283a 	ret

00802888 <__fp_unlock_all>:
  802888:	00802074 	movhi	r2,129
  80288c:	10a9e004 	addi	r2,r2,-22656
  802890:	11000017 	ldw	r4,0(r2)
  802894:	01402034 	movhi	r5,128
  802898:	294a2004 	addi	r5,r5,10368
  80289c:	08034701 	jmpi	803470 <_fwalk>

008028a0 <__fp_lock_all>:
  8028a0:	00802074 	movhi	r2,129
  8028a4:	10a9e004 	addi	r2,r2,-22656
  8028a8:	11000017 	ldw	r4,0(r2)
  8028ac:	01402034 	movhi	r5,128
  8028b0:	294a1e04 	addi	r5,r5,10360
  8028b4:	08034701 	jmpi	803470 <_fwalk>

008028b8 <_cleanup_r>:
  8028b8:	01402034 	movhi	r5,128
  8028bc:	29507104 	addi	r5,r5,16836
  8028c0:	08034701 	jmpi	803470 <_fwalk>

008028c4 <_cleanup>:
  8028c4:	00802074 	movhi	r2,129
  8028c8:	10a9e104 	addi	r2,r2,-22652
  8028cc:	11000017 	ldw	r4,0(r2)
  8028d0:	08028b81 	jmpi	8028b8 <_cleanup_r>

008028d4 <__sfmoreglue>:
  8028d4:	defffc04 	addi	sp,sp,-16
  8028d8:	dc400115 	stw	r17,4(sp)
  8028dc:	2c401724 	muli	r17,r5,92
  8028e0:	dc800215 	stw	r18,8(sp)
  8028e4:	2825883a 	mov	r18,r5
  8028e8:	89400304 	addi	r5,r17,12
  8028ec:	dc000015 	stw	r16,0(sp)
  8028f0:	dfc00315 	stw	ra,12(sp)
  8028f4:	08017d80 	call	8017d8 <_malloc_r>
  8028f8:	0021883a 	mov	r16,zero
  8028fc:	880d883a 	mov	r6,r17
  802900:	000b883a 	mov	r5,zero
  802904:	10000626 	beq	r2,zero,802920 <__sfmoreglue+0x4c>
  802908:	11000304 	addi	r4,r2,12
  80290c:	14800115 	stw	r18,4(r2)
  802910:	10000015 	stw	zero,0(r2)
  802914:	11000215 	stw	r4,8(r2)
  802918:	1021883a 	mov	r16,r2
  80291c:	08038740 	call	803874 <memset>
  802920:	8005883a 	mov	r2,r16
  802924:	dfc00317 	ldw	ra,12(sp)
  802928:	dc800217 	ldw	r18,8(sp)
  80292c:	dc400117 	ldw	r17,4(sp)
  802930:	dc000017 	ldw	r16,0(sp)
  802934:	dec00404 	addi	sp,sp,16
  802938:	f800283a 	ret

0080293c <__sfp>:
  80293c:	defffd04 	addi	sp,sp,-12
  802940:	00802074 	movhi	r2,129
  802944:	10a9e104 	addi	r2,r2,-22652
  802948:	dc000015 	stw	r16,0(sp)
  80294c:	14000017 	ldw	r16,0(r2)
  802950:	dc400115 	stw	r17,4(sp)
  802954:	dfc00215 	stw	ra,8(sp)
  802958:	80800e17 	ldw	r2,56(r16)
  80295c:	2023883a 	mov	r17,r4
  802960:	10002626 	beq	r2,zero,8029fc <__sfp+0xc0>
  802964:	8400b804 	addi	r16,r16,736
  802968:	80800117 	ldw	r2,4(r16)
  80296c:	81000217 	ldw	r4,8(r16)
  802970:	10ffffc4 	addi	r3,r2,-1
  802974:	18000916 	blt	r3,zero,80299c <__sfp+0x60>
  802978:	2080030f 	ldh	r2,12(r4)
  80297c:	10000b26 	beq	r2,zero,8029ac <__sfp+0x70>
  802980:	017fffc4 	movi	r5,-1
  802984:	00000206 	br	802990 <__sfp+0x54>
  802988:	2080030f 	ldh	r2,12(r4)
  80298c:	10000726 	beq	r2,zero,8029ac <__sfp+0x70>
  802990:	18ffffc4 	addi	r3,r3,-1
  802994:	21001704 	addi	r4,r4,92
  802998:	197ffb1e 	bne	r3,r5,802988 <__sfp+0x4c>
  80299c:	80800017 	ldw	r2,0(r16)
  8029a0:	10001926 	beq	r2,zero,802a08 <__sfp+0xcc>
  8029a4:	1021883a 	mov	r16,r2
  8029a8:	003fef06 	br	802968 <__sfp+0x2c>
  8029ac:	00bfffc4 	movi	r2,-1
  8029b0:	00c00044 	movi	r3,1
  8029b4:	2080038d 	sth	r2,14(r4)
  8029b8:	20c0030d 	sth	r3,12(r4)
  8029bc:	20000015 	stw	zero,0(r4)
  8029c0:	20000215 	stw	zero,8(r4)
  8029c4:	20000115 	stw	zero,4(r4)
  8029c8:	20000415 	stw	zero,16(r4)
  8029cc:	20000515 	stw	zero,20(r4)
  8029d0:	20000615 	stw	zero,24(r4)
  8029d4:	20000c15 	stw	zero,48(r4)
  8029d8:	20000d15 	stw	zero,52(r4)
  8029dc:	20001115 	stw	zero,68(r4)
  8029e0:	20001215 	stw	zero,72(r4)
  8029e4:	2005883a 	mov	r2,r4
  8029e8:	dfc00217 	ldw	ra,8(sp)
  8029ec:	dc400117 	ldw	r17,4(sp)
  8029f0:	dc000017 	ldw	r16,0(sp)
  8029f4:	dec00304 	addi	sp,sp,12
  8029f8:	f800283a 	ret
  8029fc:	8009883a 	mov	r4,r16
  802a00:	08027d40 	call	8027d4 <__sinit>
  802a04:	003fd706 	br	802964 <__sfp+0x28>
  802a08:	8809883a 	mov	r4,r17
  802a0c:	01400104 	movi	r5,4
  802a10:	08028d40 	call	8028d4 <__sfmoreglue>
  802a14:	80800015 	stw	r2,0(r16)
  802a18:	103fe21e 	bne	r2,zero,8029a4 <__sfp+0x68>
  802a1c:	00800304 	movi	r2,12
  802a20:	0009883a 	mov	r4,zero
  802a24:	88800015 	stw	r2,0(r17)
  802a28:	003fee06 	br	8029e4 <__sfp+0xa8>

00802a2c <__sflags>:
  802a2c:	28c00007 	ldb	r3,0(r5)
  802a30:	00801c84 	movi	r2,114
  802a34:	18800926 	beq	r3,r2,802a5c <__sflags+0x30>
  802a38:	00801dc4 	movi	r2,119
  802a3c:	18801426 	beq	r3,r2,802a90 <__sflags+0x64>
  802a40:	00801844 	movi	r2,97
  802a44:	18801626 	beq	r3,r2,802aa0 <__sflags+0x74>
  802a48:	0007883a 	mov	r3,zero
  802a4c:	00800584 	movi	r2,22
  802a50:	20800015 	stw	r2,0(r4)
  802a54:	1805883a 	mov	r2,r3
  802a58:	f800283a 	ret
  802a5c:	000f883a 	mov	r7,zero
  802a60:	0011883a 	mov	r8,zero
  802a64:	00c00104 	movi	r3,4
  802a68:	28800047 	ldb	r2,1(r5)
  802a6c:	10000426 	beq	r2,zero,802a80 <__sflags+0x54>
  802a70:	01000ac4 	movi	r4,43
  802a74:	11000e26 	beq	r2,r4,802ab0 <__sflags+0x84>
  802a78:	28800087 	ldb	r2,2(r5)
  802a7c:	11000c26 	beq	r2,r4,802ab0 <__sflags+0x84>
  802a80:	3a04b03a 	or	r2,r7,r8
  802a84:	30800015 	stw	r2,0(r6)
  802a88:	1805883a 	mov	r2,r3
  802a8c:	f800283a 	ret
  802a90:	01c00044 	movi	r7,1
  802a94:	02018004 	movi	r8,1536
  802a98:	00c00204 	movi	r3,8
  802a9c:	003ff206 	br	802a68 <__sflags+0x3c>
  802aa0:	01c00044 	movi	r7,1
  802aa4:	02008204 	movi	r8,520
  802aa8:	00c04204 	movi	r3,264
  802aac:	003fee06 	br	802a68 <__sflags+0x3c>
  802ab0:	00bffcc4 	movi	r2,-13
  802ab4:	1884703a 	and	r2,r3,r2
  802ab8:	01c00084 	movi	r7,2
  802abc:	10c00414 	ori	r3,r2,16
  802ac0:	3a04b03a 	or	r2,r7,r8
  802ac4:	30800015 	stw	r2,0(r6)
  802ac8:	003fef06 	br	802a88 <__sflags+0x5c>

00802acc <_malloc_trim_r>:
  802acc:	defffb04 	addi	sp,sp,-20
  802ad0:	dcc00315 	stw	r19,12(sp)
  802ad4:	04c02074 	movhi	r19,129
  802ad8:	9ce3e304 	addi	r19,r19,-28788
  802adc:	dc800215 	stw	r18,8(sp)
  802ae0:	dc400115 	stw	r17,4(sp)
  802ae4:	dc000015 	stw	r16,0(sp)
  802ae8:	2823883a 	mov	r17,r5
  802aec:	2025883a 	mov	r18,r4
  802af0:	dfc00415 	stw	ra,16(sp)
  802af4:	08049b00 	call	8049b0 <__malloc_lock>
  802af8:	98800217 	ldw	r2,8(r19)
  802afc:	9009883a 	mov	r4,r18
  802b00:	000b883a 	mov	r5,zero
  802b04:	10c00117 	ldw	r3,4(r2)
  802b08:	00bfff04 	movi	r2,-4
  802b0c:	18a0703a 	and	r16,r3,r2
  802b10:	8463c83a 	sub	r17,r16,r17
  802b14:	8c43fbc4 	addi	r17,r17,4079
  802b18:	8822d33a 	srli	r17,r17,12
  802b1c:	0083ffc4 	movi	r2,4095
  802b20:	8c7fffc4 	addi	r17,r17,-1
  802b24:	8822933a 	slli	r17,r17,12
  802b28:	1440060e 	bge	r2,r17,802b44 <_malloc_trim_r+0x78>
  802b2c:	08022240 	call	802224 <_sbrk_r>
  802b30:	98c00217 	ldw	r3,8(r19)
  802b34:	9009883a 	mov	r4,r18
  802b38:	044bc83a 	sub	r5,zero,r17
  802b3c:	80c7883a 	add	r3,r16,r3
  802b40:	10c00926 	beq	r2,r3,802b68 <_malloc_trim_r+0x9c>
  802b44:	08049d00 	call	8049d0 <__malloc_unlock>
  802b48:	0005883a 	mov	r2,zero
  802b4c:	dfc00417 	ldw	ra,16(sp)
  802b50:	dcc00317 	ldw	r19,12(sp)
  802b54:	dc800217 	ldw	r18,8(sp)
  802b58:	dc400117 	ldw	r17,4(sp)
  802b5c:	dc000017 	ldw	r16,0(sp)
  802b60:	dec00504 	addi	sp,sp,20
  802b64:	f800283a 	ret
  802b68:	9009883a 	mov	r4,r18
  802b6c:	08022240 	call	802224 <_sbrk_r>
  802b70:	844dc83a 	sub	r6,r16,r17
  802b74:	00ffffc4 	movi	r3,-1
  802b78:	9009883a 	mov	r4,r18
  802b7c:	000b883a 	mov	r5,zero
  802b80:	01c02074 	movhi	r7,129
  802b84:	39f13e04 	addi	r7,r7,-15112
  802b88:	31800054 	ori	r6,r6,1
  802b8c:	10c00926 	beq	r2,r3,802bb4 <_malloc_trim_r+0xe8>
  802b90:	38800017 	ldw	r2,0(r7)
  802b94:	98c00217 	ldw	r3,8(r19)
  802b98:	9009883a 	mov	r4,r18
  802b9c:	1445c83a 	sub	r2,r2,r17
  802ba0:	38800015 	stw	r2,0(r7)
  802ba4:	19800115 	stw	r6,4(r3)
  802ba8:	08049d00 	call	8049d0 <__malloc_unlock>
  802bac:	00800044 	movi	r2,1
  802bb0:	003fe606 	br	802b4c <_malloc_trim_r+0x80>
  802bb4:	08022240 	call	802224 <_sbrk_r>
  802bb8:	99800217 	ldw	r6,8(r19)
  802bbc:	100f883a 	mov	r7,r2
  802bc0:	9009883a 	mov	r4,r18
  802bc4:	1187c83a 	sub	r3,r2,r6
  802bc8:	008003c4 	movi	r2,15
  802bcc:	19400054 	ori	r5,r3,1
  802bd0:	10ffdc0e 	bge	r2,r3,802b44 <_malloc_trim_r+0x78>
  802bd4:	00802074 	movhi	r2,129
  802bd8:	10a9e304 	addi	r2,r2,-22644
  802bdc:	10c00017 	ldw	r3,0(r2)
  802be0:	00802074 	movhi	r2,129
  802be4:	10b13e04 	addi	r2,r2,-15112
  802be8:	31400115 	stw	r5,4(r6)
  802bec:	38c7c83a 	sub	r3,r7,r3
  802bf0:	10c00015 	stw	r3,0(r2)
  802bf4:	003fd306 	br	802b44 <_malloc_trim_r+0x78>

00802bf8 <_free_r>:
  802bf8:	defffd04 	addi	sp,sp,-12
  802bfc:	dc400115 	stw	r17,4(sp)
  802c00:	dc000015 	stw	r16,0(sp)
  802c04:	dfc00215 	stw	ra,8(sp)
  802c08:	2821883a 	mov	r16,r5
  802c0c:	2023883a 	mov	r17,r4
  802c10:	28005a26 	beq	r5,zero,802d7c <_free_r+0x184>
  802c14:	08049b00 	call	8049b0 <__malloc_lock>
  802c18:	823ffe04 	addi	r8,r16,-8
  802c1c:	41400117 	ldw	r5,4(r8)
  802c20:	00bfff84 	movi	r2,-2
  802c24:	02802074 	movhi	r10,129
  802c28:	52a3e304 	addi	r10,r10,-28788
  802c2c:	288e703a 	and	r7,r5,r2
  802c30:	41cd883a 	add	r6,r8,r7
  802c34:	30c00117 	ldw	r3,4(r6)
  802c38:	51000217 	ldw	r4,8(r10)
  802c3c:	00bfff04 	movi	r2,-4
  802c40:	1892703a 	and	r9,r3,r2
  802c44:	5017883a 	mov	r11,r10
  802c48:	31006726 	beq	r6,r4,802de8 <_free_r+0x1f0>
  802c4c:	2880004c 	andi	r2,r5,1
  802c50:	1005003a 	cmpeq	r2,r2,zero
  802c54:	32400115 	stw	r9,4(r6)
  802c58:	10001a1e 	bne	r2,zero,802cc4 <_free_r+0xcc>
  802c5c:	000b883a 	mov	r5,zero
  802c60:	3247883a 	add	r3,r6,r9
  802c64:	18800117 	ldw	r2,4(r3)
  802c68:	1080004c 	andi	r2,r2,1
  802c6c:	1000231e 	bne	r2,zero,802cfc <_free_r+0x104>
  802c70:	280ac03a 	cmpne	r5,r5,zero
  802c74:	3a4f883a 	add	r7,r7,r9
  802c78:	2800451e 	bne	r5,zero,802d90 <_free_r+0x198>
  802c7c:	31000217 	ldw	r4,8(r6)
  802c80:	00802074 	movhi	r2,129
  802c84:	10a3e504 	addi	r2,r2,-28780
  802c88:	20807b26 	beq	r4,r2,802e78 <_free_r+0x280>
  802c8c:	30800317 	ldw	r2,12(r6)
  802c90:	3a07883a 	add	r3,r7,r8
  802c94:	19c00015 	stw	r7,0(r3)
  802c98:	11000215 	stw	r4,8(r2)
  802c9c:	20800315 	stw	r2,12(r4)
  802ca0:	38800054 	ori	r2,r7,1
  802ca4:	40800115 	stw	r2,4(r8)
  802ca8:	28001a26 	beq	r5,zero,802d14 <_free_r+0x11c>
  802cac:	8809883a 	mov	r4,r17
  802cb0:	dfc00217 	ldw	ra,8(sp)
  802cb4:	dc400117 	ldw	r17,4(sp)
  802cb8:	dc000017 	ldw	r16,0(sp)
  802cbc:	dec00304 	addi	sp,sp,12
  802cc0:	08049d01 	jmpi	8049d0 <__malloc_unlock>
  802cc4:	80bffe17 	ldw	r2,-8(r16)
  802cc8:	50c00204 	addi	r3,r10,8
  802ccc:	4091c83a 	sub	r8,r8,r2
  802cd0:	41000217 	ldw	r4,8(r8)
  802cd4:	388f883a 	add	r7,r7,r2
  802cd8:	20c06126 	beq	r4,r3,802e60 <_free_r+0x268>
  802cdc:	40800317 	ldw	r2,12(r8)
  802ce0:	3247883a 	add	r3,r6,r9
  802ce4:	000b883a 	mov	r5,zero
  802ce8:	11000215 	stw	r4,8(r2)
  802cec:	20800315 	stw	r2,12(r4)
  802cf0:	18800117 	ldw	r2,4(r3)
  802cf4:	1080004c 	andi	r2,r2,1
  802cf8:	103fdd26 	beq	r2,zero,802c70 <_free_r+0x78>
  802cfc:	38800054 	ori	r2,r7,1
  802d00:	3a07883a 	add	r3,r7,r8
  802d04:	280ac03a 	cmpne	r5,r5,zero
  802d08:	40800115 	stw	r2,4(r8)
  802d0c:	19c00015 	stw	r7,0(r3)
  802d10:	283fe61e 	bne	r5,zero,802cac <_free_r+0xb4>
  802d14:	00807fc4 	movi	r2,511
  802d18:	11c01f2e 	bgeu	r2,r7,802d98 <_free_r+0x1a0>
  802d1c:	3806d27a 	srli	r3,r7,9
  802d20:	1800481e 	bne	r3,zero,802e44 <_free_r+0x24c>
  802d24:	3804d0fa 	srli	r2,r7,3
  802d28:	100690fa 	slli	r3,r2,3
  802d2c:	1acd883a 	add	r6,r3,r11
  802d30:	31400217 	ldw	r5,8(r6)
  802d34:	31405926 	beq	r6,r5,802e9c <_free_r+0x2a4>
  802d38:	28800117 	ldw	r2,4(r5)
  802d3c:	00ffff04 	movi	r3,-4
  802d40:	10c4703a 	and	r2,r2,r3
  802d44:	3880022e 	bgeu	r7,r2,802d50 <_free_r+0x158>
  802d48:	29400217 	ldw	r5,8(r5)
  802d4c:	317ffa1e 	bne	r6,r5,802d38 <_free_r+0x140>
  802d50:	29800317 	ldw	r6,12(r5)
  802d54:	41800315 	stw	r6,12(r8)
  802d58:	41400215 	stw	r5,8(r8)
  802d5c:	8809883a 	mov	r4,r17
  802d60:	2a000315 	stw	r8,12(r5)
  802d64:	32000215 	stw	r8,8(r6)
  802d68:	dfc00217 	ldw	ra,8(sp)
  802d6c:	dc400117 	ldw	r17,4(sp)
  802d70:	dc000017 	ldw	r16,0(sp)
  802d74:	dec00304 	addi	sp,sp,12
  802d78:	08049d01 	jmpi	8049d0 <__malloc_unlock>
  802d7c:	dfc00217 	ldw	ra,8(sp)
  802d80:	dc400117 	ldw	r17,4(sp)
  802d84:	dc000017 	ldw	r16,0(sp)
  802d88:	dec00304 	addi	sp,sp,12
  802d8c:	f800283a 	ret
  802d90:	31000217 	ldw	r4,8(r6)
  802d94:	003fbd06 	br	802c8c <_free_r+0x94>
  802d98:	3806d0fa 	srli	r3,r7,3
  802d9c:	00800044 	movi	r2,1
  802da0:	51400117 	ldw	r5,4(r10)
  802da4:	180890fa 	slli	r4,r3,3
  802da8:	1807d0ba 	srai	r3,r3,2
  802dac:	22c9883a 	add	r4,r4,r11
  802db0:	21800217 	ldw	r6,8(r4)
  802db4:	10c4983a 	sll	r2,r2,r3
  802db8:	41000315 	stw	r4,12(r8)
  802dbc:	41800215 	stw	r6,8(r8)
  802dc0:	288ab03a 	or	r5,r5,r2
  802dc4:	22000215 	stw	r8,8(r4)
  802dc8:	8809883a 	mov	r4,r17
  802dcc:	51400115 	stw	r5,4(r10)
  802dd0:	32000315 	stw	r8,12(r6)
  802dd4:	dfc00217 	ldw	ra,8(sp)
  802dd8:	dc400117 	ldw	r17,4(sp)
  802ddc:	dc000017 	ldw	r16,0(sp)
  802de0:	dec00304 	addi	sp,sp,12
  802de4:	08049d01 	jmpi	8049d0 <__malloc_unlock>
  802de8:	2880004c 	andi	r2,r5,1
  802dec:	3a4d883a 	add	r6,r7,r9
  802df0:	1000071e 	bne	r2,zero,802e10 <_free_r+0x218>
  802df4:	80bffe17 	ldw	r2,-8(r16)
  802df8:	4091c83a 	sub	r8,r8,r2
  802dfc:	41000317 	ldw	r4,12(r8)
  802e00:	40c00217 	ldw	r3,8(r8)
  802e04:	308d883a 	add	r6,r6,r2
  802e08:	20c00215 	stw	r3,8(r4)
  802e0c:	19000315 	stw	r4,12(r3)
  802e10:	00802074 	movhi	r2,129
  802e14:	10a9e204 	addi	r2,r2,-22648
  802e18:	11000017 	ldw	r4,0(r2)
  802e1c:	30c00054 	ori	r3,r6,1
  802e20:	52000215 	stw	r8,8(r10)
  802e24:	40c00115 	stw	r3,4(r8)
  802e28:	313fa036 	bltu	r6,r4,802cac <_free_r+0xb4>
  802e2c:	00802074 	movhi	r2,129
  802e30:	10b11104 	addi	r2,r2,-15292
  802e34:	11400017 	ldw	r5,0(r2)
  802e38:	8809883a 	mov	r4,r17
  802e3c:	0802acc0 	call	802acc <_malloc_trim_r>
  802e40:	003f9a06 	br	802cac <_free_r+0xb4>
  802e44:	00800104 	movi	r2,4
  802e48:	10c0072e 	bgeu	r2,r3,802e68 <_free_r+0x270>
  802e4c:	00800504 	movi	r2,20
  802e50:	10c01936 	bltu	r2,r3,802eb8 <_free_r+0x2c0>
  802e54:	188016c4 	addi	r2,r3,91
  802e58:	100690fa 	slli	r3,r2,3
  802e5c:	003fb306 	br	802d2c <_free_r+0x134>
  802e60:	01400044 	movi	r5,1
  802e64:	003f7e06 	br	802c60 <_free_r+0x68>
  802e68:	3804d1ba 	srli	r2,r7,6
  802e6c:	10800e04 	addi	r2,r2,56
  802e70:	100690fa 	slli	r3,r2,3
  802e74:	003fad06 	br	802d2c <_free_r+0x134>
  802e78:	22000315 	stw	r8,12(r4)
  802e7c:	22000215 	stw	r8,8(r4)
  802e80:	3a05883a 	add	r2,r7,r8
  802e84:	38c00054 	ori	r3,r7,1
  802e88:	11c00015 	stw	r7,0(r2)
  802e8c:	41000215 	stw	r4,8(r8)
  802e90:	40c00115 	stw	r3,4(r8)
  802e94:	41000315 	stw	r4,12(r8)
  802e98:	003f8406 	br	802cac <_free_r+0xb4>
  802e9c:	1005d0ba 	srai	r2,r2,2
  802ea0:	00c00044 	movi	r3,1
  802ea4:	51000117 	ldw	r4,4(r10)
  802ea8:	1886983a 	sll	r3,r3,r2
  802eac:	20c8b03a 	or	r4,r4,r3
  802eb0:	51000115 	stw	r4,4(r10)
  802eb4:	003fa706 	br	802d54 <_free_r+0x15c>
  802eb8:	00801504 	movi	r2,84
  802ebc:	10c00436 	bltu	r2,r3,802ed0 <_free_r+0x2d8>
  802ec0:	3804d33a 	srli	r2,r7,12
  802ec4:	10801b84 	addi	r2,r2,110
  802ec8:	100690fa 	slli	r3,r2,3
  802ecc:	003f9706 	br	802d2c <_free_r+0x134>
  802ed0:	00805504 	movi	r2,340
  802ed4:	10c00436 	bltu	r2,r3,802ee8 <_free_r+0x2f0>
  802ed8:	3804d3fa 	srli	r2,r7,15
  802edc:	10801dc4 	addi	r2,r2,119
  802ee0:	100690fa 	slli	r3,r2,3
  802ee4:	003f9106 	br	802d2c <_free_r+0x134>
  802ee8:	00815504 	movi	r2,1364
  802eec:	10c0032e 	bgeu	r2,r3,802efc <_free_r+0x304>
  802ef0:	00801f84 	movi	r2,126
  802ef4:	00c0fc04 	movi	r3,1008
  802ef8:	003f8c06 	br	802d2c <_free_r+0x134>
  802efc:	3804d4ba 	srli	r2,r7,18
  802f00:	10801f04 	addi	r2,r2,124
  802f04:	100690fa 	slli	r3,r2,3
  802f08:	003f8806 	br	802d2c <_free_r+0x134>

00802f0c <__sfvwrite_r>:
  802f0c:	30800217 	ldw	r2,8(r6)
  802f10:	defff504 	addi	sp,sp,-44
  802f14:	df000915 	stw	fp,36(sp)
  802f18:	dd800715 	stw	r22,28(sp)
  802f1c:	dc800315 	stw	r18,12(sp)
  802f20:	dfc00a15 	stw	ra,40(sp)
  802f24:	ddc00815 	stw	r23,32(sp)
  802f28:	dd400615 	stw	r21,24(sp)
  802f2c:	dd000515 	stw	r20,20(sp)
  802f30:	dcc00415 	stw	r19,16(sp)
  802f34:	dc400215 	stw	r17,8(sp)
  802f38:	dc000115 	stw	r16,4(sp)
  802f3c:	302d883a 	mov	r22,r6
  802f40:	2039883a 	mov	fp,r4
  802f44:	2825883a 	mov	r18,r5
  802f48:	10001c26 	beq	r2,zero,802fbc <__sfvwrite_r+0xb0>
  802f4c:	29c0030b 	ldhu	r7,12(r5)
  802f50:	3880020c 	andi	r2,r7,8
  802f54:	10002726 	beq	r2,zero,802ff4 <__sfvwrite_r+0xe8>
  802f58:	28800417 	ldw	r2,16(r5)
  802f5c:	10002526 	beq	r2,zero,802ff4 <__sfvwrite_r+0xe8>
  802f60:	3880008c 	andi	r2,r7,2
  802f64:	b5400017 	ldw	r21,0(r22)
  802f68:	10002826 	beq	r2,zero,80300c <__sfvwrite_r+0x100>
  802f6c:	0021883a 	mov	r16,zero
  802f70:	0023883a 	mov	r17,zero
  802f74:	880d883a 	mov	r6,r17
  802f78:	e009883a 	mov	r4,fp
  802f7c:	00810004 	movi	r2,1024
  802f80:	80006e26 	beq	r16,zero,80313c <__sfvwrite_r+0x230>
  802f84:	800f883a 	mov	r7,r16
  802f88:	91400717 	ldw	r5,28(r18)
  802f8c:	1400012e 	bgeu	r2,r16,802f94 <__sfvwrite_r+0x88>
  802f90:	100f883a 	mov	r7,r2
  802f94:	90c00917 	ldw	r3,36(r18)
  802f98:	183ee83a 	callr	r3
  802f9c:	1007883a 	mov	r3,r2
  802fa0:	80a1c83a 	sub	r16,r16,r2
  802fa4:	88a3883a 	add	r17,r17,r2
  802fa8:	00806d0e 	bge	zero,r2,803160 <__sfvwrite_r+0x254>
  802fac:	b0800217 	ldw	r2,8(r22)
  802fb0:	10c5c83a 	sub	r2,r2,r3
  802fb4:	b0800215 	stw	r2,8(r22)
  802fb8:	103fee1e 	bne	r2,zero,802f74 <__sfvwrite_r+0x68>
  802fbc:	0009883a 	mov	r4,zero
  802fc0:	2005883a 	mov	r2,r4
  802fc4:	dfc00a17 	ldw	ra,40(sp)
  802fc8:	df000917 	ldw	fp,36(sp)
  802fcc:	ddc00817 	ldw	r23,32(sp)
  802fd0:	dd800717 	ldw	r22,28(sp)
  802fd4:	dd400617 	ldw	r21,24(sp)
  802fd8:	dd000517 	ldw	r20,20(sp)
  802fdc:	dcc00417 	ldw	r19,16(sp)
  802fe0:	dc800317 	ldw	r18,12(sp)
  802fe4:	dc400217 	ldw	r17,8(sp)
  802fe8:	dc000117 	ldw	r16,4(sp)
  802fec:	dec00b04 	addi	sp,sp,44
  802ff0:	f800283a 	ret
  802ff4:	0803f780 	call	803f78 <__swsetup_r>
  802ff8:	1000e41e 	bne	r2,zero,80338c <__sfvwrite_r+0x480>
  802ffc:	91c0030b 	ldhu	r7,12(r18)
  803000:	b5400017 	ldw	r21,0(r22)
  803004:	3880008c 	andi	r2,r7,2
  803008:	103fd81e 	bne	r2,zero,802f6c <__sfvwrite_r+0x60>
  80300c:	3880004c 	andi	r2,r7,1
  803010:	1005003a 	cmpeq	r2,r2,zero
  803014:	10005726 	beq	r2,zero,803174 <__sfvwrite_r+0x268>
  803018:	0029883a 	mov	r20,zero
  80301c:	002f883a 	mov	r23,zero
  803020:	a0004226 	beq	r20,zero,80312c <__sfvwrite_r+0x220>
  803024:	3880800c 	andi	r2,r7,512
  803028:	94000217 	ldw	r16,8(r18)
  80302c:	10008b26 	beq	r2,zero,80325c <__sfvwrite_r+0x350>
  803030:	800d883a 	mov	r6,r16
  803034:	a400a536 	bltu	r20,r16,8032cc <__sfvwrite_r+0x3c0>
  803038:	3881200c 	andi	r2,r7,1152
  80303c:	10002726 	beq	r2,zero,8030dc <__sfvwrite_r+0x1d0>
  803040:	90800517 	ldw	r2,20(r18)
  803044:	92000417 	ldw	r8,16(r18)
  803048:	91400017 	ldw	r5,0(r18)
  80304c:	1087883a 	add	r3,r2,r2
  803050:	1887883a 	add	r3,r3,r2
  803054:	1808d7fa 	srli	r4,r3,31
  803058:	2a21c83a 	sub	r16,r5,r8
  80305c:	80800044 	addi	r2,r16,1
  803060:	20c9883a 	add	r4,r4,r3
  803064:	2027d07a 	srai	r19,r4,1
  803068:	a085883a 	add	r2,r20,r2
  80306c:	980d883a 	mov	r6,r19
  803070:	9880022e 	bgeu	r19,r2,80307c <__sfvwrite_r+0x170>
  803074:	1027883a 	mov	r19,r2
  803078:	100d883a 	mov	r6,r2
  80307c:	3881000c 	andi	r2,r7,1024
  803080:	1000b826 	beq	r2,zero,803364 <__sfvwrite_r+0x458>
  803084:	300b883a 	mov	r5,r6
  803088:	e009883a 	mov	r4,fp
  80308c:	08017d80 	call	8017d8 <_malloc_r>
  803090:	10003126 	beq	r2,zero,803158 <__sfvwrite_r+0x24c>
  803094:	91400417 	ldw	r5,16(r18)
  803098:	1009883a 	mov	r4,r2
  80309c:	800d883a 	mov	r6,r16
  8030a0:	1023883a 	mov	r17,r2
  8030a4:	08036f40 	call	8036f4 <memcpy>
  8030a8:	90c0030b 	ldhu	r3,12(r18)
  8030ac:	00beffc4 	movi	r2,-1025
  8030b0:	1886703a 	and	r3,r3,r2
  8030b4:	18c02014 	ori	r3,r3,128
  8030b8:	90c0030d 	sth	r3,12(r18)
  8030bc:	9c07c83a 	sub	r3,r19,r16
  8030c0:	8c05883a 	add	r2,r17,r16
  8030c4:	a00d883a 	mov	r6,r20
  8030c8:	a021883a 	mov	r16,r20
  8030cc:	90800015 	stw	r2,0(r18)
  8030d0:	90c00215 	stw	r3,8(r18)
  8030d4:	94400415 	stw	r17,16(r18)
  8030d8:	94c00515 	stw	r19,20(r18)
  8030dc:	91000017 	ldw	r4,0(r18)
  8030e0:	b80b883a 	mov	r5,r23
  8030e4:	a023883a 	mov	r17,r20
  8030e8:	08037940 	call	803794 <memmove>
  8030ec:	90c00217 	ldw	r3,8(r18)
  8030f0:	90800017 	ldw	r2,0(r18)
  8030f4:	a027883a 	mov	r19,r20
  8030f8:	1c07c83a 	sub	r3,r3,r16
  8030fc:	1405883a 	add	r2,r2,r16
  803100:	90c00215 	stw	r3,8(r18)
  803104:	a021883a 	mov	r16,r20
  803108:	90800015 	stw	r2,0(r18)
  80310c:	b0800217 	ldw	r2,8(r22)
  803110:	1405c83a 	sub	r2,r2,r16
  803114:	b0800215 	stw	r2,8(r22)
  803118:	103fa826 	beq	r2,zero,802fbc <__sfvwrite_r+0xb0>
  80311c:	a469c83a 	sub	r20,r20,r17
  803120:	91c0030b 	ldhu	r7,12(r18)
  803124:	bcef883a 	add	r23,r23,r19
  803128:	a03fbe1e 	bne	r20,zero,803024 <__sfvwrite_r+0x118>
  80312c:	adc00017 	ldw	r23,0(r21)
  803130:	ad000117 	ldw	r20,4(r21)
  803134:	ad400204 	addi	r21,r21,8
  803138:	003fb906 	br	803020 <__sfvwrite_r+0x114>
  80313c:	ac400017 	ldw	r17,0(r21)
  803140:	ac000117 	ldw	r16,4(r21)
  803144:	ad400204 	addi	r21,r21,8
  803148:	003f8a06 	br	802f74 <__sfvwrite_r+0x68>
  80314c:	91400417 	ldw	r5,16(r18)
  803150:	e009883a 	mov	r4,fp
  803154:	0802bf80 	call	802bf8 <_free_r>
  803158:	00800304 	movi	r2,12
  80315c:	e0800015 	stw	r2,0(fp)
  803160:	9080030b 	ldhu	r2,12(r18)
  803164:	013fffc4 	movi	r4,-1
  803168:	10801014 	ori	r2,r2,64
  80316c:	9080030d 	sth	r2,12(r18)
  803170:	003f9306 	br	802fc0 <__sfvwrite_r+0xb4>
  803174:	0027883a 	mov	r19,zero
  803178:	002f883a 	mov	r23,zero
  80317c:	d8000015 	stw	zero,0(sp)
  803180:	0029883a 	mov	r20,zero
  803184:	98001e26 	beq	r19,zero,803200 <__sfvwrite_r+0x2f4>
  803188:	d8c00017 	ldw	r3,0(sp)
  80318c:	1804c03a 	cmpne	r2,r3,zero
  803190:	10005e26 	beq	r2,zero,80330c <__sfvwrite_r+0x400>
  803194:	9821883a 	mov	r16,r19
  803198:	a4c0012e 	bgeu	r20,r19,8031a0 <__sfvwrite_r+0x294>
  80319c:	a021883a 	mov	r16,r20
  8031a0:	91000017 	ldw	r4,0(r18)
  8031a4:	90800417 	ldw	r2,16(r18)
  8031a8:	91800217 	ldw	r6,8(r18)
  8031ac:	91c00517 	ldw	r7,20(r18)
  8031b0:	1100022e 	bgeu	r2,r4,8031bc <__sfvwrite_r+0x2b0>
  8031b4:	31e3883a 	add	r17,r6,r7
  8031b8:	8c001616 	blt	r17,r16,803214 <__sfvwrite_r+0x308>
  8031bc:	81c03816 	blt	r16,r7,8032a0 <__sfvwrite_r+0x394>
  8031c0:	90c00917 	ldw	r3,36(r18)
  8031c4:	91400717 	ldw	r5,28(r18)
  8031c8:	e009883a 	mov	r4,fp
  8031cc:	b80d883a 	mov	r6,r23
  8031d0:	183ee83a 	callr	r3
  8031d4:	1023883a 	mov	r17,r2
  8031d8:	00bfe10e 	bge	zero,r2,803160 <__sfvwrite_r+0x254>
  8031dc:	a469c83a 	sub	r20,r20,r17
  8031e0:	a0001826 	beq	r20,zero,803244 <__sfvwrite_r+0x338>
  8031e4:	b0800217 	ldw	r2,8(r22)
  8031e8:	1445c83a 	sub	r2,r2,r17
  8031ec:	b0800215 	stw	r2,8(r22)
  8031f0:	103f7226 	beq	r2,zero,802fbc <__sfvwrite_r+0xb0>
  8031f4:	9c67c83a 	sub	r19,r19,r17
  8031f8:	bc6f883a 	add	r23,r23,r17
  8031fc:	983fe21e 	bne	r19,zero,803188 <__sfvwrite_r+0x27c>
  803200:	adc00017 	ldw	r23,0(r21)
  803204:	acc00117 	ldw	r19,4(r21)
  803208:	ad400204 	addi	r21,r21,8
  80320c:	d8000015 	stw	zero,0(sp)
  803210:	003fdc06 	br	803184 <__sfvwrite_r+0x278>
  803214:	b80b883a 	mov	r5,r23
  803218:	880d883a 	mov	r6,r17
  80321c:	08037940 	call	803794 <memmove>
  803220:	90c00017 	ldw	r3,0(r18)
  803224:	e009883a 	mov	r4,fp
  803228:	900b883a 	mov	r5,r18
  80322c:	1c47883a 	add	r3,r3,r17
  803230:	90c00015 	stw	r3,0(r18)
  803234:	080253c0 	call	80253c <_fflush_r>
  803238:	103fc91e 	bne	r2,zero,803160 <__sfvwrite_r+0x254>
  80323c:	a469c83a 	sub	r20,r20,r17
  803240:	a03fe81e 	bne	r20,zero,8031e4 <__sfvwrite_r+0x2d8>
  803244:	e009883a 	mov	r4,fp
  803248:	900b883a 	mov	r5,r18
  80324c:	080253c0 	call	80253c <_fflush_r>
  803250:	103fc31e 	bne	r2,zero,803160 <__sfvwrite_r+0x254>
  803254:	d8000015 	stw	zero,0(sp)
  803258:	003fe206 	br	8031e4 <__sfvwrite_r+0x2d8>
  80325c:	91000017 	ldw	r4,0(r18)
  803260:	90800417 	ldw	r2,16(r18)
  803264:	1100022e 	bgeu	r2,r4,803270 <__sfvwrite_r+0x364>
  803268:	8023883a 	mov	r17,r16
  80326c:	85003136 	bltu	r16,r20,803334 <__sfvwrite_r+0x428>
  803270:	91c00517 	ldw	r7,20(r18)
  803274:	a1c01836 	bltu	r20,r7,8032d8 <__sfvwrite_r+0x3cc>
  803278:	90c00917 	ldw	r3,36(r18)
  80327c:	91400717 	ldw	r5,28(r18)
  803280:	e009883a 	mov	r4,fp
  803284:	b80d883a 	mov	r6,r23
  803288:	183ee83a 	callr	r3
  80328c:	1021883a 	mov	r16,r2
  803290:	00bfb30e 	bge	zero,r2,803160 <__sfvwrite_r+0x254>
  803294:	1023883a 	mov	r17,r2
  803298:	1027883a 	mov	r19,r2
  80329c:	003f9b06 	br	80310c <__sfvwrite_r+0x200>
  8032a0:	b80b883a 	mov	r5,r23
  8032a4:	800d883a 	mov	r6,r16
  8032a8:	08037940 	call	803794 <memmove>
  8032ac:	90c00217 	ldw	r3,8(r18)
  8032b0:	90800017 	ldw	r2,0(r18)
  8032b4:	8023883a 	mov	r17,r16
  8032b8:	1c07c83a 	sub	r3,r3,r16
  8032bc:	1405883a 	add	r2,r2,r16
  8032c0:	90c00215 	stw	r3,8(r18)
  8032c4:	90800015 	stw	r2,0(r18)
  8032c8:	003fc406 	br	8031dc <__sfvwrite_r+0x2d0>
  8032cc:	a00d883a 	mov	r6,r20
  8032d0:	a021883a 	mov	r16,r20
  8032d4:	003f8106 	br	8030dc <__sfvwrite_r+0x1d0>
  8032d8:	b80b883a 	mov	r5,r23
  8032dc:	a00d883a 	mov	r6,r20
  8032e0:	08037940 	call	803794 <memmove>
  8032e4:	90c00217 	ldw	r3,8(r18)
  8032e8:	90800017 	ldw	r2,0(r18)
  8032ec:	a021883a 	mov	r16,r20
  8032f0:	1d07c83a 	sub	r3,r3,r20
  8032f4:	1505883a 	add	r2,r2,r20
  8032f8:	a023883a 	mov	r17,r20
  8032fc:	a027883a 	mov	r19,r20
  803300:	90c00215 	stw	r3,8(r18)
  803304:	90800015 	stw	r2,0(r18)
  803308:	003f8006 	br	80310c <__sfvwrite_r+0x200>
  80330c:	b809883a 	mov	r4,r23
  803310:	01400284 	movi	r5,10
  803314:	980d883a 	mov	r6,r19
  803318:	08036100 	call	803610 <memchr>
  80331c:	10001726 	beq	r2,zero,80337c <__sfvwrite_r+0x470>
  803320:	15c5c83a 	sub	r2,r2,r23
  803324:	15000044 	addi	r20,r2,1
  803328:	00800044 	movi	r2,1
  80332c:	d8800015 	stw	r2,0(sp)
  803330:	003f9806 	br	803194 <__sfvwrite_r+0x288>
  803334:	b80b883a 	mov	r5,r23
  803338:	800d883a 	mov	r6,r16
  80333c:	08037940 	call	803794 <memmove>
  803340:	90c00017 	ldw	r3,0(r18)
  803344:	e009883a 	mov	r4,fp
  803348:	900b883a 	mov	r5,r18
  80334c:	1c07883a 	add	r3,r3,r16
  803350:	90c00015 	stw	r3,0(r18)
  803354:	8027883a 	mov	r19,r16
  803358:	080253c0 	call	80253c <_fflush_r>
  80335c:	103f6b26 	beq	r2,zero,80310c <__sfvwrite_r+0x200>
  803360:	003f7f06 	br	803160 <__sfvwrite_r+0x254>
  803364:	400b883a 	mov	r5,r8
  803368:	e009883a 	mov	r4,fp
  80336c:	08039840 	call	803984 <_realloc_r>
  803370:	103f7626 	beq	r2,zero,80314c <__sfvwrite_r+0x240>
  803374:	1023883a 	mov	r17,r2
  803378:	003f5006 	br	8030bc <__sfvwrite_r+0x1b0>
  80337c:	00c00044 	movi	r3,1
  803380:	9d000044 	addi	r20,r19,1
  803384:	d8c00015 	stw	r3,0(sp)
  803388:	003f8206 	br	803194 <__sfvwrite_r+0x288>
  80338c:	9080030b 	ldhu	r2,12(r18)
  803390:	00c00244 	movi	r3,9
  803394:	013fffc4 	movi	r4,-1
  803398:	10801014 	ori	r2,r2,64
  80339c:	9080030d 	sth	r2,12(r18)
  8033a0:	e0c00015 	stw	r3,0(fp)
  8033a4:	003f0606 	br	802fc0 <__sfvwrite_r+0xb4>

008033a8 <_fwalk_reent>:
  8033a8:	defff704 	addi	sp,sp,-36
  8033ac:	dcc00315 	stw	r19,12(sp)
  8033b0:	24c0b804 	addi	r19,r4,736
  8033b4:	dd800615 	stw	r22,24(sp)
  8033b8:	dd400515 	stw	r21,20(sp)
  8033bc:	dfc00815 	stw	ra,32(sp)
  8033c0:	ddc00715 	stw	r23,28(sp)
  8033c4:	dd000415 	stw	r20,16(sp)
  8033c8:	dc800215 	stw	r18,8(sp)
  8033cc:	dc400115 	stw	r17,4(sp)
  8033d0:	dc000015 	stw	r16,0(sp)
  8033d4:	202b883a 	mov	r21,r4
  8033d8:	282d883a 	mov	r22,r5
  8033dc:	08027c40 	call	8027c4 <__sfp_lock_acquire>
  8033e0:	98002126 	beq	r19,zero,803468 <_fwalk_reent+0xc0>
  8033e4:	002f883a 	mov	r23,zero
  8033e8:	9c800117 	ldw	r18,4(r19)
  8033ec:	9c000217 	ldw	r16,8(r19)
  8033f0:	90bfffc4 	addi	r2,r18,-1
  8033f4:	10000d16 	blt	r2,zero,80342c <_fwalk_reent+0x84>
  8033f8:	0023883a 	mov	r17,zero
  8033fc:	053fffc4 	movi	r20,-1
  803400:	8080030f 	ldh	r2,12(r16)
  803404:	8c400044 	addi	r17,r17,1
  803408:	10000626 	beq	r2,zero,803424 <_fwalk_reent+0x7c>
  80340c:	8080038f 	ldh	r2,14(r16)
  803410:	800b883a 	mov	r5,r16
  803414:	a809883a 	mov	r4,r21
  803418:	15000226 	beq	r2,r20,803424 <_fwalk_reent+0x7c>
  80341c:	b03ee83a 	callr	r22
  803420:	b8aeb03a 	or	r23,r23,r2
  803424:	84001704 	addi	r16,r16,92
  803428:	947ff51e 	bne	r18,r17,803400 <_fwalk_reent+0x58>
  80342c:	9cc00017 	ldw	r19,0(r19)
  803430:	983fed1e 	bne	r19,zero,8033e8 <_fwalk_reent+0x40>
  803434:	08027c80 	call	8027c8 <__sfp_lock_release>
  803438:	b805883a 	mov	r2,r23
  80343c:	dfc00817 	ldw	ra,32(sp)
  803440:	ddc00717 	ldw	r23,28(sp)
  803444:	dd800617 	ldw	r22,24(sp)
  803448:	dd400517 	ldw	r21,20(sp)
  80344c:	dd000417 	ldw	r20,16(sp)
  803450:	dcc00317 	ldw	r19,12(sp)
  803454:	dc800217 	ldw	r18,8(sp)
  803458:	dc400117 	ldw	r17,4(sp)
  80345c:	dc000017 	ldw	r16,0(sp)
  803460:	dec00904 	addi	sp,sp,36
  803464:	f800283a 	ret
  803468:	002f883a 	mov	r23,zero
  80346c:	003ff106 	br	803434 <_fwalk_reent+0x8c>

00803470 <_fwalk>:
  803470:	defff804 	addi	sp,sp,-32
  803474:	dcc00315 	stw	r19,12(sp)
  803478:	24c0b804 	addi	r19,r4,736
  80347c:	dd400515 	stw	r21,20(sp)
  803480:	dfc00715 	stw	ra,28(sp)
  803484:	dd800615 	stw	r22,24(sp)
  803488:	dd000415 	stw	r20,16(sp)
  80348c:	dc800215 	stw	r18,8(sp)
  803490:	dc400115 	stw	r17,4(sp)
  803494:	dc000015 	stw	r16,0(sp)
  803498:	282b883a 	mov	r21,r5
  80349c:	08027c40 	call	8027c4 <__sfp_lock_acquire>
  8034a0:	98001f26 	beq	r19,zero,803520 <_fwalk+0xb0>
  8034a4:	002d883a 	mov	r22,zero
  8034a8:	9c800117 	ldw	r18,4(r19)
  8034ac:	9c000217 	ldw	r16,8(r19)
  8034b0:	90bfffc4 	addi	r2,r18,-1
  8034b4:	10000c16 	blt	r2,zero,8034e8 <_fwalk+0x78>
  8034b8:	0023883a 	mov	r17,zero
  8034bc:	053fffc4 	movi	r20,-1
  8034c0:	8080030f 	ldh	r2,12(r16)
  8034c4:	8c400044 	addi	r17,r17,1
  8034c8:	10000526 	beq	r2,zero,8034e0 <_fwalk+0x70>
  8034cc:	8080038f 	ldh	r2,14(r16)
  8034d0:	8009883a 	mov	r4,r16
  8034d4:	15000226 	beq	r2,r20,8034e0 <_fwalk+0x70>
  8034d8:	a83ee83a 	callr	r21
  8034dc:	b0acb03a 	or	r22,r22,r2
  8034e0:	84001704 	addi	r16,r16,92
  8034e4:	947ff61e 	bne	r18,r17,8034c0 <_fwalk+0x50>
  8034e8:	9cc00017 	ldw	r19,0(r19)
  8034ec:	983fee1e 	bne	r19,zero,8034a8 <_fwalk+0x38>
  8034f0:	08027c80 	call	8027c8 <__sfp_lock_release>
  8034f4:	b005883a 	mov	r2,r22
  8034f8:	dfc00717 	ldw	ra,28(sp)
  8034fc:	dd800617 	ldw	r22,24(sp)
  803500:	dd400517 	ldw	r21,20(sp)
  803504:	dd000417 	ldw	r20,16(sp)
  803508:	dcc00317 	ldw	r19,12(sp)
  80350c:	dc800217 	ldw	r18,8(sp)
  803510:	dc400117 	ldw	r17,4(sp)
  803514:	dc000017 	ldw	r16,0(sp)
  803518:	dec00804 	addi	sp,sp,32
  80351c:	f800283a 	ret
  803520:	002d883a 	mov	r22,zero
  803524:	003ff206 	br	8034f0 <_fwalk+0x80>

00803528 <_isatty_r>:
  803528:	defffd04 	addi	sp,sp,-12
  80352c:	dc000015 	stw	r16,0(sp)
  803530:	04002074 	movhi	r16,129
  803534:	84311004 	addi	r16,r16,-15296
  803538:	dc400115 	stw	r17,4(sp)
  80353c:	80000015 	stw	zero,0(r16)
  803540:	2023883a 	mov	r17,r4
  803544:	2809883a 	mov	r4,r5
  803548:	dfc00215 	stw	ra,8(sp)
  80354c:	08045e80 	call	8045e8 <isatty>
  803550:	1007883a 	mov	r3,r2
  803554:	00bfffc4 	movi	r2,-1
  803558:	18800626 	beq	r3,r2,803574 <_isatty_r+0x4c>
  80355c:	1805883a 	mov	r2,r3
  803560:	dfc00217 	ldw	ra,8(sp)
  803564:	dc400117 	ldw	r17,4(sp)
  803568:	dc000017 	ldw	r16,0(sp)
  80356c:	dec00304 	addi	sp,sp,12
  803570:	f800283a 	ret
  803574:	80800017 	ldw	r2,0(r16)
  803578:	103ff826 	beq	r2,zero,80355c <_isatty_r+0x34>
  80357c:	88800015 	stw	r2,0(r17)
  803580:	1805883a 	mov	r2,r3
  803584:	dfc00217 	ldw	ra,8(sp)
  803588:	dc400117 	ldw	r17,4(sp)
  80358c:	dc000017 	ldw	r16,0(sp)
  803590:	dec00304 	addi	sp,sp,12
  803594:	f800283a 	ret

00803598 <_lseek_r>:
  803598:	defffd04 	addi	sp,sp,-12
  80359c:	dc000015 	stw	r16,0(sp)
  8035a0:	04002074 	movhi	r16,129
  8035a4:	84311004 	addi	r16,r16,-15296
  8035a8:	dc400115 	stw	r17,4(sp)
  8035ac:	80000015 	stw	zero,0(r16)
  8035b0:	2023883a 	mov	r17,r4
  8035b4:	2809883a 	mov	r4,r5
  8035b8:	300b883a 	mov	r5,r6
  8035bc:	380d883a 	mov	r6,r7
  8035c0:	dfc00215 	stw	ra,8(sp)
  8035c4:	08047f40 	call	8047f4 <lseek>
  8035c8:	1007883a 	mov	r3,r2
  8035cc:	00bfffc4 	movi	r2,-1
  8035d0:	18800626 	beq	r3,r2,8035ec <_lseek_r+0x54>
  8035d4:	1805883a 	mov	r2,r3
  8035d8:	dfc00217 	ldw	ra,8(sp)
  8035dc:	dc400117 	ldw	r17,4(sp)
  8035e0:	dc000017 	ldw	r16,0(sp)
  8035e4:	dec00304 	addi	sp,sp,12
  8035e8:	f800283a 	ret
  8035ec:	80800017 	ldw	r2,0(r16)
  8035f0:	103ff826 	beq	r2,zero,8035d4 <_lseek_r+0x3c>
  8035f4:	88800015 	stw	r2,0(r17)
  8035f8:	1805883a 	mov	r2,r3
  8035fc:	dfc00217 	ldw	ra,8(sp)
  803600:	dc400117 	ldw	r17,4(sp)
  803604:	dc000017 	ldw	r16,0(sp)
  803608:	dec00304 	addi	sp,sp,12
  80360c:	f800283a 	ret

00803610 <memchr>:
  803610:	008000c4 	movi	r2,3
  803614:	29403fcc 	andi	r5,r5,255
  803618:	2007883a 	mov	r3,r4
  80361c:	1180022e 	bgeu	r2,r6,803628 <memchr+0x18>
  803620:	2084703a 	and	r2,r4,r2
  803624:	10000b26 	beq	r2,zero,803654 <memchr+0x44>
  803628:	313fffc4 	addi	r4,r6,-1
  80362c:	3000051e 	bne	r6,zero,803644 <memchr+0x34>
  803630:	00002c06 	br	8036e4 <memchr+0xd4>
  803634:	213fffc4 	addi	r4,r4,-1
  803638:	00bfffc4 	movi	r2,-1
  80363c:	18c00044 	addi	r3,r3,1
  803640:	20802826 	beq	r4,r2,8036e4 <memchr+0xd4>
  803644:	18800003 	ldbu	r2,0(r3)
  803648:	28bffa1e 	bne	r5,r2,803634 <memchr+0x24>
  80364c:	1805883a 	mov	r2,r3
  803650:	f800283a 	ret
  803654:	0011883a 	mov	r8,zero
  803658:	0007883a 	mov	r3,zero
  80365c:	01c00104 	movi	r7,4
  803660:	4004923a 	slli	r2,r8,8
  803664:	18c00044 	addi	r3,r3,1
  803668:	1151883a 	add	r8,r2,r5
  80366c:	19fffc1e 	bne	r3,r7,803660 <memchr+0x50>
  803670:	02bfbff4 	movhi	r10,65279
  803674:	52bfbfc4 	addi	r10,r10,-257
  803678:	02602074 	movhi	r9,32897
  80367c:	4a602004 	addi	r9,r9,-32640
  803680:	02c000c4 	movi	r11,3
  803684:	20800017 	ldw	r2,0(r4)
  803688:	31bfff04 	addi	r6,r6,-4
  80368c:	200f883a 	mov	r7,r4
  803690:	1204f03a 	xor	r2,r2,r8
  803694:	1287883a 	add	r3,r2,r10
  803698:	1a46703a 	and	r3,r3,r9
  80369c:	0084303a 	nor	r2,zero,r2
  8036a0:	10c4703a 	and	r2,r2,r3
  8036a4:	10000b26 	beq	r2,zero,8036d4 <memchr+0xc4>
  8036a8:	20800003 	ldbu	r2,0(r4)
  8036ac:	28800f26 	beq	r5,r2,8036ec <memchr+0xdc>
  8036b0:	20800043 	ldbu	r2,1(r4)
  8036b4:	21c00044 	addi	r7,r4,1
  8036b8:	28800c26 	beq	r5,r2,8036ec <memchr+0xdc>
  8036bc:	20800083 	ldbu	r2,2(r4)
  8036c0:	21c00084 	addi	r7,r4,2
  8036c4:	28800926 	beq	r5,r2,8036ec <memchr+0xdc>
  8036c8:	208000c3 	ldbu	r2,3(r4)
  8036cc:	21c000c4 	addi	r7,r4,3
  8036d0:	28800626 	beq	r5,r2,8036ec <memchr+0xdc>
  8036d4:	21000104 	addi	r4,r4,4
  8036d8:	59bfea36 	bltu	r11,r6,803684 <memchr+0x74>
  8036dc:	2007883a 	mov	r3,r4
  8036e0:	003fd106 	br	803628 <memchr+0x18>
  8036e4:	0005883a 	mov	r2,zero
  8036e8:	f800283a 	ret
  8036ec:	3805883a 	mov	r2,r7
  8036f0:	f800283a 	ret

008036f4 <memcpy>:
  8036f4:	01c003c4 	movi	r7,15
  8036f8:	2007883a 	mov	r3,r4
  8036fc:	3980032e 	bgeu	r7,r6,80370c <memcpy+0x18>
  803700:	2904b03a 	or	r2,r5,r4
  803704:	108000cc 	andi	r2,r2,3
  803708:	10000926 	beq	r2,zero,803730 <memcpy+0x3c>
  80370c:	30000626 	beq	r6,zero,803728 <memcpy+0x34>
  803710:	30cd883a 	add	r6,r6,r3
  803714:	28800003 	ldbu	r2,0(r5)
  803718:	29400044 	addi	r5,r5,1
  80371c:	18800005 	stb	r2,0(r3)
  803720:	18c00044 	addi	r3,r3,1
  803724:	30fffb1e 	bne	r6,r3,803714 <memcpy+0x20>
  803728:	2005883a 	mov	r2,r4
  80372c:	f800283a 	ret
  803730:	3811883a 	mov	r8,r7
  803734:	200f883a 	mov	r7,r4
  803738:	28c00017 	ldw	r3,0(r5)
  80373c:	31bffc04 	addi	r6,r6,-16
  803740:	38c00015 	stw	r3,0(r7)
  803744:	28800117 	ldw	r2,4(r5)
  803748:	38800115 	stw	r2,4(r7)
  80374c:	28c00217 	ldw	r3,8(r5)
  803750:	38c00215 	stw	r3,8(r7)
  803754:	28800317 	ldw	r2,12(r5)
  803758:	29400404 	addi	r5,r5,16
  80375c:	38800315 	stw	r2,12(r7)
  803760:	39c00404 	addi	r7,r7,16
  803764:	41bff436 	bltu	r8,r6,803738 <memcpy+0x44>
  803768:	008000c4 	movi	r2,3
  80376c:	1180072e 	bgeu	r2,r6,80378c <memcpy+0x98>
  803770:	1007883a 	mov	r3,r2
  803774:	28800017 	ldw	r2,0(r5)
  803778:	31bfff04 	addi	r6,r6,-4
  80377c:	29400104 	addi	r5,r5,4
  803780:	38800015 	stw	r2,0(r7)
  803784:	39c00104 	addi	r7,r7,4
  803788:	19bffa36 	bltu	r3,r6,803774 <memcpy+0x80>
  80378c:	3807883a 	mov	r3,r7
  803790:	003fde06 	br	80370c <memcpy+0x18>

00803794 <memmove>:
  803794:	2807883a 	mov	r3,r5
  803798:	2011883a 	mov	r8,r4
  80379c:	29000c2e 	bgeu	r5,r4,8037d0 <memmove+0x3c>
  8037a0:	298f883a 	add	r7,r5,r6
  8037a4:	21c00a2e 	bgeu	r4,r7,8037d0 <memmove+0x3c>
  8037a8:	30000726 	beq	r6,zero,8037c8 <memmove+0x34>
  8037ac:	2187883a 	add	r3,r4,r6
  8037b0:	198dc83a 	sub	r6,r3,r6
  8037b4:	39ffffc4 	addi	r7,r7,-1
  8037b8:	38800003 	ldbu	r2,0(r7)
  8037bc:	18ffffc4 	addi	r3,r3,-1
  8037c0:	18800005 	stb	r2,0(r3)
  8037c4:	19bffb1e 	bne	r3,r6,8037b4 <memmove+0x20>
  8037c8:	2005883a 	mov	r2,r4
  8037cc:	f800283a 	ret
  8037d0:	01c003c4 	movi	r7,15
  8037d4:	39800a36 	bltu	r7,r6,803800 <memmove+0x6c>
  8037d8:	303ffb26 	beq	r6,zero,8037c8 <memmove+0x34>
  8037dc:	400f883a 	mov	r7,r8
  8037e0:	320d883a 	add	r6,r6,r8
  8037e4:	28800003 	ldbu	r2,0(r5)
  8037e8:	29400044 	addi	r5,r5,1
  8037ec:	38800005 	stb	r2,0(r7)
  8037f0:	39c00044 	addi	r7,r7,1
  8037f4:	39bffb1e 	bne	r7,r6,8037e4 <memmove+0x50>
  8037f8:	2005883a 	mov	r2,r4
  8037fc:	f800283a 	ret
  803800:	1904b03a 	or	r2,r3,r4
  803804:	108000cc 	andi	r2,r2,3
  803808:	103ff31e 	bne	r2,zero,8037d8 <memmove+0x44>
  80380c:	3811883a 	mov	r8,r7
  803810:	180b883a 	mov	r5,r3
  803814:	200f883a 	mov	r7,r4
  803818:	28c00017 	ldw	r3,0(r5)
  80381c:	31bffc04 	addi	r6,r6,-16
  803820:	38c00015 	stw	r3,0(r7)
  803824:	28800117 	ldw	r2,4(r5)
  803828:	38800115 	stw	r2,4(r7)
  80382c:	28c00217 	ldw	r3,8(r5)
  803830:	38c00215 	stw	r3,8(r7)
  803834:	28800317 	ldw	r2,12(r5)
  803838:	29400404 	addi	r5,r5,16
  80383c:	38800315 	stw	r2,12(r7)
  803840:	39c00404 	addi	r7,r7,16
  803844:	41bff436 	bltu	r8,r6,803818 <memmove+0x84>
  803848:	008000c4 	movi	r2,3
  80384c:	1180072e 	bgeu	r2,r6,80386c <memmove+0xd8>
  803850:	1007883a 	mov	r3,r2
  803854:	28800017 	ldw	r2,0(r5)
  803858:	31bfff04 	addi	r6,r6,-4
  80385c:	29400104 	addi	r5,r5,4
  803860:	38800015 	stw	r2,0(r7)
  803864:	39c00104 	addi	r7,r7,4
  803868:	19bffa36 	bltu	r3,r6,803854 <memmove+0xc0>
  80386c:	3811883a 	mov	r8,r7
  803870:	003fd906 	br	8037d8 <memmove+0x44>

00803874 <memset>:
  803874:	008000c4 	movi	r2,3
  803878:	29403fcc 	andi	r5,r5,255
  80387c:	2007883a 	mov	r3,r4
  803880:	1180022e 	bgeu	r2,r6,80388c <memset+0x18>
  803884:	2084703a 	and	r2,r4,r2
  803888:	10000826 	beq	r2,zero,8038ac <memset+0x38>
  80388c:	30000526 	beq	r6,zero,8038a4 <memset+0x30>
  803890:	2805883a 	mov	r2,r5
  803894:	30cd883a 	add	r6,r6,r3
  803898:	18800005 	stb	r2,0(r3)
  80389c:	18c00044 	addi	r3,r3,1
  8038a0:	19bffd1e 	bne	r3,r6,803898 <memset+0x24>
  8038a4:	2005883a 	mov	r2,r4
  8038a8:	f800283a 	ret
  8038ac:	2804923a 	slli	r2,r5,8
  8038b0:	020003c4 	movi	r8,15
  8038b4:	200f883a 	mov	r7,r4
  8038b8:	2884b03a 	or	r2,r5,r2
  8038bc:	1006943a 	slli	r3,r2,16
  8038c0:	10c6b03a 	or	r3,r2,r3
  8038c4:	41800a2e 	bgeu	r8,r6,8038f0 <memset+0x7c>
  8038c8:	4005883a 	mov	r2,r8
  8038cc:	31bffc04 	addi	r6,r6,-16
  8038d0:	38c00015 	stw	r3,0(r7)
  8038d4:	38c00115 	stw	r3,4(r7)
  8038d8:	38c00215 	stw	r3,8(r7)
  8038dc:	38c00315 	stw	r3,12(r7)
  8038e0:	39c00404 	addi	r7,r7,16
  8038e4:	11bff936 	bltu	r2,r6,8038cc <memset+0x58>
  8038e8:	008000c4 	movi	r2,3
  8038ec:	1180052e 	bgeu	r2,r6,803904 <memset+0x90>
  8038f0:	31bfff04 	addi	r6,r6,-4
  8038f4:	008000c4 	movi	r2,3
  8038f8:	38c00015 	stw	r3,0(r7)
  8038fc:	39c00104 	addi	r7,r7,4
  803900:	11bffb36 	bltu	r2,r6,8038f0 <memset+0x7c>
  803904:	3807883a 	mov	r3,r7
  803908:	003fe006 	br	80388c <memset+0x18>

0080390c <_read_r>:
  80390c:	defffd04 	addi	sp,sp,-12
  803910:	dc000015 	stw	r16,0(sp)
  803914:	04002074 	movhi	r16,129
  803918:	84311004 	addi	r16,r16,-15296
  80391c:	dc400115 	stw	r17,4(sp)
  803920:	80000015 	stw	zero,0(r16)
  803924:	2023883a 	mov	r17,r4
  803928:	2809883a 	mov	r4,r5
  80392c:	300b883a 	mov	r5,r6
  803930:	380d883a 	mov	r6,r7
  803934:	dfc00215 	stw	ra,8(sp)
  803938:	0804cb40 	call	804cb4 <read>
  80393c:	1007883a 	mov	r3,r2
  803940:	00bfffc4 	movi	r2,-1
  803944:	18800626 	beq	r3,r2,803960 <_read_r+0x54>
  803948:	1805883a 	mov	r2,r3
  80394c:	dfc00217 	ldw	ra,8(sp)
  803950:	dc400117 	ldw	r17,4(sp)
  803954:	dc000017 	ldw	r16,0(sp)
  803958:	dec00304 	addi	sp,sp,12
  80395c:	f800283a 	ret
  803960:	80800017 	ldw	r2,0(r16)
  803964:	103ff826 	beq	r2,zero,803948 <_read_r+0x3c>
  803968:	88800015 	stw	r2,0(r17)
  80396c:	1805883a 	mov	r2,r3
  803970:	dfc00217 	ldw	ra,8(sp)
  803974:	dc400117 	ldw	r17,4(sp)
  803978:	dc000017 	ldw	r16,0(sp)
  80397c:	dec00304 	addi	sp,sp,12
  803980:	f800283a 	ret

00803984 <_realloc_r>:
  803984:	defff404 	addi	sp,sp,-48
  803988:	dd800815 	stw	r22,32(sp)
  80398c:	dc800415 	stw	r18,16(sp)
  803990:	dc400315 	stw	r17,12(sp)
  803994:	dfc00b15 	stw	ra,44(sp)
  803998:	df000a15 	stw	fp,40(sp)
  80399c:	ddc00915 	stw	r23,36(sp)
  8039a0:	dd400715 	stw	r21,28(sp)
  8039a4:	dd000615 	stw	r20,24(sp)
  8039a8:	dcc00515 	stw	r19,20(sp)
  8039ac:	dc000215 	stw	r16,8(sp)
  8039b0:	2825883a 	mov	r18,r5
  8039b4:	3023883a 	mov	r17,r6
  8039b8:	202d883a 	mov	r22,r4
  8039bc:	2800c926 	beq	r5,zero,803ce4 <_realloc_r+0x360>
  8039c0:	08049b00 	call	8049b0 <__malloc_lock>
  8039c4:	943ffe04 	addi	r16,r18,-8
  8039c8:	88c002c4 	addi	r3,r17,11
  8039cc:	00800584 	movi	r2,22
  8039d0:	82000117 	ldw	r8,4(r16)
  8039d4:	10c01b2e 	bgeu	r2,r3,803a44 <_realloc_r+0xc0>
  8039d8:	00bffe04 	movi	r2,-8
  8039dc:	188e703a 	and	r7,r3,r2
  8039e0:	3839883a 	mov	fp,r7
  8039e4:	38001a16 	blt	r7,zero,803a50 <_realloc_r+0xcc>
  8039e8:	e4401936 	bltu	fp,r17,803a50 <_realloc_r+0xcc>
  8039ec:	013fff04 	movi	r4,-4
  8039f0:	4126703a 	and	r19,r8,r4
  8039f4:	99c02616 	blt	r19,r7,803a90 <_realloc_r+0x10c>
  8039f8:	802b883a 	mov	r21,r16
  8039fc:	9829883a 	mov	r20,r19
  803a00:	84000204 	addi	r16,r16,8
  803a04:	a80f883a 	mov	r7,r21
  803a08:	a70dc83a 	sub	r6,r20,fp
  803a0c:	008003c4 	movi	r2,15
  803a10:	1180c136 	bltu	r2,r6,803d18 <_realloc_r+0x394>
  803a14:	38800117 	ldw	r2,4(r7)
  803a18:	a549883a 	add	r4,r20,r21
  803a1c:	1080004c 	andi	r2,r2,1
  803a20:	a084b03a 	or	r2,r20,r2
  803a24:	38800115 	stw	r2,4(r7)
  803a28:	20c00117 	ldw	r3,4(r4)
  803a2c:	18c00054 	ori	r3,r3,1
  803a30:	20c00115 	stw	r3,4(r4)
  803a34:	b009883a 	mov	r4,r22
  803a38:	08049d00 	call	8049d0 <__malloc_unlock>
  803a3c:	8023883a 	mov	r17,r16
  803a40:	00000606 	br	803a5c <_realloc_r+0xd8>
  803a44:	01c00404 	movi	r7,16
  803a48:	3839883a 	mov	fp,r7
  803a4c:	e47fe72e 	bgeu	fp,r17,8039ec <_realloc_r+0x68>
  803a50:	00800304 	movi	r2,12
  803a54:	0023883a 	mov	r17,zero
  803a58:	b0800015 	stw	r2,0(r22)
  803a5c:	8805883a 	mov	r2,r17
  803a60:	dfc00b17 	ldw	ra,44(sp)
  803a64:	df000a17 	ldw	fp,40(sp)
  803a68:	ddc00917 	ldw	r23,36(sp)
  803a6c:	dd800817 	ldw	r22,32(sp)
  803a70:	dd400717 	ldw	r21,28(sp)
  803a74:	dd000617 	ldw	r20,24(sp)
  803a78:	dcc00517 	ldw	r19,20(sp)
  803a7c:	dc800417 	ldw	r18,16(sp)
  803a80:	dc400317 	ldw	r17,12(sp)
  803a84:	dc000217 	ldw	r16,8(sp)
  803a88:	dec00c04 	addi	sp,sp,48
  803a8c:	f800283a 	ret
  803a90:	00802074 	movhi	r2,129
  803a94:	10a3e304 	addi	r2,r2,-28788
  803a98:	12400217 	ldw	r9,8(r2)
  803a9c:	84cd883a 	add	r6,r16,r19
  803aa0:	802b883a 	mov	r21,r16
  803aa4:	3240b926 	beq	r6,r9,803d8c <_realloc_r+0x408>
  803aa8:	31400117 	ldw	r5,4(r6)
  803aac:	00bfff84 	movi	r2,-2
  803ab0:	2884703a 	and	r2,r5,r2
  803ab4:	1185883a 	add	r2,r2,r6
  803ab8:	10c00117 	ldw	r3,4(r2)
  803abc:	18c0004c 	andi	r3,r3,1
  803ac0:	1807003a 	cmpeq	r3,r3,zero
  803ac4:	1800a326 	beq	r3,zero,803d54 <_realloc_r+0x3d0>
  803ac8:	2908703a 	and	r4,r5,r4
  803acc:	9929883a 	add	r20,r19,r4
  803ad0:	a1c0a30e 	bge	r20,r7,803d60 <_realloc_r+0x3dc>
  803ad4:	4080004c 	andi	r2,r8,1
  803ad8:	1000551e 	bne	r2,zero,803c30 <_realloc_r+0x2ac>
  803adc:	80800017 	ldw	r2,0(r16)
  803ae0:	80afc83a 	sub	r23,r16,r2
  803ae4:	b8c00117 	ldw	r3,4(r23)
  803ae8:	00bfff04 	movi	r2,-4
  803aec:	1884703a 	and	r2,r3,r2
  803af0:	30002e26 	beq	r6,zero,803bac <_realloc_r+0x228>
  803af4:	3240b926 	beq	r6,r9,803ddc <_realloc_r+0x458>
  803af8:	98a9883a 	add	r20,r19,r2
  803afc:	2509883a 	add	r4,r4,r20
  803b00:	d9000015 	stw	r4,0(sp)
  803b04:	21c02a16 	blt	r4,r7,803bb0 <_realloc_r+0x22c>
  803b08:	30800317 	ldw	r2,12(r6)
  803b0c:	30c00217 	ldw	r3,8(r6)
  803b10:	01400904 	movi	r5,36
  803b14:	99bfff04 	addi	r6,r19,-4
  803b18:	18800315 	stw	r2,12(r3)
  803b1c:	10c00215 	stw	r3,8(r2)
  803b20:	b9000317 	ldw	r4,12(r23)
  803b24:	b8800217 	ldw	r2,8(r23)
  803b28:	b82b883a 	mov	r21,r23
  803b2c:	bc000204 	addi	r16,r23,8
  803b30:	20800215 	stw	r2,8(r4)
  803b34:	11000315 	stw	r4,12(r2)
  803b38:	2980e436 	bltu	r5,r6,803ecc <_realloc_r+0x548>
  803b3c:	008004c4 	movi	r2,19
  803b40:	9009883a 	mov	r4,r18
  803b44:	8011883a 	mov	r8,r16
  803b48:	11800f2e 	bgeu	r2,r6,803b88 <_realloc_r+0x204>
  803b4c:	90800017 	ldw	r2,0(r18)
  803b50:	ba000404 	addi	r8,r23,16
  803b54:	91000204 	addi	r4,r18,8
  803b58:	b8800215 	stw	r2,8(r23)
  803b5c:	90c00117 	ldw	r3,4(r18)
  803b60:	008006c4 	movi	r2,27
  803b64:	b8c00315 	stw	r3,12(r23)
  803b68:	1180072e 	bgeu	r2,r6,803b88 <_realloc_r+0x204>
  803b6c:	90c00217 	ldw	r3,8(r18)
  803b70:	ba000604 	addi	r8,r23,24
  803b74:	91000404 	addi	r4,r18,16
  803b78:	b8c00415 	stw	r3,16(r23)
  803b7c:	90800317 	ldw	r2,12(r18)
  803b80:	b8800515 	stw	r2,20(r23)
  803b84:	3140e726 	beq	r6,r5,803f24 <_realloc_r+0x5a0>
  803b88:	20800017 	ldw	r2,0(r4)
  803b8c:	dd000017 	ldw	r20,0(sp)
  803b90:	b80f883a 	mov	r7,r23
  803b94:	40800015 	stw	r2,0(r8)
  803b98:	20c00117 	ldw	r3,4(r4)
  803b9c:	40c00115 	stw	r3,4(r8)
  803ba0:	20800217 	ldw	r2,8(r4)
  803ba4:	40800215 	stw	r2,8(r8)
  803ba8:	003f9706 	br	803a08 <_realloc_r+0x84>
  803bac:	98a9883a 	add	r20,r19,r2
  803bb0:	a1c01f16 	blt	r20,r7,803c30 <_realloc_r+0x2ac>
  803bb4:	b8c00317 	ldw	r3,12(r23)
  803bb8:	b8800217 	ldw	r2,8(r23)
  803bbc:	99bfff04 	addi	r6,r19,-4
  803bc0:	01400904 	movi	r5,36
  803bc4:	b82b883a 	mov	r21,r23
  803bc8:	18800215 	stw	r2,8(r3)
  803bcc:	10c00315 	stw	r3,12(r2)
  803bd0:	bc000204 	addi	r16,r23,8
  803bd4:	2980c336 	bltu	r5,r6,803ee4 <_realloc_r+0x560>
  803bd8:	008004c4 	movi	r2,19
  803bdc:	9009883a 	mov	r4,r18
  803be0:	8011883a 	mov	r8,r16
  803be4:	11800f2e 	bgeu	r2,r6,803c24 <_realloc_r+0x2a0>
  803be8:	90800017 	ldw	r2,0(r18)
  803bec:	ba000404 	addi	r8,r23,16
  803bf0:	91000204 	addi	r4,r18,8
  803bf4:	b8800215 	stw	r2,8(r23)
  803bf8:	90c00117 	ldw	r3,4(r18)
  803bfc:	008006c4 	movi	r2,27
  803c00:	b8c00315 	stw	r3,12(r23)
  803c04:	1180072e 	bgeu	r2,r6,803c24 <_realloc_r+0x2a0>
  803c08:	90c00217 	ldw	r3,8(r18)
  803c0c:	ba000604 	addi	r8,r23,24
  803c10:	91000404 	addi	r4,r18,16
  803c14:	b8c00415 	stw	r3,16(r23)
  803c18:	90800317 	ldw	r2,12(r18)
  803c1c:	b8800515 	stw	r2,20(r23)
  803c20:	3140c726 	beq	r6,r5,803f40 <_realloc_r+0x5bc>
  803c24:	20800017 	ldw	r2,0(r4)
  803c28:	b80f883a 	mov	r7,r23
  803c2c:	003fd906 	br	803b94 <_realloc_r+0x210>
  803c30:	880b883a 	mov	r5,r17
  803c34:	b009883a 	mov	r4,r22
  803c38:	08017d80 	call	8017d8 <_malloc_r>
  803c3c:	1023883a 	mov	r17,r2
  803c40:	10002526 	beq	r2,zero,803cd8 <_realloc_r+0x354>
  803c44:	80800117 	ldw	r2,4(r16)
  803c48:	00ffff84 	movi	r3,-2
  803c4c:	893ffe04 	addi	r4,r17,-8
  803c50:	10c4703a 	and	r2,r2,r3
  803c54:	8085883a 	add	r2,r16,r2
  803c58:	20809526 	beq	r4,r2,803eb0 <_realloc_r+0x52c>
  803c5c:	99bfff04 	addi	r6,r19,-4
  803c60:	01c00904 	movi	r7,36
  803c64:	39804536 	bltu	r7,r6,803d7c <_realloc_r+0x3f8>
  803c68:	008004c4 	movi	r2,19
  803c6c:	9009883a 	mov	r4,r18
  803c70:	880b883a 	mov	r5,r17
  803c74:	11800f2e 	bgeu	r2,r6,803cb4 <_realloc_r+0x330>
  803c78:	90800017 	ldw	r2,0(r18)
  803c7c:	89400204 	addi	r5,r17,8
  803c80:	91000204 	addi	r4,r18,8
  803c84:	88800015 	stw	r2,0(r17)
  803c88:	90c00117 	ldw	r3,4(r18)
  803c8c:	008006c4 	movi	r2,27
  803c90:	88c00115 	stw	r3,4(r17)
  803c94:	1180072e 	bgeu	r2,r6,803cb4 <_realloc_r+0x330>
  803c98:	90c00217 	ldw	r3,8(r18)
  803c9c:	89400404 	addi	r5,r17,16
  803ca0:	91000404 	addi	r4,r18,16
  803ca4:	88c00215 	stw	r3,8(r17)
  803ca8:	90800317 	ldw	r2,12(r18)
  803cac:	88800315 	stw	r2,12(r17)
  803cb0:	31c09126 	beq	r6,r7,803ef8 <_realloc_r+0x574>
  803cb4:	20800017 	ldw	r2,0(r4)
  803cb8:	28800015 	stw	r2,0(r5)
  803cbc:	20c00117 	ldw	r3,4(r4)
  803cc0:	28c00115 	stw	r3,4(r5)
  803cc4:	20800217 	ldw	r2,8(r4)
  803cc8:	28800215 	stw	r2,8(r5)
  803ccc:	900b883a 	mov	r5,r18
  803cd0:	b009883a 	mov	r4,r22
  803cd4:	0802bf80 	call	802bf8 <_free_r>
  803cd8:	b009883a 	mov	r4,r22
  803cdc:	08049d00 	call	8049d0 <__malloc_unlock>
  803ce0:	003f5e06 	br	803a5c <_realloc_r+0xd8>
  803ce4:	300b883a 	mov	r5,r6
  803ce8:	dfc00b17 	ldw	ra,44(sp)
  803cec:	df000a17 	ldw	fp,40(sp)
  803cf0:	ddc00917 	ldw	r23,36(sp)
  803cf4:	dd800817 	ldw	r22,32(sp)
  803cf8:	dd400717 	ldw	r21,28(sp)
  803cfc:	dd000617 	ldw	r20,24(sp)
  803d00:	dcc00517 	ldw	r19,20(sp)
  803d04:	dc800417 	ldw	r18,16(sp)
  803d08:	dc400317 	ldw	r17,12(sp)
  803d0c:	dc000217 	ldw	r16,8(sp)
  803d10:	dec00c04 	addi	sp,sp,48
  803d14:	08017d81 	jmpi	8017d8 <_malloc_r>
  803d18:	38800117 	ldw	r2,4(r7)
  803d1c:	e54b883a 	add	r5,fp,r21
  803d20:	31000054 	ori	r4,r6,1
  803d24:	1080004c 	andi	r2,r2,1
  803d28:	1704b03a 	or	r2,r2,fp
  803d2c:	38800115 	stw	r2,4(r7)
  803d30:	29000115 	stw	r4,4(r5)
  803d34:	2987883a 	add	r3,r5,r6
  803d38:	18800117 	ldw	r2,4(r3)
  803d3c:	29400204 	addi	r5,r5,8
  803d40:	b009883a 	mov	r4,r22
  803d44:	10800054 	ori	r2,r2,1
  803d48:	18800115 	stw	r2,4(r3)
  803d4c:	0802bf80 	call	802bf8 <_free_r>
  803d50:	003f3806 	br	803a34 <_realloc_r+0xb0>
  803d54:	000d883a 	mov	r6,zero
  803d58:	0009883a 	mov	r4,zero
  803d5c:	003f5d06 	br	803ad4 <_realloc_r+0x150>
  803d60:	30c00217 	ldw	r3,8(r6)
  803d64:	30800317 	ldw	r2,12(r6)
  803d68:	800f883a 	mov	r7,r16
  803d6c:	84000204 	addi	r16,r16,8
  803d70:	10c00215 	stw	r3,8(r2)
  803d74:	18800315 	stw	r2,12(r3)
  803d78:	003f2306 	br	803a08 <_realloc_r+0x84>
  803d7c:	8809883a 	mov	r4,r17
  803d80:	900b883a 	mov	r5,r18
  803d84:	08037940 	call	803794 <memmove>
  803d88:	003fd006 	br	803ccc <_realloc_r+0x348>
  803d8c:	30800117 	ldw	r2,4(r6)
  803d90:	e0c00404 	addi	r3,fp,16
  803d94:	1108703a 	and	r4,r2,r4
  803d98:	9905883a 	add	r2,r19,r4
  803d9c:	10ff4d16 	blt	r2,r3,803ad4 <_realloc_r+0x150>
  803da0:	1705c83a 	sub	r2,r2,fp
  803da4:	870b883a 	add	r5,r16,fp
  803da8:	10800054 	ori	r2,r2,1
  803dac:	28800115 	stw	r2,4(r5)
  803db0:	80c00117 	ldw	r3,4(r16)
  803db4:	00802074 	movhi	r2,129
  803db8:	10a3e304 	addi	r2,r2,-28788
  803dbc:	b009883a 	mov	r4,r22
  803dc0:	18c0004c 	andi	r3,r3,1
  803dc4:	e0c6b03a 	or	r3,fp,r3
  803dc8:	11400215 	stw	r5,8(r2)
  803dcc:	80c00115 	stw	r3,4(r16)
  803dd0:	08049d00 	call	8049d0 <__malloc_unlock>
  803dd4:	84400204 	addi	r17,r16,8
  803dd8:	003f2006 	br	803a5c <_realloc_r+0xd8>
  803ddc:	98a9883a 	add	r20,r19,r2
  803de0:	2509883a 	add	r4,r4,r20
  803de4:	e0800404 	addi	r2,fp,16
  803de8:	d9000115 	stw	r4,4(sp)
  803dec:	20bf7016 	blt	r4,r2,803bb0 <_realloc_r+0x22c>
  803df0:	b8c00317 	ldw	r3,12(r23)
  803df4:	b8800217 	ldw	r2,8(r23)
  803df8:	99bfff04 	addi	r6,r19,-4
  803dfc:	01400904 	movi	r5,36
  803e00:	18800215 	stw	r2,8(r3)
  803e04:	10c00315 	stw	r3,12(r2)
  803e08:	bc400204 	addi	r17,r23,8
  803e0c:	29804136 	bltu	r5,r6,803f14 <_realloc_r+0x590>
  803e10:	008004c4 	movi	r2,19
  803e14:	9009883a 	mov	r4,r18
  803e18:	880f883a 	mov	r7,r17
  803e1c:	11800f2e 	bgeu	r2,r6,803e5c <_realloc_r+0x4d8>
  803e20:	90800017 	ldw	r2,0(r18)
  803e24:	b9c00404 	addi	r7,r23,16
  803e28:	91000204 	addi	r4,r18,8
  803e2c:	b8800215 	stw	r2,8(r23)
  803e30:	90c00117 	ldw	r3,4(r18)
  803e34:	008006c4 	movi	r2,27
  803e38:	b8c00315 	stw	r3,12(r23)
  803e3c:	1180072e 	bgeu	r2,r6,803e5c <_realloc_r+0x4d8>
  803e40:	90c00217 	ldw	r3,8(r18)
  803e44:	b9c00604 	addi	r7,r23,24
  803e48:	91000404 	addi	r4,r18,16
  803e4c:	b8c00415 	stw	r3,16(r23)
  803e50:	90800317 	ldw	r2,12(r18)
  803e54:	b8800515 	stw	r2,20(r23)
  803e58:	31404026 	beq	r6,r5,803f5c <_realloc_r+0x5d8>
  803e5c:	20800017 	ldw	r2,0(r4)
  803e60:	38800015 	stw	r2,0(r7)
  803e64:	20c00117 	ldw	r3,4(r4)
  803e68:	38c00115 	stw	r3,4(r7)
  803e6c:	20800217 	ldw	r2,8(r4)
  803e70:	38800215 	stw	r2,8(r7)
  803e74:	d8c00117 	ldw	r3,4(sp)
  803e78:	bf0b883a 	add	r5,r23,fp
  803e7c:	b009883a 	mov	r4,r22
  803e80:	1f05c83a 	sub	r2,r3,fp
  803e84:	10800054 	ori	r2,r2,1
  803e88:	28800115 	stw	r2,4(r5)
  803e8c:	b8c00117 	ldw	r3,4(r23)
  803e90:	00802074 	movhi	r2,129
  803e94:	10a3e304 	addi	r2,r2,-28788
  803e98:	11400215 	stw	r5,8(r2)
  803e9c:	18c0004c 	andi	r3,r3,1
  803ea0:	e0c6b03a 	or	r3,fp,r3
  803ea4:	b8c00115 	stw	r3,4(r23)
  803ea8:	08049d00 	call	8049d0 <__malloc_unlock>
  803eac:	003eeb06 	br	803a5c <_realloc_r+0xd8>
  803eb0:	20800117 	ldw	r2,4(r4)
  803eb4:	00ffff04 	movi	r3,-4
  803eb8:	800f883a 	mov	r7,r16
  803ebc:	10c4703a 	and	r2,r2,r3
  803ec0:	98a9883a 	add	r20,r19,r2
  803ec4:	84000204 	addi	r16,r16,8
  803ec8:	003ecf06 	br	803a08 <_realloc_r+0x84>
  803ecc:	900b883a 	mov	r5,r18
  803ed0:	8009883a 	mov	r4,r16
  803ed4:	08037940 	call	803794 <memmove>
  803ed8:	dd000017 	ldw	r20,0(sp)
  803edc:	b80f883a 	mov	r7,r23
  803ee0:	003ec906 	br	803a08 <_realloc_r+0x84>
  803ee4:	900b883a 	mov	r5,r18
  803ee8:	8009883a 	mov	r4,r16
  803eec:	08037940 	call	803794 <memmove>
  803ef0:	b80f883a 	mov	r7,r23
  803ef4:	003ec406 	br	803a08 <_realloc_r+0x84>
  803ef8:	90c00417 	ldw	r3,16(r18)
  803efc:	89400604 	addi	r5,r17,24
  803f00:	91000604 	addi	r4,r18,24
  803f04:	88c00415 	stw	r3,16(r17)
  803f08:	90800517 	ldw	r2,20(r18)
  803f0c:	88800515 	stw	r2,20(r17)
  803f10:	003f6806 	br	803cb4 <_realloc_r+0x330>
  803f14:	900b883a 	mov	r5,r18
  803f18:	8809883a 	mov	r4,r17
  803f1c:	08037940 	call	803794 <memmove>
  803f20:	003fd406 	br	803e74 <_realloc_r+0x4f0>
  803f24:	90c00417 	ldw	r3,16(r18)
  803f28:	91000604 	addi	r4,r18,24
  803f2c:	ba000804 	addi	r8,r23,32
  803f30:	b8c00615 	stw	r3,24(r23)
  803f34:	90800517 	ldw	r2,20(r18)
  803f38:	b8800715 	stw	r2,28(r23)
  803f3c:	003f1206 	br	803b88 <_realloc_r+0x204>
  803f40:	90c00417 	ldw	r3,16(r18)
  803f44:	91000604 	addi	r4,r18,24
  803f48:	ba000804 	addi	r8,r23,32
  803f4c:	b8c00615 	stw	r3,24(r23)
  803f50:	90800517 	ldw	r2,20(r18)
  803f54:	b8800715 	stw	r2,28(r23)
  803f58:	003f3206 	br	803c24 <_realloc_r+0x2a0>
  803f5c:	90c00417 	ldw	r3,16(r18)
  803f60:	91000604 	addi	r4,r18,24
  803f64:	b9c00804 	addi	r7,r23,32
  803f68:	b8c00615 	stw	r3,24(r23)
  803f6c:	90800517 	ldw	r2,20(r18)
  803f70:	b8800715 	stw	r2,28(r23)
  803f74:	003fb906 	br	803e5c <_realloc_r+0x4d8>

00803f78 <__swsetup_r>:
  803f78:	00802074 	movhi	r2,129
  803f7c:	10a9e004 	addi	r2,r2,-22656
  803f80:	10c00017 	ldw	r3,0(r2)
  803f84:	defffd04 	addi	sp,sp,-12
  803f88:	dc400115 	stw	r17,4(sp)
  803f8c:	dc000015 	stw	r16,0(sp)
  803f90:	dfc00215 	stw	ra,8(sp)
  803f94:	2023883a 	mov	r17,r4
  803f98:	2821883a 	mov	r16,r5
  803f9c:	18000226 	beq	r3,zero,803fa8 <__swsetup_r+0x30>
  803fa0:	18800e17 	ldw	r2,56(r3)
  803fa4:	10001f26 	beq	r2,zero,804024 <__swsetup_r+0xac>
  803fa8:	8100030b 	ldhu	r4,12(r16)
  803fac:	2080020c 	andi	r2,r4,8
  803fb0:	10002826 	beq	r2,zero,804054 <__swsetup_r+0xdc>
  803fb4:	81400417 	ldw	r5,16(r16)
  803fb8:	28001d26 	beq	r5,zero,804030 <__swsetup_r+0xb8>
  803fbc:	2080004c 	andi	r2,r4,1
  803fc0:	1005003a 	cmpeq	r2,r2,zero
  803fc4:	10000b26 	beq	r2,zero,803ff4 <__swsetup_r+0x7c>
  803fc8:	2080008c 	andi	r2,r4,2
  803fcc:	10001226 	beq	r2,zero,804018 <__swsetup_r+0xa0>
  803fd0:	0005883a 	mov	r2,zero
  803fd4:	80800215 	stw	r2,8(r16)
  803fd8:	28000b26 	beq	r5,zero,804008 <__swsetup_r+0x90>
  803fdc:	0005883a 	mov	r2,zero
  803fe0:	dfc00217 	ldw	ra,8(sp)
  803fe4:	dc400117 	ldw	r17,4(sp)
  803fe8:	dc000017 	ldw	r16,0(sp)
  803fec:	dec00304 	addi	sp,sp,12
  803ff0:	f800283a 	ret
  803ff4:	80800517 	ldw	r2,20(r16)
  803ff8:	80000215 	stw	zero,8(r16)
  803ffc:	0085c83a 	sub	r2,zero,r2
  804000:	80800615 	stw	r2,24(r16)
  804004:	283ff51e 	bne	r5,zero,803fdc <__swsetup_r+0x64>
  804008:	2080200c 	andi	r2,r4,128
  80400c:	103ff326 	beq	r2,zero,803fdc <__swsetup_r+0x64>
  804010:	00bfffc4 	movi	r2,-1
  804014:	003ff206 	br	803fe0 <__swsetup_r+0x68>
  804018:	80800517 	ldw	r2,20(r16)
  80401c:	80800215 	stw	r2,8(r16)
  804020:	003fed06 	br	803fd8 <__swsetup_r+0x60>
  804024:	1809883a 	mov	r4,r3
  804028:	08027d40 	call	8027d4 <__sinit>
  80402c:	003fde06 	br	803fa8 <__swsetup_r+0x30>
  804030:	20c0a00c 	andi	r3,r4,640
  804034:	00808004 	movi	r2,512
  804038:	18bfe026 	beq	r3,r2,803fbc <__swsetup_r+0x44>
  80403c:	8809883a 	mov	r4,r17
  804040:	800b883a 	mov	r5,r16
  804044:	08016440 	call	801644 <__smakebuf_r>
  804048:	8100030b 	ldhu	r4,12(r16)
  80404c:	81400417 	ldw	r5,16(r16)
  804050:	003fda06 	br	803fbc <__swsetup_r+0x44>
  804054:	2080040c 	andi	r2,r4,16
  804058:	103fed26 	beq	r2,zero,804010 <__swsetup_r+0x98>
  80405c:	2080010c 	andi	r2,r4,4
  804060:	10001226 	beq	r2,zero,8040ac <__swsetup_r+0x134>
  804064:	81400c17 	ldw	r5,48(r16)
  804068:	28000526 	beq	r5,zero,804080 <__swsetup_r+0x108>
  80406c:	80801004 	addi	r2,r16,64
  804070:	28800226 	beq	r5,r2,80407c <__swsetup_r+0x104>
  804074:	8809883a 	mov	r4,r17
  804078:	0802bf80 	call	802bf8 <_free_r>
  80407c:	80000c15 	stw	zero,48(r16)
  804080:	8080030b 	ldhu	r2,12(r16)
  804084:	81400417 	ldw	r5,16(r16)
  804088:	80000115 	stw	zero,4(r16)
  80408c:	10bff6cc 	andi	r2,r2,65499
  804090:	8080030d 	sth	r2,12(r16)
  804094:	81400015 	stw	r5,0(r16)
  804098:	8080030b 	ldhu	r2,12(r16)
  80409c:	10800214 	ori	r2,r2,8
  8040a0:	113fffcc 	andi	r4,r2,65535
  8040a4:	8080030d 	sth	r2,12(r16)
  8040a8:	003fc306 	br	803fb8 <__swsetup_r+0x40>
  8040ac:	81400417 	ldw	r5,16(r16)
  8040b0:	003ff906 	br	804098 <__swsetup_r+0x120>

008040b4 <_fclose_r>:
  8040b4:	defffc04 	addi	sp,sp,-16
  8040b8:	dc400115 	stw	r17,4(sp)
  8040bc:	dc000015 	stw	r16,0(sp)
  8040c0:	dfc00315 	stw	ra,12(sp)
  8040c4:	dc800215 	stw	r18,8(sp)
  8040c8:	2821883a 	mov	r16,r5
  8040cc:	2023883a 	mov	r17,r4
  8040d0:	28002926 	beq	r5,zero,804178 <_fclose_r+0xc4>
  8040d4:	08027c40 	call	8027c4 <__sfp_lock_acquire>
  8040d8:	88000226 	beq	r17,zero,8040e4 <_fclose_r+0x30>
  8040dc:	88800e17 	ldw	r2,56(r17)
  8040e0:	10002d26 	beq	r2,zero,804198 <_fclose_r+0xe4>
  8040e4:	8080030f 	ldh	r2,12(r16)
  8040e8:	10002226 	beq	r2,zero,804174 <_fclose_r+0xc0>
  8040ec:	8809883a 	mov	r4,r17
  8040f0:	800b883a 	mov	r5,r16
  8040f4:	080253c0 	call	80253c <_fflush_r>
  8040f8:	1025883a 	mov	r18,r2
  8040fc:	80800b17 	ldw	r2,44(r16)
  804100:	10000426 	beq	r2,zero,804114 <_fclose_r+0x60>
  804104:	81400717 	ldw	r5,28(r16)
  804108:	8809883a 	mov	r4,r17
  80410c:	103ee83a 	callr	r2
  804110:	10002a16 	blt	r2,zero,8041bc <_fclose_r+0x108>
  804114:	8080030b 	ldhu	r2,12(r16)
  804118:	1080200c 	andi	r2,r2,128
  80411c:	1000231e 	bne	r2,zero,8041ac <_fclose_r+0xf8>
  804120:	81400c17 	ldw	r5,48(r16)
  804124:	28000526 	beq	r5,zero,80413c <_fclose_r+0x88>
  804128:	80801004 	addi	r2,r16,64
  80412c:	28800226 	beq	r5,r2,804138 <_fclose_r+0x84>
  804130:	8809883a 	mov	r4,r17
  804134:	0802bf80 	call	802bf8 <_free_r>
  804138:	80000c15 	stw	zero,48(r16)
  80413c:	81401117 	ldw	r5,68(r16)
  804140:	28000326 	beq	r5,zero,804150 <_fclose_r+0x9c>
  804144:	8809883a 	mov	r4,r17
  804148:	0802bf80 	call	802bf8 <_free_r>
  80414c:	80001115 	stw	zero,68(r16)
  804150:	8000030d 	sth	zero,12(r16)
  804154:	08027c80 	call	8027c8 <__sfp_lock_release>
  804158:	9005883a 	mov	r2,r18
  80415c:	dfc00317 	ldw	ra,12(sp)
  804160:	dc800217 	ldw	r18,8(sp)
  804164:	dc400117 	ldw	r17,4(sp)
  804168:	dc000017 	ldw	r16,0(sp)
  80416c:	dec00404 	addi	sp,sp,16
  804170:	f800283a 	ret
  804174:	08027c80 	call	8027c8 <__sfp_lock_release>
  804178:	0025883a 	mov	r18,zero
  80417c:	9005883a 	mov	r2,r18
  804180:	dfc00317 	ldw	ra,12(sp)
  804184:	dc800217 	ldw	r18,8(sp)
  804188:	dc400117 	ldw	r17,4(sp)
  80418c:	dc000017 	ldw	r16,0(sp)
  804190:	dec00404 	addi	sp,sp,16
  804194:	f800283a 	ret
  804198:	8809883a 	mov	r4,r17
  80419c:	08027d40 	call	8027d4 <__sinit>
  8041a0:	8080030f 	ldh	r2,12(r16)
  8041a4:	103fd11e 	bne	r2,zero,8040ec <_fclose_r+0x38>
  8041a8:	003ff206 	br	804174 <_fclose_r+0xc0>
  8041ac:	81400417 	ldw	r5,16(r16)
  8041b0:	8809883a 	mov	r4,r17
  8041b4:	0802bf80 	call	802bf8 <_free_r>
  8041b8:	003fd906 	br	804120 <_fclose_r+0x6c>
  8041bc:	04bfffc4 	movi	r18,-1
  8041c0:	003fd406 	br	804114 <_fclose_r+0x60>

008041c4 <fclose>:
  8041c4:	00802074 	movhi	r2,129
  8041c8:	10a9e004 	addi	r2,r2,-22656
  8041cc:	200b883a 	mov	r5,r4
  8041d0:	11000017 	ldw	r4,0(r2)
  8041d4:	08040b41 	jmpi	8040b4 <_fclose_r>

008041d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8041d8:	defff404 	addi	sp,sp,-48
  8041dc:	df000b15 	stw	fp,44(sp)
  8041e0:	df000b04 	addi	fp,sp,44
  8041e4:	e13ffb15 	stw	r4,-20(fp)
  8041e8:	e17ffc15 	stw	r5,-16(fp)
  8041ec:	e1bffd15 	stw	r6,-12(fp)
  8041f0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8041f4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8041f8:	00802074 	movhi	r2,129
  8041fc:	10b11704 	addi	r2,r2,-15268
  804200:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  804204:	1005003a 	cmpeq	r2,r2,zero
  804208:	1000411e 	bne	r2,zero,804310 <alt_alarm_start+0x138>
  {
    if (alarm)
  80420c:	e0bffb17 	ldw	r2,-20(fp)
  804210:	1005003a 	cmpeq	r2,r2,zero
  804214:	10003b1e 	bne	r2,zero,804304 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  804218:	e0fffb17 	ldw	r3,-20(fp)
  80421c:	e0bffd17 	ldw	r2,-12(fp)
  804220:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  804224:	e0fffb17 	ldw	r3,-20(fp)
  804228:	e0bffe17 	ldw	r2,-8(fp)
  80422c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804230:	0005303a 	rdctl	r2,status
  804234:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804238:	e0fff817 	ldw	r3,-32(fp)
  80423c:	00bfff84 	movi	r2,-2
  804240:	1884703a 	and	r2,r3,r2
  804244:	1001703a 	wrctl	status,r2
  
  return context;
  804248:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80424c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  804250:	00802074 	movhi	r2,129
  804254:	10b11804 	addi	r2,r2,-15264
  804258:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80425c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  804260:	e0fffc17 	ldw	r3,-16(fp)
  804264:	e0bff917 	ldw	r2,-28(fp)
  804268:	1885883a 	add	r2,r3,r2
  80426c:	10c00044 	addi	r3,r2,1
  804270:	e0bffb17 	ldw	r2,-20(fp)
  804274:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  804278:	e0bffb17 	ldw	r2,-20(fp)
  80427c:	10c00217 	ldw	r3,8(r2)
  804280:	e0bff917 	ldw	r2,-28(fp)
  804284:	1880042e 	bgeu	r3,r2,804298 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  804288:	e0fffb17 	ldw	r3,-20(fp)
  80428c:	00800044 	movi	r2,1
  804290:	18800405 	stb	r2,16(r3)
  804294:	00000206 	br	8042a0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  804298:	e0bffb17 	ldw	r2,-20(fp)
  80429c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8042a0:	e0fffb17 	ldw	r3,-20(fp)
  8042a4:	00802074 	movhi	r2,129
  8042a8:	10a9eb04 	addi	r2,r2,-22612
  8042ac:	e0bff615 	stw	r2,-40(fp)
  8042b0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8042b4:	e0fff717 	ldw	r3,-36(fp)
  8042b8:	e0bff617 	ldw	r2,-40(fp)
  8042bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8042c0:	e0bff617 	ldw	r2,-40(fp)
  8042c4:	10c00017 	ldw	r3,0(r2)
  8042c8:	e0bff717 	ldw	r2,-36(fp)
  8042cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8042d0:	e0bff617 	ldw	r2,-40(fp)
  8042d4:	10c00017 	ldw	r3,0(r2)
  8042d8:	e0bff717 	ldw	r2,-36(fp)
  8042dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8042e0:	e0fff617 	ldw	r3,-40(fp)
  8042e4:	e0bff717 	ldw	r2,-36(fp)
  8042e8:	18800015 	stw	r2,0(r3)
  8042ec:	e0bffa17 	ldw	r2,-24(fp)
  8042f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8042f4:	e0bff517 	ldw	r2,-44(fp)
  8042f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8042fc:	e03fff15 	stw	zero,-4(fp)
  804300:	00000506 	br	804318 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  804304:	00bffa84 	movi	r2,-22
  804308:	e0bfff15 	stw	r2,-4(fp)
  80430c:	00000206 	br	804318 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  804310:	00bfde84 	movi	r2,-134
  804314:	e0bfff15 	stw	r2,-4(fp)
  804318:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80431c:	e037883a 	mov	sp,fp
  804320:	df000017 	ldw	fp,0(sp)
  804324:	dec00104 	addi	sp,sp,4
  804328:	f800283a 	ret

0080432c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80432c:	defff804 	addi	sp,sp,-32
  804330:	dfc00715 	stw	ra,28(sp)
  804334:	df000615 	stw	fp,24(sp)
  804338:	df000604 	addi	fp,sp,24
  80433c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  804340:	e0bffc17 	ldw	r2,-16(fp)
  804344:	1004803a 	cmplt	r2,r2,zero
  804348:	1000081e 	bne	r2,zero,80436c <close+0x40>
  80434c:	e0bffc17 	ldw	r2,-16(fp)
  804350:	10800324 	muli	r2,r2,12
  804354:	1007883a 	mov	r3,r2
  804358:	00802074 	movhi	r2,129
  80435c:	10a4ef04 	addi	r2,r2,-27716
  804360:	1887883a 	add	r3,r3,r2
  804364:	e0ffff15 	stw	r3,-4(fp)
  804368:	00000106 	br	804370 <close+0x44>
  80436c:	e03fff15 	stw	zero,-4(fp)
  804370:	e0bfff17 	ldw	r2,-4(fp)
  804374:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  804378:	e0bffb17 	ldw	r2,-20(fp)
  80437c:	1005003a 	cmpeq	r2,r2,zero
  804380:	10001d1e 	bne	r2,zero,8043f8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  804384:	e0bffb17 	ldw	r2,-20(fp)
  804388:	10800017 	ldw	r2,0(r2)
  80438c:	10800417 	ldw	r2,16(r2)
  804390:	1005003a 	cmpeq	r2,r2,zero
  804394:	1000071e 	bne	r2,zero,8043b4 <close+0x88>
  804398:	e0bffb17 	ldw	r2,-20(fp)
  80439c:	10800017 	ldw	r2,0(r2)
  8043a0:	10800417 	ldw	r2,16(r2)
  8043a4:	e13ffb17 	ldw	r4,-20(fp)
  8043a8:	103ee83a 	callr	r2
  8043ac:	e0bffe15 	stw	r2,-8(fp)
  8043b0:	00000106 	br	8043b8 <close+0x8c>
  8043b4:	e03ffe15 	stw	zero,-8(fp)
  8043b8:	e0bffe17 	ldw	r2,-8(fp)
  8043bc:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8043c0:	e13ffc17 	ldw	r4,-16(fp)
  8043c4:	0804e340 	call	804e34 <alt_release_fd>
    if (rval < 0)
  8043c8:	e0bffa17 	ldw	r2,-24(fp)
  8043cc:	1004403a 	cmpge	r2,r2,zero
  8043d0:	1000071e 	bne	r2,zero,8043f0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  8043d4:	08044280 	call	804428 <alt_get_errno>
  8043d8:	e0fffa17 	ldw	r3,-24(fp)
  8043dc:	00c7c83a 	sub	r3,zero,r3
  8043e0:	10c00015 	stw	r3,0(r2)
      return -1;
  8043e4:	00bfffc4 	movi	r2,-1
  8043e8:	e0bffd15 	stw	r2,-12(fp)
  8043ec:	00000806 	br	804410 <close+0xe4>
    }
    return 0;
  8043f0:	e03ffd15 	stw	zero,-12(fp)
  8043f4:	00000606 	br	804410 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8043f8:	08044280 	call	804428 <alt_get_errno>
  8043fc:	1007883a 	mov	r3,r2
  804400:	00801444 	movi	r2,81
  804404:	18800015 	stw	r2,0(r3)
    return -1;
  804408:	00bfffc4 	movi	r2,-1
  80440c:	e0bffd15 	stw	r2,-12(fp)
  804410:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  804414:	e037883a 	mov	sp,fp
  804418:	dfc00117 	ldw	ra,4(sp)
  80441c:	df000017 	ldw	fp,0(sp)
  804420:	dec00204 	addi	sp,sp,8
  804424:	f800283a 	ret

00804428 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804428:	defffd04 	addi	sp,sp,-12
  80442c:	dfc00215 	stw	ra,8(sp)
  804430:	df000115 	stw	fp,4(sp)
  804434:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804438:	00802074 	movhi	r2,129
  80443c:	10a9e904 	addi	r2,r2,-22620
  804440:	10800017 	ldw	r2,0(r2)
  804444:	1005003a 	cmpeq	r2,r2,zero
  804448:	1000061e 	bne	r2,zero,804464 <alt_get_errno+0x3c>
  80444c:	00802074 	movhi	r2,129
  804450:	10a9e904 	addi	r2,r2,-22620
  804454:	10800017 	ldw	r2,0(r2)
  804458:	103ee83a 	callr	r2
  80445c:	e0bfff15 	stw	r2,-4(fp)
  804460:	00000306 	br	804470 <alt_get_errno+0x48>
  804464:	00802074 	movhi	r2,129
  804468:	10b11004 	addi	r2,r2,-15296
  80446c:	e0bfff15 	stw	r2,-4(fp)
  804470:	e0bfff17 	ldw	r2,-4(fp)
}
  804474:	e037883a 	mov	sp,fp
  804478:	dfc00117 	ldw	ra,4(sp)
  80447c:	df000017 	ldw	fp,0(sp)
  804480:	dec00204 	addi	sp,sp,8
  804484:	f800283a 	ret

00804488 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  804488:	defffc04 	addi	sp,sp,-16
  80448c:	df000315 	stw	fp,12(sp)
  804490:	df000304 	addi	fp,sp,12
  804494:	e13ffd15 	stw	r4,-12(fp)
  804498:	e17ffe15 	stw	r5,-8(fp)
  80449c:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8044a0:	e0bfff17 	ldw	r2,-4(fp)
}
  8044a4:	e037883a 	mov	sp,fp
  8044a8:	df000017 	ldw	fp,0(sp)
  8044ac:	dec00104 	addi	sp,sp,4
  8044b0:	f800283a 	ret

008044b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8044b4:	defff904 	addi	sp,sp,-28
  8044b8:	dfc00615 	stw	ra,24(sp)
  8044bc:	df000515 	stw	fp,20(sp)
  8044c0:	df000504 	addi	fp,sp,20
  8044c4:	e13ffc15 	stw	r4,-16(fp)
  8044c8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8044cc:	e0bffc17 	ldw	r2,-16(fp)
  8044d0:	1004803a 	cmplt	r2,r2,zero
  8044d4:	1000081e 	bne	r2,zero,8044f8 <fstat+0x44>
  8044d8:	e0bffc17 	ldw	r2,-16(fp)
  8044dc:	10800324 	muli	r2,r2,12
  8044e0:	1007883a 	mov	r3,r2
  8044e4:	00802074 	movhi	r2,129
  8044e8:	10a4ef04 	addi	r2,r2,-27716
  8044ec:	1887883a 	add	r3,r3,r2
  8044f0:	e0ffff15 	stw	r3,-4(fp)
  8044f4:	00000106 	br	8044fc <fstat+0x48>
  8044f8:	e03fff15 	stw	zero,-4(fp)
  8044fc:	e0bfff17 	ldw	r2,-4(fp)
  804500:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  804504:	e0bffb17 	ldw	r2,-20(fp)
  804508:	1005003a 	cmpeq	r2,r2,zero
  80450c:	1000121e 	bne	r2,zero,804558 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  804510:	e0bffb17 	ldw	r2,-20(fp)
  804514:	10800017 	ldw	r2,0(r2)
  804518:	10800817 	ldw	r2,32(r2)
  80451c:	1005003a 	cmpeq	r2,r2,zero
  804520:	1000081e 	bne	r2,zero,804544 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  804524:	e0bffb17 	ldw	r2,-20(fp)
  804528:	10800017 	ldw	r2,0(r2)
  80452c:	10800817 	ldw	r2,32(r2)
  804530:	e13ffb17 	ldw	r4,-20(fp)
  804534:	e17ffd17 	ldw	r5,-12(fp)
  804538:	103ee83a 	callr	r2
  80453c:	e0bffe15 	stw	r2,-8(fp)
  804540:	00000b06 	br	804570 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  804544:	e0fffd17 	ldw	r3,-12(fp)
  804548:	00880004 	movi	r2,8192
  80454c:	18800115 	stw	r2,4(r3)
      return 0;
  804550:	e03ffe15 	stw	zero,-8(fp)
  804554:	00000606 	br	804570 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  804558:	08045880 	call	804588 <alt_get_errno>
  80455c:	1007883a 	mov	r3,r2
  804560:	00801444 	movi	r2,81
  804564:	18800015 	stw	r2,0(r3)
    return -1;
  804568:	00bfffc4 	movi	r2,-1
  80456c:	e0bffe15 	stw	r2,-8(fp)
  804570:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  804574:	e037883a 	mov	sp,fp
  804578:	dfc00117 	ldw	ra,4(sp)
  80457c:	df000017 	ldw	fp,0(sp)
  804580:	dec00204 	addi	sp,sp,8
  804584:	f800283a 	ret

00804588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804588:	defffd04 	addi	sp,sp,-12
  80458c:	dfc00215 	stw	ra,8(sp)
  804590:	df000115 	stw	fp,4(sp)
  804594:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804598:	00802074 	movhi	r2,129
  80459c:	10a9e904 	addi	r2,r2,-22620
  8045a0:	10800017 	ldw	r2,0(r2)
  8045a4:	1005003a 	cmpeq	r2,r2,zero
  8045a8:	1000061e 	bne	r2,zero,8045c4 <alt_get_errno+0x3c>
  8045ac:	00802074 	movhi	r2,129
  8045b0:	10a9e904 	addi	r2,r2,-22620
  8045b4:	10800017 	ldw	r2,0(r2)
  8045b8:	103ee83a 	callr	r2
  8045bc:	e0bfff15 	stw	r2,-4(fp)
  8045c0:	00000306 	br	8045d0 <alt_get_errno+0x48>
  8045c4:	00802074 	movhi	r2,129
  8045c8:	10b11004 	addi	r2,r2,-15296
  8045cc:	e0bfff15 	stw	r2,-4(fp)
  8045d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8045d4:	e037883a 	mov	sp,fp
  8045d8:	dfc00117 	ldw	ra,4(sp)
  8045dc:	df000017 	ldw	fp,0(sp)
  8045e0:	dec00204 	addi	sp,sp,8
  8045e4:	f800283a 	ret

008045e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8045e8:	deffeb04 	addi	sp,sp,-84
  8045ec:	dfc01415 	stw	ra,80(sp)
  8045f0:	df001315 	stw	fp,76(sp)
  8045f4:	df001304 	addi	fp,sp,76
  8045f8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8045fc:	e0bffd17 	ldw	r2,-12(fp)
  804600:	1004803a 	cmplt	r2,r2,zero
  804604:	1000081e 	bne	r2,zero,804628 <isatty+0x40>
  804608:	e0bffd17 	ldw	r2,-12(fp)
  80460c:	10800324 	muli	r2,r2,12
  804610:	1007883a 	mov	r3,r2
  804614:	00802074 	movhi	r2,129
  804618:	10a4ef04 	addi	r2,r2,-27716
  80461c:	1887883a 	add	r3,r3,r2
  804620:	e0ffff15 	stw	r3,-4(fp)
  804624:	00000106 	br	80462c <isatty+0x44>
  804628:	e03fff15 	stw	zero,-4(fp)
  80462c:	e0bfff17 	ldw	r2,-4(fp)
  804630:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  804634:	e0bfed17 	ldw	r2,-76(fp)
  804638:	1005003a 	cmpeq	r2,r2,zero
  80463c:	10000f1e 	bne	r2,zero,80467c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  804640:	e0bfed17 	ldw	r2,-76(fp)
  804644:	10800017 	ldw	r2,0(r2)
  804648:	10800817 	ldw	r2,32(r2)
  80464c:	1004c03a 	cmpne	r2,r2,zero
  804650:	1000031e 	bne	r2,zero,804660 <isatty+0x78>
    {
      return 1;
  804654:	00800044 	movi	r2,1
  804658:	e0bffe15 	stw	r2,-8(fp)
  80465c:	00000c06 	br	804690 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  804660:	e17fee04 	addi	r5,fp,-72
  804664:	e13ffd17 	ldw	r4,-12(fp)
  804668:	08044b40 	call	8044b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80466c:	e0bfef17 	ldw	r2,-68(fp)
  804670:	10880020 	cmpeqi	r2,r2,8192
  804674:	e0bffe15 	stw	r2,-8(fp)
  804678:	00000506 	br	804690 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80467c:	08046a80 	call	8046a8 <alt_get_errno>
  804680:	1007883a 	mov	r3,r2
  804684:	00801444 	movi	r2,81
  804688:	18800015 	stw	r2,0(r3)
    return 0;
  80468c:	e03ffe15 	stw	zero,-8(fp)
  804690:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  804694:	e037883a 	mov	sp,fp
  804698:	dfc00117 	ldw	ra,4(sp)
  80469c:	df000017 	ldw	fp,0(sp)
  8046a0:	dec00204 	addi	sp,sp,8
  8046a4:	f800283a 	ret

008046a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8046a8:	defffd04 	addi	sp,sp,-12
  8046ac:	dfc00215 	stw	ra,8(sp)
  8046b0:	df000115 	stw	fp,4(sp)
  8046b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8046b8:	00802074 	movhi	r2,129
  8046bc:	10a9e904 	addi	r2,r2,-22620
  8046c0:	10800017 	ldw	r2,0(r2)
  8046c4:	1005003a 	cmpeq	r2,r2,zero
  8046c8:	1000061e 	bne	r2,zero,8046e4 <alt_get_errno+0x3c>
  8046cc:	00802074 	movhi	r2,129
  8046d0:	10a9e904 	addi	r2,r2,-22620
  8046d4:	10800017 	ldw	r2,0(r2)
  8046d8:	103ee83a 	callr	r2
  8046dc:	e0bfff15 	stw	r2,-4(fp)
  8046e0:	00000306 	br	8046f0 <alt_get_errno+0x48>
  8046e4:	00802074 	movhi	r2,129
  8046e8:	10b11004 	addi	r2,r2,-15296
  8046ec:	e0bfff15 	stw	r2,-4(fp)
  8046f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8046f4:	e037883a 	mov	sp,fp
  8046f8:	dfc00117 	ldw	ra,4(sp)
  8046fc:	df000017 	ldw	fp,0(sp)
  804700:	dec00204 	addi	sp,sp,8
  804704:	f800283a 	ret

00804708 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  804708:	defffe04 	addi	sp,sp,-8
  80470c:	dfc00115 	stw	ra,4(sp)
  804710:	df000015 	stw	fp,0(sp)
  804714:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  804718:	01002074 	movhi	r4,129
  80471c:	2129f004 	addi	r4,r4,-22592
  804720:	01402074 	movhi	r5,129
  804724:	2962e304 	addi	r5,r5,-29812
  804728:	01802074 	movhi	r6,129
  80472c:	31a9f004 	addi	r6,r6,-22592
  804730:	08047880 	call	804788 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  804734:	01002034 	movhi	r4,128
  804738:	21000804 	addi	r4,r4,32
  80473c:	01402034 	movhi	r5,128
  804740:	29400804 	addi	r5,r5,32
  804744:	01802034 	movhi	r6,128
  804748:	31806d04 	addi	r6,r6,436
  80474c:	08047880 	call	804788 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  804750:	01002074 	movhi	r4,129
  804754:	21221604 	addi	r4,r4,-30632
  804758:	01402074 	movhi	r5,129
  80475c:	29621604 	addi	r5,r5,-30632
  804760:	01802074 	movhi	r6,129
  804764:	31a2e304 	addi	r6,r6,-29812
  804768:	08047880 	call	804788 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80476c:	08078100 	call	807810 <alt_dcache_flush_all>
  alt_icache_flush_all();
  804770:	0807c9c0 	call	807c9c <alt_icache_flush_all>
}
  804774:	e037883a 	mov	sp,fp
  804778:	dfc00117 	ldw	ra,4(sp)
  80477c:	df000017 	ldw	fp,0(sp)
  804780:	dec00204 	addi	sp,sp,8
  804784:	f800283a 	ret

00804788 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  804788:	defffc04 	addi	sp,sp,-16
  80478c:	df000315 	stw	fp,12(sp)
  804790:	df000304 	addi	fp,sp,12
  804794:	e13ffd15 	stw	r4,-12(fp)
  804798:	e17ffe15 	stw	r5,-8(fp)
  80479c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8047a0:	e0fffe17 	ldw	r3,-8(fp)
  8047a4:	e0bffd17 	ldw	r2,-12(fp)
  8047a8:	18800e26 	beq	r3,r2,8047e4 <alt_load_section+0x5c>
  {
    while( to != end )
  8047ac:	00000a06 	br	8047d8 <alt_load_section+0x50>
    {
      *to++ = *from++;
  8047b0:	e0bffd17 	ldw	r2,-12(fp)
  8047b4:	10c00017 	ldw	r3,0(r2)
  8047b8:	e0bffe17 	ldw	r2,-8(fp)
  8047bc:	10c00015 	stw	r3,0(r2)
  8047c0:	e0bffe17 	ldw	r2,-8(fp)
  8047c4:	10800104 	addi	r2,r2,4
  8047c8:	e0bffe15 	stw	r2,-8(fp)
  8047cc:	e0bffd17 	ldw	r2,-12(fp)
  8047d0:	10800104 	addi	r2,r2,4
  8047d4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8047d8:	e0fffe17 	ldw	r3,-8(fp)
  8047dc:	e0bfff17 	ldw	r2,-4(fp)
  8047e0:	18bff31e 	bne	r3,r2,8047b0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  8047e4:	e037883a 	mov	sp,fp
  8047e8:	df000017 	ldw	fp,0(sp)
  8047ec:	dec00104 	addi	sp,sp,4
  8047f0:	f800283a 	ret

008047f4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8047f4:	defff804 	addi	sp,sp,-32
  8047f8:	dfc00715 	stw	ra,28(sp)
  8047fc:	df000615 	stw	fp,24(sp)
  804800:	df000604 	addi	fp,sp,24
  804804:	e13ffc15 	stw	r4,-16(fp)
  804808:	e17ffd15 	stw	r5,-12(fp)
  80480c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  804810:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804814:	e0bffc17 	ldw	r2,-16(fp)
  804818:	1004803a 	cmplt	r2,r2,zero
  80481c:	1000081e 	bne	r2,zero,804840 <lseek+0x4c>
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	10800324 	muli	r2,r2,12
  804828:	1007883a 	mov	r3,r2
  80482c:	00802074 	movhi	r2,129
  804830:	10a4ef04 	addi	r2,r2,-27716
  804834:	1887883a 	add	r3,r3,r2
  804838:	e0ffff15 	stw	r3,-4(fp)
  80483c:	00000106 	br	804844 <lseek+0x50>
  804840:	e03fff15 	stw	zero,-4(fp)
  804844:	e0bfff17 	ldw	r2,-4(fp)
  804848:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80484c:	e0bffb17 	ldw	r2,-20(fp)
  804850:	1005003a 	cmpeq	r2,r2,zero
  804854:	1000111e 	bne	r2,zero,80489c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  804858:	e0bffb17 	ldw	r2,-20(fp)
  80485c:	10800017 	ldw	r2,0(r2)
  804860:	10800717 	ldw	r2,28(r2)
  804864:	1005003a 	cmpeq	r2,r2,zero
  804868:	1000091e 	bne	r2,zero,804890 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80486c:	e0bffb17 	ldw	r2,-20(fp)
  804870:	10800017 	ldw	r2,0(r2)
  804874:	10800717 	ldw	r2,28(r2)
  804878:	e13ffb17 	ldw	r4,-20(fp)
  80487c:	e17ffd17 	ldw	r5,-12(fp)
  804880:	e1bffe17 	ldw	r6,-8(fp)
  804884:	103ee83a 	callr	r2
  804888:	e0bffa15 	stw	r2,-24(fp)
  80488c:	00000506 	br	8048a4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  804890:	00bfde84 	movi	r2,-134
  804894:	e0bffa15 	stw	r2,-24(fp)
  804898:	00000206 	br	8048a4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80489c:	00bfebc4 	movi	r2,-81
  8048a0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  8048a4:	e0bffa17 	ldw	r2,-24(fp)
  8048a8:	1004403a 	cmpge	r2,r2,zero
  8048ac:	1000071e 	bne	r2,zero,8048cc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  8048b0:	08048e40 	call	8048e4 <alt_get_errno>
  8048b4:	1007883a 	mov	r3,r2
  8048b8:	e0bffa17 	ldw	r2,-24(fp)
  8048bc:	0085c83a 	sub	r2,zero,r2
  8048c0:	18800015 	stw	r2,0(r3)
    rc = -1;
  8048c4:	00bfffc4 	movi	r2,-1
  8048c8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  8048cc:	e0bffa17 	ldw	r2,-24(fp)
}
  8048d0:	e037883a 	mov	sp,fp
  8048d4:	dfc00117 	ldw	ra,4(sp)
  8048d8:	df000017 	ldw	fp,0(sp)
  8048dc:	dec00204 	addi	sp,sp,8
  8048e0:	f800283a 	ret

008048e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8048e4:	defffd04 	addi	sp,sp,-12
  8048e8:	dfc00215 	stw	ra,8(sp)
  8048ec:	df000115 	stw	fp,4(sp)
  8048f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8048f4:	00802074 	movhi	r2,129
  8048f8:	10a9e904 	addi	r2,r2,-22620
  8048fc:	10800017 	ldw	r2,0(r2)
  804900:	1005003a 	cmpeq	r2,r2,zero
  804904:	1000061e 	bne	r2,zero,804920 <alt_get_errno+0x3c>
  804908:	00802074 	movhi	r2,129
  80490c:	10a9e904 	addi	r2,r2,-22620
  804910:	10800017 	ldw	r2,0(r2)
  804914:	103ee83a 	callr	r2
  804918:	e0bfff15 	stw	r2,-4(fp)
  80491c:	00000306 	br	80492c <alt_get_errno+0x48>
  804920:	00802074 	movhi	r2,129
  804924:	10b11004 	addi	r2,r2,-15296
  804928:	e0bfff15 	stw	r2,-4(fp)
  80492c:	e0bfff17 	ldw	r2,-4(fp)
}
  804930:	e037883a 	mov	sp,fp
  804934:	dfc00117 	ldw	ra,4(sp)
  804938:	df000017 	ldw	fp,0(sp)
  80493c:	dec00204 	addi	sp,sp,8
  804940:	f800283a 	ret

00804944 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  804944:	defffd04 	addi	sp,sp,-12
  804948:	dfc00215 	stw	ra,8(sp)
  80494c:	df000115 	stw	fp,4(sp)
  804950:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  804954:	0009883a 	mov	r4,zero
  804958:	08052740 	call	805274 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80495c:	08052a80 	call	8052a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  804960:	01002074 	movhi	r4,129
  804964:	21223404 	addi	r4,r4,-30512
  804968:	01402074 	movhi	r5,129
  80496c:	29623404 	addi	r5,r5,-30512
  804970:	01802074 	movhi	r6,129
  804974:	31a23404 	addi	r6,r6,-30512
  804978:	080805c0 	call	80805c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80497c:	08079680 	call	807968 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  804980:	01002034 	movhi	r4,128
  804984:	211e7304 	addi	r4,r4,31180
  804988:	08083000 	call	808300 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80498c:	d1273417 	ldw	r4,-25392(gp)
  804990:	d1673517 	ldw	r5,-25388(gp)
  804994:	d1a73617 	ldw	r6,-25384(gp)
  804998:	08003c80 	call	8003c8 <main>
  80499c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8049a0:	01000044 	movi	r4,1
  8049a4:	080432c0 	call	80432c <close>
  exit (result);
  8049a8:	e13fff17 	ldw	r4,-4(fp)
  8049ac:	08083140 	call	808314 <exit>

008049b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8049b0:	defffe04 	addi	sp,sp,-8
  8049b4:	df000115 	stw	fp,4(sp)
  8049b8:	df000104 	addi	fp,sp,4
  8049bc:	e13fff15 	stw	r4,-4(fp)
}
  8049c0:	e037883a 	mov	sp,fp
  8049c4:	df000017 	ldw	fp,0(sp)
  8049c8:	dec00104 	addi	sp,sp,4
  8049cc:	f800283a 	ret

008049d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8049d0:	defffe04 	addi	sp,sp,-8
  8049d4:	df000115 	stw	fp,4(sp)
  8049d8:	df000104 	addi	fp,sp,4
  8049dc:	e13fff15 	stw	r4,-4(fp)
}
  8049e0:	e037883a 	mov	sp,fp
  8049e4:	df000017 	ldw	fp,0(sp)
  8049e8:	dec00104 	addi	sp,sp,4
  8049ec:	f800283a 	ret

008049f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8049f0:	defffc04 	addi	sp,sp,-16
  8049f4:	df000315 	stw	fp,12(sp)
  8049f8:	df000304 	addi	fp,sp,12
  8049fc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  804a00:	e0bffe17 	ldw	r2,-8(fp)
  804a04:	10800217 	ldw	r2,8(r2)
  804a08:	10d00034 	orhi	r3,r2,16384
  804a0c:	e0bffe17 	ldw	r2,-8(fp)
  804a10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804a14:	e03ffd15 	stw	zero,-12(fp)
  804a18:	00002006 	br	804a9c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  804a1c:	e0bffd17 	ldw	r2,-12(fp)
  804a20:	00c02074 	movhi	r3,129
  804a24:	18e4ef04 	addi	r3,r3,-27716
  804a28:	10800324 	muli	r2,r2,12
  804a2c:	10c5883a 	add	r2,r2,r3
  804a30:	10c00017 	ldw	r3,0(r2)
  804a34:	e0bffe17 	ldw	r2,-8(fp)
  804a38:	10800017 	ldw	r2,0(r2)
  804a3c:	1880141e 	bne	r3,r2,804a90 <alt_file_locked+0xa0>
  804a40:	e0bffd17 	ldw	r2,-12(fp)
  804a44:	00c02074 	movhi	r3,129
  804a48:	18e4ef04 	addi	r3,r3,-27716
  804a4c:	10800324 	muli	r2,r2,12
  804a50:	10c5883a 	add	r2,r2,r3
  804a54:	10800204 	addi	r2,r2,8
  804a58:	10800017 	ldw	r2,0(r2)
  804a5c:	1004403a 	cmpge	r2,r2,zero
  804a60:	10000b1e 	bne	r2,zero,804a90 <alt_file_locked+0xa0>
  804a64:	e0bffd17 	ldw	r2,-12(fp)
  804a68:	10800324 	muli	r2,r2,12
  804a6c:	1007883a 	mov	r3,r2
  804a70:	00802074 	movhi	r2,129
  804a74:	10a4ef04 	addi	r2,r2,-27716
  804a78:	1887883a 	add	r3,r3,r2
  804a7c:	e0bffe17 	ldw	r2,-8(fp)
  804a80:	18800326 	beq	r3,r2,804a90 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  804a84:	00bffcc4 	movi	r2,-13
  804a88:	e0bfff15 	stw	r2,-4(fp)
  804a8c:	00000a06 	br	804ab8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  804a90:	e0bffd17 	ldw	r2,-12(fp)
  804a94:	10800044 	addi	r2,r2,1
  804a98:	e0bffd15 	stw	r2,-12(fp)
  804a9c:	00802074 	movhi	r2,129
  804aa0:	10a9e804 	addi	r2,r2,-22624
  804aa4:	10800017 	ldw	r2,0(r2)
  804aa8:	1007883a 	mov	r3,r2
  804aac:	e0bffd17 	ldw	r2,-12(fp)
  804ab0:	18bfda2e 	bgeu	r3,r2,804a1c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  804ab4:	e03fff15 	stw	zero,-4(fp)
  804ab8:	e0bfff17 	ldw	r2,-4(fp)
}
  804abc:	e037883a 	mov	sp,fp
  804ac0:	df000017 	ldw	fp,0(sp)
  804ac4:	dec00104 	addi	sp,sp,4
  804ac8:	f800283a 	ret

00804acc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  804acc:	defff404 	addi	sp,sp,-48
  804ad0:	dfc00b15 	stw	ra,44(sp)
  804ad4:	df000a15 	stw	fp,40(sp)
  804ad8:	df000a04 	addi	fp,sp,40
  804adc:	e13ffb15 	stw	r4,-20(fp)
  804ae0:	e17ffc15 	stw	r5,-16(fp)
  804ae4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  804ae8:	00bfffc4 	movi	r2,-1
  804aec:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  804af0:	00bffb44 	movi	r2,-19
  804af4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  804af8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  804afc:	e13ffb17 	ldw	r4,-20(fp)
  804b00:	01402074 	movhi	r5,129
  804b04:	2969e604 	addi	r5,r5,-22632
  804b08:	0807a300 	call	807a30 <alt_find_dev>
  804b0c:	e0bffa15 	stw	r2,-24(fp)
  804b10:	e0bffa17 	ldw	r2,-24(fp)
  804b14:	1004c03a 	cmpne	r2,r2,zero
  804b18:	1000051e 	bne	r2,zero,804b30 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  804b1c:	e13ffb17 	ldw	r4,-20(fp)
  804b20:	0807ac40 	call	807ac4 <alt_find_file>
  804b24:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  804b28:	00800044 	movi	r2,1
  804b2c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  804b30:	e0bffa17 	ldw	r2,-24(fp)
  804b34:	1005003a 	cmpeq	r2,r2,zero
  804b38:	1000301e 	bne	r2,zero,804bfc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  804b3c:	e13ffa17 	ldw	r4,-24(fp)
  804b40:	0807be40 	call	807be4 <alt_get_fd>
  804b44:	e0bff815 	stw	r2,-32(fp)
  804b48:	e0bff817 	ldw	r2,-32(fp)
  804b4c:	1004403a 	cmpge	r2,r2,zero
  804b50:	1000031e 	bne	r2,zero,804b60 <open+0x94>
    {
      status = index;
  804b54:	e0bff817 	ldw	r2,-32(fp)
  804b58:	e0bff715 	stw	r2,-36(fp)
  804b5c:	00002906 	br	804c04 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  804b60:	e0bff817 	ldw	r2,-32(fp)
  804b64:	10800324 	muli	r2,r2,12
  804b68:	1007883a 	mov	r3,r2
  804b6c:	00802074 	movhi	r2,129
  804b70:	10a4ef04 	addi	r2,r2,-27716
  804b74:	1885883a 	add	r2,r3,r2
  804b78:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  804b7c:	e0fffc17 	ldw	r3,-16(fp)
  804b80:	00900034 	movhi	r2,16384
  804b84:	10bfffc4 	addi	r2,r2,-1
  804b88:	1886703a 	and	r3,r3,r2
  804b8c:	e0bff917 	ldw	r2,-28(fp)
  804b90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  804b94:	e0bff617 	ldw	r2,-40(fp)
  804b98:	1004c03a 	cmpne	r2,r2,zero
  804b9c:	1000061e 	bne	r2,zero,804bb8 <open+0xec>
  804ba0:	e13ff917 	ldw	r4,-28(fp)
  804ba4:	08049f00 	call	8049f0 <alt_file_locked>
  804ba8:	e0bff715 	stw	r2,-36(fp)
  804bac:	e0bff717 	ldw	r2,-36(fp)
  804bb0:	1004803a 	cmplt	r2,r2,zero
  804bb4:	1000131e 	bne	r2,zero,804c04 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  804bb8:	e0bffa17 	ldw	r2,-24(fp)
  804bbc:	10800317 	ldw	r2,12(r2)
  804bc0:	1005003a 	cmpeq	r2,r2,zero
  804bc4:	1000091e 	bne	r2,zero,804bec <open+0x120>
  804bc8:	e0bffa17 	ldw	r2,-24(fp)
  804bcc:	10800317 	ldw	r2,12(r2)
  804bd0:	e13ff917 	ldw	r4,-28(fp)
  804bd4:	e17ffb17 	ldw	r5,-20(fp)
  804bd8:	e1bffc17 	ldw	r6,-16(fp)
  804bdc:	e1fffd17 	ldw	r7,-12(fp)
  804be0:	103ee83a 	callr	r2
  804be4:	e0bfff15 	stw	r2,-4(fp)
  804be8:	00000106 	br	804bf0 <open+0x124>
  804bec:	e03fff15 	stw	zero,-4(fp)
  804bf0:	e0bfff17 	ldw	r2,-4(fp)
  804bf4:	e0bff715 	stw	r2,-36(fp)
  804bf8:	00000206 	br	804c04 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  804bfc:	00bffb44 	movi	r2,-19
  804c00:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  804c04:	e0bff717 	ldw	r2,-36(fp)
  804c08:	1004403a 	cmpge	r2,r2,zero
  804c0c:	1000091e 	bne	r2,zero,804c34 <open+0x168>
  {
    alt_release_fd (index);  
  804c10:	e13ff817 	ldw	r4,-32(fp)
  804c14:	0804e340 	call	804e34 <alt_release_fd>
    ALT_ERRNO = -status;
  804c18:	0804c540 	call	804c54 <alt_get_errno>
  804c1c:	e0fff717 	ldw	r3,-36(fp)
  804c20:	00c7c83a 	sub	r3,zero,r3
  804c24:	10c00015 	stw	r3,0(r2)
    return -1;
  804c28:	00bfffc4 	movi	r2,-1
  804c2c:	e0bffe15 	stw	r2,-8(fp)
  804c30:	00000206 	br	804c3c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  804c34:	e0bff817 	ldw	r2,-32(fp)
  804c38:	e0bffe15 	stw	r2,-8(fp)
  804c3c:	e0bffe17 	ldw	r2,-8(fp)
}
  804c40:	e037883a 	mov	sp,fp
  804c44:	dfc00117 	ldw	ra,4(sp)
  804c48:	df000017 	ldw	fp,0(sp)
  804c4c:	dec00204 	addi	sp,sp,8
  804c50:	f800283a 	ret

00804c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804c54:	defffd04 	addi	sp,sp,-12
  804c58:	dfc00215 	stw	ra,8(sp)
  804c5c:	df000115 	stw	fp,4(sp)
  804c60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804c64:	00802074 	movhi	r2,129
  804c68:	10a9e904 	addi	r2,r2,-22620
  804c6c:	10800017 	ldw	r2,0(r2)
  804c70:	1005003a 	cmpeq	r2,r2,zero
  804c74:	1000061e 	bne	r2,zero,804c90 <alt_get_errno+0x3c>
  804c78:	00802074 	movhi	r2,129
  804c7c:	10a9e904 	addi	r2,r2,-22620
  804c80:	10800017 	ldw	r2,0(r2)
  804c84:	103ee83a 	callr	r2
  804c88:	e0bfff15 	stw	r2,-4(fp)
  804c8c:	00000306 	br	804c9c <alt_get_errno+0x48>
  804c90:	00802074 	movhi	r2,129
  804c94:	10b11004 	addi	r2,r2,-15296
  804c98:	e0bfff15 	stw	r2,-4(fp)
  804c9c:	e0bfff17 	ldw	r2,-4(fp)
}
  804ca0:	e037883a 	mov	sp,fp
  804ca4:	dfc00117 	ldw	ra,4(sp)
  804ca8:	df000017 	ldw	fp,0(sp)
  804cac:	dec00204 	addi	sp,sp,8
  804cb0:	f800283a 	ret

00804cb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  804cb4:	defff704 	addi	sp,sp,-36
  804cb8:	dfc00815 	stw	ra,32(sp)
  804cbc:	df000715 	stw	fp,28(sp)
  804cc0:	df000704 	addi	fp,sp,28
  804cc4:	e13ffb15 	stw	r4,-20(fp)
  804cc8:	e17ffc15 	stw	r5,-16(fp)
  804ccc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  804cd0:	e0bffb17 	ldw	r2,-20(fp)
  804cd4:	1004803a 	cmplt	r2,r2,zero
  804cd8:	1000081e 	bne	r2,zero,804cfc <read+0x48>
  804cdc:	e0bffb17 	ldw	r2,-20(fp)
  804ce0:	10800324 	muli	r2,r2,12
  804ce4:	1007883a 	mov	r3,r2
  804ce8:	00802074 	movhi	r2,129
  804cec:	10a4ef04 	addi	r2,r2,-27716
  804cf0:	1887883a 	add	r3,r3,r2
  804cf4:	e0ffff15 	stw	r3,-4(fp)
  804cf8:	00000106 	br	804d00 <read+0x4c>
  804cfc:	e03fff15 	stw	zero,-4(fp)
  804d00:	e0bfff17 	ldw	r2,-4(fp)
  804d04:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  804d08:	e0bffa17 	ldw	r2,-24(fp)
  804d0c:	1005003a 	cmpeq	r2,r2,zero
  804d10:	1000241e 	bne	r2,zero,804da4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  804d14:	e0bffa17 	ldw	r2,-24(fp)
  804d18:	10800217 	ldw	r2,8(r2)
  804d1c:	108000cc 	andi	r2,r2,3
  804d20:	10800060 	cmpeqi	r2,r2,1
  804d24:	10001a1e 	bne	r2,zero,804d90 <read+0xdc>
  804d28:	e0bffa17 	ldw	r2,-24(fp)
  804d2c:	10800017 	ldw	r2,0(r2)
  804d30:	10800517 	ldw	r2,20(r2)
  804d34:	1005003a 	cmpeq	r2,r2,zero
  804d38:	1000151e 	bne	r2,zero,804d90 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  804d3c:	e0bffa17 	ldw	r2,-24(fp)
  804d40:	10800017 	ldw	r2,0(r2)
  804d44:	10800517 	ldw	r2,20(r2)
  804d48:	e17ffc17 	ldw	r5,-16(fp)
  804d4c:	e1bffd17 	ldw	r6,-12(fp)
  804d50:	e13ffa17 	ldw	r4,-24(fp)
  804d54:	103ee83a 	callr	r2
  804d58:	e0bff915 	stw	r2,-28(fp)
  804d5c:	e0bff917 	ldw	r2,-28(fp)
  804d60:	1004403a 	cmpge	r2,r2,zero
  804d64:	1000071e 	bne	r2,zero,804d84 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  804d68:	0804dd40 	call	804dd4 <alt_get_errno>
  804d6c:	e0fff917 	ldw	r3,-28(fp)
  804d70:	00c7c83a 	sub	r3,zero,r3
  804d74:	10c00015 	stw	r3,0(r2)
          return -1;
  804d78:	00bfffc4 	movi	r2,-1
  804d7c:	e0bffe15 	stw	r2,-8(fp)
  804d80:	00000e06 	br	804dbc <read+0x108>
        }
        return rval;
  804d84:	e0bff917 	ldw	r2,-28(fp)
  804d88:	e0bffe15 	stw	r2,-8(fp)
  804d8c:	00000b06 	br	804dbc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  804d90:	0804dd40 	call	804dd4 <alt_get_errno>
  804d94:	1007883a 	mov	r3,r2
  804d98:	00800344 	movi	r2,13
  804d9c:	18800015 	stw	r2,0(r3)
  804da0:	00000406 	br	804db4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  804da4:	0804dd40 	call	804dd4 <alt_get_errno>
  804da8:	1007883a 	mov	r3,r2
  804dac:	00801444 	movi	r2,81
  804db0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  804db4:	00bfffc4 	movi	r2,-1
  804db8:	e0bffe15 	stw	r2,-8(fp)
  804dbc:	e0bffe17 	ldw	r2,-8(fp)
}
  804dc0:	e037883a 	mov	sp,fp
  804dc4:	dfc00117 	ldw	ra,4(sp)
  804dc8:	df000017 	ldw	fp,0(sp)
  804dcc:	dec00204 	addi	sp,sp,8
  804dd0:	f800283a 	ret

00804dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  804dd4:	defffd04 	addi	sp,sp,-12
  804dd8:	dfc00215 	stw	ra,8(sp)
  804ddc:	df000115 	stw	fp,4(sp)
  804de0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  804de4:	00802074 	movhi	r2,129
  804de8:	10a9e904 	addi	r2,r2,-22620
  804dec:	10800017 	ldw	r2,0(r2)
  804df0:	1005003a 	cmpeq	r2,r2,zero
  804df4:	1000061e 	bne	r2,zero,804e10 <alt_get_errno+0x3c>
  804df8:	00802074 	movhi	r2,129
  804dfc:	10a9e904 	addi	r2,r2,-22620
  804e00:	10800017 	ldw	r2,0(r2)
  804e04:	103ee83a 	callr	r2
  804e08:	e0bfff15 	stw	r2,-4(fp)
  804e0c:	00000306 	br	804e1c <alt_get_errno+0x48>
  804e10:	00802074 	movhi	r2,129
  804e14:	10b11004 	addi	r2,r2,-15296
  804e18:	e0bfff15 	stw	r2,-4(fp)
  804e1c:	e0bfff17 	ldw	r2,-4(fp)
}
  804e20:	e037883a 	mov	sp,fp
  804e24:	dfc00117 	ldw	ra,4(sp)
  804e28:	df000017 	ldw	fp,0(sp)
  804e2c:	dec00204 	addi	sp,sp,8
  804e30:	f800283a 	ret

00804e34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  804e34:	defffe04 	addi	sp,sp,-8
  804e38:	df000115 	stw	fp,4(sp)
  804e3c:	df000104 	addi	fp,sp,4
  804e40:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  804e44:	e0bfff17 	ldw	r2,-4(fp)
  804e48:	108000d0 	cmplti	r2,r2,3
  804e4c:	10000d1e 	bne	r2,zero,804e84 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  804e50:	e0bfff17 	ldw	r2,-4(fp)
  804e54:	00c02074 	movhi	r3,129
  804e58:	18e4ef04 	addi	r3,r3,-27716
  804e5c:	10800324 	muli	r2,r2,12
  804e60:	10c5883a 	add	r2,r2,r3
  804e64:	10800204 	addi	r2,r2,8
  804e68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  804e6c:	e0bfff17 	ldw	r2,-4(fp)
  804e70:	00c02074 	movhi	r3,129
  804e74:	18e4ef04 	addi	r3,r3,-27716
  804e78:	10800324 	muli	r2,r2,12
  804e7c:	10c5883a 	add	r2,r2,r3
  804e80:	10000015 	stw	zero,0(r2)
  }
}
  804e84:	e037883a 	mov	sp,fp
  804e88:	df000017 	ldw	fp,0(sp)
  804e8c:	dec00104 	addi	sp,sp,4
  804e90:	f800283a 	ret

00804e94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  804e94:	defff804 	addi	sp,sp,-32
  804e98:	df000715 	stw	fp,28(sp)
  804e9c:	df000704 	addi	fp,sp,28
  804ea0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ea4:	0005303a 	rdctl	r2,status
  804ea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804eac:	e0fffb17 	ldw	r3,-20(fp)
  804eb0:	00bfff84 	movi	r2,-2
  804eb4:	1884703a 	and	r2,r3,r2
  804eb8:	1001703a 	wrctl	status,r2
  
  return context;
  804ebc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  804ec0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  804ec4:	d0a00a17 	ldw	r2,-32728(gp)
  804ec8:	10c000c4 	addi	r3,r2,3
  804ecc:	00bfff04 	movi	r2,-4
  804ed0:	1884703a 	and	r2,r3,r2
  804ed4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  804ed8:	d0e00a17 	ldw	r3,-32728(gp)
  804edc:	e0bffe17 	ldw	r2,-8(fp)
  804ee0:	1887883a 	add	r3,r3,r2
  804ee4:	00804034 	movhi	r2,256
  804ee8:	10800004 	addi	r2,r2,0
  804eec:	10c0072e 	bgeu	r2,r3,804f0c <sbrk+0x78>
  804ef0:	e0bffd17 	ldw	r2,-12(fp)
  804ef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ef8:	e0bffa17 	ldw	r2,-24(fp)
  804efc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  804f00:	00bfffc4 	movi	r2,-1
  804f04:	e0bfff15 	stw	r2,-4(fp)
  804f08:	00000c06 	br	804f3c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  804f0c:	d0a00a17 	ldw	r2,-32728(gp)
  804f10:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  804f14:	d0e00a17 	ldw	r3,-32728(gp)
  804f18:	e0bffe17 	ldw	r2,-8(fp)
  804f1c:	1885883a 	add	r2,r3,r2
  804f20:	d0a00a15 	stw	r2,-32728(gp)
  804f24:	e0bffd17 	ldw	r2,-12(fp)
  804f28:	e0bff915 	stw	r2,-28(fp)
  804f2c:	e0bff917 	ldw	r2,-28(fp)
  804f30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  804f34:	e0bffc17 	ldw	r2,-16(fp)
  804f38:	e0bfff15 	stw	r2,-4(fp)
  804f3c:	e0bfff17 	ldw	r2,-4(fp)
} 
  804f40:	e037883a 	mov	sp,fp
  804f44:	df000017 	ldw	fp,0(sp)
  804f48:	dec00104 	addi	sp,sp,4
  804f4c:	f800283a 	ret

00804f50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  804f50:	defffa04 	addi	sp,sp,-24
  804f54:	df000515 	stw	fp,20(sp)
  804f58:	df000504 	addi	fp,sp,20
  804f5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f60:	0005303a 	rdctl	r2,status
  804f64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f68:	e0fffd17 	ldw	r3,-12(fp)
  804f6c:	00bfff84 	movi	r2,-2
  804f70:	1884703a 	and	r2,r3,r2
  804f74:	1001703a 	wrctl	status,r2
  
  return context;
  804f78:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  804f7c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  804f80:	e0bfff17 	ldw	r2,-4(fp)
  804f84:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  804f88:	e0bffc17 	ldw	r2,-16(fp)
  804f8c:	10c00017 	ldw	r3,0(r2)
  804f90:	e0bffc17 	ldw	r2,-16(fp)
  804f94:	10800117 	ldw	r2,4(r2)
  804f98:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  804f9c:	e0bffc17 	ldw	r2,-16(fp)
  804fa0:	10c00117 	ldw	r3,4(r2)
  804fa4:	e0bffc17 	ldw	r2,-16(fp)
  804fa8:	10800017 	ldw	r2,0(r2)
  804fac:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  804fb0:	e0fffc17 	ldw	r3,-16(fp)
  804fb4:	e0bffc17 	ldw	r2,-16(fp)
  804fb8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  804fbc:	e0fffc17 	ldw	r3,-16(fp)
  804fc0:	e0bffc17 	ldw	r2,-16(fp)
  804fc4:	18800015 	stw	r2,0(r3)
  804fc8:	e0bffe17 	ldw	r2,-8(fp)
  804fcc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804fd0:	e0bffb17 	ldw	r2,-20(fp)
  804fd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  804fd8:	e037883a 	mov	sp,fp
  804fdc:	df000017 	ldw	fp,0(sp)
  804fe0:	dec00104 	addi	sp,sp,4
  804fe4:	f800283a 	ret

00804fe8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  804fe8:	defffb04 	addi	sp,sp,-20
  804fec:	dfc00415 	stw	ra,16(sp)
  804ff0:	df000315 	stw	fp,12(sp)
  804ff4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  804ff8:	d0a00b17 	ldw	r2,-32724(gp)
  804ffc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  805000:	d0a73817 	ldw	r2,-25376(gp)
  805004:	10800044 	addi	r2,r2,1
  805008:	d0a73815 	stw	r2,-25376(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80500c:	00003106 	br	8050d4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  805010:	e0bffe17 	ldw	r2,-8(fp)
  805014:	10800017 	ldw	r2,0(r2)
  805018:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80501c:	e0bffe17 	ldw	r2,-8(fp)
  805020:	10800403 	ldbu	r2,16(r2)
  805024:	10803fcc 	andi	r2,r2,255
  805028:	1005003a 	cmpeq	r2,r2,zero
  80502c:	1000051e 	bne	r2,zero,805044 <alt_tick+0x5c>
  805030:	d0a73817 	ldw	r2,-25376(gp)
  805034:	1004c03a 	cmpne	r2,r2,zero
  805038:	1000021e 	bne	r2,zero,805044 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80503c:	e0bffe17 	ldw	r2,-8(fp)
  805040:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  805044:	e0bffe17 	ldw	r2,-8(fp)
  805048:	10c00217 	ldw	r3,8(r2)
  80504c:	d0a73817 	ldw	r2,-25376(gp)
  805050:	10c01e36 	bltu	r2,r3,8050cc <alt_tick+0xe4>
  805054:	e0bffe17 	ldw	r2,-8(fp)
  805058:	10800403 	ldbu	r2,16(r2)
  80505c:	10803fcc 	andi	r2,r2,255
  805060:	1004c03a 	cmpne	r2,r2,zero
  805064:	1000191e 	bne	r2,zero,8050cc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  805068:	e0bffe17 	ldw	r2,-8(fp)
  80506c:	10c00317 	ldw	r3,12(r2)
  805070:	e0bffe17 	ldw	r2,-8(fp)
  805074:	11000517 	ldw	r4,20(r2)
  805078:	183ee83a 	callr	r3
  80507c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  805080:	e0bffd17 	ldw	r2,-12(fp)
  805084:	1004c03a 	cmpne	r2,r2,zero
  805088:	1000031e 	bne	r2,zero,805098 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80508c:	e13ffe17 	ldw	r4,-8(fp)
  805090:	0804f500 	call	804f50 <alt_alarm_stop>
  805094:	00000d06 	br	8050cc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  805098:	e0bffe17 	ldw	r2,-8(fp)
  80509c:	10c00217 	ldw	r3,8(r2)
  8050a0:	e0bffd17 	ldw	r2,-12(fp)
  8050a4:	1887883a 	add	r3,r3,r2
  8050a8:	e0bffe17 	ldw	r2,-8(fp)
  8050ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8050b0:	e0bffe17 	ldw	r2,-8(fp)
  8050b4:	10c00217 	ldw	r3,8(r2)
  8050b8:	d0a73817 	ldw	r2,-25376(gp)
  8050bc:	1880032e 	bgeu	r3,r2,8050cc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8050c0:	e0fffe17 	ldw	r3,-8(fp)
  8050c4:	00800044 	movi	r2,1
  8050c8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8050cc:	e0bfff17 	ldw	r2,-4(fp)
  8050d0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8050d4:	d0e00b04 	addi	r3,gp,-32724
  8050d8:	e0bffe17 	ldw	r2,-8(fp)
  8050dc:	10ffcc1e 	bne	r2,r3,805010 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8050e0:	e037883a 	mov	sp,fp
  8050e4:	dfc00117 	ldw	ra,4(sp)
  8050e8:	df000017 	ldw	fp,0(sp)
  8050ec:	dec00204 	addi	sp,sp,8
  8050f0:	f800283a 	ret

008050f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8050f4:	defff704 	addi	sp,sp,-36
  8050f8:	dfc00815 	stw	ra,32(sp)
  8050fc:	df000715 	stw	fp,28(sp)
  805100:	df000704 	addi	fp,sp,28
  805104:	e13ffb15 	stw	r4,-20(fp)
  805108:	e17ffc15 	stw	r5,-16(fp)
  80510c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  805110:	e0bffb17 	ldw	r2,-20(fp)
  805114:	1004803a 	cmplt	r2,r2,zero
  805118:	1000081e 	bne	r2,zero,80513c <write+0x48>
  80511c:	e0bffb17 	ldw	r2,-20(fp)
  805120:	10800324 	muli	r2,r2,12
  805124:	1007883a 	mov	r3,r2
  805128:	00802074 	movhi	r2,129
  80512c:	10a4ef04 	addi	r2,r2,-27716
  805130:	1887883a 	add	r3,r3,r2
  805134:	e0ffff15 	stw	r3,-4(fp)
  805138:	00000106 	br	805140 <write+0x4c>
  80513c:	e03fff15 	stw	zero,-4(fp)
  805140:	e0bfff17 	ldw	r2,-4(fp)
  805144:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  805148:	e0bffa17 	ldw	r2,-24(fp)
  80514c:	1005003a 	cmpeq	r2,r2,zero
  805150:	1000241e 	bne	r2,zero,8051e4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  805154:	e0bffa17 	ldw	r2,-24(fp)
  805158:	10800217 	ldw	r2,8(r2)
  80515c:	108000cc 	andi	r2,r2,3
  805160:	1005003a 	cmpeq	r2,r2,zero
  805164:	10001a1e 	bne	r2,zero,8051d0 <write+0xdc>
  805168:	e0bffa17 	ldw	r2,-24(fp)
  80516c:	10800017 	ldw	r2,0(r2)
  805170:	10800617 	ldw	r2,24(r2)
  805174:	1005003a 	cmpeq	r2,r2,zero
  805178:	1000151e 	bne	r2,zero,8051d0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80517c:	e0bffa17 	ldw	r2,-24(fp)
  805180:	10800017 	ldw	r2,0(r2)
  805184:	10800617 	ldw	r2,24(r2)
  805188:	e17ffc17 	ldw	r5,-16(fp)
  80518c:	e1bffd17 	ldw	r6,-12(fp)
  805190:	e13ffa17 	ldw	r4,-24(fp)
  805194:	103ee83a 	callr	r2
  805198:	e0bff915 	stw	r2,-28(fp)
  80519c:	e0bff917 	ldw	r2,-28(fp)
  8051a0:	1004403a 	cmpge	r2,r2,zero
  8051a4:	1000071e 	bne	r2,zero,8051c4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
  8051a8:	08052140 	call	805214 <alt_get_errno>
  8051ac:	e0fff917 	ldw	r3,-28(fp)
  8051b0:	00c7c83a 	sub	r3,zero,r3
  8051b4:	10c00015 	stw	r3,0(r2)
        return -1;
  8051b8:	00bfffc4 	movi	r2,-1
  8051bc:	e0bffe15 	stw	r2,-8(fp)
  8051c0:	00000e06 	br	8051fc <write+0x108>
      }
      return rval;
  8051c4:	e0bff917 	ldw	r2,-28(fp)
  8051c8:	e0bffe15 	stw	r2,-8(fp)
  8051cc:	00000b06 	br	8051fc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8051d0:	08052140 	call	805214 <alt_get_errno>
  8051d4:	1007883a 	mov	r3,r2
  8051d8:	00800344 	movi	r2,13
  8051dc:	18800015 	stw	r2,0(r3)
  8051e0:	00000406 	br	8051f4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8051e4:	08052140 	call	805214 <alt_get_errno>
  8051e8:	1007883a 	mov	r3,r2
  8051ec:	00801444 	movi	r2,81
  8051f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8051f4:	00bfffc4 	movi	r2,-1
  8051f8:	e0bffe15 	stw	r2,-8(fp)
  8051fc:	e0bffe17 	ldw	r2,-8(fp)
}
  805200:	e037883a 	mov	sp,fp
  805204:	dfc00117 	ldw	ra,4(sp)
  805208:	df000017 	ldw	fp,0(sp)
  80520c:	dec00204 	addi	sp,sp,8
  805210:	f800283a 	ret

00805214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  805214:	defffd04 	addi	sp,sp,-12
  805218:	dfc00215 	stw	ra,8(sp)
  80521c:	df000115 	stw	fp,4(sp)
  805220:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  805224:	00802074 	movhi	r2,129
  805228:	10a9e904 	addi	r2,r2,-22620
  80522c:	10800017 	ldw	r2,0(r2)
  805230:	1005003a 	cmpeq	r2,r2,zero
  805234:	1000061e 	bne	r2,zero,805250 <alt_get_errno+0x3c>
  805238:	00802074 	movhi	r2,129
  80523c:	10a9e904 	addi	r2,r2,-22620
  805240:	10800017 	ldw	r2,0(r2)
  805244:	103ee83a 	callr	r2
  805248:	e0bfff15 	stw	r2,-4(fp)
  80524c:	00000306 	br	80525c <alt_get_errno+0x48>
  805250:	00802074 	movhi	r2,129
  805254:	10b11004 	addi	r2,r2,-15296
  805258:	e0bfff15 	stw	r2,-4(fp)
  80525c:	e0bfff17 	ldw	r2,-4(fp)
}
  805260:	e037883a 	mov	sp,fp
  805264:	dfc00117 	ldw	ra,4(sp)
  805268:	df000017 	ldw	fp,0(sp)
  80526c:	dec00204 	addi	sp,sp,8
  805270:	f800283a 	ret

00805274 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  805274:	defffd04 	addi	sp,sp,-12
  805278:	dfc00215 	stw	ra,8(sp)
  80527c:	df000115 	stw	fp,4(sp)
  805280:	df000104 	addi	fp,sp,4
  805284:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
  805288:	08081040 	call	808104 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80528c:	00800044 	movi	r2,1
  805290:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  805294:	e037883a 	mov	sp,fp
  805298:	dfc00117 	ldw	ra,4(sp)
  80529c:	df000017 	ldw	fp,0(sp)
  8052a0:	dec00204 	addi	sp,sp,8
  8052a4:	f800283a 	ret

008052a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8052a8:	defffe04 	addi	sp,sp,-8
  8052ac:	dfc00115 	stw	ra,4(sp)
  8052b0:	df000015 	stw	fp,0(sp)
  8052b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8052b8:	01004074 	movhi	r4,257
  8052bc:	21040804 	addi	r4,r4,4128
  8052c0:	000b883a 	mov	r5,zero
  8052c4:	01800084 	movi	r6,2
  8052c8:	01c0fa04 	movi	r7,1000
  8052cc:	0806dd00 	call	806dd0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  8052d0:	01002074 	movhi	r4,129
  8052d4:	21255904 	addi	r4,r4,-27292
  8052d8:	000b883a 	mov	r5,zero
  8052dc:	01800044 	movi	r6,1
  8052e0:	08054bc0 	call	8054bc <altera_avalon_jtag_uart_init>
  8052e4:	01002074 	movhi	r4,129
  8052e8:	21254f04 	addi	r4,r4,-27332
  8052ec:	080533c0 	call	80533c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  8052f0:	01002074 	movhi	r4,129
  8052f4:	21297104 	addi	r4,r4,-23100
  8052f8:	0806bcc0 	call	806bcc <altera_avalon_lcd_16207_init>
  8052fc:	01002074 	movhi	r4,129
  805300:	21296704 	addi	r4,r4,-23140
  805304:	080533c0 	call	80533c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART, uart);
  805308:	01002074 	movhi	r4,129
  80530c:	2129b904 	addi	r4,r4,-22812
  805310:	000b883a 	mov	r5,zero
  805314:	000d883a 	mov	r6,zero
  805318:	0806f580 	call	806f58 <altera_avalon_uart_init>
  80531c:	01002074 	movhi	r4,129
  805320:	2129af04 	addi	r4,r4,-22852
  805324:	080533c0 	call	80533c <alt_dev_reg>
}
  805328:	e037883a 	mov	sp,fp
  80532c:	dfc00117 	ldw	ra,4(sp)
  805330:	df000017 	ldw	fp,0(sp)
  805334:	dec00204 	addi	sp,sp,8
  805338:	f800283a 	ret

0080533c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80533c:	defffd04 	addi	sp,sp,-12
  805340:	dfc00215 	stw	ra,8(sp)
  805344:	df000115 	stw	fp,4(sp)
  805348:	df000104 	addi	fp,sp,4
  80534c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  805350:	e13fff17 	ldw	r4,-4(fp)
  805354:	01402074 	movhi	r5,129
  805358:	2969e604 	addi	r5,r5,-22632
  80535c:	08078540 	call	807854 <alt_dev_llist_insert>
}
  805360:	e037883a 	mov	sp,fp
  805364:	dfc00117 	ldw	ra,4(sp)
  805368:	df000017 	ldw	fp,0(sp)
  80536c:	dec00204 	addi	sp,sp,8
  805370:	f800283a 	ret

00805374 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  805374:	defffa04 	addi	sp,sp,-24
  805378:	dfc00515 	stw	ra,20(sp)
  80537c:	df000415 	stw	fp,16(sp)
  805380:	df000404 	addi	fp,sp,16
  805384:	e13ffd15 	stw	r4,-12(fp)
  805388:	e17ffe15 	stw	r5,-8(fp)
  80538c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  805390:	e0bffd17 	ldw	r2,-12(fp)
  805394:	10800017 	ldw	r2,0(r2)
  805398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80539c:	e0bffc17 	ldw	r2,-16(fp)
  8053a0:	11000a04 	addi	r4,r2,40
  8053a4:	e0bffd17 	ldw	r2,-12(fp)
  8053a8:	11c00217 	ldw	r7,8(r2)
  8053ac:	e17ffe17 	ldw	r5,-8(fp)
  8053b0:	e1bfff17 	ldw	r6,-4(fp)
  8053b4:	08059bc0 	call	8059bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8053b8:	e037883a 	mov	sp,fp
  8053bc:	dfc00117 	ldw	ra,4(sp)
  8053c0:	df000017 	ldw	fp,0(sp)
  8053c4:	dec00204 	addi	sp,sp,8
  8053c8:	f800283a 	ret

008053cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8053cc:	defffa04 	addi	sp,sp,-24
  8053d0:	dfc00515 	stw	ra,20(sp)
  8053d4:	df000415 	stw	fp,16(sp)
  8053d8:	df000404 	addi	fp,sp,16
  8053dc:	e13ffd15 	stw	r4,-12(fp)
  8053e0:	e17ffe15 	stw	r5,-8(fp)
  8053e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8053e8:	e0bffd17 	ldw	r2,-12(fp)
  8053ec:	10800017 	ldw	r2,0(r2)
  8053f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8053f4:	e0bffc17 	ldw	r2,-16(fp)
  8053f8:	11000a04 	addi	r4,r2,40
  8053fc:	e0bffd17 	ldw	r2,-12(fp)
  805400:	11c00217 	ldw	r7,8(r2)
  805404:	e17ffe17 	ldw	r5,-8(fp)
  805408:	e1bfff17 	ldw	r6,-4(fp)
  80540c:	0805be00 	call	805be0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  805410:	e037883a 	mov	sp,fp
  805414:	dfc00117 	ldw	ra,4(sp)
  805418:	df000017 	ldw	fp,0(sp)
  80541c:	dec00204 	addi	sp,sp,8
  805420:	f800283a 	ret

00805424 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  805424:	defffc04 	addi	sp,sp,-16
  805428:	dfc00315 	stw	ra,12(sp)
  80542c:	df000215 	stw	fp,8(sp)
  805430:	df000204 	addi	fp,sp,8
  805434:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  805438:	e0bfff17 	ldw	r2,-4(fp)
  80543c:	10800017 	ldw	r2,0(r2)
  805440:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  805444:	e0bffe17 	ldw	r2,-8(fp)
  805448:	11000a04 	addi	r4,r2,40
  80544c:	e0bfff17 	ldw	r2,-4(fp)
  805450:	11400217 	ldw	r5,8(r2)
  805454:	08058540 	call	805854 <altera_avalon_jtag_uart_close>
}
  805458:	e037883a 	mov	sp,fp
  80545c:	dfc00117 	ldw	ra,4(sp)
  805460:	df000017 	ldw	fp,0(sp)
  805464:	dec00204 	addi	sp,sp,8
  805468:	f800283a 	ret

0080546c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80546c:	defffa04 	addi	sp,sp,-24
  805470:	dfc00515 	stw	ra,20(sp)
  805474:	df000415 	stw	fp,16(sp)
  805478:	df000404 	addi	fp,sp,16
  80547c:	e13ffd15 	stw	r4,-12(fp)
  805480:	e17ffe15 	stw	r5,-8(fp)
  805484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  805488:	e0bffd17 	ldw	r2,-12(fp)
  80548c:	10800017 	ldw	r2,0(r2)
  805490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  805494:	e0bffc17 	ldw	r2,-16(fp)
  805498:	11000a04 	addi	r4,r2,40
  80549c:	e17ffe17 	ldw	r5,-8(fp)
  8054a0:	e1bfff17 	ldw	r6,-4(fp)
  8054a4:	08058c80 	call	8058c8 <altera_avalon_jtag_uart_ioctl>
}
  8054a8:	e037883a 	mov	sp,fp
  8054ac:	dfc00117 	ldw	ra,4(sp)
  8054b0:	df000017 	ldw	fp,0(sp)
  8054b4:	dec00204 	addi	sp,sp,8
  8054b8:	f800283a 	ret

008054bc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8054bc:	defffa04 	addi	sp,sp,-24
  8054c0:	dfc00515 	stw	ra,20(sp)
  8054c4:	df000415 	stw	fp,16(sp)
  8054c8:	df000404 	addi	fp,sp,16
  8054cc:	e13ffd15 	stw	r4,-12(fp)
  8054d0:	e17ffe15 	stw	r5,-8(fp)
  8054d4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8054d8:	e0fffd17 	ldw	r3,-12(fp)
  8054dc:	00800044 	movi	r2,1
  8054e0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8054e4:	e0bffd17 	ldw	r2,-12(fp)
  8054e8:	10800017 	ldw	r2,0(r2)
  8054ec:	11000104 	addi	r4,r2,4
  8054f0:	e0bffd17 	ldw	r2,-12(fp)
  8054f4:	10800817 	ldw	r2,32(r2)
  8054f8:	1007883a 	mov	r3,r2
  8054fc:	2005883a 	mov	r2,r4
  805500:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  805504:	e13ffe17 	ldw	r4,-8(fp)
  805508:	e17fff17 	ldw	r5,-4(fp)
  80550c:	d8000015 	stw	zero,0(sp)
  805510:	01802034 	movhi	r6,128
  805514:	31955f04 	addi	r6,r6,21884
  805518:	e1fffd17 	ldw	r7,-12(fp)
  80551c:	0807ccc0 	call	807ccc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  805520:	e0bffd17 	ldw	r2,-12(fp)
  805524:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  805528:	e0bffd17 	ldw	r2,-12(fp)
  80552c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  805530:	00802074 	movhi	r2,129
  805534:	10b11704 	addi	r2,r2,-15268
  805538:	10800017 	ldw	r2,0(r2)
  80553c:	100b883a 	mov	r5,r2
  805540:	01802034 	movhi	r6,128
  805544:	3195e904 	addi	r6,r6,22436
  805548:	e1fffd17 	ldw	r7,-12(fp)
  80554c:	08041d80 	call	8041d8 <alt_alarm_start>
  805550:	1004403a 	cmpge	r2,r2,zero
  805554:	1000041e 	bne	r2,zero,805568 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  805558:	e0fffd17 	ldw	r3,-12(fp)
  80555c:	00a00034 	movhi	r2,32768
  805560:	10bfffc4 	addi	r2,r2,-1
  805564:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  805568:	e037883a 	mov	sp,fp
  80556c:	dfc00117 	ldw	ra,4(sp)
  805570:	df000017 	ldw	fp,0(sp)
  805574:	dec00204 	addi	sp,sp,8
  805578:	f800283a 	ret

0080557c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80557c:	defff804 	addi	sp,sp,-32
  805580:	df000715 	stw	fp,28(sp)
  805584:	df000704 	addi	fp,sp,28
  805588:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80558c:	e0bfff17 	ldw	r2,-4(fp)
  805590:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  805594:	e0bffe17 	ldw	r2,-8(fp)
  805598:	10800017 	ldw	r2,0(r2)
  80559c:	e0bffd15 	stw	r2,-12(fp)
  8055a0:	00000006 	br	8055a4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8055a4:	e0bffd17 	ldw	r2,-12(fp)
  8055a8:	10800104 	addi	r2,r2,4
  8055ac:	10800037 	ldwio	r2,0(r2)
  8055b0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  8055b4:	e0bffc17 	ldw	r2,-16(fp)
  8055b8:	1080c00c 	andi	r2,r2,768
  8055bc:	1005003a 	cmpeq	r2,r2,zero
  8055c0:	1000741e 	bne	r2,zero,805794 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8055c4:	e0bffc17 	ldw	r2,-16(fp)
  8055c8:	1080400c 	andi	r2,r2,256
  8055cc:	1005003a 	cmpeq	r2,r2,zero
  8055d0:	1000351e 	bne	r2,zero,8056a8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8055d4:	00800074 	movhi	r2,1
  8055d8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8055dc:	e0bffe17 	ldw	r2,-8(fp)
  8055e0:	10800a17 	ldw	r2,40(r2)
  8055e4:	10800044 	addi	r2,r2,1
  8055e8:	1081ffcc 	andi	r2,r2,2047
  8055ec:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  8055f0:	e0bffe17 	ldw	r2,-8(fp)
  8055f4:	10c00b17 	ldw	r3,44(r2)
  8055f8:	e0bffa17 	ldw	r2,-24(fp)
  8055fc:	18801626 	beq	r3,r2,805658 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  805600:	e0bffd17 	ldw	r2,-12(fp)
  805604:	10800037 	ldwio	r2,0(r2)
  805608:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80560c:	e0bffb17 	ldw	r2,-20(fp)
  805610:	10a0000c 	andi	r2,r2,32768
  805614:	1005003a 	cmpeq	r2,r2,zero
  805618:	10000f1e 	bne	r2,zero,805658 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80561c:	e0bffe17 	ldw	r2,-8(fp)
  805620:	10c00a17 	ldw	r3,40(r2)
  805624:	e0bffb17 	ldw	r2,-20(fp)
  805628:	1009883a 	mov	r4,r2
  80562c:	e0bffe17 	ldw	r2,-8(fp)
  805630:	1885883a 	add	r2,r3,r2
  805634:	10800e04 	addi	r2,r2,56
  805638:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80563c:	e0bffe17 	ldw	r2,-8(fp)
  805640:	10800a17 	ldw	r2,40(r2)
  805644:	10800044 	addi	r2,r2,1
  805648:	10c1ffcc 	andi	r3,r2,2047
  80564c:	e0bffe17 	ldw	r2,-8(fp)
  805650:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  805654:	003fe106 	br	8055dc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  805658:	e0bffb17 	ldw	r2,-20(fp)
  80565c:	10bfffec 	andhi	r2,r2,65535
  805660:	1005003a 	cmpeq	r2,r2,zero
  805664:	1000101e 	bne	r2,zero,8056a8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805668:	e0bffe17 	ldw	r2,-8(fp)
  80566c:	10c00817 	ldw	r3,32(r2)
  805670:	00bfff84 	movi	r2,-2
  805674:	1886703a 	and	r3,r3,r2
  805678:	e0bffe17 	ldw	r2,-8(fp)
  80567c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  805680:	e0bffd17 	ldw	r2,-12(fp)
  805684:	11000104 	addi	r4,r2,4
  805688:	e0bffe17 	ldw	r2,-8(fp)
  80568c:	10800817 	ldw	r2,32(r2)
  805690:	1007883a 	mov	r3,r2
  805694:	2005883a 	mov	r2,r4
  805698:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80569c:	e0bffd17 	ldw	r2,-12(fp)
  8056a0:	10800104 	addi	r2,r2,4
  8056a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  8056a8:	e0bffc17 	ldw	r2,-16(fp)
  8056ac:	1080800c 	andi	r2,r2,512
  8056b0:	1005003a 	cmpeq	r2,r2,zero
  8056b4:	103fbb1e 	bne	r2,zero,8055a4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  8056b8:	e0bffc17 	ldw	r2,-16(fp)
  8056bc:	10bfffec 	andhi	r2,r2,65535
  8056c0:	1004d43a 	srli	r2,r2,16
  8056c4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8056c8:	00001506 	br	805720 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8056cc:	e13ffd17 	ldw	r4,-12(fp)
  8056d0:	e0bffe17 	ldw	r2,-8(fp)
  8056d4:	10c00d17 	ldw	r3,52(r2)
  8056d8:	e0bffe17 	ldw	r2,-8(fp)
  8056dc:	1885883a 	add	r2,r3,r2
  8056e0:	10820e04 	addi	r2,r2,2104
  8056e4:	10800003 	ldbu	r2,0(r2)
  8056e8:	10c03fcc 	andi	r3,r2,255
  8056ec:	18c0201c 	xori	r3,r3,128
  8056f0:	18ffe004 	addi	r3,r3,-128
  8056f4:	2005883a 	mov	r2,r4
  8056f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8056fc:	e0bffe17 	ldw	r2,-8(fp)
  805700:	10800d17 	ldw	r2,52(r2)
  805704:	10800044 	addi	r2,r2,1
  805708:	10c1ffcc 	andi	r3,r2,2047
  80570c:	e0bffe17 	ldw	r2,-8(fp)
  805710:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  805714:	e0bff917 	ldw	r2,-28(fp)
  805718:	10bfffc4 	addi	r2,r2,-1
  80571c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  805720:	e0bff917 	ldw	r2,-28(fp)
  805724:	1005003a 	cmpeq	r2,r2,zero
  805728:	1000051e 	bne	r2,zero,805740 <altera_avalon_jtag_uart_irq+0x1c4>
  80572c:	e0bffe17 	ldw	r2,-8(fp)
  805730:	10c00d17 	ldw	r3,52(r2)
  805734:	e0bffe17 	ldw	r2,-8(fp)
  805738:	10800c17 	ldw	r2,48(r2)
  80573c:	18bfe31e 	bne	r3,r2,8056cc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  805740:	e0bff917 	ldw	r2,-28(fp)
  805744:	1005003a 	cmpeq	r2,r2,zero
  805748:	103f961e 	bne	r2,zero,8055a4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80574c:	e0bffe17 	ldw	r2,-8(fp)
  805750:	10c00817 	ldw	r3,32(r2)
  805754:	00bfff44 	movi	r2,-3
  805758:	1886703a 	and	r3,r3,r2
  80575c:	e0bffe17 	ldw	r2,-8(fp)
  805760:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805764:	e0bffe17 	ldw	r2,-8(fp)
  805768:	10800017 	ldw	r2,0(r2)
  80576c:	11000104 	addi	r4,r2,4
  805770:	e0bffe17 	ldw	r2,-8(fp)
  805774:	10800817 	ldw	r2,32(r2)
  805778:	1007883a 	mov	r3,r2
  80577c:	2005883a 	mov	r2,r4
  805780:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  805784:	e0bffd17 	ldw	r2,-12(fp)
  805788:	10800104 	addi	r2,r2,4
  80578c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  805790:	003f8406 	br	8055a4 <altera_avalon_jtag_uart_irq+0x28>
}
  805794:	e037883a 	mov	sp,fp
  805798:	df000017 	ldw	fp,0(sp)
  80579c:	dec00104 	addi	sp,sp,4
  8057a0:	f800283a 	ret

008057a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8057a4:	defffc04 	addi	sp,sp,-16
  8057a8:	df000315 	stw	fp,12(sp)
  8057ac:	df000304 	addi	fp,sp,12
  8057b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8057b4:	e0bfff17 	ldw	r2,-4(fp)
  8057b8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8057bc:	e0bffe17 	ldw	r2,-8(fp)
  8057c0:	10800017 	ldw	r2,0(r2)
  8057c4:	10800104 	addi	r2,r2,4
  8057c8:	10800037 	ldwio	r2,0(r2)
  8057cc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8057d0:	e0bffd17 	ldw	r2,-12(fp)
  8057d4:	1081000c 	andi	r2,r2,1024
  8057d8:	1005003a 	cmpeq	r2,r2,zero
  8057dc:	10000c1e 	bne	r2,zero,805810 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8057e0:	e0bffe17 	ldw	r2,-8(fp)
  8057e4:	10800017 	ldw	r2,0(r2)
  8057e8:	11000104 	addi	r4,r2,4
  8057ec:	e0bffe17 	ldw	r2,-8(fp)
  8057f0:	10800817 	ldw	r2,32(r2)
  8057f4:	10810014 	ori	r2,r2,1024
  8057f8:	1007883a 	mov	r3,r2
  8057fc:	2005883a 	mov	r2,r4
  805800:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  805804:	e0bffe17 	ldw	r2,-8(fp)
  805808:	10000915 	stw	zero,36(r2)
  80580c:	00000a06 	br	805838 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  805810:	e0bffe17 	ldw	r2,-8(fp)
  805814:	10c00917 	ldw	r3,36(r2)
  805818:	00a00034 	movhi	r2,32768
  80581c:	10bfff04 	addi	r2,r2,-4
  805820:	10c00536 	bltu	r2,r3,805838 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  805824:	e0bffe17 	ldw	r2,-8(fp)
  805828:	10800917 	ldw	r2,36(r2)
  80582c:	10c00044 	addi	r3,r2,1
  805830:	e0bffe17 	ldw	r2,-8(fp)
  805834:	10c00915 	stw	r3,36(r2)
  805838:	00802074 	movhi	r2,129
  80583c:	10b11704 	addi	r2,r2,-15268
  805840:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  805844:	e037883a 	mov	sp,fp
  805848:	df000017 	ldw	fp,0(sp)
  80584c:	dec00104 	addi	sp,sp,4
  805850:	f800283a 	ret

00805854 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  805854:	defffc04 	addi	sp,sp,-16
  805858:	df000315 	stw	fp,12(sp)
  80585c:	df000304 	addi	fp,sp,12
  805860:	e13ffd15 	stw	r4,-12(fp)
  805864:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805868:	00000706 	br	805888 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80586c:	e0bffe17 	ldw	r2,-8(fp)
  805870:	1090000c 	andi	r2,r2,16384
  805874:	1005003a 	cmpeq	r2,r2,zero
  805878:	1000031e 	bne	r2,zero,805888 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80587c:	00bffd44 	movi	r2,-11
  805880:	e0bfff15 	stw	r2,-4(fp)
  805884:	00000b06 	br	8058b4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  805888:	e0bffd17 	ldw	r2,-12(fp)
  80588c:	10c00d17 	ldw	r3,52(r2)
  805890:	e0bffd17 	ldw	r2,-12(fp)
  805894:	10800c17 	ldw	r2,48(r2)
  805898:	18800526 	beq	r3,r2,8058b0 <altera_avalon_jtag_uart_close+0x5c>
  80589c:	e0bffd17 	ldw	r2,-12(fp)
  8058a0:	10c00917 	ldw	r3,36(r2)
  8058a4:	e0bffd17 	ldw	r2,-12(fp)
  8058a8:	10800117 	ldw	r2,4(r2)
  8058ac:	18bfef36 	bltu	r3,r2,80586c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8058b0:	e03fff15 	stw	zero,-4(fp)
  8058b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8058b8:	e037883a 	mov	sp,fp
  8058bc:	df000017 	ldw	fp,0(sp)
  8058c0:	dec00104 	addi	sp,sp,4
  8058c4:	f800283a 	ret

008058c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  8058c8:	defff804 	addi	sp,sp,-32
  8058cc:	df000715 	stw	fp,28(sp)
  8058d0:	df000704 	addi	fp,sp,28
  8058d4:	e13ffb15 	stw	r4,-20(fp)
  8058d8:	e17ffc15 	stw	r5,-16(fp)
  8058dc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  8058e0:	00bff9c4 	movi	r2,-25
  8058e4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  8058e8:	e0bffc17 	ldw	r2,-16(fp)
  8058ec:	e0bfff15 	stw	r2,-4(fp)
  8058f0:	e0ffff17 	ldw	r3,-4(fp)
  8058f4:	189a8060 	cmpeqi	r2,r3,27137
  8058f8:	1000041e 	bne	r2,zero,80590c <altera_avalon_jtag_uart_ioctl+0x44>
  8058fc:	e0ffff17 	ldw	r3,-4(fp)
  805900:	189a80a0 	cmpeqi	r2,r3,27138
  805904:	10001b1e 	bne	r2,zero,805974 <altera_avalon_jtag_uart_ioctl+0xac>
  805908:	00002706 	br	8059a8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80590c:	e0bffb17 	ldw	r2,-20(fp)
  805910:	10c00117 	ldw	r3,4(r2)
  805914:	00a00034 	movhi	r2,32768
  805918:	10bfffc4 	addi	r2,r2,-1
  80591c:	18802226 	beq	r3,r2,8059a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  805920:	e0bffd17 	ldw	r2,-12(fp)
  805924:	10800017 	ldw	r2,0(r2)
  805928:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80592c:	e0bff917 	ldw	r2,-28(fp)
  805930:	10800090 	cmplti	r2,r2,2
  805934:	1000071e 	bne	r2,zero,805954 <altera_avalon_jtag_uart_ioctl+0x8c>
  805938:	e0fff917 	ldw	r3,-28(fp)
  80593c:	00a00034 	movhi	r2,32768
  805940:	10bfffc4 	addi	r2,r2,-1
  805944:	18800326 	beq	r3,r2,805954 <altera_avalon_jtag_uart_ioctl+0x8c>
  805948:	e0bff917 	ldw	r2,-28(fp)
  80594c:	e0bffe15 	stw	r2,-8(fp)
  805950:	00000306 	br	805960 <altera_avalon_jtag_uart_ioctl+0x98>
  805954:	00e00034 	movhi	r3,32768
  805958:	18ffff84 	addi	r3,r3,-2
  80595c:	e0fffe15 	stw	r3,-8(fp)
  805960:	e0bffb17 	ldw	r2,-20(fp)
  805964:	e0fffe17 	ldw	r3,-8(fp)
  805968:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80596c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  805970:	00000d06 	br	8059a8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  805974:	e0bffb17 	ldw	r2,-20(fp)
  805978:	10c00117 	ldw	r3,4(r2)
  80597c:	00a00034 	movhi	r2,32768
  805980:	10bfffc4 	addi	r2,r2,-1
  805984:	18800826 	beq	r3,r2,8059a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  805988:	e13ffd17 	ldw	r4,-12(fp)
  80598c:	e0bffb17 	ldw	r2,-20(fp)
  805990:	10c00917 	ldw	r3,36(r2)
  805994:	e0bffb17 	ldw	r2,-20(fp)
  805998:	10800117 	ldw	r2,4(r2)
  80599c:	1885803a 	cmpltu	r2,r3,r2
  8059a0:	20800015 	stw	r2,0(r4)
      rc = 0;
  8059a4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  8059a8:	e0bffa17 	ldw	r2,-24(fp)
}
  8059ac:	e037883a 	mov	sp,fp
  8059b0:	df000017 	ldw	fp,0(sp)
  8059b4:	dec00104 	addi	sp,sp,4
  8059b8:	f800283a 	ret

008059bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8059bc:	defff204 	addi	sp,sp,-56
  8059c0:	dfc00d15 	stw	ra,52(sp)
  8059c4:	df000c15 	stw	fp,48(sp)
  8059c8:	df000c04 	addi	fp,sp,48
  8059cc:	e13ffb15 	stw	r4,-20(fp)
  8059d0:	e17ffc15 	stw	r5,-16(fp)
  8059d4:	e1bffd15 	stw	r6,-12(fp)
  8059d8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  8059dc:	e0bffc17 	ldw	r2,-16(fp)
  8059e0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8059e4:	00004806 	br	805b08 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8059e8:	e0bffb17 	ldw	r2,-20(fp)
  8059ec:	10800a17 	ldw	r2,40(r2)
  8059f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8059f4:	e0bffb17 	ldw	r2,-20(fp)
  8059f8:	10800b17 	ldw	r2,44(r2)
  8059fc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  805a00:	e0fff717 	ldw	r3,-36(fp)
  805a04:	e0bff617 	ldw	r2,-40(fp)
  805a08:	18800536 	bltu	r3,r2,805a20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  805a0c:	e0bff717 	ldw	r2,-36(fp)
  805a10:	e0fff617 	ldw	r3,-40(fp)
  805a14:	10c5c83a 	sub	r2,r2,r3
  805a18:	e0bff815 	stw	r2,-32(fp)
  805a1c:	00000406 	br	805a30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  805a20:	00820004 	movi	r2,2048
  805a24:	e0fff617 	ldw	r3,-40(fp)
  805a28:	10c5c83a 	sub	r2,r2,r3
  805a2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805a30:	e0bff817 	ldw	r2,-32(fp)
  805a34:	1005003a 	cmpeq	r2,r2,zero
  805a38:	10001f1e 	bne	r2,zero,805ab8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  805a3c:	e0fffd17 	ldw	r3,-12(fp)
  805a40:	e0bff817 	ldw	r2,-32(fp)
  805a44:	1880022e 	bgeu	r3,r2,805a50 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  805a48:	e0bffd17 	ldw	r2,-12(fp)
  805a4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  805a50:	e0bffb17 	ldw	r2,-20(fp)
  805a54:	10c00e04 	addi	r3,r2,56
  805a58:	e0bff617 	ldw	r2,-40(fp)
  805a5c:	1887883a 	add	r3,r3,r2
  805a60:	e0bffa17 	ldw	r2,-24(fp)
  805a64:	1009883a 	mov	r4,r2
  805a68:	180b883a 	mov	r5,r3
  805a6c:	e1bff817 	ldw	r6,-32(fp)
  805a70:	08036f40 	call	8036f4 <memcpy>
      ptr   += n;
  805a74:	e0fff817 	ldw	r3,-32(fp)
  805a78:	e0bffa17 	ldw	r2,-24(fp)
  805a7c:	10c5883a 	add	r2,r2,r3
  805a80:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  805a84:	e0fffd17 	ldw	r3,-12(fp)
  805a88:	e0bff817 	ldw	r2,-32(fp)
  805a8c:	1885c83a 	sub	r2,r3,r2
  805a90:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805a94:	e0fff617 	ldw	r3,-40(fp)
  805a98:	e0bff817 	ldw	r2,-32(fp)
  805a9c:	1885883a 	add	r2,r3,r2
  805aa0:	10c1ffcc 	andi	r3,r2,2047
  805aa4:	e0bffb17 	ldw	r2,-20(fp)
  805aa8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  805aac:	e0bffd17 	ldw	r2,-12(fp)
  805ab0:	10800048 	cmpgei	r2,r2,1
  805ab4:	103fcc1e 	bne	r2,zero,8059e8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  805ab8:	e0fffa17 	ldw	r3,-24(fp)
  805abc:	e0bffc17 	ldw	r2,-16(fp)
  805ac0:	1880141e 	bne	r3,r2,805b14 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  805ac4:	e0bffe17 	ldw	r2,-8(fp)
  805ac8:	1090000c 	andi	r2,r2,16384
  805acc:	1004c03a 	cmpne	r2,r2,zero
  805ad0:	1000101e 	bne	r2,zero,805b14 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  805ad4:	e0bffb17 	ldw	r2,-20(fp)
  805ad8:	10c00a17 	ldw	r3,40(r2)
  805adc:	e0bff717 	ldw	r2,-36(fp)
  805ae0:	1880051e 	bne	r3,r2,805af8 <altera_avalon_jtag_uart_read+0x13c>
  805ae4:	e0bffb17 	ldw	r2,-20(fp)
  805ae8:	10c00917 	ldw	r3,36(r2)
  805aec:	e0bffb17 	ldw	r2,-20(fp)
  805af0:	10800117 	ldw	r2,4(r2)
  805af4:	18bff736 	bltu	r3,r2,805ad4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  805af8:	e0bffb17 	ldw	r2,-20(fp)
  805afc:	10c00a17 	ldw	r3,40(r2)
  805b00:	e0bff717 	ldw	r2,-36(fp)
  805b04:	18800326 	beq	r3,r2,805b14 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  805b08:	e0bffd17 	ldw	r2,-12(fp)
  805b0c:	10800048 	cmpgei	r2,r2,1
  805b10:	103fb51e 	bne	r2,zero,8059e8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  805b14:	e0fffa17 	ldw	r3,-24(fp)
  805b18:	e0bffc17 	ldw	r2,-16(fp)
  805b1c:	18801926 	beq	r3,r2,805b84 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805b20:	0005303a 	rdctl	r2,status
  805b24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805b28:	e0fff517 	ldw	r3,-44(fp)
  805b2c:	00bfff84 	movi	r2,-2
  805b30:	1884703a 	and	r2,r3,r2
  805b34:	1001703a 	wrctl	status,r2
  
  return context;
  805b38:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  805b3c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  805b40:	e0bffb17 	ldw	r2,-20(fp)
  805b44:	10800817 	ldw	r2,32(r2)
  805b48:	10c00054 	ori	r3,r2,1
  805b4c:	e0bffb17 	ldw	r2,-20(fp)
  805b50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805b54:	e0bffb17 	ldw	r2,-20(fp)
  805b58:	10800017 	ldw	r2,0(r2)
  805b5c:	11000104 	addi	r4,r2,4
  805b60:	e0bffb17 	ldw	r2,-20(fp)
  805b64:	10800817 	ldw	r2,32(r2)
  805b68:	1007883a 	mov	r3,r2
  805b6c:	2005883a 	mov	r2,r4
  805b70:	10c00035 	stwio	r3,0(r2)
  805b74:	e0bff917 	ldw	r2,-28(fp)
  805b78:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805b7c:	e0bff417 	ldw	r2,-48(fp)
  805b80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  805b84:	e0fffa17 	ldw	r3,-24(fp)
  805b88:	e0bffc17 	ldw	r2,-16(fp)
  805b8c:	18800526 	beq	r3,r2,805ba4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  805b90:	e0fffa17 	ldw	r3,-24(fp)
  805b94:	e0bffc17 	ldw	r2,-16(fp)
  805b98:	1887c83a 	sub	r3,r3,r2
  805b9c:	e0ffff15 	stw	r3,-4(fp)
  805ba0:	00000906 	br	805bc8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  805ba4:	e0bffe17 	ldw	r2,-8(fp)
  805ba8:	1090000c 	andi	r2,r2,16384
  805bac:	1005003a 	cmpeq	r2,r2,zero
  805bb0:	1000031e 	bne	r2,zero,805bc0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  805bb4:	00bffd44 	movi	r2,-11
  805bb8:	e0bfff15 	stw	r2,-4(fp)
  805bbc:	00000206 	br	805bc8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  805bc0:	00bffec4 	movi	r2,-5
  805bc4:	e0bfff15 	stw	r2,-4(fp)
  805bc8:	e0bfff17 	ldw	r2,-4(fp)
}
  805bcc:	e037883a 	mov	sp,fp
  805bd0:	dfc00117 	ldw	ra,4(sp)
  805bd4:	df000017 	ldw	fp,0(sp)
  805bd8:	dec00204 	addi	sp,sp,8
  805bdc:	f800283a 	ret

00805be0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  805be0:	defff204 	addi	sp,sp,-56
  805be4:	dfc00d15 	stw	ra,52(sp)
  805be8:	df000c15 	stw	fp,48(sp)
  805bec:	df000c04 	addi	fp,sp,48
  805bf0:	e13ffb15 	stw	r4,-20(fp)
  805bf4:	e17ffc15 	stw	r5,-16(fp)
  805bf8:	e1bffd15 	stw	r6,-12(fp)
  805bfc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  805c00:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  805c04:	e0bffc17 	ldw	r2,-16(fp)
  805c08:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805c0c:	00003a06 	br	805cf8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  805c10:	e0bffb17 	ldw	r2,-20(fp)
  805c14:	10800c17 	ldw	r2,48(r2)
  805c18:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  805c1c:	e0bffb17 	ldw	r2,-20(fp)
  805c20:	10800d17 	ldw	r2,52(r2)
  805c24:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  805c28:	e0fffa17 	ldw	r3,-24(fp)
  805c2c:	e0bff917 	ldw	r2,-28(fp)
  805c30:	1880062e 	bgeu	r3,r2,805c4c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  805c34:	e0fff917 	ldw	r3,-28(fp)
  805c38:	e0bffa17 	ldw	r2,-24(fp)
  805c3c:	1885c83a 	sub	r2,r3,r2
  805c40:	10bfffc4 	addi	r2,r2,-1
  805c44:	e0bff815 	stw	r2,-32(fp)
  805c48:	00000c06 	br	805c7c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  805c4c:	e0bff917 	ldw	r2,-28(fp)
  805c50:	1005003a 	cmpeq	r2,r2,zero
  805c54:	1000051e 	bne	r2,zero,805c6c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  805c58:	00820004 	movi	r2,2048
  805c5c:	e0fffa17 	ldw	r3,-24(fp)
  805c60:	10c5c83a 	sub	r2,r2,r3
  805c64:	e0bff815 	stw	r2,-32(fp)
  805c68:	00000406 	br	805c7c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  805c6c:	0081ffc4 	movi	r2,2047
  805c70:	e0fffa17 	ldw	r3,-24(fp)
  805c74:	10c5c83a 	sub	r2,r2,r3
  805c78:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  805c7c:	e0bff817 	ldw	r2,-32(fp)
  805c80:	1005003a 	cmpeq	r2,r2,zero
  805c84:	10001f1e 	bne	r2,zero,805d04 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  805c88:	e0fffd17 	ldw	r3,-12(fp)
  805c8c:	e0bff817 	ldw	r2,-32(fp)
  805c90:	1880022e 	bgeu	r3,r2,805c9c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  805c94:	e0bffd17 	ldw	r2,-12(fp)
  805c98:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  805c9c:	e0bffb17 	ldw	r2,-20(fp)
  805ca0:	10c20e04 	addi	r3,r2,2104
  805ca4:	e0bffa17 	ldw	r2,-24(fp)
  805ca8:	1885883a 	add	r2,r3,r2
  805cac:	e0fffc17 	ldw	r3,-16(fp)
  805cb0:	1009883a 	mov	r4,r2
  805cb4:	180b883a 	mov	r5,r3
  805cb8:	e1bff817 	ldw	r6,-32(fp)
  805cbc:	08036f40 	call	8036f4 <memcpy>
      ptr   += n;
  805cc0:	e0fff817 	ldw	r3,-32(fp)
  805cc4:	e0bffc17 	ldw	r2,-16(fp)
  805cc8:	10c5883a 	add	r2,r2,r3
  805ccc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  805cd0:	e0fffd17 	ldw	r3,-12(fp)
  805cd4:	e0bff817 	ldw	r2,-32(fp)
  805cd8:	1885c83a 	sub	r2,r3,r2
  805cdc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  805ce0:	e0fffa17 	ldw	r3,-24(fp)
  805ce4:	e0bff817 	ldw	r2,-32(fp)
  805ce8:	1885883a 	add	r2,r3,r2
  805cec:	10c1ffcc 	andi	r3,r2,2047
  805cf0:	e0bffb17 	ldw	r2,-20(fp)
  805cf4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  805cf8:	e0bffd17 	ldw	r2,-12(fp)
  805cfc:	10800048 	cmpgei	r2,r2,1
  805d00:	103fc31e 	bne	r2,zero,805c10 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d04:	0005303a 	rdctl	r2,status
  805d08:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d0c:	e0fff517 	ldw	r3,-44(fp)
  805d10:	00bfff84 	movi	r2,-2
  805d14:	1884703a 	and	r2,r3,r2
  805d18:	1001703a 	wrctl	status,r2
  
  return context;
  805d1c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  805d20:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  805d24:	e0bffb17 	ldw	r2,-20(fp)
  805d28:	10800817 	ldw	r2,32(r2)
  805d2c:	10c00094 	ori	r3,r2,2
  805d30:	e0bffb17 	ldw	r2,-20(fp)
  805d34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  805d38:	e0bffb17 	ldw	r2,-20(fp)
  805d3c:	10800017 	ldw	r2,0(r2)
  805d40:	11000104 	addi	r4,r2,4
  805d44:	e0bffb17 	ldw	r2,-20(fp)
  805d48:	10800817 	ldw	r2,32(r2)
  805d4c:	1007883a 	mov	r3,r2
  805d50:	2005883a 	mov	r2,r4
  805d54:	10c00035 	stwio	r3,0(r2)
  805d58:	e0bff717 	ldw	r2,-36(fp)
  805d5c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d60:	e0bff417 	ldw	r2,-48(fp)
  805d64:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  805d68:	e0bffd17 	ldw	r2,-12(fp)
  805d6c:	10800050 	cmplti	r2,r2,1
  805d70:	1000111e 	bne	r2,zero,805db8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  805d74:	e0bffe17 	ldw	r2,-8(fp)
  805d78:	1090000c 	andi	r2,r2,16384
  805d7c:	1004c03a 	cmpne	r2,r2,zero
  805d80:	1000101e 	bne	r2,zero,805dc4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  805d84:	e0bffb17 	ldw	r2,-20(fp)
  805d88:	10c00d17 	ldw	r3,52(r2)
  805d8c:	e0bff917 	ldw	r2,-28(fp)
  805d90:	1880051e 	bne	r3,r2,805da8 <altera_avalon_jtag_uart_write+0x1c8>
  805d94:	e0bffb17 	ldw	r2,-20(fp)
  805d98:	10c00917 	ldw	r3,36(r2)
  805d9c:	e0bffb17 	ldw	r2,-20(fp)
  805da0:	10800117 	ldw	r2,4(r2)
  805da4:	18bff736 	bltu	r3,r2,805d84 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  805da8:	e0bffb17 	ldw	r2,-20(fp)
  805dac:	10c00d17 	ldw	r3,52(r2)
  805db0:	e0bff917 	ldw	r2,-28(fp)
  805db4:	18800326 	beq	r3,r2,805dc4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  805db8:	e0bffd17 	ldw	r2,-12(fp)
  805dbc:	10800048 	cmpgei	r2,r2,1
  805dc0:	103fcd1e 	bne	r2,zero,805cf8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  805dc4:	e0fffc17 	ldw	r3,-16(fp)
  805dc8:	e0bff617 	ldw	r2,-40(fp)
  805dcc:	18800526 	beq	r3,r2,805de4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  805dd0:	e0fffc17 	ldw	r3,-16(fp)
  805dd4:	e0bff617 	ldw	r2,-40(fp)
  805dd8:	1887c83a 	sub	r3,r3,r2
  805ddc:	e0ffff15 	stw	r3,-4(fp)
  805de0:	00000906 	br	805e08 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  805de4:	e0bffe17 	ldw	r2,-8(fp)
  805de8:	1090000c 	andi	r2,r2,16384
  805dec:	1005003a 	cmpeq	r2,r2,zero
  805df0:	1000031e 	bne	r2,zero,805e00 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  805df4:	00bffd44 	movi	r2,-11
  805df8:	e0bfff15 	stw	r2,-4(fp)
  805dfc:	00000206 	br	805e08 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  805e00:	00bffec4 	movi	r2,-5
  805e04:	e0bfff15 	stw	r2,-4(fp)
  805e08:	e0bfff17 	ldw	r2,-4(fp)
}
  805e0c:	e037883a 	mov	sp,fp
  805e10:	dfc00117 	ldw	ra,4(sp)
  805e14:	df000017 	ldw	fp,0(sp)
  805e18:	dec00204 	addi	sp,sp,8
  805e1c:	f800283a 	ret

00805e20 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  805e20:	defffa04 	addi	sp,sp,-24
  805e24:	dfc00515 	stw	ra,20(sp)
  805e28:	df000415 	stw	fp,16(sp)
  805e2c:	df000404 	addi	fp,sp,16
  805e30:	e13ffe15 	stw	r4,-8(fp)
  805e34:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  805e38:	e0bffe17 	ldw	r2,-8(fp)
  805e3c:	10800017 	ldw	r2,0(r2)
  805e40:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  805e44:	008003f4 	movhi	r2,15
  805e48:	10909004 	addi	r2,r2,16960
  805e4c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  805e50:	e0bffe17 	ldw	r2,-8(fp)
  805e54:	10800803 	ldbu	r2,32(r2)
  805e58:	10803fcc 	andi	r2,r2,255
  805e5c:	1080201c 	xori	r2,r2,128
  805e60:	10bfe004 	addi	r2,r2,-128
  805e64:	1004c03a 	cmpne	r2,r2,zero
  805e68:	1000161e 	bne	r2,zero,805ec4 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805e6c:	00000a06 	br	805e98 <lcd_write_command+0x78>
    if (--i == 0)
  805e70:	e0bffc17 	ldw	r2,-16(fp)
  805e74:	10bfffc4 	addi	r2,r2,-1
  805e78:	e0bffc15 	stw	r2,-16(fp)
  805e7c:	e0bffc17 	ldw	r2,-16(fp)
  805e80:	1004c03a 	cmpne	r2,r2,zero
  805e84:	1000041e 	bne	r2,zero,805e98 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  805e88:	e0fffe17 	ldw	r3,-8(fp)
  805e8c:	00800044 	movi	r2,1
  805e90:	18800805 	stb	r2,32(r3)
      return;
  805e94:	00000b06 	br	805ec4 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805e98:	e0bffd17 	ldw	r2,-12(fp)
  805e9c:	10800104 	addi	r2,r2,4
  805ea0:	10800037 	ldwio	r2,0(r2)
  805ea4:	1080200c 	andi	r2,r2,128
  805ea8:	1004c03a 	cmpne	r2,r2,zero
  805eac:	103ff01e 	bne	r2,zero,805e70 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  805eb0:	01001904 	movi	r4,100
  805eb4:	08080d40 	call	8080d4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  805eb8:	e0bffd17 	ldw	r2,-12(fp)
  805ebc:	e0ffff03 	ldbu	r3,-4(fp)
  805ec0:	10c00035 	stwio	r3,0(r2)
}
  805ec4:	e037883a 	mov	sp,fp
  805ec8:	dfc00117 	ldw	ra,4(sp)
  805ecc:	df000017 	ldw	fp,0(sp)
  805ed0:	dec00204 	addi	sp,sp,8
  805ed4:	f800283a 	ret

00805ed8 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  805ed8:	defffa04 	addi	sp,sp,-24
  805edc:	dfc00515 	stw	ra,20(sp)
  805ee0:	df000415 	stw	fp,16(sp)
  805ee4:	df000404 	addi	fp,sp,16
  805ee8:	e13ffe15 	stw	r4,-8(fp)
  805eec:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
  805ef0:	e0bffe17 	ldw	r2,-8(fp)
  805ef4:	10800017 	ldw	r2,0(r2)
  805ef8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  805efc:	008003f4 	movhi	r2,15
  805f00:	10909004 	addi	r2,r2,16960
  805f04:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  805f08:	e0bffe17 	ldw	r2,-8(fp)
  805f0c:	10800803 	ldbu	r2,32(r2)
  805f10:	10803fcc 	andi	r2,r2,255
  805f14:	1080201c 	xori	r2,r2,128
  805f18:	10bfe004 	addi	r2,r2,-128
  805f1c:	1004c03a 	cmpne	r2,r2,zero
  805f20:	10001d1e 	bne	r2,zero,805f98 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805f24:	00000a06 	br	805f50 <lcd_write_data+0x78>
    if (--i == 0)
  805f28:	e0bffc17 	ldw	r2,-16(fp)
  805f2c:	10bfffc4 	addi	r2,r2,-1
  805f30:	e0bffc15 	stw	r2,-16(fp)
  805f34:	e0bffc17 	ldw	r2,-16(fp)
  805f38:	1004c03a 	cmpne	r2,r2,zero
  805f3c:	1000041e 	bne	r2,zero,805f50 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  805f40:	e0fffe17 	ldw	r3,-8(fp)
  805f44:	00800044 	movi	r2,1
  805f48:	18800805 	stb	r2,32(r3)
      return;
  805f4c:	00001206 	br	805f98 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  805f50:	e0bffd17 	ldw	r2,-12(fp)
  805f54:	10800104 	addi	r2,r2,4
  805f58:	10800037 	ldwio	r2,0(r2)
  805f5c:	1080200c 	andi	r2,r2,128
  805f60:	1004c03a 	cmpne	r2,r2,zero
  805f64:	103ff01e 	bne	r2,zero,805f28 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  805f68:	01001904 	movi	r4,100
  805f6c:	08080d40 	call	8080d4 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  805f70:	e0bffd17 	ldw	r2,-12(fp)
  805f74:	10800204 	addi	r2,r2,8
  805f78:	e0ffff03 	ldbu	r3,-4(fp)
  805f7c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
  805f80:	e0bffe17 	ldw	r2,-8(fp)
  805f84:	108008c3 	ldbu	r2,35(r2)
  805f88:	10800044 	addi	r2,r2,1
  805f8c:	1007883a 	mov	r3,r2
  805f90:	e0bffe17 	ldw	r2,-8(fp)
  805f94:	10c008c5 	stb	r3,35(r2)
}
  805f98:	e037883a 	mov	sp,fp
  805f9c:	dfc00117 	ldw	ra,4(sp)
  805fa0:	df000017 	ldw	fp,0(sp)
  805fa4:	dec00204 	addi	sp,sp,8
  805fa8:	f800283a 	ret

00805fac <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  805fac:	defffc04 	addi	sp,sp,-16
  805fb0:	dfc00315 	stw	ra,12(sp)
  805fb4:	df000215 	stw	fp,8(sp)
  805fb8:	df000204 	addi	fp,sp,8
  805fbc:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  805fc0:	e13fff17 	ldw	r4,-4(fp)
  805fc4:	01400044 	movi	r5,1
  805fc8:	0805e200 	call	805e20 <lcd_write_command>

  sp->x = 0;
  805fcc:	e0bfff17 	ldw	r2,-4(fp)
  805fd0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  805fd4:	e0bfff17 	ldw	r2,-4(fp)
  805fd8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  805fdc:	e0bfff17 	ldw	r2,-4(fp)
  805fe0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  805fe4:	e03ffe15 	stw	zero,-8(fp)
  805fe8:	00001906 	br	806050 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  805fec:	e0bffe17 	ldw	r2,-8(fp)
  805ff0:	10801924 	muli	r2,r2,100
  805ff4:	10c01004 	addi	r3,r2,64
  805ff8:	e0bfff17 	ldw	r2,-4(fp)
  805ffc:	1889883a 	add	r4,r3,r2
  806000:	01400804 	movi	r5,32
  806004:	01801444 	movi	r6,81
  806008:	08038740 	call	803874 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80600c:	e0bffe17 	ldw	r2,-8(fp)
  806010:	10801924 	muli	r2,r2,100
  806014:	10c00c04 	addi	r3,r2,48
  806018:	e0bfff17 	ldw	r2,-4(fp)
  80601c:	1889883a 	add	r4,r3,r2
  806020:	01400804 	movi	r5,32
  806024:	01800404 	movi	r6,16
  806028:	08038740 	call	803874 <memset>
    sp->line[y].width = 0;
  80602c:	e0bffe17 	ldw	r2,-8(fp)
  806030:	e0ffff17 	ldw	r3,-4(fp)
  806034:	10801924 	muli	r2,r2,100
  806038:	10c5883a 	add	r2,r2,r3
  80603c:	10802404 	addi	r2,r2,144
  806040:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806044:	e0bffe17 	ldw	r2,-8(fp)
  806048:	10800044 	addi	r2,r2,1
  80604c:	e0bffe15 	stw	r2,-8(fp)
  806050:	e0bffe17 	ldw	r2,-8(fp)
  806054:	10800090 	cmplti	r2,r2,2
  806058:	103fe41e 	bne	r2,zero,805fec <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80605c:	e037883a 	mov	sp,fp
  806060:	dfc00117 	ldw	ra,4(sp)
  806064:	df000017 	ldw	fp,0(sp)
  806068:	dec00204 	addi	sp,sp,8
  80606c:	f800283a 	ret

00806070 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  806070:	defff604 	addi	sp,sp,-40
  806074:	dfc00915 	stw	ra,36(sp)
  806078:	df000815 	stw	fp,32(sp)
  80607c:	dc000715 	stw	r16,28(sp)
  806080:	df000704 	addi	fp,sp,28
  806084:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  806088:	e0bfff17 	ldw	r2,-4(fp)
  80608c:	10800943 	ldbu	r2,37(r2)
  806090:	10803fcc 	andi	r2,r2,255
  806094:	1080201c 	xori	r2,r2,128
  806098:	10bfe004 	addi	r2,r2,-128
  80609c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8060a0:	e03ffe15 	stw	zero,-8(fp)
  8060a4:	00006406 	br	806238 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8060a8:	e0bffe17 	ldw	r2,-8(fp)
  8060ac:	e0ffff17 	ldw	r3,-4(fp)
  8060b0:	10801924 	muli	r2,r2,100
  8060b4:	10c5883a 	add	r2,r2,r3
  8060b8:	10802404 	addi	r2,r2,144
  8060bc:	10800043 	ldbu	r2,1(r2)
  8060c0:	10803fcc 	andi	r2,r2,255
  8060c4:	1080201c 	xori	r2,r2,128
  8060c8:	10bfe004 	addi	r2,r2,-128
  8060cc:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8060d0:	e0bffe17 	ldw	r2,-8(fp)
  8060d4:	e0ffff17 	ldw	r3,-4(fp)
  8060d8:	10801924 	muli	r2,r2,100
  8060dc:	10c5883a 	add	r2,r2,r3
  8060e0:	10802404 	addi	r2,r2,144
  8060e4:	10800083 	ldbu	r2,2(r2)
  8060e8:	10c03fcc 	andi	r3,r2,255
  8060ec:	e0bffc17 	ldw	r2,-16(fp)
  8060f0:	1885383a 	mul	r2,r3,r2
  8060f4:	1005d23a 	srai	r2,r2,8
  8060f8:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
  8060fc:	e0fffa17 	ldw	r3,-24(fp)
  806100:	e0bffb17 	ldw	r2,-20(fp)
  806104:	18800116 	blt	r3,r2,80610c <lcd_repaint_screen+0x9c>
      offset = 0;
  806108:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80610c:	e03ffd15 	stw	zero,-12(fp)
  806110:	00004306 	br	806220 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  806114:	e43ffe17 	ldw	r16,-8(fp)
  806118:	e0fffd17 	ldw	r3,-12(fp)
  80611c:	e0bffa17 	ldw	r2,-24(fp)
  806120:	1889883a 	add	r4,r3,r2
  806124:	e17ffb17 	ldw	r5,-20(fp)
  806128:	08087840 	call	808784 <__modsi3>
  80612c:	1009883a 	mov	r4,r2
  806130:	e0ffff17 	ldw	r3,-4(fp)
  806134:	80801924 	muli	r2,r16,100
  806138:	10c5883a 	add	r2,r2,r3
  80613c:	1105883a 	add	r2,r2,r4
  806140:	10801004 	addi	r2,r2,64
  806144:	10800003 	ldbu	r2,0(r2)
  806148:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80614c:	e0bffe17 	ldw	r2,-8(fp)
  806150:	e13ffd17 	ldw	r4,-12(fp)
  806154:	e0ffff17 	ldw	r3,-4(fp)
  806158:	10801924 	muli	r2,r2,100
  80615c:	10c5883a 	add	r2,r2,r3
  806160:	1105883a 	add	r2,r2,r4
  806164:	10800c04 	addi	r2,r2,48
  806168:	10800003 	ldbu	r2,0(r2)
  80616c:	10c03fcc 	andi	r3,r2,255
  806170:	18c0201c 	xori	r3,r3,128
  806174:	18ffe004 	addi	r3,r3,-128
  806178:	e0bff947 	ldb	r2,-27(fp)
  80617c:	18802526 	beq	r3,r2,806214 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  806180:	e0fffe17 	ldw	r3,-8(fp)
  806184:	d0a00d04 	addi	r2,gp,-32716
  806188:	1885883a 	add	r2,r3,r2
  80618c:	10800003 	ldbu	r2,0(r2)
  806190:	1007883a 	mov	r3,r2
  806194:	e0bffd17 	ldw	r2,-12(fp)
  806198:	1885883a 	add	r2,r3,r2
  80619c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
  8061a0:	e0fff903 	ldbu	r3,-28(fp)
  8061a4:	e0bfff17 	ldw	r2,-4(fp)
  8061a8:	108008c3 	ldbu	r2,35(r2)
  8061ac:	10803fcc 	andi	r2,r2,255
  8061b0:	1080201c 	xori	r2,r2,128
  8061b4:	10bfe004 	addi	r2,r2,-128
  8061b8:	18800926 	beq	r3,r2,8061e0 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8061bc:	e0fff903 	ldbu	r3,-28(fp)
  8061c0:	00bfe004 	movi	r2,-128
  8061c4:	1884b03a 	or	r2,r3,r2
  8061c8:	11403fcc 	andi	r5,r2,255
  8061cc:	e13fff17 	ldw	r4,-4(fp)
  8061d0:	0805e200 	call	805e20 <lcd_write_command>
          sp->address = address;
  8061d4:	e0fff903 	ldbu	r3,-28(fp)
  8061d8:	e0bfff17 	ldw	r2,-4(fp)
  8061dc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8061e0:	e0bff943 	ldbu	r2,-27(fp)
  8061e4:	11403fcc 	andi	r5,r2,255
  8061e8:	e13fff17 	ldw	r4,-4(fp)
  8061ec:	0805ed80 	call	805ed8 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8061f0:	e0bffe17 	ldw	r2,-8(fp)
  8061f4:	e13ffd17 	ldw	r4,-12(fp)
  8061f8:	e0ffff17 	ldw	r3,-4(fp)
  8061fc:	10801924 	muli	r2,r2,100
  806200:	10c5883a 	add	r2,r2,r3
  806204:	1105883a 	add	r2,r2,r4
  806208:	10c00c04 	addi	r3,r2,48
  80620c:	e0bff943 	ldbu	r2,-27(fp)
  806210:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  806214:	e0bffd17 	ldw	r2,-12(fp)
  806218:	10800044 	addi	r2,r2,1
  80621c:	e0bffd15 	stw	r2,-12(fp)
  806220:	e0bffd17 	ldw	r2,-12(fp)
  806224:	10800410 	cmplti	r2,r2,16
  806228:	103fba1e 	bne	r2,zero,806114 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80622c:	e0bffe17 	ldw	r2,-8(fp)
  806230:	10800044 	addi	r2,r2,1
  806234:	e0bffe15 	stw	r2,-8(fp)
  806238:	e0bffe17 	ldw	r2,-8(fp)
  80623c:	10800090 	cmplti	r2,r2,2
  806240:	103f991e 	bne	r2,zero,8060a8 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  806244:	e037883a 	mov	sp,fp
  806248:	dfc00217 	ldw	ra,8(sp)
  80624c:	df000117 	ldw	fp,4(sp)
  806250:	dc000017 	ldw	r16,0(sp)
  806254:	dec00304 	addi	sp,sp,12
  806258:	f800283a 	ret

0080625c <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80625c:	defffc04 	addi	sp,sp,-16
  806260:	dfc00315 	stw	ra,12(sp)
  806264:	df000215 	stw	fp,8(sp)
  806268:	df000204 	addi	fp,sp,8
  80626c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806270:	e03ffe15 	stw	zero,-8(fp)
  806274:	00001d06 	br	8062ec <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  806278:	e0bffe17 	ldw	r2,-8(fp)
  80627c:	10800048 	cmpgei	r2,r2,1
  806280:	10000f1e 	bne	r2,zero,8062c0 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  806284:	e0bffe17 	ldw	r2,-8(fp)
  806288:	10801924 	muli	r2,r2,100
  80628c:	10c01004 	addi	r3,r2,64
  806290:	e0bfff17 	ldw	r2,-4(fp)
  806294:	1889883a 	add	r4,r3,r2
  806298:	e0bffe17 	ldw	r2,-8(fp)
  80629c:	10800044 	addi	r2,r2,1
  8062a0:	10801924 	muli	r2,r2,100
  8062a4:	10c01004 	addi	r3,r2,64
  8062a8:	e0bfff17 	ldw	r2,-4(fp)
  8062ac:	1885883a 	add	r2,r3,r2
  8062b0:	100b883a 	mov	r5,r2
  8062b4:	01801404 	movi	r6,80
  8062b8:	08036f40 	call	8036f4 <memcpy>
  8062bc:	00000806 	br	8062e0 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8062c0:	e0bffe17 	ldw	r2,-8(fp)
  8062c4:	10801924 	muli	r2,r2,100
  8062c8:	10c01004 	addi	r3,r2,64
  8062cc:	e0bfff17 	ldw	r2,-4(fp)
  8062d0:	1889883a 	add	r4,r3,r2
  8062d4:	01400804 	movi	r5,32
  8062d8:	01801404 	movi	r6,80
  8062dc:	08038740 	call	803874 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8062e0:	e0bffe17 	ldw	r2,-8(fp)
  8062e4:	10800044 	addi	r2,r2,1
  8062e8:	e0bffe15 	stw	r2,-8(fp)
  8062ec:	e0bffe17 	ldw	r2,-8(fp)
  8062f0:	10800090 	cmplti	r2,r2,2
  8062f4:	103fe01e 	bne	r2,zero,806278 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8062f8:	e0bfff17 	ldw	r2,-4(fp)
  8062fc:	10800883 	ldbu	r2,34(r2)
  806300:	10bfffc4 	addi	r2,r2,-1
  806304:	1007883a 	mov	r3,r2
  806308:	e0bfff17 	ldw	r2,-4(fp)
  80630c:	10c00885 	stb	r3,34(r2)
}
  806310:	e037883a 	mov	sp,fp
  806314:	dfc00117 	ldw	ra,4(sp)
  806318:	df000017 	ldw	fp,0(sp)
  80631c:	dec00204 	addi	sp,sp,8
  806320:	f800283a 	ret

00806324 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  806324:	defff804 	addi	sp,sp,-32
  806328:	dfc00715 	stw	ra,28(sp)
  80632c:	df000615 	stw	fp,24(sp)
  806330:	df000604 	addi	fp,sp,24
  806334:	e13ffd15 	stw	r4,-12(fp)
  806338:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
  80633c:	e03ffc15 	stw	zero,-16(fp)
  806340:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
  806344:	e0bffd17 	ldw	r2,-12(fp)
  806348:	10800a03 	ldbu	r2,40(r2)
  80634c:	10803fcc 	andi	r2,r2,255
  806350:	1080201c 	xori	r2,r2,128
  806354:	10bfe004 	addi	r2,r2,-128
  806358:	108016d8 	cmpnei	r2,r2,91
  80635c:	1000491e 	bne	r2,zero,806484 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
  806360:	e0bffd17 	ldw	r2,-12(fp)
  806364:	10800a04 	addi	r2,r2,40
  806368:	10800044 	addi	r2,r2,1
  80636c:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
  806370:	00000d06 	br	8063a8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  806374:	e0bffc17 	ldw	r2,-16(fp)
  806378:	10c002a4 	muli	r3,r2,10
  80637c:	e0bffa17 	ldw	r2,-24(fp)
  806380:	10800003 	ldbu	r2,0(r2)
  806384:	10803fcc 	andi	r2,r2,255
  806388:	1080201c 	xori	r2,r2,128
  80638c:	10bfe004 	addi	r2,r2,-128
  806390:	1885883a 	add	r2,r3,r2
  806394:	10bff404 	addi	r2,r2,-48
  806398:	e0bffc15 	stw	r2,-16(fp)
  80639c:	e0bffa17 	ldw	r2,-24(fp)
  8063a0:	10800044 	addi	r2,r2,1
  8063a4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8063a8:	e0bffa17 	ldw	r2,-24(fp)
  8063ac:	10800003 	ldbu	r2,0(r2)
  8063b0:	10803fcc 	andi	r2,r2,255
  8063b4:	1080201c 	xori	r2,r2,128
  8063b8:	10bfe004 	addi	r2,r2,-128
  8063bc:	1007883a 	mov	r3,r2
  8063c0:	00802074 	movhi	r2,129
  8063c4:	10a9ef04 	addi	r2,r2,-22596
  8063c8:	10800017 	ldw	r2,0(r2)
  8063cc:	1885883a 	add	r2,r3,r2
  8063d0:	10800003 	ldbu	r2,0(r2)
  8063d4:	10803fcc 	andi	r2,r2,255
  8063d8:	1080010c 	andi	r2,r2,4
  8063dc:	1004c03a 	cmpne	r2,r2,zero
  8063e0:	103fe41e 	bne	r2,zero,806374 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  8063e4:	e0bffa17 	ldw	r2,-24(fp)
  8063e8:	10800003 	ldbu	r2,0(r2)
  8063ec:	10803fcc 	andi	r2,r2,255
  8063f0:	1080201c 	xori	r2,r2,128
  8063f4:	10bfe004 	addi	r2,r2,-128
  8063f8:	10800ed8 	cmpnei	r2,r2,59
  8063fc:	1000231e 	bne	r2,zero,80648c <lcd_handle_escape+0x168>
    {
      ptr++;
  806400:	e0bffa17 	ldw	r2,-24(fp)
  806404:	10800044 	addi	r2,r2,1
  806408:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
  80640c:	00000d06 	br	806444 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  806410:	e0bffb17 	ldw	r2,-20(fp)
  806414:	10c002a4 	muli	r3,r2,10
  806418:	e0bffa17 	ldw	r2,-24(fp)
  80641c:	10800003 	ldbu	r2,0(r2)
  806420:	10803fcc 	andi	r2,r2,255
  806424:	1080201c 	xori	r2,r2,128
  806428:	10bfe004 	addi	r2,r2,-128
  80642c:	1885883a 	add	r2,r3,r2
  806430:	10bff404 	addi	r2,r2,-48
  806434:	e0bffb15 	stw	r2,-20(fp)
  806438:	e0bffa17 	ldw	r2,-24(fp)
  80643c:	10800044 	addi	r2,r2,1
  806440:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  806444:	e0bffa17 	ldw	r2,-24(fp)
  806448:	10800003 	ldbu	r2,0(r2)
  80644c:	10803fcc 	andi	r2,r2,255
  806450:	1080201c 	xori	r2,r2,128
  806454:	10bfe004 	addi	r2,r2,-128
  806458:	1007883a 	mov	r3,r2
  80645c:	00802074 	movhi	r2,129
  806460:	10a9ef04 	addi	r2,r2,-22596
  806464:	10800017 	ldw	r2,0(r2)
  806468:	1885883a 	add	r2,r3,r2
  80646c:	10800003 	ldbu	r2,0(r2)
  806470:	10803fcc 	andi	r2,r2,255
  806474:	1080010c 	andi	r2,r2,4
  806478:	1004c03a 	cmpne	r2,r2,zero
  80647c:	103fe41e 	bne	r2,zero,806410 <lcd_handle_escape+0xec>
  806480:	00000206 	br	80648c <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  806484:	00bfffc4 	movi	r2,-1
  806488:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
  80648c:	e0bffe07 	ldb	r2,-8(fp)
  806490:	e0bfff15 	stw	r2,-4(fp)
  806494:	e0ffff17 	ldw	r3,-4(fp)
  806498:	188012a0 	cmpeqi	r2,r3,74
  80649c:	10002f1e 	bne	r2,zero,80655c <lcd_handle_escape+0x238>
  8064a0:	e0ffff17 	ldw	r3,-4(fp)
  8064a4:	188012c8 	cmpgei	r2,r3,75
  8064a8:	1000041e 	bne	r2,zero,8064bc <lcd_handle_escape+0x198>
  8064ac:	e0ffff17 	ldw	r3,-4(fp)
  8064b0:	18801220 	cmpeqi	r2,r3,72
  8064b4:	1000081e 	bne	r2,zero,8064d8 <lcd_handle_escape+0x1b4>
  8064b8:	00004906 	br	8065e0 <lcd_handle_escape+0x2bc>
  8064bc:	e0ffff17 	ldw	r3,-4(fp)
  8064c0:	188012e0 	cmpeqi	r2,r3,75
  8064c4:	10002b1e 	bne	r2,zero,806574 <lcd_handle_escape+0x250>
  8064c8:	e0ffff17 	ldw	r3,-4(fp)
  8064cc:	188019a0 	cmpeqi	r2,r3,102
  8064d0:	1000011e 	bne	r2,zero,8064d8 <lcd_handle_escape+0x1b4>
  8064d4:	00004206 	br	8065e0 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8064d8:	e0bffb17 	ldw	r2,-20(fp)
  8064dc:	10800050 	cmplti	r2,r2,1
  8064e0:	1000051e 	bne	r2,zero,8064f8 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
  8064e4:	e0bffb17 	ldw	r2,-20(fp)
  8064e8:	10bfffc4 	addi	r2,r2,-1
  8064ec:	1007883a 	mov	r3,r2
  8064f0:	e0bffd17 	ldw	r2,-12(fp)
  8064f4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  8064f8:	e0bffc17 	ldw	r2,-16(fp)
  8064fc:	10800050 	cmplti	r2,r2,1
  806500:	1000371e 	bne	r2,zero,8065e0 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
  806504:	e0bffc17 	ldw	r2,-16(fp)
  806508:	10bfffc4 	addi	r2,r2,-1
  80650c:	1007883a 	mov	r3,r2
  806510:	e0bffd17 	ldw	r2,-12(fp)
  806514:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  806518:	e0bffd17 	ldw	r2,-12(fp)
  80651c:	10800883 	ldbu	r2,34(r2)
  806520:	10803fcc 	andi	r2,r2,255
  806524:	10800170 	cmpltui	r2,r2,5
  806528:	1000061e 	bne	r2,zero,806544 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
  80652c:	e0fffd17 	ldw	r3,-12(fp)
  806530:	00800104 	movi	r2,4
  806534:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
  806538:	00000206 	br	806544 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
  80653c:	e13ffd17 	ldw	r4,-12(fp)
  806540:	080625c0 	call	80625c <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  806544:	e0bffd17 	ldw	r2,-12(fp)
  806548:	10800883 	ldbu	r2,34(r2)
  80654c:	10803fcc 	andi	r2,r2,255
  806550:	108000e8 	cmpgeui	r2,r2,3
  806554:	103ff91e 	bne	r2,zero,80653c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
  806558:	00002106 	br	8065e0 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80655c:	e0bffc17 	ldw	r2,-16(fp)
  806560:	10800098 	cmpnei	r2,r2,2
  806564:	10001e1e 	bne	r2,zero,8065e0 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
  806568:	e13ffd17 	ldw	r4,-12(fp)
  80656c:	0805fac0 	call	805fac <lcd_clear_screen>
    break;
  806570:	00001b06 	br	8065e0 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  806574:	e0bffc17 	ldw	r2,-16(fp)
  806578:	10800048 	cmpgei	r2,r2,1
  80657c:	1000181e 	bne	r2,zero,8065e0 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  806580:	e0bffd17 	ldw	r2,-12(fp)
  806584:	10800843 	ldbu	r2,33(r2)
  806588:	10803fcc 	andi	r2,r2,255
  80658c:	10801428 	cmpgeui	r2,r2,80
  806590:	1000131e 	bne	r2,zero,8065e0 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  806594:	e0bffd17 	ldw	r2,-12(fp)
  806598:	10800883 	ldbu	r2,34(r2)
  80659c:	10803fcc 	andi	r2,r2,255
  8065a0:	10801924 	muli	r2,r2,100
  8065a4:	10c01004 	addi	r3,r2,64
  8065a8:	e0bffd17 	ldw	r2,-12(fp)
  8065ac:	1887883a 	add	r3,r3,r2
  8065b0:	e0bffd17 	ldw	r2,-12(fp)
  8065b4:	10800843 	ldbu	r2,33(r2)
  8065b8:	10803fcc 	andi	r2,r2,255
  8065bc:	1889883a 	add	r4,r3,r2
  8065c0:	e0bffd17 	ldw	r2,-12(fp)
  8065c4:	10800843 	ldbu	r2,33(r2)
  8065c8:	10c03fcc 	andi	r3,r2,255
  8065cc:	00801404 	movi	r2,80
  8065d0:	10c5c83a 	sub	r2,r2,r3
  8065d4:	100d883a 	mov	r6,r2
  8065d8:	01400804 	movi	r5,32
  8065dc:	08038740 	call	803874 <memset>
    }
    break;
  }
}
  8065e0:	e037883a 	mov	sp,fp
  8065e4:	dfc00117 	ldw	ra,4(sp)
  8065e8:	df000017 	ldw	fp,0(sp)
  8065ec:	dec00204 	addi	sp,sp,8
  8065f0:	f800283a 	ret

008065f4 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  8065f4:	defff204 	addi	sp,sp,-56
  8065f8:	dfc00d15 	stw	ra,52(sp)
  8065fc:	df000c15 	stw	fp,48(sp)
  806600:	dc000b15 	stw	r16,44(sp)
  806604:	df000b04 	addi	fp,sp,44
  806608:	e13ffc15 	stw	r4,-16(fp)
  80660c:	e17ffd15 	stw	r5,-12(fp)
  806610:	e1bffe15 	stw	r6,-8(fp)
  806614:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  806618:	e0bffe17 	ldw	r2,-8(fp)
  80661c:	1007883a 	mov	r3,r2
  806620:	e0bffd17 	ldw	r2,-12(fp)
  806624:	10c5883a 	add	r2,r2,r3
  806628:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80662c:	e0fffc17 	ldw	r3,-16(fp)
  806630:	00800044 	movi	r2,1
  806634:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
  806638:	0000a206 	br	8068c4 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
  80663c:	e0bffd17 	ldw	r2,-12(fp)
  806640:	10800003 	ldbu	r2,0(r2)
  806644:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
  806648:	e0bffc17 	ldw	r2,-16(fp)
  80664c:	10800903 	ldbu	r2,36(r2)
  806650:	10803fcc 	andi	r2,r2,255
  806654:	1080201c 	xori	r2,r2,128
  806658:	10bfe004 	addi	r2,r2,-128
  80665c:	1004803a 	cmplt	r2,r2,zero
  806660:	10003b1e 	bne	r2,zero,806750 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
  806664:	e0bffc17 	ldw	r2,-16(fp)
  806668:	10800903 	ldbu	r2,36(r2)
  80666c:	10803fcc 	andi	r2,r2,255
  806670:	1080201c 	xori	r2,r2,128
  806674:	10bfe004 	addi	r2,r2,-128
  806678:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80667c:	e0bff717 	ldw	r2,-36(fp)
  806680:	1004c03a 	cmpne	r2,r2,zero
  806684:	1000031e 	bne	r2,zero,806694 <altera_avalon_lcd_16207_write+0xa0>
  806688:	e0bff807 	ldb	r2,-32(fp)
  80668c:	108016d8 	cmpnei	r2,r2,91
  806690:	1000111e 	bne	r2,zero,8066d8 <altera_avalon_lcd_16207_write+0xe4>
  806694:	e0bff717 	ldw	r2,-36(fp)
  806698:	1005003a 	cmpeq	r2,r2,zero
  80669c:	10001a1e 	bne	r2,zero,806708 <altera_avalon_lcd_16207_write+0x114>
  8066a0:	e0bff807 	ldb	r2,-32(fp)
  8066a4:	1007883a 	mov	r3,r2
  8066a8:	00802074 	movhi	r2,129
  8066ac:	10a9ef04 	addi	r2,r2,-22596
  8066b0:	10800017 	ldw	r2,0(r2)
  8066b4:	1885883a 	add	r2,r3,r2
  8066b8:	10800003 	ldbu	r2,0(r2)
  8066bc:	10803fcc 	andi	r2,r2,255
  8066c0:	1080010c 	andi	r2,r2,4
  8066c4:	1004c03a 	cmpne	r2,r2,zero
  8066c8:	10000f1e 	bne	r2,zero,806708 <altera_avalon_lcd_16207_write+0x114>
  8066cc:	e0bff807 	ldb	r2,-32(fp)
  8066d0:	10800ee0 	cmpeqi	r2,r2,59
  8066d4:	10000c1e 	bne	r2,zero,806708 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
  8066d8:	e0fff717 	ldw	r3,-36(fp)
  8066dc:	e0bffc17 	ldw	r2,-16(fp)
  8066e0:	1885883a 	add	r2,r3,r2
  8066e4:	10800a04 	addi	r2,r2,40
  8066e8:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8066ec:	e17ff807 	ldb	r5,-32(fp)
  8066f0:	e13ffc17 	ldw	r4,-16(fp)
  8066f4:	08063240 	call	806324 <lcd_handle_escape>

        sp->esccount = -1;
  8066f8:	e0fffc17 	ldw	r3,-16(fp)
  8066fc:	00bfffc4 	movi	r2,-1
  806700:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  806704:	00006c06 	br	8068b8 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  806708:	e0bffc17 	ldw	r2,-16(fp)
  80670c:	10800903 	ldbu	r2,36(r2)
  806710:	10803fcc 	andi	r2,r2,255
  806714:	108001e8 	cmpgeui	r2,r2,7
  806718:	1000671e 	bne	r2,zero,8068b8 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
  80671c:	e0fff717 	ldw	r3,-36(fp)
  806720:	e0bffc17 	ldw	r2,-16(fp)
  806724:	1885883a 	add	r2,r3,r2
  806728:	10c00a04 	addi	r3,r2,40
  80672c:	e0bff803 	ldbu	r2,-32(fp)
  806730:	18800005 	stb	r2,0(r3)
        sp->esccount++;
  806734:	e0bffc17 	ldw	r2,-16(fp)
  806738:	10800903 	ldbu	r2,36(r2)
  80673c:	10800044 	addi	r2,r2,1
  806740:	1007883a 	mov	r3,r2
  806744:	e0bffc17 	ldw	r2,-16(fp)
  806748:	10c00905 	stb	r3,36(r2)
  80674c:	00005a06 	br	8068b8 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
  806750:	e0bff807 	ldb	r2,-32(fp)
  806754:	108006d8 	cmpnei	r2,r2,27
  806758:	1000031e 	bne	r2,zero,806768 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
  80675c:	e0bffc17 	ldw	r2,-16(fp)
  806760:	10000905 	stb	zero,36(r2)
  806764:	00005406 	br	8068b8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
  806768:	e0bff807 	ldb	r2,-32(fp)
  80676c:	10800358 	cmpnei	r2,r2,13
  806770:	1000031e 	bne	r2,zero,806780 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
  806774:	e0bffc17 	ldw	r2,-16(fp)
  806778:	10000845 	stb	zero,33(r2)
  80677c:	00004e06 	br	8068b8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
  806780:	e0bff807 	ldb	r2,-32(fp)
  806784:	10800298 	cmpnei	r2,r2,10
  806788:	1000101e 	bne	r2,zero,8067cc <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
  80678c:	e0bffc17 	ldw	r2,-16(fp)
  806790:	10000845 	stb	zero,33(r2)
      sp->y++;
  806794:	e0bffc17 	ldw	r2,-16(fp)
  806798:	10800883 	ldbu	r2,34(r2)
  80679c:	10800044 	addi	r2,r2,1
  8067a0:	1007883a 	mov	r3,r2
  8067a4:	e0bffc17 	ldw	r2,-16(fp)
  8067a8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8067ac:	e0bffc17 	ldw	r2,-16(fp)
  8067b0:	10800883 	ldbu	r2,34(r2)
  8067b4:	10803fcc 	andi	r2,r2,255
  8067b8:	108000f0 	cmpltui	r2,r2,3
  8067bc:	10003e1e 	bne	r2,zero,8068b8 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
  8067c0:	e13ffc17 	ldw	r4,-16(fp)
  8067c4:	080625c0 	call	80625c <lcd_scroll_up>
  8067c8:	00003b06 	br	8068b8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
  8067cc:	e0bff807 	ldb	r2,-32(fp)
  8067d0:	10800218 	cmpnei	r2,r2,8
  8067d4:	10000c1e 	bne	r2,zero,806808 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
  8067d8:	e0bffc17 	ldw	r2,-16(fp)
  8067dc:	10800843 	ldbu	r2,33(r2)
  8067e0:	10803fcc 	andi	r2,r2,255
  8067e4:	1005003a 	cmpeq	r2,r2,zero
  8067e8:	1000331e 	bne	r2,zero,8068b8 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
  8067ec:	e0bffc17 	ldw	r2,-16(fp)
  8067f0:	10800843 	ldbu	r2,33(r2)
  8067f4:	10bfffc4 	addi	r2,r2,-1
  8067f8:	1007883a 	mov	r3,r2
  8067fc:	e0bffc17 	ldw	r2,-16(fp)
  806800:	10c00845 	stb	r3,33(r2)
  806804:	00002c06 	br	8068b8 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
  806808:	e0bff807 	ldb	r2,-32(fp)
  80680c:	1007883a 	mov	r3,r2
  806810:	00802074 	movhi	r2,129
  806814:	10a9ef04 	addi	r2,r2,-22596
  806818:	10800017 	ldw	r2,0(r2)
  80681c:	1885883a 	add	r2,r3,r2
  806820:	10800003 	ldbu	r2,0(r2)
  806824:	10803fcc 	andi	r2,r2,255
  806828:	1080201c 	xori	r2,r2,128
  80682c:	10bfe004 	addi	r2,r2,-128
  806830:	108025cc 	andi	r2,r2,151
  806834:	1005003a 	cmpeq	r2,r2,zero
  806838:	10001f1e 	bne	r2,zero,8068b8 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80683c:	e0bffc17 	ldw	r2,-16(fp)
  806840:	10800883 	ldbu	r2,34(r2)
  806844:	10803fcc 	andi	r2,r2,255
  806848:	108000b0 	cmpltui	r2,r2,2
  80684c:	1000021e 	bne	r2,zero,806858 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
  806850:	e13ffc17 	ldw	r4,-16(fp)
  806854:	080625c0 	call	80625c <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  806858:	e0bffc17 	ldw	r2,-16(fp)
  80685c:	10800843 	ldbu	r2,33(r2)
  806860:	10803fcc 	andi	r2,r2,255
  806864:	10801428 	cmpgeui	r2,r2,80
  806868:	10000d1e 	bne	r2,zero,8068a0 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
  80686c:	e0bffc17 	ldw	r2,-16(fp)
  806870:	10800883 	ldbu	r2,34(r2)
  806874:	11003fcc 	andi	r4,r2,255
  806878:	e0bffc17 	ldw	r2,-16(fp)
  80687c:	10800843 	ldbu	r2,33(r2)
  806880:	11403fcc 	andi	r5,r2,255
  806884:	e0fffc17 	ldw	r3,-16(fp)
  806888:	20801924 	muli	r2,r4,100
  80688c:	10c5883a 	add	r2,r2,r3
  806890:	1145883a 	add	r2,r2,r5
  806894:	10c01004 	addi	r3,r2,64
  806898:	e0bff803 	ldbu	r2,-32(fp)
  80689c:	18800005 	stb	r2,0(r3)

      sp->x++;
  8068a0:	e0bffc17 	ldw	r2,-16(fp)
  8068a4:	10800843 	ldbu	r2,33(r2)
  8068a8:	10800044 	addi	r2,r2,1
  8068ac:	1007883a 	mov	r3,r2
  8068b0:	e0bffc17 	ldw	r2,-16(fp)
  8068b4:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8068b8:	e0bffd17 	ldw	r2,-12(fp)
  8068bc:	10800044 	addi	r2,r2,1
  8068c0:	e0bffd15 	stw	r2,-12(fp)
  8068c4:	e0fffd17 	ldw	r3,-12(fp)
  8068c8:	e0bffb17 	ldw	r2,-20(fp)
  8068cc:	18bf5b36 	bltu	r3,r2,80663c <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8068d0:	00800404 	movi	r2,16
  8068d4:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8068d8:	e03ffa15 	stw	zero,-24(fp)
  8068dc:	00003606 	br	8069b8 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  8068e0:	00801404 	movi	r2,80
  8068e4:	e0bff615 	stw	r2,-40(fp)
  8068e8:	00001106 	br	806930 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
  8068ec:	e13ffa17 	ldw	r4,-24(fp)
  8068f0:	e0bff617 	ldw	r2,-40(fp)
  8068f4:	117fffc4 	addi	r5,r2,-1
  8068f8:	e0fffc17 	ldw	r3,-16(fp)
  8068fc:	20801924 	muli	r2,r4,100
  806900:	10c5883a 	add	r2,r2,r3
  806904:	1145883a 	add	r2,r2,r5
  806908:	10801004 	addi	r2,r2,64
  80690c:	10800003 	ldbu	r2,0(r2)
  806910:	10803fcc 	andi	r2,r2,255
  806914:	1080201c 	xori	r2,r2,128
  806918:	10bfe004 	addi	r2,r2,-128
  80691c:	10800818 	cmpnei	r2,r2,32
  806920:	1000061e 	bne	r2,zero,80693c <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  806924:	e0bff617 	ldw	r2,-40(fp)
  806928:	10bfffc4 	addi	r2,r2,-1
  80692c:	e0bff615 	stw	r2,-40(fp)
  806930:	e0bff617 	ldw	r2,-40(fp)
  806934:	10800048 	cmpgei	r2,r2,1
  806938:	103fec1e 	bne	r2,zero,8068ec <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80693c:	e0bff617 	ldw	r2,-40(fp)
  806940:	10800448 	cmpgei	r2,r2,17
  806944:	1000031e 	bne	r2,zero,806954 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
  806948:	00800404 	movi	r2,16
  80694c:	e0bff615 	stw	r2,-40(fp)
  806950:	00000306 	br	806960 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
  806954:	e0bff617 	ldw	r2,-40(fp)
  806958:	10800044 	addi	r2,r2,1
  80695c:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
  806960:	e13ffa17 	ldw	r4,-24(fp)
  806964:	e0bff617 	ldw	r2,-40(fp)
  806968:	100b883a 	mov	r5,r2
  80696c:	e0fffc17 	ldw	r3,-16(fp)
  806970:	20801924 	muli	r2,r4,100
  806974:	10c5883a 	add	r2,r2,r3
  806978:	10802404 	addi	r2,r2,144
  80697c:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
  806980:	e0fff917 	ldw	r3,-28(fp)
  806984:	e0bff617 	ldw	r2,-40(fp)
  806988:	1880020e 	bge	r3,r2,806994 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
  80698c:	e0bff617 	ldw	r2,-40(fp)
  806990:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  806994:	e0bffa17 	ldw	r2,-24(fp)
  806998:	e0fffc17 	ldw	r3,-16(fp)
  80699c:	10801924 	muli	r2,r2,100
  8069a0:	10c5883a 	add	r2,r2,r3
  8069a4:	10802404 	addi	r2,r2,144
  8069a8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8069ac:	e0bffa17 	ldw	r2,-24(fp)
  8069b0:	10800044 	addi	r2,r2,1
  8069b4:	e0bffa15 	stw	r2,-24(fp)
  8069b8:	e0bffa17 	ldw	r2,-24(fp)
  8069bc:	10800090 	cmplti	r2,r2,2
  8069c0:	103fc71e 	bne	r2,zero,8068e0 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  8069c4:	e0bff917 	ldw	r2,-28(fp)
  8069c8:	10800448 	cmpgei	r2,r2,17
  8069cc:	1000031e 	bne	r2,zero,8069dc <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
  8069d0:	e0bffc17 	ldw	r2,-16(fp)
  8069d4:	10000985 	stb	zero,38(r2)
  8069d8:	00002d06 	br	806a90 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
  8069dc:	e0bff917 	ldw	r2,-28(fp)
  8069e0:	1085883a 	add	r2,r2,r2
  8069e4:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
  8069e8:	e0bff917 	ldw	r2,-28(fp)
  8069ec:	1007883a 	mov	r3,r2
  8069f0:	e0bffc17 	ldw	r2,-16(fp)
  8069f4:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8069f8:	e03ffa15 	stw	zero,-24(fp)
  8069fc:	00002106 	br	806a84 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  806a00:	e0bffa17 	ldw	r2,-24(fp)
  806a04:	e0fffc17 	ldw	r3,-16(fp)
  806a08:	10801924 	muli	r2,r2,100
  806a0c:	10c5883a 	add	r2,r2,r3
  806a10:	10802404 	addi	r2,r2,144
  806a14:	10800043 	ldbu	r2,1(r2)
  806a18:	10803fcc 	andi	r2,r2,255
  806a1c:	1080201c 	xori	r2,r2,128
  806a20:	10bfe004 	addi	r2,r2,-128
  806a24:	10800450 	cmplti	r2,r2,17
  806a28:	1000131e 	bne	r2,zero,806a78 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  806a2c:	e43ffa17 	ldw	r16,-24(fp)
  806a30:	e0bffa17 	ldw	r2,-24(fp)
  806a34:	e0fffc17 	ldw	r3,-16(fp)
  806a38:	10801924 	muli	r2,r2,100
  806a3c:	10c5883a 	add	r2,r2,r3
  806a40:	10802404 	addi	r2,r2,144
  806a44:	10800043 	ldbu	r2,1(r2)
  806a48:	10803fcc 	andi	r2,r2,255
  806a4c:	1080201c 	xori	r2,r2,128
  806a50:	10bfe004 	addi	r2,r2,-128
  806a54:	1008923a 	slli	r4,r2,8
  806a58:	e17ff917 	ldw	r5,-28(fp)
  806a5c:	08087240 	call	808724 <__divsi3>
  806a60:	1009883a 	mov	r4,r2
  806a64:	e0fffc17 	ldw	r3,-16(fp)
  806a68:	80801924 	muli	r2,r16,100
  806a6c:	10c5883a 	add	r2,r2,r3
  806a70:	10802404 	addi	r2,r2,144
  806a74:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  806a78:	e0bffa17 	ldw	r2,-24(fp)
  806a7c:	10800044 	addi	r2,r2,1
  806a80:	e0bffa15 	stw	r2,-24(fp)
  806a84:	e0bffa17 	ldw	r2,-24(fp)
  806a88:	10800090 	cmplti	r2,r2,2
  806a8c:	103fdc1e 	bne	r2,zero,806a00 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  806a90:	e0bffc17 	ldw	r2,-16(fp)
  806a94:	10800943 	ldbu	r2,37(r2)
  806a98:	10803fcc 	andi	r2,r2,255
  806a9c:	1080201c 	xori	r2,r2,128
  806aa0:	10bfe004 	addi	r2,r2,-128
  806aa4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
  806aa8:	e13ffc17 	ldw	r4,-16(fp)
  806aac:	08060700 	call	806070 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  806ab0:	e0bffc17 	ldw	r2,-16(fp)
  806ab4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  806ab8:	e0bffc17 	ldw	r2,-16(fp)
  806abc:	10800943 	ldbu	r2,37(r2)
  806ac0:	10c03fcc 	andi	r3,r2,255
  806ac4:	18c0201c 	xori	r3,r3,128
  806ac8:	18ffe004 	addi	r3,r3,-128
  806acc:	e0bff517 	ldw	r2,-44(fp)
  806ad0:	18800426 	beq	r3,r2,806ae4 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  806ad4:	e0fffc17 	ldw	r3,-16(fp)
  806ad8:	00800044 	movi	r2,1
  806adc:	188009c5 	stb	r2,39(r3)
  }
  806ae0:	003feb06 	br	806a90 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  806ae4:	e0bffe17 	ldw	r2,-8(fp)
}
  806ae8:	e037883a 	mov	sp,fp
  806aec:	dfc00217 	ldw	ra,8(sp)
  806af0:	df000117 	ldw	fp,4(sp)
  806af4:	dc000017 	ldw	r16,0(sp)
  806af8:	dec00304 	addi	sp,sp,12
  806afc:	f800283a 	ret

00806b00 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  806b00:	defffc04 	addi	sp,sp,-16
  806b04:	dfc00315 	stw	ra,12(sp)
  806b08:	df000215 	stw	fp,8(sp)
  806b0c:	df000204 	addi	fp,sp,8
  806b10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  806b14:	e0bfff17 	ldw	r2,-4(fp)
  806b18:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  806b1c:	e0bffe17 	ldw	r2,-8(fp)
  806b20:	10800943 	ldbu	r2,37(r2)
  806b24:	10803fcc 	andi	r2,r2,255
  806b28:	1080201c 	xori	r2,r2,128
  806b2c:	10bfe004 	addi	r2,r2,-128
  806b30:	10c00044 	addi	r3,r2,1
  806b34:	e0bffe17 	ldw	r2,-8(fp)
  806b38:	10800983 	ldbu	r2,38(r2)
  806b3c:	10803fcc 	andi	r2,r2,255
  806b40:	1080201c 	xori	r2,r2,128
  806b44:	10bfe004 	addi	r2,r2,-128
  806b48:	18800316 	blt	r3,r2,806b58 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
  806b4c:	e0bffe17 	ldw	r2,-8(fp)
  806b50:	10000945 	stb	zero,37(r2)
  806b54:	00000606 	br	806b70 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
  806b58:	e0bffe17 	ldw	r2,-8(fp)
  806b5c:	10800943 	ldbu	r2,37(r2)
  806b60:	10800044 	addi	r2,r2,1
  806b64:	1007883a 	mov	r3,r2
  806b68:	e0bffe17 	ldw	r2,-8(fp)
  806b6c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  806b70:	e0bffe17 	ldw	r2,-8(fp)
  806b74:	10800983 	ldbu	r2,38(r2)
  806b78:	10803fcc 	andi	r2,r2,255
  806b7c:	1080201c 	xori	r2,r2,128
  806b80:	10bfe004 	addi	r2,r2,-128
  806b84:	10800050 	cmplti	r2,r2,1
  806b88:	1000091e 	bne	r2,zero,806bb0 <alt_lcd_16207_timeout+0xb0>
  806b8c:	e0bffe17 	ldw	r2,-8(fp)
  806b90:	108009c3 	ldbu	r2,39(r2)
  806b94:	10803fcc 	andi	r2,r2,255
  806b98:	1080201c 	xori	r2,r2,128
  806b9c:	10bfe004 	addi	r2,r2,-128
  806ba0:	1004c03a 	cmpne	r2,r2,zero
  806ba4:	1000021e 	bne	r2,zero,806bb0 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
  806ba8:	e13ffe17 	ldw	r4,-8(fp)
  806bac:	08060700 	call	806070 <lcd_repaint_screen>

  return sp->period;
  806bb0:	e0bffe17 	ldw	r2,-8(fp)
  806bb4:	10800717 	ldw	r2,28(r2)
}
  806bb8:	e037883a 	mov	sp,fp
  806bbc:	dfc00117 	ldw	ra,4(sp)
  806bc0:	df000017 	ldw	fp,0(sp)
  806bc4:	dec00204 	addi	sp,sp,8
  806bc8:	f800283a 	ret

00806bcc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  806bcc:	defffc04 	addi	sp,sp,-16
  806bd0:	dfc00315 	stw	ra,12(sp)
  806bd4:	df000215 	stw	fp,8(sp)
  806bd8:	df000204 	addi	fp,sp,8
  806bdc:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  806be0:	e0bfff17 	ldw	r2,-4(fp)
  806be4:	10800017 	ldw	r2,0(r2)
  806be8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  806bec:	e0bfff17 	ldw	r2,-4(fp)
  806bf0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  806bf4:	010ea604 	movi	r4,15000
  806bf8:	08080d40 	call	8080d4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806bfc:	e0bffe17 	ldw	r2,-8(fp)
  806c00:	1007883a 	mov	r3,r2
  806c04:	00800c04 	movi	r2,48
  806c08:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  806c0c:	01040104 	movi	r4,4100
  806c10:	08080d40 	call	8080d4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806c14:	e0bffe17 	ldw	r2,-8(fp)
  806c18:	1007883a 	mov	r3,r2
  806c1c:	00800c04 	movi	r2,48
  806c20:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  806c24:	0100fa04 	movi	r4,1000
  806c28:	08080d40 	call	8080d4 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  806c2c:	e0bffe17 	ldw	r2,-8(fp)
  806c30:	1007883a 	mov	r3,r2
  806c34:	00800c04 	movi	r2,48
  806c38:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  806c3c:	e13fff17 	ldw	r4,-4(fp)
  806c40:	01400e04 	movi	r5,56
  806c44:	0805e200 	call	805e20 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  806c48:	e13fff17 	ldw	r4,-4(fp)
  806c4c:	01400204 	movi	r5,8
  806c50:	0805e200 	call	805e20 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  806c54:	e13fff17 	ldw	r4,-4(fp)
  806c58:	0805fac0 	call	805fac <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  806c5c:	e13fff17 	ldw	r4,-4(fp)
  806c60:	01400184 	movi	r5,6
  806c64:	0805e200 	call	805e20 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  806c68:	e13fff17 	ldw	r4,-4(fp)
  806c6c:	01400304 	movi	r5,12
  806c70:	0805e200 	call	805e20 <lcd_write_command>

  sp->esccount = -1;
  806c74:	e0ffff17 	ldw	r3,-4(fp)
  806c78:	00bfffc4 	movi	r2,-1
  806c7c:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
  806c80:	e0bfff17 	ldw	r2,-4(fp)
  806c84:	11000a04 	addi	r4,r2,40
  806c88:	000b883a 	mov	r5,zero
  806c8c:	01800204 	movi	r6,8
  806c90:	08038740 	call	803874 <memset>

  sp->scrollpos = 0;
  806c94:	e0bfff17 	ldw	r2,-4(fp)
  806c98:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  806c9c:	e0bfff17 	ldw	r2,-4(fp)
  806ca0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  806ca4:	e0bfff17 	ldw	r2,-4(fp)
  806ca8:	100009c5 	stb	zero,39(r2)
  806cac:	00802074 	movhi	r2,129
  806cb0:	10b11704 	addi	r2,r2,-15268
  806cb4:	10800017 	ldw	r2,0(r2)
  806cb8:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  806cbc:	01400284 	movi	r5,10
  806cc0:	08087e40 	call	8087e4 <__udivsi3>
  806cc4:	1007883a 	mov	r3,r2
  806cc8:	e0bfff17 	ldw	r2,-4(fp)
  806ccc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  806cd0:	e0bfff17 	ldw	r2,-4(fp)
  806cd4:	11000104 	addi	r4,r2,4
  806cd8:	e0bfff17 	ldw	r2,-4(fp)
  806cdc:	10800717 	ldw	r2,28(r2)
  806ce0:	100b883a 	mov	r5,r2
  806ce4:	01802034 	movhi	r6,128
  806ce8:	319ac004 	addi	r6,r6,27392
  806cec:	e1ffff17 	ldw	r7,-4(fp)
  806cf0:	08041d80 	call	8041d8 <alt_alarm_start>
}
  806cf4:	e037883a 	mov	sp,fp
  806cf8:	dfc00117 	ldw	ra,4(sp)
  806cfc:	df000017 	ldw	fp,0(sp)
  806d00:	dec00204 	addi	sp,sp,8
  806d04:	f800283a 	ret

00806d08 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806d08:	defffa04 	addi	sp,sp,-24
  806d0c:	dfc00515 	stw	ra,20(sp)
  806d10:	df000415 	stw	fp,16(sp)
  806d14:	df000404 	addi	fp,sp,16
  806d18:	e13ffd15 	stw	r4,-12(fp)
  806d1c:	e17ffe15 	stw	r5,-8(fp)
  806d20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  806d24:	e0bffd17 	ldw	r2,-12(fp)
  806d28:	10800017 	ldw	r2,0(r2)
  806d2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  806d30:	e0bffc17 	ldw	r2,-16(fp)
  806d34:	11000a04 	addi	r4,r2,40
  806d38:	e0bffd17 	ldw	r2,-12(fp)
  806d3c:	11c00217 	ldw	r7,8(r2)
  806d40:	e17ffe17 	ldw	r5,-8(fp)
  806d44:	e1bfff17 	ldw	r6,-4(fp)
  806d48:	08065f40 	call	8065f4 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  806d4c:	e037883a 	mov	sp,fp
  806d50:	dfc00117 	ldw	ra,4(sp)
  806d54:	df000017 	ldw	fp,0(sp)
  806d58:	dec00204 	addi	sp,sp,8
  806d5c:	f800283a 	ret

00806d60 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  806d60:	defffa04 	addi	sp,sp,-24
  806d64:	dfc00515 	stw	ra,20(sp)
  806d68:	df000415 	stw	fp,16(sp)
  806d6c:	df000404 	addi	fp,sp,16
  806d70:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  806d74:	e0bfff17 	ldw	r2,-4(fp)
  806d78:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  806d7c:	e0bfff17 	ldw	r2,-4(fp)
  806d80:	10800104 	addi	r2,r2,4
  806d84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806d88:	0005303a 	rdctl	r2,status
  806d8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806d90:	e0fffd17 	ldw	r3,-12(fp)
  806d94:	00bfff84 	movi	r2,-2
  806d98:	1884703a 	and	r2,r3,r2
  806d9c:	1001703a 	wrctl	status,r2
  
  return context;
  806da0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  806da4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  806da8:	0804fe80 	call	804fe8 <alt_tick>
  806dac:	e0bffe17 	ldw	r2,-8(fp)
  806db0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806db4:	e0bffc17 	ldw	r2,-16(fp)
  806db8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  806dbc:	e037883a 	mov	sp,fp
  806dc0:	dfc00117 	ldw	ra,4(sp)
  806dc4:	df000017 	ldw	fp,0(sp)
  806dc8:	dec00204 	addi	sp,sp,8
  806dcc:	f800283a 	ret

00806dd0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  806dd0:	defff804 	addi	sp,sp,-32
  806dd4:	dfc00715 	stw	ra,28(sp)
  806dd8:	df000615 	stw	fp,24(sp)
  806ddc:	df000604 	addi	fp,sp,24
  806de0:	e13ffc15 	stw	r4,-16(fp)
  806de4:	e17ffd15 	stw	r5,-12(fp)
  806de8:	e1bffe15 	stw	r6,-8(fp)
  806dec:	e1ffff15 	stw	r7,-4(fp)
  806df0:	e0bfff17 	ldw	r2,-4(fp)
  806df4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  806df8:	00802074 	movhi	r2,129
  806dfc:	10b11704 	addi	r2,r2,-15268
  806e00:	10800017 	ldw	r2,0(r2)
  806e04:	1004c03a 	cmpne	r2,r2,zero
  806e08:	1000041e 	bne	r2,zero,806e1c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  806e0c:	00c02074 	movhi	r3,129
  806e10:	18f11704 	addi	r3,r3,-15268
  806e14:	e0bffb17 	ldw	r2,-20(fp)
  806e18:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  806e1c:	e0bffc17 	ldw	r2,-16(fp)
  806e20:	10800104 	addi	r2,r2,4
  806e24:	1007883a 	mov	r3,r2
  806e28:	008001c4 	movi	r2,7
  806e2c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  806e30:	d8000015 	stw	zero,0(sp)
  806e34:	e13ffd17 	ldw	r4,-12(fp)
  806e38:	e17ffe17 	ldw	r5,-8(fp)
  806e3c:	01802034 	movhi	r6,128
  806e40:	319b5804 	addi	r6,r6,28000
  806e44:	e1fffc17 	ldw	r7,-16(fp)
  806e48:	0807ccc0 	call	807ccc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  806e4c:	e037883a 	mov	sp,fp
  806e50:	dfc00117 	ldw	ra,4(sp)
  806e54:	df000017 	ldw	fp,0(sp)
  806e58:	dec00204 	addi	sp,sp,8
  806e5c:	f800283a 	ret

00806e60 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  806e60:	defffa04 	addi	sp,sp,-24
  806e64:	dfc00515 	stw	ra,20(sp)
  806e68:	df000415 	stw	fp,16(sp)
  806e6c:	df000404 	addi	fp,sp,16
  806e70:	e13ffd15 	stw	r4,-12(fp)
  806e74:	e17ffe15 	stw	r5,-8(fp)
  806e78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806e7c:	e0bffd17 	ldw	r2,-12(fp)
  806e80:	10800017 	ldw	r2,0(r2)
  806e84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  806e88:	e0bffc17 	ldw	r2,-16(fp)
  806e8c:	11000a04 	addi	r4,r2,40
  806e90:	e0bffd17 	ldw	r2,-12(fp)
  806e94:	11c00217 	ldw	r7,8(r2)
  806e98:	e17ffe17 	ldw	r5,-8(fp)
  806e9c:	e1bfff17 	ldw	r6,-4(fp)
  806ea0:	08073580 	call	807358 <altera_avalon_uart_read>
      fd->fd_flags);
}
  806ea4:	e037883a 	mov	sp,fp
  806ea8:	dfc00117 	ldw	ra,4(sp)
  806eac:	df000017 	ldw	fp,0(sp)
  806eb0:	dec00204 	addi	sp,sp,8
  806eb4:	f800283a 	ret

00806eb8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  806eb8:	defffa04 	addi	sp,sp,-24
  806ebc:	dfc00515 	stw	ra,20(sp)
  806ec0:	df000415 	stw	fp,16(sp)
  806ec4:	df000404 	addi	fp,sp,16
  806ec8:	e13ffd15 	stw	r4,-12(fp)
  806ecc:	e17ffe15 	stw	r5,-8(fp)
  806ed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806ed4:	e0bffd17 	ldw	r2,-12(fp)
  806ed8:	10800017 	ldw	r2,0(r2)
  806edc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  806ee0:	e0bffc17 	ldw	r2,-16(fp)
  806ee4:	11000a04 	addi	r4,r2,40
  806ee8:	e0bffd17 	ldw	r2,-12(fp)
  806eec:	11c00217 	ldw	r7,8(r2)
  806ef0:	e17ffe17 	ldw	r5,-8(fp)
  806ef4:	e1bfff17 	ldw	r6,-4(fp)
  806ef8:	08075e80 	call	8075e8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  806efc:	e037883a 	mov	sp,fp
  806f00:	dfc00117 	ldw	ra,4(sp)
  806f04:	df000017 	ldw	fp,0(sp)
  806f08:	dec00204 	addi	sp,sp,8
  806f0c:	f800283a 	ret

00806f10 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  806f10:	defffc04 	addi	sp,sp,-16
  806f14:	dfc00315 	stw	ra,12(sp)
  806f18:	df000215 	stw	fp,8(sp)
  806f1c:	df000204 	addi	fp,sp,8
  806f20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  806f24:	e0bfff17 	ldw	r2,-4(fp)
  806f28:	10800017 	ldw	r2,0(r2)
  806f2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  806f30:	e0bffe17 	ldw	r2,-8(fp)
  806f34:	11000a04 	addi	r4,r2,40
  806f38:	e0bfff17 	ldw	r2,-4(fp)
  806f3c:	11400217 	ldw	r5,8(r2)
  806f40:	08072f80 	call	8072f8 <altera_avalon_uart_close>
}
  806f44:	e037883a 	mov	sp,fp
  806f48:	dfc00117 	ldw	ra,4(sp)
  806f4c:	df000017 	ldw	fp,0(sp)
  806f50:	dec00204 	addi	sp,sp,8
  806f54:	f800283a 	ret

00806f58 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  806f58:	defff704 	addi	sp,sp,-36
  806f5c:	dfc00815 	stw	ra,32(sp)
  806f60:	df000715 	stw	fp,28(sp)
  806f64:	df000704 	addi	fp,sp,28
  806f68:	e13ffc15 	stw	r4,-16(fp)
  806f6c:	e17ffd15 	stw	r5,-12(fp)
  806f70:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
  806f74:	e0bffc17 	ldw	r2,-16(fp)
  806f78:	10800017 	ldw	r2,0(r2)
  806f7c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  806f80:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  806f84:	1004c03a 	cmpne	r2,r2,zero
  806f88:	1000061e 	bne	r2,zero,806fa4 <altera_avalon_uart_init+0x4c>
  806f8c:	0005883a 	mov	r2,zero
  806f90:	1004c03a 	cmpne	r2,r2,zero
  806f94:	1000031e 	bne	r2,zero,806fa4 <altera_avalon_uart_init+0x4c>
  806f98:	0005883a 	mov	r2,zero
  806f9c:	1005003a 	cmpeq	r2,r2,zero
  806fa0:	1000031e 	bne	r2,zero,806fb0 <altera_avalon_uart_init+0x58>
  806fa4:	00800044 	movi	r2,1
  806fa8:	e0bfff15 	stw	r2,-4(fp)
  806fac:	00000106 	br	806fb4 <altera_avalon_uart_init+0x5c>
  806fb0:	e03fff15 	stw	zero,-4(fp)
  806fb4:	e0bfff17 	ldw	r2,-4(fp)
  806fb8:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  806fbc:	e0bffa17 	ldw	r2,-24(fp)
  806fc0:	1004c03a 	cmpne	r2,r2,zero
  806fc4:	1000111e 	bne	r2,zero,80700c <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  806fc8:	e0fffc17 	ldw	r3,-16(fp)
  806fcc:	00832004 	movi	r2,3200
  806fd0:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  806fd4:	e0bffb17 	ldw	r2,-20(fp)
  806fd8:	11000304 	addi	r4,r2,12
  806fdc:	e0bffc17 	ldw	r2,-16(fp)
  806fe0:	10800117 	ldw	r2,4(r2)
  806fe4:	1007883a 	mov	r3,r2
  806fe8:	2005883a 	mov	r2,r4
  806fec:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  806ff0:	d8000015 	stw	zero,0(sp)
  806ff4:	e13ffd17 	ldw	r4,-12(fp)
  806ff8:	e17ffe17 	ldw	r5,-8(fp)
  806ffc:	01802034 	movhi	r6,128
  807000:	319c0804 	addi	r6,r6,28704
  807004:	e1fffc17 	ldw	r7,-16(fp)
  807008:	0807ccc0 	call	807ccc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80700c:	e037883a 	mov	sp,fp
  807010:	dfc00117 	ldw	ra,4(sp)
  807014:	df000017 	ldw	fp,0(sp)
  807018:	dec00204 	addi	sp,sp,8
  80701c:	f800283a 	ret

00807020 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  807020:	defffa04 	addi	sp,sp,-24
  807024:	dfc00515 	stw	ra,20(sp)
  807028:	df000415 	stw	fp,16(sp)
  80702c:	df000404 	addi	fp,sp,16
  807030:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  807034:	e0bfff17 	ldw	r2,-4(fp)
  807038:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
  80703c:	e0bffd17 	ldw	r2,-12(fp)
  807040:	10800017 	ldw	r2,0(r2)
  807044:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  807048:	e0bffc17 	ldw	r2,-16(fp)
  80704c:	10800204 	addi	r2,r2,8
  807050:	10800037 	ldwio	r2,0(r2)
  807054:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  807058:	e0bffc17 	ldw	r2,-16(fp)
  80705c:	10800204 	addi	r2,r2,8
  807060:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  807064:	e0bffc17 	ldw	r2,-16(fp)
  807068:	10800204 	addi	r2,r2,8
  80706c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  807070:	e0bffe17 	ldw	r2,-8(fp)
  807074:	1080200c 	andi	r2,r2,128
  807078:	1005003a 	cmpeq	r2,r2,zero
  80707c:	1000031e 	bne	r2,zero,80708c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  807080:	e13ffd17 	ldw	r4,-12(fp)
  807084:	e17ffe17 	ldw	r5,-8(fp)
  807088:	08070bc0 	call	8070bc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80708c:	e0bffe17 	ldw	r2,-8(fp)
  807090:	1081100c 	andi	r2,r2,1088
  807094:	1005003a 	cmpeq	r2,r2,zero
  807098:	1000031e 	bne	r2,zero,8070a8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80709c:	e13ffd17 	ldw	r4,-12(fp)
  8070a0:	e17ffe17 	ldw	r5,-8(fp)
  8070a4:	080719c0 	call	80719c <altera_avalon_uart_txirq>
  }
  

}
  8070a8:	e037883a 	mov	sp,fp
  8070ac:	dfc00117 	ldw	ra,4(sp)
  8070b0:	df000017 	ldw	fp,0(sp)
  8070b4:	dec00204 	addi	sp,sp,8
  8070b8:	f800283a 	ret

008070bc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8070bc:	defffc04 	addi	sp,sp,-16
  8070c0:	df000315 	stw	fp,12(sp)
  8070c4:	df000304 	addi	fp,sp,12
  8070c8:	e13ffe15 	stw	r4,-8(fp)
  8070cc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8070d0:	e0bfff17 	ldw	r2,-4(fp)
  8070d4:	108000cc 	andi	r2,r2,3
  8070d8:	1004c03a 	cmpne	r2,r2,zero
  8070dc:	10002b1e 	bne	r2,zero,80718c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8070e0:	e0bffe17 	ldw	r2,-8(fp)
  8070e4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8070e8:	e0bffe17 	ldw	r2,-8(fp)
  8070ec:	10800317 	ldw	r2,12(r2)
  8070f0:	10800044 	addi	r2,r2,1
  8070f4:	10800fcc 	andi	r2,r2,63
  8070f8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8070fc:	e0bffe17 	ldw	r2,-8(fp)
  807100:	11000317 	ldw	r4,12(r2)
  807104:	e0bffe17 	ldw	r2,-8(fp)
  807108:	10800017 	ldw	r2,0(r2)
  80710c:	10800037 	ldwio	r2,0(r2)
  807110:	1007883a 	mov	r3,r2
  807114:	e0bffe17 	ldw	r2,-8(fp)
  807118:	2085883a 	add	r2,r4,r2
  80711c:	10800704 	addi	r2,r2,28
  807120:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
  807124:	e0fffe17 	ldw	r3,-8(fp)
  807128:	e0bffd17 	ldw	r2,-12(fp)
  80712c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  807130:	e0bffe17 	ldw	r2,-8(fp)
  807134:	10800317 	ldw	r2,12(r2)
  807138:	10800044 	addi	r2,r2,1
  80713c:	10800fcc 	andi	r2,r2,63
  807140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  807144:	e0bffe17 	ldw	r2,-8(fp)
  807148:	10c00217 	ldw	r3,8(r2)
  80714c:	e0bffd17 	ldw	r2,-12(fp)
  807150:	18800e1e 	bne	r3,r2,80718c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  807154:	e0bffe17 	ldw	r2,-8(fp)
  807158:	10c00117 	ldw	r3,4(r2)
  80715c:	00bfdfc4 	movi	r2,-129
  807160:	1886703a 	and	r3,r3,r2
  807164:	e0bffe17 	ldw	r2,-8(fp)
  807168:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80716c:	e0bffe17 	ldw	r2,-8(fp)
  807170:	10800017 	ldw	r2,0(r2)
  807174:	11000304 	addi	r4,r2,12
  807178:	e0bffe17 	ldw	r2,-8(fp)
  80717c:	10800117 	ldw	r2,4(r2)
  807180:	1007883a 	mov	r3,r2
  807184:	2005883a 	mov	r2,r4
  807188:	10c00035 	stwio	r3,0(r2)
  }   
}
  80718c:	e037883a 	mov	sp,fp
  807190:	df000017 	ldw	fp,0(sp)
  807194:	dec00104 	addi	sp,sp,4
  807198:	f800283a 	ret

0080719c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80719c:	defffd04 	addi	sp,sp,-12
  8071a0:	df000215 	stw	fp,8(sp)
  8071a4:	df000204 	addi	fp,sp,8
  8071a8:	e13ffe15 	stw	r4,-8(fp)
  8071ac:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8071b0:	e0bffe17 	ldw	r2,-8(fp)
  8071b4:	10c00417 	ldw	r3,16(r2)
  8071b8:	e0bffe17 	ldw	r2,-8(fp)
  8071bc:	10800517 	ldw	r2,20(r2)
  8071c0:	18803626 	beq	r3,r2,80729c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8071c4:	e0bffe17 	ldw	r2,-8(fp)
  8071c8:	10800617 	ldw	r2,24(r2)
  8071cc:	1080008c 	andi	r2,r2,2
  8071d0:	1005003a 	cmpeq	r2,r2,zero
  8071d4:	1000041e 	bne	r2,zero,8071e8 <altera_avalon_uart_txirq+0x4c>
  8071d8:	e0bfff17 	ldw	r2,-4(fp)
  8071dc:	1082000c 	andi	r2,r2,2048
  8071e0:	1005003a 	cmpeq	r2,r2,zero
  8071e4:	10001e1e 	bne	r2,zero,807260 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8071e8:	e0bffe17 	ldw	r2,-8(fp)
  8071ec:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8071f0:	e0bffe17 	ldw	r2,-8(fp)
  8071f4:	10800017 	ldw	r2,0(r2)
  8071f8:	11000104 	addi	r4,r2,4
  8071fc:	e0bffe17 	ldw	r2,-8(fp)
  807200:	10c00417 	ldw	r3,16(r2)
  807204:	e0bffe17 	ldw	r2,-8(fp)
  807208:	1885883a 	add	r2,r3,r2
  80720c:	10801704 	addi	r2,r2,92
  807210:	10800003 	ldbu	r2,0(r2)
  807214:	10c03fcc 	andi	r3,r2,255
  807218:	2005883a 	mov	r2,r4
  80721c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  807220:	e0bffe17 	ldw	r2,-8(fp)
  807224:	10800417 	ldw	r2,16(r2)
  807228:	10c00044 	addi	r3,r2,1
  80722c:	e0bffe17 	ldw	r2,-8(fp)
  807230:	10c00415 	stw	r3,16(r2)
  807234:	e0bffe17 	ldw	r2,-8(fp)
  807238:	10800417 	ldw	r2,16(r2)
  80723c:	10c00fcc 	andi	r3,r2,63
  807240:	e0bffe17 	ldw	r2,-8(fp)
  807244:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  807248:	e0bffe17 	ldw	r2,-8(fp)
  80724c:	10800117 	ldw	r2,4(r2)
  807250:	10c01014 	ori	r3,r2,64
  807254:	e0bffe17 	ldw	r2,-8(fp)
  807258:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80725c:	00000f06 	br	80729c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  807260:	e0bffe17 	ldw	r2,-8(fp)
  807264:	10800017 	ldw	r2,0(r2)
  807268:	10800204 	addi	r2,r2,8
  80726c:	10800037 	ldwio	r2,0(r2)
  807270:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  807274:	e0bfff17 	ldw	r2,-4(fp)
  807278:	1082000c 	andi	r2,r2,2048
  80727c:	1004c03a 	cmpne	r2,r2,zero
  807280:	1000061e 	bne	r2,zero,80729c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  807284:	e0bffe17 	ldw	r2,-8(fp)
  807288:	10c00117 	ldw	r3,4(r2)
  80728c:	00bfefc4 	movi	r2,-65
  807290:	1886703a 	and	r3,r3,r2
  807294:	e0bffe17 	ldw	r2,-8(fp)
  807298:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80729c:	e0bffe17 	ldw	r2,-8(fp)
  8072a0:	10c00417 	ldw	r3,16(r2)
  8072a4:	e0bffe17 	ldw	r2,-8(fp)
  8072a8:	10800517 	ldw	r2,20(r2)
  8072ac:	1880061e 	bne	r3,r2,8072c8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8072b0:	e0bffe17 	ldw	r2,-8(fp)
  8072b4:	10c00117 	ldw	r3,4(r2)
  8072b8:	00beefc4 	movi	r2,-1089
  8072bc:	1886703a 	and	r3,r3,r2
  8072c0:	e0bffe17 	ldw	r2,-8(fp)
  8072c4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8072c8:	e0bffe17 	ldw	r2,-8(fp)
  8072cc:	10800017 	ldw	r2,0(r2)
  8072d0:	11000304 	addi	r4,r2,12
  8072d4:	e0bffe17 	ldw	r2,-8(fp)
  8072d8:	10800117 	ldw	r2,4(r2)
  8072dc:	1007883a 	mov	r3,r2
  8072e0:	2005883a 	mov	r2,r4
  8072e4:	10c00035 	stwio	r3,0(r2)
}
  8072e8:	e037883a 	mov	sp,fp
  8072ec:	df000017 	ldw	fp,0(sp)
  8072f0:	dec00104 	addi	sp,sp,4
  8072f4:	f800283a 	ret

008072f8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8072f8:	defffc04 	addi	sp,sp,-16
  8072fc:	df000315 	stw	fp,12(sp)
  807300:	df000304 	addi	fp,sp,12
  807304:	e13ffd15 	stw	r4,-12(fp)
  807308:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80730c:	00000706 	br	80732c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  807310:	e0bffe17 	ldw	r2,-8(fp)
  807314:	1090000c 	andi	r2,r2,16384
  807318:	1005003a 	cmpeq	r2,r2,zero
  80731c:	1000031e 	bne	r2,zero,80732c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
  807320:	00bffd44 	movi	r2,-11
  807324:	e0bfff15 	stw	r2,-4(fp)
  807328:	00000606 	br	807344 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80732c:	e0bffd17 	ldw	r2,-12(fp)
  807330:	10c00417 	ldw	r3,16(r2)
  807334:	e0bffd17 	ldw	r2,-12(fp)
  807338:	10800517 	ldw	r2,20(r2)
  80733c:	18bff41e 	bne	r3,r2,807310 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  807340:	e03fff15 	stw	zero,-4(fp)
  807344:	e0bfff17 	ldw	r2,-4(fp)
}
  807348:	e037883a 	mov	sp,fp
  80734c:	df000017 	ldw	fp,0(sp)
  807350:	dec00104 	addi	sp,sp,4
  807354:	f800283a 	ret

00807358 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  807358:	defff004 	addi	sp,sp,-64
  80735c:	dfc00f15 	stw	ra,60(sp)
  807360:	df000e15 	stw	fp,56(sp)
  807364:	df000e04 	addi	fp,sp,56
  807368:	e13ffb15 	stw	r4,-20(fp)
  80736c:	e17ffc15 	stw	r5,-16(fp)
  807370:	e1bffd15 	stw	r6,-12(fp)
  807374:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
  807378:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
  80737c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  807380:	e0bffe17 	ldw	r2,-8(fp)
  807384:	1090000c 	andi	r2,r2,16384
  807388:	1005003a 	cmpeq	r2,r2,zero
  80738c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
  807390:	e0bffb17 	ldw	r2,-20(fp)
  807394:	10800217 	ldw	r2,8(r2)
  807398:	10800044 	addi	r2,r2,1
  80739c:	10800fcc 	andi	r2,r2,63
  8073a0:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8073a4:	00001906 	br	80740c <altera_avalon_uart_read+0xb4>
    {
      count++;
  8073a8:	e0bff617 	ldw	r2,-40(fp)
  8073ac:	10800044 	addi	r2,r2,1
  8073b0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8073b4:	e0bffb17 	ldw	r2,-20(fp)
  8073b8:	10c00217 	ldw	r3,8(r2)
  8073bc:	e0bffb17 	ldw	r2,-20(fp)
  8073c0:	1885883a 	add	r2,r3,r2
  8073c4:	10800704 	addi	r2,r2,28
  8073c8:	10800003 	ldbu	r2,0(r2)
  8073cc:	1007883a 	mov	r3,r2
  8073d0:	e0bffc17 	ldw	r2,-16(fp)
  8073d4:	10c00005 	stb	r3,0(r2)
  8073d8:	e0bffc17 	ldw	r2,-16(fp)
  8073dc:	10800044 	addi	r2,r2,1
  8073e0:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
  8073e4:	e0bffb17 	ldw	r2,-20(fp)
  8073e8:	10800217 	ldw	r2,8(r2)
  8073ec:	10c00044 	addi	r3,r2,1
  8073f0:	e0bffb17 	ldw	r2,-20(fp)
  8073f4:	10c00215 	stw	r3,8(r2)
  8073f8:	e0bffb17 	ldw	r2,-20(fp)
  8073fc:	10800217 	ldw	r2,8(r2)
  807400:	10c00fcc 	andi	r3,r2,63
  807404:	e0bffb17 	ldw	r2,-20(fp)
  807408:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80740c:	e0fff617 	ldw	r3,-40(fp)
  807410:	e0bffd17 	ldw	r2,-12(fp)
  807414:	1880050e 	bge	r3,r2,80742c <altera_avalon_uart_read+0xd4>
  807418:	e0bffb17 	ldw	r2,-20(fp)
  80741c:	10c00217 	ldw	r3,8(r2)
  807420:	e0bffb17 	ldw	r2,-20(fp)
  807424:	10800317 	ldw	r2,12(r2)
  807428:	18bfdf1e 	bne	r3,r2,8073a8 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80742c:	e0bff617 	ldw	r2,-40(fp)
  807430:	1004c03a 	cmpne	r2,r2,zero
  807434:	1000271e 	bne	r2,zero,8074d4 <altera_avalon_uart_read+0x17c>
  807438:	e0bffb17 	ldw	r2,-20(fp)
  80743c:	10c00217 	ldw	r3,8(r2)
  807440:	e0bffb17 	ldw	r2,-20(fp)
  807444:	10800317 	ldw	r2,12(r2)
  807448:	1880221e 	bne	r3,r2,8074d4 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
  80744c:	e0bff917 	ldw	r2,-28(fp)
  807450:	1004c03a 	cmpne	r2,r2,zero
  807454:	1000061e 	bne	r2,zero,807470 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  807458:	08075880 	call	807588 <alt_get_errno>
  80745c:	00c002c4 	movi	r3,11
  807460:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
  807464:	00800044 	movi	r2,1
  807468:	e0bff705 	stb	r2,-36(fp)
        break;
  80746c:	00001f06 	br	8074ec <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807470:	0005303a 	rdctl	r2,status
  807474:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807478:	e0fff517 	ldw	r3,-44(fp)
  80747c:	00bfff84 	movi	r2,-2
  807480:	1884703a 	and	r2,r3,r2
  807484:	1001703a 	wrctl	status,r2
  
  return context;
  807488:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80748c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  807490:	e0bffb17 	ldw	r2,-20(fp)
  807494:	10800117 	ldw	r2,4(r2)
  807498:	10c02014 	ori	r3,r2,128
  80749c:	e0bffb17 	ldw	r2,-20(fp)
  8074a0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8074a4:	e0bffb17 	ldw	r2,-20(fp)
  8074a8:	10800017 	ldw	r2,0(r2)
  8074ac:	11000304 	addi	r4,r2,12
  8074b0:	e0bffb17 	ldw	r2,-20(fp)
  8074b4:	10800117 	ldw	r2,4(r2)
  8074b8:	1007883a 	mov	r3,r2
  8074bc:	2005883a 	mov	r2,r4
  8074c0:	10c00035 	stwio	r3,0(r2)
  8074c4:	e0bffa17 	ldw	r2,-24(fp)
  8074c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8074cc:	e0bff417 	ldw	r2,-48(fp)
  8074d0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8074d4:	e0bff617 	ldw	r2,-40(fp)
  8074d8:	1004c03a 	cmpne	r2,r2,zero
  8074dc:	1000031e 	bne	r2,zero,8074ec <altera_avalon_uart_read+0x194>
  8074e0:	e0bffd17 	ldw	r2,-12(fp)
  8074e4:	1004c03a 	cmpne	r2,r2,zero
  8074e8:	103fc81e 	bne	r2,zero,80740c <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8074ec:	0005303a 	rdctl	r2,status
  8074f0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8074f4:	e0fff317 	ldw	r3,-52(fp)
  8074f8:	00bfff84 	movi	r2,-2
  8074fc:	1884703a 	and	r2,r3,r2
  807500:	1001703a 	wrctl	status,r2
  
  return context;
  807504:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  807508:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80750c:	e0bffb17 	ldw	r2,-20(fp)
  807510:	10800117 	ldw	r2,4(r2)
  807514:	10c02014 	ori	r3,r2,128
  807518:	e0bffb17 	ldw	r2,-20(fp)
  80751c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807520:	e0bffb17 	ldw	r2,-20(fp)
  807524:	10800017 	ldw	r2,0(r2)
  807528:	11000304 	addi	r4,r2,12
  80752c:	e0bffb17 	ldw	r2,-20(fp)
  807530:	10800117 	ldw	r2,4(r2)
  807534:	1007883a 	mov	r3,r2
  807538:	2005883a 	mov	r2,r4
  80753c:	10c00035 	stwio	r3,0(r2)
  807540:	e0bffa17 	ldw	r2,-24(fp)
  807544:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807548:	e0bff217 	ldw	r2,-56(fp)
  80754c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  807550:	e0bff703 	ldbu	r2,-36(fp)
  807554:	1005003a 	cmpeq	r2,r2,zero
  807558:	1000031e 	bne	r2,zero,807568 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
  80755c:	00bffd04 	movi	r2,-12
  807560:	e0bfff15 	stw	r2,-4(fp)
  807564:	00000206 	br	807570 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
  807568:	e0bff617 	ldw	r2,-40(fp)
  80756c:	e0bfff15 	stw	r2,-4(fp)
  807570:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  807574:	e037883a 	mov	sp,fp
  807578:	dfc00117 	ldw	ra,4(sp)
  80757c:	df000017 	ldw	fp,0(sp)
  807580:	dec00204 	addi	sp,sp,8
  807584:	f800283a 	ret

00807588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807588:	defffd04 	addi	sp,sp,-12
  80758c:	dfc00215 	stw	ra,8(sp)
  807590:	df000115 	stw	fp,4(sp)
  807594:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807598:	00802074 	movhi	r2,129
  80759c:	10a9e904 	addi	r2,r2,-22620
  8075a0:	10800017 	ldw	r2,0(r2)
  8075a4:	1005003a 	cmpeq	r2,r2,zero
  8075a8:	1000061e 	bne	r2,zero,8075c4 <alt_get_errno+0x3c>
  8075ac:	00802074 	movhi	r2,129
  8075b0:	10a9e904 	addi	r2,r2,-22620
  8075b4:	10800017 	ldw	r2,0(r2)
  8075b8:	103ee83a 	callr	r2
  8075bc:	e0bfff15 	stw	r2,-4(fp)
  8075c0:	00000306 	br	8075d0 <alt_get_errno+0x48>
  8075c4:	00802074 	movhi	r2,129
  8075c8:	10b11004 	addi	r2,r2,-15296
  8075cc:	e0bfff15 	stw	r2,-4(fp)
  8075d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8075d4:	e037883a 	mov	sp,fp
  8075d8:	dfc00117 	ldw	ra,4(sp)
  8075dc:	df000017 	ldw	fp,0(sp)
  8075e0:	dec00204 	addi	sp,sp,8
  8075e4:	f800283a 	ret

008075e8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8075e8:	defff204 	addi	sp,sp,-56
  8075ec:	dfc00d15 	stw	ra,52(sp)
  8075f0:	df000c15 	stw	fp,48(sp)
  8075f4:	df000c04 	addi	fp,sp,48
  8075f8:	e13ffc15 	stw	r4,-16(fp)
  8075fc:	e17ffd15 	stw	r5,-12(fp)
  807600:	e1bffe15 	stw	r6,-8(fp)
  807604:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  807608:	e0bffe17 	ldw	r2,-8(fp)
  80760c:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  807610:	e0bfff17 	ldw	r2,-4(fp)
  807614:	1090000c 	andi	r2,r2,16384
  807618:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80761c:	00004006 	br	807720 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  807620:	e0bffc17 	ldw	r2,-16(fp)
  807624:	10800517 	ldw	r2,20(r2)
  807628:	10800044 	addi	r2,r2,1
  80762c:	10800fcc 	andi	r2,r2,63
  807630:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  807634:	e0bffc17 	ldw	r2,-16(fp)
  807638:	10c00417 	ldw	r3,16(r2)
  80763c:	e0bff917 	ldw	r2,-28(fp)
  807640:	1880251e 	bne	r3,r2,8076d8 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
  807644:	e0bffa17 	ldw	r2,-24(fp)
  807648:	1005003a 	cmpeq	r2,r2,zero
  80764c:	1000051e 	bne	r2,zero,807664 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  807650:	08077b00 	call	8077b0 <alt_get_errno>
  807654:	1007883a 	mov	r3,r2
  807658:	008002c4 	movi	r2,11
  80765c:	18800015 	stw	r2,0(r3)
        break;
  807660:	00003206 	br	80772c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807664:	0005303a 	rdctl	r2,status
  807668:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80766c:	e0fff717 	ldw	r3,-36(fp)
  807670:	00bfff84 	movi	r2,-2
  807674:	1884703a 	and	r2,r3,r2
  807678:	1001703a 	wrctl	status,r2
  
  return context;
  80767c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  807680:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  807684:	e0bffc17 	ldw	r2,-16(fp)
  807688:	10800117 	ldw	r2,4(r2)
  80768c:	10c11014 	ori	r3,r2,1088
  807690:	e0bffc17 	ldw	r2,-16(fp)
  807694:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807698:	e0bffc17 	ldw	r2,-16(fp)
  80769c:	10800017 	ldw	r2,0(r2)
  8076a0:	11000304 	addi	r4,r2,12
  8076a4:	e0bffc17 	ldw	r2,-16(fp)
  8076a8:	10800117 	ldw	r2,4(r2)
  8076ac:	1007883a 	mov	r3,r2
  8076b0:	2005883a 	mov	r2,r4
  8076b4:	10c00035 	stwio	r3,0(r2)
  8076b8:	e0bffb17 	ldw	r2,-20(fp)
  8076bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8076c0:	e0bff617 	ldw	r2,-40(fp)
  8076c4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  8076c8:	e0bffc17 	ldw	r2,-16(fp)
  8076cc:	10c00417 	ldw	r3,16(r2)
  8076d0:	e0bff917 	ldw	r2,-28(fp)
  8076d4:	18bffc26 	beq	r3,r2,8076c8 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
  8076d8:	e0bff817 	ldw	r2,-32(fp)
  8076dc:	10bfffc4 	addi	r2,r2,-1
  8076e0:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  8076e4:	e0bffc17 	ldw	r2,-16(fp)
  8076e8:	10c00517 	ldw	r3,20(r2)
  8076ec:	e0bffd17 	ldw	r2,-12(fp)
  8076f0:	10800003 	ldbu	r2,0(r2)
  8076f4:	1009883a 	mov	r4,r2
  8076f8:	e0bffc17 	ldw	r2,-16(fp)
  8076fc:	1885883a 	add	r2,r3,r2
  807700:	10801704 	addi	r2,r2,92
  807704:	11000005 	stb	r4,0(r2)
  807708:	e0bffd17 	ldw	r2,-12(fp)
  80770c:	10800044 	addi	r2,r2,1
  807710:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
  807714:	e0fffc17 	ldw	r3,-16(fp)
  807718:	e0bff917 	ldw	r2,-28(fp)
  80771c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  807720:	e0bff817 	ldw	r2,-32(fp)
  807724:	1004c03a 	cmpne	r2,r2,zero
  807728:	103fbd1e 	bne	r2,zero,807620 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80772c:	0005303a 	rdctl	r2,status
  807730:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807734:	e0fff517 	ldw	r3,-44(fp)
  807738:	00bfff84 	movi	r2,-2
  80773c:	1884703a 	and	r2,r3,r2
  807740:	1001703a 	wrctl	status,r2
  
  return context;
  807744:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  807748:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80774c:	e0bffc17 	ldw	r2,-16(fp)
  807750:	10800117 	ldw	r2,4(r2)
  807754:	10c11014 	ori	r3,r2,1088
  807758:	e0bffc17 	ldw	r2,-16(fp)
  80775c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  807760:	e0bffc17 	ldw	r2,-16(fp)
  807764:	10800017 	ldw	r2,0(r2)
  807768:	11000304 	addi	r4,r2,12
  80776c:	e0bffc17 	ldw	r2,-16(fp)
  807770:	10800117 	ldw	r2,4(r2)
  807774:	1007883a 	mov	r3,r2
  807778:	2005883a 	mov	r2,r4
  80777c:	10c00035 	stwio	r3,0(r2)
  807780:	e0bffb17 	ldw	r2,-20(fp)
  807784:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807788:	e0bff417 	ldw	r2,-48(fp)
  80778c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  807790:	e0fffe17 	ldw	r3,-8(fp)
  807794:	e0bff817 	ldw	r2,-32(fp)
  807798:	1885c83a 	sub	r2,r3,r2
}
  80779c:	e037883a 	mov	sp,fp
  8077a0:	dfc00117 	ldw	ra,4(sp)
  8077a4:	df000017 	ldw	fp,0(sp)
  8077a8:	dec00204 	addi	sp,sp,8
  8077ac:	f800283a 	ret

008077b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8077b0:	defffd04 	addi	sp,sp,-12
  8077b4:	dfc00215 	stw	ra,8(sp)
  8077b8:	df000115 	stw	fp,4(sp)
  8077bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  8077c0:	00802074 	movhi	r2,129
  8077c4:	10a9e904 	addi	r2,r2,-22620
  8077c8:	10800017 	ldw	r2,0(r2)
  8077cc:	1005003a 	cmpeq	r2,r2,zero
  8077d0:	1000061e 	bne	r2,zero,8077ec <alt_get_errno+0x3c>
  8077d4:	00802074 	movhi	r2,129
  8077d8:	10a9e904 	addi	r2,r2,-22620
  8077dc:	10800017 	ldw	r2,0(r2)
  8077e0:	103ee83a 	callr	r2
  8077e4:	e0bfff15 	stw	r2,-4(fp)
  8077e8:	00000306 	br	8077f8 <alt_get_errno+0x48>
  8077ec:	00802074 	movhi	r2,129
  8077f0:	10b11004 	addi	r2,r2,-15296
  8077f4:	e0bfff15 	stw	r2,-4(fp)
  8077f8:	e0bfff17 	ldw	r2,-4(fp)
}
  8077fc:	e037883a 	mov	sp,fp
  807800:	dfc00117 	ldw	ra,4(sp)
  807804:	df000017 	ldw	fp,0(sp)
  807808:	dec00204 	addi	sp,sp,8
  80780c:	f800283a 	ret

00807810 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  807810:	defffe04 	addi	sp,sp,-8
  807814:	df000115 	stw	fp,4(sp)
  807818:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80781c:	e03fff15 	stw	zero,-4(fp)
  807820:	00000506 	br	807838 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  807824:	e0bfff17 	ldw	r2,-4(fp)
  807828:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80782c:	e0bfff17 	ldw	r2,-4(fp)
  807830:	10800804 	addi	r2,r2,32
  807834:	e0bfff15 	stw	r2,-4(fp)
  807838:	e0bfff17 	ldw	r2,-4(fp)
  80783c:	10820030 	cmpltui	r2,r2,2048
  807840:	103ff81e 	bne	r2,zero,807824 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807844:	e037883a 	mov	sp,fp
  807848:	df000017 	ldw	fp,0(sp)
  80784c:	dec00104 	addi	sp,sp,4
  807850:	f800283a 	ret

00807854 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807854:	defff904 	addi	sp,sp,-28
  807858:	dfc00615 	stw	ra,24(sp)
  80785c:	df000515 	stw	fp,20(sp)
  807860:	df000504 	addi	fp,sp,20
  807864:	e13ffd15 	stw	r4,-12(fp)
  807868:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80786c:	e0bffd17 	ldw	r2,-12(fp)
  807870:	1005003a 	cmpeq	r2,r2,zero
  807874:	1000041e 	bne	r2,zero,807888 <alt_dev_llist_insert+0x34>
  807878:	e0bffd17 	ldw	r2,-12(fp)
  80787c:	10800217 	ldw	r2,8(r2)
  807880:	1004c03a 	cmpne	r2,r2,zero
  807884:	1000071e 	bne	r2,zero,8078a4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  807888:	08079080 	call	807908 <alt_get_errno>
  80788c:	1007883a 	mov	r3,r2
  807890:	00800584 	movi	r2,22
  807894:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  807898:	00bffa84 	movi	r2,-22
  80789c:	e0bfff15 	stw	r2,-4(fp)
  8078a0:	00001306 	br	8078f0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8078a4:	e0fffd17 	ldw	r3,-12(fp)
  8078a8:	e0bffe17 	ldw	r2,-8(fp)
  8078ac:	e0bffb15 	stw	r2,-20(fp)
  8078b0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8078b4:	e0fffc17 	ldw	r3,-16(fp)
  8078b8:	e0bffb17 	ldw	r2,-20(fp)
  8078bc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8078c0:	e0bffb17 	ldw	r2,-20(fp)
  8078c4:	10c00017 	ldw	r3,0(r2)
  8078c8:	e0bffc17 	ldw	r2,-16(fp)
  8078cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8078d0:	e0bffb17 	ldw	r2,-20(fp)
  8078d4:	10c00017 	ldw	r3,0(r2)
  8078d8:	e0bffc17 	ldw	r2,-16(fp)
  8078dc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  8078e0:	e0fffb17 	ldw	r3,-20(fp)
  8078e4:	e0bffc17 	ldw	r2,-16(fp)
  8078e8:	18800015 	stw	r2,0(r3)

  return 0;  
  8078ec:	e03fff15 	stw	zero,-4(fp)
  8078f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8078f4:	e037883a 	mov	sp,fp
  8078f8:	dfc00117 	ldw	ra,4(sp)
  8078fc:	df000017 	ldw	fp,0(sp)
  807900:	dec00204 	addi	sp,sp,8
  807904:	f800283a 	ret

00807908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  807908:	defffd04 	addi	sp,sp,-12
  80790c:	dfc00215 	stw	ra,8(sp)
  807910:	df000115 	stw	fp,4(sp)
  807914:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  807918:	00802074 	movhi	r2,129
  80791c:	10a9e904 	addi	r2,r2,-22620
  807920:	10800017 	ldw	r2,0(r2)
  807924:	1005003a 	cmpeq	r2,r2,zero
  807928:	1000061e 	bne	r2,zero,807944 <alt_get_errno+0x3c>
  80792c:	00802074 	movhi	r2,129
  807930:	10a9e904 	addi	r2,r2,-22620
  807934:	10800017 	ldw	r2,0(r2)
  807938:	103ee83a 	callr	r2
  80793c:	e0bfff15 	stw	r2,-4(fp)
  807940:	00000306 	br	807950 <alt_get_errno+0x48>
  807944:	00802074 	movhi	r2,129
  807948:	10b11004 	addi	r2,r2,-15296
  80794c:	e0bfff15 	stw	r2,-4(fp)
  807950:	e0bfff17 	ldw	r2,-4(fp)
}
  807954:	e037883a 	mov	sp,fp
  807958:	dfc00117 	ldw	ra,4(sp)
  80795c:	df000017 	ldw	fp,0(sp)
  807960:	dec00204 	addi	sp,sp,8
  807964:	f800283a 	ret

00807968 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  807968:	defffd04 	addi	sp,sp,-12
  80796c:	dfc00215 	stw	ra,8(sp)
  807970:	df000115 	stw	fp,4(sp)
  807974:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807978:	00bfff04 	movi	r2,-4
  80797c:	00c02074 	movhi	r3,129
  807980:	18e21604 	addi	r3,r3,-30632
  807984:	1885883a 	add	r2,r3,r2
  807988:	e0bfff15 	stw	r2,-4(fp)
  80798c:	00000606 	br	8079a8 <_do_ctors+0x40>
        (*ctor) (); 
  807990:	e0bfff17 	ldw	r2,-4(fp)
  807994:	10800017 	ldw	r2,0(r2)
  807998:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80799c:	e0bfff17 	ldw	r2,-4(fp)
  8079a0:	10bfff04 	addi	r2,r2,-4
  8079a4:	e0bfff15 	stw	r2,-4(fp)
  8079a8:	e0ffff17 	ldw	r3,-4(fp)
  8079ac:	00802074 	movhi	r2,129
  8079b0:	10a21504 	addi	r2,r2,-30636
  8079b4:	18bff62e 	bgeu	r3,r2,807990 <_do_ctors+0x28>
        (*ctor) (); 
}
  8079b8:	e037883a 	mov	sp,fp
  8079bc:	dfc00117 	ldw	ra,4(sp)
  8079c0:	df000017 	ldw	fp,0(sp)
  8079c4:	dec00204 	addi	sp,sp,8
  8079c8:	f800283a 	ret

008079cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  8079cc:	defffd04 	addi	sp,sp,-12
  8079d0:	dfc00215 	stw	ra,8(sp)
  8079d4:	df000115 	stw	fp,4(sp)
  8079d8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8079dc:	00bfff04 	movi	r2,-4
  8079e0:	00c02074 	movhi	r3,129
  8079e4:	18e21604 	addi	r3,r3,-30632
  8079e8:	1885883a 	add	r2,r3,r2
  8079ec:	e0bfff15 	stw	r2,-4(fp)
  8079f0:	00000606 	br	807a0c <_do_dtors+0x40>
        (*dtor) (); 
  8079f4:	e0bfff17 	ldw	r2,-4(fp)
  8079f8:	10800017 	ldw	r2,0(r2)
  8079fc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  807a00:	e0bfff17 	ldw	r2,-4(fp)
  807a04:	10bfff04 	addi	r2,r2,-4
  807a08:	e0bfff15 	stw	r2,-4(fp)
  807a0c:	e0ffff17 	ldw	r3,-4(fp)
  807a10:	00802074 	movhi	r2,129
  807a14:	10a21604 	addi	r2,r2,-30632
  807a18:	18bff62e 	bgeu	r3,r2,8079f4 <_do_dtors+0x28>
        (*dtor) (); 
}
  807a1c:	e037883a 	mov	sp,fp
  807a20:	dfc00117 	ldw	ra,4(sp)
  807a24:	df000017 	ldw	fp,0(sp)
  807a28:	dec00204 	addi	sp,sp,8
  807a2c:	f800283a 	ret

00807a30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807a30:	defff904 	addi	sp,sp,-28
  807a34:	dfc00615 	stw	ra,24(sp)
  807a38:	df000515 	stw	fp,20(sp)
  807a3c:	df000504 	addi	fp,sp,20
  807a40:	e13ffd15 	stw	r4,-12(fp)
  807a44:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  807a48:	e0bffe17 	ldw	r2,-8(fp)
  807a4c:	10800017 	ldw	r2,0(r2)
  807a50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  807a54:	e13ffd17 	ldw	r4,-12(fp)
  807a58:	08023e00 	call	8023e0 <strlen>
  807a5c:	10800044 	addi	r2,r2,1
  807a60:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807a64:	00000d06 	br	807a9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807a68:	e0bffc17 	ldw	r2,-16(fp)
  807a6c:	11000217 	ldw	r4,8(r2)
  807a70:	e1bffb17 	ldw	r6,-20(fp)
  807a74:	e17ffd17 	ldw	r5,-12(fp)
  807a78:	080834c0 	call	80834c <memcmp>
  807a7c:	1004c03a 	cmpne	r2,r2,zero
  807a80:	1000031e 	bne	r2,zero,807a90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  807a84:	e0bffc17 	ldw	r2,-16(fp)
  807a88:	e0bfff15 	stw	r2,-4(fp)
  807a8c:	00000706 	br	807aac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  807a90:	e0bffc17 	ldw	r2,-16(fp)
  807a94:	10800017 	ldw	r2,0(r2)
  807a98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807a9c:	e0fffe17 	ldw	r3,-8(fp)
  807aa0:	e0bffc17 	ldw	r2,-16(fp)
  807aa4:	10fff01e 	bne	r2,r3,807a68 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  807aa8:	e03fff15 	stw	zero,-4(fp)
  807aac:	e0bfff17 	ldw	r2,-4(fp)
}
  807ab0:	e037883a 	mov	sp,fp
  807ab4:	dfc00117 	ldw	ra,4(sp)
  807ab8:	df000017 	ldw	fp,0(sp)
  807abc:	dec00204 	addi	sp,sp,8
  807ac0:	f800283a 	ret

00807ac4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807ac4:	defffa04 	addi	sp,sp,-24
  807ac8:	dfc00515 	stw	ra,20(sp)
  807acc:	df000415 	stw	fp,16(sp)
  807ad0:	df000404 	addi	fp,sp,16
  807ad4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  807ad8:	00802074 	movhi	r2,129
  807adc:	10a9e404 	addi	r2,r2,-22640
  807ae0:	10800017 	ldw	r2,0(r2)
  807ae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807ae8:	00003306 	br	807bb8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  807aec:	e0bffd17 	ldw	r2,-12(fp)
  807af0:	11000217 	ldw	r4,8(r2)
  807af4:	08023e00 	call	8023e0 <strlen>
  807af8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  807afc:	e0bffd17 	ldw	r2,-12(fp)
  807b00:	10c00217 	ldw	r3,8(r2)
  807b04:	e0bffc17 	ldw	r2,-16(fp)
  807b08:	1885883a 	add	r2,r3,r2
  807b0c:	10bfffc4 	addi	r2,r2,-1
  807b10:	10800003 	ldbu	r2,0(r2)
  807b14:	10803fcc 	andi	r2,r2,255
  807b18:	1080201c 	xori	r2,r2,128
  807b1c:	10bfe004 	addi	r2,r2,-128
  807b20:	10800bd8 	cmpnei	r2,r2,47
  807b24:	1000031e 	bne	r2,zero,807b34 <alt_find_file+0x70>
    {
      len -= 1;
  807b28:	e0bffc17 	ldw	r2,-16(fp)
  807b2c:	10bfffc4 	addi	r2,r2,-1
  807b30:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807b34:	e0bffc17 	ldw	r2,-16(fp)
  807b38:	1007883a 	mov	r3,r2
  807b3c:	e0bffe17 	ldw	r2,-8(fp)
  807b40:	1885883a 	add	r2,r3,r2
  807b44:	10800003 	ldbu	r2,0(r2)
  807b48:	10803fcc 	andi	r2,r2,255
  807b4c:	1080201c 	xori	r2,r2,128
  807b50:	10bfe004 	addi	r2,r2,-128
  807b54:	10800be0 	cmpeqi	r2,r2,47
  807b58:	10000a1e 	bne	r2,zero,807b84 <alt_find_file+0xc0>
  807b5c:	e0bffc17 	ldw	r2,-16(fp)
  807b60:	1007883a 	mov	r3,r2
  807b64:	e0bffe17 	ldw	r2,-8(fp)
  807b68:	1885883a 	add	r2,r3,r2
  807b6c:	10800003 	ldbu	r2,0(r2)
  807b70:	10803fcc 	andi	r2,r2,255
  807b74:	1080201c 	xori	r2,r2,128
  807b78:	10bfe004 	addi	r2,r2,-128
  807b7c:	1004c03a 	cmpne	r2,r2,zero
  807b80:	10000a1e 	bne	r2,zero,807bac <alt_find_file+0xe8>
  807b84:	e0bffd17 	ldw	r2,-12(fp)
  807b88:	11000217 	ldw	r4,8(r2)
  807b8c:	e1bffc17 	ldw	r6,-16(fp)
  807b90:	e17ffe17 	ldw	r5,-8(fp)
  807b94:	080834c0 	call	80834c <memcmp>
  807b98:	1004c03a 	cmpne	r2,r2,zero
  807b9c:	1000031e 	bne	r2,zero,807bac <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  807ba0:	e0bffd17 	ldw	r2,-12(fp)
  807ba4:	e0bfff15 	stw	r2,-4(fp)
  807ba8:	00000806 	br	807bcc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  807bac:	e0bffd17 	ldw	r2,-12(fp)
  807bb0:	10800017 	ldw	r2,0(r2)
  807bb4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807bb8:	00c02074 	movhi	r3,129
  807bbc:	18e9e404 	addi	r3,r3,-22640
  807bc0:	e0bffd17 	ldw	r2,-12(fp)
  807bc4:	10ffc91e 	bne	r2,r3,807aec <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  807bc8:	e03fff15 	stw	zero,-4(fp)
  807bcc:	e0bfff17 	ldw	r2,-4(fp)
}
  807bd0:	e037883a 	mov	sp,fp
  807bd4:	dfc00117 	ldw	ra,4(sp)
  807bd8:	df000017 	ldw	fp,0(sp)
  807bdc:	dec00204 	addi	sp,sp,8
  807be0:	f800283a 	ret

00807be4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  807be4:	defffc04 	addi	sp,sp,-16
  807be8:	df000315 	stw	fp,12(sp)
  807bec:	df000304 	addi	fp,sp,12
  807bf0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  807bf4:	00bffa04 	movi	r2,-24
  807bf8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807bfc:	e03ffe15 	stw	zero,-8(fp)
  807c00:	00001e06 	br	807c7c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  807c04:	e0bffe17 	ldw	r2,-8(fp)
  807c08:	00c02074 	movhi	r3,129
  807c0c:	18e4ef04 	addi	r3,r3,-27716
  807c10:	10800324 	muli	r2,r2,12
  807c14:	10c5883a 	add	r2,r2,r3
  807c18:	10800017 	ldw	r2,0(r2)
  807c1c:	1004c03a 	cmpne	r2,r2,zero
  807c20:	1000131e 	bne	r2,zero,807c70 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  807c24:	e0bffe17 	ldw	r2,-8(fp)
  807c28:	00c02074 	movhi	r3,129
  807c2c:	18e4ef04 	addi	r3,r3,-27716
  807c30:	10800324 	muli	r2,r2,12
  807c34:	10c7883a 	add	r3,r2,r3
  807c38:	e0bfff17 	ldw	r2,-4(fp)
  807c3c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  807c40:	00802074 	movhi	r2,129
  807c44:	10a9e804 	addi	r2,r2,-22624
  807c48:	10c00017 	ldw	r3,0(r2)
  807c4c:	e0bffe17 	ldw	r2,-8(fp)
  807c50:	1880040e 	bge	r3,r2,807c64 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  807c54:	00c02074 	movhi	r3,129
  807c58:	18e9e804 	addi	r3,r3,-22624
  807c5c:	e0bffe17 	ldw	r2,-8(fp)
  807c60:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  807c64:	e0bffe17 	ldw	r2,-8(fp)
  807c68:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  807c6c:	00000606 	br	807c88 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807c70:	e0bffe17 	ldw	r2,-8(fp)
  807c74:	10800044 	addi	r2,r2,1
  807c78:	e0bffe15 	stw	r2,-8(fp)
  807c7c:	e0bffe17 	ldw	r2,-8(fp)
  807c80:	10800810 	cmplti	r2,r2,32
  807c84:	103fdf1e 	bne	r2,zero,807c04 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  807c88:	e0bffd17 	ldw	r2,-12(fp)
}
  807c8c:	e037883a 	mov	sp,fp
  807c90:	df000017 	ldw	fp,0(sp)
  807c94:	dec00104 	addi	sp,sp,4
  807c98:	f800283a 	ret

00807c9c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  807c9c:	defffe04 	addi	sp,sp,-8
  807ca0:	dfc00115 	stw	ra,4(sp)
  807ca4:	df000015 	stw	fp,0(sp)
  807ca8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  807cac:	0009883a 	mov	r4,zero
  807cb0:	01440004 	movi	r5,4096
  807cb4:	08082700 	call	808270 <alt_icache_flush>
#endif
}
  807cb8:	e037883a 	mov	sp,fp
  807cbc:	dfc00117 	ldw	ra,4(sp)
  807cc0:	df000017 	ldw	fp,0(sp)
  807cc4:	dec00204 	addi	sp,sp,8
  807cc8:	f800283a 	ret

00807ccc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807ccc:	defff904 	addi	sp,sp,-28
  807cd0:	dfc00615 	stw	ra,24(sp)
  807cd4:	df000515 	stw	fp,20(sp)
  807cd8:	df000504 	addi	fp,sp,20
  807cdc:	e13ffc15 	stw	r4,-16(fp)
  807ce0:	e17ffd15 	stw	r5,-12(fp)
  807ce4:	e1bffe15 	stw	r6,-8(fp)
  807ce8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  807cec:	e0800217 	ldw	r2,8(fp)
  807cf0:	d8800015 	stw	r2,0(sp)
  807cf4:	e13ffc17 	ldw	r4,-16(fp)
  807cf8:	e17ffd17 	ldw	r5,-12(fp)
  807cfc:	e1bffe17 	ldw	r6,-8(fp)
  807d00:	e1ffff17 	ldw	r7,-4(fp)
  807d04:	0807ea00 	call	807ea0 <alt_iic_isr_register>
}  
  807d08:	e037883a 	mov	sp,fp
  807d0c:	dfc00117 	ldw	ra,4(sp)
  807d10:	df000017 	ldw	fp,0(sp)
  807d14:	dec00204 	addi	sp,sp,8
  807d18:	f800283a 	ret

00807d1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  807d1c:	defff904 	addi	sp,sp,-28
  807d20:	df000615 	stw	fp,24(sp)
  807d24:	df000604 	addi	fp,sp,24
  807d28:	e13ffe15 	stw	r4,-8(fp)
  807d2c:	e17fff15 	stw	r5,-4(fp)
  807d30:	e0bfff17 	ldw	r2,-4(fp)
  807d34:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807d38:	0005303a 	rdctl	r2,status
  807d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807d40:	e0fffb17 	ldw	r3,-20(fp)
  807d44:	00bfff84 	movi	r2,-2
  807d48:	1884703a 	and	r2,r3,r2
  807d4c:	1001703a 	wrctl	status,r2
  
  return context;
  807d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807d54:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  807d58:	e0fffc17 	ldw	r3,-16(fp)
  807d5c:	00800044 	movi	r2,1
  807d60:	10c4983a 	sll	r2,r2,r3
  807d64:	1007883a 	mov	r3,r2
  807d68:	00802074 	movhi	r2,129
  807d6c:	10b11904 	addi	r2,r2,-15260
  807d70:	10800017 	ldw	r2,0(r2)
  807d74:	1886b03a 	or	r3,r3,r2
  807d78:	00802074 	movhi	r2,129
  807d7c:	10b11904 	addi	r2,r2,-15260
  807d80:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807d84:	00802074 	movhi	r2,129
  807d88:	10b11904 	addi	r2,r2,-15260
  807d8c:	10800017 	ldw	r2,0(r2)
  807d90:	100170fa 	wrctl	ienable,r2
  807d94:	e0bffd17 	ldw	r2,-12(fp)
  807d98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807d9c:	e0bffa17 	ldw	r2,-24(fp)
  807da0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807da4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  807da8:	e037883a 	mov	sp,fp
  807dac:	df000017 	ldw	fp,0(sp)
  807db0:	dec00104 	addi	sp,sp,4
  807db4:	f800283a 	ret

00807db8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  807db8:	defff904 	addi	sp,sp,-28
  807dbc:	df000615 	stw	fp,24(sp)
  807dc0:	df000604 	addi	fp,sp,24
  807dc4:	e13ffe15 	stw	r4,-8(fp)
  807dc8:	e17fff15 	stw	r5,-4(fp)
  807dcc:	e0bfff17 	ldw	r2,-4(fp)
  807dd0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807dd4:	0005303a 	rdctl	r2,status
  807dd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ddc:	e0fffb17 	ldw	r3,-20(fp)
  807de0:	00bfff84 	movi	r2,-2
  807de4:	1884703a 	and	r2,r3,r2
  807de8:	1001703a 	wrctl	status,r2
  
  return context;
  807dec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  807df0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  807df4:	e0fffc17 	ldw	r3,-16(fp)
  807df8:	00800044 	movi	r2,1
  807dfc:	10c4983a 	sll	r2,r2,r3
  807e00:	0084303a 	nor	r2,zero,r2
  807e04:	1007883a 	mov	r3,r2
  807e08:	00802074 	movhi	r2,129
  807e0c:	10b11904 	addi	r2,r2,-15260
  807e10:	10800017 	ldw	r2,0(r2)
  807e14:	1886703a 	and	r3,r3,r2
  807e18:	00802074 	movhi	r2,129
  807e1c:	10b11904 	addi	r2,r2,-15260
  807e20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  807e24:	00802074 	movhi	r2,129
  807e28:	10b11904 	addi	r2,r2,-15260
  807e2c:	10800017 	ldw	r2,0(r2)
  807e30:	100170fa 	wrctl	ienable,r2
  807e34:	e0bffd17 	ldw	r2,-12(fp)
  807e38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807e3c:	e0bffa17 	ldw	r2,-24(fp)
  807e40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  807e44:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  807e48:	e037883a 	mov	sp,fp
  807e4c:	df000017 	ldw	fp,0(sp)
  807e50:	dec00104 	addi	sp,sp,4
  807e54:	f800283a 	ret

00807e58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  807e58:	defffc04 	addi	sp,sp,-16
  807e5c:	df000315 	stw	fp,12(sp)
  807e60:	df000304 	addi	fp,sp,12
  807e64:	e13ffe15 	stw	r4,-8(fp)
  807e68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807e6c:	000530fa 	rdctl	r2,ienable
  807e70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  807e74:	e0ffff17 	ldw	r3,-4(fp)
  807e78:	00800044 	movi	r2,1
  807e7c:	10c4983a 	sll	r2,r2,r3
  807e80:	1007883a 	mov	r3,r2
  807e84:	e0bffd17 	ldw	r2,-12(fp)
  807e88:	1884703a 	and	r2,r3,r2
  807e8c:	1004c03a 	cmpne	r2,r2,zero
}
  807e90:	e037883a 	mov	sp,fp
  807e94:	df000017 	ldw	fp,0(sp)
  807e98:	dec00104 	addi	sp,sp,4
  807e9c:	f800283a 	ret

00807ea0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807ea0:	defff404 	addi	sp,sp,-48
  807ea4:	dfc00b15 	stw	ra,44(sp)
  807ea8:	df000a15 	stw	fp,40(sp)
  807eac:	df000a04 	addi	fp,sp,40
  807eb0:	e13ffb15 	stw	r4,-20(fp)
  807eb4:	e17ffc15 	stw	r5,-16(fp)
  807eb8:	e1bffd15 	stw	r6,-12(fp)
  807ebc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  807ec0:	00bffa84 	movi	r2,-22
  807ec4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  807ec8:	e0bffc17 	ldw	r2,-16(fp)
  807ecc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807ed0:	e0bff917 	ldw	r2,-28(fp)
  807ed4:	10800808 	cmpgei	r2,r2,32
  807ed8:	1000291e 	bne	r2,zero,807f80 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807edc:	0005303a 	rdctl	r2,status
  807ee0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807ee4:	e0fff717 	ldw	r3,-36(fp)
  807ee8:	00bfff84 	movi	r2,-2
  807eec:	1884703a 	and	r2,r3,r2
  807ef0:	1001703a 	wrctl	status,r2
  
  return context;
  807ef4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  807ef8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  807efc:	e0bff917 	ldw	r2,-28(fp)
  807f00:	00c02074 	movhi	r3,129
  807f04:	18f14804 	addi	r3,r3,-15072
  807f08:	100490fa 	slli	r2,r2,3
  807f0c:	10c7883a 	add	r3,r2,r3
  807f10:	e0bffd17 	ldw	r2,-12(fp)
  807f14:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  807f18:	e0bff917 	ldw	r2,-28(fp)
  807f1c:	00c02074 	movhi	r3,129
  807f20:	18f14804 	addi	r3,r3,-15072
  807f24:	100490fa 	slli	r2,r2,3
  807f28:	10c5883a 	add	r2,r2,r3
  807f2c:	10c00104 	addi	r3,r2,4
  807f30:	e0bffe17 	ldw	r2,-8(fp)
  807f34:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807f38:	e0bffd17 	ldw	r2,-12(fp)
  807f3c:	1005003a 	cmpeq	r2,r2,zero
  807f40:	1000051e 	bne	r2,zero,807f58 <alt_iic_isr_register+0xb8>
  807f44:	e17ff917 	ldw	r5,-28(fp)
  807f48:	e13ffb17 	ldw	r4,-20(fp)
  807f4c:	0807d1c0 	call	807d1c <alt_ic_irq_enable>
  807f50:	e0bfff15 	stw	r2,-4(fp)
  807f54:	00000406 	br	807f68 <alt_iic_isr_register+0xc8>
  807f58:	e17ff917 	ldw	r5,-28(fp)
  807f5c:	e13ffb17 	ldw	r4,-20(fp)
  807f60:	0807db80 	call	807db8 <alt_ic_irq_disable>
  807f64:	e0bfff15 	stw	r2,-4(fp)
  807f68:	e0bfff17 	ldw	r2,-4(fp)
  807f6c:	e0bffa15 	stw	r2,-24(fp)
  807f70:	e0bff817 	ldw	r2,-32(fp)
  807f74:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807f78:	e0bff617 	ldw	r2,-40(fp)
  807f7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  807f80:	e0bffa17 	ldw	r2,-24(fp)
}
  807f84:	e037883a 	mov	sp,fp
  807f88:	dfc00117 	ldw	ra,4(sp)
  807f8c:	df000017 	ldw	fp,0(sp)
  807f90:	dec00204 	addi	sp,sp,8
  807f94:	f800283a 	ret

00807f98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  807f98:	defff904 	addi	sp,sp,-28
  807f9c:	dfc00615 	stw	ra,24(sp)
  807fa0:	df000515 	stw	fp,20(sp)
  807fa4:	df000504 	addi	fp,sp,20
  807fa8:	e13ffc15 	stw	r4,-16(fp)
  807fac:	e17ffd15 	stw	r5,-12(fp)
  807fb0:	e1bffe15 	stw	r6,-8(fp)
  807fb4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  807fb8:	e13ffd17 	ldw	r4,-12(fp)
  807fbc:	e17ffe17 	ldw	r5,-8(fp)
  807fc0:	e1bfff17 	ldw	r6,-4(fp)
  807fc4:	0804acc0 	call	804acc <open>
  807fc8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  807fcc:	e0bffb17 	ldw	r2,-20(fp)
  807fd0:	1004803a 	cmplt	r2,r2,zero
  807fd4:	10001c1e 	bne	r2,zero,808048 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  807fd8:	e0bffb17 	ldw	r2,-20(fp)
  807fdc:	00c02074 	movhi	r3,129
  807fe0:	18e4ef04 	addi	r3,r3,-27716
  807fe4:	10800324 	muli	r2,r2,12
  807fe8:	10c5883a 	add	r2,r2,r3
  807fec:	10c00017 	ldw	r3,0(r2)
  807ff0:	e0bffc17 	ldw	r2,-16(fp)
  807ff4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  807ff8:	e0bffb17 	ldw	r2,-20(fp)
  807ffc:	00c02074 	movhi	r3,129
  808000:	18e4ef04 	addi	r3,r3,-27716
  808004:	10800324 	muli	r2,r2,12
  808008:	10c5883a 	add	r2,r2,r3
  80800c:	10800104 	addi	r2,r2,4
  808010:	10c00017 	ldw	r3,0(r2)
  808014:	e0bffc17 	ldw	r2,-16(fp)
  808018:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80801c:	e0bffb17 	ldw	r2,-20(fp)
  808020:	00c02074 	movhi	r3,129
  808024:	18e4ef04 	addi	r3,r3,-27716
  808028:	10800324 	muli	r2,r2,12
  80802c:	10c5883a 	add	r2,r2,r3
  808030:	10800204 	addi	r2,r2,8
  808034:	10c00017 	ldw	r3,0(r2)
  808038:	e0bffc17 	ldw	r2,-16(fp)
  80803c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  808040:	e13ffb17 	ldw	r4,-20(fp)
  808044:	0804e340 	call	804e34 <alt_release_fd>
  }
} 
  808048:	e037883a 	mov	sp,fp
  80804c:	dfc00117 	ldw	ra,4(sp)
  808050:	df000017 	ldw	fp,0(sp)
  808054:	dec00204 	addi	sp,sp,8
  808058:	f800283a 	ret

0080805c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80805c:	defffb04 	addi	sp,sp,-20
  808060:	dfc00415 	stw	ra,16(sp)
  808064:	df000315 	stw	fp,12(sp)
  808068:	df000304 	addi	fp,sp,12
  80806c:	e13ffd15 	stw	r4,-12(fp)
  808070:	e17ffe15 	stw	r5,-8(fp)
  808074:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  808078:	01002074 	movhi	r4,129
  80807c:	2124f204 	addi	r4,r4,-27704
  808080:	e17ffd17 	ldw	r5,-12(fp)
  808084:	01800044 	movi	r6,1
  808088:	01c07fc4 	movi	r7,511
  80808c:	0807f980 	call	807f98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  808090:	01002074 	movhi	r4,129
  808094:	2124ef04 	addi	r4,r4,-27716
  808098:	e17ffe17 	ldw	r5,-8(fp)
  80809c:	000d883a 	mov	r6,zero
  8080a0:	01c07fc4 	movi	r7,511
  8080a4:	0807f980 	call	807f98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8080a8:	01002074 	movhi	r4,129
  8080ac:	2124f504 	addi	r4,r4,-27692
  8080b0:	e17fff17 	ldw	r5,-4(fp)
  8080b4:	01800044 	movi	r6,1
  8080b8:	01c07fc4 	movi	r7,511
  8080bc:	0807f980 	call	807f98 <alt_open_fd>
}  
  8080c0:	e037883a 	mov	sp,fp
  8080c4:	dfc00117 	ldw	ra,4(sp)
  8080c8:	df000017 	ldw	fp,0(sp)
  8080cc:	dec00204 	addi	sp,sp,8
  8080d0:	f800283a 	ret

008080d4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8080d4:	defffd04 	addi	sp,sp,-12
  8080d8:	dfc00215 	stw	ra,8(sp)
  8080dc:	df000115 	stw	fp,4(sp)
  8080e0:	df000104 	addi	fp,sp,4
  8080e4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8080e8:	e13fff17 	ldw	r4,-4(fp)
  8080ec:	08081240 	call	808124 <alt_busy_sleep>
}
  8080f0:	e037883a 	mov	sp,fp
  8080f4:	dfc00117 	ldw	ra,4(sp)
  8080f8:	df000017 	ldw	fp,0(sp)
  8080fc:	dec00204 	addi	sp,sp,8
  808100:	f800283a 	ret

00808104 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  808104:	deffff04 	addi	sp,sp,-4
  808108:	df000015 	stw	fp,0(sp)
  80810c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  808110:	000170fa 	wrctl	ienable,zero
}
  808114:	e037883a 	mov	sp,fp
  808118:	df000017 	ldw	fp,0(sp)
  80811c:	dec00104 	addi	sp,sp,4
  808120:	f800283a 	ret

00808124 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  808124:	defffa04 	addi	sp,sp,-24
  808128:	dfc00515 	stw	ra,20(sp)
  80812c:	df000415 	stw	fp,16(sp)
  808130:	df000404 	addi	fp,sp,16
  808134:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  808138:	008000c4 	movi	r2,3
  80813c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
  808140:	e0fffc17 	ldw	r3,-16(fp)
  808144:	008003f4 	movhi	r2,15
  808148:	10909004 	addi	r2,r2,16960
  80814c:	188b383a 	mul	r5,r3,r2
  808150:	0100bef4 	movhi	r4,763
  808154:	213c2004 	addi	r4,r4,-3968
  808158:	08087e40 	call	8087e4 <__udivsi3>
  80815c:	100b883a 	mov	r5,r2
  808160:	01200034 	movhi	r4,32768
  808164:	213fffc4 	addi	r4,r4,-1
  808168:	08087e40 	call	8087e4 <__udivsi3>
  80816c:	100b883a 	mov	r5,r2
  808170:	e13fff17 	ldw	r4,-4(fp)
  808174:	08087e40 	call	8087e4 <__udivsi3>
  808178:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80817c:	e0bffd17 	ldw	r2,-12(fp)
  808180:	1005003a 	cmpeq	r2,r2,zero
  808184:	1000281e 	bne	r2,zero,808228 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
  808188:	e03ffe15 	stw	zero,-8(fp)
  80818c:	00001606 	br	8081e8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  808190:	00a00034 	movhi	r2,32768
  808194:	10bfffc4 	addi	r2,r2,-1
  808198:	10bfffc4 	addi	r2,r2,-1
  80819c:	103ffe1e 	bne	r2,zero,808198 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8081a0:	e0fffc17 	ldw	r3,-16(fp)
  8081a4:	008003f4 	movhi	r2,15
  8081a8:	10909004 	addi	r2,r2,16960
  8081ac:	188b383a 	mul	r5,r3,r2
  8081b0:	0100bef4 	movhi	r4,763
  8081b4:	213c2004 	addi	r4,r4,-3968
  8081b8:	08087e40 	call	8087e4 <__udivsi3>
  8081bc:	100b883a 	mov	r5,r2
  8081c0:	01200034 	movhi	r4,32768
  8081c4:	213fffc4 	addi	r4,r4,-1
  8081c8:	08087e40 	call	8087e4 <__udivsi3>
  8081cc:	1007883a 	mov	r3,r2
  8081d0:	e0bfff17 	ldw	r2,-4(fp)
  8081d4:	10c5c83a 	sub	r2,r2,r3
  8081d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8081dc:	e0bffe17 	ldw	r2,-8(fp)
  8081e0:	10800044 	addi	r2,r2,1
  8081e4:	e0bffe15 	stw	r2,-8(fp)
  8081e8:	e0fffe17 	ldw	r3,-8(fp)
  8081ec:	e0bffd17 	ldw	r2,-12(fp)
  8081f0:	18bfe716 	blt	r3,r2,808190 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8081f4:	e0fffc17 	ldw	r3,-16(fp)
  8081f8:	008003f4 	movhi	r2,15
  8081fc:	10909004 	addi	r2,r2,16960
  808200:	188b383a 	mul	r5,r3,r2
  808204:	0100bef4 	movhi	r4,763
  808208:	213c2004 	addi	r4,r4,-3968
  80820c:	08087e40 	call	8087e4 <__udivsi3>
  808210:	1007883a 	mov	r3,r2
  808214:	e0bfff17 	ldw	r2,-4(fp)
  808218:	1885383a 	mul	r2,r3,r2
  80821c:	10bfffc4 	addi	r2,r2,-1
  808220:	103ffe1e 	bne	r2,zero,80821c <alt_busy_sleep+0xf8>
  808224:	00000c06 	br	808258 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  808228:	e0fffc17 	ldw	r3,-16(fp)
  80822c:	008003f4 	movhi	r2,15
  808230:	10909004 	addi	r2,r2,16960
  808234:	188b383a 	mul	r5,r3,r2
  808238:	0100bef4 	movhi	r4,763
  80823c:	213c2004 	addi	r4,r4,-3968
  808240:	08087e40 	call	8087e4 <__udivsi3>
  808244:	1007883a 	mov	r3,r2
  808248:	e0bfff17 	ldw	r2,-4(fp)
  80824c:	1885383a 	mul	r2,r3,r2
  808250:	10bfffc4 	addi	r2,r2,-1
  808254:	00bffe16 	blt	zero,r2,808250 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  808258:	0005883a 	mov	r2,zero
}
  80825c:	e037883a 	mov	sp,fp
  808260:	dfc00117 	ldw	ra,4(sp)
  808264:	df000017 	ldw	fp,0(sp)
  808268:	dec00204 	addi	sp,sp,8
  80826c:	f800283a 	ret

00808270 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  808270:	defffb04 	addi	sp,sp,-20
  808274:	df000415 	stw	fp,16(sp)
  808278:	df000404 	addi	fp,sp,16
  80827c:	e13ffe15 	stw	r4,-8(fp)
  808280:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  808284:	e0bfff17 	ldw	r2,-4(fp)
  808288:	10840070 	cmpltui	r2,r2,4097
  80828c:	1000021e 	bne	r2,zero,808298 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  808290:	00840004 	movi	r2,4096
  808294:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  808298:	e0fffe17 	ldw	r3,-8(fp)
  80829c:	e0bfff17 	ldw	r2,-4(fp)
  8082a0:	1885883a 	add	r2,r3,r2
  8082a4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8082a8:	e0bffe17 	ldw	r2,-8(fp)
  8082ac:	e0bffd15 	stw	r2,-12(fp)
  8082b0:	00000506 	br	8082c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8082b4:	e0bffd17 	ldw	r2,-12(fp)
  8082b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8082bc:	e0bffd17 	ldw	r2,-12(fp)
  8082c0:	10800804 	addi	r2,r2,32
  8082c4:	e0bffd15 	stw	r2,-12(fp)
  8082c8:	e0fffd17 	ldw	r3,-12(fp)
  8082cc:	e0bffc17 	ldw	r2,-16(fp)
  8082d0:	18bff836 	bltu	r3,r2,8082b4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8082d4:	e0bffe17 	ldw	r2,-8(fp)
  8082d8:	108007cc 	andi	r2,r2,31
  8082dc:	1005003a 	cmpeq	r2,r2,zero
  8082e0:	1000021e 	bne	r2,zero,8082ec <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8082e4:	e0bffd17 	ldw	r2,-12(fp)
  8082e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8082ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8082f0:	e037883a 	mov	sp,fp
  8082f4:	df000017 	ldw	fp,0(sp)
  8082f8:	dec00104 	addi	sp,sp,4
  8082fc:	f800283a 	ret

00808300 <atexit>:
  808300:	200b883a 	mov	r5,r4
  808304:	000d883a 	mov	r6,zero
  808308:	0009883a 	mov	r4,zero
  80830c:	000f883a 	mov	r7,zero
  808310:	08083c01 	jmpi	8083c0 <__register_exitproc>

00808314 <exit>:
  808314:	defffe04 	addi	sp,sp,-8
  808318:	000b883a 	mov	r5,zero
  80831c:	dc000015 	stw	r16,0(sp)
  808320:	dfc00115 	stw	ra,4(sp)
  808324:	2021883a 	mov	r16,r4
  808328:	08084f80 	call	8084f8 <__call_exitprocs>
  80832c:	00802074 	movhi	r2,129
  808330:	10a9e104 	addi	r2,r2,-22652
  808334:	11000017 	ldw	r4,0(r2)
  808338:	20800f17 	ldw	r2,60(r4)
  80833c:	10000126 	beq	r2,zero,808344 <exit+0x30>
  808340:	103ee83a 	callr	r2
  808344:	8009883a 	mov	r4,r16
  808348:	08088340 	call	808834 <_exit>

0080834c <memcmp>:
  80834c:	00c000c4 	movi	r3,3
  808350:	1980032e 	bgeu	r3,r6,808360 <memcmp+0x14>
  808354:	2144b03a 	or	r2,r4,r5
  808358:	10c4703a 	and	r2,r2,r3
  80835c:	10000f26 	beq	r2,zero,80839c <memcmp+0x50>
  808360:	31ffffc4 	addi	r7,r6,-1
  808364:	3000061e 	bne	r6,zero,808380 <memcmp+0x34>
  808368:	00000a06 	br	808394 <memcmp+0x48>
  80836c:	39ffffc4 	addi	r7,r7,-1
  808370:	00bfffc4 	movi	r2,-1
  808374:	21000044 	addi	r4,r4,1
  808378:	29400044 	addi	r5,r5,1
  80837c:	38800526 	beq	r7,r2,808394 <memcmp+0x48>
  808380:	20c00003 	ldbu	r3,0(r4)
  808384:	28800003 	ldbu	r2,0(r5)
  808388:	18bff826 	beq	r3,r2,80836c <memcmp+0x20>
  80838c:	1885c83a 	sub	r2,r3,r2
  808390:	f800283a 	ret
  808394:	0005883a 	mov	r2,zero
  808398:	f800283a 	ret
  80839c:	180f883a 	mov	r7,r3
  8083a0:	20c00017 	ldw	r3,0(r4)
  8083a4:	28800017 	ldw	r2,0(r5)
  8083a8:	18bfed1e 	bne	r3,r2,808360 <memcmp+0x14>
  8083ac:	31bfff04 	addi	r6,r6,-4
  8083b0:	21000104 	addi	r4,r4,4
  8083b4:	29400104 	addi	r5,r5,4
  8083b8:	39bff936 	bltu	r7,r6,8083a0 <memcmp+0x54>
  8083bc:	003fe806 	br	808360 <memcmp+0x14>

008083c0 <__register_exitproc>:
  8083c0:	defffa04 	addi	sp,sp,-24
  8083c4:	00802074 	movhi	r2,129
  8083c8:	10a9e104 	addi	r2,r2,-22652
  8083cc:	dc000015 	stw	r16,0(sp)
  8083d0:	14000017 	ldw	r16,0(r2)
  8083d4:	dd000415 	stw	r20,16(sp)
  8083d8:	2829883a 	mov	r20,r5
  8083dc:	81405217 	ldw	r5,328(r16)
  8083e0:	dcc00315 	stw	r19,12(sp)
  8083e4:	dc800215 	stw	r18,8(sp)
  8083e8:	dc400115 	stw	r17,4(sp)
  8083ec:	dfc00515 	stw	ra,20(sp)
  8083f0:	2023883a 	mov	r17,r4
  8083f4:	3027883a 	mov	r19,r6
  8083f8:	3825883a 	mov	r18,r7
  8083fc:	28002526 	beq	r5,zero,808494 <__register_exitproc+0xd4>
  808400:	29000117 	ldw	r4,4(r5)
  808404:	008007c4 	movi	r2,31
  808408:	11002716 	blt	r2,r4,8084a8 <__register_exitproc+0xe8>
  80840c:	8800101e 	bne	r17,zero,808450 <__register_exitproc+0x90>
  808410:	2105883a 	add	r2,r4,r4
  808414:	1085883a 	add	r2,r2,r2
  808418:	20c00044 	addi	r3,r4,1
  80841c:	1145883a 	add	r2,r2,r5
  808420:	0009883a 	mov	r4,zero
  808424:	15000215 	stw	r20,8(r2)
  808428:	28c00115 	stw	r3,4(r5)
  80842c:	2005883a 	mov	r2,r4
  808430:	dfc00517 	ldw	ra,20(sp)
  808434:	dd000417 	ldw	r20,16(sp)
  808438:	dcc00317 	ldw	r19,12(sp)
  80843c:	dc800217 	ldw	r18,8(sp)
  808440:	dc400117 	ldw	r17,4(sp)
  808444:	dc000017 	ldw	r16,0(sp)
  808448:	dec00604 	addi	sp,sp,24
  80844c:	f800283a 	ret
  808450:	29802204 	addi	r6,r5,136
  808454:	00800044 	movi	r2,1
  808458:	110e983a 	sll	r7,r2,r4
  80845c:	30c04017 	ldw	r3,256(r6)
  808460:	2105883a 	add	r2,r4,r4
  808464:	1085883a 	add	r2,r2,r2
  808468:	1185883a 	add	r2,r2,r6
  80846c:	19c6b03a 	or	r3,r3,r7
  808470:	14802015 	stw	r18,128(r2)
  808474:	14c00015 	stw	r19,0(r2)
  808478:	00800084 	movi	r2,2
  80847c:	30c04015 	stw	r3,256(r6)
  808480:	88bfe31e 	bne	r17,r2,808410 <__register_exitproc+0x50>
  808484:	30804117 	ldw	r2,260(r6)
  808488:	11c4b03a 	or	r2,r2,r7
  80848c:	30804115 	stw	r2,260(r6)
  808490:	003fdf06 	br	808410 <__register_exitproc+0x50>
  808494:	00802074 	movhi	r2,129
  808498:	10b18804 	addi	r2,r2,-14816
  80849c:	100b883a 	mov	r5,r2
  8084a0:	80805215 	stw	r2,328(r16)
  8084a4:	003fd606 	br	808400 <__register_exitproc+0x40>
  8084a8:	00800034 	movhi	r2,0
  8084ac:	10800004 	addi	r2,r2,0
  8084b0:	1000021e 	bne	r2,zero,8084bc <__register_exitproc+0xfc>
  8084b4:	013fffc4 	movi	r4,-1
  8084b8:	003fdc06 	br	80842c <__register_exitproc+0x6c>
  8084bc:	01006404 	movi	r4,400
  8084c0:	103ee83a 	callr	r2
  8084c4:	1007883a 	mov	r3,r2
  8084c8:	103ffa26 	beq	r2,zero,8084b4 <__register_exitproc+0xf4>
  8084cc:	80805217 	ldw	r2,328(r16)
  8084d0:	180b883a 	mov	r5,r3
  8084d4:	18000115 	stw	zero,4(r3)
  8084d8:	18800015 	stw	r2,0(r3)
  8084dc:	80c05215 	stw	r3,328(r16)
  8084e0:	18006215 	stw	zero,392(r3)
  8084e4:	18006315 	stw	zero,396(r3)
  8084e8:	0009883a 	mov	r4,zero
  8084ec:	883fc826 	beq	r17,zero,808410 <__register_exitproc+0x50>
  8084f0:	003fd706 	br	808450 <__register_exitproc+0x90>

008084f4 <register_fini>:
  8084f4:	f800283a 	ret

008084f8 <__call_exitprocs>:
  8084f8:	00802074 	movhi	r2,129
  8084fc:	10a9e104 	addi	r2,r2,-22652
  808500:	10800017 	ldw	r2,0(r2)
  808504:	defff304 	addi	sp,sp,-52
  808508:	df000b15 	stw	fp,44(sp)
  80850c:	d8800115 	stw	r2,4(sp)
  808510:	00800034 	movhi	r2,0
  808514:	10800004 	addi	r2,r2,0
  808518:	1005003a 	cmpeq	r2,r2,zero
  80851c:	d8800215 	stw	r2,8(sp)
  808520:	d8800117 	ldw	r2,4(sp)
  808524:	dd400815 	stw	r21,32(sp)
  808528:	dd000715 	stw	r20,28(sp)
  80852c:	10805204 	addi	r2,r2,328
  808530:	dfc00c15 	stw	ra,48(sp)
  808534:	ddc00a15 	stw	r23,40(sp)
  808538:	dd800915 	stw	r22,36(sp)
  80853c:	dcc00615 	stw	r19,24(sp)
  808540:	dc800515 	stw	r18,20(sp)
  808544:	dc400415 	stw	r17,16(sp)
  808548:	dc000315 	stw	r16,12(sp)
  80854c:	282b883a 	mov	r21,r5
  808550:	2039883a 	mov	fp,r4
  808554:	d8800015 	stw	r2,0(sp)
  808558:	2829003a 	cmpeq	r20,r5,zero
  80855c:	d8800117 	ldw	r2,4(sp)
  808560:	14405217 	ldw	r17,328(r2)
  808564:	88001026 	beq	r17,zero,8085a8 <__call_exitprocs+0xb0>
  808568:	ddc00017 	ldw	r23,0(sp)
  80856c:	88800117 	ldw	r2,4(r17)
  808570:	8c802204 	addi	r18,r17,136
  808574:	143fffc4 	addi	r16,r2,-1
  808578:	80000916 	blt	r16,zero,8085a0 <__call_exitprocs+0xa8>
  80857c:	05bfffc4 	movi	r22,-1
  808580:	a000151e 	bne	r20,zero,8085d8 <__call_exitprocs+0xe0>
  808584:	8409883a 	add	r4,r16,r16
  808588:	2105883a 	add	r2,r4,r4
  80858c:	1485883a 	add	r2,r2,r18
  808590:	10c02017 	ldw	r3,128(r2)
  808594:	a8c01126 	beq	r21,r3,8085dc <__call_exitprocs+0xe4>
  808598:	843fffc4 	addi	r16,r16,-1
  80859c:	85bff81e 	bne	r16,r22,808580 <__call_exitprocs+0x88>
  8085a0:	d8800217 	ldw	r2,8(sp)
  8085a4:	10003126 	beq	r2,zero,80866c <__call_exitprocs+0x174>
  8085a8:	dfc00c17 	ldw	ra,48(sp)
  8085ac:	df000b17 	ldw	fp,44(sp)
  8085b0:	ddc00a17 	ldw	r23,40(sp)
  8085b4:	dd800917 	ldw	r22,36(sp)
  8085b8:	dd400817 	ldw	r21,32(sp)
  8085bc:	dd000717 	ldw	r20,28(sp)
  8085c0:	dcc00617 	ldw	r19,24(sp)
  8085c4:	dc800517 	ldw	r18,20(sp)
  8085c8:	dc400417 	ldw	r17,16(sp)
  8085cc:	dc000317 	ldw	r16,12(sp)
  8085d0:	dec00d04 	addi	sp,sp,52
  8085d4:	f800283a 	ret
  8085d8:	8409883a 	add	r4,r16,r16
  8085dc:	88c00117 	ldw	r3,4(r17)
  8085e0:	2105883a 	add	r2,r4,r4
  8085e4:	1445883a 	add	r2,r2,r17
  8085e8:	18ffffc4 	addi	r3,r3,-1
  8085ec:	11800217 	ldw	r6,8(r2)
  8085f0:	1c001526 	beq	r3,r16,808648 <__call_exitprocs+0x150>
  8085f4:	10000215 	stw	zero,8(r2)
  8085f8:	303fe726 	beq	r6,zero,808598 <__call_exitprocs+0xa0>
  8085fc:	00c00044 	movi	r3,1
  808600:	1c06983a 	sll	r3,r3,r16
  808604:	90804017 	ldw	r2,256(r18)
  808608:	8cc00117 	ldw	r19,4(r17)
  80860c:	1884703a 	and	r2,r3,r2
  808610:	10001426 	beq	r2,zero,808664 <__call_exitprocs+0x16c>
  808614:	90804117 	ldw	r2,260(r18)
  808618:	1884703a 	and	r2,r3,r2
  80861c:	10000c1e 	bne	r2,zero,808650 <__call_exitprocs+0x158>
  808620:	2105883a 	add	r2,r4,r4
  808624:	1485883a 	add	r2,r2,r18
  808628:	11400017 	ldw	r5,0(r2)
  80862c:	e009883a 	mov	r4,fp
  808630:	303ee83a 	callr	r6
  808634:	88800117 	ldw	r2,4(r17)
  808638:	98bfc81e 	bne	r19,r2,80855c <__call_exitprocs+0x64>
  80863c:	b8800017 	ldw	r2,0(r23)
  808640:	147fd526 	beq	r2,r17,808598 <__call_exitprocs+0xa0>
  808644:	003fc506 	br	80855c <__call_exitprocs+0x64>
  808648:	8c000115 	stw	r16,4(r17)
  80864c:	003fea06 	br	8085f8 <__call_exitprocs+0x100>
  808650:	2105883a 	add	r2,r4,r4
  808654:	1485883a 	add	r2,r2,r18
  808658:	11000017 	ldw	r4,0(r2)
  80865c:	303ee83a 	callr	r6
  808660:	003ff406 	br	808634 <__call_exitprocs+0x13c>
  808664:	303ee83a 	callr	r6
  808668:	003ff206 	br	808634 <__call_exitprocs+0x13c>
  80866c:	88800117 	ldw	r2,4(r17)
  808670:	1000081e 	bne	r2,zero,808694 <__call_exitprocs+0x19c>
  808674:	89000017 	ldw	r4,0(r17)
  808678:	20000726 	beq	r4,zero,808698 <__call_exitprocs+0x1a0>
  80867c:	b9000015 	stw	r4,0(r23)
  808680:	8809883a 	mov	r4,r17
  808684:	00000000 	call	0 <__reset-0x800000>
  808688:	bc400017 	ldw	r17,0(r23)
  80868c:	883fb71e 	bne	r17,zero,80856c <__call_exitprocs+0x74>
  808690:	003fc506 	br	8085a8 <__call_exitprocs+0xb0>
  808694:	89000017 	ldw	r4,0(r17)
  808698:	882f883a 	mov	r23,r17
  80869c:	2023883a 	mov	r17,r4
  8086a0:	883fb21e 	bne	r17,zero,80856c <__call_exitprocs+0x74>
  8086a4:	003fc006 	br	8085a8 <__call_exitprocs+0xb0>

008086a8 <udivmodsi4>:
  8086a8:	29001b2e 	bgeu	r5,r4,808718 <udivmodsi4+0x70>
  8086ac:	28001a16 	blt	r5,zero,808718 <udivmodsi4+0x70>
  8086b0:	00800044 	movi	r2,1
  8086b4:	0007883a 	mov	r3,zero
  8086b8:	01c007c4 	movi	r7,31
  8086bc:	00000306 	br	8086cc <udivmodsi4+0x24>
  8086c0:	19c01326 	beq	r3,r7,808710 <udivmodsi4+0x68>
  8086c4:	18c00044 	addi	r3,r3,1
  8086c8:	28000416 	blt	r5,zero,8086dc <udivmodsi4+0x34>
  8086cc:	294b883a 	add	r5,r5,r5
  8086d0:	1085883a 	add	r2,r2,r2
  8086d4:	293ffa36 	bltu	r5,r4,8086c0 <udivmodsi4+0x18>
  8086d8:	10000d26 	beq	r2,zero,808710 <udivmodsi4+0x68>
  8086dc:	0007883a 	mov	r3,zero
  8086e0:	21400236 	bltu	r4,r5,8086ec <udivmodsi4+0x44>
  8086e4:	2149c83a 	sub	r4,r4,r5
  8086e8:	1886b03a 	or	r3,r3,r2
  8086ec:	1004d07a 	srli	r2,r2,1
  8086f0:	280ad07a 	srli	r5,r5,1
  8086f4:	103ffa1e 	bne	r2,zero,8086e0 <udivmodsi4+0x38>
  8086f8:	30000226 	beq	r6,zero,808704 <udivmodsi4+0x5c>
  8086fc:	2005883a 	mov	r2,r4
  808700:	f800283a 	ret
  808704:	1809883a 	mov	r4,r3
  808708:	2005883a 	mov	r2,r4
  80870c:	f800283a 	ret
  808710:	0007883a 	mov	r3,zero
  808714:	003ff806 	br	8086f8 <udivmodsi4+0x50>
  808718:	00800044 	movi	r2,1
  80871c:	0007883a 	mov	r3,zero
  808720:	003fef06 	br	8086e0 <udivmodsi4+0x38>

00808724 <__divsi3>:
  808724:	defffe04 	addi	sp,sp,-8
  808728:	dc000015 	stw	r16,0(sp)
  80872c:	dfc00115 	stw	ra,4(sp)
  808730:	0021883a 	mov	r16,zero
  808734:	20000c16 	blt	r4,zero,808768 <__divsi3+0x44>
  808738:	000d883a 	mov	r6,zero
  80873c:	28000e16 	blt	r5,zero,808778 <__divsi3+0x54>
  808740:	08086a80 	call	8086a8 <udivmodsi4>
  808744:	1007883a 	mov	r3,r2
  808748:	8005003a 	cmpeq	r2,r16,zero
  80874c:	1000011e 	bne	r2,zero,808754 <__divsi3+0x30>
  808750:	00c7c83a 	sub	r3,zero,r3
  808754:	1805883a 	mov	r2,r3
  808758:	dfc00117 	ldw	ra,4(sp)
  80875c:	dc000017 	ldw	r16,0(sp)
  808760:	dec00204 	addi	sp,sp,8
  808764:	f800283a 	ret
  808768:	0109c83a 	sub	r4,zero,r4
  80876c:	04000044 	movi	r16,1
  808770:	000d883a 	mov	r6,zero
  808774:	283ff20e 	bge	r5,zero,808740 <__divsi3+0x1c>
  808778:	014bc83a 	sub	r5,zero,r5
  80877c:	8021003a 	cmpeq	r16,r16,zero
  808780:	003fef06 	br	808740 <__divsi3+0x1c>

00808784 <__modsi3>:
  808784:	deffff04 	addi	sp,sp,-4
  808788:	dfc00015 	stw	ra,0(sp)
  80878c:	01800044 	movi	r6,1
  808790:	2807883a 	mov	r3,r5
  808794:	20000416 	blt	r4,zero,8087a8 <__modsi3+0x24>
  808798:	28000c16 	blt	r5,zero,8087cc <__modsi3+0x48>
  80879c:	dfc00017 	ldw	ra,0(sp)
  8087a0:	dec00104 	addi	sp,sp,4
  8087a4:	08086a81 	jmpi	8086a8 <udivmodsi4>
  8087a8:	0109c83a 	sub	r4,zero,r4
  8087ac:	28000b16 	blt	r5,zero,8087dc <__modsi3+0x58>
  8087b0:	180b883a 	mov	r5,r3
  8087b4:	01800044 	movi	r6,1
  8087b8:	08086a80 	call	8086a8 <udivmodsi4>
  8087bc:	0085c83a 	sub	r2,zero,r2
  8087c0:	dfc00017 	ldw	ra,0(sp)
  8087c4:	dec00104 	addi	sp,sp,4
  8087c8:	f800283a 	ret
  8087cc:	014bc83a 	sub	r5,zero,r5
  8087d0:	dfc00017 	ldw	ra,0(sp)
  8087d4:	dec00104 	addi	sp,sp,4
  8087d8:	08086a81 	jmpi	8086a8 <udivmodsi4>
  8087dc:	0147c83a 	sub	r3,zero,r5
  8087e0:	003ff306 	br	8087b0 <__modsi3+0x2c>

008087e4 <__udivsi3>:
  8087e4:	000d883a 	mov	r6,zero
  8087e8:	08086a81 	jmpi	8086a8 <udivmodsi4>

008087ec <__umodsi3>:
  8087ec:	01800044 	movi	r6,1
  8087f0:	08086a81 	jmpi	8086a8 <udivmodsi4>

008087f4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  8087f4:	defffd04 	addi	sp,sp,-12
  8087f8:	df000215 	stw	fp,8(sp)
  8087fc:	df000204 	addi	fp,sp,8
  808800:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  808804:	e0bfff17 	ldw	r2,-4(fp)
  808808:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80880c:	e0bffe17 	ldw	r2,-8(fp)
  808810:	1005003a 	cmpeq	r2,r2,zero
  808814:	1000021e 	bne	r2,zero,808820 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  808818:	002af070 	cmpltui	zero,zero,43969
  80881c:	00000106 	br	808824 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  808820:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  808824:	e037883a 	mov	sp,fp
  808828:	df000017 	ldw	fp,0(sp)
  80882c:	dec00104 	addi	sp,sp,4
  808830:	f800283a 	ret

00808834 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  808834:	defffd04 	addi	sp,sp,-12
  808838:	dfc00215 	stw	ra,8(sp)
  80883c:	df000115 	stw	fp,4(sp)
  808840:	df000104 	addi	fp,sp,4
  808844:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  808848:	e13fff17 	ldw	r4,-4(fp)
  80884c:	08087f40 	call	8087f4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  808850:	003fff06 	br	808850 <_exit+0x1c>
  808854:	008084f4 	movhi	r2,531
