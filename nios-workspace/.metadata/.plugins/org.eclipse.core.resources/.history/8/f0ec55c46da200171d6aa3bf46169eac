/*
 * COMPSYS303 Assignment 2 main source file.
 * Authors: Conor Hayes and Dallas Watene
 *
 */

/*
char AS;
char AP;
char LRI_t;
char StartAVI;
char VS;
char VP;
char PVARP_t;
char VRP_t;
char AEI_t;
char AVI_t;
char URI_t;
char StartRI;

#define AVI_VALUE 300
#define AEI_VALUE 800
#define PVARP_VALUE 50
#define VRP_VALUE 150
#define LRI_VALUE 950
#define URI_VALUE 900
 *
 */
#include <stdio.h>
#include "pacemaker_fsm.h"
#include <sys/alt_alarm.h>
#include <sys/alt_irq.h>
#include <altera_avalon_pio_regs.h>
#include <alt_types.h>
#include <system.h>

//Macro for making FSM variables less of a mouthful
//(sometimes they have extra names attached to them)
#define FSMVAR(NAME) NAME

//Macros for declaring and using timer ISR's, since they always do the same thing here
#define DECLARE_TIMER_ISR(NAME) alt_u32 NAME##_timer_isr(void* context) \
{ 	NAME##_t = 1; \
	printf("%s_t=%d after %d ms |||", #NAME, FSMVAR(NAME##_t), NAME##_VALUE); \
	printf("AVI:%d--AEI:%d--PVARP:%d--VRP:%d--LRI:%d--URI:%d\n", AVI_t, AEI_t, PVARP_t, VRP_t, LRI_t, URI_t); \
	return 0; }
#define TIMER_ISR(NAME) NAME##_timer_isr

//Macro for restarting a timer
#define RESTART_TIMER(NAME) \
		NAME##_t = 0; \
		alt_alarm_stop(& NAME##_timer); \
		alt_alarm_start(& NAME##_timer, NAME##_VALUE, NAME##_timer_isr, \
		& FSMVAR(NAME##_t))

int led_reg = 0x0;	//stores the current output vals for the LED's
#define DECLARE_LED_TIMER_ISR(LEDNUM) led##LEDNUM##_timer_isr(void *context) { \
			led_reg &= 1 << LEDNUM;

static alt_alarm LRI_timer,
	PVARP_timer,
	VRP_timer,
	AEI_timer,
	AVI_timer,
	URI_timer;

//timer ISR declarations
DECLARE_TIMER_ISR (URI)
DECLARE_TIMER_ISR (AVI)
DECLARE_TIMER_ISR (LRI)
DECLARE_TIMER_ISR (PVARP)
DECLARE_TIMER_ISR (VRP)
DECLARE_TIMER_ISR (AEI)

// UART
FILE* uart_fp;

alt_u32 led_timer_isr(void* context) {

}

void output() {

	//LED handling. LEDG0 represents a ventricular event while
	//LEDG1 simulates an atrial event
	if (AP) led_reg |= 0x1;
	if (VP) led_reg |= 0x2;
	if (led_reg) printf("led_reg=%d\n", led_reg);
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE,led_reg);

}

int main()
{
	reset();

	printf("Initializing pacemaker...\n");

	//setup UART file pointer
	uart_fp = fopen(UART_NAME, "r+");

	//initialise the button registers
	IOWR_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE, 0);
	int buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
	int newbuttons;

	while (1) {

			//Reset and start URI and LRI timers if necessary
			//Also start PVARP, VRP, and AEI, although they should have stopped long before
			if (FSMVAR(StartRI)) {
				printf("Starting AEI\n");
				RESTART_TIMER(URI);
				RESTART_TIMER(LRI);
				RESTART_TIMER(PVARP);
				RESTART_TIMER(VRP);
				RESTART_TIMER(AEI);
			}

			if (FSMVAR(StartAVI)) {
				printf("Starting AVI\n");
				RESTART_TIMER(AVI);
			}

			//Button handling. An atrial sense is mapped to KEY0 and a ventricular sense is mapped
			//to KEY1
			newbuttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
			if (newbuttons != buttons) {
				buttons = newbuttons;

				AS = (buttons & (1 << 0));
				VS = (buttons & (1 << 1));
			}

			tick();

			output();
		}
}
